
vtrModbusTCP-H723ZG2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029778  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011ac0  08029a48  08029a48  0002aa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803b508  0803b508  0003c508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803b510  0803b510  0003c510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0803b514  0803b514  0003c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000f78  24000000  0803b518  0003d000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RxDescripSection 00000060  24000f78  0803c490  0003df78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  24000fd8  0803c4f0  0003dfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000483c  24001038  0803c550  0003e038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24005874  0803c550  0003e874  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030447  00000000  00000000  0003e066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003936  00000000  00000000  0006e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00071de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e32  00000000  00000000  00074230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034f29  00000000  00000000  00076062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0e6  00000000  00000000  000aaf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001570ad  00000000  00000000  000d6071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022d11e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9e8  00000000  00000000  0022d164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00238b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24001038 	.word	0x24001038
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08029a1c 	.word	0x08029a1c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400103c 	.word	0x2400103c
 800030c:	08029a1c 	.word	0x08029a1c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9c0 	b.w	8000af0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	468e      	mov	lr, r1
 8000800:	4604      	mov	r4, r0
 8000802:	4688      	mov	r8, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4617      	mov	r7, r2
 800080c:	d962      	bls.n	80008d4 <__udivmoddi4+0xdc>
 800080e:	fab2 f682 	clz	r6, r2
 8000812:	b14e      	cbz	r6, 8000828 <__udivmoddi4+0x30>
 8000814:	f1c6 0320 	rsb	r3, r6, #32
 8000818:	fa01 f806 	lsl.w	r8, r1, r6
 800081c:	fa20 f303 	lsr.w	r3, r0, r3
 8000820:	40b7      	lsls	r7, r6
 8000822:	ea43 0808 	orr.w	r8, r3, r8
 8000826:	40b4      	lsls	r4, r6
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	fa1f fc87 	uxth.w	ip, r7
 8000830:	fbb8 f1fe 	udiv	r1, r8, lr
 8000834:	0c23      	lsrs	r3, r4, #16
 8000836:	fb0e 8811 	mls	r8, lr, r1, r8
 800083a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800083e:	fb01 f20c 	mul.w	r2, r1, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d909      	bls.n	800085a <__udivmoddi4+0x62>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f101 30ff 	add.w	r0, r1, #4294967295
 800084c:	f080 80ea 	bcs.w	8000a24 <__udivmoddi4+0x22c>
 8000850:	429a      	cmp	r2, r3
 8000852:	f240 80e7 	bls.w	8000a24 <__udivmoddi4+0x22c>
 8000856:	3902      	subs	r1, #2
 8000858:	443b      	add	r3, r7
 800085a:	1a9a      	subs	r2, r3, r2
 800085c:	b2a3      	uxth	r3, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800086a:	fb00 fc0c 	mul.w	ip, r0, ip
 800086e:	459c      	cmp	ip, r3
 8000870:	d909      	bls.n	8000886 <__udivmoddi4+0x8e>
 8000872:	18fb      	adds	r3, r7, r3
 8000874:	f100 32ff 	add.w	r2, r0, #4294967295
 8000878:	f080 80d6 	bcs.w	8000a28 <__udivmoddi4+0x230>
 800087c:	459c      	cmp	ip, r3
 800087e:	f240 80d3 	bls.w	8000a28 <__udivmoddi4+0x230>
 8000882:	443b      	add	r3, r7
 8000884:	3802      	subs	r0, #2
 8000886:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088a:	eba3 030c 	sub.w	r3, r3, ip
 800088e:	2100      	movs	r1, #0
 8000890:	b11d      	cbz	r5, 800089a <__udivmoddi4+0xa2>
 8000892:	40f3      	lsrs	r3, r6
 8000894:	2200      	movs	r2, #0
 8000896:	e9c5 3200 	strd	r3, r2, [r5]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d905      	bls.n	80008ae <__udivmoddi4+0xb6>
 80008a2:	b10d      	cbz	r5, 80008a8 <__udivmoddi4+0xb0>
 80008a4:	e9c5 0100 	strd	r0, r1, [r5]
 80008a8:	2100      	movs	r1, #0
 80008aa:	4608      	mov	r0, r1
 80008ac:	e7f5      	b.n	800089a <__udivmoddi4+0xa2>
 80008ae:	fab3 f183 	clz	r1, r3
 80008b2:	2900      	cmp	r1, #0
 80008b4:	d146      	bne.n	8000944 <__udivmoddi4+0x14c>
 80008b6:	4573      	cmp	r3, lr
 80008b8:	d302      	bcc.n	80008c0 <__udivmoddi4+0xc8>
 80008ba:	4282      	cmp	r2, r0
 80008bc:	f200 8105 	bhi.w	8000aca <__udivmoddi4+0x2d2>
 80008c0:	1a84      	subs	r4, r0, r2
 80008c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008c6:	2001      	movs	r0, #1
 80008c8:	4690      	mov	r8, r2
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	d0e5      	beq.n	800089a <__udivmoddi4+0xa2>
 80008ce:	e9c5 4800 	strd	r4, r8, [r5]
 80008d2:	e7e2      	b.n	800089a <__udivmoddi4+0xa2>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	f000 8090 	beq.w	80009fa <__udivmoddi4+0x202>
 80008da:	fab2 f682 	clz	r6, r2
 80008de:	2e00      	cmp	r6, #0
 80008e0:	f040 80a4 	bne.w	8000a2c <__udivmoddi4+0x234>
 80008e4:	1a8a      	subs	r2, r1, r2
 80008e6:	0c03      	lsrs	r3, r0, #16
 80008e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008ec:	b280      	uxth	r0, r0
 80008ee:	b2bc      	uxth	r4, r7
 80008f0:	2101      	movs	r1, #1
 80008f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000902:	429a      	cmp	r2, r3
 8000904:	d907      	bls.n	8000916 <__udivmoddi4+0x11e>
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	f10c 38ff 	add.w	r8, ip, #4294967295
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x11c>
 800090e:	429a      	cmp	r2, r3
 8000910:	f200 80e0 	bhi.w	8000ad4 <__udivmoddi4+0x2dc>
 8000914:	46c4      	mov	ip, r8
 8000916:	1a9b      	subs	r3, r3, r2
 8000918:	fbb3 f2fe 	udiv	r2, r3, lr
 800091c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000920:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000924:	fb02 f404 	mul.w	r4, r2, r4
 8000928:	429c      	cmp	r4, r3
 800092a:	d907      	bls.n	800093c <__udivmoddi4+0x144>
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000932:	d202      	bcs.n	800093a <__udivmoddi4+0x142>
 8000934:	429c      	cmp	r4, r3
 8000936:	f200 80ca 	bhi.w	8000ace <__udivmoddi4+0x2d6>
 800093a:	4602      	mov	r2, r0
 800093c:	1b1b      	subs	r3, r3, r4
 800093e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000942:	e7a5      	b.n	8000890 <__udivmoddi4+0x98>
 8000944:	f1c1 0620 	rsb	r6, r1, #32
 8000948:	408b      	lsls	r3, r1
 800094a:	fa22 f706 	lsr.w	r7, r2, r6
 800094e:	431f      	orrs	r7, r3
 8000950:	fa0e f401 	lsl.w	r4, lr, r1
 8000954:	fa20 f306 	lsr.w	r3, r0, r6
 8000958:	fa2e fe06 	lsr.w	lr, lr, r6
 800095c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000960:	4323      	orrs	r3, r4
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	fa1f fc87 	uxth.w	ip, r7
 800096a:	fbbe f0f9 	udiv	r0, lr, r9
 800096e:	0c1c      	lsrs	r4, r3, #16
 8000970:	fb09 ee10 	mls	lr, r9, r0, lr
 8000974:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000978:	fb00 fe0c 	mul.w	lr, r0, ip
 800097c:	45a6      	cmp	lr, r4
 800097e:	fa02 f201 	lsl.w	r2, r2, r1
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x1a0>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 3aff 	add.w	sl, r0, #4294967295
 800098a:	f080 809c 	bcs.w	8000ac6 <__udivmoddi4+0x2ce>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8099 	bls.w	8000ac6 <__udivmoddi4+0x2ce>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	eba4 040e 	sub.w	r4, r4, lr
 800099c:	fa1f fe83 	uxth.w	lr, r3
 80009a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009a4:	fb09 4413 	mls	r4, r9, r3, r4
 80009a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b0:	45a4      	cmp	ip, r4
 80009b2:	d908      	bls.n	80009c6 <__udivmoddi4+0x1ce>
 80009b4:	193c      	adds	r4, r7, r4
 80009b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80009ba:	f080 8082 	bcs.w	8000ac2 <__udivmoddi4+0x2ca>
 80009be:	45a4      	cmp	ip, r4
 80009c0:	d97f      	bls.n	8000ac2 <__udivmoddi4+0x2ca>
 80009c2:	3b02      	subs	r3, #2
 80009c4:	443c      	add	r4, r7
 80009c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ca:	eba4 040c 	sub.w	r4, r4, ip
 80009ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80009d2:	4564      	cmp	r4, ip
 80009d4:	4673      	mov	r3, lr
 80009d6:	46e1      	mov	r9, ip
 80009d8:	d362      	bcc.n	8000aa0 <__udivmoddi4+0x2a8>
 80009da:	d05f      	beq.n	8000a9c <__udivmoddi4+0x2a4>
 80009dc:	b15d      	cbz	r5, 80009f6 <__udivmoddi4+0x1fe>
 80009de:	ebb8 0203 	subs.w	r2, r8, r3
 80009e2:	eb64 0409 	sbc.w	r4, r4, r9
 80009e6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ea:	fa22 f301 	lsr.w	r3, r2, r1
 80009ee:	431e      	orrs	r6, r3
 80009f0:	40cc      	lsrs	r4, r1
 80009f2:	e9c5 6400 	strd	r6, r4, [r5]
 80009f6:	2100      	movs	r1, #0
 80009f8:	e74f      	b.n	800089a <__udivmoddi4+0xa2>
 80009fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009fe:	0c01      	lsrs	r1, r0, #16
 8000a00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a04:	b280      	uxth	r0, r0
 8000a06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4638      	mov	r0, r7
 8000a0e:	463c      	mov	r4, r7
 8000a10:	46b8      	mov	r8, r7
 8000a12:	46be      	mov	lr, r7
 8000a14:	2620      	movs	r6, #32
 8000a16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a1a:	eba2 0208 	sub.w	r2, r2, r8
 8000a1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a22:	e766      	b.n	80008f2 <__udivmoddi4+0xfa>
 8000a24:	4601      	mov	r1, r0
 8000a26:	e718      	b.n	800085a <__udivmoddi4+0x62>
 8000a28:	4610      	mov	r0, r2
 8000a2a:	e72c      	b.n	8000886 <__udivmoddi4+0x8e>
 8000a2c:	f1c6 0220 	rsb	r2, r6, #32
 8000a30:	fa2e f302 	lsr.w	r3, lr, r2
 8000a34:	40b7      	lsls	r7, r6
 8000a36:	40b1      	lsls	r1, r6
 8000a38:	fa20 f202 	lsr.w	r2, r0, r2
 8000a3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a40:	430a      	orrs	r2, r1
 8000a42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a46:	b2bc      	uxth	r4, r7
 8000a48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a4c:	0c11      	lsrs	r1, r2, #16
 8000a4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a52:	fb08 f904 	mul.w	r9, r8, r4
 8000a56:	40b0      	lsls	r0, r6
 8000a58:	4589      	cmp	r9, r1
 8000a5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a5e:	b280      	uxth	r0, r0
 8000a60:	d93e      	bls.n	8000ae0 <__udivmoddi4+0x2e8>
 8000a62:	1879      	adds	r1, r7, r1
 8000a64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a68:	d201      	bcs.n	8000a6e <__udivmoddi4+0x276>
 8000a6a:	4589      	cmp	r9, r1
 8000a6c:	d81f      	bhi.n	8000aae <__udivmoddi4+0x2b6>
 8000a6e:	eba1 0109 	sub.w	r1, r1, r9
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fb09 f804 	mul.w	r8, r9, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a84:	4542      	cmp	r2, r8
 8000a86:	d229      	bcs.n	8000adc <__udivmoddi4+0x2e4>
 8000a88:	18ba      	adds	r2, r7, r2
 8000a8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a8e:	d2c4      	bcs.n	8000a1a <__udivmoddi4+0x222>
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d2c2      	bcs.n	8000a1a <__udivmoddi4+0x222>
 8000a94:	f1a9 0102 	sub.w	r1, r9, #2
 8000a98:	443a      	add	r2, r7
 8000a9a:	e7be      	b.n	8000a1a <__udivmoddi4+0x222>
 8000a9c:	45f0      	cmp	r8, lr
 8000a9e:	d29d      	bcs.n	80009dc <__udivmoddi4+0x1e4>
 8000aa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000aa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	e796      	b.n	80009dc <__udivmoddi4+0x1e4>
 8000aae:	eba7 0909 	sub.w	r9, r7, r9
 8000ab2:	4449      	add	r1, r9
 8000ab4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ab8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abc:	fb09 f804 	mul.w	r8, r9, r4
 8000ac0:	e7db      	b.n	8000a7a <__udivmoddi4+0x282>
 8000ac2:	4673      	mov	r3, lr
 8000ac4:	e77f      	b.n	80009c6 <__udivmoddi4+0x1ce>
 8000ac6:	4650      	mov	r0, sl
 8000ac8:	e766      	b.n	8000998 <__udivmoddi4+0x1a0>
 8000aca:	4608      	mov	r0, r1
 8000acc:	e6fd      	b.n	80008ca <__udivmoddi4+0xd2>
 8000ace:	443b      	add	r3, r7
 8000ad0:	3a02      	subs	r2, #2
 8000ad2:	e733      	b.n	800093c <__udivmoddi4+0x144>
 8000ad4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ad8:	443b      	add	r3, r7
 8000ada:	e71c      	b.n	8000916 <__udivmoddi4+0x11e>
 8000adc:	4649      	mov	r1, r9
 8000ade:	e79c      	b.n	8000a1a <__udivmoddi4+0x222>
 8000ae0:	eba1 0109 	sub.w	r1, r1, r9
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aea:	fb09 f804 	mul.w	r8, r9, r4
 8000aee:	e7c4      	b.n	8000a7a <__udivmoddi4+0x282>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e01a      	b.n	8000b3a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4810      	ldr	r0, [pc, #64]	@ (8000b4c <mg_random+0x58>)
 8000b0c:	f005 fd4c 	bl	80065a8 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	18d0      	adds	r0, r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d203      	bcs.n	8000b28 <mg_random+0x34>
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	e000      	b.n	8000b2a <mg_random+0x36>
 8000b28:	2304      	movs	r3, #4
 8000b2a:	f107 0108 	add.w	r1, r7, #8
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f026 ff67 	bl	8027a02 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3304      	adds	r3, #4
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3e0      	bcc.n	8000b04 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24001190 	.word	0x24001190

08000b50 <mg_millis>:

uint64_t mg_millis(void) {
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b54:	f001 fb0a 	bl	800216c <HAL_GetTick>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	461c      	mov	r4, r3
 8000b5e:	4615      	mov	r5, r2
 8000b60:	4622      	mov	r2, r4
 8000b62:	462b      	mov	r3, r5
}
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b6c <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d002      	beq.n	8000b84 <_write+0x18>
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d107      	bne.n	8000b94 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <_write+0x34>)
 8000b90:	f005 fe5f 	bl	8006852 <HAL_UART_Transmit>
  }
  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240011a4 	.word	0x240011a4

08000ba4 <http_event_handler>:

static void http_event_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
	if (ev == MG_EV_HTTP_MSG) {
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b0b      	cmp	r3, #11
 8000bb6:	d12c      	bne.n	8000c12 <http_event_handler+0x6e>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	617b      	str	r3, [r7, #20]
    size_t copy_len = hm->body.len < MAX_RESPONSE_SIZE - 1 ? hm->body.len : MAX_RESPONSE_SIZE - 1;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000bc2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	bf28      	it	cs
 8000bca:	4613      	movcs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
    memcpy(response_buf, hm->body.buf, copy_len);
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4816      	ldr	r0, [pc, #88]	@ (8000c34 <http_event_handler+0x90>)
 8000bda:	f026 ff12 	bl	8027a02 <memcpy>
    response_buf[copy_len] = '\0';
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <http_event_handler+0x90>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
    response_len = copy_len;
 8000be8:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <http_event_handler+0x94>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6013      	str	r3, [r2, #0]
    printf("HTTP Response: %.*s\r\n", (int) response_len, response_buf);
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <http_event_handler+0x94>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <http_event_handler+0x90>)
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <http_event_handler+0x98>)
 8000bf8:	f026 fc1c 	bl	8027434 <iprintf>
    request_done = true;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <http_event_handler+0x9c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    c->is_closing = 1;
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  } else if (ev == MG_EV_CLOSE && !request_done) {
    printf("HTTP request failed or connection closed early\r\n");
  }
}
 8000c10:	e00c      	b.n	8000c2c <http_event_handler+0x88>
  } else if (ev == MG_EV_CLOSE && !request_done) {
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b09      	cmp	r3, #9
 8000c16:	d109      	bne.n	8000c2c <http_event_handler+0x88>
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <http_event_handler+0x9c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <http_event_handler+0x88>
    printf("HTTP request failed or connection closed early\r\n");
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <http_event_handler+0xa0>)
 8000c28:	f026 fca8 	bl	802757c <puts>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24001238 	.word	0x24001238
 8000c38:	24002238 	.word	0x24002238
 8000c3c:	08029a48 	.word	0x08029a48
 8000c40:	2400223c 	.word	0x2400223c
 8000c44:	08029a60 	.word	0x08029a60

08000c48 <perform_http_data_read>:


void perform_http_data_read(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  request_done = false;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <perform_http_data_read+0x84>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]

  // Use the global manager directly
  struct mg_connection *c = mg_http_connect(&g_mgr, API_URL, http_event_handler, NULL);
 8000c54:	2300      	movs	r3, #0
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <perform_http_data_read+0x88>)
 8000c58:	491e      	ldr	r1, [pc, #120]	@ (8000cd4 <perform_http_data_read+0x8c>)
 8000c5a:	481f      	ldr	r0, [pc, #124]	@ (8000cd8 <perform_http_data_read+0x90>)
 8000c5c:	f00c fd3e 	bl	800d6dc <mg_http_connect>
 8000c60:	6078      	str	r0, [r7, #4]
  if (c == NULL) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d103      	bne.n	8000c70 <perform_http_data_read+0x28>
    printf("HTTP connect failed\r\n");
 8000c68:	481c      	ldr	r0, [pc, #112]	@ (8000cdc <perform_http_data_read+0x94>)
 8000c6a:	f026 fc87 	bl	802757c <puts>
    return;
 8000c6e:	e029      	b.n	8000cc4 <perform_http_data_read+0x7c>
  }

  // Send GET request
  mg_printf(c, "GET %s HTTP/1.0\r\nHost: 192.168.1.233\r\n\r\n", "/api/stats?start=-1h&stop=now()");
 8000c70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce0 <perform_http_data_read+0x98>)
 8000c72:	491c      	ldr	r1, [pc, #112]	@ (8000ce4 <perform_http_data_read+0x9c>)
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f00d ffd5 	bl	800ec24 <mg_printf>

  // Poll until request is done or timeout hits
  uint32_t start = HAL_GetTick();
 8000c7a:	f001 fa77 	bl	800216c <HAL_GetTick>
 8000c7e:	6038      	str	r0, [r7, #0]
  while (!request_done && HAL_GetTick() - start < 5000) {
 8000c80:	e006      	b.n	8000c90 <perform_http_data_read+0x48>
    mg_mgr_poll(&g_mgr, 1);  // Poll for events
 8000c82:	2101      	movs	r1, #1
 8000c84:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <perform_http_data_read+0x90>)
 8000c86:	f011 ffd7 	bl	8012c38 <mg_mgr_poll>
    HAL_Delay(1);            // Give other threads (like LWIP) time to breathe
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f001 fa7a 	bl	8002184 <HAL_Delay>
  while (!request_done && HAL_GetTick() - start < 5000) {
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <perform_http_data_read+0x84>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	f083 0301 	eor.w	r3, r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d008      	beq.n	8000cb0 <perform_http_data_read+0x68>
 8000c9e:	f001 fa65 	bl	800216c <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d9e8      	bls.n	8000c82 <perform_http_data_read+0x3a>
  }

  if (!request_done) {
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <perform_http_data_read+0x84>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <perform_http_data_read+0x7c>
    printf("Request timed out\r\n");
 8000cbe:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <perform_http_data_read+0xa0>)
 8000cc0:	f026 fc5c 	bl	802757c <puts>
  }
}
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2400223c 	.word	0x2400223c
 8000cd0:	08000ba5 	.word	0x08000ba5
 8000cd4:	08029a90 	.word	0x08029a90
 8000cd8:	240056b8 	.word	0x240056b8
 8000cdc:	08029acc 	.word	0x08029acc
 8000ce0:	08029ae4 	.word	0x08029ae4
 8000ce4:	08029b04 	.word	0x08029b04
 8000ce8:	08029b30 	.word	0x08029b30

08000cec <wait_for_network_ready>:


void wait_for_network_ready(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t start = HAL_GetTick();
 8000cf2:	f001 fa3b 	bl	800216c <HAL_GetTick>
 8000cf6:	6078      	str	r0, [r7, #4]
  while (HAL_GetTick() - start < 500) {
 8000cf8:	e004      	b.n	8000d04 <wait_for_network_ready+0x18>
    mongoose_poll();   // gives time for ARP retry and TCP/IP setup
 8000cfa:	f024 fe61 	bl	80259c0 <mongoose_poll>
    HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f001 fa40 	bl	8002184 <HAL_Delay>
  while (HAL_GetTick() - start < 500) {
 8000d04:	f001 fa32 	bl	800216c <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d12:	d3f2      	bcc.n	8000cfa <wait_for_network_ready+0xe>
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <collect_plc_data>:

void collect_plc_data(PLC_Snapshot *snapshot) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    uint16_t val;

    // Read status_bits[0..3] from registers 1000–1003
    for (int i = 0; i < 4; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e024      	b.n	8000d78 <collect_plc_data+0x58>
        glue_modbus_read_reg(1000 + i, &val);
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	f107 020e 	add.w	r2, r7, #14
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f022 fbfe 	bl	8023540 <glue_modbus_read_reg>
        snapshot->status_bits[i] = val;
 8000d44:	89f9      	ldrh	r1, [r7, #14]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        MG_INFO(("status_bits[%d] (reg %d) = %04X", i, 1000 + i, val));
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <collect_plc_data+0xe8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	dd0d      	ble.n	8000d72 <collect_plc_data+0x52>
 8000d56:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <collect_plc_data+0xec>)
 8000d58:	22bc      	movs	r2, #188	@ 0xbc
 8000d5a:	492d      	ldr	r1, [pc, #180]	@ (8000e10 <collect_plc_data+0xf0>)
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f00d fe05 	bl	800e96c <mg_log_prefix>
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	6979      	ldr	r1, [r7, #20]
 8000d6c:	4829      	ldr	r0, [pc, #164]	@ (8000e14 <collect_plc_data+0xf4>)
 8000d6e:	f00d fe4d 	bl	800ea0c <mg_log>
    for (int i = 0; i < 4; i++) {
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	ddd7      	ble.n	8000d2e <collect_plc_data+0xe>
    }

    // Read data_words[0..105] from registers 1004–1109
    for (int i = 0; i < 106; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e02b      	b.n	8000ddc <collect_plc_data+0xbc>
        glue_modbus_read_reg(1004 + i, &val);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f107 020e 	add.w	r2, r7, #14
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f022 fbd3 	bl	8023540 <glue_modbus_read_reg>
        snapshot->data_words[i] = val;
 8000d9a:	89f9      	ldrh	r1, [r7, #14]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	3204      	adds	r2, #4
 8000da2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if (i < 20 || i > 100) {  // Limit log volume
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	2b13      	cmp	r3, #19
 8000daa:	dd02      	ble.n	8000db2 <collect_plc_data+0x92>
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b64      	cmp	r3, #100	@ 0x64
 8000db0:	dd11      	ble.n	8000dd6 <collect_plc_data+0xb6>
            MG_INFO(("data_words[%d] (reg %d) = %04X", i, 1004 + i, val));
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <collect_plc_data+0xe8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	dd0d      	ble.n	8000dd6 <collect_plc_data+0xb6>
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <collect_plc_data+0xec>)
 8000dbc:	22c4      	movs	r2, #196	@ 0xc4
 8000dbe:	4914      	ldr	r1, [pc, #80]	@ (8000e10 <collect_plc_data+0xf0>)
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f00d fdd3 	bl	800e96c <mg_log_prefix>
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	f503 727b 	add.w	r2, r3, #1004	@ 0x3ec
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <collect_plc_data+0xf8>)
 8000dd2:	f00d fe1b 	bl	800ea0c <mg_log>
    for (int i = 0; i < 106; i++) {
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b69      	cmp	r3, #105	@ 0x69
 8000de0:	ddd0      	ble.n	8000d84 <collect_plc_data+0x64>
        }
    }

    MG_INFO(("Snapshot struct size: %d", (int) sizeof(PLC_Snapshot)));
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <collect_plc_data+0xe8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	dd09      	ble.n	8000dfe <collect_plc_data+0xde>
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <collect_plc_data+0xec>)
 8000dec:	22c8      	movs	r2, #200	@ 0xc8
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <collect_plc_data+0xf0>)
 8000df0:	2002      	movs	r0, #2
 8000df2:	f00d fdbb 	bl	800e96c <mg_log_prefix>
 8000df6:	21dc      	movs	r1, #220	@ 0xdc
 8000df8:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <collect_plc_data+0xfc>)
 8000dfa:	f00d fe07 	bl	800ea0c <mg_log>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24000258 	.word	0x24000258
 8000e0c:	0802d50c 	.word	0x0802d50c
 8000e10:	08029b44 	.word	0x08029b44
 8000e14:	08029b58 	.word	0x08029b58
 8000e18:	08029b78 	.word	0x08029b78
 8000e1c:	08029b98 	.word	0x08029b98

08000e20 <write_snapshot_to_nfc>:



void write_snapshot_to_nfc(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	f5ad 6da7 	sub.w	sp, sp, #1336	@ 0x538
 8000e26:	af04      	add	r7, sp, #16
    uint16_t i2c_addr = 0x53 << 1;        // 0xA6
 8000e28:	23a6      	movs	r3, #166	@ 0xa6
 8000e2a:	f8a7 351a 	strh.w	r3, [r7, #1306]	@ 0x51a
    uint16_t mem_addr = 0x0008;           // NDEF message start offset
 8000e2e:	2308      	movs	r3, #8
 8000e30:	f8a7 3518 	strh.w	r3, [r7, #1304]	@ 0x518
    HAL_StatusTypeDef status;

    PLC_Snapshot snapshot;
    collect_plc_data(&snapshot); // Assume this populates the snapshot struct
 8000e34:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff71 	bl	8000d20 <collect_plc_data>

    printf("Snapshot size: %u\n", (unsigned int) sizeof(snapshot));
 8000e3e:	21dc      	movs	r1, #220	@ 0xdc
 8000e40:	48db      	ldr	r0, [pc, #876]	@ (80011b0 <write_snapshot_to_nfc+0x390>)
 8000e42:	f026 faf7 	bl	8027434 <iprintf>
    printf("Float count: %d\n", number_count);
 8000e46:	4bdb      	ldr	r3, [pc, #876]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	48da      	ldr	r0, [pc, #872]	@ (80011b8 <write_snapshot_to_nfc+0x398>)
 8000e4e:	f026 faf1 	bl	8027434 <iprintf>

    if (number_count == 0 || number_count > 64) {
 8000e52:	4bd8      	ldr	r3, [pc, #864]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <write_snapshot_to_nfc+0x42>
 8000e5a:	4bd6      	ldr	r3, [pc, #856]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b40      	cmp	r3, #64	@ 0x40
 8000e60:	dd06      	ble.n	8000e70 <write_snapshot_to_nfc+0x50>
        printf("Invalid float count: %d\n", number_count);
 8000e62:	4bd4      	ldr	r3, [pc, #848]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4619      	mov	r1, r3
 8000e68:	48d4      	ldr	r0, [pc, #848]	@ (80011bc <write_snapshot_to_nfc+0x39c>)
 8000e6a:	f026 fae3 	bl	8027434 <iprintf>
        return;
 8000e6e:	e1d5      	b.n	800121c <write_snapshot_to_nfc+0x3fc>
    }

    // Prepare combined payload: [snapshot][count][floats]
    size_t snapshot_size = sizeof(snapshot);
 8000e70:	23dc      	movs	r3, #220	@ 0xdc
 8000e72:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    size_t float_bytes = 1 + number_count * sizeof(float);
 8000e76:	4bcf      	ldr	r3, [pc, #828]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f8c7 3510 	str.w	r3, [r7, #1296]	@ 0x510
    size_t payload_length = snapshot_size + float_bytes;
 8000e82:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 8000e86:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c

    uint8_t payload[MAX_PAYLOAD_SIZE];
    if (payload_length > MAX_PAYLOAD_SIZE) {
 8000e90:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e98:	d903      	bls.n	8000ea2 <write_snapshot_to_nfc+0x82>
        printf("Error: Payload is too large for the buffer!\n");
 8000e9a:	48c9      	ldr	r0, [pc, #804]	@ (80011c0 <write_snapshot_to_nfc+0x3a0>)
 8000e9c:	f026 fb6e 	bl	802757c <puts>
        return;
 8000ea0:	e1bc      	b.n	800121c <write_snapshot_to_nfc+0x3fc>
    }

    memcpy(payload, &snapshot, snapshot_size);
 8000ea2:	f207 411c 	addw	r1, r7, #1052	@ 0x41c
 8000ea6:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8000eaa:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f026 fda7 	bl	8027a02 <memcpy>
    payload[snapshot_size] = (uint8_t) number_count;
 8000eb4:	4bbf      	ldr	r3, [pc, #764]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b2d9      	uxtb	r1, r3
 8000eba:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000ebe:	f5a3 7243 	sub.w	r2, r3, #780	@ 0x30c
 8000ec2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8000ec6:	4413      	add	r3, r2
 8000ec8:	460a      	mov	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
    memcpy(&payload[snapshot_size + 1], extracted_numbers, number_count * sizeof(float));
 8000ecc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4ab6      	ldr	r2, [pc, #728]	@ (80011b4 <write_snapshot_to_nfc+0x394>)
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	49b9      	ldr	r1, [pc, #740]	@ (80011c4 <write_snapshot_to_nfc+0x3a4>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f026 fd8e 	bl	8027a02 <memcpy>

    const char* mime_type = "application/octet-stream";
 8000ee6:	4bb8      	ldr	r3, [pc, #736]	@ (80011c8 <write_snapshot_to_nfc+0x3a8>)
 8000ee8:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
    uint8_t type_length = strlen(mime_type);
 8000eec:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 8000ef0:	f7ff fa6e 	bl	80003d0 <strlen>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f887 3507 	strb.w	r3, [r7, #1287]	@ 0x507
    uint8_t ndef_header_size = 1 + 1 + 4;
 8000efa:	2306      	movs	r3, #6
 8000efc:	f887 3506 	strb.w	r3, [r7, #1286]	@ 0x506
    uint32_t ndef_record_length = ndef_header_size + type_length + payload_length;
 8000f00:	f897 2506 	ldrb.w	r2, [r7, #1286]	@ 0x506
 8000f04:	f897 3507 	ldrb.w	r3, [r7, #1287]	@ 0x507
 8000f08:	4413      	add	r3, r2
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000f10:	4413      	add	r3, r2
 8000f12:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500

    uint8_t ndef_buffer[MAX_NDEF_SIZE];
    uint16_t total_ndef_message_size = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8a7 3526 	strh.w	r3, [r7, #1318]	@ 0x526

    ndef_buffer[total_ndef_message_size++] = 0x03;  // TLV type
 8000f1c:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000f26:	461a      	mov	r2, r3
 8000f28:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000f2c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000f30:	2103      	movs	r1, #3
 8000f32:	5499      	strb	r1, [r3, r2]

    if (ndef_record_length < 0xFF) {
 8000f34:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000f38:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f3a:	d80e      	bhi.n	8000f5a <write_snapshot_to_nfc+0x13a>
        ndef_buffer[total_ndef_message_size++] = (uint8_t) ndef_record_length;
 8000f3c:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000f46:	461a      	mov	r2, r3
 8000f48:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000f52:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000f56:	5499      	strb	r1, [r3, r2]
 8000f58:	e028      	b.n	8000fac <write_snapshot_to_nfc+0x18c>
    } else {
        ndef_buffer[total_ndef_message_size++] = 0xFF;
 8000f5a:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000f64:	461a      	mov	r2, r3
 8000f66:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000f6a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000f6e:	21ff      	movs	r1, #255	@ 0xff
 8000f70:	5499      	strb	r1, [r3, r2]
        ndef_buffer[total_ndef_message_size++] = (ndef_record_length >> 8) & 0xFF;
 8000f72:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000f76:	0a19      	lsrs	r1, r3, #8
 8000f78:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000f82:	461a      	mov	r2, r3
 8000f84:	b2c9      	uxtb	r1, r1
 8000f86:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000f8a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000f8e:	5499      	strb	r1, [r3, r2]
        ndef_buffer[total_ndef_message_size++] = ndef_record_length & 0xFF;
 8000f90:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000fa0:	b2d9      	uxtb	r1, r3
 8000fa2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000fa6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000faa:	5499      	strb	r1, [r3, r2]
    }

    ndef_buffer[total_ndef_message_size++] = 0xC2; // MB=1, ME=1, SR=0, TNF=MIME
 8000fac:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000fbc:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000fc0:	21c2      	movs	r1, #194	@ 0xc2
 8000fc2:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = type_length;
 8000fc4:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000fd4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000fd8:	f897 2507 	ldrb.w	r2, [r7, #1287]	@ 0x507
 8000fdc:	545a      	strb	r2, [r3, r1]

    ndef_buffer[total_ndef_message_size++] = (payload_length >> 24) & 0xFF;
 8000fde:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000fe2:	0e19      	lsrs	r1, r3, #24
 8000fe4:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8000fee:	461a      	mov	r2, r3
 8000ff0:	b2c9      	uxtb	r1, r1
 8000ff2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000ff6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8000ffa:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = (payload_length >> 16) & 0xFF;
 8000ffc:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8001000:	0c19      	lsrs	r1, r3, #16
 8001002:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 800100c:	461a      	mov	r2, r3
 800100e:	b2c9      	uxtb	r1, r1
 8001010:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001014:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001018:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = (payload_length >> 8) & 0xFF;
 800101a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 800101e:	0a19      	lsrs	r1, r3, #8
 8001020:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 800102a:	461a      	mov	r2, r3
 800102c:	b2c9      	uxtb	r1, r1
 800102e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001032:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001036:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = payload_length & 0xFF;
 8001038:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 8001042:	461a      	mov	r2, r3
 8001044:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8001048:	b2d9      	uxtb	r1, r3
 800104a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800104e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001052:	5499      	strb	r1, [r3, r2]

    memcpy(&ndef_buffer[total_ndef_message_size], mime_type, type_length);
 8001054:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8001058:	463a      	mov	r2, r7
 800105a:	4413      	add	r3, r2
 800105c:	f897 2507 	ldrb.w	r2, [r7, #1287]	@ 0x507
 8001060:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 8001064:	4618      	mov	r0, r3
 8001066:	f026 fccc 	bl	8027a02 <memcpy>
    total_ndef_message_size += type_length;
 800106a:	f897 3507 	ldrb.w	r3, [r7, #1287]	@ 0x507
 800106e:	b29a      	uxth	r2, r3
 8001070:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8001074:	4413      	add	r3, r2
 8001076:	f8a7 3526 	strh.w	r3, [r7, #1318]	@ 0x526

    memcpy(&ndef_buffer[total_ndef_message_size], payload, payload_length);
 800107a:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 800107e:	463a      	mov	r2, r7
 8001080:	4413      	add	r3, r2
 8001082:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 8001086:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 800108a:	4618      	mov	r0, r3
 800108c:	f026 fcb9 	bl	8027a02 <memcpy>
    total_ndef_message_size += payload_length;
 8001090:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8001094:	b29a      	uxth	r2, r3
 8001096:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 800109a:	4413      	add	r3, r2
 800109c:	f8a7 3526 	strh.w	r3, [r7, #1318]	@ 0x526

    ndef_buffer[total_ndef_message_size++] = 0xFE;
 80010a0:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	f8a7 2526 	strh.w	r2, [r7, #1318]	@ 0x526
 80010aa:	461a      	mov	r2, r3
 80010ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80010b0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80010b4:	21fe      	movs	r1, #254	@ 0xfe
 80010b6:	5499      	strb	r1, [r3, r2]

    printf("Payload + floats total: %lu\n", (unsigned long) payload_length);
 80010b8:	f8d7 150c 	ldr.w	r1, [r7, #1292]	@ 0x50c
 80010bc:	4843      	ldr	r0, [pc, #268]	@ (80011cc <write_snapshot_to_nfc+0x3ac>)
 80010be:	f026 f9b9 	bl	8027434 <iprintf>
    printf("NDEF Record length: %u\n", ndef_record_length);
 80010c2:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 80010c6:	4842      	ldr	r0, [pc, #264]	@ (80011d0 <write_snapshot_to_nfc+0x3b0>)
 80010c8:	f026 f9b4 	bl	8027434 <iprintf>
    printf("Total NDEF Message to Write (including TLV and Terminator): %u bytes\n", total_ndef_message_size);
 80010cc:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 80010d0:	4619      	mov	r1, r3
 80010d2:	4840      	ldr	r0, [pc, #256]	@ (80011d4 <write_snapshot_to_nfc+0x3b4>)
 80010d4:	f026 f9ae 	bl	8027434 <iprintf>

    printf("NFC TLV Dump (%d bytes):\n", total_ndef_message_size);
 80010d8:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 80010dc:	4619      	mov	r1, r3
 80010de:	483e      	ldr	r0, [pc, #248]	@ (80011d8 <write_snapshot_to_nfc+0x3b8>)
 80010e0:	f026 f9a8 	bl	8027434 <iprintf>
    for (int j = 0; j < total_ndef_message_size; j++) {
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80010ea:	e01b      	b.n	8001124 <write_snapshot_to_nfc+0x304>
        if (j % 16 == 0) printf("\n%04X  ", j);
 80010ec:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <write_snapshot_to_nfc+0x2e2>
 80010f8:	f8d7 1520 	ldr.w	r1, [r7, #1312]	@ 0x520
 80010fc:	4837      	ldr	r0, [pc, #220]	@ (80011dc <write_snapshot_to_nfc+0x3bc>)
 80010fe:	f026 f999 	bl	8027434 <iprintf>
        printf("%02X ", ndef_buffer[j]);
 8001102:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001106:	f5a3 62a5 	sub.w	r2, r3, #1320	@ 0x528
 800110a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	4832      	ldr	r0, [pc, #200]	@ (80011e0 <write_snapshot_to_nfc+0x3c0>)
 8001116:	f026 f98d 	bl	8027434 <iprintf>
    for (int j = 0; j < total_ndef_message_size; j++) {
 800111a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800111e:	3301      	adds	r3, #1
 8001120:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8001124:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8001128:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 800112c:	429a      	cmp	r2, r3
 800112e:	dbdd      	blt.n	80010ec <write_snapshot_to_nfc+0x2cc>
    }
    printf("\n");
 8001130:	200a      	movs	r0, #10
 8001132:	f026 f9c5 	bl	80274c0 <putchar>

    // Chunked write to NFC
    const uint16_t MAX_CHUNK_SIZE = 128;
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe
    uint16_t bytes_remaining = total_ndef_message_size;
 800113c:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	@ 0x526
 8001140:	f8a7 351e 	strh.w	r3, [r7, #1310]	@ 0x51e
    uint16_t offset = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	f8a7 351c 	strh.w	r3, [r7, #1308]	@ 0x51c

    while (bytes_remaining > 0) {
 800114a:	e060      	b.n	800120e <write_snapshot_to_nfc+0x3ee>
        uint16_t chunk_size = (bytes_remaining > MAX_CHUNK_SIZE) ? MAX_CHUNK_SIZE : bytes_remaining;
 800114c:	f8b7 251e 	ldrh.w	r2, [r7, #1310]	@ 0x51e
 8001150:	f8b7 34fe 	ldrh.w	r3, [r7, #1278]	@ 0x4fe
 8001154:	4293      	cmp	r3, r2
 8001156:	bf28      	it	cs
 8001158:	4613      	movcs	r3, r2
 800115a:	f8a7 34fc 	strh.w	r3, [r7, #1276]	@ 0x4fc

        status = HAL_I2C_Mem_Write(&hi2c1, i2c_addr, mem_addr + offset,
 800115e:	f8b7 2518 	ldrh.w	r2, [r7, #1304]	@ 0x518
 8001162:	f8b7 351c 	ldrh.w	r3, [r7, #1308]	@ 0x51c
 8001166:	4413      	add	r3, r2
 8001168:	b298      	uxth	r0, r3
                                   I2C_MEMADD_SIZE_16BIT,
                                   &ndef_buffer[offset], chunk_size,
 800116a:	f8b7 351c 	ldrh.w	r3, [r7, #1308]	@ 0x51c
        status = HAL_I2C_Mem_Write(&hi2c1, i2c_addr, mem_addr + offset,
 800116e:	463a      	mov	r2, r7
 8001170:	4413      	add	r3, r2
 8001172:	f8b7 151a 	ldrh.w	r1, [r7, #1306]	@ 0x51a
 8001176:	f04f 32ff 	mov.w	r2, #4294967295
 800117a:	9202      	str	r2, [sp, #8]
 800117c:	f8b7 24fc 	ldrh.w	r2, [r7, #1276]	@ 0x4fc
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	4602      	mov	r2, r0
 8001188:	4816      	ldr	r0, [pc, #88]	@ (80011e4 <write_snapshot_to_nfc+0x3c4>)
 800118a:	f001 ffed 	bl	8003168 <HAL_I2C_Mem_Write>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 34fb 	strb.w	r3, [r7, #1275]	@ 0x4fb
                                   HAL_MAX_DELAY);

        if (status != HAL_OK) {
 8001194:	f897 34fb 	ldrb.w	r3, [r7, #1275]	@ 0x4fb
 8001198:	2b00      	cmp	r3, #0
 800119a:	d027      	beq.n	80011ec <write_snapshot_to_nfc+0x3cc>
            printf("I2C chunk write failed at offset %d, status: %d\n", offset, status);
 800119c:	f8b7 351c 	ldrh.w	r3, [r7, #1308]	@ 0x51c
 80011a0:	f897 24fb 	ldrb.w	r2, [r7, #1275]	@ 0x4fb
 80011a4:	4619      	mov	r1, r3
 80011a6:	4810      	ldr	r0, [pc, #64]	@ (80011e8 <write_snapshot_to_nfc+0x3c8>)
 80011a8:	f026 f944 	bl	8027434 <iprintf>
            return;
 80011ac:	e036      	b.n	800121c <write_snapshot_to_nfc+0x3fc>
 80011ae:	bf00      	nop
 80011b0:	08029bb4 	.word	0x08029bb4
 80011b4:	24002340 	.word	0x24002340
 80011b8:	08029bc8 	.word	0x08029bc8
 80011bc:	08029bdc 	.word	0x08029bdc
 80011c0:	08029bf8 	.word	0x08029bf8
 80011c4:	24002240 	.word	0x24002240
 80011c8:	08029c24 	.word	0x08029c24
 80011cc:	08029c40 	.word	0x08029c40
 80011d0:	08029c60 	.word	0x08029c60
 80011d4:	08029c78 	.word	0x08029c78
 80011d8:	08029cc0 	.word	0x08029cc0
 80011dc:	08029cdc 	.word	0x08029cdc
 80011e0:	08029ce4 	.word	0x08029ce4
 80011e4:	2400113c 	.word	0x2400113c
 80011e8:	08029cec 	.word	0x08029cec
        }
        HAL_Delay(100);
 80011ec:	2064      	movs	r0, #100	@ 0x64
 80011ee:	f000 ffc9 	bl	8002184 <HAL_Delay>
        offset += chunk_size;
 80011f2:	f8b7 251c 	ldrh.w	r2, [r7, #1308]	@ 0x51c
 80011f6:	f8b7 34fc 	ldrh.w	r3, [r7, #1276]	@ 0x4fc
 80011fa:	4413      	add	r3, r2
 80011fc:	f8a7 351c 	strh.w	r3, [r7, #1308]	@ 0x51c
        bytes_remaining -= chunk_size;
 8001200:	f8b7 251e 	ldrh.w	r2, [r7, #1310]	@ 0x51e
 8001204:	f8b7 34fc 	ldrh.w	r3, [r7, #1276]	@ 0x4fc
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f8a7 351e 	strh.w	r3, [r7, #1310]	@ 0x51e
    while (bytes_remaining > 0) {
 800120e:	f8b7 351e 	ldrh.w	r3, [r7, #1310]	@ 0x51e
 8001212:	2b00      	cmp	r3, #0
 8001214:	d19a      	bne.n	800114c <write_snapshot_to_nfc+0x32c>
    }

    printf("I2C chunked write successful.\n");
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <write_snapshot_to_nfc+0x404>)
 8001218:	f026 f9b0 	bl	802757c <puts>
}
 800121c:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08029d20 	.word	0x08029d20

08001228 <mg_str_to_d>:





double mg_str_to_d(struct mg_str s) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	@ 0x50
 800122c:	af00      	add	r7, sp, #0
 800122e:	463b      	mov	r3, r7
 8001230:	e883 0003 	stmia.w	r3, {r0, r1}
    char buf[64];
    size_t n = s.len < sizeof(buf) - 1 ? s.len : sizeof(buf) - 1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b3f      	cmp	r3, #63	@ 0x3f
 8001238:	bf28      	it	cs
 800123a:	233f      	movcs	r3, #63	@ 0x3f
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    memcpy(buf, s.buf, n);
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001246:	4618      	mov	r0, r3
 8001248:	f026 fbdb 	bl	8027a02 <memcpy>
    buf[n] = '\0';
 800124c:	f107 020c 	add.w	r2, r7, #12
 8001250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001252:	4413      	add	r3, r2
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
    return atof(buf);  // Or strtod(buf, NULL) for more control
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4618      	mov	r0, r3
 800125e:	f024 fbe1 	bl	8025a24 <atof>
 8001262:	eeb0 7b40 	vmov.f64	d7, d0
}
 8001266:	eeb0 0b47 	vmov.f64	d0, d7
 800126a:	3750      	adds	r7, #80	@ 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <parse_numbers_recursive>:


void parse_numbers_recursive(struct mg_str json, float *dest_array, int max_count, int *out_count) {
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b08f      	sub	sp, #60	@ 0x3c
 8001274:	af02      	add	r7, sp, #8
 8001276:	f107 0408 	add.w	r4, r7, #8
 800127a:	e884 0003 	stmia.w	r4, {r0, r1}
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
    size_t offset = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    struct mg_str key, val;

    while ((offset = mg_json_next(json, offset, &key, &val)) != 0) {
 8001286:	e044      	b.n	8001312 <parse_numbers_recursive+0xa2>
        // Check if it's a number by trying to convert it
        if (val.len > 0 && (isdigit(val.buf[0]) || val.buf[0] == '-' || val.buf[0] == '+')) {
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d02f      	beq.n	80012ee <parse_numbers_recursive+0x7e>
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a29      	ldr	r2, [pc, #164]	@ (800133c <parse_numbers_recursive+0xcc>)
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <parse_numbers_recursive+0x42>
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80012a8:	d003      	beq.n	80012b2 <parse_numbers_recursive+0x42>
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80012b0:	d11d      	bne.n	80012ee <parse_numbers_recursive+0x7e>
            double num = mg_str_to_d(val);  // ✅ Convert raw mg_str to double
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ba:	f7ff ffb5 	bl	8001228 <mg_str_to_d>
 80012be:	ed87 0b08 	vstr	d0, [r7, #32]
            if (*out_count < max_count) {
 80012c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dd21      	ble.n	8001310 <parse_numbers_recursive+0xa0>
                dest_array[*out_count] = (float) num;
 80012cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80012da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012de:	edc3 7a00 	vstr	s15, [r3]
                (*out_count)++;
 80012e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ea:	601a      	str	r2, [r3, #0]
        if (val.len > 0 && (isdigit(val.buf[0]) || val.buf[0] == '-' || val.buf[0] == '+')) {
 80012ec:	e010      	b.n	8001310 <parse_numbers_recursive+0xa0>
            }
        } else if (val.len > 0 && val.buf[0] == '{') {
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <parse_numbers_recursive+0xa2>
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b7b      	cmp	r3, #123	@ 0x7b
 80012fa:	d10a      	bne.n	8001312 <parse_numbers_recursive+0xa2>
            // Recurse into nested object
            parse_numbers_recursive(val, dest_array, max_count, out_count);
 80012fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	f107 0110 	add.w	r1, r7, #16
 8001308:	c903      	ldmia	r1, {r0, r1}
 800130a:	f7ff ffb1 	bl	8001270 <parse_numbers_recursive>
 800130e:	e000      	b.n	8001312 <parse_numbers_recursive+0xa2>
        if (val.len > 0 && (isdigit(val.buf[0]) || val.buf[0] == '-' || val.buf[0] == '+')) {
 8001310:	bf00      	nop
    while ((offset = mg_json_next(json, offset, &key, &val)) != 0) {
 8001312:	f107 0218 	add.w	r2, r7, #24
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001320:	f107 0108 	add.w	r1, r7, #8
 8001324:	c903      	ldmia	r1, {r0, r1}
 8001326:	f00c fd37 	bl	800dd98 <mg_json_next>
 800132a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1aa      	bne.n	8001288 <parse_numbers_recursive+0x18>
        }
    }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3734      	adds	r7, #52	@ 0x34
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	0803b308 	.word	0x0803b308

08001340 <parse_and_store_numbers>:


void parse_and_store_numbers(const char *json_data, size_t len,
                             float *dest_array, int max_count, int *out_count) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
    struct mg_str json = mg_str_n(json_data, len);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	68f9      	ldr	r1, [r7, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f015 fb25 	bl	80169a6 <mg_str_n>
    *out_count = 0;
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
    parse_numbers_recursive(json, dest_array, max_count, out_count);
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	f107 0110 	add.w	r1, r7, #16
 800136e:	c903      	ldmia	r1, {r0, r1}
 8001370:	f7ff ff7e 	bl	8001270 <parse_numbers_recursive>

    if (*out_count == 0) {
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d103      	bne.n	8001384 <parse_and_store_numbers+0x44>
        printf("No numbers found in JSON.\n");
 800137c:	4807      	ldr	r0, [pc, #28]	@ (800139c <parse_and_store_numbers+0x5c>)
 800137e:	f026 f8fd 	bl	802757c <puts>
    } else if (*out_count >= max_count) {
        printf("Warning: hit max count, some values may be skipped.\n");
    }
}
 8001382:	e007      	b.n	8001394 <parse_and_store_numbers+0x54>
    } else if (*out_count >= max_count) {
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	dc02      	bgt.n	8001394 <parse_and_store_numbers+0x54>
        printf("Warning: hit max count, some values may be skipped.\n");
 800138e:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <parse_and_store_numbers+0x60>)
 8001390:	f026 f8f4 	bl	802757c <puts>
}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08029d40 	.word	0x08029d40
 80013a0:	08029d5c 	.word	0x08029d5c

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013aa:	f000 fe59 	bl	8002060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ae:	f000 f889 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b2:	f000 f9e7 	bl	8001784 <MX_GPIO_Init>
  MX_ETH_Init();
 80013b6:	f000 f8f7 	bl	80015a8 <MX_ETH_Init>
  MX_RNG_Init();
 80013ba:	f000 f981 	bl	80016c0 <MX_RNG_Init>
  MX_USART3_UART_Init();
 80013be:	f000 f995 	bl	80016ec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80013c2:	f000 f93d 	bl	8001640 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mongoose_init();
 80013c6:	f024 fa99 	bl	80258fc <mongoose_init>
  uint32_t lastWriteTime = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t lastHttpPollTime = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  for (;;) {
    mongoose_poll();
 80013d2:	f024 faf5 	bl	80259c0 <mongoose_poll>

    uint32_t now = HAL_GetTick();
 80013d6:	f000 fec9 	bl	800216c <HAL_GetTick>
 80013da:	60b8      	str	r0, [r7, #8]
    if (now - lastWriteTime >= 10000) {
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d91a      	bls.n	8001420 <main+0x7c>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn ON LED to indicate write
 80013ea:	2201      	movs	r2, #1
 80013ec:	2101      	movs	r1, #1
 80013ee:	482d      	ldr	r0, [pc, #180]	@ (80014a4 <main+0x100>)
 80013f0:	f001 fe04 	bl	8002ffc <HAL_GPIO_WritePin>
      uint32_t start = HAL_GetTick();
 80013f4:	f000 feba 	bl	800216c <HAL_GetTick>
 80013f8:	6078      	str	r0, [r7, #4]
      write_snapshot_to_nfc(); // Takes ~800ms
 80013fa:	f7ff fd11 	bl	8000e20 <write_snapshot_to_nfc>

      uint32_t duration = HAL_GetTick() - start;
 80013fe:	f000 feb5 	bl	800216c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	603b      	str	r3, [r7, #0]
      printf("NFC write duration: %lu ms\r\n", duration);
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <main+0x104>)
 800140e:	f026 f811 	bl	8027434 <iprintf>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn OFF LED after write
 8001412:	2200      	movs	r2, #0
 8001414:	2101      	movs	r1, #1
 8001416:	4823      	ldr	r0, [pc, #140]	@ (80014a4 <main+0x100>)
 8001418:	f001 fdf0 	bl	8002ffc <HAL_GPIO_WritePin>
      lastWriteTime = now;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	617b      	str	r3, [r7, #20]
    }

    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001424:	4821      	ldr	r0, [pc, #132]	@ (80014ac <main+0x108>)
 8001426:	f001 fdd1 	bl	8002fcc <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0d0      	beq.n	80013d2 <main+0x2e>
    	HAL_Delay(500);
 8001430:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001434:	f000 fea6 	bl	8002184 <HAL_Delay>
    	glue_update_state();
 8001438:	f023 fd1a 	bl	8024e70 <glue_update_state>
        wait_for_network_ready();
 800143c:	f7ff fc56 	bl	8000cec <wait_for_network_ready>
    	perform_http_data_read();
 8001440:	f7ff fc02 	bl	8000c48 <perform_http_data_read>
    	HAL_Delay(1000);
 8001444:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001448:	f000 fe9c 	bl	8002184 <HAL_Delay>
    	parse_and_store_numbers(response_buf, strlen(response_buf), extracted_numbers, MAX_EXTRACTED_NUMBERS, &number_count);
 800144c:	4818      	ldr	r0, [pc, #96]	@ (80014b0 <main+0x10c>)
 800144e:	f7fe ffbf 	bl	80003d0 <strlen>
 8001452:	4601      	mov	r1, r0
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <main+0x110>)
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2340      	movs	r3, #64	@ 0x40
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <main+0x114>)
 800145c:	4814      	ldr	r0, [pc, #80]	@ (80014b0 <main+0x10c>)
 800145e:	f7ff ff6f 	bl	8001340 <parse_and_store_numbers>
    	printf("Parsed %d numbers:\n", number_count);
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <main+0x110>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	4814      	ldr	r0, [pc, #80]	@ (80014bc <main+0x118>)
 800146a:	f025 ffe3 	bl	8027434 <iprintf>
    	for (int i = 0; i < number_count; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e010      	b.n	8001496 <main+0xf2>
    	    printf("Value %d: %.3f\r\n", i, extracted_numbers[i]);
 8001474:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <main+0x114>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001484:	ec53 2b17 	vmov	r2, r3, d7
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <main+0x11c>)
 800148c:	f025 ffd2 	bl	8027434 <iprintf>
    	for (int i = 0; i < number_count; i++) {
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3301      	adds	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <main+0x110>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbe9      	blt.n	8001474 <main+0xd0>
  for (;;) {
 80014a0:	e797      	b.n	80013d2 <main+0x2e>
 80014a2:	bf00      	nop
 80014a4:	58020400 	.word	0x58020400
 80014a8:	08029dd4 	.word	0x08029dd4
 80014ac:	58020800 	.word	0x58020800
 80014b0:	24001238 	.word	0x24001238
 80014b4:	24002340 	.word	0x24002340
 80014b8:	24002240 	.word	0x24002240
 80014bc:	08029df4 	.word	0x08029df4
 80014c0:	08029e08 	.word	0x08029e08

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09c      	sub	sp, #112	@ 0x70
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ce:	224c      	movs	r2, #76	@ 0x4c
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f026 f95c 	bl	8027790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2220      	movs	r2, #32
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f026 f956 	bl	8027790 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014e4:	2002      	movs	r0, #2
 80014e6:	f002 fa59 	bl	800399c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <SystemClock_Config+0xe0>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014f6:	4a2b      	ldr	r2, [pc, #172]	@ (80015a4 <SystemClock_Config+0xe0>)
 80014f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <SystemClock_Config+0xe0>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800150a:	bf00      	nop
 800150c:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <SystemClock_Config+0xe0>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001518:	d1f8      	bne.n	800150c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800151a:	2322      	movs	r3, #34	@ 0x22
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800151e:	2301      	movs	r3, #1
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001522:	2340      	movs	r3, #64	@ 0x40
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001536:	230c      	movs	r3, #12
 8001538:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800153e:	2304      	movs	r3, #4
 8001540:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001542:	2302      	movs	r3, #2
 8001544:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001546:	230c      	movs	r3, #12
 8001548:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800154a:	2300      	movs	r3, #0
 800154c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fa5a 	bl	8003a10 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001562:	f000 f9fd 	bl	8001960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	233f      	movs	r3, #63	@ 0x3f
 8001568:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2303      	movs	r3, #3
 800156c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001572:	2308      	movs	r3, #8
 8001574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001576:	2340      	movs	r3, #64	@ 0x40
 8001578:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800157a:	2340      	movs	r3, #64	@ 0x40
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800157e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001582:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001584:	2340      	movs	r3, #64	@ 0x40
 8001586:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fe19 	bl	80041c4 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001598:	f000 f9e2 	bl	8001960 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3770      	adds	r7, #112	@ 0x70
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58024800 	.word	0x58024800

080015a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_ETH_Init+0x80>)
 80015ae:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <MX_ETH_Init+0x84>)
 80015b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <MX_ETH_Init+0x88>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <MX_ETH_Init+0x88>)
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <MX_ETH_Init+0x88>)
 80015c0:	22e1      	movs	r2, #225	@ 0xe1
 80015c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_ETH_Init+0x88>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_ETH_Init+0x88>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80015d0:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_ETH_Init+0x88>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_ETH_Init+0x80>)
 80015d8:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <MX_ETH_Init+0x88>)
 80015da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_ETH_Init+0x80>)
 80015de:	2201      	movs	r2, #1
 80015e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_ETH_Init+0x80>)
 80015e4:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_ETH_Init+0x8c>)
 80015e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_ETH_Init+0x80>)
 80015ea:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <MX_ETH_Init+0x90>)
 80015ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_ETH_Init+0x80>)
 80015f0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80015f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <MX_ETH_Init+0x80>)
 80015f8:	f000 ff0c 	bl	8002414 <HAL_ETH_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001602:	f000 f9ad 	bl	8001960 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001606:	2238      	movs	r2, #56	@ 0x38
 8001608:	2100      	movs	r1, #0
 800160a:	480c      	ldr	r0, [pc, #48]	@ (800163c <MX_ETH_Init+0x94>)
 800160c:	f026 f8c0 	bl	8027790 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <MX_ETH_Init+0x94>)
 8001612:	2221      	movs	r2, #33	@ 0x21
 8001614:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_ETH_Init+0x94>)
 8001618:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800161c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <MX_ETH_Init+0x94>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2400108c 	.word	0x2400108c
 800162c:	40028000 	.word	0x40028000
 8001630:	24002344 	.word	0x24002344
 8001634:	24000fd8 	.word	0x24000fd8
 8001638:	24000f78 	.word	0x24000f78
 800163c:	24001054 	.word	0x24001054

08001640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_I2C1_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <MX_I2C1_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_I2C1_Init+0x74>)
 800164c:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <MX_I2C1_Init+0x7c>)
 800164e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_I2C1_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_I2C1_Init+0x74>)
 8001658:	2201      	movs	r2, #1
 800165a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_I2C1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_I2C1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167a:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <MX_I2C1_Init+0x74>)
 800167c:	f001 fcd8 	bl	8003030 <HAL_I2C_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001686:	f000 f96b 	bl	8001960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4809      	ldr	r0, [pc, #36]	@ (80016b4 <MX_I2C1_Init+0x74>)
 800168e:	f002 f8ed 	bl	800386c <HAL_I2CEx_ConfigAnalogFilter>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001698:	f000 f962 	bl	8001960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800169c:	2100      	movs	r1, #0
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_I2C1_Init+0x74>)
 80016a0:	f002 f92f 	bl	8003902 <HAL_I2CEx_ConfigDigitalFilter>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f000 f959 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2400113c 	.word	0x2400113c
 80016b8:	40005400 	.word	0x40005400
 80016bc:	20303e5d 	.word	0x20303e5d

080016c0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <MX_RNG_Init+0x24>)
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <MX_RNG_Init+0x28>)
 80016c8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_RNG_Init+0x24>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_RNG_Init+0x24>)
 80016d2:	f004 fec5 	bl	8006460 <HAL_RNG_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80016dc:	f000 f940 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	24001190 	.word	0x24001190
 80016e8:	48021800 	.word	0x48021800

080016ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f0:	4b22      	ldr	r3, [pc, #136]	@ (800177c <MX_USART3_UART_Init+0x90>)
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <MX_USART3_UART_Init+0x94>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_USART3_UART_Init+0x90>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_USART3_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_USART3_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_USART3_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001736:	f005 f83c 	bl	80067b2 <HAL_UART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 f90e 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_USART3_UART_Init+0x90>)
 8001748:	f006 f9d7 	bl	8007afa <HAL_UARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 f905 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <MX_USART3_UART_Init+0x90>)
 800175a:	f006 fa0c 	bl	8007b76 <HAL_UARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 f8fc 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_USART3_UART_Init+0x90>)
 800176a:	f006 f98d 	bl	8007a88 <HAL_UARTEx_DisableFifoMode>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 f8f4 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	240011a4 	.word	0x240011a4
 8001780:	40004800 	.word	0x40004800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b6a      	ldr	r3, [pc, #424]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	4a68      	ldr	r2, [pc, #416]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017aa:	4b66      	ldr	r3, [pc, #408]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b8:	4b62      	ldr	r3, [pc, #392]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	4a61      	ldr	r2, [pc, #388]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	4a59      	ldr	r2, [pc, #356]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b53      	ldr	r3, [pc, #332]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fa:	4a52      	ldr	r2, [pc, #328]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001804:	4b4f      	ldr	r3, [pc, #316]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	4b4c      	ldr	r3, [pc, #304]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001818:	4a4a      	ldr	r2, [pc, #296]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001822:	4b48      	ldr	r3, [pc, #288]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001830:	4b44      	ldr	r3, [pc, #272]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001836:	4a43      	ldr	r2, [pc, #268]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800183c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001840:	4b40      	ldr	r3, [pc, #256]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800184e:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001854:	4a3b      	ldr	r2, [pc, #236]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800185e:	4b39      	ldr	r3, [pc, #228]	@ (8001944 <MX_GPIO_Init+0x1c0>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001872:	4835      	ldr	r0, [pc, #212]	@ (8001948 <MX_GPIO_Init+0x1c4>)
 8001874:	f001 fbc2 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800187e:	4833      	ldr	r0, [pc, #204]	@ (800194c <MX_GPIO_Init+0x1c8>)
 8001880:	f001 fbbc 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2102      	movs	r1, #2
 8001888:	4831      	ldr	r0, [pc, #196]	@ (8001950 <MX_GPIO_Init+0x1cc>)
 800188a:	f001 fbb7 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	482c      	ldr	r0, [pc, #176]	@ (8001954 <MX_GPIO_Init+0x1d0>)
 80018a4:	f001 f9ea 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80018a8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4821      	ldr	r0, [pc, #132]	@ (8001948 <MX_GPIO_Init+0x1c4>)
 80018c2:	f001 f9db 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80018c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	481b      	ldr	r0, [pc, #108]	@ (800194c <MX_GPIO_Init+0x1c8>)
 80018e0:	f001 f9cc 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4817      	ldr	r0, [pc, #92]	@ (8001958 <MX_GPIO_Init+0x1d4>)
 80018fa:	f001 f9bf 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80018fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001910:	230a      	movs	r3, #10
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	4810      	ldr	r0, [pc, #64]	@ (800195c <MX_GPIO_Init+0x1d8>)
 800191c:	f001 f9ae 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001920:	2302      	movs	r3, #2
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <MX_GPIO_Init+0x1cc>)
 8001938:	f001 f9a0 	bl	8002c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800193c:	bf00      	nop
 800193e:	3730      	adds	r7, #48	@ 0x30
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	58020400 	.word	0x58020400
 800194c:	58020c00 	.word	0x58020c00
 8001950:	58021000 	.word	0x58021000
 8001954:	58020800 	.word	0x58020800
 8001958:	58021800 	.word	0x58021800
 800195c:	58020000 	.word	0x58020000

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <Error_Handler+0x8>

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_MspInit+0x30>)
 8001974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001978:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_MspInit+0x30>)
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_MspInit+0x30>)
 8001984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	58024400 	.word	0x58024400

080019a0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08e      	sub	sp, #56	@ 0x38
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b34 <HAL_ETH_MspInit+0x194>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	f040 80b3 	bne.w	8001b2a <HAL_ETH_MspInit+0x18a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80019c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 80019c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 80019cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019d4:	4b58      	ldr	r3, [pc, #352]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 80019d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80019e2:	4b55      	ldr	r3, [pc, #340]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 80019e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019e8:	4a53      	ldr	r2, [pc, #332]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019f2:	4b51      	ldr	r3, [pc, #324]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 80019f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a06:	4a4c      	ldr	r2, [pc, #304]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a10:	4b49      	ldr	r3, [pc, #292]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b46      	ldr	r3, [pc, #280]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a24:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a2e:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a42:	4a3d      	ldr	r2, [pc, #244]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b37      	ldr	r3, [pc, #220]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a60:	4a35      	ldr	r2, [pc, #212]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6a:	4b33      	ldr	r3, [pc, #204]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a78:	4b2f      	ldr	r3, [pc, #188]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a88:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <HAL_ETH_MspInit+0x198>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a96:	2332      	movs	r3, #50	@ 0x32
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa6:	230b      	movs	r3, #11
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4822      	ldr	r0, [pc, #136]	@ (8001b3c <HAL_ETH_MspInit+0x19c>)
 8001ab2:	f001 f8e3 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ab6:	2386      	movs	r3, #134	@ 0x86
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac6:	230b      	movs	r3, #11
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481b      	ldr	r0, [pc, #108]	@ (8001b40 <HAL_ETH_MspInit+0x1a0>)
 8001ad2:	f001 f8d3 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae8:	230b      	movs	r3, #11
 8001aea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af0:	4619      	mov	r1, r3
 8001af2:	4814      	ldr	r0, [pc, #80]	@ (8001b44 <HAL_ETH_MspInit+0x1a4>)
 8001af4:	f001 f8c2 	bl	8002c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001af8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b0a:	230b      	movs	r3, #11
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <HAL_ETH_MspInit+0x1a8>)
 8001b16:	f001 f8b1 	bl	8002c7c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	203d      	movs	r0, #61	@ 0x3d
 8001b20:	f000 fc43 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001b24:	203d      	movs	r0, #61	@ 0x3d
 8001b26:	f000 fc5a 	bl	80023de <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	@ 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40028000 	.word	0x40028000
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58020800 	.word	0x58020800
 8001b40:	58020000 	.word	0x58020000
 8001b44:	58020400 	.word	0x58020400
 8001b48:	58021800 	.word	0x58021800

08001b4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0b8      	sub	sp, #224	@ 0xe0
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	22b8      	movs	r2, #184	@ 0xb8
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f025 fe0f 	bl	8027790 <memset>
  if(hi2c->Instance==I2C1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a27      	ldr	r2, [pc, #156]	@ (8001c14 <HAL_I2C_MspInit+0xc8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d146      	bne.n	8001c0a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b7c:	f04f 0208 	mov.w	r2, #8
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fea2 	bl	80048dc <HAL_RCCEx_PeriphCLKConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b9e:	f7ff fedf 	bl	8001960 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	2312      	movs	r3, #18
 8001bca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <HAL_I2C_MspInit+0xd0>)
 8001be8:	f001 f848 	bl	8002c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001bf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_I2C_MspInit+0xcc>)
 8001bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c0a:	bf00      	nop
 8001c0c:	37e0      	adds	r7, #224	@ 0xe0
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40005400 	.word	0x40005400
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58020400 	.word	0x58020400

08001c20 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0b2      	sub	sp, #200	@ 0xc8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	22b8      	movs	r2, #184	@ 0xb8
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f025 fdad 	bl	8027790 <memset>
  if(hrng->Instance==RNG)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <HAL_RNG_MspInit+0x6c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d121      	bne.n	8001c84 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001c40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fe40 	bl	80048dc <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001c62:	f7ff fe7d 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_RNG_MspInit+0x70>)
 8001c68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c6c:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_RNG_MspInit+0x70>)
 8001c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c72:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_RNG_MspInit+0x70>)
 8001c78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c84:	bf00      	nop
 8001c86:	37c8      	adds	r7, #200	@ 0xc8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	48021800 	.word	0x48021800
 8001c90:	58024400 	.word	0x58024400

08001c94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0b8      	sub	sp, #224	@ 0xe0
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	22b8      	movs	r2, #184	@ 0xb8
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f025 fd6b 	bl	8027790 <memset>
  if(huart->Instance==USART3)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <HAL_UART_MspInit+0xc8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d146      	bne.n	8001d52 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cc4:	f04f 0202 	mov.w	r2, #2
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fdfe 	bl	80048dc <HAL_RCCEx_PeriphCLKConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ce6:	f7ff fe3b 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_UART_MspInit+0xcc>)
 8001cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <HAL_UART_MspInit+0xcc>)
 8001cf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_UART_MspInit+0xcc>)
 8001cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_UART_MspInit+0xcc>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <HAL_UART_MspInit+0xcc>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_UART_MspInit+0xcc>)
 8001d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001d26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d40:	2307      	movs	r3, #7
 8001d42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d46:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <HAL_UART_MspInit+0xd0>)
 8001d4e:	f000 ff95 	bl	8002c7c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001d52:	bf00      	nop
 8001d54:	37e0      	adds	r7, #224	@ 0xe0
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	58024400 	.word	0x58024400
 8001d64:	58020c00 	.word	0x58020c00

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 f9c1 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  return 1;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_kill>:

int _kill(int pid, int sig)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de0:	f025 fdda 	bl	8027998 <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2216      	movs	r2, #22
 8001de8:	601a      	str	r2, [r3, #0]
  return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_exit>:

void _exit (int status)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffe7 	bl	8001dd6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <_exit+0x12>

08001e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e00a      	b.n	8001e34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1e:	f3af 8000 	nop.w
 8001e22:	4601      	mov	r1, r0
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	60ba      	str	r2, [r7, #8]
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf0      	blt.n	8001e1e <_read+0x12>
  }

  return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_isatty>:

int _isatty(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	@ (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f025 fd5a 	bl	8027998 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	24050000 	.word	0x24050000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	2400234c 	.word	0x2400234c
 8001f18:	24005878 	.word	0x24005878

08001f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f20:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <SystemInit+0xd0>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f26:	4a31      	ldr	r2, [pc, #196]	@ (8001fec <SystemInit+0xd0>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <SystemInit+0xd4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d807      	bhi.n	8001f4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <SystemInit+0xd4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 030f 	bic.w	r3, r3, #15
 8001f44:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff0 <SystemInit+0xd4>)
 8001f46:	f043 0307 	orr.w	r3, r3, #7
 8001f4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <SystemInit+0xd8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a28      	ldr	r2, [pc, #160]	@ (8001ff4 <SystemInit+0xd8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f58:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <SystemInit+0xd8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <SystemInit+0xd8>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4924      	ldr	r1, [pc, #144]	@ (8001ff4 <SystemInit+0xd8>)
 8001f64:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <SystemInit+0xdc>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <SystemInit+0xd4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <SystemInit+0xd4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <SystemInit+0xd4>)
 8001f80:	f043 0307 	orr.w	r3, r3, #7
 8001f84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <SystemInit+0xd8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <SystemInit+0xd8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <SystemInit+0xd8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f98:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <SystemInit+0xd8>)
 8001f9a:	4a18      	ldr	r2, [pc, #96]	@ (8001ffc <SystemInit+0xe0>)
 8001f9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <SystemInit+0xd8>)
 8001fa0:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <SystemInit+0xe4>)
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <SystemInit+0xd8>)
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <SystemInit+0xe8>)
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <SystemInit+0xd8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <SystemInit+0xd8>)
 8001fb2:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <SystemInit+0xe8>)
 8001fb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <SystemInit+0xd8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <SystemInit+0xd8>)
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <SystemInit+0xe8>)
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <SystemInit+0xd8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <SystemInit+0xd8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a09      	ldr	r2, [pc, #36]	@ (8001ff4 <SystemInit+0xd8>)
 8001fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <SystemInit+0xd8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <SystemInit+0xec>)
 8001fdc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001fe0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00
 8001ff0:	52002000 	.word	0x52002000
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ffc:	02020200 	.word	0x02020200
 8002000:	01ff0000 	.word	0x01ff0000
 8002004:	01010280 	.word	0x01010280
 8002008:	52004000 	.word	0x52004000

0800200c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002010:	f7ff ff84 	bl	8001f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	@ (800204c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	@ (8002058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203a:	f025 fcb3 	bl	80279a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203e:	f7ff f9b1 	bl	80013a4 <main>
  bx  lr
 8002042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002048:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800204c:	24000f78 	.word	0x24000f78
  ldr r2, =_sidata
 8002050:	0803b518 	.word	0x0803b518
  ldr r2, =_sbss
 8002054:	24001038 	.word	0x24001038
  ldr r4, =_ebss
 8002058:	24005874 	.word	0x24005874

0800205c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC3_IRQHandler>
	...

08002060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002066:	2003      	movs	r0, #3
 8002068:	f000 f994 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800206c:	f002 fa60 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_Init+0x68>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4913      	ldr	r1, [pc, #76]	@ (80020cc <HAL_Init+0x6c>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_Init+0x68>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	4a0e      	ldr	r2, [pc, #56]	@ (80020cc <HAL_Init+0x6c>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_Init+0x70>)
 80020a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020a4:	4a0b      	ldr	r2, [pc, #44]	@ (80020d4 <HAL_Init+0x74>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 f814 	bl	80020d8 <HAL_InitTick>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e002      	b.n	80020c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020ba:	f7ff fc57 	bl	800196c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	58024400 	.word	0x58024400
 80020cc:	0802d520 	.word	0x0802d520
 80020d0:	24000004 	.word	0x24000004
 80020d4:	24000000 	.word	0x24000000

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_InitTick+0x60>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e021      	b.n	8002130 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020ec:	4b13      	ldr	r3, [pc, #76]	@ (800213c <HAL_InitTick+0x64>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_InitTick+0x60>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f979 	bl	80023fa <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 f943 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_InitTick+0x68>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2400000c 	.word	0x2400000c
 800213c:	24000000 	.word	0x24000000
 8002140:	24000008 	.word	0x24000008

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2400000c 	.word	0x2400000c
 8002168:	24002350 	.word	0x24002350

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	24002350 	.word	0x24002350

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2400000c 	.word	0x2400000c

080021cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80021dc:	4904      	ldr	r1, [pc, #16]	@ (80021f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	58000400 	.word	0x58000400

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <__NVIC_SetPriorityGrouping+0x40>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	4313      	orrs	r3, r2
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x40>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00
 8002238:	05fa0000 	.word	0x05fa0000

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	@ (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	@ (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	@ (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff29 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff40 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff90 	bl	80022e8 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5f 	bl	8002294 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff33 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa4 	bl	8002350 <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0e3      	b.n	80025ee <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fab1 	bl	80019a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	4b6e      	ldr	r3, [pc, #440]	@ (80025f8 <HAL_ETH_Init+0x1e4>)
 8002440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002444:	4a6c      	ldr	r2, [pc, #432]	@ (80025f8 <HAL_ETH_Init+0x1e4>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800244e:	4b6a      	ldr	r3, [pc, #424]	@ (80025f8 <HAL_ETH_Init+0x1e4>)
 8002450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7a1b      	ldrb	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff feb1 	bl	80021cc <HAL_SYSCFG_ETHInterfaceSelect>
 800246a:	e003      	b.n	8002474 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800246c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002470:	f7ff feac 	bl	80021cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002474:	4b61      	ldr	r3, [pc, #388]	@ (80025fc <HAL_ETH_Init+0x1e8>)
 8002476:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800248e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002490:	f7ff fe6c 	bl	800216c <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002496:	e011      	b.n	80024bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002498:	f7ff fe68 	bl	800216c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024a6:	d909      	bls.n	80024bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2204      	movs	r2, #4
 80024ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	22e0      	movs	r2, #224	@ 0xe0
 80024b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e098      	b.n	80025ee <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e4      	bne.n	8002498 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f89e 	bl	8002610 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024d4:	f002 f9a6 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a49      	ldr	r2, [pc, #292]	@ (8002600 <HAL_ETH_Init+0x1ec>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9a      	lsrs	r2, r3, #18
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3a01      	subs	r2, #1
 80024e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fa81 	bl	80029f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80024fe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800250a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800250e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	22e0      	movs	r2, #224	@ 0xe0
 800252a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e05d      	b.n	80025ee <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800253e:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_ETH_Init+0x1f0>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6952      	ldr	r2, [r2, #20]
 8002546:	0051      	lsls	r1, r2, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	430b      	orrs	r3, r1
 800254e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002552:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fae9 	bl	8002b2e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fb2f 	bl	8002bc0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	3305      	adds	r3, #5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021a      	lsls	r2, r3, #8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	3303      	adds	r3, #3
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061a      	lsls	r2, r3, #24
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	3302      	adds	r3, #2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	3301      	adds	r3, #1
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025b0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_ETH_Init+0x1f4>)
 80025c2:	430b      	orrs	r3, r1
 80025c4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_ETH_Init+0x1f8>)
 80025d6:	430b      	orrs	r3, r1
 80025d8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2210      	movs	r2, #16
 80025e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	58024400 	.word	0x58024400
 80025fc:	58000400 	.word	0x58000400
 8002600:	431bde83 	.word	0x431bde83
 8002604:	ffff8001 	.word	0xffff8001
 8002608:	0c020060 	.word	0x0c020060
 800260c:	0c20c000 	.word	0x0c20c000

08002610 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002620:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002628:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800262a:	f002 f8fb 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 800262e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d804      	bhi.n	8002642 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e022      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4a16      	ldr	r2, [pc, #88]	@ (80026a0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d204      	bcs.n	8002654 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e019      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d915      	bls.n	8002688 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d804      	bhi.n	800266e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e00c      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d804      	bhi.n	8002680 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e003      	b.n	8002688 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002686:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	02160ebf 	.word	0x02160ebf
 80026a0:	03938700 	.word	0x03938700
 80026a4:	05f5e0ff 	.word	0x05f5e0ff
 80026a8:	08f0d17f 	.word	0x08f0d17f
 80026ac:	0ee6b27f 	.word	0x0ee6b27f

080026b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80026c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	791b      	ldrb	r3, [r3, #4]
 80026c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80026ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	7b1b      	ldrb	r3, [r3, #12]
 80026d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7b5b      	ldrb	r3, [r3, #13]
 80026d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	7b9b      	ldrb	r3, [r3, #14]
 80026e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7bdb      	ldrb	r3, [r3, #15]
 80026e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	7c12      	ldrb	r2, [r2, #16]
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d102      	bne.n	80026fa <ETH_SetMACConfig+0x4a>
 80026f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026f8:	e000      	b.n	80026fc <ETH_SetMACConfig+0x4c>
 80026fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	7c52      	ldrb	r2, [r2, #17]
 8002702:	2a00      	cmp	r2, #0
 8002704:	d102      	bne.n	800270c <ETH_SetMACConfig+0x5c>
 8002706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800270a:	e000      	b.n	800270e <ETH_SetMACConfig+0x5e>
 800270c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800270e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7c9b      	ldrb	r3, [r3, #18]
 8002714:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002716:	431a      	orrs	r2, r3
               macconf->Speed |
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800271c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	7f1b      	ldrb	r3, [r3, #28]
 8002728:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800272a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	7f5b      	ldrb	r3, [r3, #29]
 8002730:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002732:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	7f92      	ldrb	r2, [r2, #30]
 8002738:	2a00      	cmp	r2, #0
 800273a:	d102      	bne.n	8002742 <ETH_SetMACConfig+0x92>
 800273c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002740:	e000      	b.n	8002744 <ETH_SetMACConfig+0x94>
 8002742:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002744:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7fdb      	ldrb	r3, [r3, #31]
 800274a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800274c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002754:	2a00      	cmp	r2, #0
 8002756:	d102      	bne.n	800275e <ETH_SetMACConfig+0xae>
 8002758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0xb0>
 800275e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002760:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002766:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800276e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002770:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b56      	ldr	r3, [pc, #344]	@ (80028dc <ETH_SetMACConfig+0x22c>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	430b      	orrs	r3, r1
 800278c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002792:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800279a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800279c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80027a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80027ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80027b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d102      	bne.n	80027c2 <ETH_SetMACConfig+0x112>
 80027bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027c0:	e000      	b.n	80027c4 <ETH_SetMACConfig+0x114>
 80027c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b42      	ldr	r3, [pc, #264]	@ (80028e0 <ETH_SetMACConfig+0x230>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	430b      	orrs	r3, r1
 80027e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <ETH_SetMACConfig+0x234>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	430b      	orrs	r3, r1
 8002804:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800280c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002812:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800281a:	2a00      	cmp	r2, #0
 800281c:	d101      	bne.n	8002822 <ETH_SetMACConfig+0x172>
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	e000      	b.n	8002824 <ETH_SetMACConfig+0x174>
 8002822:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002824:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002836:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800283a:	4013      	ands	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	430b      	orrs	r3, r1
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800284c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002854:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	f023 0103 	bic.w	r1, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	430a      	orrs	r2, r1
 800286e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800287a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002896:	2a00      	cmp	r2, #0
 8002898:	d101      	bne.n	800289e <ETH_SetMACConfig+0x1ee>
 800289a:	2240      	movs	r2, #64	@ 0x40
 800289c:	e000      	b.n	80028a0 <ETH_SetMACConfig+0x1f0>
 800289e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80028a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80028a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80028b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028c0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	00048083 	.word	0x00048083
 80028e0:	c0f88000 	.word	0xc0f88000
 80028e4:	fffffef0 	.word	0xfffffef0

080028e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <ETH_SetDMAConfig+0xf8>)
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	6811      	ldr	r1, [r2, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800290e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800291a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7b1b      	ldrb	r3, [r3, #12]
 8002920:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4b2c      	ldr	r3, [pc, #176]	@ (80029e4 <ETH_SetDMAConfig+0xfc>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	68f9      	ldr	r1, [r7, #12]
 800293a:	430b      	orrs	r3, r1
 800293c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002940:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7b5b      	ldrb	r3, [r3, #13]
 8002946:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002958:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800295c:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <ETH_SetDMAConfig+0x100>)
 800295e:	4013      	ands	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	430b      	orrs	r3, r1
 8002968:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800296c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	7d1b      	ldrb	r3, [r3, #20]
 8002978:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800297a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	7f5b      	ldrb	r3, [r3, #29]
 8002980:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002992:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <ETH_SetDMAConfig+0x104>)
 8002994:	4013      	ands	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	430b      	orrs	r3, r1
 800299e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029a2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	7f1b      	ldrb	r3, [r3, #28]
 80029aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <ETH_SetDMAConfig+0x108>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029d0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	ffff87fd 	.word	0xffff87fd
 80029e4:	ffff2ffe 	.word	0xffff2ffe
 80029e8:	fffec000 	.word	0xfffec000
 80029ec:	ffc0efef 	.word	0xffc0efef
 80029f0:	7fc0ffff 	.word	0x7fc0ffff

080029f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0a4      	sub	sp, #144	@ 0x90
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a02:	2300      	movs	r3, #0
 8002a04:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002a4c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002a50:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a76:	2300      	movs	r3, #0
 8002a78:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a9e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002aa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff fde6 	bl	80026b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002afe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b14:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fee1 	bl	80028e8 <ETH_SetDMAConfig>
}
 8002b26:	bf00      	nop
 8002b28:	3790      	adds	r7, #144	@ 0x90
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e01d      	b.n	8002b78 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	3206      	adds	r2, #6
 8002b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3301      	adds	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d9de      	bls.n	8002b3c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e023      	b.n	8002c16 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6919      	ldr	r1, [r3, #16]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	3212      	adds	r2, #18
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d9d8      	bls.n	8002bce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c42:	461a      	mov	r2, r3
 8002c44:	2303      	movs	r3, #3
 8002c46:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c56:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c6a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c8a:	4b86      	ldr	r3, [pc, #536]	@ (8002ea4 <HAL_GPIO_Init+0x228>)
 8002c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c8e:	e18c      	b.n	8002faa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 817e 	beq.w	8002fa4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d005      	beq.n	8002cc0 <HAL_GPIO_Init+0x44>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d130      	bne.n	8002d22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0201 	and.w	r2, r3, #1
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d017      	beq.n	8002d5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d123      	bne.n	8002db2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80d8 	beq.w	8002fa4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_GPIO_Init+0x22c>)
 8002df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <HAL_GPIO_Init+0x22c>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_GPIO_Init+0x22c>)
 8002e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a26      	ldr	r2, [pc, #152]	@ (8002eac <HAL_GPIO_Init+0x230>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb0 <HAL_GPIO_Init+0x234>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d04a      	beq.n	8002ed4 <HAL_GPIO_Init+0x258>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <HAL_GPIO_Init+0x238>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02b      	beq.n	8002e9e <HAL_GPIO_Init+0x222>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <HAL_GPIO_Init+0x23c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d025      	beq.n	8002e9a <HAL_GPIO_Init+0x21e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_GPIO_Init+0x240>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <HAL_GPIO_Init+0x21a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_GPIO_Init+0x244>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d019      	beq.n	8002e92 <HAL_GPIO_Init+0x216>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <HAL_GPIO_Init+0x248>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <HAL_GPIO_Init+0x24c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_GPIO_Init+0x250>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x20a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <HAL_GPIO_Init+0x254>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x206>
 8002e7e:	2309      	movs	r3, #9
 8002e80:	e029      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e82:	230a      	movs	r3, #10
 8002e84:	e027      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e86:	2307      	movs	r3, #7
 8002e88:	e025      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	e023      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e8e:	2305      	movs	r3, #5
 8002e90:	e021      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e01f      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e01d      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e01b      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e019      	b.n	8002ed6 <HAL_GPIO_Init+0x25a>
 8002ea2:	bf00      	nop
 8002ea4:	58000080 	.word	0x58000080
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	58000400 	.word	0x58000400
 8002eb0:	58020000 	.word	0x58020000
 8002eb4:	58020400 	.word	0x58020400
 8002eb8:	58020800 	.word	0x58020800
 8002ebc:	58020c00 	.word	0x58020c00
 8002ec0:	58021000 	.word	0x58021000
 8002ec4:	58021400 	.word	0x58021400
 8002ec8:	58021800 	.word	0x58021800
 8002ecc:	58021c00 	.word	0x58021c00
 8002ed0:	58022400 	.word	0x58022400
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	f002 0203 	and.w	r2, r2, #3
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	4093      	lsls	r3, r2
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee6:	4938      	ldr	r1, [pc, #224]	@ (8002fc8 <HAL_GPIO_Init+0x34c>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f ae6b 	bne.w	8002c90 <HAL_GPIO_Init+0x14>
  }
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3724      	adds	r7, #36	@ 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	58000400 	.word	0x58000400

08002fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e001      	b.n	8002fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
 8003008:	4613      	mov	r3, r2
 800300a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800300c:	787b      	ldrb	r3, [r7, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003018:	e003      	b.n	8003022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e08b      	b.n	800315a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe fd78 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e006      	b.n	80030b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d108      	bne.n	80030d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e007      	b.n	80030e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <HAL_I2C_Init+0x134>)
 80030ee:	430b      	orrs	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	02008000 	.word	0x02008000

08003168 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	f040 80f9 	bne.w	8003382 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_I2C_Mem_Write+0x34>
 8003196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0ed      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x4e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0e6      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031be:	f7fe ffd5 	bl	800216c <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2319      	movs	r3, #25
 80031ca:	2201      	movs	r2, #1
 80031cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f955 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d1      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2221      	movs	r2, #33	@ 0x21
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	@ 0x40
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003208:	88f8      	ldrh	r0, [r7, #6]
 800320a:	893a      	ldrh	r2, [r7, #8]
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4603      	mov	r3, r0
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8b9 	bl	8003390 <I2C_RequestMemoryWrite>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0a9      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2bff      	cmp	r3, #255	@ 0xff
 8003238:	d90e      	bls.n	8003258 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	@ 0xff
 800323e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fad9 	bl	8003808 <I2C_TransferConfig>
 8003256:	e00f      	b.n	8003278 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fac8 	bl	8003808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f958 	bl	8003532 <I2C_WaitOnTXISFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e07b      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d034      	beq.n	8003330 <HAL_I2C_Mem_Write+0x1c8>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d130      	bne.n	8003330 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f8d1 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e04d      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d90e      	bls.n	8003310 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	22ff      	movs	r2, #255	@ 0xff
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	2300      	movs	r3, #0
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa7d 	bl	8003808 <I2C_TransferConfig>
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	b2da      	uxtb	r2, r3
 8003320:	8979      	ldrh	r1, [r7, #10]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fa6c 	bl	8003808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d19e      	bne.n	8003278 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f93e 	bl	80035c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01a      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2220      	movs	r2, #32
 8003354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_I2C_Mem_Write+0x224>)
 8003362:	400b      	ands	r3, r1
 8003364:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003382:	2302      	movs	r3, #2
  }
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	fe00e800 	.word	0xfe00e800

08003390 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	8979      	ldrh	r1, [r7, #10]
 80033b0:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <I2C_RequestMemoryWrite+0xa4>)
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fa25 	bl	8003808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	69b9      	ldr	r1, [r7, #24]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8b5 	bl	8003532 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e02c      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80033e2:	e015      	b.n	8003410 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f89b 	bl	8003532 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e012      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003406:	893b      	ldrh	r3, [r7, #8]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	@ 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f830 	bl	8003480 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	80002000 	.word	0x80002000

08003438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d007      	beq.n	8003474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	619a      	str	r2, [r3, #24]
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	e03b      	b.n	800350a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8d6 	bl	8003648 <I2C_IsErrorOccurred>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e041      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d02d      	beq.n	800350a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fe5d 	bl	800216c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d122      	bne.n	800350a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d113      	bne.n	800350a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e00f      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	429a      	cmp	r2, r3
 8003526:	d0b4      	beq.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800353e:	e033      	b.n	80035a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f87f 	bl	8003648 <I2C_IsErrorOccurred>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e031      	b.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d025      	beq.n	80035a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355c:	f7fe fe06 	bl	800216c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d302      	bcc.n	8003572 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11a      	bne.n	80035a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d013      	beq.n	80035a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d1c4      	bne.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035cc:	e02f      	b.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f838 	bl	8003648 <I2C_IsErrorOccurred>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e02d      	b.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe fdc3 	bl	800216c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11a      	bne.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d013      	beq.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e007      	b.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d1c8      	bne.n	80035ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	@ 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d068      	beq.n	8003746 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2210      	movs	r2, #16
 800367a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800367c:	e049      	b.n	8003712 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d045      	beq.n	8003712 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fe fd71 	bl	800216c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_IsErrorOccurred+0x54>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13a      	bne.n	8003712 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036be:	d121      	bne.n	8003704 <I2C_IsErrorOccurred+0xbc>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c6:	d01d      	beq.n	8003704 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d01a      	beq.n	8003704 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036de:	f7fe fd45 	bl	800216c <HAL_GetTick>
 80036e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e4:	e00e      	b.n	8003704 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036e6:	f7fe fd41 	bl	800216c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b19      	cmp	r3, #25
 80036f2:	d907      	bls.n	8003704 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f043 0320 	orr.w	r3, r3, #32
 80036fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003702:	e006      	b.n	8003712 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d1e9      	bne.n	80036e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d003      	beq.n	8003728 <I2C_IsErrorOccurred+0xe0>
 8003720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0aa      	beq.n	800367e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003728:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2220      	movs	r2, #32
 8003736:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800378a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f043 0302 	orr.w	r3, r3, #2
 80037a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80037b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01c      	beq.n	80037f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff fe3b 	bl	8003438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <I2C_IsErrorOccurred+0x1bc>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3728      	adds	r7, #40	@ 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	fe00e800 	.word	0xfe00e800

08003808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	4613      	mov	r3, r2
 8003818:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003820:	7a7b      	ldrb	r3, [r7, #9]
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003828:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	4313      	orrs	r3, r2
 8003832:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003836:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	0d5b      	lsrs	r3, r3, #21
 8003842:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <I2C_TransferConfig+0x60>)
 8003848:	430b      	orrs	r3, r1
 800384a:	43db      	mvns	r3, r3
 800384c:	ea02 0103 	and.w	r1, r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	03ff63ff 	.word	0x03ff63ff

0800386c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b20      	cmp	r3, #32
 8003880:	d138      	bne.n	80038f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800388c:	2302      	movs	r3, #2
 800388e:	e032      	b.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	@ 0x24
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d139      	bne.n	800398c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003922:	2302      	movs	r3, #2
 8003924:	e033      	b.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2224      	movs	r2, #36	@ 0x24
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003954:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <HAL_PWREx_ConfigSupply+0x70>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d00a      	beq.n	80039c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039b0:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_PWREx_ConfigSupply+0x70>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e01f      	b.n	8003a02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e01d      	b.n	8003a02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039c6:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <HAL_PWREx_ConfigSupply+0x70>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 0207 	bic.w	r2, r3, #7
 80039ce:	490f      	ldr	r1, [pc, #60]	@ (8003a0c <HAL_PWREx_ConfigSupply+0x70>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039d6:	f7fe fbc9 	bl	800216c <HAL_GetTick>
 80039da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039dc:	e009      	b.n	80039f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039de:	f7fe fbc5 	bl	800216c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039ec:	d901      	bls.n	80039f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e007      	b.n	8003a02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <HAL_PWREx_ConfigSupply+0x70>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039fe:	d1ee      	bne.n	80039de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	58024800 	.word	0x58024800

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08c      	sub	sp, #48	@ 0x30
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e3c8      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8087 	beq.w	8003b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a30:	4b88      	ldr	r3, [pc, #544]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a3a:	4b86      	ldr	r3, [pc, #536]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d007      	beq.n	8003a56 <HAL_RCC_OscConfig+0x46>
 8003a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a48:	2b18      	cmp	r3, #24
 8003a4a:	d110      	bne.n	8003a6e <HAL_RCC_OscConfig+0x5e>
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a56:	4b7f      	ldr	r3, [pc, #508]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d06c      	beq.n	8003b3c <HAL_RCC_OscConfig+0x12c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d168      	bne.n	8003b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e3a2      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x76>
 8003a78:	4b76      	ldr	r3, [pc, #472]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a75      	ldr	r2, [pc, #468]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e02e      	b.n	8003ae4 <HAL_RCC_OscConfig+0xd4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b71      	ldr	r3, [pc, #452]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a70      	ldr	r2, [pc, #448]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e01d      	b.n	8003ae4 <HAL_RCC_OscConfig+0xd4>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0xbc>
 8003ab2:	4b68      	ldr	r3, [pc, #416]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a67      	ldr	r2, [pc, #412]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b65      	ldr	r3, [pc, #404]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a64      	ldr	r2, [pc, #400]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0xd4>
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a60      	ldr	r2, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a5d      	ldr	r2, [pc, #372]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe fb3e 	bl	800216c <HAL_GetTick>
 8003af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe fb3a 	bl	800216c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e356      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b06:	4b53      	ldr	r3, [pc, #332]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0xe4>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe fb2a 	bl	800216c <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe fb26 	bl	800216c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e342      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b2e:	4b49      	ldr	r3, [pc, #292]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x10c>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 808c 	beq.w	8003c64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4c:	4b41      	ldr	r3, [pc, #260]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b56:	4b3f      	ldr	r3, [pc, #252]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_RCC_OscConfig+0x162>
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b18      	cmp	r3, #24
 8003b66:	d137      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1c8>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d132      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b72:	4b38      	ldr	r3, [pc, #224]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_RCC_OscConfig+0x17a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e314      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b8a:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 0219 	bic.w	r2, r3, #25
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	492f      	ldr	r1, [pc, #188]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fae6 	bl	800216c <HAL_GetTick>
 8003ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fae2 	bl	800216c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e2fe      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb6:	4b27      	ldr	r3, [pc, #156]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	4920      	ldr	r1, [pc, #128]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd6:	e045      	b.n	8003c64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d026      	beq.n	8003c2e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 0219 	bic.w	r2, r3, #25
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4919      	ldr	r1, [pc, #100]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fabb 	bl	800216c <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fab7 	bl	800216c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e2d3      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	490b      	ldr	r1, [pc, #44]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
 8003c2c:	e01a      	b.n	8003c64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fe fa97 	bl	800216c <HAL_GetTick>
 8003c3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fe fa93 	bl	800216c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d903      	bls.n	8003c58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e2af      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
 8003c54:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c58:	4b96      	ldr	r3, [pc, #600]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d06a      	beq.n	8003d46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c70:	4b90      	ldr	r3, [pc, #576]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c7a:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d007      	beq.n	8003c96 <HAL_RCC_OscConfig+0x286>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b18      	cmp	r3, #24
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x2b4>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c96:	4b87      	ldr	r3, [pc, #540]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x29e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b80      	cmp	r3, #128	@ 0x80
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e282      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cae:	4b81      	ldr	r3, [pc, #516]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	497d      	ldr	r1, [pc, #500]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cc2:	e040      	b.n	8003d46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ccc:	4b79      	ldr	r3, [pc, #484]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a78      	ldr	r2, [pc, #480]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fa48 	bl	800216c <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fa44 	bl	800216c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e260      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cf2:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	061b      	lsls	r3, r3, #24
 8003d0c:	4969      	ldr	r1, [pc, #420]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60cb      	str	r3, [r1, #12]
 8003d12:	e018      	b.n	8003d46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d14:	4b67      	ldr	r3, [pc, #412]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a66      	ldr	r2, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fa24 	bl	800216c <HAL_GetTick>
 8003d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d28:	f7fe fa20 	bl	800216c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e23c      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d3a:	4b5e      	ldr	r3, [pc, #376]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d036      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d019      	beq.n	8003d8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5a:	4b56      	ldr	r3, [pc, #344]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5e:	4a55      	ldr	r2, [pc, #340]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fa01 	bl	800216c <HAL_GetTick>
 8003d6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe f9fd 	bl	800216c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e219      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d80:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x35e>
 8003d8c:	e018      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8e:	4b49      	ldr	r3, [pc, #292]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d92:	4a48      	ldr	r2, [pc, #288]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fe f9e7 	bl	800216c <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fe f9e3 	bl	800216c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1ff      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db4:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d036      	beq.n	8003e3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd4:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a36      	ldr	r2, [pc, #216]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003dda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f9c4 	bl	800216c <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de8:	f7fe f9c0 	bl	800216c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e1dc      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x3d8>
 8003e06:	e018      	b.n	8003e3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e08:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a29      	ldr	r2, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e14:	f7fe f9aa 	bl	800216c <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1c:	f7fe f9a6 	bl	800216c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1c2      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e2e:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8086 	beq.w	8003f54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb8 <HAL_RCC_OscConfig+0x4a8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb8 <HAL_RCC_OscConfig+0x4a8>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e54:	f7fe f98a 	bl	800216c <HAL_GetTick>
 8003e58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fe f986 	bl	800216c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	@ 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1a2      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e6e:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <HAL_RCC_OscConfig+0x4a8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x480>
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	4a0b      	ldr	r2, [pc, #44]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4e6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4ac>
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	4a05      	ldr	r2, [pc, #20]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea4:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a02      	ldr	r2, [pc, #8]	@ (8003eb4 <HAL_RCC_OscConfig+0x4a4>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb0:	e021      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4e6>
 8003eb2:	bf00      	nop
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	58024800 	.word	0x58024800
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x4ce>
 8003ec4:	4b83      	ldr	r3, [pc, #524]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	4a82      	ldr	r2, [pc, #520]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed0:	4b80      	ldr	r3, [pc, #512]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	4a7f      	ldr	r2, [pc, #508]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4e6>
 8003ede:	4b7d      	ldr	r3, [pc, #500]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eea:	4b7a      	ldr	r3, [pc, #488]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	4a79      	ldr	r2, [pc, #484]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fe f935 	bl	800216c <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe f931 	bl	800216c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e14b      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCC_OscConfig+0x4f6>
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fe f91f 	bl	800216c <HAL_GetTick>
 8003f2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fe f91b 	bl	800216c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e135      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f48:	4b62      	ldr	r3, [pc, #392]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 812a 	beq.w	80041b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f66:	2b18      	cmp	r3, #24
 8003f68:	f000 80ba 	beq.w	80040e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 8095 	bne.w	80040a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b57      	ldr	r3, [pc, #348]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a56      	ldr	r2, [pc, #344]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003f7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe f8f3 	bl	800216c <HAL_GetTick>
 8003f86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fe f8ef 	bl	800216c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e10b      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fac:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCC_OscConfig+0x6c8>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fb8:	0112      	lsls	r2, r2, #4
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	4945      	ldr	r1, [pc, #276]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	025b      	lsls	r3, r3, #9
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	3b01      	subs	r3, #1
 8003fec:	061b      	lsls	r3, r3, #24
 8003fee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ff2:	4938      	ldr	r1, [pc, #224]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ff8:	4b36      	ldr	r3, [pc, #216]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	4a35      	ldr	r2, [pc, #212]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004004:	4b33      	ldr	r3, [pc, #204]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004008:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_RCC_OscConfig+0x6cc>)
 800400a:	4013      	ands	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004010:	00d2      	lsls	r2, r2, #3
 8004012:	4930      	ldr	r1, [pc, #192]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004014:	4313      	orrs	r3, r2
 8004016:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004018:	4b2e      	ldr	r3, [pc, #184]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	f023 020c 	bic.w	r2, r3, #12
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	492b      	ldr	r1, [pc, #172]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800402a:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	f023 0202 	bic.w	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	4927      	ldr	r1, [pc, #156]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800403c:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	4a24      	ldr	r2, [pc, #144]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004048:	4b22      	ldr	r3, [pc, #136]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	4a21      	ldr	r2, [pc, #132]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800404e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004054:	4b1f      	ldr	r3, [pc, #124]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800405a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800405e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004060:	4b1c      	ldr	r3, [pc, #112]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a1b      	ldr	r2, [pc, #108]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406c:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe f878 	bl	800216c <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe f874 	bl	800216c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e090      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x670>
 800409e:	e088      	b.n	80041b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0b      	ldr	r2, [pc, #44]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe f85e 	bl	800216c <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe f85a 	bl	800216c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e076      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c6:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_RCC_OscConfig+0x6c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x6a4>
 80040d2:	e06e      	b.n	80041b2 <HAL_RCC_OscConfig+0x7a2>
 80040d4:	58024400 	.word	0x58024400
 80040d8:	fffffc0c 	.word	0xfffffc0c
 80040dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040e0:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040e6:	4b35      	ldr	r3, [pc, #212]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d031      	beq.n	8004158 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f003 0203 	and.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d12a      	bne.n	8004158 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d122      	bne.n	8004158 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d11a      	bne.n	8004158 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	0a5b      	lsrs	r3, r3, #9
 8004126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d111      	bne.n	8004158 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d108      	bne.n	8004158 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004152:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e02b      	b.n	80041b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800415c:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 800415e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004166:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	d01f      	beq.n	80041b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	4a11      	ldr	r2, [pc, #68]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800417e:	f7fd fff5 	bl	800216c <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004184:	bf00      	nop
 8004186:	f7fd fff1 	bl	800216c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	4293      	cmp	r3, r2
 8004190:	d0f9      	beq.n	8004186 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004192:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 8004194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004196:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <HAL_RCC_OscConfig+0x7b0>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800419e:	00d2      	lsls	r2, r2, #3
 80041a0:	4906      	ldr	r1, [pc, #24]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_RCC_OscConfig+0x7ac>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3730      	adds	r7, #48	@ 0x30
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	58024400 	.word	0x58024400
 80041c0:	ffff0007 	.word	0xffff0007

080041c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e19c      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d910      	bls.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b87      	ldr	r3, [pc, #540]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 020f 	bic.w	r2, r3, #15
 80041ee:	4985      	ldr	r1, [pc, #532]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b83      	ldr	r3, [pc, #524]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e184      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d010      	beq.n	8004236 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	4b7b      	ldr	r3, [pc, #492]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004220:	429a      	cmp	r2, r3
 8004222:	d908      	bls.n	8004236 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004224:	4b78      	ldr	r3, [pc, #480]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	4975      	ldr	r1, [pc, #468]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004232:	4313      	orrs	r3, r2
 8004234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	4b70      	ldr	r3, [pc, #448]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800424e:	429a      	cmp	r2, r3
 8004250:	d908      	bls.n	8004264 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004252:	4b6d      	ldr	r3, [pc, #436]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	496a      	ldr	r1, [pc, #424]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004260:	4313      	orrs	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	4b64      	ldr	r3, [pc, #400]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004280:	4b61      	ldr	r3, [pc, #388]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	495e      	ldr	r1, [pc, #376]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 800428e:	4313      	orrs	r3, r2
 8004290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d010      	beq.n	80042c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	4b59      	ldr	r3, [pc, #356]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d908      	bls.n	80042c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042ae:	4b56      	ldr	r3, [pc, #344]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4953      	ldr	r1, [pc, #332]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	429a      	cmp	r2, r3
 80042da:	d908      	bls.n	80042ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f023 020f 	bic.w	r2, r3, #15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4947      	ldr	r1, [pc, #284]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d055      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042fa:	4b43      	ldr	r3, [pc, #268]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4940      	ldr	r1, [pc, #256]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004308:	4313      	orrs	r3, r2
 800430a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d107      	bne.n	8004324 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004314:	4b3c      	ldr	r3, [pc, #240]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d121      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0f6      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d107      	bne.n	800433c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800432c:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d115      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0ea      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004344:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0de      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004354:	4b2c      	ldr	r3, [pc, #176]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0d6      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004364:	4b28      	ldr	r3, [pc, #160]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f023 0207 	bic.w	r2, r3, #7
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4925      	ldr	r1, [pc, #148]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004372:	4313      	orrs	r3, r2
 8004374:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004376:	f7fd fef9 	bl	800216c <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437c:	e00a      	b.n	8004394 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437e:	f7fd fef5 	bl	800216c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0be      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004394:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d1eb      	bne.n	800437e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	429a      	cmp	r2, r3
 80043c0:	d208      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c2:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f023 020f 	bic.w	r2, r3, #15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	490e      	ldr	r1, [pc, #56]	@ (8004408 <HAL_RCC_ClockConfig+0x244>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d214      	bcs.n	800440c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 020f 	bic.w	r2, r3, #15
 80043ea:	4906      	ldr	r1, [pc, #24]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e086      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
 8004404:	52002000 	.word	0x52002000
 8004408:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	4b3f      	ldr	r3, [pc, #252]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004424:	429a      	cmp	r2, r3
 8004426:	d208      	bcs.n	800443a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004428:	4b3c      	ldr	r3, [pc, #240]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	4939      	ldr	r1, [pc, #228]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 8004436:	4313      	orrs	r3, r2
 8004438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d010      	beq.n	8004468 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	4b34      	ldr	r3, [pc, #208]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004452:	429a      	cmp	r2, r3
 8004454:	d208      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	492e      	ldr	r1, [pc, #184]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 8004464:	4313      	orrs	r3, r2
 8004466:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	4b28      	ldr	r3, [pc, #160]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004480:	429a      	cmp	r2, r3
 8004482:	d208      	bcs.n	8004496 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004484:	4b25      	ldr	r3, [pc, #148]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4922      	ldr	r1, [pc, #136]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 8004492:	4313      	orrs	r3, r2
 8004494:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d208      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044b2:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4917      	ldr	r1, [pc, #92]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044c4:	f000 f834 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b14      	ldr	r3, [pc, #80]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	4912      	ldr	r1, [pc, #72]	@ (8004520 <HAL_RCC_ClockConfig+0x35c>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044e2:	4b0e      	ldr	r3, [pc, #56]	@ (800451c <HAL_RCC_ClockConfig+0x358>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004520 <HAL_RCC_ClockConfig+0x35c>)
 80044ec:	5cd3      	ldrb	r3, [r2, r3]
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
 80044f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <HAL_RCC_ClockConfig+0x360>)
 80044fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004528 <HAL_RCC_ClockConfig+0x364>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <HAL_RCC_ClockConfig+0x368>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fde6 	bl	80020d8 <HAL_InitTick>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	0802d520 	.word	0x0802d520
 8004524:	24000004 	.word	0x24000004
 8004528:	24000000 	.word	0x24000000
 800452c:	24000008 	.word	0x24000008

08004530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	@ 0x24
 8004534:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004536:	4bb3      	ldr	r3, [pc, #716]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800453e:	2b18      	cmp	r3, #24
 8004540:	f200 8155 	bhi.w	80047ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	080045b1 	.word	0x080045b1
 8004550:	080047ef 	.word	0x080047ef
 8004554:	080047ef 	.word	0x080047ef
 8004558:	080047ef 	.word	0x080047ef
 800455c:	080047ef 	.word	0x080047ef
 8004560:	080047ef 	.word	0x080047ef
 8004564:	080047ef 	.word	0x080047ef
 8004568:	080047ef 	.word	0x080047ef
 800456c:	080045d7 	.word	0x080045d7
 8004570:	080047ef 	.word	0x080047ef
 8004574:	080047ef 	.word	0x080047ef
 8004578:	080047ef 	.word	0x080047ef
 800457c:	080047ef 	.word	0x080047ef
 8004580:	080047ef 	.word	0x080047ef
 8004584:	080047ef 	.word	0x080047ef
 8004588:	080047ef 	.word	0x080047ef
 800458c:	080045dd 	.word	0x080045dd
 8004590:	080047ef 	.word	0x080047ef
 8004594:	080047ef 	.word	0x080047ef
 8004598:	080047ef 	.word	0x080047ef
 800459c:	080047ef 	.word	0x080047ef
 80045a0:	080047ef 	.word	0x080047ef
 80045a4:	080047ef 	.word	0x080047ef
 80045a8:	080047ef 	.word	0x080047ef
 80045ac:	080045e3 	.word	0x080045e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b94      	ldr	r3, [pc, #592]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045bc:	4b91      	ldr	r3, [pc, #580]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a90      	ldr	r2, [pc, #576]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80045ce:	e111      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045d2:	61bb      	str	r3, [r7, #24]
      break;
 80045d4:	e10e      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80045d6:	4b8d      	ldr	r3, [pc, #564]	@ (800480c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045d8:	61bb      	str	r3, [r7, #24]
      break;
 80045da:	e10b      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80045dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045de:	61bb      	str	r3, [r7, #24]
      break;
 80045e0:	e108      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045e2:	4b88      	ldr	r3, [pc, #544]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045ec:	4b85      	ldr	r3, [pc, #532]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045f8:	4b82      	ldr	r3, [pc, #520]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004602:	4b80      	ldr	r3, [pc, #512]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80e1 	beq.w	80047e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b02      	cmp	r3, #2
 800462a:	f000 8083 	beq.w	8004734 <HAL_RCC_GetSysClockFreq+0x204>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b02      	cmp	r3, #2
 8004632:	f200 80a1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x248>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x114>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d056      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004642:	e099      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004644:	4b6f      	ldr	r3, [pc, #444]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02d      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004650:	4b6c      	ldr	r3, [pc, #432]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	4a6b      	ldr	r2, [pc, #428]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
 8004660:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467a:	4b62      	ldr	r3, [pc, #392]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468a:	ed97 6a02 	vldr	s12, [r7, #8]
 800468e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800469e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80046aa:	e087      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004818 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046be:	4b51      	ldr	r3, [pc, #324]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ee:	e065      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800481c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b40      	ldr	r3, [pc, #256]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a02 	vldr	s12, [r7, #8]
 8004716:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004732:	e043      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004820 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b2f      	ldr	r3, [pc, #188]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a02 	vldr	s12, [r7, #8]
 800475a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004776:	e021      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800481c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a02 	vldr	s12, [r7, #8]
 800479e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	0a5b      	lsrs	r3, r3, #9
 80047c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c6:	3301      	adds	r3, #1
 80047c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 3a90 	vmov	r3, s15
 80047e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
      break;
 80047ec:	e002      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80047ee:	4b07      	ldr	r3, [pc, #28]	@ (800480c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047f0:	61bb      	str	r3, [r7, #24]
      break;
 80047f2:	bf00      	nop
  }

  return sysclockfreq;
 80047f4:	69bb      	ldr	r3, [r7, #24]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3724      	adds	r7, #36	@ 0x24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	58024400 	.word	0x58024400
 8004808:	03d09000 	.word	0x03d09000
 800480c:	003d0900 	.word	0x003d0900
 8004810:	007a1200 	.word	0x007a1200
 8004814:	46000000 	.word	0x46000000
 8004818:	4c742400 	.word	0x4c742400
 800481c:	4a742400 	.word	0x4a742400
 8004820:	4af42400 	.word	0x4af42400

08004824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800482a:	f7ff fe81 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b10      	ldr	r3, [pc, #64]	@ (8004874 <HAL_RCC_GetHCLKFreq+0x50>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	490f      	ldr	r1, [pc, #60]	@ (8004878 <HAL_RCC_GetHCLKFreq+0x54>)
 800483c:	5ccb      	ldrb	r3, [r1, r3]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004848:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <HAL_RCC_GetHCLKFreq+0x50>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <HAL_RCC_GetHCLKFreq+0x54>)
 8004852:	5cd3      	ldrb	r3, [r2, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	fa22 f303 	lsr.w	r3, r2, r3
 800485e:	4a07      	ldr	r2, [pc, #28]	@ (800487c <HAL_RCC_GetHCLKFreq+0x58>)
 8004860:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004862:	4a07      	ldr	r2, [pc, #28]	@ (8004880 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <HAL_RCC_GetHCLKFreq+0x58>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58024400 	.word	0x58024400
 8004878:	0802d520 	.word	0x0802d520
 800487c:	24000004 	.word	0x24000004
 8004880:	24000000 	.word	0x24000000

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004888:	f7ff ffcc 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	0802d520 	.word	0x0802d520

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048b4:	f7ff ffb6 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	@ (80048d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	58024400 	.word	0x58024400
 80048d8:	0802d520 	.word	0x0802d520

080048dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e0:	b0c6      	sub	sp, #280	@ 0x118
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004900:	2500      	movs	r5, #0
 8004902:	ea54 0305 	orrs.w	r3, r4, r5
 8004906:	d049      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800490c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800490e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004912:	d02f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004914:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004918:	d828      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800491a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800491e:	d01a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004920:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004924:	d822      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800492e:	d007      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004930:	e01c      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004932:	4bab      	ldr	r3, [pc, #684]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	4aaa      	ldr	r2, [pc, #680]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800493c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800493e:	e01a      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004944:	3308      	adds	r3, #8
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f001 fc25 	bl	8006198 <RCCEx_PLL2_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004954:	e00f      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495a:	3328      	adds	r3, #40	@ 0x28
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f001 fccc 	bl	80062fc <RCCEx_PLL3_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800496a:	e004      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800497e:	4b98      	ldr	r3, [pc, #608]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004982:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800498c:	4a94      	ldr	r2, [pc, #592]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800498e:	430b      	orrs	r3, r1
 8004990:	6513      	str	r3, [r2, #80]	@ 0x50
 8004992:	e003      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800499c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80049a8:	f04f 0900 	mov.w	r9, #0
 80049ac:	ea58 0309 	orrs.w	r3, r8, r9
 80049b0:	d047      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80049b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d82a      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80049bc:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049d9 	.word	0x080049d9
 80049c8:	080049e7 	.word	0x080049e7
 80049cc:	080049fd 	.word	0x080049fd
 80049d0:	08004a1b 	.word	0x08004a1b
 80049d4:	08004a1b 	.word	0x08004a1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d8:	4b81      	ldr	r3, [pc, #516]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	4a80      	ldr	r2, [pc, #512]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e4:	e01a      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ea:	3308      	adds	r3, #8
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 fbd2 	bl	8006198 <RCCEx_PLL2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049fa:	e00f      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a00:	3328      	adds	r3, #40	@ 0x28
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 fc79 	bl	80062fc <RCCEx_PLL3_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a10:	e004      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a18:	e000      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a24:	4b6e      	ldr	r3, [pc, #440]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a28:	f023 0107 	bic.w	r1, r3, #7
 8004a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a32:	4a6b      	ldr	r2, [pc, #428]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a38:	e003      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004a4e:	f04f 0b00 	mov.w	fp, #0
 8004a52:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a56:	d05b      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a60:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004a64:	d03b      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004a66:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004a6a:	d834      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a70:	d037      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a76:	d82e      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a7c:	d033      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a82:	d828      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a88:	d01a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004a8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a8e:	d822      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004a94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a98:	d007      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004a9a:	e01c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4b50      	ldr	r3, [pc, #320]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e01e      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aae:	3308      	adds	r3, #8
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 fb70 	bl	8006198 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004abe:	e013      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac4:	3328      	adds	r3, #40	@ 0x28
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fc17 	bl	80062fc <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004adc:	e004      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004ade:	bf00      	nop
 8004ae0:	e002      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004af0:	4b3b      	ldr	r3, [pc, #236]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b00:	4a37      	ldr	r2, [pc, #220]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b06:	e003      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	d05d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b3c:	d03b      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004b3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b42:	d834      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b48:	d037      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b4e:	d82e      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b54:	d033      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004b56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b5a:	d828      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b60:	d01a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b66:	d822      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b70:	d007      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b72:	e01c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b74:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	4a19      	ldr	r2, [pc, #100]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b80:	e01e      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b86:	3308      	adds	r3, #8
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 fb04 	bl	8006198 <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b96:	e013      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9c:	3328      	adds	r3, #40	@ 0x28
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fbab 	bl	80062fc <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bb4:	e004      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004bb6:	bf00      	nop
 8004bb8:	e002      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10d      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bcc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004bd8:	4a01      	ldr	r2, [pc, #4]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bde:	e005      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c02:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d03a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c12:	2b30      	cmp	r3, #48	@ 0x30
 8004c14:	d01f      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004c16:	2b30      	cmp	r3, #48	@ 0x30
 8004c18:	d819      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d00c      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d815      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d111      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2a:	4baa      	ldr	r3, [pc, #680]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	4aa9      	ldr	r2, [pc, #676]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c36:	e011      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 faa9 	bl	8006198 <RCCEx_PLL2_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c64:	4b9b      	ldr	r3, [pc, #620]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c72:	4a98      	ldr	r2, [pc, #608]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c74:	430b      	orrs	r3, r1
 8004c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c78:	e003      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	d051      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cac:	d035      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cb2:	d82e      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004cb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cb8:	d031      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004cba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cbe:	d828      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc4:	d01a      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cca:	d822      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004cd6:	e01c      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	4a7d      	ldr	r2, [pc, #500]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ce4:	e01c      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cea:	3308      	adds	r3, #8
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 fa52 	bl	8006198 <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cfa:	e011      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d00:	3328      	adds	r3, #40	@ 0x28
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 faf9 	bl	80062fc <RCCEx_PLL3_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d18:	e002      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d28:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	4a67      	ldr	r2, [pc, #412]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d5c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d053      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d70:	d033      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004d72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d76:	d82c      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d7c:	d02f      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d82:	d826      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d88:	d02b      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d8e:	d820      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d94:	d012      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d9a:	d81a      	bhi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d022      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da4:	d115      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004daa:	3308      	adds	r3, #8
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f9f2 	bl	8006198 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dba:	e015      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc0:	3328      	adds	r3, #40	@ 0x28
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fa99 	bl	80062fc <RCCEx_PLL3_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dd8:	e006      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004dda:	bf00      	nop
 8004ddc:	e004      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004dde:	bf00      	nop
 8004de0:	e002      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004df0:	4b38      	ldr	r3, [pc, #224]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfe:	4a35      	ldr	r2, [pc, #212]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e00:	430b      	orrs	r3, r1
 8004e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e04:	e003      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e24:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	d058      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e3a:	d033      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e40:	d82c      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e46:	d02f      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4c:	d826      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e52:	d02b      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004e54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e58:	d820      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e5e:	d012      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e64:	d81a      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d022      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6e:	d115      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e74:	3308      	adds	r3, #8
 8004e76:	2101      	movs	r1, #1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f001 f98d 	bl	8006198 <RCCEx_PLL2_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e84:	e015      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8a:	3328      	adds	r3, #40	@ 0x28
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 fa34 	bl	80062fc <RCCEx_PLL3_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ea2:	e006      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ea4:	bf00      	nop
 8004ea6:	e004      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004eca:	4a02      	ldr	r2, [pc, #8]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004ed2:	bf00      	nop
 8004ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ef6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d037      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f0a:	d00e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f10:	d816      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f1a:	d111      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4bc4      	ldr	r3, [pc, #784]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4ac3      	ldr	r2, [pc, #780]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f28:	e00f      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2101      	movs	r1, #1
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f930 	bl	8006198 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f52:	4bb7      	ldr	r3, [pc, #732]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f60:	4ab3      	ldr	r2, [pc, #716]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	d039      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d81c      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fdd 	.word	0x08004fdd
 8004fa4:	08004fb1 	.word	0x08004fb1
 8004fa8:	08004fbf 	.word	0x08004fbf
 8004fac:	08004fdd 	.word	0x08004fdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb0:	4b9f      	ldr	r3, [pc, #636]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	4a9e      	ldr	r2, [pc, #632]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fbc:	e00f      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 f8e6 	bl	8006198 <RCCEx_PLL2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fe6:	4b92      	ldr	r3, [pc, #584]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fea:	f023 0103 	bic.w	r1, r3, #3
 8004fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ffa:	e003      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005014:	2300      	movs	r3, #0
 8005016:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800501a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	f000 8099 	beq.w	8005158 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005026:	4b83      	ldr	r3, [pc, #524]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a82      	ldr	r2, [pc, #520]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800502c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005030:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005032:	f7fd f89b 	bl	800216c <HAL_GetTick>
 8005036:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800503a:	e00b      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503c:	f7fd f896 	bl	800216c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	@ 0x64
 800504a:	d903      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005054:	4b77      	ldr	r3, [pc, #476]	@ (8005234 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ed      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005064:	2b00      	cmp	r3, #0
 8005066:	d173      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005068:	4b71      	ldr	r3, [pc, #452]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800506a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800506c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005074:	4053      	eors	r3, r2
 8005076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800507e:	4b6c      	ldr	r3, [pc, #432]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005086:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800508a:	4b69      	ldr	r3, [pc, #420]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	4a68      	ldr	r2, [pc, #416]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005096:	4b66      	ldr	r3, [pc, #408]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a65      	ldr	r2, [pc, #404]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050a2:	4a63      	ldr	r2, [pc, #396]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b6:	d118      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fd f858 	bl	800216c <HAL_GetTick>
 80050bc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050c0:	e00d      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c2:	f7fd f853 	bl	800216c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80050cc:	1ad2      	subs	r2, r2, r3
 80050ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d903      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80050dc:	e005      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050de:	4b54      	ldr	r3, [pc, #336]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0eb      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80050ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d129      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005102:	d10e      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005104:	4b4a      	ldr	r3, [pc, #296]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005114:	091a      	lsrs	r2, r3, #4
 8005116:	4b48      	ldr	r3, [pc, #288]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005118:	4013      	ands	r3, r2
 800511a:	4a45      	ldr	r2, [pc, #276]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800511c:	430b      	orrs	r3, r1
 800511e:	6113      	str	r3, [r2, #16]
 8005120:	e005      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005122:	4b43      	ldr	r3, [pc, #268]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	4a42      	ldr	r2, [pc, #264]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005128:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800512c:	6113      	str	r3, [r2, #16]
 800512e:	4b40      	ldr	r3, [pc, #256]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005130:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513e:	4a3c      	ldr	r2, [pc, #240]	@ (8005230 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005140:	430b      	orrs	r3, r1
 8005142:	6713      	str	r3, [r2, #112]	@ 0x70
 8005144:	e008      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800514a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f002 0301 	and.w	r3, r2, #1
 8005164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005168:	2300      	movs	r3, #0
 800516a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800516e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005172:	460b      	mov	r3, r1
 8005174:	4313      	orrs	r3, r2
 8005176:	f000 808f 	beq.w	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800517a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005180:	2b28      	cmp	r3, #40	@ 0x28
 8005182:	d871      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005184:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	08005271 	.word	0x08005271
 8005190:	08005269 	.word	0x08005269
 8005194:	08005269 	.word	0x08005269
 8005198:	08005269 	.word	0x08005269
 800519c:	08005269 	.word	0x08005269
 80051a0:	08005269 	.word	0x08005269
 80051a4:	08005269 	.word	0x08005269
 80051a8:	08005269 	.word	0x08005269
 80051ac:	0800523d 	.word	0x0800523d
 80051b0:	08005269 	.word	0x08005269
 80051b4:	08005269 	.word	0x08005269
 80051b8:	08005269 	.word	0x08005269
 80051bc:	08005269 	.word	0x08005269
 80051c0:	08005269 	.word	0x08005269
 80051c4:	08005269 	.word	0x08005269
 80051c8:	08005269 	.word	0x08005269
 80051cc:	08005253 	.word	0x08005253
 80051d0:	08005269 	.word	0x08005269
 80051d4:	08005269 	.word	0x08005269
 80051d8:	08005269 	.word	0x08005269
 80051dc:	08005269 	.word	0x08005269
 80051e0:	08005269 	.word	0x08005269
 80051e4:	08005269 	.word	0x08005269
 80051e8:	08005269 	.word	0x08005269
 80051ec:	08005271 	.word	0x08005271
 80051f0:	08005269 	.word	0x08005269
 80051f4:	08005269 	.word	0x08005269
 80051f8:	08005269 	.word	0x08005269
 80051fc:	08005269 	.word	0x08005269
 8005200:	08005269 	.word	0x08005269
 8005204:	08005269 	.word	0x08005269
 8005208:	08005269 	.word	0x08005269
 800520c:	08005271 	.word	0x08005271
 8005210:	08005269 	.word	0x08005269
 8005214:	08005269 	.word	0x08005269
 8005218:	08005269 	.word	0x08005269
 800521c:	08005269 	.word	0x08005269
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	08005271 	.word	0x08005271
 8005230:	58024400 	.word	0x58024400
 8005234:	58024800 	.word	0x58024800
 8005238:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	3308      	adds	r3, #8
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f000 ffa7 	bl	8006198 <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005250:	e00f      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	3328      	adds	r3, #40	@ 0x28
 8005258:	2101      	movs	r1, #1
 800525a:	4618      	mov	r0, r3
 800525c:	f001 f84e 	bl	80062fc <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005266:	e004      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800527a:	4bbf      	ldr	r3, [pc, #764]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005288:	4abb      	ldr	r2, [pc, #748]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800528a:	430b      	orrs	r3, r1
 800528c:	6553      	str	r3, [r2, #84]	@ 0x54
 800528e:	e003      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f002 0302 	and.w	r3, r2, #2
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	d041      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d824      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80052c2:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	08005315 	.word	0x08005315
 80052cc:	080052e1 	.word	0x080052e1
 80052d0:	080052f7 	.word	0x080052f7
 80052d4:	08005315 	.word	0x08005315
 80052d8:	08005315 	.word	0x08005315
 80052dc:	08005315 	.word	0x08005315
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e4:	3308      	adds	r3, #8
 80052e6:	2101      	movs	r1, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 ff55 	bl	8006198 <RCCEx_PLL2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052f4:	e00f      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	3328      	adds	r3, #40	@ 0x28
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fffc 	bl	80062fc <RCCEx_PLL3_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800530a:	e004      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800531e:	4b96      	ldr	r3, [pc, #600]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	f023 0107 	bic.w	r1, r3, #7
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532c:	4a92      	ldr	r2, [pc, #584]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800532e:	430b      	orrs	r3, r1
 8005330:	6553      	str	r3, [r2, #84]	@ 0x54
 8005332:	e003      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f002 0304 	and.w	r3, r2, #4
 8005348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005352:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005356:	460b      	mov	r3, r1
 8005358:	4313      	orrs	r3, r2
 800535a:	d044      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005364:	2b05      	cmp	r3, #5
 8005366:	d825      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005368:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	080053bd 	.word	0x080053bd
 8005374:	08005389 	.word	0x08005389
 8005378:	0800539f 	.word	0x0800539f
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053bd 	.word	0x080053bd
 8005384:	080053bd 	.word	0x080053bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538c:	3308      	adds	r3, #8
 800538e:	2101      	movs	r1, #1
 8005390:	4618      	mov	r0, r3
 8005392:	f000 ff01 	bl	8006198 <RCCEx_PLL2_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800539c:	e00f      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a2:	3328      	adds	r3, #40	@ 0x28
 80053a4:	2101      	movs	r1, #1
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 ffa8 	bl	80062fc <RCCEx_PLL3_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ca:	f023 0107 	bic.w	r1, r3, #7
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d6:	4a68      	ldr	r2, [pc, #416]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6593      	str	r3, [r2, #88]	@ 0x58
 80053dc:	e003      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f002 0320 	and.w	r3, r2, #32
 80053f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053f6:	2300      	movs	r3, #0
 80053f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d055      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800540e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005412:	d033      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005418:	d82c      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541e:	d02f      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005424:	d826      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005426:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800542a:	d02b      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800542c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005430:	d820      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005436:	d012      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800543c:	d81a      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d022      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005446:	d115      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	3308      	adds	r3, #8
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fea1 	bl	8006198 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800545c:	e015      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800545e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005462:	3328      	adds	r3, #40	@ 0x28
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 ff48 	bl	80062fc <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005472:	e00a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800547a:	e006      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005492:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a2:	4a35      	ldr	r2, [pc, #212]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80054a8:	e003      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d058      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054de:	d033      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80054e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054e4:	d82c      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d02f      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f0:	d826      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054f6:	d02b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80054f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054fc:	d820      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005502:	d012      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005508:	d81a      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d022      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005512:	d115      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005518:	3308      	adds	r3, #8
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fe3b 	bl	8006198 <RCCEx_PLL2_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005528:	e015      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552e:	3328      	adds	r3, #40	@ 0x28
 8005530:	2102      	movs	r1, #2
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fee2 	bl	80062fc <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800553e:	e00a      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005546:	e006      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005548:	bf00      	nop
 800554a:	e004      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800554c:	bf00      	nop
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10e      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005562:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800556e:	4a02      	ldr	r2, [pc, #8]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6593      	str	r3, [r2, #88]	@ 0x58
 8005574:	e006      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005580:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800559a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d055      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055b0:	d033      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80055b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055b6:	d82c      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055bc:	d02f      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80055be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c2:	d826      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055c8:	d02b      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80055ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055ce:	d820      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055d4:	d012      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80055d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055da:	d81a      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d022      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e4:	d115      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ea:	3308      	adds	r3, #8
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fdd2 	bl	8006198 <RCCEx_PLL2_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055fa:	e015      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005600:	3328      	adds	r3, #40	@ 0x28
 8005602:	2102      	movs	r1, #2
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fe79 	bl	80062fc <RCCEx_PLL3_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005610:	e00a      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005618:	e006      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800561a:	bf00      	nop
 800561c:	e004      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005630:	4ba0      	ldr	r3, [pc, #640]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005640:	4a9c      	ldr	r2, [pc, #624]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005642:	430b      	orrs	r3, r1
 8005644:	6593      	str	r3, [r2, #88]	@ 0x58
 8005646:	e003      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800564c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f002 0308 	and.w	r3, r2, #8
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005666:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800566a:	460b      	mov	r3, r1
 800566c:	4313      	orrs	r3, r2
 800566e:	d01e      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567c:	d10c      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005682:	3328      	adds	r3, #40	@ 0x28
 8005684:	2102      	movs	r1, #2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fe38 	bl	80062fc <RCCEx_PLL3_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005698:	4b86      	ldr	r3, [pc, #536]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a8:	4a82      	ldr	r2, [pc, #520]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f002 0310 	and.w	r3, r2, #16
 80056ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056c8:	460b      	mov	r3, r1
 80056ca:	4313      	orrs	r3, r2
 80056cc:	d01e      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056da:	d10c      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	3328      	adds	r3, #40	@ 0x28
 80056e2:	2102      	movs	r1, #2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fe09 	bl	80062fc <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056f6:	4b6f      	ldr	r3, [pc, #444]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005706:	4a6b      	ldr	r2, [pc, #428]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005708:	430b      	orrs	r3, r1
 800570a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005718:	67bb      	str	r3, [r7, #120]	@ 0x78
 800571a:	2300      	movs	r3, #0
 800571c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800571e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d03e      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005734:	d022      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005736:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573a:	d81b      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005744:	d00b      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005746:	e015      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574c:	3308      	adds	r3, #8
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fd21 	bl	8006198 <RCCEx_PLL2_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800575c:	e00f      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005762:	3328      	adds	r3, #40	@ 0x28
 8005764:	2102      	movs	r1, #2
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fdc8 	bl	80062fc <RCCEx_PLL3_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800577c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005786:	4b4b      	ldr	r3, [pc, #300]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005796:	4a47      	ldr	r2, [pc, #284]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005798:	430b      	orrs	r3, r1
 800579a:	6593      	str	r3, [r2, #88]	@ 0x58
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b4:	2300      	movs	r3, #0
 80057b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80057b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057bc:	460b      	mov	r3, r1
 80057be:	4313      	orrs	r3, r2
 80057c0:	d03b      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057ce:	d01f      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80057d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057d4:	d818      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80057d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057da:	d003      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80057dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e0:	d007      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80057e2:	e011      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4b33      	ldr	r3, [pc, #204]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	4a32      	ldr	r2, [pc, #200]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057f0:	e00f      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f6:	3328      	adds	r3, #40	@ 0x28
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fd7e 	bl	80062fc <RCCEx_PLL3_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005806:	e004      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800580e:	e000      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800581a:	4b26      	ldr	r3, [pc, #152]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800581c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582a:	4a22      	ldr	r2, [pc, #136]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800582c:	430b      	orrs	r3, r1
 800582e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005830:	e003      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005836:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005846:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005848:	2300      	movs	r3, #0
 800584a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800584c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005850:	460b      	mov	r3, r1
 8005852:	4313      	orrs	r3, r2
 8005854:	d034      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005864:	d007      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005866:	e011      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4b12      	ldr	r3, [pc, #72]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800586e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005874:	e00e      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	3308      	adds	r3, #8
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fc8a 	bl	8006198 <RCCEx_PLL2_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800589e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058aa:	4a02      	ldr	r2, [pc, #8]	@ (80058b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80058b2:	bf00      	nop
 80058b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ce:	2300      	movs	r3, #0
 80058d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80058d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d00c      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e0:	3328      	adds	r3, #40	@ 0x28
 80058e2:	2102      	movs	r1, #2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fd09 	bl	80062fc <RCCEx_PLL3_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005902:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005904:	2300      	movs	r3, #0
 8005906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005908:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800590c:	460b      	mov	r3, r1
 800590e:	4313      	orrs	r3, r2
 8005910:	d036      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800591c:	d018      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800591e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005922:	d811      	bhi.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005928:	d014      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800592a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800592e:	d80b      	bhi.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d011      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005938:	d106      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593a:	4bb7      	ldr	r3, [pc, #732]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	4ab6      	ldr	r2, [pc, #728]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005946:	e008      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800594e:	e004      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005950:	bf00      	nop
 8005952:	e002      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005954:	bf00      	nop
 8005956:	e000      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005962:	4bad      	ldr	r3, [pc, #692]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005966:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005970:	4aa9      	ldr	r2, [pc, #676]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005972:	430b      	orrs	r3, r1
 8005974:	6553      	str	r3, [r2, #84]	@ 0x54
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800597c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800598c:	653b      	str	r3, [r7, #80]	@ 0x50
 800598e:	2300      	movs	r3, #0
 8005990:	657b      	str	r3, [r7, #84]	@ 0x54
 8005992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800599c:	4b9e      	ldr	r3, [pc, #632]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a9b      	ldr	r2, [pc, #620]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80059bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059be:	2300      	movs	r3, #0
 80059c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d009      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059cc:	4b92      	ldr	r3, [pc, #584]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059da:	4a8f      	ldr	r2, [pc, #572]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ee:	2300      	movs	r3, #0
 80059f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059fc:	4b86      	ldr	r3, [pc, #536]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	4a85      	ldr	r2, [pc, #532]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a06:	6113      	str	r3, [r2, #16]
 8005a08:	4b83      	ldr	r3, [pc, #524]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a0a:	6919      	ldr	r1, [r3, #16]
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a14:	4a80      	ldr	r2, [pc, #512]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a36:	4b78      	ldr	r3, [pc, #480]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a44:	4a74      	ldr	r2, [pc, #464]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a46:	430b      	orrs	r3, r1
 8005a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a58:	2300      	movs	r3, #0
 8005a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a5c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a60:	460b      	mov	r3, r1
 8005a62:	4313      	orrs	r3, r2
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a66:	4b6c      	ldr	r3, [pc, #432]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	4a68      	ldr	r2, [pc, #416]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	2100      	movs	r1, #0
 8005a86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a8e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	d011      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fb79 	bl	8006198 <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	6239      	str	r1, [r7, #32]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ace:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	d011      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005adc:	3308      	adds	r3, #8
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fb59 	bl	8006198 <RCCEx_PLL2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005af8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	2100      	movs	r1, #0
 8005b06:	61b9      	str	r1, [r7, #24]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b12:	460b      	mov	r3, r1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	d011      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fb39 	bl	8006198 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	2100      	movs	r1, #0
 8005b46:	6139      	str	r1, [r7, #16]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b52:	460b      	mov	r3, r1
 8005b54:	4313      	orrs	r3, r2
 8005b56:	d011      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5c:	3328      	adds	r3, #40	@ 0x28
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fbcb 	bl	80062fc <RCCEx_PLL3_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	2100      	movs	r1, #0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d011      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9c:	3328      	adds	r3, #40	@ 0x28
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fbab 	bl	80062fc <RCCEx_PLL3_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6039      	str	r1, [r7, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d011      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	3328      	adds	r3, #40	@ 0x28
 8005bde:	2102      	movs	r1, #2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fb8b 	bl	80062fc <RCCEx_PLL3_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005bfc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005c10:	46bd      	mov	sp, r7
 8005c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c16:	bf00      	nop
 8005c18:	58024400 	.word	0x58024400

08005c1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c20:	f7fe fe00 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4904      	ldr	r1, [pc, #16]	@ (8005c44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	0802d520 	.word	0x0802d520

08005c48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	@ 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c50:	4ba1      	ldr	r3, [pc, #644]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	f003 0303 	and.w	r3, r3, #3
 8005c58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	0b1b      	lsrs	r3, r3, #12
 8005c60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c66:	4b9c      	ldr	r3, [pc, #624]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c72:	4b99      	ldr	r3, [pc, #612]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8111 	beq.w	8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	f000 8083 	beq.w	8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f200 80a1 	bhi.w	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d056      	beq.n	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cb2:	e099      	b.n	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb4:	4b88      	ldr	r3, [pc, #544]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d02d      	beq.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cc0:	4b85      	ldr	r3, [pc, #532]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	08db      	lsrs	r3, r3, #3
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	4a84      	ldr	r2, [pc, #528]	@ (8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cea:	4b7b      	ldr	r3, [pc, #492]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d1a:	e087      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5e:	e065      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b59      	ldr	r3, [pc, #356]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da2:	e043      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b48      	ldr	r3, [pc, #288]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de6:	e021      	b.n	8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfa:	4b37      	ldr	r3, [pc, #220]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	0a5b      	lsrs	r3, r3, #9
 8005e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e80:	ee17 2a90 	vmov	r2, s15
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	0e1b      	lsrs	r3, r3, #24
 8005e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eae:	ee17 2a90 	vmov	r2, s15
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005eb6:	e008      	b.n	8005eca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	609a      	str	r2, [r3, #8]
}
 8005eca:	bf00      	nop
 8005ecc:	3724      	adds	r7, #36	@ 0x24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	46000000 	.word	0x46000000
 8005ee4:	4c742400 	.word	0x4c742400
 8005ee8:	4a742400 	.word	0x4a742400
 8005eec:	4af42400 	.word	0x4af42400

08005ef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	@ 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef8:	4ba1      	ldr	r3, [pc, #644]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f02:	4b9f      	ldr	r3, [pc, #636]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	0d1b      	lsrs	r3, r3, #20
 8005f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f0e:	4b9c      	ldr	r3, [pc, #624]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f1a:	4b99      	ldr	r3, [pc, #612]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	08db      	lsrs	r3, r3, #3
 8005f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8111 	beq.w	8006160 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f000 8083 	beq.w	800604c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	f200 80a1 	bhi.w	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d056      	beq.n	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f5a:	e099      	b.n	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5c:	4b88      	ldr	r3, [pc, #544]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d02d      	beq.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f68:	4b85      	ldr	r3, [pc, #532]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	4a84      	ldr	r2, [pc, #528]	@ (8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b7b      	ldr	r3, [pc, #492]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fc2:	e087      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	e065      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b59      	ldr	r3, [pc, #356]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a03 	vldr	s12, [r7, #12]
 800602e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604a:	e043      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b48      	ldr	r3, [pc, #288]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006072:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608e:	e021      	b.n	80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b37      	ldr	r3, [pc, #220]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80060d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	0a5b      	lsrs	r3, r3, #9
 80060da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 2a90 	vmov	r2, s15
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006102:	4b1f      	ldr	r3, [pc, #124]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006114:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006128:	ee17 2a90 	vmov	r2, s15
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006130:	4b13      	ldr	r3, [pc, #76]	@ (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	0e1b      	lsrs	r3, r3, #24
 8006136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800614a:	edd7 6a07 	vldr	s13, [r7, #28]
 800614e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006156:	ee17 2a90 	vmov	r2, s15
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800615e:	e008      	b.n	8006172 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	609a      	str	r2, [r3, #8]
}
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	@ 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	58024400 	.word	0x58024400
 8006184:	03d09000 	.word	0x03d09000
 8006188:	46000000 	.word	0x46000000
 800618c:	4c742400 	.word	0x4c742400
 8006190:	4a742400 	.word	0x4a742400
 8006194:	4af42400 	.word	0x4af42400

08006198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061a6:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d101      	bne.n	80061b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e099      	b.n	80062ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061b6:	4b4f      	ldr	r3, [pc, #316]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a4e      	ldr	r2, [pc, #312]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c2:	f7fb ffd3 	bl	800216c <HAL_GetTick>
 80061c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061c8:	e008      	b.n	80061dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061ca:	f7fb ffcf 	bl	800216c <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e086      	b.n	80062ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061dc:	4b45      	ldr	r3, [pc, #276]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f0      	bne.n	80061ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061e8:	4b42      	ldr	r3, [pc, #264]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	031b      	lsls	r3, r3, #12
 80061f6:	493f      	ldr	r1, [pc, #252]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	3b01      	subs	r3, #1
 8006202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	3b01      	subs	r3, #1
 800620c:	025b      	lsls	r3, r3, #9
 800620e:	b29b      	uxth	r3, r3
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	3b01      	subs	r3, #1
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	3b01      	subs	r3, #1
 8006226:	061b      	lsls	r3, r3, #24
 8006228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800622c:	4931      	ldr	r1, [pc, #196]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800622e:	4313      	orrs	r3, r2
 8006230:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006232:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	492d      	ldr	r1, [pc, #180]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006244:	4b2b      	ldr	r3, [pc, #172]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	f023 0220 	bic.w	r2, r3, #32
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	4928      	ldr	r1, [pc, #160]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006256:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4a26      	ldr	r2, [pc, #152]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800625c:	f023 0310 	bic.w	r3, r3, #16
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006262:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <RCCEx_PLL2_Config+0x160>)
 8006268:	4013      	ands	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	69d2      	ldr	r2, [r2, #28]
 800626e:	00d2      	lsls	r2, r2, #3
 8006270:	4920      	ldr	r1, [pc, #128]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006272:	4313      	orrs	r3, r2
 8006274:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006276:	4b1f      	ldr	r3, [pc, #124]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	4a1e      	ldr	r2, [pc, #120]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800627c:	f043 0310 	orr.w	r3, r3, #16
 8006280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006288:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800628e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006294:	e00f      	b.n	80062b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d106      	bne.n	80062aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800629c:	4b15      	ldr	r3, [pc, #84]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062a8:	e005      	b.n	80062b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	4a11      	ldr	r2, [pc, #68]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062b6:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a0e      	ldr	r2, [pc, #56]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c2:	f7fb ff53 	bl	800216c <HAL_GetTick>
 80062c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062c8:	e008      	b.n	80062dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062ca:	f7fb ff4f 	bl	800216c <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e006      	b.n	80062ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062dc:	4b05      	ldr	r3, [pc, #20]	@ (80062f4 <RCCEx_PLL2_Config+0x15c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f0      	beq.n	80062ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	58024400 	.word	0x58024400
 80062f8:	ffff0007 	.word	0xffff0007

080062fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800630a:	4b53      	ldr	r3, [pc, #332]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d101      	bne.n	800631a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e099      	b.n	800644e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800631a:	4b4f      	ldr	r3, [pc, #316]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a4e      	ldr	r2, [pc, #312]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006326:	f7fb ff21 	bl	800216c <HAL_GetTick>
 800632a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800632c:	e008      	b.n	8006340 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800632e:	f7fb ff1d 	bl	800216c <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e086      	b.n	800644e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006340:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f0      	bne.n	800632e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800634c:	4b42      	ldr	r3, [pc, #264]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	051b      	lsls	r3, r3, #20
 800635a:	493f      	ldr	r1, [pc, #252]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	3b01      	subs	r3, #1
 8006366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	3b01      	subs	r3, #1
 8006370:	025b      	lsls	r3, r3, #9
 8006372:	b29b      	uxth	r3, r3
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	3b01      	subs	r3, #1
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	3b01      	subs	r3, #1
 800638a:	061b      	lsls	r3, r3, #24
 800638c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006390:	4931      	ldr	r1, [pc, #196]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006392:	4313      	orrs	r3, r2
 8006394:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006396:	4b30      	ldr	r3, [pc, #192]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	492d      	ldr	r1, [pc, #180]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4928      	ldr	r1, [pc, #160]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063ba:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063be:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063c6:	4b24      	ldr	r3, [pc, #144]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ca:	4b24      	ldr	r3, [pc, #144]	@ (800645c <RCCEx_PLL3_Config+0x160>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	69d2      	ldr	r2, [r2, #28]
 80063d2:	00d2      	lsls	r2, r2, #3
 80063d4:	4920      	ldr	r1, [pc, #128]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063da:	4b1f      	ldr	r3, [pc, #124]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	4a19      	ldr	r2, [pc, #100]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 80063f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063f8:	e00f      	b.n	800641a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d106      	bne.n	800640e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006400:	4b15      	ldr	r3, [pc, #84]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800640a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800640c:	e005      	b.n	800641a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	4a11      	ldr	r2, [pc, #68]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800641a:	4b0f      	ldr	r3, [pc, #60]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a0e      	ldr	r2, [pc, #56]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006426:	f7fb fea1 	bl	800216c <HAL_GetTick>
 800642a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800642c:	e008      	b.n	8006440 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800642e:	f7fb fe9d 	bl	800216c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e006      	b.n	800644e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <RCCEx_PLL3_Config+0x15c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f0      	beq.n	800642e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	58024400 	.word	0x58024400
 800645c:	ffff0007 	.word	0xffff0007

08006460 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e092      	b.n	8006598 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7a5b      	ldrb	r3, [r3, #9]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb fbcc 	bl	8001c20 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0204 	bic.w	r2, r2, #4
 800649c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b3e      	ldr	r3, [pc, #248]	@ (80065a0 <HAL_RNG_Init+0x140>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6852      	ldr	r2, [r2, #4]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80064b6:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a39      	ldr	r2, [pc, #228]	@ (80065a4 <HAL_RNG_Init+0x144>)
 80064be:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f247 2274 	movw	r2, #29300	@ 0x7274
 80064c8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80064d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064da:	f7fb fe47 	bl	800216c <HAL_GetTick>
 80064de:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80064e0:	e016      	b.n	8006510 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80064e2:	f7fb fe43 	bl	800216c <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d90f      	bls.n	8006510 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fe:	d107      	bne.n	8006510 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e043      	b.n	8006598 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651e:	d0e0      	beq.n	80064e2 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0204 	orr.w	r2, r2, #4
 800652e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653a:	2b40      	cmp	r3, #64	@ 0x40
 800653c:	d104      	bne.n	8006548 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e027      	b.n	8006598 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006548:	f7fb fe10 	bl	800216c <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800654e:	e015      	b.n	800657c <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006550:	f7fb fe0c 	bl	800216c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d90e      	bls.n	800657c <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b01      	cmp	r3, #1
 800656a:	d007      	beq.n	800657c <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2204      	movs	r2, #4
 8006570:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e00d      	b.n	8006598 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d1e2      	bne.n	8006550 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	bfffffdf 	.word	0xbfffffdf
 80065a4:	17590abc 	.word	0x17590abc

080065a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7a1b      	ldrb	r3, [r3, #8]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80065be:	2302      	movs	r3, #2
 80065c0:	e068      	b.n	8006694 <HAL_RNG_GenerateRandomNumber+0xec>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	7a5b      	ldrb	r3, [r3, #9]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d157      	bne.n	8006682 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d10f      	bne.n	8006606 <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2208      	movs	r2, #8
 80065ea:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f85f 	bl	80066b0 <RNG_RecoverSeedError>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d104      	bne.n	8006606 <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	60da      	str	r2, [r3, #12]
        return status;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	e046      	b.n	8006694 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8006606:	f7fb fdb1 	bl	800216c <HAL_GetTick>
 800660a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800660c:	e018      	b.n	8006640 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800660e:	f7fb fdad 	bl	800216c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d911      	bls.n	8006640 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b01      	cmp	r3, #1
 8006628:	d00a      	beq.n	8006640 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e029      	b.n	8006694 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b01      	cmp	r3, #1
 800664c:	d1df      	bne.n	800660e <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006662:	2b40      	cmp	r3, #64	@ 0x40
 8006664:	d105      	bne.n	8006672 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2208      	movs	r2, #8
 800666a:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	e003      	b.n	800667a <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	725a      	strb	r2, [r3, #9]
 8006680:	e004      	b.n	800668c <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	721a      	strb	r2, [r3, #8]

  return status;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d008      	beq.n	80066dc <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	e05f      	b.n	800679c <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80066ea:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80066fa:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 80066fc:	2302      	movs	r3, #2
 80066fe:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b01      	subs	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d110      	bne.n	800672e <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f043 0202 	orr.w	r2, r3, #2
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ffb9 	bl	800669c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e03d      	b.n	80067aa <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673c:	d0e0      	beq.n	8006700 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d107      	bne.n	800675c <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800675a:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800675c:	2302      	movs	r3, #2
 800675e:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3b01      	subs	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d110      	bne.n	800678e <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f043 0202 	orr.w	r2, r3, #2
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff89 	bl	800669c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e00d      	b.n	80067aa <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b04      	cmp	r3, #4
 800679a:	d0e1      	beq.n	8006760 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f023 0208 	bic.w	r2, r3, #8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e042      	b.n	800684a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fb fa5c 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2224      	movs	r2, #36	@ 0x24
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 ff23 	bl	8007648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8b4 	bl	8006970 <UART_SetConfig>
 8006808:	4603      	mov	r3, r0
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e01b      	b.n	800684a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006820:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006830:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0201 	orr.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 ffa2 	bl	800778c <UART_CheckIdleState>
 8006848:	4603      	mov	r3, r0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b08a      	sub	sp, #40	@ 0x28
 8006856:	af02      	add	r7, sp, #8
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	4613      	mov	r3, r2
 8006860:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	2b20      	cmp	r3, #32
 800686a:	d17b      	bne.n	8006964 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_Transmit+0x26>
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e074      	b.n	8006966 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2221      	movs	r2, #33	@ 0x21
 8006888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800688c:	f7fb fc6e 	bl	800216c <HAL_GetTick>
 8006890:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068aa:	d108      	bne.n	80068be <HAL_UART_Transmit+0x6c>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e003      	b.n	80068c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068c6:	e030      	b.n	800692a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2180      	movs	r1, #128	@ 0x80
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f001 f804 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e03d      	b.n	8006966 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10b      	bne.n	8006908 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	3302      	adds	r3, #2
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e007      	b.n	8006918 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	781a      	ldrb	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3301      	adds	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1c8      	bne.n	80068c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2200      	movs	r2, #0
 800693e:	2140      	movs	r1, #64	@ 0x40
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 ffcd 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006974:	b092      	sub	sp, #72	@ 0x48
 8006976:	af00      	add	r7, sp, #0
 8006978:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	431a      	orrs	r2, r3
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	431a      	orrs	r2, r3
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	4313      	orrs	r3, r2
 8006996:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4bbe      	ldr	r3, [pc, #760]	@ (8006c98 <UART_SetConfig+0x328>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4ab3      	ldr	r2, [pc, #716]	@ (8006c9c <UART_SetConfig+0x32c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d8:	4313      	orrs	r3, r2
 80069da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	4baf      	ldr	r3, [pc, #700]	@ (8006ca0 <UART_SetConfig+0x330>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	f023 010f 	bic.w	r1, r3, #15
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4aa6      	ldr	r2, [pc, #664]	@ (8006ca4 <UART_SetConfig+0x334>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d177      	bne.n	8006b00 <UART_SetConfig+0x190>
 8006a10:	4ba5      	ldr	r3, [pc, #660]	@ (8006ca8 <UART_SetConfig+0x338>)
 8006a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a18:	2b28      	cmp	r3, #40	@ 0x28
 8006a1a:	d86d      	bhi.n	8006af8 <UART_SetConfig+0x188>
 8006a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <UART_SetConfig+0xb4>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006ac9 	.word	0x08006ac9
 8006a28:	08006af9 	.word	0x08006af9
 8006a2c:	08006af9 	.word	0x08006af9
 8006a30:	08006af9 	.word	0x08006af9
 8006a34:	08006af9 	.word	0x08006af9
 8006a38:	08006af9 	.word	0x08006af9
 8006a3c:	08006af9 	.word	0x08006af9
 8006a40:	08006af9 	.word	0x08006af9
 8006a44:	08006ad1 	.word	0x08006ad1
 8006a48:	08006af9 	.word	0x08006af9
 8006a4c:	08006af9 	.word	0x08006af9
 8006a50:	08006af9 	.word	0x08006af9
 8006a54:	08006af9 	.word	0x08006af9
 8006a58:	08006af9 	.word	0x08006af9
 8006a5c:	08006af9 	.word	0x08006af9
 8006a60:	08006af9 	.word	0x08006af9
 8006a64:	08006ad9 	.word	0x08006ad9
 8006a68:	08006af9 	.word	0x08006af9
 8006a6c:	08006af9 	.word	0x08006af9
 8006a70:	08006af9 	.word	0x08006af9
 8006a74:	08006af9 	.word	0x08006af9
 8006a78:	08006af9 	.word	0x08006af9
 8006a7c:	08006af9 	.word	0x08006af9
 8006a80:	08006af9 	.word	0x08006af9
 8006a84:	08006ae1 	.word	0x08006ae1
 8006a88:	08006af9 	.word	0x08006af9
 8006a8c:	08006af9 	.word	0x08006af9
 8006a90:	08006af9 	.word	0x08006af9
 8006a94:	08006af9 	.word	0x08006af9
 8006a98:	08006af9 	.word	0x08006af9
 8006a9c:	08006af9 	.word	0x08006af9
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006ae9 	.word	0x08006ae9
 8006aa8:	08006af9 	.word	0x08006af9
 8006aac:	08006af9 	.word	0x08006af9
 8006ab0:	08006af9 	.word	0x08006af9
 8006ab4:	08006af9 	.word	0x08006af9
 8006ab8:	08006af9 	.word	0x08006af9
 8006abc:	08006af9 	.word	0x08006af9
 8006ac0:	08006af9 	.word	0x08006af9
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	2301      	movs	r3, #1
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ace:	e326      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad6:	e322      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ade:	e31e      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e31a      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ae8:	2320      	movs	r3, #32
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aee:	e316      	b.n	800711e <UART_SetConfig+0x7ae>
 8006af0:	2340      	movs	r3, #64	@ 0x40
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af6:	e312      	b.n	800711e <UART_SetConfig+0x7ae>
 8006af8:	2380      	movs	r3, #128	@ 0x80
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afe:	e30e      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a69      	ldr	r2, [pc, #420]	@ (8006cac <UART_SetConfig+0x33c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d130      	bne.n	8006b6c <UART_SetConfig+0x1fc>
 8006b0a:	4b67      	ldr	r3, [pc, #412]	@ (8006ca8 <UART_SetConfig+0x338>)
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d826      	bhi.n	8006b64 <UART_SetConfig+0x1f4>
 8006b16:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <UART_SetConfig+0x1ac>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b35 	.word	0x08006b35
 8006b20:	08006b3d 	.word	0x08006b3d
 8006b24:	08006b45 	.word	0x08006b45
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b55 	.word	0x08006b55
 8006b30:	08006b5d 	.word	0x08006b5d
 8006b34:	2300      	movs	r3, #0
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3a:	e2f0      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b42:	e2ec      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e2e8      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b52:	e2e4      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b54:	2320      	movs	r3, #32
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5a:	e2e0      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b5c:	2340      	movs	r3, #64	@ 0x40
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b62:	e2dc      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b64:	2380      	movs	r3, #128	@ 0x80
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e2d8      	b.n	800711e <UART_SetConfig+0x7ae>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a4f      	ldr	r2, [pc, #316]	@ (8006cb0 <UART_SetConfig+0x340>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d130      	bne.n	8006bd8 <UART_SetConfig+0x268>
 8006b76:	4b4c      	ldr	r3, [pc, #304]	@ (8006ca8 <UART_SetConfig+0x338>)
 8006b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	d826      	bhi.n	8006bd0 <UART_SetConfig+0x260>
 8006b82:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <UART_SetConfig+0x218>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006ba1 	.word	0x08006ba1
 8006b8c:	08006ba9 	.word	0x08006ba9
 8006b90:	08006bb1 	.word	0x08006bb1
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	e2ba      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e2b6      	b.n	800711e <UART_SetConfig+0x7ae>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e2b2      	b.n	800711e <UART_SetConfig+0x7ae>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e2ae      	b.n	800711e <UART_SetConfig+0x7ae>
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc6:	e2aa      	b.n	800711e <UART_SetConfig+0x7ae>
 8006bc8:	2340      	movs	r3, #64	@ 0x40
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bce:	e2a6      	b.n	800711e <UART_SetConfig+0x7ae>
 8006bd0:	2380      	movs	r3, #128	@ 0x80
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd6:	e2a2      	b.n	800711e <UART_SetConfig+0x7ae>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a35      	ldr	r2, [pc, #212]	@ (8006cb4 <UART_SetConfig+0x344>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d130      	bne.n	8006c44 <UART_SetConfig+0x2d4>
 8006be2:	4b31      	ldr	r3, [pc, #196]	@ (8006ca8 <UART_SetConfig+0x338>)
 8006be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d826      	bhi.n	8006c3c <UART_SetConfig+0x2cc>
 8006bee:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <UART_SetConfig+0x284>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c0d 	.word	0x08006c0d
 8006bf8:	08006c15 	.word	0x08006c15
 8006bfc:	08006c1d 	.word	0x08006c1d
 8006c00:	08006c25 	.word	0x08006c25
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e284      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e280      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e27c      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	e278      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c32:	e274      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c34:	2340      	movs	r3, #64	@ 0x40
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3a:	e270      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c3c:	2380      	movs	r3, #128	@ 0x80
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c42:	e26c      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb8 <UART_SetConfig+0x348>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d142      	bne.n	8006cd4 <UART_SetConfig+0x364>
 8006c4e:	4b16      	ldr	r3, [pc, #88]	@ (8006ca8 <UART_SetConfig+0x338>)
 8006c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	d838      	bhi.n	8006ccc <UART_SetConfig+0x35c>
 8006c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <UART_SetConfig+0x2f0>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c79 	.word	0x08006c79
 8006c64:	08006c81 	.word	0x08006c81
 8006c68:	08006c89 	.word	0x08006c89
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006cbd 	.word	0x08006cbd
 8006c74:	08006cc5 	.word	0x08006cc5
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e24e      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e24a      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e246      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e242      	b.n	800711e <UART_SetConfig+0x7ae>
 8006c98:	cfff69f3 	.word	0xcfff69f3
 8006c9c:	58000c00 	.word	0x58000c00
 8006ca0:	11fff4ff 	.word	0x11fff4ff
 8006ca4:	40011000 	.word	0x40011000
 8006ca8:	58024400 	.word	0x58024400
 8006cac:	40004400 	.word	0x40004400
 8006cb0:	40004800 	.word	0x40004800
 8006cb4:	40004c00 	.word	0x40004c00
 8006cb8:	40005000 	.word	0x40005000
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e22c      	b.n	800711e <UART_SetConfig+0x7ae>
 8006cc4:	2340      	movs	r3, #64	@ 0x40
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e228      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ccc:	2380      	movs	r3, #128	@ 0x80
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd2:	e224      	b.n	800711e <UART_SetConfig+0x7ae>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4ab1      	ldr	r2, [pc, #708]	@ (8006fa0 <UART_SetConfig+0x630>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d176      	bne.n	8006dcc <UART_SetConfig+0x45c>
 8006cde:	4bb1      	ldr	r3, [pc, #708]	@ (8006fa4 <UART_SetConfig+0x634>)
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ce6:	2b28      	cmp	r3, #40	@ 0x28
 8006ce8:	d86c      	bhi.n	8006dc4 <UART_SetConfig+0x454>
 8006cea:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <UART_SetConfig+0x380>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d95 	.word	0x08006d95
 8006cf4:	08006dc5 	.word	0x08006dc5
 8006cf8:	08006dc5 	.word	0x08006dc5
 8006cfc:	08006dc5 	.word	0x08006dc5
 8006d00:	08006dc5 	.word	0x08006dc5
 8006d04:	08006dc5 	.word	0x08006dc5
 8006d08:	08006dc5 	.word	0x08006dc5
 8006d0c:	08006dc5 	.word	0x08006dc5
 8006d10:	08006d9d 	.word	0x08006d9d
 8006d14:	08006dc5 	.word	0x08006dc5
 8006d18:	08006dc5 	.word	0x08006dc5
 8006d1c:	08006dc5 	.word	0x08006dc5
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006dc5 	.word	0x08006dc5
 8006d28:	08006dc5 	.word	0x08006dc5
 8006d2c:	08006dc5 	.word	0x08006dc5
 8006d30:	08006da5 	.word	0x08006da5
 8006d34:	08006dc5 	.word	0x08006dc5
 8006d38:	08006dc5 	.word	0x08006dc5
 8006d3c:	08006dc5 	.word	0x08006dc5
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006dc5 	.word	0x08006dc5
 8006d48:	08006dc5 	.word	0x08006dc5
 8006d4c:	08006dc5 	.word	0x08006dc5
 8006d50:	08006dad 	.word	0x08006dad
 8006d54:	08006dc5 	.word	0x08006dc5
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006dc5 	.word	0x08006dc5
 8006d68:	08006dc5 	.word	0x08006dc5
 8006d6c:	08006dc5 	.word	0x08006dc5
 8006d70:	08006db5 	.word	0x08006db5
 8006d74:	08006dc5 	.word	0x08006dc5
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006dc5 	.word	0x08006dc5
 8006d80:	08006dc5 	.word	0x08006dc5
 8006d84:	08006dc5 	.word	0x08006dc5
 8006d88:	08006dc5 	.word	0x08006dc5
 8006d8c:	08006dc5 	.word	0x08006dc5
 8006d90:	08006dbd 	.word	0x08006dbd
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e1c0      	b.n	800711e <UART_SetConfig+0x7ae>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e1bc      	b.n	800711e <UART_SetConfig+0x7ae>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e1b8      	b.n	800711e <UART_SetConfig+0x7ae>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e1b4      	b.n	800711e <UART_SetConfig+0x7ae>
 8006db4:	2320      	movs	r3, #32
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dba:	e1b0      	b.n	800711e <UART_SetConfig+0x7ae>
 8006dbc:	2340      	movs	r3, #64	@ 0x40
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc2:	e1ac      	b.n	800711e <UART_SetConfig+0x7ae>
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dca:	e1a8      	b.n	800711e <UART_SetConfig+0x7ae>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a75      	ldr	r2, [pc, #468]	@ (8006fa8 <UART_SetConfig+0x638>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d130      	bne.n	8006e38 <UART_SetConfig+0x4c8>
 8006dd6:	4b73      	ldr	r3, [pc, #460]	@ (8006fa4 <UART_SetConfig+0x634>)
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	d826      	bhi.n	8006e30 <UART_SetConfig+0x4c0>
 8006de2:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <UART_SetConfig+0x478>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e01 	.word	0x08006e01
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	08006e11 	.word	0x08006e11
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e29 	.word	0x08006e29
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e18a      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e186      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e182      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1e:	e17e      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e20:	2320      	movs	r3, #32
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e26:	e17a      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e28:	2340      	movs	r3, #64	@ 0x40
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2e:	e176      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e30:	2380      	movs	r3, #128	@ 0x80
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e36:	e172      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a5b      	ldr	r2, [pc, #364]	@ (8006fac <UART_SetConfig+0x63c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d130      	bne.n	8006ea4 <UART_SetConfig+0x534>
 8006e42:	4b58      	ldr	r3, [pc, #352]	@ (8006fa4 <UART_SetConfig+0x634>)
 8006e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	d826      	bhi.n	8006e9c <UART_SetConfig+0x52c>
 8006e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e54 <UART_SetConfig+0x4e4>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006e6d 	.word	0x08006e6d
 8006e58:	08006e75 	.word	0x08006e75
 8006e5c:	08006e7d 	.word	0x08006e7d
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e8d 	.word	0x08006e8d
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e72:	e154      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e74:	2304      	movs	r3, #4
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7a:	e150      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e82:	e14c      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e84:	2310      	movs	r3, #16
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e8a:	e148      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e92:	e144      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e94:	2340      	movs	r3, #64	@ 0x40
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9a:	e140      	b.n	800711e <UART_SetConfig+0x7ae>
 8006e9c:	2380      	movs	r3, #128	@ 0x80
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	e13c      	b.n	800711e <UART_SetConfig+0x7ae>
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a41      	ldr	r2, [pc, #260]	@ (8006fb0 <UART_SetConfig+0x640>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f040 8082 	bne.w	8006fb4 <UART_SetConfig+0x644>
 8006eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8006fa4 <UART_SetConfig+0x634>)
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eb8:	2b28      	cmp	r3, #40	@ 0x28
 8006eba:	d86d      	bhi.n	8006f98 <UART_SetConfig+0x628>
 8006ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <UART_SetConfig+0x554>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006f69 	.word	0x08006f69
 8006ec8:	08006f99 	.word	0x08006f99
 8006ecc:	08006f99 	.word	0x08006f99
 8006ed0:	08006f99 	.word	0x08006f99
 8006ed4:	08006f99 	.word	0x08006f99
 8006ed8:	08006f99 	.word	0x08006f99
 8006edc:	08006f99 	.word	0x08006f99
 8006ee0:	08006f99 	.word	0x08006f99
 8006ee4:	08006f71 	.word	0x08006f71
 8006ee8:	08006f99 	.word	0x08006f99
 8006eec:	08006f99 	.word	0x08006f99
 8006ef0:	08006f99 	.word	0x08006f99
 8006ef4:	08006f99 	.word	0x08006f99
 8006ef8:	08006f99 	.word	0x08006f99
 8006efc:	08006f99 	.word	0x08006f99
 8006f00:	08006f99 	.word	0x08006f99
 8006f04:	08006f79 	.word	0x08006f79
 8006f08:	08006f99 	.word	0x08006f99
 8006f0c:	08006f99 	.word	0x08006f99
 8006f10:	08006f99 	.word	0x08006f99
 8006f14:	08006f99 	.word	0x08006f99
 8006f18:	08006f99 	.word	0x08006f99
 8006f1c:	08006f99 	.word	0x08006f99
 8006f20:	08006f99 	.word	0x08006f99
 8006f24:	08006f81 	.word	0x08006f81
 8006f28:	08006f99 	.word	0x08006f99
 8006f2c:	08006f99 	.word	0x08006f99
 8006f30:	08006f99 	.word	0x08006f99
 8006f34:	08006f99 	.word	0x08006f99
 8006f38:	08006f99 	.word	0x08006f99
 8006f3c:	08006f99 	.word	0x08006f99
 8006f40:	08006f99 	.word	0x08006f99
 8006f44:	08006f89 	.word	0x08006f89
 8006f48:	08006f99 	.word	0x08006f99
 8006f4c:	08006f99 	.word	0x08006f99
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006f99 	.word	0x08006f99
 8006f58:	08006f99 	.word	0x08006f99
 8006f5c:	08006f99 	.word	0x08006f99
 8006f60:	08006f99 	.word	0x08006f99
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e0d6      	b.n	800711e <UART_SetConfig+0x7ae>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e0d2      	b.n	800711e <UART_SetConfig+0x7ae>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e0ce      	b.n	800711e <UART_SetConfig+0x7ae>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f86:	e0ca      	b.n	800711e <UART_SetConfig+0x7ae>
 8006f88:	2320      	movs	r3, #32
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8e:	e0c6      	b.n	800711e <UART_SetConfig+0x7ae>
 8006f90:	2340      	movs	r3, #64	@ 0x40
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f96:	e0c2      	b.n	800711e <UART_SetConfig+0x7ae>
 8006f98:	2380      	movs	r3, #128	@ 0x80
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	e0be      	b.n	800711e <UART_SetConfig+0x7ae>
 8006fa0:	40011400 	.word	0x40011400
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	40007800 	.word	0x40007800
 8006fac:	40007c00 	.word	0x40007c00
 8006fb0:	40011800 	.word	0x40011800
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4aad      	ldr	r2, [pc, #692]	@ (8007270 <UART_SetConfig+0x900>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d176      	bne.n	80070ac <UART_SetConfig+0x73c>
 8006fbe:	4bad      	ldr	r3, [pc, #692]	@ (8007274 <UART_SetConfig+0x904>)
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc6:	2b28      	cmp	r3, #40	@ 0x28
 8006fc8:	d86c      	bhi.n	80070a4 <UART_SetConfig+0x734>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <UART_SetConfig+0x660>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08007075 	.word	0x08007075
 8006fd4:	080070a5 	.word	0x080070a5
 8006fd8:	080070a5 	.word	0x080070a5
 8006fdc:	080070a5 	.word	0x080070a5
 8006fe0:	080070a5 	.word	0x080070a5
 8006fe4:	080070a5 	.word	0x080070a5
 8006fe8:	080070a5 	.word	0x080070a5
 8006fec:	080070a5 	.word	0x080070a5
 8006ff0:	0800707d 	.word	0x0800707d
 8006ff4:	080070a5 	.word	0x080070a5
 8006ff8:	080070a5 	.word	0x080070a5
 8006ffc:	080070a5 	.word	0x080070a5
 8007000:	080070a5 	.word	0x080070a5
 8007004:	080070a5 	.word	0x080070a5
 8007008:	080070a5 	.word	0x080070a5
 800700c:	080070a5 	.word	0x080070a5
 8007010:	08007085 	.word	0x08007085
 8007014:	080070a5 	.word	0x080070a5
 8007018:	080070a5 	.word	0x080070a5
 800701c:	080070a5 	.word	0x080070a5
 8007020:	080070a5 	.word	0x080070a5
 8007024:	080070a5 	.word	0x080070a5
 8007028:	080070a5 	.word	0x080070a5
 800702c:	080070a5 	.word	0x080070a5
 8007030:	0800708d 	.word	0x0800708d
 8007034:	080070a5 	.word	0x080070a5
 8007038:	080070a5 	.word	0x080070a5
 800703c:	080070a5 	.word	0x080070a5
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070a5 	.word	0x080070a5
 8007048:	080070a5 	.word	0x080070a5
 800704c:	080070a5 	.word	0x080070a5
 8007050:	08007095 	.word	0x08007095
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070a5 	.word	0x080070a5
 8007060:	080070a5 	.word	0x080070a5
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	0800709d 	.word	0x0800709d
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e050      	b.n	800711e <UART_SetConfig+0x7ae>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e04c      	b.n	800711e <UART_SetConfig+0x7ae>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e048      	b.n	800711e <UART_SetConfig+0x7ae>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e044      	b.n	800711e <UART_SetConfig+0x7ae>
 8007094:	2320      	movs	r3, #32
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e040      	b.n	800711e <UART_SetConfig+0x7ae>
 800709c:	2340      	movs	r3, #64	@ 0x40
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e03c      	b.n	800711e <UART_SetConfig+0x7ae>
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e038      	b.n	800711e <UART_SetConfig+0x7ae>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a71      	ldr	r2, [pc, #452]	@ (8007278 <UART_SetConfig+0x908>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d130      	bne.n	8007118 <UART_SetConfig+0x7a8>
 80070b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007274 <UART_SetConfig+0x904>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d826      	bhi.n	8007110 <UART_SetConfig+0x7a0>
 80070c2:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0x758>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070e1 	.word	0x080070e1
 80070cc:	080070e9 	.word	0x080070e9
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007109 	.word	0x08007109
 80070e0:	2302      	movs	r3, #2
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e01a      	b.n	800711e <UART_SetConfig+0x7ae>
 80070e8:	2304      	movs	r3, #4
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e016      	b.n	800711e <UART_SetConfig+0x7ae>
 80070f0:	2308      	movs	r3, #8
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e012      	b.n	800711e <UART_SetConfig+0x7ae>
 80070f8:	2310      	movs	r3, #16
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e00e      	b.n	800711e <UART_SetConfig+0x7ae>
 8007100:	2320      	movs	r3, #32
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e00a      	b.n	800711e <UART_SetConfig+0x7ae>
 8007108:	2340      	movs	r3, #64	@ 0x40
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e006      	b.n	800711e <UART_SetConfig+0x7ae>
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e002      	b.n	800711e <UART_SetConfig+0x7ae>
 8007118:	2380      	movs	r3, #128	@ 0x80
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a55      	ldr	r2, [pc, #340]	@ (8007278 <UART_SetConfig+0x908>)
 8007124:	4293      	cmp	r3, r2
 8007126:	f040 80f8 	bne.w	800731a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800712a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800712e:	2b20      	cmp	r3, #32
 8007130:	dc46      	bgt.n	80071c0 <UART_SetConfig+0x850>
 8007132:	2b02      	cmp	r3, #2
 8007134:	db75      	blt.n	8007222 <UART_SetConfig+0x8b2>
 8007136:	3b02      	subs	r3, #2
 8007138:	2b1e      	cmp	r3, #30
 800713a:	d872      	bhi.n	8007222 <UART_SetConfig+0x8b2>
 800713c:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <UART_SetConfig+0x7d4>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	080071c7 	.word	0x080071c7
 8007148:	08007223 	.word	0x08007223
 800714c:	080071cf 	.word	0x080071cf
 8007150:	08007223 	.word	0x08007223
 8007154:	08007223 	.word	0x08007223
 8007158:	08007223 	.word	0x08007223
 800715c:	080071df 	.word	0x080071df
 8007160:	08007223 	.word	0x08007223
 8007164:	08007223 	.word	0x08007223
 8007168:	08007223 	.word	0x08007223
 800716c:	08007223 	.word	0x08007223
 8007170:	08007223 	.word	0x08007223
 8007174:	08007223 	.word	0x08007223
 8007178:	08007223 	.word	0x08007223
 800717c:	080071ef 	.word	0x080071ef
 8007180:	08007223 	.word	0x08007223
 8007184:	08007223 	.word	0x08007223
 8007188:	08007223 	.word	0x08007223
 800718c:	08007223 	.word	0x08007223
 8007190:	08007223 	.word	0x08007223
 8007194:	08007223 	.word	0x08007223
 8007198:	08007223 	.word	0x08007223
 800719c:	08007223 	.word	0x08007223
 80071a0:	08007223 	.word	0x08007223
 80071a4:	08007223 	.word	0x08007223
 80071a8:	08007223 	.word	0x08007223
 80071ac:	08007223 	.word	0x08007223
 80071b0:	08007223 	.word	0x08007223
 80071b4:	08007223 	.word	0x08007223
 80071b8:	08007223 	.word	0x08007223
 80071bc:	08007215 	.word	0x08007215
 80071c0:	2b40      	cmp	r3, #64	@ 0x40
 80071c2:	d02a      	beq.n	800721a <UART_SetConfig+0x8aa>
 80071c4:	e02d      	b.n	8007222 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071c6:	f7fe fd29 	bl	8005c1c <HAL_RCCEx_GetD3PCLK1Freq>
 80071ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071cc:	e02f      	b.n	800722e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fd38 	bl	8005c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071dc:	e027      	b.n	800722e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071de:	f107 0318 	add.w	r3, r7, #24
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fe84 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ec:	e01f      	b.n	800722e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ee:	4b21      	ldr	r3, [pc, #132]	@ (8007274 <UART_SetConfig+0x904>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007274 <UART_SetConfig+0x904>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	08db      	lsrs	r3, r3, #3
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	4a1d      	ldr	r2, [pc, #116]	@ (800727c <UART_SetConfig+0x90c>)
 8007206:	fa22 f303 	lsr.w	r3, r2, r3
 800720a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800720c:	e00f      	b.n	800722e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800720e:	4b1b      	ldr	r3, [pc, #108]	@ (800727c <UART_SetConfig+0x90c>)
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007212:	e00c      	b.n	800722e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007214:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <UART_SetConfig+0x910>)
 8007216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007218:	e009      	b.n	800722e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	e005      	b.n	800722e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800722c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800722e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 81ee 	beq.w	8007612 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723a:	4a12      	ldr	r2, [pc, #72]	@ (8007284 <UART_SetConfig+0x914>)
 800723c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007240:	461a      	mov	r2, r3
 8007242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007244:	fbb3 f3f2 	udiv	r3, r3, r2
 8007248:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007256:	429a      	cmp	r2, r3
 8007258:	d305      	bcc.n	8007266 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007262:	429a      	cmp	r2, r3
 8007264:	d910      	bls.n	8007288 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800726c:	e1d1      	b.n	8007612 <UART_SetConfig+0xca2>
 800726e:	bf00      	nop
 8007270:	40011c00 	.word	0x40011c00
 8007274:	58024400 	.word	0x58024400
 8007278:	58000c00 	.word	0x58000c00
 800727c:	03d09000 	.word	0x03d09000
 8007280:	003d0900 	.word	0x003d0900
 8007284:	0802d530 	.word	0x0802d530
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	2200      	movs	r2, #0
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	60fa      	str	r2, [r7, #12]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	4ac0      	ldr	r2, [pc, #768]	@ (8007598 <UART_SetConfig+0xc28>)
 8007296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729a:	b29b      	uxth	r3, r3
 800729c:	2200      	movs	r2, #0
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072aa:	f7f9 fa55 	bl	8000758 <__aeabi_uldivmod>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4610      	mov	r0, r2
 80072b4:	4619      	mov	r1, r3
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	020b      	lsls	r3, r1, #8
 80072c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072c4:	0202      	lsls	r2, r0, #8
 80072c6:	6979      	ldr	r1, [r7, #20]
 80072c8:	6849      	ldr	r1, [r1, #4]
 80072ca:	0849      	lsrs	r1, r1, #1
 80072cc:	2000      	movs	r0, #0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4605      	mov	r5, r0
 80072d2:	eb12 0804 	adds.w	r8, r2, r4
 80072d6:	eb43 0905 	adc.w	r9, r3, r5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	469a      	mov	sl, r3
 80072e2:	4693      	mov	fp, r2
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	f7f9 fa34 	bl	8000758 <__aeabi_uldivmod>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4613      	mov	r3, r2
 80072f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072fe:	d308      	bcc.n	8007312 <UART_SetConfig+0x9a2>
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007306:	d204      	bcs.n	8007312 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800730e:	60da      	str	r2, [r3, #12]
 8007310:	e17f      	b.n	8007612 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007318:	e17b      	b.n	8007612 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007322:	f040 80bd 	bne.w	80074a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007326:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800732a:	2b20      	cmp	r3, #32
 800732c:	dc48      	bgt.n	80073c0 <UART_SetConfig+0xa50>
 800732e:	2b00      	cmp	r3, #0
 8007330:	db7b      	blt.n	800742a <UART_SetConfig+0xaba>
 8007332:	2b20      	cmp	r3, #32
 8007334:	d879      	bhi.n	800742a <UART_SetConfig+0xaba>
 8007336:	a201      	add	r2, pc, #4	@ (adr r2, 800733c <UART_SetConfig+0x9cc>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	080073c7 	.word	0x080073c7
 8007340:	080073cf 	.word	0x080073cf
 8007344:	0800742b 	.word	0x0800742b
 8007348:	0800742b 	.word	0x0800742b
 800734c:	080073d7 	.word	0x080073d7
 8007350:	0800742b 	.word	0x0800742b
 8007354:	0800742b 	.word	0x0800742b
 8007358:	0800742b 	.word	0x0800742b
 800735c:	080073e7 	.word	0x080073e7
 8007360:	0800742b 	.word	0x0800742b
 8007364:	0800742b 	.word	0x0800742b
 8007368:	0800742b 	.word	0x0800742b
 800736c:	0800742b 	.word	0x0800742b
 8007370:	0800742b 	.word	0x0800742b
 8007374:	0800742b 	.word	0x0800742b
 8007378:	0800742b 	.word	0x0800742b
 800737c:	080073f7 	.word	0x080073f7
 8007380:	0800742b 	.word	0x0800742b
 8007384:	0800742b 	.word	0x0800742b
 8007388:	0800742b 	.word	0x0800742b
 800738c:	0800742b 	.word	0x0800742b
 8007390:	0800742b 	.word	0x0800742b
 8007394:	0800742b 	.word	0x0800742b
 8007398:	0800742b 	.word	0x0800742b
 800739c:	0800742b 	.word	0x0800742b
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	0800742b 	.word	0x0800742b
 80073a8:	0800742b 	.word	0x0800742b
 80073ac:	0800742b 	.word	0x0800742b
 80073b0:	0800742b 	.word	0x0800742b
 80073b4:	0800742b 	.word	0x0800742b
 80073b8:	0800742b 	.word	0x0800742b
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	2b40      	cmp	r3, #64	@ 0x40
 80073c2:	d02e      	beq.n	8007422 <UART_SetConfig+0xab2>
 80073c4:	e031      	b.n	800742a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c6:	f7fd fa5d 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80073ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073cc:	e033      	b.n	8007436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ce:	f7fd fa6f 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 80073d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073d4:	e02f      	b.n	8007436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fc34 	bl	8005c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e4:	e027      	b.n	8007436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073e6:	f107 0318 	add.w	r3, r7, #24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fd80 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f4:	e01f      	b.n	8007436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f6:	4b69      	ldr	r3, [pc, #420]	@ (800759c <UART_SetConfig+0xc2c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007402:	4b66      	ldr	r3, [pc, #408]	@ (800759c <UART_SetConfig+0xc2c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	08db      	lsrs	r3, r3, #3
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	4a64      	ldr	r2, [pc, #400]	@ (80075a0 <UART_SetConfig+0xc30>)
 800740e:	fa22 f303 	lsr.w	r3, r2, r3
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007414:	e00f      	b.n	8007436 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007416:	4b62      	ldr	r3, [pc, #392]	@ (80075a0 <UART_SetConfig+0xc30>)
 8007418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800741a:	e00c      	b.n	8007436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800741c:	4b61      	ldr	r3, [pc, #388]	@ (80075a4 <UART_SetConfig+0xc34>)
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007420:	e009      	b.n	8007436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007428:	e005      	b.n	8007436 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 80ea 	beq.w	8007612 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	4a55      	ldr	r2, [pc, #340]	@ (8007598 <UART_SetConfig+0xc28>)
 8007444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007448:	461a      	mov	r2, r3
 800744a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007450:	005a      	lsls	r2, r3, #1
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	441a      	add	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007462:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	2b0f      	cmp	r3, #15
 8007468:	d916      	bls.n	8007498 <UART_SetConfig+0xb28>
 800746a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007470:	d212      	bcs.n	8007498 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	b29b      	uxth	r3, r3
 8007476:	f023 030f 	bic.w	r3, r3, #15
 800747a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	b29a      	uxth	r2, r3
 8007488:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800748a:	4313      	orrs	r3, r2
 800748c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007494:	60da      	str	r2, [r3, #12]
 8007496:	e0bc      	b.n	8007612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800749e:	e0b8      	b.n	8007612 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	dc4b      	bgt.n	8007540 <UART_SetConfig+0xbd0>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f2c0 8087 	blt.w	80075bc <UART_SetConfig+0xc4c>
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	f200 8084 	bhi.w	80075bc <UART_SetConfig+0xc4c>
 80074b4:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <UART_SetConfig+0xb4c>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	08007547 	.word	0x08007547
 80074c0:	0800754f 	.word	0x0800754f
 80074c4:	080075bd 	.word	0x080075bd
 80074c8:	080075bd 	.word	0x080075bd
 80074cc:	08007557 	.word	0x08007557
 80074d0:	080075bd 	.word	0x080075bd
 80074d4:	080075bd 	.word	0x080075bd
 80074d8:	080075bd 	.word	0x080075bd
 80074dc:	08007567 	.word	0x08007567
 80074e0:	080075bd 	.word	0x080075bd
 80074e4:	080075bd 	.word	0x080075bd
 80074e8:	080075bd 	.word	0x080075bd
 80074ec:	080075bd 	.word	0x080075bd
 80074f0:	080075bd 	.word	0x080075bd
 80074f4:	080075bd 	.word	0x080075bd
 80074f8:	080075bd 	.word	0x080075bd
 80074fc:	08007577 	.word	0x08007577
 8007500:	080075bd 	.word	0x080075bd
 8007504:	080075bd 	.word	0x080075bd
 8007508:	080075bd 	.word	0x080075bd
 800750c:	080075bd 	.word	0x080075bd
 8007510:	080075bd 	.word	0x080075bd
 8007514:	080075bd 	.word	0x080075bd
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075bd 	.word	0x080075bd
 8007520:	080075bd 	.word	0x080075bd
 8007524:	080075bd 	.word	0x080075bd
 8007528:	080075bd 	.word	0x080075bd
 800752c:	080075bd 	.word	0x080075bd
 8007530:	080075bd 	.word	0x080075bd
 8007534:	080075bd 	.word	0x080075bd
 8007538:	080075bd 	.word	0x080075bd
 800753c:	080075af 	.word	0x080075af
 8007540:	2b40      	cmp	r3, #64	@ 0x40
 8007542:	d037      	beq.n	80075b4 <UART_SetConfig+0xc44>
 8007544:	e03a      	b.n	80075bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007546:	f7fd f99d 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 800754a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800754c:	e03c      	b.n	80075c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800754e:	f7fd f9af 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8007552:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007554:	e038      	b.n	80075c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fb74 	bl	8005c48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007564:	e030      	b.n	80075c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007566:	f107 0318 	add.w	r3, r7, #24
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fcc0 	bl	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007574:	e028      	b.n	80075c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007576:	4b09      	ldr	r3, [pc, #36]	@ (800759c <UART_SetConfig+0xc2c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d012      	beq.n	80075a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007582:	4b06      	ldr	r3, [pc, #24]	@ (800759c <UART_SetConfig+0xc2c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	08db      	lsrs	r3, r3, #3
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	4a04      	ldr	r2, [pc, #16]	@ (80075a0 <UART_SetConfig+0xc30>)
 800758e:	fa22 f303 	lsr.w	r3, r2, r3
 8007592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007594:	e018      	b.n	80075c8 <UART_SetConfig+0xc58>
 8007596:	bf00      	nop
 8007598:	0802d530 	.word	0x0802d530
 800759c:	58024400 	.word	0x58024400
 80075a0:	03d09000 	.word	0x03d09000
 80075a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80075a8:	4b24      	ldr	r3, [pc, #144]	@ (800763c <UART_SetConfig+0xccc>)
 80075aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ac:	e00c      	b.n	80075c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075ae:	4b24      	ldr	r3, [pc, #144]	@ (8007640 <UART_SetConfig+0xcd0>)
 80075b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075b2:	e009      	b.n	80075c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ba:	e005      	b.n	80075c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075c6:	bf00      	nop
    }

    if (pclk != 0U)
 80075c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d021      	beq.n	8007612 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007644 <UART_SetConfig+0xcd4>)
 80075d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d8:	461a      	mov	r2, r3
 80075da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	085b      	lsrs	r3, r3, #1
 80075e6:	441a      	add	r2, r3
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	2b0f      	cmp	r3, #15
 80075f6:	d909      	bls.n	800760c <UART_SetConfig+0xc9c>
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fe:	d205      	bcs.n	800760c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	b29a      	uxth	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	e002      	b.n	8007612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2201      	movs	r2, #1
 8007616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2201      	movs	r2, #1
 800761e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2200      	movs	r2, #0
 8007626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2200      	movs	r2, #0
 800762c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800762e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007632:	4618      	mov	r0, r3
 8007634:	3748      	adds	r7, #72	@ 0x48
 8007636:	46bd      	mov	sp, r7
 8007638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763c:	03d09000 	.word	0x03d09000
 8007640:	003d0900 	.word	0x003d0900
 8007644:	0802d530 	.word	0x0802d530

08007648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01a      	beq.n	800775e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007746:	d10a      	bne.n	800775e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	605a      	str	r2, [r3, #4]
  }
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b098      	sub	sp, #96	@ 0x60
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800779c:	f7fa fce6 	bl	800216c <HAL_GetTick>
 80077a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d12f      	bne.n	8007810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b8:	2200      	movs	r2, #0
 80077ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f88e 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d022      	beq.n	8007810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077de:	653b      	str	r3, [r7, #80]	@ 0x50
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e6      	bne.n	80077ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e063      	b.n	80078d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b04      	cmp	r3, #4
 800781c:	d149      	bne.n	80078b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007826:	2200      	movs	r2, #0
 8007828:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f857 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d03c      	beq.n	80078b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	623b      	str	r3, [r7, #32]
   return(result);
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800784c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007856:	633b      	str	r3, [r7, #48]	@ 0x30
 8007858:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800785c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e6      	bne.n	8007838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	60fb      	str	r3, [r7, #12]
   return(result);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800788a:	61fa      	str	r2, [r7, #28]
 800788c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	617b      	str	r3, [r7, #20]
   return(result);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e012      	b.n	80078d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3758      	adds	r7, #88	@ 0x58
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	e04f      	b.n	8007992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d04b      	beq.n	8007992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fa:	f7fa fc37 	bl	800216c <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	429a      	cmp	r2, r3
 8007908:	d302      	bcc.n	8007910 <UART_WaitOnFlagUntilTimeout+0x30>
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e04e      	b.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d037      	beq.n	8007992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b80      	cmp	r3, #128	@ 0x80
 8007926:	d034      	beq.n	8007992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b40      	cmp	r3, #64	@ 0x40
 800792c:	d031      	beq.n	8007992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d110      	bne.n	800795e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2208      	movs	r2, #8
 8007942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f839 	bl	80079bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2208      	movs	r2, #8
 800794e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e029      	b.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796c:	d111      	bne.n	8007992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f81f 	bl	80079bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e00f      	b.n	80079b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4013      	ands	r3, r2
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	bf0c      	ite	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	2300      	movne	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d0a0      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b095      	sub	sp, #84	@ 0x54
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80079e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e6      	bne.n	80079c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	4b1e      	ldr	r3, [pc, #120]	@ (8007a84 <UART_EndRxTransfer+0xc8>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e5      	bne.n	80079f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d118      	bne.n	8007a64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f023 0310 	bic.w	r3, r3, #16
 8007a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6979      	ldr	r1, [r7, #20]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a78:	bf00      	nop
 8007a7a:	3754      	adds	r7, #84	@ 0x54
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	effffffe 	.word	0xeffffffe

08007a88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_UARTEx_DisableFifoMode+0x16>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e027      	b.n	8007aee <HAL_UARTEx_DisableFifoMode+0x66>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2224      	movs	r2, #36	@ 0x24
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007acc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e02d      	b.n	8007b6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2224      	movs	r2, #36	@ 0x24
 8007b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f850 	bl	8007bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e02d      	b.n	8007bea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2224      	movs	r2, #36	@ 0x24
 8007b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0201 	bic.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f812 	bl	8007bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d108      	bne.n	8007c16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c14:	e031      	b.n	8007c7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c16:	2310      	movs	r3, #16
 8007c18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	0e5b      	lsrs	r3, r3, #25
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0307 	and.w	r3, r3, #7
 8007c2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	0f5b      	lsrs	r3, r3, #29
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	7b3a      	ldrb	r2, [r7, #12]
 8007c42:	4911      	ldr	r1, [pc, #68]	@ (8007c88 <UARTEx_SetNbDataToProcess+0x94>)
 8007c44:	5c8a      	ldrb	r2, [r1, r2]
 8007c46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c4a:	7b3a      	ldrb	r2, [r7, #12]
 8007c4c:	490f      	ldr	r1, [pc, #60]	@ (8007c8c <UARTEx_SetNbDataToProcess+0x98>)
 8007c4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	7b7a      	ldrb	r2, [r7, #13]
 8007c60:	4909      	ldr	r1, [pc, #36]	@ (8007c88 <UARTEx_SetNbDataToProcess+0x94>)
 8007c62:	5c8a      	ldrb	r2, [r1, r2]
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c68:	7b7a      	ldrb	r2, [r7, #13]
 8007c6a:	4908      	ldr	r1, [pc, #32]	@ (8007c8c <UARTEx_SetNbDataToProcess+0x98>)
 8007c6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	0802d548 	.word	0x0802d548
 8007c8c:	0802d550 	.word	0x0802d550

08007c90 <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b19      	cmp	r3, #25
 8007c9c:	dc02      	bgt.n	8007ca4 <mg_base64_encode_single+0x14>
    return c + 'A';
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3341      	adds	r3, #65	@ 0x41
 8007ca2:	e011      	b.n	8007cc8 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b33      	cmp	r3, #51	@ 0x33
 8007ca8:	dc02      	bgt.n	8007cb0 <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3347      	adds	r3, #71	@ 0x47
 8007cae:	e00b      	b.n	8007cc8 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b3d      	cmp	r3, #61	@ 0x3d
 8007cb4:	dc02      	bgt.n	8007cbc <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	e005      	b.n	8007cc8 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc0:	d101      	bne.n	8007cc6 <mg_base64_encode_single+0x36>
 8007cc2:	232b      	movs	r3, #43	@ 0x2b
 8007cc4:	e000      	b.n	8007cc8 <mg_base64_encode_single+0x38>
 8007cc6:	232f      	movs	r3, #47	@ 0x2f
  }
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b40      	cmp	r3, #64	@ 0x40
 8007ce0:	dd05      	ble.n	8007cee <mg_base64_decode_single+0x1a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b5a      	cmp	r3, #90	@ 0x5a
 8007ce6:	dc02      	bgt.n	8007cee <mg_base64_decode_single+0x1a>
    return c - 'A';
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3b41      	subs	r3, #65	@ 0x41
 8007cec:	e022      	b.n	8007d34 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b60      	cmp	r3, #96	@ 0x60
 8007cf2:	dd05      	ble.n	8007d00 <mg_base64_decode_single+0x2c>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b7a      	cmp	r3, #122	@ 0x7a
 8007cf8:	dc02      	bgt.n	8007d00 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3b47      	subs	r3, #71	@ 0x47
 8007cfe:	e019      	b.n	8007d34 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d04:	dd05      	ble.n	8007d12 <mg_base64_decode_single+0x3e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b39      	cmp	r3, #57	@ 0x39
 8007d0a:	dc02      	bgt.n	8007d12 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	e010      	b.n	8007d34 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d16:	d101      	bne.n	8007d1c <mg_base64_decode_single+0x48>
    return 62;
 8007d18:	233e      	movs	r3, #62	@ 0x3e
 8007d1a:	e00b      	b.n	8007d34 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d20:	d101      	bne.n	8007d26 <mg_base64_decode_single+0x52>
    return 63;
 8007d22:	233f      	movs	r3, #63	@ 0x3f
 8007d24:	e006      	b.n	8007d34 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b3d      	cmp	r3, #61	@ 0x3d
 8007d2a:	d101      	bne.n	8007d30 <mg_base64_decode_single+0x5c>
    return 64;
 8007d2c:	2340      	movs	r3, #64	@ 0x40
 8007d2e:	e001      	b.n	8007d34 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f003 0203 	and.w	r2, r3, #3
 8007d54:	4b38      	ldr	r3, [pc, #224]	@ (8007e38 <mg_base64_update+0xf8>)
 8007d56:	fba3 1302 	umull	r1, r3, r3, r2
 8007d5a:	0859      	lsrs	r1, r3, #1
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	440b      	add	r3, r1
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d119      	bne.n	8007da0 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff ff8c 	bl	8007c90 <mg_base64_encode_single>
 8007d78:	4601      	mov	r1, r0
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	b2ca      	uxtb	r2, r1
 8007d82:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	607b      	str	r3, [r7, #4]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	440b      	add	r3, r1
 8007d96:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e046      	b.n	8007e2e <mg_base64_update+0xee>
  } else if (rem == 1) {
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d11f      	bne.n	8007de6 <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	781a      	ldrb	r2, [r3, #0]
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ff69 	bl	8007c90 <mg_base64_encode_single>
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	b2ca      	uxtb	r2, r1
 8007dc8:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	440b      	add	r3, r1
 8007ddc:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e023      	b.n	8007e2e <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	099b      	lsrs	r3, r3, #6
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7ff ff49 	bl	8007c90 <mg_base64_encode_single>
 8007dfe:	4601      	mov	r1, r0
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	b2ca      	uxtb	r2, r1
 8007e08:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff ff3d 	bl	8007c90 <mg_base64_encode_single>
 8007e16:	4601      	mov	r1, r0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	b2ca      	uxtb	r2, r1
 8007e26:	701a      	strb	r2, [r3, #0]
    n++;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	607b      	str	r3, [r7, #4]
  }
  return n;
 8007e2e:	687b      	ldr	r3, [r7, #4]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	aaaaaaab 	.word	0xaaaaaaab

08007e3c <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <mg_base64_final+0x24>
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f7ff ff71 	bl	8007d40 <mg_base64_update>
 8007e5e:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d10a      	bne.n	8007e80 <mg_base64_final+0x44>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8007e70:	e006      	b.n	8007e80 <mg_base64_final+0x44>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	603a      	str	r2, [r7, #0]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	223d      	movs	r2, #61	@ 0x3d
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f3      	bne.n	8007e72 <mg_base64_final+0x36>
  to[n] = '\0';
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	4413      	add	r3, r2
 8007e90:	2200      	movs	r2, #0
 8007e92:	701a      	strb	r2, [r3, #0]
  return n;
 8007e94:	683b      	ldr	r3, [r7, #0]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <mg_base64_encode+0x1e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8007f30 <mg_base64_encode+0x90>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	0858      	lsrs	r0, r3, #1
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	4b19      	ldr	r3, [pc, #100]	@ (8007f30 <mg_base64_encode+0x90>)
 8007ecc:	fba3 2301 	umull	r2, r3, r3, r1
 8007ed0:	085a      	lsrs	r2, r3, #1
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	1aca      	subs	r2, r1, r3
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	d001      	beq.n	8007ee2 <mg_base64_encode+0x42>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <mg_base64_encode+0x44>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4403      	add	r3, r0
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	3301      	adds	r3, #1
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d201      	bcs.n	8007ef4 <mg_base64_encode+0x54>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e019      	b.n	8007f28 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	e00c      	b.n	8007f14 <mg_base64_encode+0x74>
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4413      	add	r3, r2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff ff1a 	bl	8007d40 <mg_base64_update>
 8007f0c:	6138      	str	r0, [r7, #16]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	3301      	adds	r3, #1
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d3ee      	bcc.n	8007efa <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 8007f1c:	6939      	ldr	r1, [r7, #16]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff ff8c 	bl	8007e3c <mg_base64_final>
 8007f24:	6138      	str	r0, [r7, #16]
  return len;
 8007f26:	693b      	ldr	r3, [r7, #16]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	aaaaaaab 	.word	0xaaaaaaab

08007f34 <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	@ 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <mg_base64_decode+0x1c>
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	e000      	b.n	8007f52 <mg_base64_decode+0x1e>
 8007f50:	2300      	movs	r3, #0
 8007f52:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	089a      	lsrs	r2, r3, #2
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	4413      	add	r3, r2
 8007f62:	3301      	adds	r3, #1
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d378      	bcc.n	800805c <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 8007f6a:	e068      	b.n	800803e <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff feaf 	bl	8007cd4 <mg_base64_decode_single>
 8007f76:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fea8 	bl	8007cd4 <mg_base64_decode_single>
 8007f84:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3302      	adds	r3, #2
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fea1 	bl	8007cd4 <mg_base64_decode_single>
 8007f92:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3303      	adds	r3, #3
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fe9a 	bl	8007cd4 <mg_base64_decode_single>
 8007fa0:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2b40      	cmp	r3, #64	@ 0x40
 8007fa6:	d05b      	beq.n	8008060 <mg_base64_decode+0x12c>
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	db58      	blt.n	8008060 <mg_base64_decode+0x12c>
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b40      	cmp	r3, #64	@ 0x40
 8007fb2:	d055      	beq.n	8008060 <mg_base64_decode+0x12c>
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	db52      	blt.n	8008060 <mg_base64_decode+0x12c>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db4f      	blt.n	8008060 <mg_base64_decode+0x12c>
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	db4c      	blt.n	8008060 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	b25b      	sxtb	r3, r3
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	b25a      	sxtb	r2, r3
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	111b      	asrs	r3, r3, #4
 8007fd2:	b25b      	sxtb	r3, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	b259      	sxtb	r1, r3
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b2ca      	uxtb	r2, r1
 8007fe4:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3302      	adds	r3, #2
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b3d      	cmp	r3, #61	@ 0x3d
 8007fee:	d023      	beq.n	8008038 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	b25b      	sxtb	r3, r3
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	b25a      	sxtb	r2, r3
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	109b      	asrs	r3, r3, #2
 8007ffc:	b25b      	sxtb	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b259      	sxtb	r1, r3
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	627a      	str	r2, [r7, #36]	@ 0x24
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	b2ca      	uxtb	r2, r1
 800800e:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3303      	adds	r3, #3
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b3d      	cmp	r3, #61	@ 0x3d
 8008018:	d00e      	beq.n	8008038 <mg_base64_decode+0x104>
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	b25b      	sxtb	r3, r3
 800801e:	019b      	lsls	r3, r3, #6
 8008020:	b25a      	sxtb	r2, r3
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	b25b      	sxtb	r3, r3
 8008026:	4313      	orrs	r3, r2
 8008028:	b259      	sxtb	r1, r3
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4413      	add	r3, r2
 8008034:	b2ca      	uxtb	r2, r1
 8008036:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3304      	adds	r3, #4
 800803c:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <mg_base64_decode+0x11a>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3303      	adds	r3, #3
 8008048:	6a3a      	ldr	r2, [r7, #32]
 800804a:	429a      	cmp	r2, r3
 800804c:	d88e      	bhi.n	8007f6c <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	4413      	add	r3, r2
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
  return len;
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	e009      	b.n	8008070 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <mg_base64_decode+0x12e>
      goto fail;
 8008060:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <mg_base64_decode+0x13a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
  return 0;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3728      	adds	r7, #40	@ 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e002      	b.n	800808e <mg_dns_free+0x16>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d1f7      	bne.n	8008088 <mg_dns_free+0x10>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	601a      	str	r2, [r3, #0]
  free(d);
 80080a0:	6838      	ldr	r0, [r7, #0]
 80080a2:	f01d fceb 	bl	8025a7c <free>
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	332c      	adds	r3, #44	@ 0x2c
 80080bc:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e00d      	b.n	80080e2 <mg_resolve_cancel+0x34>
    tmp = d->next;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d103      	bne.n	80080de <mg_resolve_cancel+0x30>
 80080d6:	6979      	ldr	r1, [r7, #20]
 80080d8:	6938      	ldr	r0, [r7, #16]
 80080da:	f7ff ffcd 	bl	8008078 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1ee      	bne.n	80080c6 <mg_resolve_cancel+0x18>
  }
}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b08c      	sub	sp, #48	@ 0x30
 80080f6:	af04      	add	r7, sp, #16
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <mg_dns_parse_name_depth+0x24>
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <mg_dns_parse_name_depth+0x24>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2b05      	cmp	r3, #5
 800811a:	f340 8084 	ble.w	8008226 <mg_dns_parse_name_depth+0x134>
 800811e:	2300      	movs	r3, #0
 8008120:	e093      	b.n	800824a <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <mg_dns_parse_name_depth+0x4c>
      i++;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3301      	adds	r3, #1
 800813a:	61fb      	str	r3, [r7, #28]
      break;
 800813c:	e07b      	b.n	8008236 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d02f      	beq.n	80081a8 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	440a      	add	r2, r1
 8008156:	3201      	adds	r2, #1
 8008158:	68f9      	ldr	r1, [r7, #12]
 800815a:	440a      	add	r2, r1
 800815c:	7812      	ldrb	r2, [r2, #0]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	3301      	adds	r3, #1
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	d919      	bls.n	80081a0 <mg_dns_parse_name_depth+0xae>
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d111      	bne.n	80081a0 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	3301      	adds	r3, #1
 8008180:	9302      	str	r3, [sp, #8]
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff ffae 	bl	80080f2 <mg_dns_parse_name_depth>
 8008196:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <mg_dns_parse_name_depth+0xae>
        return 0;
 800819c:	2300      	movs	r3, #0
 800819e:	e054      	b.n	800824a <mg_dns_parse_name_depth+0x158>
      i += 2;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3302      	adds	r3, #2
 80081a4:	61fb      	str	r3, [r7, #28]
      break;
 80081a6:	e046      	b.n	8008236 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	441a      	add	r2, r3
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	4413      	add	r3, r2
 80081b2:	3301      	adds	r3, #1
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d801      	bhi.n	80081be <mg_dns_parse_name_depth+0xcc>
 80081ba:	2300      	movs	r3, #0
 80081bc:	e045      	b.n	800824a <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 80081be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 80081c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d204      	bcs.n	80081d6 <mg_dns_parse_name_depth+0xe4>
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	4413      	add	r3, r2
 80081d2:	222e      	movs	r2, #46	@ 0x2e
 80081d4:	701a      	strb	r2, [r3, #0]
      j++;
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	3301      	adds	r3, #1
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 80081dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	4413      	add	r3, r2
 80081e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d90c      	bls.n	8008202 <mg_dns_parse_name_depth+0x110>
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ec:	18d0      	adds	r0, r2, r3
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	3301      	adds	r3, #1
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4619      	mov	r1, r3
 80081fe:	f01f fc00 	bl	8027a02 <memcpy>
    j += n;
 8008202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	4413      	add	r3, r2
 8008208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	3301      	adds	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8008214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	429a      	cmp	r2, r3
 800821a:	d204      	bcs.n	8008226 <mg_dns_parse_name_depth+0x134>
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	4413      	add	r3, r2
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	3301      	adds	r3, #1
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	429a      	cmp	r2, r3
 8008232:	f63f af76 	bhi.w	8008122 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <mg_dns_parse_name_depth+0x156>
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	3b01      	subs	r3, #1
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	4413      	add	r3, r2
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
  return i;
 8008248:	69fb      	ldr	r3, [r7, #28]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8008252:	b580      	push	{r7, lr}
 8008254:	b088      	sub	sp, #32
 8008256:	af04      	add	r7, sp, #16
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8008260:	2300      	movs	r3, #0
 8008262:	9302      	str	r3, [sp, #8]
 8008264:	2300      	movs	r3, #0
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	68b9      	ldr	r1, [r7, #8]
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff ff3d 	bl	80080f2 <mg_dns_parse_name_depth>
 8008278:	4603      	mov	r3, r0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af02      	add	r7, sp, #8
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
 800828e:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4413      	add	r3, r2
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	4413      	add	r3, r2
 800829e:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80082a0:	2208      	movs	r2, #8
 80082a2:	2100      	movs	r1, #0
 80082a4:	6a38      	ldr	r0, [r7, #32]
 80082a6:	f01f fa73 	bl	8027790 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b0b      	cmp	r3, #11
 80082ae:	d801      	bhi.n	80082b4 <mg_dns_parse_rr+0x32>
 80082b0:	2300      	movs	r3, #0
 80082b2:	e077      	b.n	80083a4 <mg_dns_parse_rr+0x122>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ba:	d901      	bls.n	80082c0 <mg_dns_parse_rr+0x3e>
 80082bc:	2300      	movs	r3, #0
 80082be:	e071      	b.n	80083a4 <mg_dns_parse_rr+0x122>
  if (s >= e) return 0;     //  Overflow
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d301      	bcc.n	80082cc <mg_dns_parse_rr+0x4a>
 80082c8:	2300      	movs	r3, #0
 80082ca:	e06b      	b.n	80083a4 <mg_dns_parse_rr+0x122>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80082cc:	2300      	movs	r3, #0
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	2300      	movs	r3, #0
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7ff ffbb 	bl	8008252 <mg_dns_parse_name>
 80082dc:	4603      	mov	r3, r0
 80082de:	b29a      	uxth	r2, r3
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <mg_dns_parse_rr+0x6e>
    return 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e059      	b.n	80083a4 <mg_dns_parse_rr+0x122>
  s += rr->nlen + 4;
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	3304      	adds	r3, #4
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4413      	add	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	429a      	cmp	r2, r3
 8008302:	d901      	bls.n	8008308 <mg_dns_parse_rr+0x86>
 8008304:	2300      	movs	r3, #0
 8008306:	e04d      	b.n	80083a4 <mg_dns_parse_rr+0x122>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3b04      	subs	r3, #4
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b21b      	sxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b21a      	sxth	r2, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3b03      	subs	r3, #3
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b21b      	sxth	r3, r3
 800831c:	4313      	orrs	r3, r2
 800831e:	b21b      	sxth	r3, r3
 8008320:	b29a      	uxth	r2, r3
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	3b02      	subs	r3, #2
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	b21b      	sxth	r3, r3
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	b21a      	sxth	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	3b01      	subs	r3, #1
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b21b      	sxth	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b21b      	sxth	r3, r3
 800833e:	b29a      	uxth	r2, r3
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <mg_dns_parse_rr+0xd0>
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	3304      	adds	r3, #4
 8008350:	e028      	b.n	80083a4 <mg_dns_parse_rr+0x122>

  s += 6;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	3306      	adds	r3, #6
 8008356:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	d901      	bls.n	8008364 <mg_dns_parse_rr+0xe2>
 8008360:	2300      	movs	r3, #0
 8008362:	e01f      	b.n	80083a4 <mg_dns_parse_rr+0x122>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	3b02      	subs	r3, #2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b21b      	sxth	r3, r3
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	b21a      	sxth	r2, r3
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3b01      	subs	r3, #1
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b21b      	sxth	r3, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	b21b      	sxth	r3, r3
 800837c:	b29a      	uxth	r2, r3
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	88db      	ldrh	r3, [r3, #6]
 8008386:	461a      	mov	r2, r3
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	4413      	add	r3, r2
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	429a      	cmp	r2, r3
 8008390:	d201      	bcs.n	8008396 <mg_dns_parse_rr+0x114>
 8008392:	2300      	movs	r3, #0
 8008394:	e006      	b.n	80083a4 <mg_dns_parse_rr+0x122>
  return (size_t) (rr->nlen + rr->alen + 10);
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	88db      	ldrh	r3, [r3, #6]
 80083a0:	4413      	add	r3, r2
 80083a2:	330a      	adds	r3, #10
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08e      	sub	sp, #56	@ 0x38
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 80083bc:	230c      	movs	r3, #12
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
  bool is_response;
  memset(dm, 0, sizeof(*dm));
 80083c0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80083c4:	2100      	movs	r1, #0
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f01f f9e2 	bl	8027790 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b0b      	cmp	r3, #11
 80083d0:	d801      	bhi.n	80083d6 <mg_dns_parse+0x2a>
 80083d2:	2300      	movs	r3, #0
 80083d4:	e0c8      	b.n	8008568 <mg_dns_parse+0x1bc>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	889b      	ldrh	r3, [r3, #4]
 80083da:	4618      	mov	r0, r3
 80083dc:	f019 fd60 	bl	8021ea0 <mg_ntohs>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d901      	bls.n	80083ea <mg_dns_parse+0x3e>
 80083e6:	2300      	movs	r3, #0
 80083e8:	e0be      	b.n	8008568 <mg_dns_parse+0x1bc>
  num_answers = mg_ntohs(h->num_answers);
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	88db      	ldrh	r3, [r3, #6]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f019 fd56 	bl	8021ea0 <mg_ntohs>
 80083f4:	4603      	mov	r3, r0
 80083f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 80083f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fa:	2b0a      	cmp	r3, #10
 80083fc:	d90f      	bls.n	800841e <mg_dns_parse+0x72>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80083fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008570 <mg_dns_parse+0x1c4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b02      	cmp	r3, #2
 8008404:	dd09      	ble.n	800841a <mg_dns_parse+0x6e>
 8008406:	4b5b      	ldr	r3, [pc, #364]	@ (8008574 <mg_dns_parse+0x1c8>)
 8008408:	22e7      	movs	r2, #231	@ 0xe7
 800840a:	495b      	ldr	r1, [pc, #364]	@ (8008578 <mg_dns_parse+0x1cc>)
 800840c:	2003      	movs	r0, #3
 800840e:	f006 faad 	bl	800e96c <mg_log_prefix>
 8008412:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008414:	4859      	ldr	r0, [pc, #356]	@ (800857c <mg_dns_parse+0x1d0>)
 8008416:	f006 faf9 	bl	800ea0c <mg_log>
    num_answers = 10;  // Sanity cap
 800841a:	230a      	movs	r3, #10
 800841c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f019 fd3c 	bl	8021ea0 <mg_ntohs>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	801a      	strh	r2, [r3, #0]
  is_response = mg_ntohs(h->flags) & 0x8000;
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	885b      	ldrh	r3, [r3, #2]
 8008434:	4618      	mov	r0, r3
 8008436:	f019 fd33 	bl	8021ea0 <mg_ntohs>
 800843a:	4603      	mov	r3, r0
 800843c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008440:	2b00      	cmp	r3, #0
 8008442:	bf14      	ite	ne
 8008444:	2301      	movne	r3, #1
 8008446:	2300      	moveq	r3, #0
 8008448:	77fb      	strb	r3, [r7, #31]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800844a:	2300      	movs	r3, #0
 800844c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800844e:	e01f      	b.n	8008490 <mg_dns_parse+0xe4>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8008450:	f107 0310 	add.w	r3, r7, #16
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	2301      	movs	r3, #1
 8008458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff ff10 	bl	8008282 <mg_dns_parse_rr>
 8008462:	61b8      	str	r0, [r7, #24]
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <mg_dns_parse+0xc2>
 800846a:	2300      	movs	r3, #0
 800846c:	e07c      	b.n	8008568 <mg_dns_parse+0x1bc>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3318      	adds	r3, #24
 8008472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008476:	9200      	str	r2, [sp, #0]
 8008478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fee8 	bl	8008252 <mg_dns_parse_name>
    ofs += n;
 8008482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	4413      	add	r3, r2
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 800848a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848c:	3301      	adds	r3, #1
 800848e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	889b      	ldrh	r3, [r3, #4]
 8008494:	4618      	mov	r0, r3
 8008496:	f019 fd03 	bl	8021ea0 <mg_ntohs>
 800849a:	4603      	mov	r3, r0
 800849c:	461a      	mov	r2, r3
 800849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d3d5      	bcc.n	8008450 <mg_dns_parse+0xa4>
  }

  if (!is_response) {
 80084a4:	7ffb      	ldrb	r3, [r7, #31]
 80084a6:	f083 0301 	eor.w	r3, r3, #1
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <mg_dns_parse+0x108>
    // For queries, there is no need to parse the answers. In this way,
    // we also ensure the domain name (dm->name) is parsed from
    // the question field.
    return true;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e059      	b.n	8008568 <mg_dns_parse+0x1bc>
  }

  for (i = 0; i < num_answers; i++) {
 80084b4:	2300      	movs	r3, #0
 80084b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084b8:	e051      	b.n	800855e <mg_dns_parse+0x1b2>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80084ba:	f107 0310 	add.w	r3, r7, #16
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2300      	movs	r3, #0
 80084c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7ff fedb 	bl	8008282 <mg_dns_parse_rr>
 80084cc:	61b8      	str	r0, [r7, #24]
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <mg_dns_parse+0x12c>
 80084d4:	2300      	movs	r3, #0
 80084d6:	e047      	b.n	8008568 <mg_dns_parse+0x1bc>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3318      	adds	r3, #24
 80084dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084e0:	9200      	str	r2, [sp, #0]
 80084e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff feb3 	bl	8008252 <mg_dns_parse_name>
    ofs += n;
 80084ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	4413      	add	r3, r2
 80084f2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80084f4:	8afb      	ldrh	r3, [r7, #22]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d114      	bne.n	8008524 <mg_dns_parse+0x178>
 80084fa:	8a7b      	ldrh	r3, [r7, #18]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d111      	bne.n	8008524 <mg_dns_parse+0x178>
 8008500:	8abb      	ldrh	r3, [r7, #20]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10e      	bne.n	8008524 <mg_dns_parse+0x178>
      dm->addr.is_ip6 = false;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008512:	3a04      	subs	r2, #4
 8008514:	68f9      	ldr	r1, [r7, #12]
 8008516:	440a      	add	r2, r1
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8008522:	e020      	b.n	8008566 <mg_dns_parse+0x1ba>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8008524:	8afb      	ldrh	r3, [r7, #22]
 8008526:	2b10      	cmp	r3, #16
 8008528:	d116      	bne.n	8008558 <mg_dns_parse+0x1ac>
 800852a:	8a7b      	ldrh	r3, [r7, #18]
 800852c:	2b1c      	cmp	r3, #28
 800852e:	d113      	bne.n	8008558 <mg_dns_parse+0x1ac>
 8008530:	8abb      	ldrh	r3, [r7, #20]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d110      	bne.n	8008558 <mg_dns_parse+0x1ac>
      dm->addr.is_ip6 = true;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1d18      	adds	r0, r3, #4
 8008540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008542:	3b10      	subs	r3, #16
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	2210      	movs	r2, #16
 800854a:	4619      	mov	r1, r3
 800854c:	f01f fa59 	bl	8027a02 <memcpy>
      dm->resolved = true;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8008556:	e006      	b.n	8008566 <mg_dns_parse+0x1ba>
  for (i = 0; i < num_answers; i++) {
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	3301      	adds	r3, #1
 800855c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800855e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	429a      	cmp	r2, r3
 8008564:	d3a9      	bcc.n	80084ba <mg_dns_parse+0x10e>
    }
  }
  return true;
 8008566:	2301      	movs	r3, #1
}
 8008568:	4618      	mov	r0, r3
 800856a:	3730      	adds	r7, #48	@ 0x30
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	24000258 	.word	0x24000258
 8008574:	0802d9b8 	.word	0x0802d9b8
 8008578:	08029e1c 	.word	0x08029e1c
 800857c:	08029e34 	.word	0x08029e34

08008580 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8008580:	b5b0      	push	{r4, r5, r7, lr}
 8008582:	b0d2      	sub	sp, #328	@ 0x148
 8008584:	af02      	add	r7, sp, #8
 8008586:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800858a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800858e:	6018      	str	r0, [r3, #0]
 8008590:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008594:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008598:	6019      	str	r1, [r3, #0]
 800859a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800859e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80085a2:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80085a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	332c      	adds	r3, #44	@ 0x2c
 80085b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 80085b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d12d      	bne.n	8008620 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 80085c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80085c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80085d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80085e0:	e019      	b.n	8008616 <dns_cb+0x96>
      tmp = d->next;
 80085e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80085ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80085f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80085f4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80085f8:	4290      	cmp	r0, r2
 80085fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80085fe:	d206      	bcs.n	800860e <dns_cb+0x8e>
 8008600:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	4992      	ldr	r1, [pc, #584]	@ (8008850 <dns_cb+0x2d0>)
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fb37 	bl	8008c7c <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 800860e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008612:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8008616:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e1      	bne.n	80085e2 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 800861e:	e112      	b.n	8008846 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8008620:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008624:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b07      	cmp	r3, #7
 800862c:	f040 80e4 	bne.w	80087f8 <dns_cb+0x278>
    int resolved = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8008636:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800863a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008642:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008646:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864e:	f107 0210 	add.w	r2, r7, #16
 8008652:	4619      	mov	r1, r3
 8008654:	f7ff feaa 	bl	80083ac <mg_dns_parse>
 8008658:	4603      	mov	r3, r0
 800865a:	f083 0301 	eor.w	r3, r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01e      	beq.n	80086a2 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8008664:	4b7b      	ldr	r3, [pc, #492]	@ (8008854 <dns_cb+0x2d4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd09      	ble.n	8008680 <dns_cb+0x100>
 800866c:	4b7a      	ldr	r3, [pc, #488]	@ (8008858 <dns_cb+0x2d8>)
 800866e:	f240 121f 	movw	r2, #287	@ 0x11f
 8008672:	497a      	ldr	r1, [pc, #488]	@ (800885c <dns_cb+0x2dc>)
 8008674:	2001      	movs	r0, #1
 8008676:	f006 f979 	bl	800e96c <mg_log_prefix>
 800867a:	4879      	ldr	r0, [pc, #484]	@ (8008860 <dns_cb+0x2e0>)
 800867c:	f006 f9c6 	bl	800ea0c <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8008680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008684:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800868c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008690:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f006 f9ec 	bl	800ea78 <mg_hexdump>
 80086a0:	e090      	b.n	80087c4 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 80086a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80086ac:	e085      	b.n	80087ba <dns_cb+0x23a>
        tmp = d->next;
 80086ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 80086b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80086bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80086c0:	881a      	ldrh	r2, [r3, #0]
 80086c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80086c6:	8a1b      	ldrh	r3, [r3, #16]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d171      	bne.n	80087b0 <dns_cb+0x230>
        if (d->c->is_resolving) {
 80086cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d04a      	beq.n	8008776 <dns_cb+0x1f6>
          if (dm.resolved) {
 80086e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80086e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80086e8:	789b      	ldrb	r3, [r3, #2]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d038      	beq.n	8008760 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80086ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80086fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80086fe:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8008700:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800870a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800870e:	f102 041c 	add.w	r4, r2, #28
 8008712:	1d1d      	adds	r5, r3, #4
 8008714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 800871c:	4b4d      	ldr	r3, [pc, #308]	@ (8008854 <dns_cb+0x2d4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b02      	cmp	r3, #2
 8008722:	dd16      	ble.n	8008752 <dns_cb+0x1d2>
 8008724:	4b4c      	ldr	r3, [pc, #304]	@ (8008858 <dns_cb+0x2d8>)
 8008726:	f240 122b 	movw	r2, #299	@ 0x12b
 800872a:	494c      	ldr	r1, [pc, #304]	@ (800885c <dns_cb+0x2dc>)
 800872c:	2003      	movs	r0, #3
 800872e:	f006 f91d 	bl	800e96c <mg_log_prefix>
 8008732:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800873a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	331c      	adds	r3, #28
 8008742:	f107 0210 	add.w	r2, r7, #16
 8008746:	3218      	adds	r2, #24
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4b46      	ldr	r3, [pc, #280]	@ (8008864 <dns_cb+0x2e4>)
 800874c:	4846      	ldr	r0, [pc, #280]	@ (8008868 <dns_cb+0x2e8>)
 800874e:	f006 f95d 	bl	800ea0c <mg_log>
            mg_connect_resolved(d->c);
 8008752:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4618      	mov	r0, r3
 800875a:	f00a f865 	bl	8012828 <mg_connect_resolved>
 800875e:	e01d      	b.n	800879c <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8008760:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008764:	6858      	ldr	r0, [r3, #4]
 8008766:	f107 0310 	add.w	r3, r7, #16
 800876a:	3318      	adds	r3, #24
 800876c:	461a      	mov	r2, r3
 800876e:	493f      	ldr	r1, [pc, #252]	@ (800886c <dns_cb+0x2ec>)
 8008770:	f000 fa84 	bl	8008c7c <mg_error>
 8008774:	e012      	b.n	800879c <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8008776:	4b37      	ldr	r3, [pc, #220]	@ (8008854 <dns_cb+0x2d4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd0e      	ble.n	800879c <dns_cb+0x21c>
 800877e:	4b36      	ldr	r3, [pc, #216]	@ (8008858 <dns_cb+0x2d8>)
 8008780:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008784:	4935      	ldr	r1, [pc, #212]	@ (800885c <dns_cb+0x2dc>)
 8008786:	2001      	movs	r0, #1
 8008788:	f006 f8f0 	bl	800e96c <mg_log_prefix>
 800878c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008794:	4619      	mov	r1, r3
 8008796:	4836      	ldr	r0, [pc, #216]	@ (8008870 <dns_cb+0x2f0>)
 8008798:	f006 f938 	bl	800ea0c <mg_log>
        mg_dns_free(head, d);
 800879c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80087a0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80087a4:	f7ff fc68 	bl	8008078 <mg_dns_free>
        resolved = 1;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80087ae:	e000      	b.n	80087b2 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 80087b0:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 80087b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80087b6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80087ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f47f af75 	bne.w	80086ae <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80087c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10d      	bne.n	80087e8 <dns_cb+0x268>
 80087cc:	4b21      	ldr	r3, [pc, #132]	@ (8008854 <dns_cb+0x2d4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dd09      	ble.n	80087e8 <dns_cb+0x268>
 80087d4:	4b20      	ldr	r3, [pc, #128]	@ (8008858 <dns_cb+0x2d8>)
 80087d6:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 80087da:	4920      	ldr	r1, [pc, #128]	@ (800885c <dns_cb+0x2dc>)
 80087dc:	2001      	movs	r0, #1
 80087de:	f006 f8c5 	bl	800e96c <mg_log_prefix>
 80087e2:	4824      	ldr	r0, [pc, #144]	@ (8008874 <dns_cb+0x2f4>)
 80087e4:	f006 f912 	bl	800ea0c <mg_log>
    c->recv.len = 0;
 80087e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80087ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80087f6:	e026      	b.n	8008846 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80087f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80087fc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b09      	cmp	r3, #9
 8008804:	d11f      	bne.n	8008846 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 8008806:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8008810:	e015      	b.n	800883e <dns_cb+0x2be>
      tmp = d->next;
 8008812:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 800881c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	4915      	ldr	r1, [pc, #84]	@ (8008878 <dns_cb+0x2f8>)
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fa29 	bl	8008c7c <mg_error>
      mg_dns_free(head, d);
 800882a:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800882e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008832:	f7ff fc21 	bl	8008078 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8008836:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800883a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800883e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e5      	bne.n	8008812 <dns_cb+0x292>
}
 8008846:	bf00      	nop
 8008848:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800884c:	46bd      	mov	sp, r7
 800884e:	bdb0      	pop	{r4, r5, r7, pc}
 8008850:	08029e60 	.word	0x08029e60
 8008854:	24000258 	.word	0x24000258
 8008858:	0802d9c8 	.word	0x0802d9c8
 800885c:	08029e1c 	.word	0x08029e1c
 8008860:	08029e6c 	.word	0x08029e6c
 8008864:	080133cb 	.word	0x080133cb
 8008868:	08029e88 	.word	0x08029e88
 800886c:	08029e98 	.word	0x08029e98
 8008870:	08029eb0 	.word	0x08029eb0
 8008874:	08029ec8 	.word	0x08029ec8
 8008878:	08029ed8 	.word	0x08029ed8

0800887c <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 800887c:	b590      	push	{r4, r7, lr}
 800887e:	b0cb      	sub	sp, #300	@ 0x12c
 8008880:	af00      	add	r7, sp, #0
 8008882:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8008886:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800888a:	6020      	str	r0, [r4, #0]
 800888c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8008890:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8008894:	6001      	str	r1, [r0, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800889c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80088a6:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80088aa:	460a      	mov	r2, r1
 80088ac:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 80088ae:	f107 0314 	add.w	r3, r7, #20
 80088b2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80088b6:	2100      	movs	r1, #0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f01e ff69 	bl	8027790 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80088be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80088c2:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f019 fae9 	bl	8021ea0 <mg_ntohs>
 80088ce:	4603      	mov	r3, r0
 80088d0:	461a      	mov	r2, r3
 80088d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80088d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80088da:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80088dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80088e0:	f019 fade 	bl	8021ea0 <mg_ntohs>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80088ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80088f0:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80088f2:	2001      	movs	r0, #1
 80088f4:	f019 fad4 	bl	8021ea0 <mg_ntohs>
 80088f8:	4603      	mov	r3, r0
 80088fa:	461a      	mov	r2, r3
 80088fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008900:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008904:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8008906:	2300      	movs	r3, #0
 8008908:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800890c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008910:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8008914:	e054      	b.n	80089c0 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8008916:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800891a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008926:	4413      	add	r3, r2
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b2e      	cmp	r3, #46	@ 0x2e
 800892c:	d009      	beq.n	8008942 <mg_dns_send+0xc6>
 800892e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008932:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800893e:	429a      	cmp	r2, r3
 8008940:	d32f      	bcc.n	80089a2 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8008942:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008946:	b2da      	uxtb	r2, r3
 8008948:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800894c:	b2db      	uxtb	r3, r3
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	b2d9      	uxtb	r1, r3
 8008952:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008956:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800895a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800895e:	4413      	add	r3, r2
 8008960:	330c      	adds	r3, #12
 8008962:	460a      	mov	r2, r1
 8008964:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8008966:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800896a:	3301      	adds	r3, #1
 800896c:	f107 0214 	add.w	r2, r7, #20
 8008970:	3308      	adds	r3, #8
 8008972:	4413      	add	r3, r2
 8008974:	1d18      	adds	r0, r3, #4
 8008976:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800897a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008986:	18d1      	adds	r1, r2, r3
 8008988:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800898c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	461a      	mov	r2, r3
 8008994:	f01f f835 	bl	8027a02 <memcpy>
      n = i + 1;
 8008998:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800899c:	3301      	adds	r3, #1
 800899e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80089a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80089a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d209      	bcs.n	80089ca <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80089b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80089ba:	3301      	adds	r3, #1
 80089bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80089c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80089c4:	2bfa      	cmp	r3, #250	@ 0xfa
 80089c6:	d9a6      	bls.n	8008916 <mg_dns_send+0x9a>
 80089c8:	e000      	b.n	80089cc <mg_dns_send+0x150>
    if (i >= name->len) break;
 80089ca:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80089cc:	f107 0214 	add.w	r2, r7, #20
 80089d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089d4:	3308      	adds	r3, #8
 80089d6:	4413      	add	r3, r2
 80089d8:	3304      	adds	r3, #4
 80089da:	2205      	movs	r2, #5
 80089dc:	4916      	ldr	r1, [pc, #88]	@ (8008a38 <mg_dns_send+0x1bc>)
 80089de:	4618      	mov	r0, r3
 80089e0:	f01f f80f 	bl	8027a02 <memcpy>
  n += 5;
 80089e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089e8:	3305      	adds	r3, #5
 80089ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80089ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80089f2:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <mg_dns_send+0x194>
 80089fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008a00:	3b03      	subs	r3, #3
 8008a02:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8008a06:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8008a0a:	4413      	add	r3, r2
 8008a0c:	221c      	movs	r2, #28
 8008a0e:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8008a10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008a14:	f103 020c 	add.w	r2, r3, #12
 8008a18:	f107 0114 	add.w	r1, r7, #20
 8008a1c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008a20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f00a fa39 	bl	8012e9c <mg_send>
 8008a2a:	4603      	mov	r3, r0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd90      	pop	{r4, r7, pc}
 8008a36:	bf00      	nop
 8008a38:	08029ee4 	.word	0x08029ee4

08008a3c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8008a3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008a40:	b088      	sub	sp, #32
 8008a42:	af02      	add	r7, sp, #8
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8008a58:	494d      	ldr	r1, [pc, #308]	@ (8008b90 <mg_sendnsreq+0x154>)
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f90e 	bl	8008c7c <mg_error>
 8008a60:	e017      	b.n	8008a92 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d113      	bne.n	8008a92 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6858      	ldr	r0, [r3, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6819      	ldr	r1, [r3, #0]
 8008a72:	2300      	movs	r3, #0
 8008a74:	2200      	movs	r2, #0
 8008a76:	f006 fbf7 	bl	800f268 <mg_connect>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4a41      	ldr	r2, [pc, #260]	@ (8008b94 <mg_sendnsreq+0x158>)
 8008a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d104      	bne.n	8008aa4 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8008a9a:	493f      	ldr	r1, [pc, #252]	@ (8008b98 <mg_sendnsreq+0x15c>)
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f8ed 	bl	8008c7c <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8008aa2:	e070      	b.n	8008b86 <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8008aa4:	2118      	movs	r1, #24
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	f01c ffc4 	bl	8025a34 <calloc>
 8008aac:	4603      	mov	r3, r0
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d104      	bne.n	8008ac0 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 8008ab6:	4939      	ldr	r1, [pc, #228]	@ (8008b9c <mg_sendnsreq+0x160>)
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f8df 	bl	8008c7c <mg_error>
}
 8008abe:	e062      	b.n	8008b86 <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac6:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d004      	beq.n	8008ad8 <mg_sendnsreq+0x9c>
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	8a1b      	ldrh	r3, [r3, #16]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	e000      	b.n	8008ada <mg_sendnsreq+0x9e>
 8008ad8:	2201      	movs	r2, #1
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	62da      	str	r2, [r3, #44]	@ 0x2c
    d->expire = mg_millis() + (uint64_t) ms;
 8008af0:	f7f8 f82e 	bl	8000b50 <mg_millis>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	17c8      	asrs	r0, r1, #31
 8008afc:	460c      	mov	r4, r1
 8008afe:	4605      	mov	r5, r0
 8008b00:	eb12 0804 	adds.w	r8, r2, r4
 8008b04:	eb43 0905 	adc.w	r9, r3, r5
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8008b1a:	f043 0308 	orr.w	r3, r3, #8
 8008b1e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8008b22:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba0 <mg_sendnsreq+0x164>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	dd18      	ble.n	8008b5c <mg_sendnsreq+0x120>
 8008b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba4 <mg_sendnsreq+0x168>)
 8008b2c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8008b30:	491d      	ldr	r1, [pc, #116]	@ (8008ba8 <mg_sendnsreq+0x16c>)
 8008b32:	2004      	movs	r0, #4
 8008b34:	f005 ff1a 	bl	800e96c <mg_log_prefix>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	461c      	mov	r4, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	8a12      	ldrh	r2, [r2, #16]
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	4603      	mov	r3, r0
 8008b54:	4622      	mov	r2, r4
 8008b56:	4815      	ldr	r0, [pc, #84]	@ (8008bac <mg_sendnsreq+0x170>)
 8008b58:	f005 ff58 	bl	800ea0c <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	6858      	ldr	r0, [r3, #4]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	8a1a      	ldrh	r2, [r3, #16]
 8008b64:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	f7ff fe87 	bl	800887c <mg_dns_send>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f083 0301 	eor.w	r3, r3, #1
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	490c      	ldr	r1, [pc, #48]	@ (8008bb0 <mg_sendnsreq+0x174>)
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f87b 	bl	8008c7c <mg_error>
}
 8008b86:	bf00      	nop
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b90:	08029eec 	.word	0x08029eec
 8008b94:	08008581 	.word	0x08008581
 8008b98:	08029f18 	.word	0x08029f18
 8008b9c:	08029f24 	.word	0x08029f24
 8008ba0:	24000258 	.word	0x24000258
 8008ba4:	0802d9d0 	.word	0x0802d9d0
 8008ba8:	08029e1c 	.word	0x08029e1c
 8008bac:	08029f30 	.word	0x08029f30
 8008bb0:	08029f54 	.word	0x08029f54

08008bb4 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8008bbe:	f107 030c 	add.w	r3, r7, #12
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f018 fff4 	bl	8021bb2 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8008bca:	6838      	ldr	r0, [r7, #0]
 8008bcc:	f019 f824 	bl	8021c18 <mg_url_port>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f019 f964 	bl	8021ea0 <mg_ntohs>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	331c      	adds	r3, #28
 8008be4:	461a      	mov	r2, r3
 8008be6:	f107 030c 	add.w	r3, r7, #12
 8008bea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008bee:	f006 fa6c 	bl	800f0ca <mg_aton>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f009 fe15 	bl	8012828 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8008bfe:	e019      	b.n	8008c34 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	7e1b      	ldrb	r3, [r3, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <mg_resolve+0x5e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	330c      	adds	r3, #12
 8008c10:	e002      	b.n	8008c18 <mg_resolve+0x64>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	3304      	adds	r3, #4
 8008c18:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	695a      	ldr	r2, [r3, #20]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	7e1b      	ldrb	r3, [r3, #24]
 8008c26:	f107 010c 	add.w	r1, r7, #12
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff ff04 	bl	8008a3c <mg_sendnsreq>
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d006      	beq.n	8008c60 <mg_call+0x24>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <mg_call+0x38>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	4798      	blx	r3
}
 8008c74:	bf00      	nop
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8008c7c:	b40e      	push	{r1, r2, r3}
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b095      	sub	sp, #84	@ 0x54
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8008c86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008c8a:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8008c8c:	f107 030c 	add.w	r3, r7, #12
 8008c90:	f107 0010 	add.w	r0, r7, #16
 8008c94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c96:	2140      	movs	r1, #64	@ 0x40
 8008c98:	f00a fa7c 	bl	8013194 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8008c9c:	4b14      	ldr	r3, [pc, #80]	@ (8008cf0 <mg_error+0x74>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd0f      	ble.n	8008cc4 <mg_error+0x48>
 8008ca4:	4b13      	ldr	r3, [pc, #76]	@ (8008cf4 <mg_error+0x78>)
 8008ca6:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8008caa:	4913      	ldr	r1, [pc, #76]	@ (8008cf8 <mg_error+0x7c>)
 8008cac:	2001      	movs	r0, #1
 8008cae:	f005 fe5d 	bl	800e96c <mg_log_prefix>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	480f      	ldr	r0, [pc, #60]	@ (8008cfc <mg_error+0x80>)
 8008cc0:	f005 fea4 	bl	800ea0c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008cca:	f043 0320 	orr.w	r3, r3, #32
 8008cce:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8008cd2:	f107 0310 	add.w	r3, r7, #16
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	2100      	movs	r1, #0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff ffae 	bl	8008c3c <mg_call>
}
 8008ce0:	bf00      	nop
 8008ce2:	3754      	adds	r7, #84	@ 0x54
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cea:	b003      	add	sp, #12
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	24000258 	.word	0x24000258
 8008cf4:	0802d9e0 	.word	0x0802d9e0
 8008cf8:	08029e1c 	.word	0x08029e1c
 8008cfc:	08029fcc 	.word	0x08029fcc

08008d00 <mg_ota_flash_begin>:

static char *s_addr;      // Current address to write to
static size_t s_size;     // Firmware size to flash. In-progress indicator
static uint32_t s_crc32;  // Firmware checksum

bool mg_ota_flash_begin(size_t new_firmware_size, struct mg_flash *flash) {
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  bool ok = false;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
  if (s_size) {
 8008d0e:	4b30      	ldr	r3, [pc, #192]	@ (8008dd0 <mg_ota_flash_begin+0xd0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00e      	beq.n	8008d34 <mg_ota_flash_begin+0x34>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 8008d16:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd4 <mg_ota_flash_begin+0xd4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dd52      	ble.n	8008dc4 <mg_ota_flash_begin+0xc4>
 8008d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8008dd8 <mg_ota_flash_begin+0xd8>)
 8008d20:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8008d24:	492d      	ldr	r1, [pc, #180]	@ (8008ddc <mg_ota_flash_begin+0xdc>)
 8008d26:	2001      	movs	r0, #1
 8008d28:	f005 fe20 	bl	800e96c <mg_log_prefix>
 8008d2c:	482c      	ldr	r0, [pc, #176]	@ (8008de0 <mg_ota_flash_begin+0xe0>)
 8008d2e:	f005 fe6d 	bl	800ea0c <mg_log>
 8008d32:	e047      	b.n	8008dc4 <mg_ota_flash_begin+0xc4>
  } else {
    size_t half = flash->size / 2;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	60bb      	str	r3, [r7, #8]
    s_crc32 = 0;
 8008d3c:	4b29      	ldr	r3, [pc, #164]	@ (8008de4 <mg_ota_flash_begin+0xe4>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
    s_addr = (char *) flash->start + half;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	4413      	add	r3, r2
 8008d4a:	4a27      	ldr	r2, [pc, #156]	@ (8008de8 <mg_ota_flash_begin+0xe8>)
 8008d4c:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("FW %lu bytes, max %lu", new_firmware_size, half));
 8008d4e:	4b21      	ldr	r3, [pc, #132]	@ (8008dd4 <mg_ota_flash_begin+0xd4>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	dd0b      	ble.n	8008d6e <mg_ota_flash_begin+0x6e>
 8008d56:	4b20      	ldr	r3, [pc, #128]	@ (8008dd8 <mg_ota_flash_begin+0xd8>)
 8008d58:	f240 2211 	movw	r2, #529	@ 0x211
 8008d5c:	491f      	ldr	r1, [pc, #124]	@ (8008ddc <mg_ota_flash_begin+0xdc>)
 8008d5e:	2003      	movs	r0, #3
 8008d60:	f005 fe04 	bl	800e96c <mg_log_prefix>
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	4820      	ldr	r0, [pc, #128]	@ (8008dec <mg_ota_flash_begin+0xec>)
 8008d6a:	f005 fe4f 	bl	800ea0c <mg_log>
    if (new_firmware_size < half) {
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d216      	bcs.n	8008da4 <mg_ota_flash_begin+0xa4>
      ok = true;
 8008d76:	2301      	movs	r3, #1
 8008d78:	73fb      	strb	r3, [r7, #15]
      s_size = new_firmware_size;
 8008d7a:	4a15      	ldr	r2, [pc, #84]	@ (8008dd0 <mg_ota_flash_begin+0xd0>)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 8008d80:	4b14      	ldr	r3, [pc, #80]	@ (8008dd4 <mg_ota_flash_begin+0xd4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	dd1d      	ble.n	8008dc4 <mg_ota_flash_begin+0xc4>
 8008d88:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <mg_ota_flash_begin+0xd8>)
 8008d8a:	f240 2215 	movw	r2, #533	@ 0x215
 8008d8e:	4913      	ldr	r1, [pc, #76]	@ (8008ddc <mg_ota_flash_begin+0xdc>)
 8008d90:	2002      	movs	r0, #2
 8008d92:	f005 fdeb 	bl	800e96c <mg_log_prefix>
 8008d96:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd0 <mg_ota_flash_begin+0xd0>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4814      	ldr	r0, [pc, #80]	@ (8008df0 <mg_ota_flash_begin+0xf0>)
 8008d9e:	f005 fe35 	bl	800ea0c <mg_log>
 8008da2:	e00f      	b.n	8008dc4 <mg_ota_flash_begin+0xc4>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, half));
 8008da4:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <mg_ota_flash_begin+0xd4>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dd0b      	ble.n	8008dc4 <mg_ota_flash_begin+0xc4>
 8008dac:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd8 <mg_ota_flash_begin+0xd8>)
 8008dae:	f240 2217 	movw	r2, #535	@ 0x217
 8008db2:	490a      	ldr	r1, [pc, #40]	@ (8008ddc <mg_ota_flash_begin+0xdc>)
 8008db4:	2001      	movs	r0, #1
 8008db6:	f005 fdd9 	bl	800e96c <mg_log_prefix>
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	6879      	ldr	r1, [r7, #4]
 8008dbe:	480d      	ldr	r0, [pc, #52]	@ (8008df4 <mg_ota_flash_begin+0xf4>)
 8008dc0:	f005 fe24 	bl	800ea0c <mg_log>
    }
  }
  return ok;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	24002358 	.word	0x24002358
 8008dd4:	24000258 	.word	0x24000258
 8008dd8:	0802d9ec 	.word	0x0802d9ec
 8008ddc:	08029e1c 	.word	0x08029e1c
 8008de0:	08029fd8 	.word	0x08029fd8
 8008de4:	2400235c 	.word	0x2400235c
 8008de8:	24002354 	.word	0x24002354
 8008dec:	0802a004 	.word	0x0802a004
 8008df0:	0802a01c 	.word	0x0802a01c
 8008df4:	0802a03c 	.word	0x0802a03c

08008df8 <mg_ota_flash_write>:

bool mg_ota_flash_write(const void *buf, size_t len, struct mg_flash *flash) {
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	b08c      	sub	sp, #48	@ 0x30
 8008dfe:	af02      	add	r7, sp, #8
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
  bool ok = false;
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (s_size == 0) {
 8008e0c:	4b54      	ldr	r3, [pc, #336]	@ (8008f60 <mg_ota_flash_write+0x168>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10f      	bne.n	8008e34 <mg_ota_flash_write+0x3c>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 8008e14:	4b53      	ldr	r3, [pc, #332]	@ (8008f64 <mg_ota_flash_write+0x16c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f340 8099 	ble.w	8008f50 <mg_ota_flash_write+0x158>
 8008e1e:	4b52      	ldr	r3, [pc, #328]	@ (8008f68 <mg_ota_flash_write+0x170>)
 8008e20:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8008e24:	4951      	ldr	r1, [pc, #324]	@ (8008f6c <mg_ota_flash_write+0x174>)
 8008e26:	2001      	movs	r0, #1
 8008e28:	f005 fda0 	bl	800e96c <mg_log_prefix>
 8008e2c:	4850      	ldr	r0, [pc, #320]	@ (8008f70 <mg_ota_flash_write+0x178>)
 8008e2e:	f005 fded 	bl	800ea0c <mg_log>
 8008e32:	e08d      	b.n	8008f50 <mg_ota_flash_write+0x158>
  } else {
    size_t len_aligned_down = MG_ROUND_DOWN(len, flash->align);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d009      	beq.n	8008e50 <mg_ota_flash_write+0x58>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	68d2      	ldr	r2, [r2, #12]
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	e000      	b.n	8008e52 <mg_ota_flash_write+0x5a>
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	623b      	str	r3, [r7, #32]
    if (len_aligned_down) ok = flash->write_fn(s_addr, buf, len_aligned_down);
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <mg_ota_flash_write+0x76>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	4a45      	ldr	r2, [pc, #276]	@ (8008f74 <mg_ota_flash_write+0x17c>)
 8008e60:	6810      	ldr	r0, [r2, #0]
 8008e62:	6a3a      	ldr	r2, [r7, #32]
 8008e64:	68f9      	ldr	r1, [r7, #12]
 8008e66:	4798      	blx	r3
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (len_aligned_down < len) {
 8008e6e:	6a3a      	ldr	r2, [r7, #32]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d244      	bcs.n	8008f00 <mg_ota_flash_write+0x108>
 8008e76:	466b      	mov	r3, sp
 8008e78:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	61fb      	str	r3, [r7, #28]
      char tmp[flash->align];
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68de      	ldr	r6, [r3, #12]
 8008e86:	4633      	mov	r3, r6
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	61bb      	str	r3, [r7, #24]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	46b0      	mov	r8, r6
 8008e90:	4699      	mov	r9, r3
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4634      	mov	r4, r6
 8008eaa:	461d      	mov	r5, r3
 8008eac:	f04f 0200 	mov.w	r2, #0
 8008eb0:	f04f 0300 	mov.w	r3, #0
 8008eb4:	00eb      	lsls	r3, r5, #3
 8008eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eba:	00e2      	lsls	r2, r4, #3
 8008ebc:	1df3      	adds	r3, r6, #7
 8008ebe:	08db      	lsrs	r3, r3, #3
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	ebad 0d03 	sub.w	sp, sp, r3
 8008ec6:	ab02      	add	r3, sp, #8
 8008ec8:	3300      	adds	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
      memset(tmp, 0xff, sizeof(tmp));
 8008ecc:	4632      	mov	r2, r6
 8008ece:	21ff      	movs	r1, #255	@ 0xff
 8008ed0:	6978      	ldr	r0, [r7, #20]
 8008ed2:	f01e fc5d 	bl	8027790 <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	4413      	add	r3, r2
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6978      	ldr	r0, [r7, #20]
 8008ee2:	f01e fd8e 	bl	8027a02 <memcpy>
      ok = flash->write_fn(s_addr + len_aligned_down, tmp, sizeof(tmp));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	4a22      	ldr	r2, [pc, #136]	@ (8008f74 <mg_ota_flash_write+0x17c>)
 8008eec:	6811      	ldr	r1, [r2, #0]
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	1888      	adds	r0, r1, r2
 8008ef2:	4632      	mov	r2, r6
 8008ef4:	6979      	ldr	r1, [r7, #20]
 8008ef6:	4798      	blx	r3
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008efe:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <mg_ota_flash_write+0x180>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f018 ff49 	bl	8021da0 <mg_crc32>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4a19      	ldr	r2, [pc, #100]	@ (8008f78 <mg_ota_flash_write+0x180>)
 8008f12:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 8008f14:	4b13      	ldr	r3, [pc, #76]	@ (8008f64 <mg_ota_flash_write+0x16c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	dd13      	ble.n	8008f44 <mg_ota_flash_write+0x14c>
 8008f1c:	4b12      	ldr	r3, [pc, #72]	@ (8008f68 <mg_ota_flash_write+0x170>)
 8008f1e:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8008f22:	4912      	ldr	r1, [pc, #72]	@ (8008f6c <mg_ota_flash_write+0x174>)
 8008f24:	2003      	movs	r0, #3
 8008f26:	f005 fd21 	bl	800e96c <mg_log_prefix>
 8008f2a:	4b12      	ldr	r3, [pc, #72]	@ (8008f74 <mg_ota_flash_write+0x17c>)
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	425b      	negs	r3, r3
 8008f32:	18d1      	adds	r1, r2, r3
 8008f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	480f      	ldr	r0, [pc, #60]	@ (8008f7c <mg_ota_flash_write+0x184>)
 8008f40:	f005 fd64 	bl	800ea0c <mg_log>
    s_addr += len;
 8008f44:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <mg_ota_flash_write+0x17c>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	4a09      	ldr	r2, [pc, #36]	@ (8008f74 <mg_ota_flash_write+0x17c>)
 8008f4e:	6013      	str	r3, [r2, #0]
  }
  return ok;
 8008f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3728      	adds	r7, #40	@ 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	bf00      	nop
 8008f60:	24002358 	.word	0x24002358
 8008f64:	24000258 	.word	0x24000258
 8008f68:	0802da00 	.word	0x0802da00
 8008f6c:	08029e1c 	.word	0x08029e1c
 8008f70:	0802a060 	.word	0x0802a060
 8008f74:	24002354 	.word	0x24002354
 8008f78:	2400235c 	.word	0x2400235c
 8008f7c:	0802a088 	.word	0x0802a088

08008f80 <mg_ota_flash_end>:

bool mg_ota_flash_end(struct mg_flash *flash) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	6078      	str	r0, [r7, #4]
  char *base = (char *) flash->start + flash->size / 2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	085b      	lsrs	r3, r3, #1
 8008f92:	4413      	add	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]
  bool ok = false;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009058 <mg_ota_flash_end+0xd8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d040      	beq.n	8009024 <mg_ota_flash_end+0xa4>
    size_t size = (size_t) (s_addr - base);
 8008fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800905c <mg_ota_flash_end+0xdc>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	60fb      	str	r3, [r7, #12]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 8008fac:	4b2a      	ldr	r3, [pc, #168]	@ (8009058 <mg_ota_flash_end+0xd8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6939      	ldr	r1, [r7, #16]
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f018 fef3 	bl	8021da0 <mg_crc32>
 8008fba:	60b8      	str	r0, [r7, #8]
    if (size == s_size && crc32 == s_crc32) ok = true;
 8008fbc:	4b26      	ldr	r3, [pc, #152]	@ (8009058 <mg_ota_flash_end+0xd8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d106      	bne.n	8008fd4 <mg_ota_flash_end+0x54>
 8008fc6:	4b26      	ldr	r3, [pc, #152]	@ (8009060 <mg_ota_flash_end+0xe0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d101      	bne.n	8008fd4 <mg_ota_flash_end+0x54>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	75fb      	strb	r3, [r7, #23]
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 8008fd4:	4b23      	ldr	r3, [pc, #140]	@ (8009064 <mg_ota_flash_end+0xe4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	dd18      	ble.n	800900e <mg_ota_flash_end+0x8e>
 8008fdc:	4b22      	ldr	r3, [pc, #136]	@ (8009068 <mg_ota_flash_end+0xe8>)
 8008fde:	f240 2239 	movw	r2, #569	@ 0x239
 8008fe2:	4922      	ldr	r1, [pc, #136]	@ (800906c <mg_ota_flash_end+0xec>)
 8008fe4:	2003      	movs	r0, #3
 8008fe6:	f005 fcc1 	bl	800e96c <mg_log_prefix>
 8008fea:	4b1d      	ldr	r3, [pc, #116]	@ (8009060 <mg_ota_flash_end+0xe0>)
 8008fec:	6819      	ldr	r1, [r3, #0]
 8008fee:	4b1a      	ldr	r3, [pc, #104]	@ (8009058 <mg_ota_flash_end+0xd8>)
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <mg_ota_flash_end+0x7c>
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8009070 <mg_ota_flash_end+0xf0>)
 8008ffa:	e000      	b.n	8008ffe <mg_ota_flash_end+0x7e>
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <mg_ota_flash_end+0xf4>)
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4613      	mov	r3, r2
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	481b      	ldr	r0, [pc, #108]	@ (8009078 <mg_ota_flash_end+0xf8>)
 800900a:	f005 fcff 	bl	800ea0c <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 800900e:	4b12      	ldr	r3, [pc, #72]	@ (8009058 <mg_ota_flash_end+0xd8>)
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
    if (ok) ok = flash->swap_fn();
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <mg_ota_flash_end+0xa4>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	4798      	blx	r3
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 8009024:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <mg_ota_flash_end+0xe4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b01      	cmp	r3, #1
 800902a:	dd10      	ble.n	800904e <mg_ota_flash_end+0xce>
 800902c:	4b0e      	ldr	r3, [pc, #56]	@ (8009068 <mg_ota_flash_end+0xe8>)
 800902e:	f240 223e 	movw	r2, #574	@ 0x23e
 8009032:	490e      	ldr	r1, [pc, #56]	@ (800906c <mg_ota_flash_end+0xec>)
 8009034:	2002      	movs	r0, #2
 8009036:	f005 fc99 	bl	800e96c <mg_log_prefix>
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <mg_ota_flash_end+0xc4>
 8009040:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <mg_ota_flash_end+0xf0>)
 8009042:	e000      	b.n	8009046 <mg_ota_flash_end+0xc6>
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <mg_ota_flash_end+0xf4>)
 8009046:	4619      	mov	r1, r3
 8009048:	480c      	ldr	r0, [pc, #48]	@ (800907c <mg_ota_flash_end+0xfc>)
 800904a:	f005 fcdf 	bl	800ea0c <mg_log>
  return ok;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	24002358 	.word	0x24002358
 800905c:	24002354 	.word	0x24002354
 8009060:	2400235c 	.word	0x2400235c
 8009064:	24000258 	.word	0x24000258
 8009068:	0802da14 	.word	0x0802da14
 800906c:	08029e1c 	.word	0x08029e1c
 8009070:	0802a09c 	.word	0x0802a09c
 8009074:	0802a0a0 	.word	0x0802a0a0
 8009078:	0802a0a8 	.word	0x0802a0a8
 800907c:	0802a0d0 	.word	0x0802a0d0

08009080 <is_digit>:
#endif




static bool is_digit(int c) {
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b2f      	cmp	r3, #47	@ 0x2f
 800908c:	dd04      	ble.n	8009098 <is_digit+0x18>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b39      	cmp	r3, #57	@ 0x39
 8009092:	dc01      	bgt.n	8009098 <is_digit+0x18>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <is_digit+0x1a>
 8009098:	2300      	movs	r3, #0
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	b2db      	uxtb	r3, r3
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <addexp>:

static int addexp(char *buf, int e, int sign) {
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  int n = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	617a      	str	r2, [r7, #20]
 80090c2:	461a      	mov	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	2265      	movs	r2, #101	@ 0x65
 80090ca:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	617a      	str	r2, [r7, #20]
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80090e4:	dd01      	ble.n	80090ea <addexp+0x3e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	e057      	b.n	800919a <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2b09      	cmp	r3, #9
 80090ee:	dc07      	bgt.n	8009100 <addexp+0x54>
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	617a      	str	r2, [r7, #20]
 80090f6:	461a      	mov	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	2230      	movs	r2, #48	@ 0x30
 80090fe:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b63      	cmp	r3, #99	@ 0x63
 8009104:	dd1c      	ble.n	8009140 <addexp+0x94>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a27      	ldr	r2, [pc, #156]	@ (80091a8 <addexp+0xfc>)
 800910a:	fb82 1203 	smull	r1, r2, r2, r3
 800910e:	1152      	asrs	r2, r2, #5
 8009110:	17db      	asrs	r3, r3, #31
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	b2da      	uxtb	r2, r3
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	1c59      	adds	r1, r3, #1
 800911a:	6179      	str	r1, [r7, #20]
 800911c:	4619      	mov	r1, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	440b      	add	r3, r1
 8009122:	3230      	adds	r2, #48	@ 0x30
 8009124:	b2d2      	uxtb	r2, r2
 8009126:	701a      	strb	r2, [r3, #0]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4a1f      	ldr	r2, [pc, #124]	@ (80091a8 <addexp+0xfc>)
 800912c:	fb82 1203 	smull	r1, r2, r2, r3
 8009130:	1151      	asrs	r1, r2, #5
 8009132:	17da      	asrs	r2, r3, #31
 8009134:	1a8a      	subs	r2, r1, r2
 8009136:	2164      	movs	r1, #100	@ 0x64
 8009138:	fb01 f202 	mul.w	r2, r1, r2
 800913c:	1a9b      	subs	r3, r3, r2
 800913e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b09      	cmp	r3, #9
 8009144:	dd1d      	ble.n	8009182 <addexp+0xd6>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <addexp+0x100>)
 800914a:	fb82 1203 	smull	r1, r2, r2, r3
 800914e:	1092      	asrs	r2, r2, #2
 8009150:	17db      	asrs	r3, r3, #31
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	b2da      	uxtb	r2, r3
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	1c59      	adds	r1, r3, #1
 800915a:	6179      	str	r1, [r7, #20]
 800915c:	4619      	mov	r1, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	440b      	add	r3, r1
 8009162:	3230      	adds	r2, #48	@ 0x30
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	4b10      	ldr	r3, [pc, #64]	@ (80091ac <addexp+0x100>)
 800916c:	fb83 1302 	smull	r1, r3, r3, r2
 8009170:	1099      	asrs	r1, r3, #2
 8009172:	17d3      	asrs	r3, r2, #31
 8009174:	1ac9      	subs	r1, r1, r3
 8009176:	460b      	mov	r3, r1
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	b2da      	uxtb	r2, r3
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	1c59      	adds	r1, r3, #1
 800918a:	6179      	str	r1, [r7, #20]
 800918c:	4619      	mov	r1, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	440b      	add	r3, r1
 8009192:	3230      	adds	r2, #48	@ 0x30
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	701a      	strb	r2, [r3, #0]
  return n;
 8009198:	697b      	ldr	r3, [r7, #20]
}
 800919a:	4618      	mov	r0, r3
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	51eb851f 	.word	0x51eb851f
 80091ac:	66666667 	.word	0x66666667

080091b0 <xisinf>:

static int xisinf(double x) {
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80091ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091be:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80091c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	000a      	movs	r2, r1
 80091d0:	2300      	movs	r3, #0
 80091d2:	4613      	mov	r3, r2
 80091d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091d8:	4a08      	ldr	r2, [pc, #32]	@ (80091fc <xisinf+0x4c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d106      	bne.n	80091ec <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80091de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091e2:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <xisinf+0x3c>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <xisinf+0x3e>
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	7ff00000 	.word	0x7ff00000

08009200 <xisnan>:

static int xisnan(double x) {
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800920a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8009212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009216:	f04f 0200 	mov.w	r2, #0
 800921a:	f04f 0300 	mov.w	r3, #0
 800921e:	000a      	movs	r2, r1
 8009220:	2300      	movs	r3, #0
 8009222:	4613      	mov	r3, r2
 8009224:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8009228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800922c:	4613      	mov	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	bf14      	ite	ne
 8009232:	2301      	movne	r3, #1
 8009234:	2300      	moveq	r3, #0
 8009236:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8009238:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 800923a:	4a06      	ldr	r2, [pc, #24]	@ (8009254 <xisnan+0x54>)
 800923c:	4293      	cmp	r3, r2
 800923e:	bf8c      	ite	hi
 8009240:	2301      	movhi	r3, #1
 8009242:	2300      	movls	r3, #0
 8009244:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	7ff00000 	.word	0x7ff00000

08009258 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b0a0      	sub	sp, #128	@ 0x80
 800925c:	af02      	add	r7, sp, #8
 800925e:	6178      	str	r0, [r7, #20]
 8009260:	6139      	str	r1, [r7, #16]
 8009262:	ed87 0b02 	vstr	d0, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	673b      	str	r3, [r7, #112]	@ 0x70
 800926e:	2300      	movs	r3, #0
 8009270:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009272:	2300      	movs	r3, #0
 8009274:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8009276:	ed97 7b02 	vldr	d7, [r7, #8]
 800927a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009282:	d107      	bne.n	8009294 <mg_dtoa+0x3c>
 8009284:	4bb8      	ldr	r3, [pc, #736]	@ (8009568 <mg_dtoa+0x310>)
 8009286:	4ab9      	ldr	r2, [pc, #740]	@ (800956c <mg_dtoa+0x314>)
 8009288:	6939      	ldr	r1, [r7, #16]
 800928a:	6978      	ldr	r0, [r7, #20]
 800928c:	f009 ffaa 	bl	80131e4 <mg_snprintf>
 8009290:	4603      	mov	r3, r0
 8009292:	e28d      	b.n	80097b0 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8009294:	ed97 0b02 	vldr	d0, [r7, #8]
 8009298:	f7ff ff8a 	bl	80091b0 <xisinf>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <mg_dtoa+0x6c>
 80092a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80092a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80092aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ae:	dd01      	ble.n	80092b4 <mg_dtoa+0x5c>
 80092b0:	4baf      	ldr	r3, [pc, #700]	@ (8009570 <mg_dtoa+0x318>)
 80092b2:	e000      	b.n	80092b6 <mg_dtoa+0x5e>
 80092b4:	4baf      	ldr	r3, [pc, #700]	@ (8009574 <mg_dtoa+0x31c>)
 80092b6:	4aad      	ldr	r2, [pc, #692]	@ (800956c <mg_dtoa+0x314>)
 80092b8:	6939      	ldr	r1, [r7, #16]
 80092ba:	6978      	ldr	r0, [r7, #20]
 80092bc:	f009 ff92 	bl	80131e4 <mg_snprintf>
 80092c0:	4603      	mov	r3, r0
 80092c2:	e275      	b.n	80097b0 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 80092c4:	ed97 0b02 	vldr	d0, [r7, #8]
 80092c8:	f7ff ff9a 	bl	8009200 <xisnan>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <mg_dtoa+0x8a>
 80092d2:	4ba9      	ldr	r3, [pc, #676]	@ (8009578 <mg_dtoa+0x320>)
 80092d4:	4aa5      	ldr	r2, [pc, #660]	@ (800956c <mg_dtoa+0x314>)
 80092d6:	6939      	ldr	r1, [r7, #16]
 80092d8:	6978      	ldr	r0, [r7, #20]
 80092da:	f009 ff83 	bl	80131e4 <mg_snprintf>
 80092de:	4603      	mov	r3, r0
 80092e0:	e266      	b.n	80097b0 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80092e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80092e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80092ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ee:	d50d      	bpl.n	800930c <mg_dtoa+0xb4>
 80092f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80092f4:	eeb1 7b47 	vneg.f64	d7, d7
 80092f8:	ed87 7b02 	vstr	d7, [r7, #8]
 80092fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	673a      	str	r2, [r7, #112]	@ 0x70
 8009302:	3378      	adds	r3, #120	@ 0x78
 8009304:	443b      	add	r3, r7
 8009306:	222d      	movs	r2, #45	@ 0x2d
 8009308:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 800930c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009310:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d024      	beq.n	8009364 <mg_dtoa+0x10c>
    mul = 1.0;
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	4b97      	ldr	r3, [pc, #604]	@ (800957c <mg_dtoa+0x324>)
 8009320:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8009324:	e007      	b.n	8009336 <mg_dtoa+0xde>
 8009326:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800932a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800932e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009332:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009336:	ed97 7b02 	vldr	d7, [r7, #8]
 800933a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800933e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009346:	db12      	blt.n	800936e <mg_dtoa+0x116>
 8009348:	ed97 5b02 	vldr	d5, [r7, #8]
 800934c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009350:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009354:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009358:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800935c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009360:	dae1      	bge.n	8009326 <mg_dtoa+0xce>
 8009362:	e00d      	b.n	8009380 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 8009364:	a37e      	add	r3, pc, #504	@ (adr r3, 8009560 <mg_dtoa+0x308>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 800936e:	e007      	b.n	8009380 <mg_dtoa+0x128>
 8009370:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009374:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009378:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800937c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009380:	ed97 7b02 	vldr	d7, [r7, #8]
 8009384:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009388:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800938c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009390:	d80c      	bhi.n	80093ac <mg_dtoa+0x154>
 8009392:	ed97 5b02 	vldr	d5, [r7, #8]
 8009396:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800939a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800939e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80093a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80093a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093aa:	d9e1      	bls.n	8009370 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80093b0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80093b4:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80093b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093bc:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80093c0:	e00a      	b.n	80093d8 <mg_dtoa+0x180>
 80093c2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80093c6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80093ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80093ce:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80093d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093d4:	3301      	adds	r3, #1
 80093d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80093d8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	dbf0      	blt.n	80093c2 <mg_dtoa+0x16a>

  d += t;
 80093e0:	ed97 6b02 	vldr	d6, [r7, #8]
 80093e4:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80093e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80093ec:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	4b61      	ldr	r3, [pc, #388]	@ (800957c <mg_dtoa+0x324>)
 80093f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80093fa:	e00a      	b.n	8009412 <mg_dtoa+0x1ba>
 80093fc:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8009400:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009404:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009408:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800940c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800940e:	3301      	adds	r3, #1
 8009410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009412:	ed97 7b02 	vldr	d7, [r7, #8]
 8009416:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800941a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	db0c      	blt.n	800943e <mg_dtoa+0x1e6>
 8009424:	ed97 5b02 	vldr	d5, [r7, #8]
 8009428:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800942c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009430:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009434:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943c:	dade      	bge.n	80093fc <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 800943e:	e00a      	b.n	8009456 <mg_dtoa+0x1fe>
 8009440:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009444:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009448:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800944c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009452:	3b01      	subs	r3, #1
 8009454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009456:	ed97 7b02 	vldr	d7, [r7, #8]
 800945a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800945e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009466:	d50c      	bpl.n	8009482 <mg_dtoa+0x22a>
 8009468:	ed97 5b02 	vldr	d5, [r7, #8]
 800946c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009470:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009474:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009478:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800947c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009480:	d4de      	bmi.n	8009440 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d031      	beq.n	80094ec <mg_dtoa+0x294>
 8009488:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	429a      	cmp	r2, r3
 800948e:	db2d      	blt.n	80094ec <mg_dtoa+0x294>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b01      	cmp	r3, #1
 8009494:	dd2a      	ble.n	80094ec <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8009496:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800949a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800949e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	f107 0018 	add.w	r0, r7, #24
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	eeb0 0b45 	vmov.f64	d0, d5
 80094ae:	2128      	movs	r1, #40	@ 0x28
 80094b0:	f7ff fed2 	bl	8009258 <mg_dtoa>
 80094b4:	4603      	mov	r3, r0
 80094b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 80094b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80094ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094bc:	4413      	add	r3, r2
 80094be:	f107 0218 	add.w	r2, r7, #24
 80094c2:	4413      	add	r3, r2
 80094c4:	222b      	movs	r2, #43	@ 0x2b
 80094c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fdef 	bl	80090ac <addexp>
 80094ce:	4602      	mov	r2, r0
 80094d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094d2:	4413      	add	r3, r2
 80094d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80094d6:	f107 0318 	add.w	r3, r7, #24
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094de:	4a28      	ldr	r2, [pc, #160]	@ (8009580 <mg_dtoa+0x328>)
 80094e0:	6939      	ldr	r1, [r7, #16]
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	f009 fe7e 	bl	80131e4 <mg_snprintf>
 80094e8:	4603      	mov	r3, r0
 80094ea:	e161      	b.n	80097b0 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d048      	beq.n	8009584 <mg_dtoa+0x32c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	425b      	negs	r3, r3
 80094f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80094f8:	429a      	cmp	r2, r3
 80094fa:	dc43      	bgt.n	8009584 <mg_dtoa+0x32c>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	dd40      	ble.n	8009584 <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8009502:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8009506:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800950a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	f107 0018 	add.w	r0, r7, #24
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	eeb0 0b45 	vmov.f64	d0, d5
 800951a:	2128      	movs	r1, #40	@ 0x28
 800951c:	f7ff fe9c 	bl	8009258 <mg_dtoa>
 8009520:	4603      	mov	r3, r0
 8009522:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8009524:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009528:	4413      	add	r3, r2
 800952a:	f107 0218 	add.w	r2, r7, #24
 800952e:	18d0      	adds	r0, r2, r3
 8009530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009532:	425b      	negs	r3, r3
 8009534:	222d      	movs	r2, #45	@ 0x2d
 8009536:	4619      	mov	r1, r3
 8009538:	f7ff fdb8 	bl	80090ac <addexp>
 800953c:	4602      	mov	r2, r0
 800953e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009540:	4413      	add	r3, r2
 8009542:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8009544:	f107 0318 	add.w	r3, r7, #24
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800954c:	4a0c      	ldr	r2, [pc, #48]	@ (8009580 <mg_dtoa+0x328>)
 800954e:	6939      	ldr	r1, [r7, #16]
 8009550:	6978      	ldr	r0, [r7, #20]
 8009552:	f009 fe47 	bl	80131e4 <mg_snprintf>
 8009556:	4603      	mov	r3, r0
 8009558:	e12a      	b.n	80097b0 <mg_dtoa+0x558>
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w
 8009560:	9999999a 	.word	0x9999999a
 8009564:	3fb99999 	.word	0x3fb99999
 8009568:	0802a0e4 	.word	0x0802a0e4
 800956c:	0802a0e8 	.word	0x0802a0e8
 8009570:	0802a0ec 	.word	0x0802a0ec
 8009574:	0802a0f0 	.word	0x0802a0f0
 8009578:	0802a0f8 	.word	0x0802a0f8
 800957c:	3ff00000 	.word	0x3ff00000
 8009580:	0802a0fc 	.word	0x0802a0fc
  } else {
    int targ_width = width;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8009588:	2300      	movs	r3, #0
 800958a:	677b      	str	r3, [r7, #116]	@ 0x74
 800958c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009590:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8009594:	e037      	b.n	8009606 <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 8009596:	ed97 5b02 	vldr	d5, [r7, #8]
 800959a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800959e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80095a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80095a6:	ee17 3a90 	vmov	r3, s15
 80095aa:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80095ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dc02      	bgt.n	80095b8 <mg_dtoa+0x360>
 80095b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dd0c      	ble.n	80095d2 <mg_dtoa+0x37a>
 80095b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095be:	1c59      	adds	r1, r3, #1
 80095c0:	66f9      	str	r1, [r7, #108]	@ 0x6c
 80095c2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80095c4:	440b      	add	r3, r1
 80095c6:	3230      	adds	r2, #48	@ 0x30
 80095c8:	b2d2      	uxtb	r2, r2
 80095ca:	3378      	adds	r3, #120	@ 0x78
 80095cc:	443b      	add	r3, r7
 80095ce:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 80095d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80095dc:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80095e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80095e4:	ed97 6b02 	vldr	d6, [r7, #8]
 80095e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095ec:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80095f0:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80095f4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80095f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80095fc:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8009600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009602:	3301      	adds	r3, #1
 8009604:	677b      	str	r3, [r7, #116]	@ 0x74
 8009606:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800960a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800960e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009616:	db04      	blt.n	8009622 <mg_dtoa+0x3ca>
 8009618:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800961a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800961c:	4413      	add	r3, r2
 800961e:	2b27      	cmp	r3, #39	@ 0x27
 8009620:	ddb9      	ble.n	8009596 <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8009622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d118      	bne.n	800965a <mg_dtoa+0x402>
 8009628:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	673a      	str	r2, [r7, #112]	@ 0x70
 800962e:	3378      	adds	r3, #120	@ 0x78
 8009630:	443b      	add	r3, r7
 8009632:	2230      	movs	r2, #48	@ 0x30
 8009634:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8009638:	e00f      	b.n	800965a <mg_dtoa+0x402>
 800963a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009640:	3378      	adds	r3, #120	@ 0x78
 8009642:	443b      	add	r3, r7
 8009644:	2230      	movs	r2, #48	@ 0x30
 8009646:	f803 2c60 	strb.w	r2, [r3, #-96]
 800964a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800964e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009652:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009656:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800965a:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800965e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966a:	db04      	blt.n	8009676 <mg_dtoa+0x41e>
 800966c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800966e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009670:	4413      	add	r3, r2
 8009672:	2b27      	cmp	r3, #39	@ 0x27
 8009674:	dde1      	ble.n	800963a <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8009676:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800967a:	4413      	add	r3, r2
 800967c:	2b27      	cmp	r3, #39	@ 0x27
 800967e:	dc09      	bgt.n	8009694 <mg_dtoa+0x43c>
 8009680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	673a      	str	r2, [r7, #112]	@ 0x70
 8009686:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009688:	4413      	add	r3, r2
 800968a:	3378      	adds	r3, #120	@ 0x78
 800968c:	443b      	add	r3, r7
 800968e:	222e      	movs	r2, #46	@ 0x2e
 8009690:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	f083 0301 	eor.w	r3, r3, #1
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <mg_dtoa+0x456>
 80096a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dd03      	ble.n	80096ae <mg_dtoa+0x456>
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096aa:	4413      	add	r3, r2
 80096ac:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 80096ae:	2300      	movs	r3, #0
 80096b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80096b2:	a342      	add	r3, pc, #264	@ (adr r3, 80097bc <mg_dtoa+0x564>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80096bc:	e031      	b.n	8009722 <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 80096be:	ed97 5b02 	vldr	d5, [r7, #8]
 80096c2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80096c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80096ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80096ce:	ee17 3a90 	vmov	r3, s15
 80096d2:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 80096d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096da:	1c59      	adds	r1, r3, #1
 80096dc:	66f9      	str	r1, [r7, #108]	@ 0x6c
 80096de:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80096e0:	440b      	add	r3, r1
 80096e2:	3230      	adds	r2, #48	@ 0x30
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	3378      	adds	r3, #120	@ 0x78
 80096e8:	443b      	add	r3, r7
 80096ea:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 80096ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80096f8:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80096fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009700:	ed97 6b02 	vldr	d6, [r7, #8]
 8009704:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009708:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800970c:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8009710:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009714:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009718:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 800971c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800971e:	3301      	adds	r3, #1
 8009720:	677b      	str	r3, [r7, #116]	@ 0x74
 8009722:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009726:	4413      	add	r3, r2
 8009728:	2b27      	cmp	r3, #39	@ 0x27
 800972a:	dc07      	bgt.n	800973c <mg_dtoa+0x4e4>
 800972c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800972e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009730:	429a      	cmp	r2, r3
 8009732:	dbc4      	blt.n	80096be <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8009734:	e002      	b.n	800973c <mg_dtoa+0x4e4>
 8009736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009738:	3b01      	subs	r3, #1
 800973a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00c      	beq.n	800975c <mg_dtoa+0x504>
 8009742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd09      	ble.n	800975c <mg_dtoa+0x504>
 8009748:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800974a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800974c:	4413      	add	r3, r2
 800974e:	3b01      	subs	r3, #1
 8009750:	3378      	adds	r3, #120	@ 0x78
 8009752:	443b      	add	r3, r7
 8009754:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8009758:	2b30      	cmp	r3, #48	@ 0x30
 800975a:	d0ec      	beq.n	8009736 <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00f      	beq.n	8009782 <mg_dtoa+0x52a>
 8009762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd0c      	ble.n	8009782 <mg_dtoa+0x52a>
 8009768:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800976a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800976c:	4413      	add	r3, r2
 800976e:	3b01      	subs	r3, #1
 8009770:	3378      	adds	r3, #120	@ 0x78
 8009772:	443b      	add	r3, r7
 8009774:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8009778:	2b2e      	cmp	r3, #46	@ 0x2e
 800977a:	d102      	bne.n	8009782 <mg_dtoa+0x52a>
 800977c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800977e:	3b01      	subs	r3, #1
 8009780:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 8009782:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009786:	4413      	add	r3, r2
 8009788:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800978a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800978c:	2b27      	cmp	r3, #39	@ 0x27
 800978e:	dd01      	ble.n	8009794 <mg_dtoa+0x53c>
 8009790:	2327      	movs	r3, #39	@ 0x27
 8009792:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 8009794:	f107 0218 	add.w	r2, r7, #24
 8009798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800979a:	4413      	add	r3, r2
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80097a0:	f107 0318 	add.w	r3, r7, #24
 80097a4:	4a04      	ldr	r2, [pc, #16]	@ (80097b8 <mg_dtoa+0x560>)
 80097a6:	6939      	ldr	r1, [r7, #16]
 80097a8:	6978      	ldr	r0, [r7, #20]
 80097aa:	f009 fd1b 	bl	80131e4 <mg_snprintf>
 80097ae:	4603      	mov	r3, r0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3778      	adds	r7, #120	@ 0x78
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	0802a0e8 	.word	0x0802a0e8
 80097bc:	9999999a 	.word	0x9999999a
 80097c0:	3fb99999 	.word	0x3fb99999

080097c4 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80097c4:	b5b0      	push	{r4, r5, r7, lr}
 80097c6:	b08c      	sub	sp, #48	@ 0x30
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80097d0:	4b53      	ldr	r3, [pc, #332]	@ (8009920 <mg_lld+0x15c>)
 80097d2:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80097d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 80097dc:	2300      	movs	r3, #0
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80097e0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d012      	beq.n	800980e <mg_lld+0x4a>
 80097e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da0e      	bge.n	800980e <mg_lld+0x4a>
 80097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	222d      	movs	r2, #45	@ 0x2d
 80097fc:	701a      	strb	r2, [r3, #0]
 80097fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009802:	2100      	movs	r1, #0
 8009804:	4254      	negs	r4, r2
 8009806:	eb61 0503 	sbc.w	r5, r1, r3
 800980a:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 800980e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8009812:	2b00      	cmp	r3, #0
 8009814:	d021      	beq.n	800985a <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8009816:	2300      	movs	r3, #0
 8009818:	623b      	str	r3, [r7, #32]
 800981a:	e019      	b.n	8009850 <mg_lld+0x8c>
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	441a      	add	r2, r3
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	1c59      	adds	r1, r3, #1
 800982a:	6239      	str	r1, [r7, #32]
 800982c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800982e:	440b      	add	r3, r1
 8009830:	68f9      	ldr	r1, [r7, #12]
 8009832:	440b      	add	r3, r1
 8009834:	7812      	ldrb	r2, [r2, #0]
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	0902      	lsrs	r2, r0, #4
 8009846:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800984a:	090b      	lsrs	r3, r1, #4
 800984c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009854:	4313      	orrs	r3, r2
 8009856:	d1e1      	bne.n	800981c <mg_lld+0x58>
 8009858:	e025      	b.n	80098a6 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 800985a:	2300      	movs	r3, #0
 800985c:	623b      	str	r3, [r7, #32]
 800985e:	e01e      	b.n	800989e <mg_lld+0xda>
 8009860:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009864:	f04f 020a 	mov.w	r2, #10
 8009868:	f04f 0300 	mov.w	r3, #0
 800986c:	f7f6 ff74 	bl	8000758 <__aeabi_uldivmod>
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	441a      	add	r2, r3
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	1c59      	adds	r1, r3, #1
 8009878:	6239      	str	r1, [r7, #32]
 800987a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800987c:	440b      	add	r3, r1
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	440b      	add	r3, r1
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800988a:	f04f 020a 	mov.w	r2, #10
 800988e:	f04f 0300 	mov.w	r3, #0
 8009892:	f7f6 ff61 	bl	8000758 <__aeabi_uldivmod>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800989e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d1dc      	bne.n	8009860 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
 80098aa:	e022      	b.n	80098f2 <mg_lld+0x12e>
    char t = buf[s + i];
 80098ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	4413      	add	r3, r2
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80098ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	441a      	add	r2, r3
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	3b01      	subs	r3, #1
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	441a      	add	r2, r3
 80098ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	440b      	add	r3, r1
 80098d0:	68f9      	ldr	r1, [r7, #12]
 80098d2:	440b      	add	r3, r1
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	701a      	strb	r2, [r3, #0]
 80098d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	441a      	add	r2, r3
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	7dfa      	ldrb	r2, [r7, #23]
 80098ea:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	3301      	adds	r3, #1
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d3d7      	bcc.n	80098ac <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80098fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009900:	4313      	orrs	r3, r2
 8009902:	d106      	bne.n	8009912 <mg_lld+0x14e>
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	623a      	str	r2, [r7, #32]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	2230      	movs	r2, #48	@ 0x30
 8009910:	701a      	strb	r2, [r3, #0]
  return n + s;
 8009912:	6a3a      	ldr	r2, [r7, #32]
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	4413      	add	r3, r2
}
 8009918:	4618      	mov	r0, r3
 800991a:	3730      	adds	r7, #48	@ 0x30
 800991c:	46bd      	mov	sp, r7
 800991e:	bdb0      	pop	{r4, r5, r7, pc}
 8009920:	0802a104 	.word	0x0802a104

08009924 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8009936:	e009      	b.n	800994c <scpy+0x28>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	617a      	str	r2, [r7, #20]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	4413      	add	r3, r2
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d205      	bcs.n	8009960 <scpy+0x3c>
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1eb      	bne.n	8009938 <scpy+0x14>
  return i;
 8009960:	697b      	ldr	r3, [r7, #20]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800996a:	b40c      	push	{r2, r3}
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800997a:	f107 031c 	add.w	r3, r7, #28
 800997e:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f809 	bl	80099a0 <mg_vxprintf>
 800998e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8009990:	68fb      	ldr	r3, [r7, #12]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800999c:	b002      	add	sp, #8
 800999e:	4770      	bx	lr

080099a0 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80099a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80099a4:	b0a6      	sub	sp, #152	@ 0x98
 80099a6:	af02      	add	r7, sp, #8
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099b6:	2300      	movs	r3, #0
 80099b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80099bc:	e383      	b.n	800a0c6 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099c4:	4413      	add	r3, r2
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b25      	cmp	r3, #37	@ 0x25
 80099ca:	f040 8369 	bne.w	800a0a0 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80099ce:	2300      	movs	r3, #0
 80099d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099d2:	2300      	movs	r3, #0
 80099d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099d6:	2300      	movs	r3, #0
 80099d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80099da:	f04f 33ff 	mov.w	r3, #4294967295
 80099de:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80099e0:	2320      	movs	r3, #32
 80099e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80099e6:	2300      	movs	r3, #0
 80099e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80099ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099f0:	3301      	adds	r3, #1
 80099f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099fc:	4413      	add	r3, r2
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8009a04:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a08:	2b23      	cmp	r3, #35	@ 0x23
 8009a0a:	d10e      	bne.n	8009a2a <mg_vxprintf+0x8a>
 8009a0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a0e:	3301      	adds	r3, #1
 8009a10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a16:	3301      	adds	r3, #1
 8009a18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a22:	4413      	add	r3, r2
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8009a2a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009a30:	d110      	bne.n	8009a54 <mg_vxprintf+0xb4>
 8009a32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009a36:	3301      	adds	r3, #1
 8009a38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a40:	3301      	adds	r3, #1
 8009a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a4c:	4413      	add	r3, r2
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8009a54:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a58:	2b30      	cmp	r3, #48	@ 0x30
 8009a5a:	d127      	bne.n	8009aac <mg_vxprintf+0x10c>
 8009a5c:	2330      	movs	r3, #48	@ 0x30
 8009a5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a66:	3301      	adds	r3, #1
 8009a68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a72:	4413      	add	r3, r2
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8009a7a:	e017      	b.n	8009aac <mg_vxprintf+0x10c>
 8009a7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a88:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a8e:	4413      	add	r3, r2
 8009a90:	3b30      	subs	r3, #48	@ 0x30
 8009a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a98:	3301      	adds	r3, #1
 8009a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aa4:	4413      	add	r3, r2
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009aac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff fae5 	bl	8009080 <is_digit>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1df      	bne.n	8009a7c <mg_vxprintf+0xdc>
      if (c == '.') {
 8009abc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ac2:	d153      	bne.n	8009b6c <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8009ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ad4:	4413      	add	r3, r2
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8009adc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae2:	d113      	bne.n	8009b0c <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	1d19      	adds	r1, r3, #4
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	6011      	str	r1, [r2, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8009af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af6:	3301      	adds	r3, #1
 8009af8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b02:	4413      	add	r3, r2
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009b0a:	e02f      	b.n	8009b6c <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8009b10:	e017      	b.n	8009b42 <mg_vxprintf+0x1a2>
 8009b12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b1e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b24:	4413      	add	r3, r2
 8009b26:	3b30      	subs	r3, #48	@ 0x30
 8009b28:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b2e:	3301      	adds	r3, #1
 8009b30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b3a:	4413      	add	r3, r2
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009b42:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fa9a 	bl	8009080 <is_digit>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1df      	bne.n	8009b12 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8009b52:	e00b      	b.n	8009b6c <mg_vxprintf+0x1cc>
 8009b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b58:	3301      	adds	r3, #1
 8009b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b64:	4413      	add	r3, r2
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009b6c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b70:	2b68      	cmp	r3, #104	@ 0x68
 8009b72:	d0ef      	beq.n	8009b54 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8009b74:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b78:	2b6c      	cmp	r3, #108	@ 0x6c
 8009b7a:	d121      	bne.n	8009bc0 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8009b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b7e:	3301      	adds	r3, #1
 8009b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b86:	3301      	adds	r3, #1
 8009b88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b92:	4413      	add	r3, r2
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8009b9a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009b9e:	2b6c      	cmp	r3, #108	@ 0x6c
 8009ba0:	d10e      	bne.n	8009bc0 <mg_vxprintf+0x220>
 8009ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bac:	3301      	adds	r3, #1
 8009bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bb8:	4413      	add	r3, r2
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8009bc0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bc4:	2b70      	cmp	r3, #112	@ 0x70
 8009bc6:	d103      	bne.n	8009bd0 <mg_vxprintf+0x230>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bcc:	2301      	movs	r3, #1
 8009bce:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8009bd0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bd4:	2b64      	cmp	r3, #100	@ 0x64
 8009bd6:	d018      	beq.n	8009c0a <mg_vxprintf+0x26a>
 8009bd8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bdc:	2b75      	cmp	r3, #117	@ 0x75
 8009bde:	d014      	beq.n	8009c0a <mg_vxprintf+0x26a>
 8009be0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009be4:	2b78      	cmp	r3, #120	@ 0x78
 8009be6:	d010      	beq.n	8009c0a <mg_vxprintf+0x26a>
 8009be8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bec:	2b58      	cmp	r3, #88	@ 0x58
 8009bee:	d00c      	beq.n	8009c0a <mg_vxprintf+0x26a>
 8009bf0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bf4:	2b70      	cmp	r3, #112	@ 0x70
 8009bf6:	d008      	beq.n	8009c0a <mg_vxprintf+0x26a>
 8009bf8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009bfc:	2b67      	cmp	r3, #103	@ 0x67
 8009bfe:	d004      	beq.n	8009c0a <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8009c00:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c04:	2b66      	cmp	r3, #102	@ 0x66
 8009c06:	f040 816c 	bne.w	8009ee2 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8009c0a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c0e:	2b64      	cmp	r3, #100	@ 0x64
 8009c10:	bf0c      	ite	eq
 8009c12:	2301      	moveq	r3, #1
 8009c14:	2300      	movne	r3, #0
 8009c16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009c1a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c1e:	2b78      	cmp	r3, #120	@ 0x78
 8009c20:	d007      	beq.n	8009c32 <mg_vxprintf+0x292>
 8009c22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c26:	2b58      	cmp	r3, #88	@ 0x58
 8009c28:	d003      	beq.n	8009c32 <mg_vxprintf+0x292>
 8009c2a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c2e:	2b70      	cmp	r3, #112	@ 0x70
 8009c30:	d101      	bne.n	8009c36 <mg_vxprintf+0x296>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <mg_vxprintf+0x298>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8009c3c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8009c48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <mg_vxprintf+0x2b2>
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e000      	b.n	8009c54 <mg_vxprintf+0x2b4>
 8009c52:	2300      	movs	r3, #0
 8009c54:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8009c56:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c5a:	2b67      	cmp	r3, #103	@ 0x67
 8009c5c:	d003      	beq.n	8009c66 <mg_vxprintf+0x2c6>
 8009c5e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c62:	2b66      	cmp	r3, #102	@ 0x66
 8009c64:	d124      	bne.n	8009cb0 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3307      	adds	r3, #7
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	f103 0108 	add.w	r1, r3, #8
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	6011      	str	r1, [r2, #0]
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8009c80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d101      	bne.n	8009c8c <mg_vxprintf+0x2ec>
 8009c88:	2306      	movs	r3, #6
 8009c8a:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8009c8c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009c8e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009c92:	2b67      	cmp	r3, #103	@ 0x67
 8009c94:	bf0c      	ite	eq
 8009c96:	2301      	moveq	r3, #1
 8009c98:	2300      	movne	r3, #0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f107 0014 	add.w	r0, r7, #20
 8009ca0:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8009ca4:	2128      	movs	r1, #40	@ 0x28
 8009ca6:	f7ff fad7 	bl	8009258 <mg_dtoa>
 8009caa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8009cae:	e069      	b.n	8009d84 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8009cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d11c      	bne.n	8009cf0 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3307      	adds	r3, #7
 8009cbc:	f023 0307 	bic.w	r3, r3, #7
 8009cc0:	f103 0108 	add.w	r1, r3, #8
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	6011      	str	r1, [r2, #0]
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8009cd0:	f107 0114 	add.w	r1, r7, #20
 8009cd4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	f7ff fd6d 	bl	80097c4 <mg_lld>
 8009cea:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009cee:	e049      	b.n	8009d84 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8009cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d123      	bne.n	8009d3e <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	1d19      	adds	r1, r3, #4
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	6011      	str	r1, [r2, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8009d04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <mg_vxprintf+0x376>
 8009d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d0e:	17da      	asrs	r2, r3, #31
 8009d10:	461c      	mov	r4, r3
 8009d12:	4615      	mov	r5, r2
 8009d14:	e003      	b.n	8009d1e <mg_vxprintf+0x37e>
 8009d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d18:	2200      	movs	r2, #0
 8009d1a:	461c      	mov	r4, r3
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	f107 0114 	add.w	r1, r7, #20
 8009d22:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	4622      	mov	r2, r4
 8009d30:	462b      	mov	r3, r5
 8009d32:	4608      	mov	r0, r1
 8009d34:	f7ff fd46 	bl	80097c4 <mg_lld>
 8009d38:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009d3c:	e022      	b.n	8009d84 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	1d19      	adds	r1, r3, #4
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	6011      	str	r1, [r2, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8009d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <mg_vxprintf+0x3be>
 8009d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d56:	17da      	asrs	r2, r3, #31
 8009d58:	4698      	mov	r8, r3
 8009d5a:	4691      	mov	r9, r2
 8009d5c:	e003      	b.n	8009d66 <mg_vxprintf+0x3c6>
 8009d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d60:	2200      	movs	r2, #0
 8009d62:	4698      	mov	r8, r3
 8009d64:	4691      	mov	r9, r2
 8009d66:	f107 0114 	add.w	r1, r7, #20
 8009d6a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	4642      	mov	r2, r8
 8009d78:	464b      	mov	r3, r9
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	f7ff fd22 	bl	80097c4 <mg_lld>
 8009d80:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d8a:	e007      	b.n	8009d9c <mg_vxprintf+0x3fc>
 8009d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d96:	3301      	adds	r3, #1
 8009d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d202      	bcs.n	8009dac <mg_vxprintf+0x40c>
 8009da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1ef      	bne.n	8009d8c <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009db2:	e011      	b.n	8009dd8 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8009db4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009db8:	2301      	movs	r3, #1
 8009dba:	68b9      	ldr	r1, [r7, #8]
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f7ff fdb1 	bl	8009924 <scpy>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dc8:	4413      	add	r3, r2
 8009dca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8009dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d110      	bne.n	8009e02 <mg_vxprintf+0x462>
 8009de0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10c      	bne.n	8009e02 <mg_vxprintf+0x462>
 8009de8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d207      	bcs.n	8009e02 <mg_vxprintf+0x462>
 8009df2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009dfa:	4413      	add	r3, r2
 8009dfc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d8d8      	bhi.n	8009db4 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8009e02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e04:	4ab7      	ldr	r2, [pc, #732]	@ (800a0e4 <mg_vxprintf+0x744>)
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff fd8b 	bl	8009924 <scpy>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e14:	4413      	add	r3, r2
 8009e16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e20:	e011      	b.n	8009e46 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8009e22:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009e26:	2301      	movs	r3, #1
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f7ff fd7a 	bl	8009924 <scpy>
 8009e30:	4602      	mov	r2, r0
 8009e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e36:	4413      	add	r3, r2
 8009e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8009e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e40:	3301      	adds	r3, #1
 8009e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e4a:	2b30      	cmp	r3, #48	@ 0x30
 8009e4c:	d10c      	bne.n	8009e68 <mg_vxprintf+0x4c8>
 8009e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d207      	bcs.n	8009e68 <mg_vxprintf+0x4c8>
 8009e58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e60:	4413      	add	r3, r2
 8009e62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d8dc      	bhi.n	8009e22 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8009e68:	f107 0214 	add.w	r2, r7, #20
 8009e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e70:	68b9      	ldr	r1, [r7, #8]
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff fd56 	bl	8009924 <scpy>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e7e:	4413      	add	r3, r2
 8009e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8009e84:	2300      	movs	r3, #0
 8009e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e8a:	e011      	b.n	8009eb0 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8009e8c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009e90:	2301      	movs	r3, #1
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7ff fd45 	bl	8009924 <scpy>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8009ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eaa:	3301      	adds	r3, #1
 8009eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	f040 80ea 	bne.w	800a08e <mg_vxprintf+0x6ee>
 8009eba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 80e5 	beq.w	800a08e <mg_vxprintf+0x6ee>
 8009ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	f080 80df 	bcs.w	800a08e <mg_vxprintf+0x6ee>
 8009ed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ed8:	4413      	add	r3, r2
 8009eda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d8d5      	bhi.n	8009e8c <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8009ee0:	e0d5      	b.n	800a08e <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8009ee2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ee6:	2b6d      	cmp	r3, #109	@ 0x6d
 8009ee8:	d003      	beq.n	8009ef2 <mg_vxprintf+0x552>
 8009eea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009eee:	2b4d      	cmp	r3, #77	@ 0x4d
 8009ef0:	d128      	bne.n	8009f44 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	1d19      	adds	r1, r3, #4
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	6011      	str	r1, [r2, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8009f00:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009f04:	2b6d      	cmp	r3, #109	@ 0x6d
 8009f06:	d103      	bne.n	8009f10 <mg_vxprintf+0x570>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	2022      	movs	r0, #34	@ 0x22
 8009f0e:	4798      	blx	r3
        n += f(out, param, ap);
 8009f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	4798      	blx	r3
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f20:	4413      	add	r3, r2
 8009f22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8009f26:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009f2a:	2b6d      	cmp	r3, #109	@ 0x6d
 8009f2c:	f040 80b1 	bne.w	800a092 <mg_vxprintf+0x6f2>
 8009f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f34:	3302      	adds	r3, #2
 8009f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	2022      	movs	r0, #34	@ 0x22
 8009f40:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8009f42:	e0a6      	b.n	800a092 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8009f44:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009f48:	2b63      	cmp	r3, #99	@ 0x63
 8009f4a:	d112      	bne.n	8009f72 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	1d19      	adds	r1, r3, #4
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8009f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	4610      	mov	r0, r2
 8009f64:	4798      	blx	r3
        n++;
 8009f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f70:	e090      	b.n	800a094 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8009f72:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009f76:	2b73      	cmp	r3, #115	@ 0x73
 8009f78:	d16b      	bne.n	800a052 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	1d19      	adds	r1, r3, #4
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	6011      	str	r1, [r2, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8009f88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8e:	d109      	bne.n	8009fa4 <mg_vxprintf+0x604>
 8009f90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d004      	beq.n	8009fa0 <mg_vxprintf+0x600>
 8009f96:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8009f98:	f7f6 fa1a 	bl	80003d0 <strlen>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	e000      	b.n	8009fa2 <mg_vxprintf+0x602>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009faa:	e011      	b.n	8009fd0 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8009fac:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f7ff fcb5 	bl	8009924 <scpy>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8009fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fca:	3301      	adds	r3, #1
 8009fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fd0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <mg_vxprintf+0x64e>
 8009fd8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d206      	bcs.n	8009fee <mg_vxprintf+0x64e>
 8009fe0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009fe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fe6:	4413      	add	r3, r2
 8009fe8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d8de      	bhi.n	8009fac <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8009fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ff0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7ff fc95 	bl	8009924 <scpy>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a000:	4413      	add	r3, r2
 800a002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800a006:	2300      	movs	r3, #0
 800a008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a00c:	e011      	b.n	800a032 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 800a00e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800a012:	2301      	movs	r3, #1
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff fc84 	bl	8009924 <scpy>
 800a01c:	4602      	mov	r2, r0
 800a01e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a022:	4413      	add	r3, r2
 800a024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800a028:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a02c:	3301      	adds	r3, #1
 800a02e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a032:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a036:	2b00      	cmp	r3, #0
 800a038:	d02c      	beq.n	800a094 <mg_vxprintf+0x6f4>
 800a03a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a03c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a03e:	429a      	cmp	r2, r3
 800a040:	d228      	bcs.n	800a094 <mg_vxprintf+0x6f4>
 800a042:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a046:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a048:	4413      	add	r3, r2
 800a04a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d8de      	bhi.n	800a00e <mg_vxprintf+0x66e>
 800a050:	e020      	b.n	800a094 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800a052:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a056:	2b25      	cmp	r3, #37	@ 0x25
 800a058:	d109      	bne.n	800a06e <mg_vxprintf+0x6ce>
        out('%', param);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	2025      	movs	r0, #37	@ 0x25
 800a060:	4798      	blx	r3
        n++;
 800a062:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a066:	3301      	adds	r3, #1
 800a068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a06c:	e012      	b.n	800a094 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	2025      	movs	r0, #37	@ 0x25
 800a074:	4798      	blx	r3
        out(c, param);
 800a076:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	4610      	mov	r0, r2
 800a080:	4798      	blx	r3
        n += 2;
 800a082:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a086:	3302      	adds	r3, #2
 800a088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a08c:	e002      	b.n	800a094 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 800a08e:	bf00      	nop
 800a090:	e000      	b.n	800a094 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800a092:	bf00      	nop
      }
      i++;
 800a094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a098:	3301      	adds	r3, #1
 800a09a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a09e:	e012      	b.n	800a0c6 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0a6:	4413      	add	r3, r2
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	4798      	blx	r3
 800a0b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0cc:	4413      	add	r3, r2
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f ac74 	bne.w	80099be <mg_vxprintf+0x1e>
    }
  }
  return n;
 800a0d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3790      	adds	r7, #144	@ 0x90
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a0e4:	0802a118 	.word	0x0802a118

0800a0e8 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800a0f4:	2108      	movs	r1, #8
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	f01b fc9c 	bl	8025a34 <calloc>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d013      	beq.n	800a12e <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	68b8      	ldr	r0, [r7, #8]
 800a10e:	4798      	blx	r3
 800a110:	4602      	mov	r2, r0
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d104      	bne.n	800a12e <mg_fs_open+0x46>
      free(fd);
 800a124:	6978      	ldr	r0, [r7, #20]
 800a126:	f01b fca9 	bl	8025a7c <free>
      fd = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 800a12e:	697b      	ldr	r3, [r7, #20]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
    free(fd);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f01b fc91 	bl	8025a7c <free>
  }
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7f6 f92e 	bl	80003d0 <strlen>
 800a174:	4602      	mov	r2, r0
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	4293      	cmp	r3, r2
 800a17a:	d219      	bcs.n	800a1b0 <is_dir_prefix+0x4e>
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f01d fb1a 	bl	80277ba <strncmp>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d111      	bne.n	800a1b0 <is_dir_prefix+0x4e>
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00c      	beq.n	800a1ac <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4413      	add	r3, r2
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b2f      	cmp	r3, #47	@ 0x2f
 800a19c:	d006      	beq.n	800a1ac <is_dir_prefix+0x4a>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800a1aa:	d101      	bne.n	800a1b0 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <is_dir_prefix+0x50>
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b088      	sub	sp, #32
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7f6 f902 	bl	80003d0 <strlen>
 800a1cc:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f019 f97e 	bl	80234d4 <mg_unpack>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <packed_stat+0x28>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e017      	b.n	800a212 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	61fb      	str	r3, [r7, #28]
 800a1e6:	e00c      	b.n	800a202 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	69b9      	ldr	r1, [r7, #24]
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff ffb8 	bl	800a162 <is_dir_prefix>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <packed_stat+0x42>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	e00a      	b.n	800a212 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	3301      	adds	r3, #1
 800a200:	61fb      	str	r3, [r7, #28]
 800a202:	69f8      	ldr	r0, [r7, #28]
 800a204:	f019 f952 	bl	80234ac <mg_unlist>
 800a208:	6178      	str	r0, [r7, #20]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1eb      	bne.n	800a1e8 <packed_stat+0x2e>
  }
  return 0;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3720      	adds	r7, #32
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b0be      	sub	sp, #248	@ 0xf8
 800a220:	af02      	add	r7, sp, #8
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7f6 f8d1 	bl	80003d0 <strlen>
 800a22e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 800a232:	2300      	movs	r3, #0
 800a234:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800a236:	2300      	movs	r3, #0
 800a238:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a23c:	e05a      	b.n	800a2f4 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 800a23e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a242:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff ff8b 	bl	800a162 <is_dir_prefix>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d048      	beq.n	800a2e4 <packed_list+0xc8>
    begin = &path[n + 1];
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a256:	3301      	adds	r3, #1
 800a258:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a25c:	4413      	add	r3, r2
 800a25e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 800a262:	212f      	movs	r1, #47	@ 0x2f
 800a264:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800a268:	f01d fa9a 	bl	80277a0 <strchr>
 800a26c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 800a270:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <packed_list+0x70>
 800a278:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800a27c:	f7f6 f8a8 	bl	80003d0 <strlen>
 800a280:	4602      	mov	r2, r0
 800a282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a286:	4413      	add	r3, r2
 800a288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 800a28c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800a290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a294:	1ad2      	subs	r2, r2, r3
 800a296:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800a29a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a314 <packed_list+0xf8>)
 800a2a4:	2164      	movs	r1, #100	@ 0x64
 800a2a6:	f008 ff9d 	bl	80131e4 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 800a2b0:	f107 0214 	add.w	r2, r7, #20
 800a2b4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7f6 f828 	bl	8000310 <strcmp>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d010      	beq.n	800a2e8 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800a2c6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800a2d2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800a2d6:	f107 0314 	add.w	r3, r7, #20
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f01d fb88 	bl	80279f2 <strcpy>
 800a2e2:	e002      	b.n	800a2ea <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800a2e4:	bf00      	nop
 800a2e6:	e000      	b.n	800a2ea <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 800a2e8:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800a2ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a2f4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800a2f8:	f019 f8d8 	bl	80234ac <mg_unlist>
 800a2fc:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800a300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d19a      	bne.n	800a23e <packed_list+0x22>
  }
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	37f0      	adds	r7, #240	@ 0xf0
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	0802a0fc 	.word	0x0802a0fc

0800a318 <packed_open>:

static void *packed_open(const char *path, int flags) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 800a326:	f107 030c 	add.w	r3, r7, #12
 800a32a:	2200      	movs	r2, #0
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f019 f8d0 	bl	80234d4 <mg_unpack>
 800a334:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <packed_open+0x2c>
 800a340:	2300      	movs	r3, #0
 800a342:	e016      	b.n	800a372 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <packed_open+0x3a>
 800a34e:	2300      	movs	r3, #0
 800a350:	e00f      	b.n	800a372 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 800a352:	210c      	movs	r1, #12
 800a354:	2001      	movs	r0, #1
 800a356:	f01b fb6d 	bl	8025a34 <calloc>
 800a35a:	4603      	mov	r3, r0
 800a35c:	613b      	str	r3, [r7, #16]
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <packed_open+0x58>
    fp->size = size;
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	605a      	str	r2, [r3, #4]
    fp->data = data;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 800a370:	693b      	ldr	r3, [r7, #16]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <packed_close>:

static void packed_close(void *fp) {
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <packed_close+0x14>
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f01b fb77 	bl	8025a7c <free>
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800a396:	b580      	push	{r7, lr}
 800a398:	b086      	sub	sp, #24
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d905      	bls.n	800a3c2 <packed_read+0x2c>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	68b8      	ldr	r0, [r7, #8]
 800a3d2:	f01d fb16 	bl	8027a02 <memcpy>
  fp->pos += len;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	441a      	add	r2, r3
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	609a      	str	r2, [r3, #8]
  return len;
 800a3e2:	687b      	ldr	r3, [r7, #4]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800a406:	b480      	push	{r7}
 800a408:	b085      	sub	sp, #20
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	689a      	ldr	r2, [r3, #8]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	429a      	cmp	r2, r3
 800a424:	d903      	bls.n	800a42e <packed_seek+0x28>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	609a      	str	r2, [r3, #8]
  return fp->pos;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	689b      	ldr	r3, [r3, #8]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <packed_remove>:

static bool packed_remove(const char *path) {
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <p_open>:
static void *p_open(const char *path, int flags) {
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <p_close>:
static void p_close(void *fp) {
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 800a51e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <p_rename>:
static bool p_rename(const char *from, const char *to) {
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <p_remove>:
static bool p_remove(const char *path) {
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <p_mkdir>:
static bool p_mkdir(const char *path) {
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800a572:	b480      	push	{r7}
 800a574:	b089      	sub	sp, #36	@ 0x24
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d02d      	beq.n	800a5e4 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	60fa      	str	r2, [r7, #12]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	60ba      	str	r2, [r7, #8]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	2b40      	cmp	r3, #64	@ 0x40
 800a5a0:	dd05      	ble.n	800a5ae <mg_ncasecmp+0x3c>
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b5a      	cmp	r3, #90	@ 0x5a
 800a5a6:	dc02      	bgt.n	800a5ae <mg_ncasecmp+0x3c>
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	3320      	adds	r3, #32
 800a5ac:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b40      	cmp	r3, #64	@ 0x40
 800a5b2:	dd05      	ble.n	800a5c0 <mg_ncasecmp+0x4e>
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b5a      	cmp	r3, #90	@ 0x5a
 800a5b8:	dc02      	bgt.n	800a5c0 <mg_ncasecmp+0x4e>
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	3320      	adds	r3, #32
 800a5be:	617b      	str	r3, [r7, #20]
      diff = c - d;
 800a5c0:	69ba      	ldr	r2, [r7, #24]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10a      	bne.n	800a5e4 <mg_ncasecmp+0x72>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <mg_ncasecmp+0x72>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	607b      	str	r3, [r7, #4]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1d1      	bne.n	800a588 <mg_ncasecmp+0x16>
  return diff;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3724      	adds	r7, #36	@ 0x24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 800a5f4:	b480      	push	{r7}
 800a5f6:	b08b      	sub	sp, #44	@ 0x2c
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	f107 0308 	add.w	r3, r7, #8
 800a5fe:	e883 0003 	stmia.w	r3, {r0, r1}
 800a602:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	627b      	str	r3, [r7, #36]	@ 0x24
 800a608:	f04f 33ff 	mov.w	r3, #4294967295
 800a60c:	61bb      	str	r3, [r7, #24]
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	4a42      	ldr	r2, [pc, #264]	@ (800a71c <mg_to_size_t+0x128>)
 800a612:	fba2 2303 	umull	r2, r3, r2, r3
 800a616:	08db      	lsrs	r3, r3, #3
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	2300      	movs	r3, #0
 800a61c:	623b      	str	r3, [r7, #32]
 800a61e:	2300      	movs	r3, #0
 800a620:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800a622:	e002      	b.n	800a62a <mg_to_size_t+0x36>
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	3301      	adds	r3, #1
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a62e:	429a      	cmp	r2, r3
 800a630:	d20b      	bcs.n	800a64a <mg_to_size_t+0x56>
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	4413      	add	r3, r2
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	d0f2      	beq.n	800a624 <mg_to_size_t+0x30>
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a642:	4413      	add	r3, r2
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b09      	cmp	r3, #9
 800a648:	d0ec      	beq.n	800a624 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a64e:	429a      	cmp	r2, r3
 800a650:	d22b      	bcs.n	800a6aa <mg_to_size_t+0xb6>
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	4413      	add	r3, r2
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a65c:	d125      	bne.n	800a6aa <mg_to_size_t+0xb6>
 800a65e:	2300      	movs	r3, #0
 800a660:	e056      	b.n	800a710 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	4413      	add	r3, r2
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	3b30      	subs	r3, #48	@ 0x30
 800a66c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800a66e:	6a3a      	ldr	r2, [r7, #32]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	429a      	cmp	r2, r3
 800a674:	d901      	bls.n	800a67a <mg_to_size_t+0x86>
 800a676:	2300      	movs	r3, #0
 800a678:	e04a      	b.n	800a710 <mg_to_size_t+0x11c>
    result *= 10;
 800a67a:	6a3a      	ldr	r2, [r7, #32]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	6a3a      	ldr	r2, [r7, #32]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d901      	bls.n	800a696 <mg_to_size_t+0xa2>
 800a692:	2300      	movs	r3, #0
 800a694:	e03c      	b.n	800a710 <mg_to_size_t+0x11c>
    result += digit;
 800a696:	6a3a      	ldr	r2, [r7, #32]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4413      	add	r3, r2
 800a69c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d20f      	bcs.n	800a6d2 <mg_to_size_t+0xde>
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b6:	4413      	add	r3, r2
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800a6bc:	d909      	bls.n	800a6d2 <mg_to_size_t+0xde>
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	4413      	add	r3, r2
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	2b39      	cmp	r3, #57	@ 0x39
 800a6c8:	d9cb      	bls.n	800a662 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800a6ca:	e002      	b.n	800a6d2 <mg_to_size_t+0xde>
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d20b      	bcs.n	800a6f2 <mg_to_size_t+0xfe>
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	4413      	add	r3, r2
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b20      	cmp	r3, #32
 800a6e4:	d0f2      	beq.n	800a6cc <mg_to_size_t+0xd8>
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ea:	4413      	add	r3, r2
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b09      	cmp	r3, #9
 800a6f0:	d0ec      	beq.n	800a6cc <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <mg_to_size_t+0x108>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e009      	b.n	800a710 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a700:	429a      	cmp	r2, r3
 800a702:	d001      	beq.n	800a708 <mg_to_size_t+0x114>
 800a704:	2300      	movs	r3, #0
 800a706:	e003      	b.n	800a710 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a3a      	ldr	r2, [r7, #32]
 800a70c:	601a      	str	r2, [r3, #0]
  return true;
 800a70e:	2301      	movs	r3, #1
}
 800a710:	4618      	mov	r0, r3
 800a712:	372c      	adds	r7, #44	@ 0x2c
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	cccccccd 	.word	0xcccccccd

0800a720 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 800a720:	b082      	sub	sp, #8
 800a722:	b580      	push	{r7, lr}
 800a724:	b08e      	sub	sp, #56	@ 0x38
 800a726:	af02      	add	r7, sp, #8
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	1d38      	adds	r0, r7, #4
 800a72c:	e880 0006 	stmia.w	r0, {r1, r2}
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 800a732:	f107 0310 	add.w	r3, r7, #16
 800a736:	2200      	movs	r2, #0
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f00c f933 	bl	80169a6 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 800a740:	e023      	b.n	800a78a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800a742:	f107 0318 	add.w	r3, r7, #24
 800a746:	f107 0220 	add.w	r2, r7, #32
 800a74a:	213d      	movs	r1, #61	@ 0x3d
 800a74c:	9100      	str	r1, [sp, #0]
 800a74e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a752:	c903      	ldmia	r1, {r0, r1}
 800a754:	f00c fb08 	bl	8016d68 <mg_span>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d015      	beq.n	800a78a <mg_http_var+0x6a>
 800a75e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a762:	429a      	cmp	r2, r3
 800a764:	d111      	bne.n	800a78a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	6a39      	ldr	r1, [r7, #32]
 800a76a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff ff00 	bl	800a572 <mg_ncasecmp>
 800a772:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800a774:	2b00      	cmp	r3, #0
 800a776:	d108      	bne.n	800a78a <mg_http_var+0x6a>
      result = v;
 800a778:	f107 0310 	add.w	r3, r7, #16
 800a77c:	f107 0218 	add.w	r2, r7, #24
 800a780:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a784:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 800a788:	e00b      	b.n	800a7a2 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a790:	2126      	movs	r1, #38	@ 0x26
 800a792:	9100      	str	r1, [sp, #0]
 800a794:	1d39      	adds	r1, r7, #4
 800a796:	c903      	ldmia	r1, {r0, r1}
 800a798:	f00c fae6 	bl	8016d68 <mg_span>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1cf      	bne.n	800a742 <mg_http_var+0x22>
    }
  }
  return result;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	f107 0310 	add.w	r3, r7, #16
 800a7aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a7ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	3730      	adds	r7, #48	@ 0x30
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7bc:	b002      	add	sp, #8
 800a7be:	4770      	bx	lr

0800a7c0 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08c      	sub	sp, #48	@ 0x30
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d005      	beq.n	800a7e0 <mg_http_get_var+0x20>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <mg_http_get_var+0x2c>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d103      	bne.n	800a7f4 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 800a7ec:	f06f 0301 	mvn.w	r3, #1
 800a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7f2:	e033      	b.n	800a85c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d006      	beq.n	800a80a <mg_http_get_var+0x4a>
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <mg_http_get_var+0x4a>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d103      	bne.n	800a812 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 800a80a:	f04f 33ff 	mov.w	r3, #4294967295
 800a80e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a810:	e024      	b.n	800a85c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 800a812:	f107 031c 	add.w	r3, r7, #28
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f00c f8a7 	bl	801696c <mg_str_s>
 800a81e:	f107 0014 	add.w	r0, r7, #20
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	ca06      	ldmia	r2, {r1, r2}
 800a82c:	f7ff ff78 	bl	800a720 <mg_http_var>
    if (v.buf == NULL) {
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d103      	bne.n	800a83e <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 800a836:	f06f 0303 	mvn.w	r3, #3
 800a83a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a83c:	e00e      	b.n	800a85c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	69b9      	ldr	r1, [r7, #24]
 800a842:	2301      	movs	r3, #1
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f000 f82e 	bl	800a8aa <mg_url_decode>
 800a84e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 800a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	da02      	bge.n	800a85c <mg_http_get_var+0x9c>
 800a856:	f06f 0302 	mvn.w	r3, #2
 800a85a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3728      	adds	r7, #40	@ 0x28
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <isx>:

static bool isx(int c) {
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b2f      	cmp	r3, #47	@ 0x2f
 800a872:	dd02      	ble.n	800a87a <isx+0x14>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b39      	cmp	r3, #57	@ 0x39
 800a878:	dd0b      	ble.n	800a892 <isx+0x2c>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b60      	cmp	r3, #96	@ 0x60
 800a87e:	dd02      	ble.n	800a886 <isx+0x20>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b66      	cmp	r3, #102	@ 0x66
 800a884:	dd05      	ble.n	800a892 <isx+0x2c>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b40      	cmp	r3, #64	@ 0x40
 800a88a:	dd04      	ble.n	800a896 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b46      	cmp	r3, #70	@ 0x46
 800a890:	dc01      	bgt.n	800a896 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <isx+0x32>
 800a896:	2300      	movs	r3, #0
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	b2db      	uxtb	r3, r3
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b08a      	sub	sp, #40	@ 0x28
 800a8ae:	af02      	add	r7, sp, #8
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
 800a8b6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61bb      	str	r3, [r7, #24]
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	e059      	b.n	800a976 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b25      	cmp	r3, #37	@ 0x25
 800a8cc:	d136      	bne.n	800a93c <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	3302      	adds	r3, #2
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d92e      	bls.n	800a936 <mg_url_decode+0x8c>
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff ffbf 	bl	800a866 <isx>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d023      	beq.n	800a936 <mg_url_decode+0x8c>
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff ffb4 	bl	800a866 <isx>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d018      	beq.n	800a936 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	3301      	adds	r3, #1
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	18d1      	adds	r1, r2, r3
 800a90c:	f107 0310 	add.w	r3, r7, #16
 800a910:	2202      	movs	r2, #2
 800a912:	4618      	mov	r0, r3
 800a914:	f00c f847 	bl	80169a6 <mg_str_n>
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	4413      	add	r3, r2
 800a91e:	2201      	movs	r2, #1
 800a920:	9200      	str	r2, [sp, #0]
 800a922:	2210      	movs	r2, #16
 800a924:	f107 0110 	add.w	r1, r7, #16
 800a928:	c903      	ldmia	r1, {r0, r1}
 800a92a:	f00c fa7a 	bl	8016e22 <mg_str_to_num>
        i += 2;
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	3302      	adds	r3, #2
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	e019      	b.n	800a96a <mg_url_decode+0xc0>
      } else {
        return -1;
 800a936:	f04f 33ff 	mov.w	r3, #4294967295
 800a93a:	e03a      	b.n	800a9b2 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00b      	beq.n	800a95a <mg_url_decode+0xb0>
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	4413      	add	r3, r2
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	2b2b      	cmp	r3, #43	@ 0x2b
 800a94c:	d105      	bne.n	800a95a <mg_url_decode+0xb0>
      dst[j] = ' ';
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	4413      	add	r3, r2
 800a954:	2220      	movs	r2, #32
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	e007      	b.n	800a96a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	441a      	add	r2, r3
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	440b      	add	r3, r1
 800a966:	7812      	ldrb	r2, [r2, #0]
 800a968:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	3301      	adds	r3, #1
 800a96e:	61fb      	str	r3, [r7, #28]
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	3301      	adds	r3, #1
 800a974:	61bb      	str	r3, [r7, #24]
 800a976:	69fa      	ldr	r2, [r7, #28]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d204      	bcs.n	800a988 <mg_url_decode+0xde>
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	3301      	adds	r3, #1
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d89c      	bhi.n	800a8c2 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d204      	bcs.n	800a99a <mg_url_decode+0xf0>
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	4413      	add	r3, r2
 800a996:	2200      	movs	r2, #0
 800a998:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800a99a:	69fa      	ldr	r2, [r7, #28]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d305      	bcc.n	800a9ae <mg_url_decode+0x104>
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d201      	bcs.n	800a9ae <mg_url_decode+0x104>
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	e001      	b.n	800a9b2 <mg_url_decode+0x108>
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <isok>:

static bool isok(uint8_t c) {
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	2b0a      	cmp	r3, #10
 800a9c8:	d008      	beq.n	800a9dc <isok+0x22>
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	2b0d      	cmp	r3, #13
 800a9ce:	d005      	beq.n	800a9dc <isok+0x22>
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	2b09      	cmp	r3, #9
 800a9d4:	d002      	beq.n	800a9dc <isok+0x22>
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b1f      	cmp	r3, #31
 800a9da:	d901      	bls.n	800a9e0 <isok+0x26>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <isok+0x28>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	e03c      	b.n	800aa7e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff ffd4 	bl	800a9ba <isok>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f083 0301 	eor.w	r3, r3, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <mg_http_get_request_len+0x30>
 800aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa22:	e031      	b.n	800aa88 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00c      	beq.n	800aa44 <mg_http_get_request_len+0x50>
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b0a      	cmp	r3, #10
 800aa34:	d106      	bne.n	800aa44 <mg_http_get_request_len+0x50>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b0a      	cmp	r3, #10
 800aa42:	d016      	beq.n	800aa72 <mg_http_get_request_len+0x7e>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d916      	bls.n	800aa78 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b0a      	cmp	r3, #10
 800aa54:	d110      	bne.n	800aa78 <mg_http_get_request_len+0x84>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b0d      	cmp	r3, #13
 800aa62:	d109      	bne.n	800aa78 <mg_http_get_request_len+0x84>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3b02      	subs	r3, #2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b0a      	cmp	r3, #10
 800aa70:	d102      	bne.n	800aa78 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3301      	adds	r3, #1
 800aa76:	e007      	b.n	800aa88 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d3be      	bcc.n	800aa04 <mg_http_get_request_len+0x10>
  }
  return 0;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800aa9a:	6838      	ldr	r0, [r7, #0]
 800aa9c:	f7f5 fc98 	bl	80003d0 <strlen>
 800aaa0:	61b8      	str	r0, [r7, #24]
 800aaa2:	231e      	movs	r3, #30
 800aaa4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	61fb      	str	r3, [r7, #28]
 800aaaa:	e01f      	b.n	800aaec <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	3302      	adds	r3, #2
 800aab0:	011b      	lsls	r3, r3, #4
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	4413      	add	r3, r2
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	011b      	lsls	r3, r3, #4
 800aabc:	3328      	adds	r3, #40	@ 0x28
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d10b      	bne.n	800aae6 <mg_http_get_header+0x56>
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff fd4b 	bl	800a572 <mg_ncasecmp>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <mg_http_get_header+0x56>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	e010      	b.n	800ab08 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	3301      	adds	r3, #1
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d208      	bcs.n	800ab06 <mg_http_get_header+0x76>
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	3302      	adds	r3, #2
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	4413      	add	r3, r2
 800aafe:	3304      	adds	r3, #4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1d2      	bne.n	800aaac <mg_http_get_header+0x1c>
  }
  return NULL;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3720      	adds	r7, #32
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ab20:	2b80      	cmp	r3, #128	@ 0x80
 800ab22:	bf0c      	ite	eq
 800ab24:	2301      	moveq	r3, #1
 800ab26:	2300      	movne	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 800ab52:	7cfb      	ldrb	r3, [r7, #19]
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	d904      	bls.n	800ab62 <clen+0x2c>
 800ab58:	7cfb      	ldrb	r3, [r7, #19]
 800ab5a:	2b7e      	cmp	r3, #126	@ 0x7e
 800ab5c:	d801      	bhi.n	800ab62 <clen+0x2c>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e054      	b.n	800ac0c <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 800ab62:	7cfb      	ldrb	r3, [r7, #19]
 800ab64:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800ab68:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab6a:	d10d      	bne.n	800ab88 <clen+0x52>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	dd0a      	ble.n	800ab88 <clen+0x52>
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	3301      	adds	r3, #1
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff ffc9 	bl	800ab10 <vcb>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <clen+0x52>
 800ab84:	2302      	movs	r3, #2
 800ab86:	e041      	b.n	800ac0c <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 800ab88:	7cfb      	ldrb	r3, [r7, #19]
 800ab8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab8e:	2be0      	cmp	r3, #224	@ 0xe0
 800ab90:	d116      	bne.n	800abc0 <clen+0x8a>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	dd13      	ble.n	800abc0 <clen+0x8a>
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff ffb6 	bl	800ab10 <vcb>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <clen+0x8a>
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	3302      	adds	r3, #2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff ffad 	bl	800ab10 <vcb>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <clen+0x8a>
 800abbc:	2303      	movs	r3, #3
 800abbe:	e025      	b.n	800ac0c <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 800abc0:	7cfb      	ldrb	r3, [r7, #19]
 800abc2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800abc6:	2bf0      	cmp	r3, #240	@ 0xf0
 800abc8:	d11f      	bne.n	800ac0a <clen+0xd4>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b03      	cmp	r3, #3
 800abce:	dd1c      	ble.n	800ac0a <clen+0xd4>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	3301      	adds	r3, #1
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff ff9a 	bl	800ab10 <vcb>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d013      	beq.n	800ac0a <clen+0xd4>
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	3302      	adds	r3, #2
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff ff91 	bl	800ab10 <vcb>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00a      	beq.n	800ac0a <clen+0xd4>
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	3303      	adds	r3, #3
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff ff88 	bl	800ab10 <vcb>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <clen+0xd4>
    return 4;
 800ac06:	2304      	movs	r3, #4
 800ac08:	e000      	b.n	800ac0c <clen+0xd6>
  return 0;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800ac26:	e007      	b.n	800ac38 <skiptorn+0x24>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	605a      	str	r2, [r3, #4]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d207      	bcs.n	800ac50 <skiptorn+0x3c>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b0a      	cmp	r3, #10
 800ac46:	d003      	beq.n	800ac50 <skiptorn+0x3c>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b0d      	cmp	r3, #13
 800ac4e:	d1eb      	bne.n	800ac28 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d208      	bcs.n	800ac6a <skiptorn+0x56>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	2b0d      	cmp	r3, #13
 800ac5e:	d106      	bne.n	800ac6e <skiptorn+0x5a>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3301      	adds	r3, #1
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	2b0a      	cmp	r3, #10
 800ac68:	d001      	beq.n	800ac6e <skiptorn+0x5a>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e017      	b.n	800ac9e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d206      	bcs.n	800ac84 <skiptorn+0x70>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b0d      	cmp	r3, #13
 800ac7c:	d102      	bne.n	800ac84 <skiptorn+0x70>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d205      	bcs.n	800ac98 <skiptorn+0x84>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	60fa      	str	r2, [r7, #12]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	2b0a      	cmp	r3, #10
 800ac96:	d001      	beq.n	800ac9c <skiptorn+0x88>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e000      	b.n	800ac9e <skiptorn+0x8a>
  return s;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800acaa:	b580      	push	{r7, lr}
 800acac:	b08a      	sub	sp, #40	@ 0x28
 800acae:	af00      	add	r7, sp, #0
 800acb0:	60f8      	str	r0, [r7, #12]
 800acb2:	60b9      	str	r1, [r7, #8]
 800acb4:	607a      	str	r2, [r7, #4]
 800acb6:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800acb8:	2300      	movs	r3, #0
 800acba:	627b      	str	r3, [r7, #36]	@ 0x24
 800acbc:	e09a      	b.n	800adf4 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 800acbe:	2300      	movs	r3, #0
 800acc0:	61bb      	str	r3, [r7, #24]
 800acc2:	2300      	movs	r3, #0
 800acc4:	61fb      	str	r3, [r7, #28]
 800acc6:	2300      	movs	r3, #0
 800acc8:	613b      	str	r3, [r7, #16]
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d301      	bcc.n	800acda <mg_http_parse_headers+0x30>
 800acd6:	2300      	movs	r3, #0
 800acd8:	e092      	b.n	800ae00 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b0a      	cmp	r3, #10
 800ace0:	f000 808d 	beq.w	800adfe <mg_http_parse_headers+0x154>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b0d      	cmp	r3, #13
 800acea:	d105      	bne.n	800acf8 <mg_http_parse_headers+0x4e>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3301      	adds	r3, #1
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b0a      	cmp	r3, #10
 800acf4:	f000 8083 	beq.w	800adfe <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 800acfc:	e007      	b.n	800ad0e <mg_http_parse_headers+0x64>
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	4413      	add	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	61fb      	str	r3, [r7, #28]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d20b      	bcs.n	800ad2e <mg_http_parse_headers+0x84>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ad1c:	d007      	beq.n	800ad2e <mg_http_parse_headers+0x84>
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f7ff ff08 	bl	800ab36 <clen>
 800ad26:	6238      	str	r0, [r7, #32]
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e7      	bne.n	800acfe <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d101      	bne.n	800ad38 <mg_http_parse_headers+0x8e>
 800ad34:	2300      	movs	r3, #0
 800ad36:	e063      	b.n	800ae00 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d206      	bcs.n	800ad4e <mg_http_parse_headers+0xa4>
 800ad40:	68b9      	ldr	r1, [r7, #8]
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff fef7 	bl	800ab36 <clen>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <mg_http_parse_headers+0xa8>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e056      	b.n	800ae00 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	60fa      	str	r2, [r7, #12]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ad5c:	d004      	beq.n	800ad68 <mg_http_parse_headers+0xbe>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e04e      	b.n	800ae00 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3301      	adds	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d207      	bcs.n	800ad80 <mg_http_parse_headers+0xd6>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d0f4      	beq.n	800ad62 <mg_http_parse_headers+0xb8>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b09      	cmp	r3, #9
 800ad7e:	d0f0      	beq.n	800ad62 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 800ad80:	f107 0310 	add.w	r3, r7, #16
 800ad84:	461a      	mov	r2, r3
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7ff ff43 	bl	800ac14 <skiptorn>
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d104      	bne.n	800ada0 <mg_http_parse_headers+0xf6>
 800ad96:	2300      	movs	r3, #0
 800ad98:	e032      	b.n	800ae00 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00d      	beq.n	800adc2 <mg_http_parse_headers+0x118>
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3b01      	subs	r3, #1
 800adac:	4413      	add	r3, r2
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b20      	cmp	r3, #32
 800adb2:	d0f2      	beq.n	800ad9a <mg_http_parse_headers+0xf0>
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	3b01      	subs	r3, #1
 800adba:	4413      	add	r3, r2
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b09      	cmp	r3, #9
 800adc0:	d0eb      	beq.n	800ad9a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	011b      	lsls	r3, r3, #4
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	461a      	mov	r2, r3
 800adcc:	f107 0318 	add.w	r3, r7, #24
 800add0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800add4:	e882 0003 	stmia.w	r2, {r0, r1}
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	4413      	add	r3, r2
 800ade0:	3308      	adds	r3, #8
 800ade2:	f107 0210 	add.w	r2, r7, #16
 800ade6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adea:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 800adee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf0:	3301      	adds	r3, #1
 800adf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800adf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	f4ff af60 	bcc.w	800acbe <mg_http_parse_headers+0x14>
  }
  return true;
 800adfe:	2301      	movs	r3, #1
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3728      	adds	r7, #40	@ 0x28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b092      	sub	sp, #72	@ 0x48
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff fdec 	bl	800a9f4 <mg_http_get_request_len>
 800ae1c:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <mg_http_parse+0x24>
 800ae24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	e000      	b.n	800ae2e <mg_http_parse+0x26>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 800ae30:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ae34:	2100      	movs	r1, #0
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f01c fcaa 	bl	8027790 <memset>
  if (req_len <= 0) return req_len;
 800ae3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dc01      	bgt.n	800ae46 <mg_http_parse+0x3e>
 800ae42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae44:	e18f      	b.n	800b166 <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae5e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 800ae62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 800ae86:	e009      	b.n	800ae9c <mg_http_parse+0x94>
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae8c:	4413      	add	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae96:	441a      	add	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	605a      	str	r2, [r3, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d20b      	bcs.n	800aebc <mg_http_parse+0xb4>
 800aea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fe45 	bl	800ab36 <clen>
 800aeac:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800aeae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e9      	bne.n	800ae88 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800aeb4:	e002      	b.n	800aebc <mg_http_parse+0xb4>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d203      	bcs.n	800aecc <mg_http_parse+0xc4>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d0f4      	beq.n	800aeb6 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 800aed2:	e009      	b.n	800aee8 <mg_http_parse+0xe0>
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed8:	4413      	add	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68da      	ldr	r2, [r3, #12]
 800aee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee2:	441a      	add	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	60da      	str	r2, [r3, #12]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d20b      	bcs.n	800af08 <mg_http_parse+0x100>
 800aef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff fe1f 	bl	800ab36 <clen>
 800aef8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800aefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1e9      	bne.n	800aed4 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800af00:	e002      	b.n	800af08 <mg_http_parse+0x100>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3301      	adds	r3, #1
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d203      	bcs.n	800af18 <mg_http_parse+0x110>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b20      	cmp	r3, #32
 800af16:	d0f4      	beq.n	800af02 <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	2b05      	cmp	r3, #5
 800af1e:	d90b      	bls.n	800af38 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2205      	movs	r2, #5
 800af26:	4992      	ldr	r1, [pc, #584]	@ (800b170 <mg_http_parse+0x368>)
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fb22 	bl	800a572 <mg_ncasecmp>
 800af2e:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <mg_http_parse+0x130>
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <mg_http_parse+0x132>
 800af38:	2300      	movs	r3, #0
 800af3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3318      	adds	r3, #24
 800af40:	461a      	mov	r2, r3
 800af42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7ff fe65 	bl	800ac14 <skiptorn>
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <mg_http_parse+0x14e>
 800af52:	2300      	movs	r3, #0
 800af54:	e107      	b.n	800b166 <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d90b      	bls.n	800af76 <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	2205      	movs	r2, #5
 800af64:	4982      	ldr	r1, [pc, #520]	@ (800b170 <mg_http_parse+0x368>)
 800af66:	4618      	mov	r0, r3
 800af68:	f7ff fb03 	bl	800a572 <mg_ncasecmp>
 800af6c:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <mg_http_parse+0x16e>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <mg_http_parse+0x170>
 800af76:	2300      	movs	r3, #0
 800af78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800af7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d12f      	bne.n	800afee <mg_http_parse+0x1e6>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d02b      	beq.n	800afee <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800af96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af9a:	f083 0301 	eor.w	r3, r3, #1
 800af9e:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d121      	bne.n	800afe8 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	69db      	ldr	r3, [r3, #28]
 800afa8:	2b08      	cmp	r3, #8
 800afaa:	d11d      	bne.n	800afe8 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	3305      	adds	r3, #5
 800afb2:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 800afb4:	2b2f      	cmp	r3, #47	@ 0x2f
 800afb6:	d917      	bls.n	800afe8 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	3305      	adds	r3, #5
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b39      	cmp	r3, #57	@ 0x39
 800afc2:	d811      	bhi.n	800afe8 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	3306      	adds	r3, #6
 800afca:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800afcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800afce:	d10b      	bne.n	800afe8 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	3307      	adds	r3, #7
 800afd6:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 800afd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800afda:	d905      	bls.n	800afe8 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	3307      	adds	r3, #7
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b39      	cmp	r3, #57	@ 0x39
 800afe6:	d902      	bls.n	800afee <mg_http_parse+0x1e6>
    return -1;
 800afe8:	f04f 33ff 	mov.w	r3, #4294967295
 800afec:	e0bb      	b.n	800b166 <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6898      	ldr	r0, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	461a      	mov	r2, r3
 800aff8:	213f      	movs	r1, #63	@ 0x3f
 800affa:	f7f5 f999 	bl	8000330 <memchr>
 800affe:	6338      	str	r0, [r7, #48]	@ 0x30
 800b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b002:	2b00      	cmp	r3, #0
 800b004:	d015      	beq.n	800b032 <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	441a      	add	r2, r3
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	3301      	adds	r3, #1
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	461a      	mov	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <mg_http_parse+0x23a>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <mg_http_parse+0x240>
 800b042:	f04f 33ff 	mov.w	r3, #4294967295
 800b046:	e08e      	b.n	800b166 <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f103 0220 	add.w	r2, r3, #32
 800b04e:	231e      	movs	r3, #30
 800b050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff fe29 	bl	800acaa <mg_http_parse_headers>
 800b058:	4603      	mov	r3, r0
 800b05a:	f083 0301 	eor.w	r3, r3, #1
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 800b064:	f04f 33ff 	mov.w	r3, #4294967295
 800b068:	e07d      	b.n	800b166 <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 800b06a:	4942      	ldr	r1, [pc, #264]	@ (800b174 <mg_http_parse+0x36c>)
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff fd0f 	bl	800aa90 <mg_http_get_header>
 800b072:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b076:	2b00      	cmp	r3, #0
 800b078:	d018      	beq.n	800b0ac <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800b080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b082:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b086:	f7ff fab5 	bl	800a5f4 <mg_to_size_t>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f083 0301 	eor.w	r3, r3, #1
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <mg_http_parse+0x294>
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	e064      	b.n	800b166 <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0a4:	441a      	add	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b6:	d12a      	bne.n	800b10e <mg_http_parse+0x306>
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d127      	bne.n	800b10e <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800b0be:	f107 0314 	add.w	r3, r7, #20
 800b0c2:	492d      	ldr	r1, [pc, #180]	@ (800b178 <mg_http_parse+0x370>)
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f00b fc51 	bl	801696c <mg_str_s>
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	f107 0314 	add.w	r3, r7, #20
 800b0d0:	cb0c      	ldmia	r3, {r2, r3}
 800b0d2:	c903      	ldmia	r1, {r0, r1}
 800b0d4:	f00b fd0d 	bl	8016af2 <mg_strcasecmp>
 800b0d8:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d017      	beq.n	800b10e <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 800b0de:	f107 031c 	add.w	r3, r7, #28
 800b0e2:	4926      	ldr	r1, [pc, #152]	@ (800b17c <mg_http_parse+0x374>)
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f00b fc41 	bl	801696c <mg_str_s>
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	f107 031c 	add.w	r3, r7, #28
 800b0f0:	cb0c      	ldmia	r3, {r2, r3}
 800b0f2:	c903      	ldmia	r1, {r0, r1}
 800b0f4:	f00b fcfd 	bl	8016af2 <mg_strcasecmp>
 800b0f8:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <mg_http_parse+0x306>
    hm->body.len = 0;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800b106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b118:	d11b      	bne.n	800b152 <mg_http_parse+0x34a>
 800b11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d018      	beq.n	800b152 <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 800b120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b124:	4916      	ldr	r1, [pc, #88]	@ (800b180 <mg_http_parse+0x378>)
 800b126:	4618      	mov	r0, r3
 800b128:	f00b fc20 	bl	801696c <mg_str_s>
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b132:	cb0c      	ldmia	r3, {r2, r3}
 800b134:	3108      	adds	r1, #8
 800b136:	c903      	ldmia	r1, {r0, r1}
 800b138:	f00b fcdb 	bl	8016af2 <mg_strcasecmp>
 800b13c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d107      	bne.n	800b152 <mg_http_parse+0x34a>
    hm->body.len = 0;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800b14a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800b158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d202      	bcs.n	800b164 <mg_http_parse+0x35c>
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	e000      	b.n	800b166 <mg_http_parse+0x35e>

  return req_len;
 800b164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b166:	4618      	mov	r0, r3
 800b168:	3748      	adds	r7, #72	@ 0x48
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	0802a178 	.word	0x0802a178
 800b174:	0802a180 	.word	0x0802a180
 800b178:	0802a190 	.word	0x0802a190
 800b17c:	0802a194 	.word	0x0802a194
 800b180:	0802a19c 	.word	0x0802a19c

0800b184 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3b64      	subs	r3, #100	@ 0x64
 800b190:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800b194:	4293      	cmp	r3, r2
 800b196:	f200 8469 	bhi.w	800ba6c <mg_http_status_code_str+0x8e8>
 800b19a:	a101      	add	r1, pc, #4	@ (adr r1, 800b1a0 <mg_http_status_code_str+0x1c>)
 800b19c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a0:	0800b971 	.word	0x0800b971
 800b1a4:	0800b975 	.word	0x0800b975
 800b1a8:	0800b979 	.word	0x0800b979
 800b1ac:	0800ba6d 	.word	0x0800ba6d
 800b1b0:	0800ba6d 	.word	0x0800ba6d
 800b1b4:	0800ba6d 	.word	0x0800ba6d
 800b1b8:	0800ba6d 	.word	0x0800ba6d
 800b1bc:	0800ba6d 	.word	0x0800ba6d
 800b1c0:	0800ba6d 	.word	0x0800ba6d
 800b1c4:	0800ba6d 	.word	0x0800ba6d
 800b1c8:	0800ba6d 	.word	0x0800ba6d
 800b1cc:	0800ba6d 	.word	0x0800ba6d
 800b1d0:	0800ba6d 	.word	0x0800ba6d
 800b1d4:	0800ba6d 	.word	0x0800ba6d
 800b1d8:	0800ba6d 	.word	0x0800ba6d
 800b1dc:	0800ba6d 	.word	0x0800ba6d
 800b1e0:	0800ba6d 	.word	0x0800ba6d
 800b1e4:	0800ba6d 	.word	0x0800ba6d
 800b1e8:	0800ba6d 	.word	0x0800ba6d
 800b1ec:	0800ba6d 	.word	0x0800ba6d
 800b1f0:	0800ba6d 	.word	0x0800ba6d
 800b1f4:	0800ba6d 	.word	0x0800ba6d
 800b1f8:	0800ba6d 	.word	0x0800ba6d
 800b1fc:	0800ba6d 	.word	0x0800ba6d
 800b200:	0800ba6d 	.word	0x0800ba6d
 800b204:	0800ba6d 	.word	0x0800ba6d
 800b208:	0800ba6d 	.word	0x0800ba6d
 800b20c:	0800ba6d 	.word	0x0800ba6d
 800b210:	0800ba6d 	.word	0x0800ba6d
 800b214:	0800ba6d 	.word	0x0800ba6d
 800b218:	0800ba6d 	.word	0x0800ba6d
 800b21c:	0800ba6d 	.word	0x0800ba6d
 800b220:	0800ba6d 	.word	0x0800ba6d
 800b224:	0800ba6d 	.word	0x0800ba6d
 800b228:	0800ba6d 	.word	0x0800ba6d
 800b22c:	0800ba6d 	.word	0x0800ba6d
 800b230:	0800ba6d 	.word	0x0800ba6d
 800b234:	0800ba6d 	.word	0x0800ba6d
 800b238:	0800ba6d 	.word	0x0800ba6d
 800b23c:	0800ba6d 	.word	0x0800ba6d
 800b240:	0800ba6d 	.word	0x0800ba6d
 800b244:	0800ba6d 	.word	0x0800ba6d
 800b248:	0800ba6d 	.word	0x0800ba6d
 800b24c:	0800ba6d 	.word	0x0800ba6d
 800b250:	0800ba6d 	.word	0x0800ba6d
 800b254:	0800ba6d 	.word	0x0800ba6d
 800b258:	0800ba6d 	.word	0x0800ba6d
 800b25c:	0800ba6d 	.word	0x0800ba6d
 800b260:	0800ba6d 	.word	0x0800ba6d
 800b264:	0800ba6d 	.word	0x0800ba6d
 800b268:	0800ba6d 	.word	0x0800ba6d
 800b26c:	0800ba6d 	.word	0x0800ba6d
 800b270:	0800ba6d 	.word	0x0800ba6d
 800b274:	0800ba6d 	.word	0x0800ba6d
 800b278:	0800ba6d 	.word	0x0800ba6d
 800b27c:	0800ba6d 	.word	0x0800ba6d
 800b280:	0800ba6d 	.word	0x0800ba6d
 800b284:	0800ba6d 	.word	0x0800ba6d
 800b288:	0800ba6d 	.word	0x0800ba6d
 800b28c:	0800ba6d 	.word	0x0800ba6d
 800b290:	0800ba6d 	.word	0x0800ba6d
 800b294:	0800ba6d 	.word	0x0800ba6d
 800b298:	0800ba6d 	.word	0x0800ba6d
 800b29c:	0800ba6d 	.word	0x0800ba6d
 800b2a0:	0800ba6d 	.word	0x0800ba6d
 800b2a4:	0800ba6d 	.word	0x0800ba6d
 800b2a8:	0800ba6d 	.word	0x0800ba6d
 800b2ac:	0800ba6d 	.word	0x0800ba6d
 800b2b0:	0800ba6d 	.word	0x0800ba6d
 800b2b4:	0800ba6d 	.word	0x0800ba6d
 800b2b8:	0800ba6d 	.word	0x0800ba6d
 800b2bc:	0800ba6d 	.word	0x0800ba6d
 800b2c0:	0800ba6d 	.word	0x0800ba6d
 800b2c4:	0800ba6d 	.word	0x0800ba6d
 800b2c8:	0800ba6d 	.word	0x0800ba6d
 800b2cc:	0800ba6d 	.word	0x0800ba6d
 800b2d0:	0800ba6d 	.word	0x0800ba6d
 800b2d4:	0800ba6d 	.word	0x0800ba6d
 800b2d8:	0800ba6d 	.word	0x0800ba6d
 800b2dc:	0800ba6d 	.word	0x0800ba6d
 800b2e0:	0800ba6d 	.word	0x0800ba6d
 800b2e4:	0800ba6d 	.word	0x0800ba6d
 800b2e8:	0800ba6d 	.word	0x0800ba6d
 800b2ec:	0800ba6d 	.word	0x0800ba6d
 800b2f0:	0800ba6d 	.word	0x0800ba6d
 800b2f4:	0800ba6d 	.word	0x0800ba6d
 800b2f8:	0800ba6d 	.word	0x0800ba6d
 800b2fc:	0800ba6d 	.word	0x0800ba6d
 800b300:	0800ba6d 	.word	0x0800ba6d
 800b304:	0800ba6d 	.word	0x0800ba6d
 800b308:	0800ba6d 	.word	0x0800ba6d
 800b30c:	0800ba6d 	.word	0x0800ba6d
 800b310:	0800ba6d 	.word	0x0800ba6d
 800b314:	0800ba6d 	.word	0x0800ba6d
 800b318:	0800ba6d 	.word	0x0800ba6d
 800b31c:	0800ba6d 	.word	0x0800ba6d
 800b320:	0800ba6d 	.word	0x0800ba6d
 800b324:	0800ba6d 	.word	0x0800ba6d
 800b328:	0800ba6d 	.word	0x0800ba6d
 800b32c:	0800ba6d 	.word	0x0800ba6d
 800b330:	0800b97d 	.word	0x0800b97d
 800b334:	0800b981 	.word	0x0800b981
 800b338:	0800b985 	.word	0x0800b985
 800b33c:	0800b989 	.word	0x0800b989
 800b340:	0800b98d 	.word	0x0800b98d
 800b344:	0800b991 	.word	0x0800b991
 800b348:	0800b995 	.word	0x0800b995
 800b34c:	0800b999 	.word	0x0800b999
 800b350:	0800b99d 	.word	0x0800b99d
 800b354:	0800ba6d 	.word	0x0800ba6d
 800b358:	0800ba6d 	.word	0x0800ba6d
 800b35c:	0800ba6d 	.word	0x0800ba6d
 800b360:	0800ba6d 	.word	0x0800ba6d
 800b364:	0800ba6d 	.word	0x0800ba6d
 800b368:	0800ba6d 	.word	0x0800ba6d
 800b36c:	0800ba6d 	.word	0x0800ba6d
 800b370:	0800ba6d 	.word	0x0800ba6d
 800b374:	0800ba6d 	.word	0x0800ba6d
 800b378:	0800ba6d 	.word	0x0800ba6d
 800b37c:	0800ba6d 	.word	0x0800ba6d
 800b380:	0800ba6d 	.word	0x0800ba6d
 800b384:	0800ba6d 	.word	0x0800ba6d
 800b388:	0800ba6d 	.word	0x0800ba6d
 800b38c:	0800ba6d 	.word	0x0800ba6d
 800b390:	0800ba6d 	.word	0x0800ba6d
 800b394:	0800ba6d 	.word	0x0800ba6d
 800b398:	0800b9a1 	.word	0x0800b9a1
 800b39c:	0800ba6d 	.word	0x0800ba6d
 800b3a0:	0800ba6d 	.word	0x0800ba6d
 800b3a4:	0800ba6d 	.word	0x0800ba6d
 800b3a8:	0800ba6d 	.word	0x0800ba6d
 800b3ac:	0800ba6d 	.word	0x0800ba6d
 800b3b0:	0800ba6d 	.word	0x0800ba6d
 800b3b4:	0800ba6d 	.word	0x0800ba6d
 800b3b8:	0800ba6d 	.word	0x0800ba6d
 800b3bc:	0800ba6d 	.word	0x0800ba6d
 800b3c0:	0800ba6d 	.word	0x0800ba6d
 800b3c4:	0800ba6d 	.word	0x0800ba6d
 800b3c8:	0800ba6d 	.word	0x0800ba6d
 800b3cc:	0800ba6d 	.word	0x0800ba6d
 800b3d0:	0800ba6d 	.word	0x0800ba6d
 800b3d4:	0800ba6d 	.word	0x0800ba6d
 800b3d8:	0800ba6d 	.word	0x0800ba6d
 800b3dc:	0800ba6d 	.word	0x0800ba6d
 800b3e0:	0800ba6d 	.word	0x0800ba6d
 800b3e4:	0800ba6d 	.word	0x0800ba6d
 800b3e8:	0800ba6d 	.word	0x0800ba6d
 800b3ec:	0800ba6d 	.word	0x0800ba6d
 800b3f0:	0800ba6d 	.word	0x0800ba6d
 800b3f4:	0800ba6d 	.word	0x0800ba6d
 800b3f8:	0800ba6d 	.word	0x0800ba6d
 800b3fc:	0800ba6d 	.word	0x0800ba6d
 800b400:	0800ba6d 	.word	0x0800ba6d
 800b404:	0800ba6d 	.word	0x0800ba6d
 800b408:	0800ba6d 	.word	0x0800ba6d
 800b40c:	0800ba6d 	.word	0x0800ba6d
 800b410:	0800ba6d 	.word	0x0800ba6d
 800b414:	0800ba6d 	.word	0x0800ba6d
 800b418:	0800ba6d 	.word	0x0800ba6d
 800b41c:	0800ba6d 	.word	0x0800ba6d
 800b420:	0800ba6d 	.word	0x0800ba6d
 800b424:	0800ba6d 	.word	0x0800ba6d
 800b428:	0800ba6d 	.word	0x0800ba6d
 800b42c:	0800ba6d 	.word	0x0800ba6d
 800b430:	0800ba6d 	.word	0x0800ba6d
 800b434:	0800ba6d 	.word	0x0800ba6d
 800b438:	0800ba6d 	.word	0x0800ba6d
 800b43c:	0800ba6d 	.word	0x0800ba6d
 800b440:	0800ba6d 	.word	0x0800ba6d
 800b444:	0800ba6d 	.word	0x0800ba6d
 800b448:	0800ba6d 	.word	0x0800ba6d
 800b44c:	0800ba6d 	.word	0x0800ba6d
 800b450:	0800ba6d 	.word	0x0800ba6d
 800b454:	0800ba6d 	.word	0x0800ba6d
 800b458:	0800ba6d 	.word	0x0800ba6d
 800b45c:	0800ba6d 	.word	0x0800ba6d
 800b460:	0800ba6d 	.word	0x0800ba6d
 800b464:	0800ba6d 	.word	0x0800ba6d
 800b468:	0800ba6d 	.word	0x0800ba6d
 800b46c:	0800ba6d 	.word	0x0800ba6d
 800b470:	0800ba6d 	.word	0x0800ba6d
 800b474:	0800ba6d 	.word	0x0800ba6d
 800b478:	0800ba6d 	.word	0x0800ba6d
 800b47c:	0800ba6d 	.word	0x0800ba6d
 800b480:	0800ba6d 	.word	0x0800ba6d
 800b484:	0800ba6d 	.word	0x0800ba6d
 800b488:	0800ba6d 	.word	0x0800ba6d
 800b48c:	0800ba6d 	.word	0x0800ba6d
 800b490:	0800ba6d 	.word	0x0800ba6d
 800b494:	0800ba6d 	.word	0x0800ba6d
 800b498:	0800ba6d 	.word	0x0800ba6d
 800b49c:	0800ba6d 	.word	0x0800ba6d
 800b4a0:	0800ba6d 	.word	0x0800ba6d
 800b4a4:	0800ba6d 	.word	0x0800ba6d
 800b4a8:	0800ba6d 	.word	0x0800ba6d
 800b4ac:	0800ba6d 	.word	0x0800ba6d
 800b4b0:	0800ba6d 	.word	0x0800ba6d
 800b4b4:	0800ba6d 	.word	0x0800ba6d
 800b4b8:	0800ba6d 	.word	0x0800ba6d
 800b4bc:	0800ba6d 	.word	0x0800ba6d
 800b4c0:	0800b9a5 	.word	0x0800b9a5
 800b4c4:	0800b9a9 	.word	0x0800b9a9
 800b4c8:	0800b9ad 	.word	0x0800b9ad
 800b4cc:	0800b9b1 	.word	0x0800b9b1
 800b4d0:	0800b9b5 	.word	0x0800b9b5
 800b4d4:	0800b9b9 	.word	0x0800b9b9
 800b4d8:	0800ba6d 	.word	0x0800ba6d
 800b4dc:	0800b9bd 	.word	0x0800b9bd
 800b4e0:	0800b9c1 	.word	0x0800b9c1
 800b4e4:	0800ba6d 	.word	0x0800ba6d
 800b4e8:	0800ba6d 	.word	0x0800ba6d
 800b4ec:	0800ba6d 	.word	0x0800ba6d
 800b4f0:	0800ba6d 	.word	0x0800ba6d
 800b4f4:	0800ba6d 	.word	0x0800ba6d
 800b4f8:	0800ba6d 	.word	0x0800ba6d
 800b4fc:	0800ba6d 	.word	0x0800ba6d
 800b500:	0800ba6d 	.word	0x0800ba6d
 800b504:	0800ba6d 	.word	0x0800ba6d
 800b508:	0800ba6d 	.word	0x0800ba6d
 800b50c:	0800ba6d 	.word	0x0800ba6d
 800b510:	0800ba6d 	.word	0x0800ba6d
 800b514:	0800ba6d 	.word	0x0800ba6d
 800b518:	0800ba6d 	.word	0x0800ba6d
 800b51c:	0800ba6d 	.word	0x0800ba6d
 800b520:	0800ba6d 	.word	0x0800ba6d
 800b524:	0800ba6d 	.word	0x0800ba6d
 800b528:	0800ba6d 	.word	0x0800ba6d
 800b52c:	0800ba6d 	.word	0x0800ba6d
 800b530:	0800ba6d 	.word	0x0800ba6d
 800b534:	0800ba6d 	.word	0x0800ba6d
 800b538:	0800ba6d 	.word	0x0800ba6d
 800b53c:	0800ba6d 	.word	0x0800ba6d
 800b540:	0800ba6d 	.word	0x0800ba6d
 800b544:	0800ba6d 	.word	0x0800ba6d
 800b548:	0800ba6d 	.word	0x0800ba6d
 800b54c:	0800ba6d 	.word	0x0800ba6d
 800b550:	0800ba6d 	.word	0x0800ba6d
 800b554:	0800ba6d 	.word	0x0800ba6d
 800b558:	0800ba6d 	.word	0x0800ba6d
 800b55c:	0800ba6d 	.word	0x0800ba6d
 800b560:	0800ba6d 	.word	0x0800ba6d
 800b564:	0800ba6d 	.word	0x0800ba6d
 800b568:	0800ba6d 	.word	0x0800ba6d
 800b56c:	0800ba6d 	.word	0x0800ba6d
 800b570:	0800ba6d 	.word	0x0800ba6d
 800b574:	0800ba6d 	.word	0x0800ba6d
 800b578:	0800ba6d 	.word	0x0800ba6d
 800b57c:	0800ba6d 	.word	0x0800ba6d
 800b580:	0800ba6d 	.word	0x0800ba6d
 800b584:	0800ba6d 	.word	0x0800ba6d
 800b588:	0800ba6d 	.word	0x0800ba6d
 800b58c:	0800ba6d 	.word	0x0800ba6d
 800b590:	0800ba6d 	.word	0x0800ba6d
 800b594:	0800ba6d 	.word	0x0800ba6d
 800b598:	0800ba6d 	.word	0x0800ba6d
 800b59c:	0800ba6d 	.word	0x0800ba6d
 800b5a0:	0800ba6d 	.word	0x0800ba6d
 800b5a4:	0800ba6d 	.word	0x0800ba6d
 800b5a8:	0800ba6d 	.word	0x0800ba6d
 800b5ac:	0800ba6d 	.word	0x0800ba6d
 800b5b0:	0800ba6d 	.word	0x0800ba6d
 800b5b4:	0800ba6d 	.word	0x0800ba6d
 800b5b8:	0800ba6d 	.word	0x0800ba6d
 800b5bc:	0800ba6d 	.word	0x0800ba6d
 800b5c0:	0800ba6d 	.word	0x0800ba6d
 800b5c4:	0800ba6d 	.word	0x0800ba6d
 800b5c8:	0800ba6d 	.word	0x0800ba6d
 800b5cc:	0800ba6d 	.word	0x0800ba6d
 800b5d0:	0800ba6d 	.word	0x0800ba6d
 800b5d4:	0800ba6d 	.word	0x0800ba6d
 800b5d8:	0800ba6d 	.word	0x0800ba6d
 800b5dc:	0800ba6d 	.word	0x0800ba6d
 800b5e0:	0800ba6d 	.word	0x0800ba6d
 800b5e4:	0800ba6d 	.word	0x0800ba6d
 800b5e8:	0800ba6d 	.word	0x0800ba6d
 800b5ec:	0800ba6d 	.word	0x0800ba6d
 800b5f0:	0800ba6d 	.word	0x0800ba6d
 800b5f4:	0800ba6d 	.word	0x0800ba6d
 800b5f8:	0800ba6d 	.word	0x0800ba6d
 800b5fc:	0800ba6d 	.word	0x0800ba6d
 800b600:	0800ba6d 	.word	0x0800ba6d
 800b604:	0800ba6d 	.word	0x0800ba6d
 800b608:	0800ba6d 	.word	0x0800ba6d
 800b60c:	0800ba6d 	.word	0x0800ba6d
 800b610:	0800ba6d 	.word	0x0800ba6d
 800b614:	0800ba6d 	.word	0x0800ba6d
 800b618:	0800ba6d 	.word	0x0800ba6d
 800b61c:	0800ba6d 	.word	0x0800ba6d
 800b620:	0800ba6d 	.word	0x0800ba6d
 800b624:	0800ba6d 	.word	0x0800ba6d
 800b628:	0800ba6d 	.word	0x0800ba6d
 800b62c:	0800ba6d 	.word	0x0800ba6d
 800b630:	0800ba6d 	.word	0x0800ba6d
 800b634:	0800ba6d 	.word	0x0800ba6d
 800b638:	0800ba6d 	.word	0x0800ba6d
 800b63c:	0800ba6d 	.word	0x0800ba6d
 800b640:	0800ba6d 	.word	0x0800ba6d
 800b644:	0800ba6d 	.word	0x0800ba6d
 800b648:	0800ba6d 	.word	0x0800ba6d
 800b64c:	0800ba6d 	.word	0x0800ba6d
 800b650:	0800b9c5 	.word	0x0800b9c5
 800b654:	0800b9c9 	.word	0x0800b9c9
 800b658:	0800b9cd 	.word	0x0800b9cd
 800b65c:	0800b9d1 	.word	0x0800b9d1
 800b660:	0800b9d5 	.word	0x0800b9d5
 800b664:	0800b9d9 	.word	0x0800b9d9
 800b668:	0800b9dd 	.word	0x0800b9dd
 800b66c:	0800b9e1 	.word	0x0800b9e1
 800b670:	0800b9e5 	.word	0x0800b9e5
 800b674:	0800b9e9 	.word	0x0800b9e9
 800b678:	0800b9ed 	.word	0x0800b9ed
 800b67c:	0800b9f1 	.word	0x0800b9f1
 800b680:	0800b9f5 	.word	0x0800b9f5
 800b684:	0800b9f9 	.word	0x0800b9f9
 800b688:	0800b9fd 	.word	0x0800b9fd
 800b68c:	0800ba01 	.word	0x0800ba01
 800b690:	0800ba05 	.word	0x0800ba05
 800b694:	0800ba09 	.word	0x0800ba09
 800b698:	0800ba0d 	.word	0x0800ba0d
 800b69c:	0800ba6d 	.word	0x0800ba6d
 800b6a0:	0800ba6d 	.word	0x0800ba6d
 800b6a4:	0800ba11 	.word	0x0800ba11
 800b6a8:	0800ba15 	.word	0x0800ba15
 800b6ac:	0800ba19 	.word	0x0800ba19
 800b6b0:	0800ba1d 	.word	0x0800ba1d
 800b6b4:	0800ba6d 	.word	0x0800ba6d
 800b6b8:	0800ba21 	.word	0x0800ba21
 800b6bc:	0800ba6d 	.word	0x0800ba6d
 800b6c0:	0800ba25 	.word	0x0800ba25
 800b6c4:	0800ba29 	.word	0x0800ba29
 800b6c8:	0800ba6d 	.word	0x0800ba6d
 800b6cc:	0800ba2d 	.word	0x0800ba2d
 800b6d0:	0800ba6d 	.word	0x0800ba6d
 800b6d4:	0800ba6d 	.word	0x0800ba6d
 800b6d8:	0800ba6d 	.word	0x0800ba6d
 800b6dc:	0800ba6d 	.word	0x0800ba6d
 800b6e0:	0800ba6d 	.word	0x0800ba6d
 800b6e4:	0800ba6d 	.word	0x0800ba6d
 800b6e8:	0800ba6d 	.word	0x0800ba6d
 800b6ec:	0800ba6d 	.word	0x0800ba6d
 800b6f0:	0800ba6d 	.word	0x0800ba6d
 800b6f4:	0800ba6d 	.word	0x0800ba6d
 800b6f8:	0800ba6d 	.word	0x0800ba6d
 800b6fc:	0800ba6d 	.word	0x0800ba6d
 800b700:	0800ba31 	.word	0x0800ba31
 800b704:	0800ba6d 	.word	0x0800ba6d
 800b708:	0800ba6d 	.word	0x0800ba6d
 800b70c:	0800ba6d 	.word	0x0800ba6d
 800b710:	0800ba6d 	.word	0x0800ba6d
 800b714:	0800ba6d 	.word	0x0800ba6d
 800b718:	0800ba6d 	.word	0x0800ba6d
 800b71c:	0800ba35 	.word	0x0800ba35
 800b720:	0800ba6d 	.word	0x0800ba6d
 800b724:	0800ba6d 	.word	0x0800ba6d
 800b728:	0800ba6d 	.word	0x0800ba6d
 800b72c:	0800ba6d 	.word	0x0800ba6d
 800b730:	0800ba6d 	.word	0x0800ba6d
 800b734:	0800ba6d 	.word	0x0800ba6d
 800b738:	0800ba6d 	.word	0x0800ba6d
 800b73c:	0800ba6d 	.word	0x0800ba6d
 800b740:	0800ba6d 	.word	0x0800ba6d
 800b744:	0800ba6d 	.word	0x0800ba6d
 800b748:	0800ba6d 	.word	0x0800ba6d
 800b74c:	0800ba6d 	.word	0x0800ba6d
 800b750:	0800ba6d 	.word	0x0800ba6d
 800b754:	0800ba6d 	.word	0x0800ba6d
 800b758:	0800ba6d 	.word	0x0800ba6d
 800b75c:	0800ba6d 	.word	0x0800ba6d
 800b760:	0800ba6d 	.word	0x0800ba6d
 800b764:	0800ba6d 	.word	0x0800ba6d
 800b768:	0800ba6d 	.word	0x0800ba6d
 800b76c:	0800ba6d 	.word	0x0800ba6d
 800b770:	0800ba6d 	.word	0x0800ba6d
 800b774:	0800ba6d 	.word	0x0800ba6d
 800b778:	0800ba6d 	.word	0x0800ba6d
 800b77c:	0800ba6d 	.word	0x0800ba6d
 800b780:	0800ba6d 	.word	0x0800ba6d
 800b784:	0800ba6d 	.word	0x0800ba6d
 800b788:	0800ba6d 	.word	0x0800ba6d
 800b78c:	0800ba6d 	.word	0x0800ba6d
 800b790:	0800ba6d 	.word	0x0800ba6d
 800b794:	0800ba6d 	.word	0x0800ba6d
 800b798:	0800ba6d 	.word	0x0800ba6d
 800b79c:	0800ba6d 	.word	0x0800ba6d
 800b7a0:	0800ba6d 	.word	0x0800ba6d
 800b7a4:	0800ba6d 	.word	0x0800ba6d
 800b7a8:	0800ba6d 	.word	0x0800ba6d
 800b7ac:	0800ba6d 	.word	0x0800ba6d
 800b7b0:	0800ba6d 	.word	0x0800ba6d
 800b7b4:	0800ba6d 	.word	0x0800ba6d
 800b7b8:	0800ba6d 	.word	0x0800ba6d
 800b7bc:	0800ba6d 	.word	0x0800ba6d
 800b7c0:	0800ba6d 	.word	0x0800ba6d
 800b7c4:	0800ba6d 	.word	0x0800ba6d
 800b7c8:	0800ba6d 	.word	0x0800ba6d
 800b7cc:	0800ba6d 	.word	0x0800ba6d
 800b7d0:	0800ba6d 	.word	0x0800ba6d
 800b7d4:	0800ba6d 	.word	0x0800ba6d
 800b7d8:	0800ba6d 	.word	0x0800ba6d
 800b7dc:	0800ba39 	.word	0x0800ba39
 800b7e0:	0800ba3d 	.word	0x0800ba3d
 800b7e4:	0800ba41 	.word	0x0800ba41
 800b7e8:	0800ba45 	.word	0x0800ba45
 800b7ec:	0800ba49 	.word	0x0800ba49
 800b7f0:	0800ba4d 	.word	0x0800ba4d
 800b7f4:	0800ba51 	.word	0x0800ba51
 800b7f8:	0800ba55 	.word	0x0800ba55
 800b7fc:	0800ba59 	.word	0x0800ba59
 800b800:	0800ba5d 	.word	0x0800ba5d
 800b804:	0800ba6d 	.word	0x0800ba6d
 800b808:	0800ba61 	.word	0x0800ba61
 800b80c:	0800ba65 	.word	0x0800ba65
 800b810:	0800ba6d 	.word	0x0800ba6d
 800b814:	0800ba6d 	.word	0x0800ba6d
 800b818:	0800ba6d 	.word	0x0800ba6d
 800b81c:	0800ba6d 	.word	0x0800ba6d
 800b820:	0800ba6d 	.word	0x0800ba6d
 800b824:	0800ba6d 	.word	0x0800ba6d
 800b828:	0800ba6d 	.word	0x0800ba6d
 800b82c:	0800ba6d 	.word	0x0800ba6d
 800b830:	0800ba6d 	.word	0x0800ba6d
 800b834:	0800ba6d 	.word	0x0800ba6d
 800b838:	0800ba6d 	.word	0x0800ba6d
 800b83c:	0800ba6d 	.word	0x0800ba6d
 800b840:	0800ba6d 	.word	0x0800ba6d
 800b844:	0800ba6d 	.word	0x0800ba6d
 800b848:	0800ba6d 	.word	0x0800ba6d
 800b84c:	0800ba6d 	.word	0x0800ba6d
 800b850:	0800ba6d 	.word	0x0800ba6d
 800b854:	0800ba6d 	.word	0x0800ba6d
 800b858:	0800ba6d 	.word	0x0800ba6d
 800b85c:	0800ba6d 	.word	0x0800ba6d
 800b860:	0800ba6d 	.word	0x0800ba6d
 800b864:	0800ba6d 	.word	0x0800ba6d
 800b868:	0800ba6d 	.word	0x0800ba6d
 800b86c:	0800ba6d 	.word	0x0800ba6d
 800b870:	0800ba6d 	.word	0x0800ba6d
 800b874:	0800ba6d 	.word	0x0800ba6d
 800b878:	0800ba6d 	.word	0x0800ba6d
 800b87c:	0800ba6d 	.word	0x0800ba6d
 800b880:	0800ba6d 	.word	0x0800ba6d
 800b884:	0800ba6d 	.word	0x0800ba6d
 800b888:	0800ba6d 	.word	0x0800ba6d
 800b88c:	0800ba6d 	.word	0x0800ba6d
 800b890:	0800ba6d 	.word	0x0800ba6d
 800b894:	0800ba6d 	.word	0x0800ba6d
 800b898:	0800ba6d 	.word	0x0800ba6d
 800b89c:	0800ba6d 	.word	0x0800ba6d
 800b8a0:	0800ba6d 	.word	0x0800ba6d
 800b8a4:	0800ba6d 	.word	0x0800ba6d
 800b8a8:	0800ba6d 	.word	0x0800ba6d
 800b8ac:	0800ba6d 	.word	0x0800ba6d
 800b8b0:	0800ba6d 	.word	0x0800ba6d
 800b8b4:	0800ba6d 	.word	0x0800ba6d
 800b8b8:	0800ba6d 	.word	0x0800ba6d
 800b8bc:	0800ba6d 	.word	0x0800ba6d
 800b8c0:	0800ba6d 	.word	0x0800ba6d
 800b8c4:	0800ba6d 	.word	0x0800ba6d
 800b8c8:	0800ba6d 	.word	0x0800ba6d
 800b8cc:	0800ba6d 	.word	0x0800ba6d
 800b8d0:	0800ba6d 	.word	0x0800ba6d
 800b8d4:	0800ba6d 	.word	0x0800ba6d
 800b8d8:	0800ba6d 	.word	0x0800ba6d
 800b8dc:	0800ba6d 	.word	0x0800ba6d
 800b8e0:	0800ba6d 	.word	0x0800ba6d
 800b8e4:	0800ba6d 	.word	0x0800ba6d
 800b8e8:	0800ba6d 	.word	0x0800ba6d
 800b8ec:	0800ba6d 	.word	0x0800ba6d
 800b8f0:	0800ba6d 	.word	0x0800ba6d
 800b8f4:	0800ba6d 	.word	0x0800ba6d
 800b8f8:	0800ba6d 	.word	0x0800ba6d
 800b8fc:	0800ba6d 	.word	0x0800ba6d
 800b900:	0800ba6d 	.word	0x0800ba6d
 800b904:	0800ba6d 	.word	0x0800ba6d
 800b908:	0800ba6d 	.word	0x0800ba6d
 800b90c:	0800ba6d 	.word	0x0800ba6d
 800b910:	0800ba6d 	.word	0x0800ba6d
 800b914:	0800ba6d 	.word	0x0800ba6d
 800b918:	0800ba6d 	.word	0x0800ba6d
 800b91c:	0800ba6d 	.word	0x0800ba6d
 800b920:	0800ba6d 	.word	0x0800ba6d
 800b924:	0800ba6d 	.word	0x0800ba6d
 800b928:	0800ba6d 	.word	0x0800ba6d
 800b92c:	0800ba6d 	.word	0x0800ba6d
 800b930:	0800ba6d 	.word	0x0800ba6d
 800b934:	0800ba6d 	.word	0x0800ba6d
 800b938:	0800ba6d 	.word	0x0800ba6d
 800b93c:	0800ba6d 	.word	0x0800ba6d
 800b940:	0800ba6d 	.word	0x0800ba6d
 800b944:	0800ba6d 	.word	0x0800ba6d
 800b948:	0800ba6d 	.word	0x0800ba6d
 800b94c:	0800ba6d 	.word	0x0800ba6d
 800b950:	0800ba6d 	.word	0x0800ba6d
 800b954:	0800ba6d 	.word	0x0800ba6d
 800b958:	0800ba6d 	.word	0x0800ba6d
 800b95c:	0800ba6d 	.word	0x0800ba6d
 800b960:	0800ba6d 	.word	0x0800ba6d
 800b964:	0800ba6d 	.word	0x0800ba6d
 800b968:	0800ba6d 	.word	0x0800ba6d
 800b96c:	0800ba69 	.word	0x0800ba69
    case 100: return "Continue";
 800b970:	4b42      	ldr	r3, [pc, #264]	@ (800ba7c <mg_http_status_code_str+0x8f8>)
 800b972:	e07c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800b974:	4b42      	ldr	r3, [pc, #264]	@ (800ba80 <mg_http_status_code_str+0x8fc>)
 800b976:	e07a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 800b978:	4b42      	ldr	r3, [pc, #264]	@ (800ba84 <mg_http_status_code_str+0x900>)
 800b97a:	e078      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800b97c:	4b42      	ldr	r3, [pc, #264]	@ (800ba88 <mg_http_status_code_str+0x904>)
 800b97e:	e076      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 800b980:	4b42      	ldr	r3, [pc, #264]	@ (800ba8c <mg_http_status_code_str+0x908>)
 800b982:	e074      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800b984:	4b42      	ldr	r3, [pc, #264]	@ (800ba90 <mg_http_status_code_str+0x90c>)
 800b986:	e072      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 800b988:	4b42      	ldr	r3, [pc, #264]	@ (800ba94 <mg_http_status_code_str+0x910>)
 800b98a:	e070      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800b98c:	4b42      	ldr	r3, [pc, #264]	@ (800ba98 <mg_http_status_code_str+0x914>)
 800b98e:	e06e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 800b990:	4b42      	ldr	r3, [pc, #264]	@ (800ba9c <mg_http_status_code_str+0x918>)
 800b992:	e06c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800b994:	4b42      	ldr	r3, [pc, #264]	@ (800baa0 <mg_http_status_code_str+0x91c>)
 800b996:	e06a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 800b998:	4b42      	ldr	r3, [pc, #264]	@ (800baa4 <mg_http_status_code_str+0x920>)
 800b99a:	e068      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800b99c:	4b42      	ldr	r3, [pc, #264]	@ (800baa8 <mg_http_status_code_str+0x924>)
 800b99e:	e066      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 800b9a0:	4b42      	ldr	r3, [pc, #264]	@ (800baac <mg_http_status_code_str+0x928>)
 800b9a2:	e064      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800b9a4:	4b42      	ldr	r3, [pc, #264]	@ (800bab0 <mg_http_status_code_str+0x92c>)
 800b9a6:	e062      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 800b9a8:	4b42      	ldr	r3, [pc, #264]	@ (800bab4 <mg_http_status_code_str+0x930>)
 800b9aa:	e060      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800b9ac:	4b42      	ldr	r3, [pc, #264]	@ (800bab8 <mg_http_status_code_str+0x934>)
 800b9ae:	e05e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 800b9b0:	4b42      	ldr	r3, [pc, #264]	@ (800babc <mg_http_status_code_str+0x938>)
 800b9b2:	e05c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800b9b4:	4b42      	ldr	r3, [pc, #264]	@ (800bac0 <mg_http_status_code_str+0x93c>)
 800b9b6:	e05a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 800b9b8:	4b42      	ldr	r3, [pc, #264]	@ (800bac4 <mg_http_status_code_str+0x940>)
 800b9ba:	e058      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800b9bc:	4b42      	ldr	r3, [pc, #264]	@ (800bac8 <mg_http_status_code_str+0x944>)
 800b9be:	e056      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 800b9c0:	4b42      	ldr	r3, [pc, #264]	@ (800bacc <mg_http_status_code_str+0x948>)
 800b9c2:	e054      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800b9c4:	4b42      	ldr	r3, [pc, #264]	@ (800bad0 <mg_http_status_code_str+0x94c>)
 800b9c6:	e052      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 800b9c8:	4b42      	ldr	r3, [pc, #264]	@ (800bad4 <mg_http_status_code_str+0x950>)
 800b9ca:	e050      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800b9cc:	4b42      	ldr	r3, [pc, #264]	@ (800bad8 <mg_http_status_code_str+0x954>)
 800b9ce:	e04e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 800b9d0:	4b42      	ldr	r3, [pc, #264]	@ (800badc <mg_http_status_code_str+0x958>)
 800b9d2:	e04c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800b9d4:	4b42      	ldr	r3, [pc, #264]	@ (800bae0 <mg_http_status_code_str+0x95c>)
 800b9d6:	e04a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 800b9d8:	4b42      	ldr	r3, [pc, #264]	@ (800bae4 <mg_http_status_code_str+0x960>)
 800b9da:	e048      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800b9dc:	4b42      	ldr	r3, [pc, #264]	@ (800bae8 <mg_http_status_code_str+0x964>)
 800b9de:	e046      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 800b9e0:	4b42      	ldr	r3, [pc, #264]	@ (800baec <mg_http_status_code_str+0x968>)
 800b9e2:	e044      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800b9e4:	4b42      	ldr	r3, [pc, #264]	@ (800baf0 <mg_http_status_code_str+0x96c>)
 800b9e6:	e042      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 800b9e8:	4b42      	ldr	r3, [pc, #264]	@ (800baf4 <mg_http_status_code_str+0x970>)
 800b9ea:	e040      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800b9ec:	4b42      	ldr	r3, [pc, #264]	@ (800baf8 <mg_http_status_code_str+0x974>)
 800b9ee:	e03e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 800b9f0:	4b42      	ldr	r3, [pc, #264]	@ (800bafc <mg_http_status_code_str+0x978>)
 800b9f2:	e03c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800b9f4:	4b42      	ldr	r3, [pc, #264]	@ (800bb00 <mg_http_status_code_str+0x97c>)
 800b9f6:	e03a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 800b9f8:	4b42      	ldr	r3, [pc, #264]	@ (800bb04 <mg_http_status_code_str+0x980>)
 800b9fa:	e038      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800b9fc:	4b42      	ldr	r3, [pc, #264]	@ (800bb08 <mg_http_status_code_str+0x984>)
 800b9fe:	e036      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 800ba00:	4b42      	ldr	r3, [pc, #264]	@ (800bb0c <mg_http_status_code_str+0x988>)
 800ba02:	e034      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800ba04:	4b42      	ldr	r3, [pc, #264]	@ (800bb10 <mg_http_status_code_str+0x98c>)
 800ba06:	e032      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 800ba08:	4b42      	ldr	r3, [pc, #264]	@ (800bb14 <mg_http_status_code_str+0x990>)
 800ba0a:	e030      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800ba0c:	4b42      	ldr	r3, [pc, #264]	@ (800bb18 <mg_http_status_code_str+0x994>)
 800ba0e:	e02e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 800ba10:	4b42      	ldr	r3, [pc, #264]	@ (800bb1c <mg_http_status_code_str+0x998>)
 800ba12:	e02c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800ba14:	4b42      	ldr	r3, [pc, #264]	@ (800bb20 <mg_http_status_code_str+0x99c>)
 800ba16:	e02a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 800ba18:	4b42      	ldr	r3, [pc, #264]	@ (800bb24 <mg_http_status_code_str+0x9a0>)
 800ba1a:	e028      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800ba1c:	4b42      	ldr	r3, [pc, #264]	@ (800bb28 <mg_http_status_code_str+0x9a4>)
 800ba1e:	e026      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 800ba20:	4b42      	ldr	r3, [pc, #264]	@ (800bb2c <mg_http_status_code_str+0x9a8>)
 800ba22:	e024      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800ba24:	4b42      	ldr	r3, [pc, #264]	@ (800bb30 <mg_http_status_code_str+0x9ac>)
 800ba26:	e022      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 800ba28:	4b42      	ldr	r3, [pc, #264]	@ (800bb34 <mg_http_status_code_str+0x9b0>)
 800ba2a:	e020      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 800ba2c:	4b42      	ldr	r3, [pc, #264]	@ (800bb38 <mg_http_status_code_str+0x9b4>)
 800ba2e:	e01e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 800ba30:	4b42      	ldr	r3, [pc, #264]	@ (800bb3c <mg_http_status_code_str+0x9b8>)
 800ba32:	e01c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800ba34:	4b42      	ldr	r3, [pc, #264]	@ (800bb40 <mg_http_status_code_str+0x9bc>)
 800ba36:	e01a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 800ba38:	4b42      	ldr	r3, [pc, #264]	@ (800bb44 <mg_http_status_code_str+0x9c0>)
 800ba3a:	e018      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 800ba3c:	4b42      	ldr	r3, [pc, #264]	@ (800bb48 <mg_http_status_code_str+0x9c4>)
 800ba3e:	e016      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 800ba40:	4b42      	ldr	r3, [pc, #264]	@ (800bb4c <mg_http_status_code_str+0x9c8>)
 800ba42:	e014      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800ba44:	4b42      	ldr	r3, [pc, #264]	@ (800bb50 <mg_http_status_code_str+0x9cc>)
 800ba46:	e012      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 800ba48:	4b42      	ldr	r3, [pc, #264]	@ (800bb54 <mg_http_status_code_str+0x9d0>)
 800ba4a:	e010      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 800ba4c:	4b42      	ldr	r3, [pc, #264]	@ (800bb58 <mg_http_status_code_str+0x9d4>)
 800ba4e:	e00e      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 800ba50:	4b42      	ldr	r3, [pc, #264]	@ (800bb5c <mg_http_status_code_str+0x9d8>)
 800ba52:	e00c      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800ba54:	4b42      	ldr	r3, [pc, #264]	@ (800bb60 <mg_http_status_code_str+0x9dc>)
 800ba56:	e00a      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 800ba58:	4b42      	ldr	r3, [pc, #264]	@ (800bb64 <mg_http_status_code_str+0x9e0>)
 800ba5a:	e008      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 800ba5c:	4b42      	ldr	r3, [pc, #264]	@ (800bb68 <mg_http_status_code_str+0x9e4>)
 800ba5e:	e006      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 800ba60:	4b42      	ldr	r3, [pc, #264]	@ (800bb6c <mg_http_status_code_str+0x9e8>)
 800ba62:	e004      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800ba64:	4b42      	ldr	r3, [pc, #264]	@ (800bb70 <mg_http_status_code_str+0x9ec>)
 800ba66:	e002      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 800ba68:	4b42      	ldr	r3, [pc, #264]	@ (800bb74 <mg_http_status_code_str+0x9f0>)
 800ba6a:	e000      	b.n	800ba6e <mg_http_status_code_str+0x8ea>
    default: return "";
 800ba6c:	4b42      	ldr	r3, [pc, #264]	@ (800bb78 <mg_http_status_code_str+0x9f4>)
  }
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	0802a1bc 	.word	0x0802a1bc
 800ba80:	0802a1c8 	.word	0x0802a1c8
 800ba84:	0802a1dc 	.word	0x0802a1dc
 800ba88:	0802a1e8 	.word	0x0802a1e8
 800ba8c:	0802a1ec 	.word	0x0802a1ec
 800ba90:	0802a1f4 	.word	0x0802a1f4
 800ba94:	0802a200 	.word	0x0802a200
 800ba98:	0802a220 	.word	0x0802a220
 800ba9c:	0802a22c 	.word	0x0802a22c
 800baa0:	0802a23c 	.word	0x0802a23c
 800baa4:	0802a24c 	.word	0x0802a24c
 800baa8:	0802a25c 	.word	0x0802a25c
 800baac:	0802a270 	.word	0x0802a270
 800bab0:	0802a278 	.word	0x0802a278
 800bab4:	0802a28c 	.word	0x0802a28c
 800bab8:	0802a2a0 	.word	0x0802a2a0
 800babc:	0802a2a8 	.word	0x0802a2a8
 800bac0:	0802a2b4 	.word	0x0802a2b4
 800bac4:	0802a2c4 	.word	0x0802a2c4
 800bac8:	0802a2d0 	.word	0x0802a2d0
 800bacc:	0802a2e4 	.word	0x0802a2e4
 800bad0:	0802a2f8 	.word	0x0802a2f8
 800bad4:	0802a304 	.word	0x0802a304
 800bad8:	0802a314 	.word	0x0802a314
 800badc:	0802a328 	.word	0x0802a328
 800bae0:	0802a334 	.word	0x0802a334
 800bae4:	0802a340 	.word	0x0802a340
 800bae8:	0802a354 	.word	0x0802a354
 800baec:	0802a364 	.word	0x0802a364
 800baf0:	0802a384 	.word	0x0802a384
 800baf4:	0802a394 	.word	0x0802a394
 800baf8:	0802a3a0 	.word	0x0802a3a0
 800bafc:	0802a3a8 	.word	0x0802a3a8
 800bb00:	0802a3b8 	.word	0x0802a3b8
 800bb04:	0802a3cc 	.word	0x0802a3cc
 800bb08:	0802a3e0 	.word	0x0802a3e0
 800bb0c:	0802a3f8 	.word	0x0802a3f8
 800bb10:	0802a410 	.word	0x0802a410
 800bb14:	0802a430 	.word	0x0802a430
 800bb18:	0802a444 	.word	0x0802a444
 800bb1c:	0802a454 	.word	0x0802a454
 800bb20:	0802a468 	.word	0x0802a468
 800bb24:	0802a480 	.word	0x0802a480
 800bb28:	0802a488 	.word	0x0802a488
 800bb2c:	0802a49c 	.word	0x0802a49c
 800bb30:	0802a4b0 	.word	0x0802a4b0
 800bb34:	0802a4c8 	.word	0x0802a4c8
 800bb38:	0802a4dc 	.word	0x0802a4dc
 800bb3c:	0802a4fc 	.word	0x0802a4fc
 800bb40:	0802a520 	.word	0x0802a520
 800bb44:	0802a540 	.word	0x0802a540
 800bb48:	0802a558 	.word	0x0802a558
 800bb4c:	0802a570 	.word	0x0802a570
 800bb50:	0802a580 	.word	0x0802a580
 800bb54:	0802a58c 	.word	0x0802a58c
 800bb58:	0802a5a0 	.word	0x0802a5a0
 800bb5c:	0802a5b0 	.word	0x0802a5b0
 800bb60:	0802a5cc 	.word	0x0802a5cc
 800bb64:	0802a5e4 	.word	0x0802a5e4
 800bb68:	0802a5fc 	.word	0x0802a5fc
 800bb6c:	0802a60c 	.word	0x0802a60c
 800bb70:	0802a61c 	.word	0x0802a61c
 800bb74:	0802a63c 	.word	0x0802a63c
 800bb78:	0802a65c 	.word	0x0802a65c

0800bb7c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 800bb7c:	b408      	push	{r3}
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b08b      	sub	sp, #44	@ 0x2c
 800bb82:	af02      	add	r7, sp, #8
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800bb8a:	68b8      	ldr	r0, [r7, #8]
 800bb8c:	f7ff fafa 	bl	800b184 <mg_http_status_code_str>
 800bb90:	4602      	mov	r2, r0
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <mg_http_reply+0x20>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	e000      	b.n	800bb9e <mg_http_reply+0x22>
 800bb9c:	4b1f      	ldr	r3, [pc, #124]	@ (800bc1c <mg_http_reply+0xa0>)
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4613      	mov	r3, r2
 800bba2:	68ba      	ldr	r2, [r7, #8]
 800bba4:	491e      	ldr	r1, [pc, #120]	@ (800bc20 <mg_http_reply+0xa4>)
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f003 f83c 	bl	800ec24 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbb0:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800bbb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bbb6:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800bbbe:	f107 0314 	add.w	r3, r7, #20
 800bbc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc4:	4817      	ldr	r0, [pc, #92]	@ (800bc24 <mg_http_reply+0xa8>)
 800bbc6:	f7fd feeb 	bl	80099a0 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbce:	2b10      	cmp	r3, #16
 800bbd0:	d916      	bls.n	800bc00 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	3b0f      	subs	r3, #15
 800bbda:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800bbe4:	4a10      	ldr	r2, [pc, #64]	@ (800bc28 <mg_http_reply+0xac>)
 800bbe6:	210b      	movs	r1, #11
 800bbe8:	f007 fafc 	bl	80131e4 <mg_snprintf>
 800bbec:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbf2:	69f9      	ldr	r1, [r7, #28]
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3b0f      	subs	r3, #15
 800bbfa:	4413      	add	r3, r2
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800bc06:	f023 0301 	bic.w	r3, r3, #1
 800bc0a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800bc0e:	bf00      	nop
 800bc10:	3724      	adds	r7, #36	@ 0x24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc18:	b001      	add	sp, #4
 800bc1a:	4770      	bx	lr
 800bc1c:	0802a65c 	.word	0x0802a65c
 800bc20:	0802a660 	.word	0x0802a660
 800bc24:	08013175 	.word	0x08013175
 800bc28:	0802a694 	.word	0x0802a694

0800bc2c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fa7c 	bl	800a138 <mg_fs_close>
  c->pfn_data = NULL;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a07      	ldr	r2, [pc, #28]	@ (800bc68 <restore_http_cb+0x3c>)
 800bc4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800bc56:	f023 0301 	bic.w	r3, r3, #1
 800bc5a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800bc5e:	bf00      	nop
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	0800cf9d 	.word	0x0800cf9d

0800bc6c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800bc6c:	b5b0      	push	{r4, r5, r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af04      	add	r7, sp, #16
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	461c      	mov	r4, r3
 800bc7e:	4615      	mov	r5, r2
 800bc80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc88:	e9cd 2300 	strd	r2, r3, [sp]
 800bc8c:	4a04      	ldr	r2, [pc, #16]	@ (800bca0 <mg_http_etag+0x34>)
 800bc8e:	68b9      	ldr	r1, [r7, #8]
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f007 faa7 	bl	80131e4 <mg_snprintf>
  return buf;
 800bc96:	68fb      	ldr	r3, [r7, #12]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bdb0      	pop	{r4, r5, r7, pc}
 800bca0:	0802a69c 	.word	0x0802a69c

0800bca4 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	@ 0x28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d002      	beq.n	800bcbc <static_cb+0x18>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d148      	bne.n	800bd4e <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcc2:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800bcc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcc8:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	33a4      	adds	r3, #164	@ 0xa4
 800bcce:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d905      	bls.n	800bce6 <static_cb+0x42>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3348      	adds	r3, #72	@ 0x48
 800bcde:	69f9      	ldr	r1, [r7, #28]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 fd4d 	bl	800d780 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d234      	bcs.n	800bd5c <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d902      	bls.n	800bd0e <static_cb+0x6a>
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	6a3a      	ldr	r2, [r7, #32]
 800bd16:	6810      	ldr	r0, [r2, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bd20:	4411      	add	r1, r2
 800bd22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd24:	4798      	blx	r3
 800bd26:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	441a      	add	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10c      	bne.n	800bd60 <static_cb+0xbc>
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7ff ff70 	bl	800bc2c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800bd4c:	e008      	b.n	800bd60 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b09      	cmp	r3, #9
 800bd52:	d106      	bne.n	800bd62 <static_cb+0xbe>
    restore_http_cb(c);
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f7ff ff69 	bl	800bc2c <restore_http_cb>
 800bd5a:	e002      	b.n	800bd62 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800bd5c:	bf00      	nop
 800bd5e:	e000      	b.n	800bd62 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800bd60:	bf00      	nop
  }
  (void) ev_data;
}
 800bd62:	3728      	adds	r7, #40	@ 0x28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b093      	sub	sp, #76	@ 0x4c
 800bd6c:	af02      	add	r7, sp, #8
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	1d38      	adds	r0, r7, #4
 800bd72:	e880 0006 	stmia.w	r0, {r1, r2}
 800bd76:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 800bd78:	f107 031c 	add.w	r3, r7, #28
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f00a fdf4 	bl	801696c <mg_str_s>
 800bd84:	f107 0314 	add.w	r3, r7, #20
 800bd88:	2201      	movs	r2, #1
 800bd8a:	4943      	ldr	r1, [pc, #268]	@ (800be98 <guess_content_type+0x130>)
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f00a fe0a 	bl	80169a6 <mg_str_n>
  size_t i = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800bd96:	e002      	b.n	800bd9e <guess_content_type+0x36>
 800bd98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d208      	bcs.n	800bdb8 <guess_content_type+0x50>
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdac:	1acb      	subs	r3, r1, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	4413      	add	r3, r2
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdb6:	d1ef      	bne.n	800bd98 <guess_content_type+0x30>
  path.buf += path.len - i;
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbe:	1acb      	subs	r3, r1, r3
 800bdc0:	4413      	add	r3, r2
 800bdc2:	607b      	str	r3, [r7, #4]
  path.len = i;
 800bdc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc6:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 800bdc8:	e02b      	b.n	800be22 <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 800bdca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bdce:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800bdd2:	213d      	movs	r1, #61	@ 0x3d
 800bdd4:	9100      	str	r1, [sp, #0]
 800bdd6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800bdda:	c903      	ldmia	r1, {r0, r1}
 800bddc:	f00a ffc4 	bl	8016d68 <mg_span>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d01d      	beq.n	800be22 <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800bde6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bdea:	cb0c      	ldmia	r3, {r2, r3}
 800bdec:	f107 0114 	add.w	r1, r7, #20
 800bdf0:	c903      	ldmia	r1, {r0, r1}
 800bdf2:	f00a fe3c 	bl	8016a6e <mg_strcmp>
 800bdf6:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d009      	beq.n	800be10 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800bdfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be00:	cb0c      	ldmia	r3, {r2, r3}
 800be02:	1d39      	adds	r1, r7, #4
 800be04:	c903      	ldmia	r1, {r0, r1}
 800be06:	f00a fe32 	bl	8016a6e <mg_strcmp>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d108      	bne.n	800be22 <guess_content_type+0xba>
      return v;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	461a      	mov	r2, r3
 800be14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be18:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be1c:	e882 0003 	stmia.w	r2, {r0, r1}
 800be20:	e036      	b.n	800be90 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800be22:	f107 031c 	add.w	r3, r7, #28
 800be26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800be2a:	212c      	movs	r1, #44	@ 0x2c
 800be2c:	9100      	str	r1, [sp, #0]
 800be2e:	f107 011c 	add.w	r1, r7, #28
 800be32:	c903      	ldmia	r1, {r0, r1}
 800be34:	f00a ff98 	bl	8016d68 <mg_span>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1c5      	bne.n	800bdca <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800be3e:	2300      	movs	r3, #0
 800be40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be42:	e01a      	b.n	800be7a <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800be44:	4a15      	ldr	r2, [pc, #84]	@ (800be9c <guess_content_type+0x134>)
 800be46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be48:	00db      	lsls	r3, r3, #3
 800be4a:	4413      	add	r3, r2
 800be4c:	cb0c      	ldmia	r3, {r2, r3}
 800be4e:	1d39      	adds	r1, r7, #4
 800be50:	c903      	ldmia	r1, {r0, r1}
 800be52:	f00a fe0c 	bl	8016a6e <mg_strcmp>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10b      	bne.n	800be74 <guess_content_type+0x10c>
 800be5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5e:	3301      	adds	r3, #1
 800be60:	68f9      	ldr	r1, [r7, #12]
 800be62:	4a0e      	ldr	r2, [pc, #56]	@ (800be9c <guess_content_type+0x134>)
 800be64:	460c      	mov	r4, r1
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	4413      	add	r3, r2
 800be6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be6e:	e884 0003 	stmia.w	r4, {r0, r1}
 800be72:	e00d      	b.n	800be90 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800be74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be76:	3302      	adds	r3, #2
 800be78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be7a:	4a08      	ldr	r2, [pc, #32]	@ (800be9c <guess_content_type+0x134>)
 800be7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1de      	bne.n	800be44 <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4905      	ldr	r1, [pc, #20]	@ (800bea0 <guess_content_type+0x138>)
 800be8a:	4618      	mov	r0, r3
 800be8c:	f00a fd6e 	bl	801696c <mg_str_s>
}
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	3744      	adds	r7, #68	@ 0x44
 800be94:	46bd      	mov	sp, r7
 800be96:	bd90      	pop	{r4, r7, pc}
 800be98:	0802a90c 	.word	0x0802a90c
 800be9c:	24000060 	.word	0x24000060
 800bea0:	0802a788 	.word	0x0802a788

0800bea4 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08c      	sub	sp, #48	@ 0x30
 800bea8:	af02      	add	r7, sp, #8
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800beb4:	2300      	movs	r3, #0
 800beb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800beb8:	e058      	b.n	800bf6c <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	3306      	adds	r3, #6
 800bec2:	18d1      	adds	r1, r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	685a      	ldr	r2, [r3, #4]
 800bec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	1f9a      	subs	r2, r3, #6
 800bece:	f107 0310 	add.w	r3, r7, #16
 800bed2:	4618      	mov	r0, r3
 800bed4:	f00a fd67 	bl	80169a6 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bede:	4413      	add	r3, r2
 800bee0:	2206      	movs	r2, #6
 800bee2:	4929      	ldr	r1, [pc, #164]	@ (800bf88 <getrange+0xe4>)
 800bee4:	4618      	mov	r0, r3
 800bee6:	f01b fc29 	bl	802773c <memcmp>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d139      	bne.n	800bf64 <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 800bef0:	f107 0310 	add.w	r3, r7, #16
 800bef4:	f107 0218 	add.w	r2, r7, #24
 800bef8:	212d      	movs	r1, #45	@ 0x2d
 800befa:	9100      	str	r1, [sp, #0]
 800befc:	f107 0110 	add.w	r1, r7, #16
 800bf00:	c903      	ldmia	r1, {r0, r1}
 800bf02:	f00a ff31 	bl	8016d68 <mg_span>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01d      	beq.n	800bf48 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	f107 0318 	add.w	r3, r7, #24
 800bf12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf16:	f7fe fb6d 	bl	800a5f4 <mg_to_size_t>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <getrange+0x82>
 800bf20:	6a3b      	ldr	r3, [r7, #32]
 800bf22:	3301      	adds	r3, #1
 800bf24:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d026      	beq.n	800bf7a <getrange+0xd6>
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	f107 0310 	add.w	r3, r7, #16
 800bf32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf36:	f7fe fb5d 	bl	800a5f4 <mg_to_size_t>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01c      	beq.n	800bf7a <getrange+0xd6>
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	3301      	adds	r3, #1
 800bf44:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 800bf46:	e018      	b.n	800bf7a <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	f107 0310 	add.w	r3, r7, #16
 800bf4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf52:	f7fe fb4f 	bl	800a5f4 <mg_to_size_t>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00e      	beq.n	800bf7a <getrange+0xd6>
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	623b      	str	r3, [r7, #32]
 800bf62:	e00b      	b.n	800bf7c <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800bf64:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 800bf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf68:	3301      	adds	r3, #1
 800bf6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	1d9a      	adds	r2, r3, #6
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d3a0      	bcc.n	800beba <getrange+0x16>
 800bf78:	e000      	b.n	800bf7c <getrange+0xd8>
    break;
 800bf7a:	bf00      	nop
  }
  return (int) numparsed;
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3728      	adds	r7, #40	@ 0x28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	0802a910 	.word	0x0802a910

0800bf8c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	b0f3      	sub	sp, #460	@ 0x1cc
 800bf92:	af0a      	add	r7, sp, #40	@ 0x28
 800bf94:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800bf98:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 800bf9c:	6020      	str	r0, [r4, #0]
 800bf9e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800bfa2:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 800bfa6:	6001      	str	r1, [r0, #0]
 800bfa8:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800bfac:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 800bfb0:	600a      	str	r2, [r1, #0]
 800bfb2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800bfb6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800bfba:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800bfbc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bfc0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d006      	beq.n	800bfda <mg_http_serve_file+0x4e>
 800bfcc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bfd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	e000      	b.n	800bfdc <mg_http_serve_file+0x50>
 800bfda:	4ba4      	ldr	r3, [pc, #656]	@ (800c26c <mg_http_serve_file+0x2e0>)
 800bfdc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 800bfec:	f04f 0200 	mov.w	r2, #0
 800bff0:	f04f 0300 	mov.w	r3, #0
 800bff4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800bffe:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800c002:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c006:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c00a:	6819      	ldr	r1, [r3, #0]
 800c00c:	4610      	mov	r0, r2
 800c00e:	f00a fcad 	bl	801696c <mg_str_s>
 800c012:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c016:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c022:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 800c026:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800c02a:	ca06      	ldmia	r2, {r1, r2}
 800c02c:	f7ff fe9c 	bl	800bd68 <guess_content_type>
  bool gzip = false;
 800c030:	2300      	movs	r3, #0
 800c032:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 800c036:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c03a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d05c      	beq.n	800c0fe <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800c044:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c048:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c04c:	4988      	ldr	r1, [pc, #544]	@ (800c270 <mg_http_serve_file+0x2e4>)
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	f7fe fd1e 	bl	800aa90 <mg_http_get_header>
 800c054:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 800c058:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d03e      	beq.n	800c0de <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 800c060:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800c064:	6859      	ldr	r1, [r3, #4]
 800c066:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	461a      	mov	r2, r3
 800c06e:	4881      	ldr	r0, [pc, #516]	@ (800c274 <mg_http_serve_file+0x2e8>)
 800c070:	f007 f8ee 	bl	8013250 <mg_mprintf>
 800c074:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 800c078:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d02a      	beq.n	800c0d6 <mg_http_serve_file+0x14a>
 800c080:	497d      	ldr	r1, [pc, #500]	@ (800c278 <mg_http_serve_file+0x2ec>)
 800c082:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800c086:	f01b fbd3 	bl	8027830 <strstr>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d022      	beq.n	800c0d6 <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 800c090:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c094:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c098:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a77      	ldr	r2, [pc, #476]	@ (800c27c <mg_http_serve_file+0x2f0>)
 800c0a0:	2164      	movs	r1, #100	@ 0x64
 800c0a2:	f007 f89f 	bl	80131e4 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800c0a6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800c0b2:	f7fe f819 	bl	800a0e8 <mg_fs_open>
 800c0b6:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 800c0ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d009      	beq.n	800c0d6 <mg_http_serve_file+0x14a>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 800c0c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c0cc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c0d0:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800c0d4:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 800c0d6:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800c0da:	f019 fccf 	bl	8025a7c <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800c0de:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10b      	bne.n	800c0fe <mg_http_serve_file+0x172>
 800c0e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c0ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	6819      	ldr	r1, [r3, #0]
 800c0f2:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800c0f6:	f7fd fff7 	bl	800a0e8 <mg_fs_open>
 800c0fa:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800c0fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c102:	2b00      	cmp	r3, #0
 800c104:	d144      	bne.n	800c190 <mg_http_serve_file+0x204>
 800c106:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c10a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d03c      	beq.n	800c190 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800c116:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c11a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	2201      	movs	r2, #1
 800c124:	4619      	mov	r1, r3
 800c126:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800c12a:	f7fd ffdd 	bl	800a0e8 <mg_fs_open>
 800c12e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 800c132:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c136:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c13a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c13e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	6912      	ldr	r2, [r2, #16]
 800c146:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 800c148:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800c14c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c150:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c154:	6819      	ldr	r1, [r3, #0]
 800c156:	4610      	mov	r0, r2
 800c158:	f00a fc08 	bl	801696c <mg_str_s>
 800c15c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c160:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c16c:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 800c170:	f107 0010 	add.w	r0, r7, #16
 800c174:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800c178:	ca06      	ldmia	r2, {r1, r2}
 800c17a:	f7ff fdf5 	bl	800bd68 <guess_content_type>
 800c17e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c182:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800c186:	4623      	mov	r3, r4
 800c188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c18c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 800c190:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00f      	beq.n	800c1b8 <mg_http_serve_file+0x22c>
 800c198:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800c19c:	681c      	ldr	r4, [r3, #0]
 800c19e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800c1a2:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800c1a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c1aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	47a0      	blx	r4
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d114      	bne.n	800c1e2 <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 800c1b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c1bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c1c8:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800c1cc:	4b2c      	ldr	r3, [pc, #176]	@ (800c280 <mg_http_serve_file+0x2f4>)
 800c1ce:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800c1d2:	6800      	ldr	r0, [r0, #0]
 800c1d4:	f7ff fcd2 	bl	800bb7c <mg_http_reply>
    mg_fs_close(fd);
 800c1d8:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800c1dc:	f7fd ffac 	bl	800a138 <mg_fs_close>
 800c1e0:	e190      	b.n	800c504 <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800c1e2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800c1e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c1ea:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800c1ee:	e9cd 2300 	strd	r2, r3, [sp]
 800c1f2:	460a      	mov	r2, r1
 800c1f4:	2140      	movs	r1, #64	@ 0x40
 800c1f6:	f7ff fd39 	bl	800bc6c <mg_http_etag>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d045      	beq.n	800c28c <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800c200:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c204:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c208:	491e      	ldr	r1, [pc, #120]	@ (800c284 <mg_http_serve_file+0x2f8>)
 800c20a:	6818      	ldr	r0, [r3, #0]
 800c20c:	f7fe fc40 	bl	800aa90 <mg_http_get_header>
 800c210:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800c214:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d037      	beq.n	800c28c <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 800c21c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800c220:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800c224:	4611      	mov	r1, r2
 800c226:	4618      	mov	r0, r3
 800c228:	f00a fba0 	bl	801696c <mg_str_s>
 800c22c:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 800c230:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800c234:	cb0c      	ldmia	r3, {r2, r3}
 800c236:	c903      	ldmia	r1, {r0, r1}
 800c238:	f00a fc5b 	bl	8016af2 <mg_strcasecmp>
 800c23c:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d124      	bne.n	800c28c <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 800c242:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800c246:	f7fd ff77 	bl	800a138 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800c24a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c24e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c25a:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800c25e:	4b0a      	ldr	r3, [pc, #40]	@ (800c288 <mg_http_serve_file+0x2fc>)
 800c260:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800c264:	6800      	ldr	r0, [r0, #0]
 800c266:	f7ff fc89 	bl	800bb7c <mg_http_reply>
 800c26a:	e14b      	b.n	800c504 <mg_http_serve_file+0x578>
 800c26c:	24000038 	.word	0x24000038
 800c270:	0802a918 	.word	0x0802a918
 800c274:	0802a0fc 	.word	0x0802a0fc
 800c278:	0802a928 	.word	0x0802a928
 800c27c:	0802a930 	.word	0x0802a930
 800c280:	0802a938 	.word	0x0802a938
 800c284:	0802a944 	.word	0x0802a944
 800c288:	0802a65c 	.word	0x0802a65c
  } else {
    int n, status = 200;
 800c28c:	23c8      	movs	r3, #200	@ 0xc8
 800c28e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800c292:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c296:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2ae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800c2b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c2ba:	4995      	ldr	r1, [pc, #596]	@ (800c510 <mg_http_serve_file+0x584>)
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	f7fe fbe7 	bl	800aa90 <mg_http_get_header>
 800c2c2:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 800c2c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c2ca:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800c2d2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 808e 	beq.w	800c3f8 <mg_http_serve_file+0x46c>
 800c2dc:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800c2e0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 800c2ea:	f7ff fddb 	bl	800bea4 <getrange>
 800c2ee:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800c2f2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	dd7e      	ble.n	800c3f8 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800c2fa:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d107      	bne.n	800c312 <mg_http_serve_file+0x386>
 800c302:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c306:	1e5a      	subs	r2, r3, #1
 800c308:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c30c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c310:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800c312:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c316:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c320:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	429a      	cmp	r2, r3
 800c328:	d808      	bhi.n	800c33c <mg_http_serve_file+0x3b0>
 800c32a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c32e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800c338:	429a      	cmp	r2, r3
 800c33a:	d817      	bhi.n	800c36c <mg_http_serve_file+0x3e0>
        status = 416;
 800c33c:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800c340:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 800c344:	2300      	movs	r3, #0
 800c346:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800c34a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c34e:	2200      	movs	r2, #0
 800c350:	60bb      	str	r3, [r7, #8]
 800c352:	60fa      	str	r2, [r7, #12]
 800c354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c358:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c35c:	e9cd 1200 	strd	r1, r2, [sp]
 800c360:	4a6c      	ldr	r2, [pc, #432]	@ (800c514 <mg_http_serve_file+0x588>)
 800c362:	2164      	movs	r1, #100	@ 0x64
 800c364:	4618      	mov	r0, r3
 800c366:	f006 ff3d 	bl	80131e4 <mg_snprintf>
 800c36a:	e045      	b.n	800c3f8 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800c36c:	23ce      	movs	r3, #206	@ 0xce
 800c36e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800c372:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c376:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c380:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	3301      	adds	r3, #1
 800c38a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800c38e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c392:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	469a      	mov	sl, r3
 800c39c:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800c39e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c3a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c3ac:	4413      	add	r3, r2
 800c3ae:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	461d      	mov	r5, r3
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c3c8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c3cc:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800c3d0:	e9cd ab00 	strd	sl, fp, [sp]
 800c3d4:	4a50      	ldr	r2, [pc, #320]	@ (800c518 <mg_http_serve_file+0x58c>)
 800c3d6:	2164      	movs	r1, #100	@ 0x64
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f006 ff03 	bl	80131e4 <mg_snprintf>
        fs->sk(fd->fd, r1);
 800c3de:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800c3e8:	6810      	ldr	r0, [r2, #0]
 800c3ea:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800c3ee:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800c3f2:	6812      	ldr	r2, [r2, #0]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800c3f8:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800c3fc:	f7fe fec2 	bl	800b184 <mg_http_status_code_str>
 800c400:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800c402:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c40a:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800c40c:	461d      	mov	r5, r3
 800c40e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800c41c:	2100      	movs	r1, #0
 800c41e:	4698      	mov	r8, r3
 800c420:	4689      	mov	r9, r1
 800c422:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <mg_http_serve_file+0x4a2>
 800c42a:	493c      	ldr	r1, [pc, #240]	@ (800c51c <mg_http_serve_file+0x590>)
 800c42c:	e000      	b.n	800c430 <mg_http_serve_file+0x4a4>
 800c42e:	493c      	ldr	r1, [pc, #240]	@ (800c520 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800c430:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c434:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d006      	beq.n	800c44e <mg_http_serve_file+0x4c2>
 800c440:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c444:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	e000      	b.n	800c450 <mg_http_serve_file+0x4c4>
 800c44e:	4b34      	ldr	r3, [pc, #208]	@ (800c520 <mg_http_serve_file+0x594>)
 800c450:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800c454:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 800c458:	9308      	str	r3, [sp, #32]
 800c45a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c45e:	9307      	str	r3, [sp, #28]
 800c460:	9106      	str	r1, [sp, #24]
 800c462:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800c466:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800c46a:	9302      	str	r3, [sp, #8]
 800c46c:	9201      	str	r2, [sp, #4]
 800c46e:	9500      	str	r5, [sp, #0]
 800c470:	4623      	mov	r3, r4
 800c472:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800c476:	492b      	ldr	r1, [pc, #172]	@ (800c524 <mg_http_serve_file+0x598>)
 800c478:	6800      	ldr	r0, [r0, #0]
 800c47a:	f002 fbd3 	bl	800ec24 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800c47e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800c482:	4929      	ldr	r1, [pc, #164]	@ (800c528 <mg_http_serve_file+0x59c>)
 800c484:	4618      	mov	r0, r3
 800c486:	f00a fa71 	bl	801696c <mg_str_s>
 800c48a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c48e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800c498:	cb0c      	ldmia	r3, {r2, r3}
 800c49a:	c903      	ldmia	r1, {r0, r1}
 800c49c:	f00a fb29 	bl	8016af2 <mg_strcasecmp>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10f      	bne.n	800c4c6 <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 800c4a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c4aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800c4b4:	f023 0301 	bic.w	r3, r3, #1
 800c4b8:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800c4bc:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800c4c0:	f7fd fe3a 	bl	800a138 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800c4c4:	e01e      	b.n	800c504 <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800c4c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c4ca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	33a4      	adds	r3, #164	@ 0xa4
 800c4d2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 800c4d6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c4da:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a12      	ldr	r2, [pc, #72]	@ (800c52c <mg_http_serve_file+0x5a0>)
 800c4e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800c4e6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800c4ea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800c4f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 800c4f8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800c4fc:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800c500:	601a      	str	r2, [r3, #0]
}
 800c502:	e7ff      	b.n	800c504 <mg_http_serve_file+0x578>
 800c504:	bf00      	nop
 800c506:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800c50a:	46bd      	mov	sp, r7
 800c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c510:	0802a954 	.word	0x0802a954
 800c514:	0802a95c 	.word	0x0802a95c
 800c518:	0802a97c 	.word	0x0802a97c
 800c51c:	0802a9a4 	.word	0x0802a9a4
 800c520:	0802a65c 	.word	0x0802a65c
 800c524:	0802a9c0 	.word	0x0802a9c0
 800c528:	0802aa10 	.word	0x0802aa10
 800c52c:	0800bca5 	.word	0x0800bca5

0800c530 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800c530:	b082      	sub	sp, #8
 800c532:	b590      	push	{r4, r7, lr}
 800c534:	b08f      	sub	sp, #60	@ 0x3c
 800c536:	af02      	add	r7, sp, #8
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800c540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c542:	461a      	mov	r2, r3
 800c544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	4613      	mov	r3, r2
 800c54a:	4a9c      	ldr	r2, [pc, #624]	@ (800c7bc <uri_to_path2+0x28c>)
 800c54c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c54e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c550:	f006 fe48 	bl	80131e4 <mg_snprintf>
 800c554:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	3302      	adds	r3, #2
 800c55a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d809      	bhi.n	800c574 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800c560:	4b97      	ldr	r3, [pc, #604]	@ (800c7c0 <uri_to_path2+0x290>)
 800c562:	4a98      	ldr	r2, [pc, #608]	@ (800c7c4 <uri_to_path2+0x294>)
 800c564:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7ff fb07 	bl	800bb7c <mg_http_reply>
    return -1;
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295
 800c572:	e143      	b.n	800c7fc <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800c574:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c576:	3b01      	subs	r3, #1
 800c578:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c57a:	4413      	add	r3, r2
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d012      	beq.n	800c5ac <uri_to_path2+0x7c>
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	3b01      	subs	r3, #1
 800c58a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c58c:	4413      	add	r3, r2
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b2f      	cmp	r3, #47	@ 0x2f
 800c592:	d00b      	beq.n	800c5ac <uri_to_path2+0x7c>
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	627a      	str	r2, [r7, #36]	@ 0x24
 800c59a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c59c:	4413      	add	r3, r2
 800c59e:	222f      	movs	r2, #47	@ 0x2f
 800c5a0:	701a      	strb	r2, [r3, #0]
 800c5a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	4413      	add	r3, r2
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800c5ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d212      	bcs.n	800c5dc <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	689a      	ldr	r2, [r3, #8]
 800c5ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5bc:	18d0      	adds	r0, r2, r3
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5c4:	1ad1      	subs	r1, r2, r3
 800c5c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	18d4      	adds	r4, r2, r3
 800c5cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	1ad3      	subs	r3, r2, r3
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	9200      	str	r2, [sp, #0]
 800c5d6:	4622      	mov	r2, r4
 800c5d8:	f7fe f967 	bl	800a8aa <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800c5dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5e2:	4413      	add	r3, r2
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800c5e8:	f107 0314 	add.w	r3, r7, #20
 800c5ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f00a f9d8 	bl	80169a6 <mg_str_n>
 800c5f6:	f107 0314 	add.w	r3, r7, #20
 800c5fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c5fe:	f015 fc09 	bl	8021e14 <mg_path_is_sane>
 800c602:	4603      	mov	r3, r0
 800c604:	f083 0301 	eor.w	r3, r3, #1
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800c60e:	4b6e      	ldr	r3, [pc, #440]	@ (800c7c8 <uri_to_path2+0x298>)
 800c610:	4a6c      	ldr	r2, [pc, #432]	@ (800c7c4 <uri_to_path2+0x294>)
 800c612:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fab0 	bl	800bb7c <mg_http_reply>
    return -1;
 800c61c:	f04f 33ff 	mov.w	r3, #4294967295
 800c620:	e0ec      	b.n	800c7fc <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800c622:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c624:	f7f3 fed4 	bl	80003d0 <strlen>
 800c628:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800c62a:	e007      	b.n	800c63c <uri_to_path2+0x10c>
 800c62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62e:	3b01      	subs	r3, #1
 800c630:	627b      	str	r3, [r7, #36]	@ 0x24
 800c632:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	4413      	add	r3, r2
 800c638:	2200      	movs	r2, #0
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d906      	bls.n	800c650 <uri_to_path2+0x120>
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	3b01      	subs	r3, #1
 800c646:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c64e:	d0ed      	beq.n	800c62c <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800c650:	f107 031c 	add.w	r3, r7, #28
 800c654:	495d      	ldr	r1, [pc, #372]	@ (800c7cc <uri_to_path2+0x29c>)
 800c656:	4618      	mov	r0, r3
 800c658:	f00a f988 	bl	801696c <mg_str_s>
 800c65c:	68b9      	ldr	r1, [r7, #8]
 800c65e:	f107 031c 	add.w	r3, r7, #28
 800c662:	cb0c      	ldmia	r3, {r2, r3}
 800c664:	3108      	adds	r1, #8
 800c666:	c903      	ldmia	r1, {r0, r1}
 800c668:	f00a fa01 	bl	8016a6e <mg_strcmp>
 800c66c:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d007      	beq.n	800c682 <uri_to_path2+0x152>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2200      	movs	r2, #0
 800c678:	2100      	movs	r1, #0
 800c67a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c67c:	4798      	blx	r3
 800c67e:	4603      	mov	r3, r0
 800c680:	e000      	b.n	800c684 <uri_to_path2+0x154>
 800c682:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800c684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800c686:	4b52      	ldr	r3, [pc, #328]	@ (800c7d0 <uri_to_path2+0x2a0>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	dd16      	ble.n	800c6bc <uri_to_path2+0x18c>
 800c68e:	4b51      	ldr	r3, [pc, #324]	@ (800c7d4 <uri_to_path2+0x2a4>)
 800c690:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 800c694:	4950      	ldr	r1, [pc, #320]	@ (800c7d8 <uri_to_path2+0x2a8>)
 800c696:	2004      	movs	r0, #4
 800c698:	f002 f968 	bl	800e96c <mg_log_prefix>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	4849      	ldr	r0, [pc, #292]	@ (800c7dc <uri_to_path2+0x2ac>)
 800c6b8:	f002 f9a8 	bl	800ea0c <mg_log>
              flags));
  if (flags == 0) {
 800c6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 809b 	beq.w	800c7fa <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800c6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d020      	beq.n	800c710 <uri_to_path2+0x1e0>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01c      	beq.n	800c710 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	689a      	ldr	r2, [r3, #8]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	4413      	add	r3, r2
 800c6e2:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800c6e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6e6:	d013      	beq.n	800c710 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	493b      	ldr	r1, [pc, #236]	@ (800c7e0 <uri_to_path2+0x2b0>)
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f002 fa95 	bl	800ec24 <mg_printf>
    c->is_resp = 0;
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800c700:	f023 0301 	bic.w	r3, r3, #1
 800c704:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 800c708:	f04f 33ff 	mov.w	r3, #4294967295
 800c70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c70e:	e074      	b.n	800c7fa <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	2b00      	cmp	r3, #0
 800c718:	d06f      	beq.n	800c7fa <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800c71a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71e:	18d0      	adds	r0, r2, r3
 800c720:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	4a2f      	ldr	r2, [pc, #188]	@ (800c7e4 <uri_to_path2+0x2b4>)
 800c728:	4619      	mov	r1, r3
 800c72a:	f006 fd5b 	bl	80131e4 <mg_snprintf>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d009      	beq.n	800c748 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2200      	movs	r2, #0
 800c73a:	2100      	movs	r1, #0
 800c73c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c73e:	4798      	blx	r3
 800c740:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	2b00      	cmp	r3, #0
 800c746:	d116      	bne.n	800c776 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800c748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74c:	18d0      	adds	r0, r2, r3
 800c74e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	4a24      	ldr	r2, [pc, #144]	@ (800c7e8 <uri_to_path2+0x2b8>)
 800c756:	4619      	mov	r1, r3
 800c758:	f006 fd44 	bl	80131e4 <mg_snprintf>
 800c75c:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00c      	beq.n	800c77c <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2200      	movs	r2, #0
 800c768:	2100      	movs	r1, #0
 800c76a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c76c:	4798      	blx	r3
 800c76e:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800c770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <uri_to_path2+0x24c>
      flags = tmp;
 800c776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c77a:	e03e      	b.n	800c7fa <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800c77c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	18d0      	adds	r0, r2, r3
 800c782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <uri_to_path2+0x2bc>)
 800c78a:	4619      	mov	r1, r3
 800c78c:	f006 fd2a 	bl	80131e4 <mg_snprintf>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d02c      	beq.n	800c7f0 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2200      	movs	r2, #0
 800c79c:	2100      	movs	r1, #0
 800c79e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c7a0:	4798      	blx	r3
 800c7a2:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800c7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d022      	beq.n	800c7f0 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800c7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b0:	330b      	adds	r3, #11
 800c7b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7b4:	4413      	add	r3, r2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	e01e      	b.n	800c7fa <uri_to_path2+0x2ca>
 800c7bc:	0802a0fc 	.word	0x0802a0fc
 800c7c0:	0802aa18 	.word	0x0802aa18
 800c7c4:	0802a65c 	.word	0x0802a65c
 800c7c8:	0802aa2c 	.word	0x0802aa2c
 800c7cc:	0802aa3c 	.word	0x0802aa3c
 800c7d0:	24000258 	.word	0x24000258
 800c7d4:	0802da28 	.word	0x0802da28
 800c7d8:	08029e1c 	.word	0x08029e1c
 800c7dc:	0802aa40 	.word	0x0802aa40
 800c7e0:	0802aa54 	.word	0x0802aa54
 800c7e4:	0802aa90 	.word	0x0802aa90
 800c7e8:	0802aa9c 	.word	0x0802aa9c
 800c7ec:	0802aaac 	.word	0x0802aaac
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800c7f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f4:	4413      	add	r3, r2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3734      	adds	r7, #52	@ 0x34
 800c800:	46bd      	mov	sp, r7
 800c802:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800c806:	b002      	add	sp, #8
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop

0800c80c <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b09c      	sub	sp, #112	@ 0x70
 800c810:	af06      	add	r7, sp, #24
 800c812:	6178      	str	r0, [r7, #20]
 800c814:	6139      	str	r1, [r7, #16]
 800c816:	60fa      	str	r2, [r7, #12]
 800c818:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d002      	beq.n	800c828 <uri_to_path+0x1c>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	e000      	b.n	800c82a <uri_to_path+0x1e>
 800c828:	4b5b      	ldr	r3, [pc, #364]	@ (800c998 <uri_to_path+0x18c>)
 800c82a:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f00a f898 	bl	801696c <mg_str_s>
 800c83c:	2300      	movs	r3, #0
 800c83e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c840:	2300      	movs	r3, #0
 800c842:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c844:	f107 031c 	add.w	r3, r7, #28
 800c848:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c84c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c850:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800c854:	e078      	b.n	800c948 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800c856:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c85a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c85e:	213d      	movs	r1, #61	@ 0x3d
 800c860:	9100      	str	r1, [sp, #0]
 800c862:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c866:	c903      	ldmia	r1, {r0, r1}
 800c868:	f00a fa7e 	bl	8016d68 <mg_span>
 800c86c:	4603      	mov	r3, r0
 800c86e:	f083 0301 	eor.w	r3, r3, #1
 800c872:	b2db      	uxtb	r3, r3
 800c874:	2b00      	cmp	r3, #0
 800c876:	d014      	beq.n	800c8a2 <uri_to_path+0x96>
 800c878:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c87c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c880:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c884:	e883 0003 	stmia.w	r3, {r0, r1}
 800c888:	463b      	mov	r3, r7
 800c88a:	2200      	movs	r2, #0
 800c88c:	2100      	movs	r1, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f00a f889 	bl	80169a6 <mg_str_n>
 800c894:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c898:	463a      	mov	r2, r7
 800c89a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c89e:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800c8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d123      	bne.n	800c8f0 <uri_to_path+0xe4>
 800c8a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800c8ac:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c8b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	4938      	ldr	r1, [pc, #224]	@ (800c99c <uri_to_path+0x190>)
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f00a f855 	bl	801696c <mg_str_s>
 800c8c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c8c6:	463a      	mov	r2, r7
 800c8c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8d4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c8d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8e0:	f107 031c 	add.w	r3, r7, #28
 800c8e4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800c8e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8ec:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	68da      	ldr	r2, [r3, #12]
 800c8f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d323      	bcc.n	800c942 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	6899      	ldr	r1, [r3, #8]
 800c8fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c900:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c904:	4618      	mov	r0, r3
 800c906:	f00a f84e 	bl	80169a6 <mg_str_n>
 800c90a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800c90e:	cb0c      	ldmia	r3, {r2, r3}
 800c910:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800c914:	c903      	ldmia	r1, {r0, r1}
 800c916:	f00a f8aa 	bl	8016a6e <mg_strcmp>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d112      	bne.n	800c946 <uri_to_path+0x13a>
    u = k, p = v;
 800c920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c924:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c92c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c930:	f107 031c 	add.w	r3, r7, #28
 800c934:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800c938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c93c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c940:	e002      	b.n	800c948 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800c942:	bf00      	nop
 800c944:	e000      	b.n	800c948 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800c946:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800c948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c94c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c950:	212c      	movs	r1, #44	@ 0x2c
 800c952:	9100      	str	r1, [sp, #0]
 800c954:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800c958:	c903      	ldmia	r1, {r0, r1}
 800c95a:	f00a fa05 	bl	8016d68 <mg_span>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	f47f af78 	bne.w	800c856 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800c966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	9303      	str	r3, [sp, #12]
 800c96e:	aa01      	add	r2, sp, #4
 800c970:	f107 031c 	add.w	r3, r7, #28
 800c974:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c978:	e882 0003 	stmia.w	r2, {r0, r1}
 800c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c982:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c984:	6939      	ldr	r1, [r7, #16]
 800c986:	6978      	ldr	r0, [r7, #20]
 800c988:	f7ff fdd2 	bl	800c530 <uri_to_path2>
 800c98c:	4603      	mov	r3, r0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3758      	adds	r7, #88	@ 0x58
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	24000038 	.word	0x24000038
 800c99c:	0802aa3c 	.word	0x0802aa3c

0800c9a0 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b0a6      	sub	sp, #152	@ 0x98
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800c9b4:	f107 0314 	add.w	r3, r7, #20
 800c9b8:	2264      	movs	r2, #100	@ 0x64
 800c9ba:	9200      	str	r2, [sp, #0]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	68b9      	ldr	r1, [r7, #8]
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f7ff ff23 	bl	800c80c <uri_to_path>
 800c9c6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800c9ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	db41      	blt.n	800ca56 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800c9d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d007      	beq.n	800c9ee <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800c9de:	4b20      	ldr	r3, [pc, #128]	@ (800ca60 <mg_http_serve_dir+0xc0>)
 800c9e0:	4a20      	ldr	r2, [pc, #128]	@ (800ca64 <mg_http_serve_dir+0xc4>)
 800c9e2:	f240 1193 	movw	r1, #403	@ 0x193
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f7ff f8c8 	bl	800bb7c <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800c9ec:	e033      	b.n	800ca56 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800c9ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d028      	beq.n	800ca48 <mg_http_serve_dir+0xa8>
 800c9f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d024      	beq.n	800ca48 <mg_http_serve_dir+0xa8>
 800c9fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800ca02:	f107 0214 	add.w	r2, r7, #20
 800ca06:	4611      	mov	r1, r2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f009 ffaf 	bl	801696c <mg_str_s>
 800ca0e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ca12:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800ca16:	4618      	mov	r0, r3
 800ca18:	f009 ffa8 	bl	801696c <mg_str_s>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ca24:	cb0c      	ldmia	r3, {r2, r3}
 800ca26:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800ca2a:	c903      	ldmia	r1, {r0, r1}
 800ca2c:	f00a f8a8 	bl	8016b80 <mg_match>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d008      	beq.n	800ca48 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f107 0214 	add.w	r2, r7, #20
 800ca3e:	4619      	mov	r1, r3
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f009 ff7f 	bl	8016944 <mg_http_serve_ssi>
}
 800ca46:	e006      	b.n	800ca56 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800ca48:	f107 0214 	add.w	r2, r7, #20
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	68b9      	ldr	r1, [r7, #8]
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fa9b 	bl	800bf8c <mg_http_serve_file>
}
 800ca56:	bf00      	nop
 800ca58:	3790      	adds	r7, #144	@ 0x90
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	0802aabc 	.word	0x0802aabc
 800ca64:	0802a65c 	.word	0x0802a65c

0800ca68 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800ca68:	b590      	push	{r4, r7, lr}
 800ca6a:	b0cf      	sub	sp, #316	@ 0x13c
 800ca6c:	af02      	add	r7, sp, #8
 800ca6e:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800ca72:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800ca76:	6020      	str	r0, [r4, #0]
 800ca78:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800ca7c:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800ca80:	6001      	str	r1, [r0, #0]
 800ca82:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800ca86:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800ca8a:	600a      	str	r2, [r1, #0]
 800ca8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca90:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ca94:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800ca96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800ca9e:	497a      	ldr	r1, [pc, #488]	@ (800cc88 <mg_http_creds+0x220>)
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f7fd fff5 	bl	800aa90 <mg_http_get_header>
 800caa6:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800caaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2200      	movs	r2, #0
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cabc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	781a      	ldrb	r2, [r3, #0]
 800cac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cac8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800cad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d05e      	beq.n	800cb96 <mg_http_creds+0x12e>
 800cad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b06      	cmp	r3, #6
 800cae0:	d959      	bls.n	800cb96 <mg_http_creds+0x12e>
 800cae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2206      	movs	r2, #6
 800caea:	4968      	ldr	r1, [pc, #416]	@ (800cc8c <mg_http_creds+0x224>)
 800caec:	4618      	mov	r0, r3
 800caee:	f01a fe25 	bl	802773c <memcmp>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d14e      	bne.n	800cb96 <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800caf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	1d98      	adds	r0, r3, #6
 800cb00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	1f99      	subs	r1, r3, #6
 800cb08:	f107 0214 	add.w	r2, r7, #20
 800cb0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb10:	f7fb fa10 	bl	8007f34 <mg_base64_decode>
 800cb14:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800cb18:	f107 0314 	add.w	r3, r7, #20
 800cb1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cb20:	213a      	movs	r1, #58	@ 0x3a
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7f3 fc04 	bl	8000330 <memchr>
 800cb28:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800cb2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 80a2 	beq.w	800cc7a <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800cb36:	f107 0314 	add.w	r3, r7, #20
 800cb3a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb44:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800cb48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb4c:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800cb50:	f107 0314 	add.w	r3, r7, #20
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	4613      	mov	r3, r2
 800cb58:	4a4d      	ldr	r2, [pc, #308]	@ (800cc90 <mg_http_creds+0x228>)
 800cb5a:	6809      	ldr	r1, [r1, #0]
 800cb5c:	6800      	ldr	r0, [r0, #0]
 800cb5e:	f006 fb41 	bl	80131e4 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800cb62:	f107 0314 	add.w	r3, r7, #20
 800cb66:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	1e5a      	subs	r2, r3, #1
 800cb76:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800cb80:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	4613      	mov	r3, r2
 800cb88:	4a41      	ldr	r2, [pc, #260]	@ (800cc90 <mg_http_creds+0x228>)
 800cb8a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cb8e:	6800      	ldr	r0, [r0, #0]
 800cb90:	f006 fb28 	bl	80131e4 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800cb94:	e071      	b.n	800cc7a <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800cb96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d024      	beq.n	800cbe8 <mg_http_creds+0x180>
 800cb9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	2b07      	cmp	r3, #7
 800cba6:	d91f      	bls.n	800cbe8 <mg_http_creds+0x180>
 800cba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2207      	movs	r2, #7
 800cbb0:	4938      	ldr	r1, [pc, #224]	@ (800cc94 <mg_http_creds+0x22c>)
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f01a fdc2 	bl	802773c <memcmp>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d114      	bne.n	800cbe8 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800cbbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	1fda      	subs	r2, r3, #7
 800cbc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3307      	adds	r3, #7
 800cbce:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800cbd2:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	4a2d      	ldr	r2, [pc, #180]	@ (800cc90 <mg_http_creds+0x228>)
 800cbdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cbe0:	6800      	ldr	r0, [r0, #0]
 800cbe2:	f006 faff 	bl	80131e4 <mg_snprintf>
 800cbe6:	e049      	b.n	800cc7c <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800cbe8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cbec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800cbf0:	4929      	ldr	r1, [pc, #164]	@ (800cc98 <mg_http_creds+0x230>)
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	f7fd ff4c 	bl	800aa90 <mg_http_get_header>
 800cbf8:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800cbfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d028      	beq.n	800cc56 <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800cc04:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800cc08:	220c      	movs	r2, #12
 800cc0a:	4924      	ldr	r1, [pc, #144]	@ (800cc9c <mg_http_creds+0x234>)
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f009 feca 	bl	80169a6 <mg_str_n>
 800cc12:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800cc16:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800cc1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cc24:	ca06      	ldmia	r2, {r1, r2}
 800cc26:	f000 f864 	bl	800ccf2 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800cc2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d024      	beq.n	800cc7c <mg_http_creds+0x214>
 800cc32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cc36:	4619      	mov	r1, r3
 800cc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc3c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cc40:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	460b      	mov	r3, r1
 800cc48:	4a11      	ldr	r2, [pc, #68]	@ (800cc90 <mg_http_creds+0x228>)
 800cc4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800cc4e:	6800      	ldr	r0, [r0, #0]
 800cc50:	f006 fac8 	bl	80131e4 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800cc54:	e012      	b.n	800cc7c <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800cc56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc5a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f103 0010 	add.w	r0, r3, #16
 800cc64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc68:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800cc6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800cc70:	6812      	ldr	r2, [r2, #0]
 800cc72:	490a      	ldr	r1, [pc, #40]	@ (800cc9c <mg_http_creds+0x234>)
 800cc74:	f7fd fda4 	bl	800a7c0 <mg_http_get_var>
}
 800cc78:	e000      	b.n	800cc7c <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800cc7a:	bf00      	nop
}
 800cc7c:	bf00      	nop
 800cc7e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd90      	pop	{r4, r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0802aad0 	.word	0x0802aad0
 800cc8c:	0802aae0 	.word	0x0802aae0
 800cc90:	0802a0fc 	.word	0x0802a0fc
 800cc94:	0802aae8 	.word	0x0802aae8
 800cc98:	0802aaf0 	.word	0x0802aaf0
 800cc9c:	0802aaf8 	.word	0x0802aaf8

0800cca0 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	1d3b      	adds	r3, r7, #4
 800ccaa:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800ccae:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d913      	bls.n	800ccdc <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b22      	cmp	r3, #34	@ 0x22
 800ccba:	d10f      	bne.n	800ccdc <stripquotes+0x3c>
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	4413      	add	r3, r2
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b22      	cmp	r3, #34	@ 0x22
 800ccc8:	d108      	bne.n	800ccdc <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	1c59      	adds	r1, r3, #1
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	1e9a      	subs	r2, r3, #2
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f009 fe66 	bl	80169a6 <mg_str_n>
             : s;
 800ccda:	e006      	b.n	800ccea <stripquotes+0x4a>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	461a      	mov	r2, r3
 800cce0:	1d3b      	adds	r3, r7, #4
 800cce2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cce6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08c      	sub	sp, #48	@ 0x30
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	1d38      	adds	r0, r7, #4
 800ccfe:	e880 0006 	stmia.w	r0, {r1, r2}
 800cd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800cd04:	2300      	movs	r3, #0
 800cd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd08:	e072      	b.n	800cdf0 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd10:	440b      	add	r3, r1
 800cd12:	4413      	add	r3, r2
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	2b3d      	cmp	r3, #61	@ 0x3d
 800cd18:	d167      	bne.n	800cdea <mg_http_get_header_var+0xf8>
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1e:	4413      	add	r3, r2
 800cd20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd24:	4618      	mov	r0, r3
 800cd26:	f01a fd09 	bl	802773c <memcmp>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d15c      	bne.n	800cdea <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd36:	440b      	add	r3, r1
 800cd38:	3301      	adds	r3, #1
 800cd3a:	4413      	add	r3, r2
 800cd3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	4413      	add	r3, r2
 800cd48:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800cd4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d205      	bcs.n	800cd5e <mg_http_get_header_var+0x6c>
 800cd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b22      	cmp	r3, #34	@ 0x22
 800cd58:	d101      	bne.n	800cd5e <mg_http_get_header_var+0x6c>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e000      	b.n	800cd60 <mg_http_get_header_var+0x6e>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800cd62:	e002      	b.n	800cd6a <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800cd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd66:	3301      	adds	r3, #1
 800cd68:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800cd6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d227      	bcs.n	800cdc2 <mg_http_get_header_var+0xd0>
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d010      	beq.n	800cd9a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800cd78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d003      	beq.n	800cd88 <mg_http_get_header_var+0x96>
 800cd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	2b22      	cmp	r3, #34	@ 0x22
 800cd86:	d001      	beq.n	800cd8c <mg_http_get_header_var+0x9a>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e000      	b.n	800cd8e <mg_http_get_header_var+0x9c>
 800cd8c:	2300      	movs	r3, #0
      while (p < x &&
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1e5      	bne.n	800cd64 <mg_http_get_header_var+0x72>
 800cd98:	e013      	b.n	800cdc2 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800cd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b3b      	cmp	r3, #59	@ 0x3b
 800cda0:	d009      	beq.n	800cdb6 <mg_http_get_header_var+0xc4>
 800cda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b20      	cmp	r3, #32
 800cda8:	d005      	beq.n	800cdb6 <mg_http_get_header_var+0xc4>
 800cdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b2c      	cmp	r3, #44	@ 0x2c
 800cdb0:	d001      	beq.n	800cdb6 <mg_http_get_header_var+0xc4>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <mg_http_get_header_var+0xc6>
 800cdb6:	2300      	movs	r3, #0
      while (p < x &&
 800cdb8:	f003 0301 	and.w	r3, r3, #1
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1d0      	bne.n	800cd64 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800cdc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc6:	1ad2      	subs	r2, r2, r3
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	4413      	add	r3, r2
 800cdcc:	461a      	mov	r2, r3
 800cdce:	f107 0314 	add.w	r3, r7, #20
 800cdd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f009 fde6 	bl	80169a6 <mg_str_n>
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f107 0314 	add.w	r3, r7, #20
 800cde0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cde4:	f7ff ff5c 	bl	800cca0 <stripquotes>
 800cde8:	e012      	b.n	800ce10 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800cdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdec:	3301      	adds	r3, #1
 800cdee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d006      	beq.n	800ce04 <mg_http_get_header_var+0x112>
 800cdf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfa:	4413      	add	r3, r2
 800cdfc:	1c9a      	adds	r2, r3, #2
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d382      	bcc.n	800cd0a <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f009 fdcb 	bl	80169a6 <mg_str_n>
}
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	3730      	adds	r7, #48	@ 0x30
 800ce14:	46bd      	mov	sp, r7
 800ce16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce1a:	b002      	add	sp, #8
 800ce1c:	4770      	bx	lr

0800ce1e <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f018 fdfd 	bl	8025a2a <atoi>
 800ce30:	4603      	mov	r3, r0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <is_hex_digit>:

static bool is_hex_digit(int c) {
 800ce3a:	b480      	push	{r7}
 800ce3c:	b083      	sub	sp, #12
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce46:	dd02      	ble.n	800ce4e <is_hex_digit+0x14>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b39      	cmp	r3, #57	@ 0x39
 800ce4c:	dd0b      	ble.n	800ce66 <is_hex_digit+0x2c>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b60      	cmp	r3, #96	@ 0x60
 800ce52:	dd02      	ble.n	800ce5a <is_hex_digit+0x20>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b66      	cmp	r3, #102	@ 0x66
 800ce58:	dd05      	ble.n	800ce66 <is_hex_digit+0x2c>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b40      	cmp	r3, #64	@ 0x40
 800ce5e:	dd04      	ble.n	800ce6a <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b46      	cmp	r3, #70	@ 0x46
 800ce64:	dc01      	bgt.n	800ce6a <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800ce66:	2301      	movs	r3, #1
 800ce68:	e000      	b.n	800ce6c <is_hex_digit+0x32>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	b2db      	uxtb	r3, r3
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	370c      	adds	r7, #12
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b08a      	sub	sp, #40	@ 0x28
 800ce82:	af02      	add	r7, sp, #8
 800ce84:	60f8      	str	r0, [r7, #12]
 800ce86:	60b9      	str	r1, [r7, #8]
 800ce88:	607a      	str	r2, [r7, #4]
 800ce8a:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	61fb      	str	r3, [r7, #28]
 800ce90:	2300      	movs	r3, #0
 800ce92:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	dc04      	bgt.n	800cea4 <skip_chunk+0x26>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e07a      	b.n	800cf94 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	3301      	adds	r3, #1
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	69fa      	ldr	r2, [r7, #28]
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	da09      	bge.n	800cec0 <skip_chunk+0x42>
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff ffc0 	bl	800ce3a <is_hex_digit>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1ee      	bne.n	800ce9e <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <skip_chunk+0x4e>
 800cec6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceca:	e063      	b.n	800cf94 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b08      	cmp	r3, #8
 800ced0:	dd02      	ble.n	800ced8 <skip_chunk+0x5a>
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295
 800ced6:	e05d      	b.n	800cf94 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800ced8:	69fa      	ldr	r2, [r7, #28]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	429a      	cmp	r2, r3
 800cede:	da0c      	bge.n	800cefa <skip_chunk+0x7c>
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b0d      	cmp	r3, #13
 800ceea:	d106      	bne.n	800cefa <skip_chunk+0x7c>
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	3301      	adds	r3, #1
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4413      	add	r3, r2
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b0a      	cmp	r3, #10
 800cef8:	d002      	beq.n	800cf00 <skip_chunk+0x82>
 800cefa:	f04f 33ff 	mov.w	r3, #4294967295
 800cefe:	e049      	b.n	800cf94 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800cf00:	69fa      	ldr	r2, [r7, #28]
 800cf02:	f107 0314 	add.w	r3, r7, #20
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f009 fd4c 	bl	80169a6 <mg_str_n>
 800cf0e:	f107 0310 	add.w	r3, r7, #16
 800cf12:	2204      	movs	r2, #4
 800cf14:	9200      	str	r2, [sp, #0]
 800cf16:	2210      	movs	r2, #16
 800cf18:	f107 0114 	add.w	r1, r7, #20
 800cf1c:	c903      	ldmia	r1, {r0, r1}
 800cf1e:	f009 ff80 	bl	8016e22 <mg_str_to_num>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f083 0301 	eor.w	r3, r3, #1
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800cf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf32:	e02f      	b.n	800cf94 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	da02      	bge.n	800cf40 <skip_chunk+0xc2>
 800cf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3e:	e029      	b.n	800cf94 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	1eda      	subs	r2, r3, #3
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	dc01      	bgt.n	800cf52 <skip_chunk+0xd4>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e020      	b.n	800cf94 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	4413      	add	r3, r2
 800cf58:	3302      	adds	r3, #2
 800cf5a:	68fa      	ldr	r2, [r7, #12]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b0d      	cmp	r3, #13
 800cf62:	d108      	bne.n	800cf76 <skip_chunk+0xf8>
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	4413      	add	r3, r2
 800cf6a:	3303      	adds	r3, #3
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b0a      	cmp	r3, #10
 800cf74:	d002      	beq.n	800cf7c <skip_chunk+0xfe>
 800cf76:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7a:	e00b      	b.n	800cf94 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	1c9a      	adds	r2, r3, #2
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	1c9a      	adds	r2, r3, #2
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	4413      	add	r3, r2
 800cf92:	3302      	adds	r3, #2
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3720      	adds	r7, #32
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfa8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cfac:	6018      	str	r0, [r3, #0]
 800cfae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfb2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cfb6:	6019      	str	r1, [r3, #0]
 800cfb8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfbc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800cfc0:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800cfc2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfc6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b07      	cmp	r3, #7
 800cfce:	d031      	beq.n	800d034 <http_cb+0x98>
 800cfd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfd4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b09      	cmp	r3, #9
 800cfdc:	d02a      	beq.n	800d034 <http_cb+0x98>
 800cfde:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cfe2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	f040 8368 	bne.w	800d6be <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800cfee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cff2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cffc:	f003 0304 	and.w	r3, r3, #4
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 835b 	beq.w	800d6be <http_cb+0x722>
 800d008:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d00c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d016:	f003 0310 	and.w	r3, r3, #16
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f040 834e 	bne.w	800d6be <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 800d022:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d026:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 8345 	beq.w	800d6be <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800d034:	2300      	movs	r3, #0
 800d036:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800d03a:	e313      	b.n	800d664 <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 800d03c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d040:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d048:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d04c:	4413      	add	r3, r2
 800d04e:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800d052:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d056:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d05e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	f107 0210 	add.w	r2, r7, #16
 800d068:	4619      	mov	r1, r3
 800d06a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800d06e:	f7fd fecb 	bl	800ae08 <mg_http_parse>
 800d072:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800d076:	2300      	movs	r3, #0
 800d078:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800d07c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d080:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d088:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800d08c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d090:	2b00      	cmp	r3, #0
 800d092:	da38      	bge.n	800d106 <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800d094:	4bb7      	ldr	r3, [pc, #732]	@ (800d374 <http_cb+0x3d8>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	dd10      	ble.n	800d0be <http_cb+0x122>
 800d09c:	4bb6      	ldr	r3, [pc, #728]	@ (800d378 <http_cb+0x3dc>)
 800d09e:	f640 12a6 	movw	r2, #2470	@ 0x9a6
 800d0a2:	49b6      	ldr	r1, [pc, #728]	@ (800d37c <http_cb+0x3e0>)
 800d0a4:	2001      	movs	r0, #1
 800d0a6:	f001 fc61 	bl	800e96c <mg_log_prefix>
 800d0aa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0ae:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	48b1      	ldr	r0, [pc, #708]	@ (800d380 <http_cb+0x3e4>)
 800d0ba:	f001 fca7 	bl	800ea0c <mg_log>
        c->is_draining = 1;
 800d0be:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0c2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d0cc:	f043 0310 	orr.w	r3, r3, #16
 800d0d0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800d0d4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0d8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d0e0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	2b10      	cmp	r3, #16
 800d0e8:	bf28      	it	cs
 800d0ea:	2310      	movcs	r3, #16
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800d0f2:	f001 fcc1 	bl	800ea78 <mg_hexdump>
        c->recv.len = 0;
 800d0f6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d0fa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2200      	movs	r2, #0
 800d102:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800d104:	e2db      	b.n	800d6be <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800d106:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 82c2 	beq.w	800d694 <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800d110:	f107 0210 	add.w	r2, r7, #16
 800d114:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d118:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d11c:	210a      	movs	r1, #10
 800d11e:	6818      	ldr	r0, [r3, #0]
 800d120:	f7fb fd8c 	bl	8008c3c <mg_call>
      if (c->recv.len != old_len) {
 800d124:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d128:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d130:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800d134:	429a      	cmp	r2, r3
 800d136:	d01d      	beq.n	800d174 <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800d138:	4b8e      	ldr	r3, [pc, #568]	@ (800d374 <http_cb+0x3d8>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	dd10      	ble.n	800d162 <http_cb+0x1c6>
 800d140:	4b8d      	ldr	r3, [pc, #564]	@ (800d378 <http_cb+0x3dc>)
 800d142:	f44f 621b 	mov.w	r2, #2480	@ 0x9b0
 800d146:	498d      	ldr	r1, [pc, #564]	@ (800d37c <http_cb+0x3e0>)
 800d148:	2003      	movs	r0, #3
 800d14a:	f001 fc0f 	bl	800e96c <mg_log_prefix>
 800d14e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d152:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d15a:	4619      	mov	r1, r3
 800d15c:	4889      	ldr	r0, [pc, #548]	@ (800d384 <http_cb+0x3e8>)
 800d15e:	f001 fc55 	bl	800ea0c <mg_log>
        c->pfn = NULL;
 800d162:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d166:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800d172:	e2a4      	b.n	800d6be <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800d174:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d178:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b09      	cmp	r3, #9
 800d180:	d128      	bne.n	800d1d4 <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800d182:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d186:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d18e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d192:	1ad2      	subs	r2, r2, r3
 800d194:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d198:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d19c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800d1a0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d1a4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d1a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d1ac:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800d1b0:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800d1b4:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800d1b8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800d1bc:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800d1c0:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800d1c4:	1a8a      	subs	r2, r1, r2
 800d1c6:	1a9a      	subs	r2, r3, r2
 800d1c8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d1cc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d1d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800d1d4:	f107 0310 	add.w	r3, r7, #16
 800d1d8:	496b      	ldr	r1, [pc, #428]	@ (800d388 <http_cb+0x3ec>)
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fd fc58 	bl	800aa90 <mg_http_get_header>
 800d1e0:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800d1e4:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01d      	beq.n	800d228 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800d1ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800d1f0:	4966      	ldr	r1, [pc, #408]	@ (800d38c <http_cb+0x3f0>)
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f009 fbba 	bl	801696c <mg_str_s>
 800d1f8:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800d1fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800d200:	cb0c      	ldmia	r3, {r2, r3}
 800d202:	c903      	ldmia	r1, {r0, r1}
 800d204:	f009 fc75 	bl	8016af2 <mg_strcasecmp>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d103      	bne.n	800d216 <http_cb+0x27a>
          is_chunked = true;
 800d20e:	2301      	movs	r3, #1
 800d210:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800d214:	e0cf      	b.n	800d3b6 <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800d216:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d21a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d21e:	495c      	ldr	r1, [pc, #368]	@ (800d390 <http_cb+0x3f4>)
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	f7fb fd2b 	bl	8008c7c <mg_error>
          return;
 800d226:	e24a      	b.n	800d6be <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800d228:	f107 0310 	add.w	r3, r7, #16
 800d22c:	4959      	ldr	r1, [pc, #356]	@ (800d394 <http_cb+0x3f8>)
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fd fc2e 	bl	800aa90 <mg_http_get_header>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	f040 80bd 	bne.w	800d3b6 <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800d23c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d240:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2205      	movs	r2, #5
 800d248:	4953      	ldr	r1, [pc, #332]	@ (800d398 <http_cb+0x3fc>)
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fd f991 	bl	800a572 <mg_ncasecmp>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	bf0c      	ite	eq
 800d256:	2301      	moveq	r3, #1
 800d258:	2300      	movne	r3, #0
 800d25a:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800d25e:	2300      	movs	r3, #0
 800d260:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800d264:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800d268:	f083 0301 	eor.w	r3, r3, #1
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d030      	beq.n	800d2d4 <http_cb+0x338>
 800d272:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d276:	4949      	ldr	r1, [pc, #292]	@ (800d39c <http_cb+0x400>)
 800d278:	4618      	mov	r0, r3
 800d27a:	f009 fb77 	bl	801696c <mg_str_s>
 800d27e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d282:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800d286:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d28a:	cb0c      	ldmia	r3, {r2, r3}
 800d28c:	c903      	ldmia	r1, {r0, r1}
 800d28e:	f009 fc30 	bl	8016af2 <mg_strcasecmp>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d012      	beq.n	800d2be <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800d298:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d29c:	4940      	ldr	r1, [pc, #256]	@ (800d3a0 <http_cb+0x404>)
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f009 fb64 	bl	801696c <mg_str_s>
 800d2a4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d2a8:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800d2ac:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800d2b0:	cb0c      	ldmia	r3, {r2, r3}
 800d2b2:	c903      	ldmia	r1, {r0, r1}
 800d2b4:	f009 fc1d 	bl	8016af2 <mg_strcasecmp>
 800d2b8:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10a      	bne.n	800d2d4 <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800d2c4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d2c8:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800d2d2:	e022      	b.n	800d31a <http_cb+0x37e>
        } else if (is_response) {
 800d2d4:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d01e      	beq.n	800d31a <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800d2dc:	f107 0310 	add.w	r3, r7, #16
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff fd9c 	bl	800ce1e <mg_http_status>
 800d2e6:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800d2ea:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800d2ee:	2bc7      	cmp	r3, #199	@ 0xc7
 800d2f0:	dd0a      	ble.n	800d308 <http_cb+0x36c>
 800d2f2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800d2f6:	2bcc      	cmp	r3, #204	@ 0xcc
 800d2f8:	d006      	beq.n	800d308 <http_cb+0x36c>
 800d2fa:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800d2fe:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800d302:	d001      	beq.n	800d308 <http_cb+0x36c>
 800d304:	2301      	movs	r3, #1
 800d306:	e000      	b.n	800d30a <http_cb+0x36e>
 800d308:	2300      	movs	r3, #0
 800d30a:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800d30e:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800d312:	f003 0301 	and.w	r3, r3, #1
 800d316:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800d31a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d049      	beq.n	800d3b6 <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800d322:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d326:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <http_cb+0x3b4>
 800d33a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d33e:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800d342:	4b18      	ldr	r3, [pc, #96]	@ (800d3a4 <http_cb+0x408>)
 800d344:	4a17      	ldr	r2, [pc, #92]	@ (800d3a4 <http_cb+0x408>)
 800d346:	f240 119b 	movw	r1, #411	@ 0x19b
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	f7fe fc16 	bl	800bb7c <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 800d350:	4b08      	ldr	r3, [pc, #32]	@ (800d374 <http_cb+0x3d8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	dd2e      	ble.n	800d3b6 <http_cb+0x41a>
 800d358:	4b07      	ldr	r3, [pc, #28]	@ (800d378 <http_cb+0x3dc>)
 800d35a:	f640 12d3 	movw	r2, #2515	@ 0x9d3
 800d35e:	4907      	ldr	r1, [pc, #28]	@ (800d37c <http_cb+0x3e0>)
 800d360:	2001      	movs	r0, #1
 800d362:	f001 fb03 	bl	800e96c <mg_log_prefix>
 800d366:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d01e      	beq.n	800d3ac <http_cb+0x410>
 800d36e:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a8 <http_cb+0x40c>)
 800d370:	e01d      	b.n	800d3ae <http_cb+0x412>
 800d372:	bf00      	nop
 800d374:	24000258 	.word	0x24000258
 800d378:	0802da38 	.word	0x0802da38
 800d37c:	08029e1c 	.word	0x08029e1c
 800d380:	0802abb0 	.word	0x0802abb0
 800d384:	0802abc8 	.word	0x0802abc8
 800d388:	0802abe4 	.word	0x0802abe4
 800d38c:	0802abf8 	.word	0x0802abf8
 800d390:	0802ac00 	.word	0x0802ac00
 800d394:	0802ac1c 	.word	0x0802ac1c
 800d398:	0802a178 	.word	0x0802a178
 800d39c:	0802a194 	.word	0x0802a194
 800d3a0:	0802a190 	.word	0x0802a190
 800d3a4:	0802a65c 	.word	0x0802a65c
 800d3a8:	0802ac2c 	.word	0x0802ac2c
 800d3ac:	4bc6      	ldr	r3, [pc, #792]	@ (800d6c8 <http_cb+0x72c>)
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	48c6      	ldr	r0, [pc, #792]	@ (800d6cc <http_cb+0x730>)
 800d3b2:	f001 fb2b 	bl	800ea0c <mg_log>
        }
      }

      if (is_chunked) {
 800d3b6:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 80c9 	beq.w	800d552 <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800d3c0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d3c4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3cc:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800d3d0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d3d4:	440b      	add	r3, r1
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800d3dc:	2300      	movs	r3, #0
 800d3de:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d3e2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d3e6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3ee:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d3f2:	1ad2      	subs	r2, r2, r3
 800d3f4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800d3fe:	e006      	b.n	800d40e <http_cb+0x472>
 800d400:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800d404:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d408:	4413      	add	r3, r2
 800d40a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d40e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d412:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d416:	18d0      	adds	r0, r2, r3
 800d418:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800d41c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d420:	1ad1      	subs	r1, r2, r3
 800d422:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800d426:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800d42a:	f7ff fd28 	bl	800ce7e <skip_chunk>
 800d42e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800d432:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d436:	2b00      	cmp	r3, #0
 800d438:	dd03      	ble.n	800d442 <http_cb+0x4a6>
 800d43a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1de      	bne.n	800d400 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800d442:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 8126 	beq.w	800d698 <http_cb+0x6fc>
        if (cl < 0) {
 800d44c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d450:	2b00      	cmp	r3, #0
 800d452:	da08      	bge.n	800d466 <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 800d454:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d458:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d45c:	499c      	ldr	r1, [pc, #624]	@ (800d6d0 <http_cb+0x734>)
 800d45e:	6818      	ldr	r0, [r3, #0]
 800d460:	f7fb fc0c 	bl	8008c7c <mg_error>
          break;
 800d464:	e11b      	b.n	800d69e <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800d466:	2300      	movs	r3, #0
 800d468:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d46c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d470:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d474:	2200      	movs	r2, #0
 800d476:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800d47a:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800d47e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d482:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d486:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800d48a:	e03e      	b.n	800d50a <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800d48c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d490:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d494:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d498:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d49c:	18d0      	adds	r0, r2, r3
 800d49e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d4a2:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	f01a f952 	bl	802775c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800d4b8:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800d4bc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800d4c6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4ca:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d4ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d4d2:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800d4d6:	441a      	add	r2, r3
 800d4d8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4dc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d4e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800d4e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4e8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d4ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d4f0:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800d4f4:	441a      	add	r2, r3
 800d4f6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d4fa:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d4fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800d502:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800d506:	2b00      	cmp	r3, #0
 800d508:	d016      	beq.n	800d538 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800d50a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d50e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800d512:	18d0      	adds	r0, r2, r3
 800d514:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800d518:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d51c:	1ad1      	subs	r1, r2, r3
 800d51e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800d522:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800d526:	f7ff fcaa 	bl	800ce7e <skip_chunk>
 800d52a:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800d52e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800d532:	2b00      	cmp	r3, #0
 800d534:	dcaa      	bgt.n	800d48c <http_cb+0x4f0>
 800d536:	e000      	b.n	800d53a <http_cb+0x59e>
          if (dl == 0) break;
 800d538:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800d53a:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800d53e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800d542:	4413      	add	r3, r2
 800d544:	461a      	mov	r2, r3
 800d546:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d54a:	4413      	add	r3, r2
 800d54c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800d550:	e026      	b.n	800d5a0 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800d552:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d556:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d55e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d562:	1ad2      	subs	r2, r2, r3
 800d564:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800d56e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d572:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d576:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d57a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800d57e:	429a      	cmp	r2, r3
 800d580:	f0c0 808c 	bcc.w	800d69c <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800d584:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d588:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800d58c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d590:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800d594:	4413      	add	r3, r2
 800d596:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d59a:	4413      	add	r3, r2
 800d59c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800d5a0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5a4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d5ae:	f003 0304 	and.w	r3, r3, #4
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <http_cb+0x632>
 800d5b8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5bc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800d5c6:	f043 0301 	orr.w	r3, r3, #1
 800d5ca:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800d5ce:	f107 0210 	add.w	r2, r7, #16
 800d5d2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5d6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5da:	210b      	movs	r1, #11
 800d5dc:	6818      	ldr	r0, [r3, #0]
 800d5de:	f7fb fb2d 	bl	8008c3c <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800d5e2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5e6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d034      	beq.n	800d664 <http_cb+0x6c8>
 800d5fa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d5fe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d128      	bne.n	800d664 <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800d612:	f107 0310 	add.w	r3, r7, #16
 800d616:	492f      	ldr	r1, [pc, #188]	@ (800d6d4 <http_cb+0x738>)
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fd fa39 	bl	800aa90 <mg_http_get_header>
 800d61e:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800d622:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800d626:	2b00      	cmp	r3, #0
 800d628:	d01c      	beq.n	800d664 <http_cb+0x6c8>
 800d62a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800d62e:	492a      	ldr	r1, [pc, #168]	@ (800d6d8 <http_cb+0x73c>)
 800d630:	4618      	mov	r0, r3
 800d632:	f009 f99b 	bl	801696c <mg_str_s>
 800d636:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800d63a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800d63e:	cb0c      	ldmia	r3, {r2, r3}
 800d640:	c903      	ldmia	r1, {r0, r1}
 800d642:	f009 fa56 	bl	8016af2 <mg_strcasecmp>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10b      	bne.n	800d664 <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 800d64c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d650:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800d65a:	f043 0310 	orr.w	r3, r3, #16
 800d65e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800d662:	e01c      	b.n	800d69e <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800d664:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d668:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800d672:	f003 0301 	and.w	r3, r3, #1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d110      	bne.n	800d69e <http_cb+0x702>
 800d67c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d680:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d688:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d68c:	429a      	cmp	r2, r3
 800d68e:	f4ff acd5 	bcc.w	800d03c <http_cb+0xa0>
 800d692:	e004      	b.n	800d69e <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800d694:	bf00      	nop
 800d696:	e002      	b.n	800d69e <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800d698:	bf00      	nop
 800d69a:	e000      	b.n	800d69e <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 800d69c:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800d69e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00b      	beq.n	800d6be <http_cb+0x722>
 800d6a6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800d6aa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	3338      	adds	r3, #56	@ 0x38
 800d6b2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f000 f93f 	bl	800d93c <mg_iobuf_del>
  }
  (void) ev_data;
}
 800d6be:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	0802ac38 	.word	0x0802ac38
 800d6cc:	0802ac40 	.word	0x0802ac40
 800d6d0:	0802ac60 	.word	0x0802ac60
 800d6d4:	0802ac70 	.word	0x0802ac70
 800d6d8:	0802ac7c 	.word	0x0802ac7c

0800d6dc <mg_http_connect>:
  while (done == false) mg_mgr_poll(&mgr, 100);
  mg_mgr_free(&mgr);
}

struct mg_connection *mg_http_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fn_data) {
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	68b9      	ldr	r1, [r7, #8]
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f001 fdb9 	bl	800f268 <mg_connect>
 800d6f6:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <mg_http_connect+0x2a>
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	4a03      	ldr	r2, [pc, #12]	@ (800d710 <mg_http_connect+0x34>)
 800d702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800d706:	697b      	ldr	r3, [r7, #20]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	0800cf9d 	.word	0x0800cf9d

0800d714 <mg_http_listen>:

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f001 fe3b 	bl	800f3a4 <mg_listen>
 800d72e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <mg_http_listen+0x2a>
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	4a03      	ldr	r2, [pc, #12]	@ (800d748 <mg_http_listen+0x34>)
 800d73a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800d73e:	697b      	ldr	r3, [r7, #20]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	0800cf9d 	.word	0x0800cf9d

0800d74c <roundup>:





static size_t roundup(size_t size, size_t align) {
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d00a      	beq.n	800d772 <roundup+0x26>
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	4413      	add	r3, r2
 800d762:	1e5a      	subs	r2, r3, #1
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	fbb2 f3f3 	udiv	r3, r2, r3
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	fb02 f303 	mul.w	r3, r2, r3
 800d770:	e000      	b.n	800d774 <roundup+0x28>
 800d772:	687b      	ldr	r3, [r7, #4]
}
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800d780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d784:	b088      	sub	sp, #32
 800d786:	af02      	add	r7, sp, #8
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800d78c:	2301      	movs	r3, #1
 800d78e:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	4619      	mov	r1, r3
 800d796:	6838      	ldr	r0, [r7, #0]
 800d798:	f7ff ffd8 	bl	800d74c <roundup>
 800d79c:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d117      	bne.n	800d7d4 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f014 fa96 	bl	8021ce0 <mg_bzero>
    free(io->buf);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f018 f95f 	bl	8025a7c <free>
    io->buf = NULL;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	605a      	str	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	609a      	str	r2, [r3, #8]
 800d7d2:	e053      	b.n	800d87c <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d04e      	beq.n	800d87c <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	2001      	movs	r0, #1
 800d7e2:	f018 f927 	bl	8025a34 <calloc>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d028      	beq.n	800d842 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	bf28      	it	cs
 800d7fa:	4613      	movcs	r3, r2
 800d7fc:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00a      	beq.n	800d81a <mg_iobuf_resize+0x9a>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d006      	beq.n	800d81a <mg_iobuf_resize+0x9a>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4619      	mov	r1, r3
 800d814:	6938      	ldr	r0, [r7, #16]
 800d816:	f019 ffa1 	bl	802775c <memmove>
      mg_bzero(io->buf, io->size);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	4619      	mov	r1, r3
 800d824:	4610      	mov	r0, r2
 800d826:	f014 fa5b 	bl	8021ce0 <mg_bzero>
      free(io->buf);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f018 f924 	bl	8025a7c <free>
      io->buf = (unsigned char *) p;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	693a      	ldr	r2, [r7, #16]
 800d838:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	605a      	str	r2, [r3, #4]
 800d840:	e01c      	b.n	800d87c <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800d846:	4b10      	ldr	r3, [pc, #64]	@ (800d888 <mg_iobuf_resize+0x108>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dd16      	ble.n	800d87c <mg_iobuf_resize+0xfc>
 800d84e:	4b0f      	ldr	r3, [pc, #60]	@ (800d88c <mg_iobuf_resize+0x10c>)
 800d850:	f640 224d 	movw	r2, #2637	@ 0xa4d
 800d854:	490e      	ldr	r1, [pc, #56]	@ (800d890 <mg_iobuf_resize+0x110>)
 800d856:	2001      	movs	r0, #1
 800d858:	f001 f888 	bl	800e96c <mg_log_prefix>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	4698      	mov	r8, r3
 800d864:	4691      	mov	r9, r2
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	2200      	movs	r2, #0
 800d86a:	461c      	mov	r4, r3
 800d86c:	4615      	mov	r5, r2
 800d86e:	e9cd 4500 	strd	r4, r5, [sp]
 800d872:	4642      	mov	r2, r8
 800d874:	464b      	mov	r3, r9
 800d876:	4807      	ldr	r0, [pc, #28]	@ (800d894 <mg_iobuf_resize+0x114>)
 800d878:	f001 f8c8 	bl	800ea0c <mg_log>
    }
  }
  return ok;
 800d87c:	697b      	ldr	r3, [r7, #20]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d888:	24000258 	.word	0x24000258
 800d88c:	0802da40 	.word	0x0802da40
 800d890:	08029e1c 	.word	0x08029e1c
 800d894:	0802acbc 	.word	0x0802acbc

0800d898 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	689a      	ldr	r2, [r3, #8]
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	441a      	add	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	f7ff ff49 	bl	800d74c <roundup>
 800d8ba:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800d8bc:	6979      	ldr	r1, [r7, #20]
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7ff ff5e 	bl	800d780 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d001      	beq.n	800d8d2 <mg_iobuf_add+0x3a>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d210      	bcs.n	800d8fe <mg_iobuf_add+0x66>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	440b      	add	r3, r1
 800d8e6:	18d0      	adds	r0, r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	18d1      	adds	r1, r2, r3
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	689a      	ldr	r2, [r3, #8]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	f019 ff2f 	bl	802775c <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d008      	beq.n	800d916 <mg_iobuf_add+0x7e>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	4413      	add	r3, r2
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f019 ff23 	bl	802775c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d902      	bls.n	800d926 <mg_iobuf_add+0x8e>
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	609a      	str	r2, [r3, #8]
  io->len += len;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	689a      	ldr	r2, [r3, #8]
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	441a      	add	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	609a      	str	r2, [r3, #8]
  return len;
 800d932:	683b      	ldr	r3, [r7, #0]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d902      	bls.n	800d958 <mg_iobuf_del+0x1c>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	441a      	add	r2, r3
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	429a      	cmp	r2, r3
 800d964:	d904      	bls.n	800d970 <mg_iobuf_del+0x34>
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	689a      	ldr	r2, [r3, #8]
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d012      	beq.n	800d99e <mg_iobuf_del+0x62>
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	18d0      	adds	r0, r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	440b      	add	r3, r1
 800d98a:	18d1      	adds	r1, r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	1ad2      	subs	r2, r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	461a      	mov	r2, r3
 800d99a:	f019 fedf 	bl	802775c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <mg_iobuf_del+0x80>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6899      	ldr	r1, [r3, #8]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	1acb      	subs	r3, r1, r3
 800d9b2:	4413      	add	r3, r2
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f014 f992 	bl	8021ce0 <mg_bzero>
  io->len -= len;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	689a      	ldr	r2, [r3, #8]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	1ad2      	subs	r2, r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	609a      	str	r2, [r3, #8]
  return len;
 800d9c8:	687b      	ldr	r3, [r7, #4]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800d9da:	2100      	movs	r1, #0
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff fecf 	bl	800d780 <mg_iobuf_resize>
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
	...

0800d9ec <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <escapeseq+0x12>
 800d9fa:	4b04      	ldr	r3, [pc, #16]	@ (800da0c <escapeseq+0x20>)
 800d9fc:	e000      	b.n	800da00 <escapeseq+0x14>
 800d9fe:	4b04      	ldr	r3, [pc, #16]	@ (800da10 <escapeseq+0x24>)
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	0802acc8 	.word	0x0802acc8
 800da10:	0802acd0 	.word	0x0802acd0

0800da14 <json_esc>:

static char json_esc(int c, int esc) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800da1e:	6838      	ldr	r0, [r7, #0]
 800da20:	f7ff ffe4 	bl	800d9ec <escapeseq>
 800da24:	6138      	str	r0, [r7, #16]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	bf0c      	ite	eq
 800da2c:	2301      	moveq	r3, #1
 800da2e:	2300      	movne	r3, #0
 800da30:	b2db      	uxtb	r3, r3
 800da32:	4618      	mov	r0, r3
 800da34:	f7ff ffda 	bl	800d9ec <escapeseq>
 800da38:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	617b      	str	r3, [r7, #20]
 800da3e:	e010      	b.n	800da62 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4293      	cmp	r3, r2
 800da4a:	d107      	bne.n	800da5c <json_esc+0x48>
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	461a      	mov	r2, r3
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4413      	add	r3, r2
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	e007      	b.n	800da6c <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	3301      	adds	r3, #1
 800da60:	617b      	str	r3, [r7, #20]
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1ea      	bne.n	800da40 <json_esc+0x2c>
  }
  return 0;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3718      	adds	r7, #24
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800da7e:	2300      	movs	r3, #0
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	e02e      	b.n	800dae2 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	4413      	add	r3, r2
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b5c      	cmp	r3, #92	@ 0x5c
 800da8e:	d114      	bne.n	800daba <mg_pass_string+0x46>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3301      	adds	r3, #1
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	429a      	cmp	r2, r3
 800da98:	dd0f      	ble.n	800daba <mg_pass_string+0x46>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3301      	adds	r3, #1
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	4413      	add	r3, r2
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	2101      	movs	r1, #1
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff ffb4 	bl	800da14 <json_esc>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d003      	beq.n	800daba <mg_pass_string+0x46>
      i++;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3301      	adds	r3, #1
 800dab6:	60fb      	str	r3, [r7, #12]
 800dab8:	e010      	b.n	800dadc <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	4413      	add	r3, r2
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d102      	bne.n	800dacc <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800dac6:	f06f 0301 	mvn.w	r3, #1
 800daca:	e010      	b.n	800daee <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	4413      	add	r3, r2
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b22      	cmp	r3, #34	@ 0x22
 800dad6:	d101      	bne.n	800dadc <mg_pass_string+0x68>
      return i;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	e008      	b.n	800daee <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3301      	adds	r3, #1
 800dae0:	60fb      	str	r3, [r7, #12]
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	dbcc      	blt.n	800da84 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800daea:	f06f 0301 	mvn.w	r3, #1
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
	...

0800daf8 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800daf8:	b480      	push	{r7}
 800dafa:	b091      	sub	sp, #68	@ 0x44
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800db04:	f04f 0200 	mov.w	r2, #0
 800db08:	f04f 0300 	mov.w	r3, #0
 800db0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800db10:	2300      	movs	r3, #0
 800db12:	637b      	str	r3, [r7, #52]	@ 0x34
 800db14:	2301      	movs	r3, #1
 800db16:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800db18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	da0a      	bge.n	800db36 <mg_atod+0x3e>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b2d      	cmp	r3, #45	@ 0x2d
 800db26:	d106      	bne.n	800db36 <mg_atod+0x3e>
    sign = -1, i++;
 800db28:	f04f 33ff 	mov.w	r3, #4294967295
 800db2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800db2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db30:	3301      	adds	r3, #1
 800db32:	637b      	str	r3, [r7, #52]	@ 0x34
 800db34:	e00a      	b.n	800db4c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800db36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	da21      	bge.n	800db82 <mg_atod+0x8a>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	2b2b      	cmp	r3, #43	@ 0x2b
 800db44:	d11d      	bne.n	800db82 <mg_atod+0x8a>
    i++;
 800db46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db48:	3301      	adds	r3, #1
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800db4c:	e019      	b.n	800db82 <mg_atod+0x8a>
    d *= 10.0;
 800db4e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800db52:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800db56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db5a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800db5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	3b30      	subs	r3, #48	@ 0x30
 800db68:	ee07 3a90 	vmov	s15, r3
 800db6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800db70:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800db74:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db78:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800db7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db7e:	3301      	adds	r3, #1
 800db80:	637b      	str	r3, [r7, #52]	@ 0x34
 800db82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	da0b      	bge.n	800dba2 <mg_atod+0xaa>
 800db8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b2f      	cmp	r3, #47	@ 0x2f
 800db94:	d905      	bls.n	800dba2 <mg_atod+0xaa>
 800db96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	4413      	add	r3, r2
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b39      	cmp	r3, #57	@ 0x39
 800dba0:	d9d5      	bls.n	800db4e <mg_atod+0x56>
  }
  d *= sign;
 800dba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba4:	ee07 3a90 	vmov	s15, r3
 800dba8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dbac:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800dbb0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dbb4:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800dbb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	da51      	bge.n	800dc64 <mg_atod+0x16c>
 800dbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbca:	d14b      	bne.n	800dc64 <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800dbcc:	f04f 0200 	mov.w	r2, #0
 800dbd0:	f04f 0300 	mov.w	r3, #0
 800dbd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800dbd8:	a36d      	add	r3, pc, #436	@ (adr r3, 800dd90 <mg_atod+0x298>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800dbe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800dbe8:	e01d      	b.n	800dc26 <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800dbea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4413      	add	r3, r2
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	3b30      	subs	r3, #48	@ 0x30
 800dbf4:	ee07 3a90 	vmov	s15, r3
 800dbf8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800dbfc:	ed97 7b08 	vldr	d7, [r7, #32]
 800dc00:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc04:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800dc08:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc0c:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800dc10:	ed97 6b08 	vldr	d6, [r7, #32]
 800dc14:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800dc18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dc1c:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800dc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc22:	3301      	adds	r3, #1
 800dc24:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	da0b      	bge.n	800dc46 <mg_atod+0x14e>
 800dc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	4413      	add	r3, r2
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc38:	d905      	bls.n	800dc46 <mg_atod+0x14e>
 800dc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc3c:	68fa      	ldr	r2, [r7, #12]
 800dc3e:	4413      	add	r3, r2
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b39      	cmp	r3, #57	@ 0x39
 800dc44:	d9d1      	bls.n	800dbea <mg_atod+0xf2>
    }
    d += frac * sign;
 800dc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc48:	ee07 3a90 	vmov	s15, r3
 800dc4c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800dc50:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800dc54:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc58:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800dc5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc60:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800dc64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	da7e      	bge.n	800dd6a <mg_atod+0x272>
 800dc6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	4413      	add	r3, r2
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b65      	cmp	r3, #101	@ 0x65
 800dc76:	d005      	beq.n	800dc84 <mg_atod+0x18c>
 800dc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc7a:	68fa      	ldr	r2, [r7, #12]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b45      	cmp	r3, #69	@ 0x45
 800dc82:	d172      	bne.n	800dd6a <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	61bb      	str	r3, [r7, #24]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	617b      	str	r3, [r7, #20]
    i++;
 800dc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc8e:	3301      	adds	r3, #1
 800dc90:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800dc92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	da0a      	bge.n	800dcb0 <mg_atod+0x1b8>
 800dc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	4413      	add	r3, r2
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dca4:	d104      	bne.n	800dcb0 <mg_atod+0x1b8>
 800dca6:	2301      	movs	r3, #1
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcac:	3301      	adds	r3, #1
 800dcae:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800dcb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	da19      	bge.n	800dcec <mg_atod+0x1f4>
 800dcb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	2b2b      	cmp	r3, #43	@ 0x2b
 800dcc2:	d113      	bne.n	800dcec <mg_atod+0x1f4>
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800dcca:	e00f      	b.n	800dcec <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800dccc:	69ba      	ldr	r2, [r7, #24]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4413      	add	r3, r2
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	637a      	str	r2, [r7, #52]	@ 0x34
 800dcde:	461a      	mov	r2, r3
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	3b30      	subs	r3, #48	@ 0x30
 800dce8:	440b      	add	r3, r1
 800dcea:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800dcec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	da0f      	bge.n	800dd14 <mg_atod+0x21c>
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2b2f      	cmp	r3, #47	@ 0x2f
 800dcfe:	d909      	bls.n	800dd14 <mg_atod+0x21c>
 800dd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	4413      	add	r3, r2
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b39      	cmp	r3, #57	@ 0x39
 800dd0a:	d803      	bhi.n	800dd14 <mg_atod+0x21c>
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800dd12:	dbdb      	blt.n	800dccc <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <mg_atod+0x228>
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	425b      	negs	r3, r3
 800dd1e:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	e00a      	b.n	800dd3c <mg_atod+0x244>
 800dd26:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800dd2a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800dd2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd32:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	61fb      	str	r3, [r7, #28]
 800dd3c:	69fa      	ldr	r2, [r7, #28]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	dbf0      	blt.n	800dd26 <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	61fb      	str	r3, [r7, #28]
 800dd48:	e00a      	b.n	800dd60 <mg_atod+0x268>
 800dd4a:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800dd4e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800dd52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd56:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	61fb      	str	r3, [r7, #28]
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	425b      	negs	r3, r3
 800dd64:	69fa      	ldr	r2, [r7, #28]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	dbef      	blt.n	800dd4a <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <mg_atod+0x27e>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd74:	601a      	str	r2, [r3, #0]
  return d;
 800dd76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800dd7a:	ec43 2b17 	vmov	d7, r2, r3
}
 800dd7e:	eeb0 0b47 	vmov.f64	d0, d7
 800dd82:	3744      	adds	r7, #68	@ 0x44
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	f3af 8000 	nop.w
 800dd90:	9999999a 	.word	0x9999999a
 800dd94:	3fb99999 	.word	0x3fb99999

0800dd98 <mg_json_next>:

// Iterate over object or array elements
size_t mg_json_next(struct mg_str obj, size_t ofs, struct mg_str *key,
                    struct mg_str *val) {
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b08d      	sub	sp, #52	@ 0x34
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	f107 0410 	add.w	r4, r7, #16
 800dda2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dda6:	60fa      	str	r2, [r7, #12]
 800dda8:	60bb      	str	r3, [r7, #8]
  if (ofs >= obj.len) {
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d302      	bcc.n	800ddb8 <mg_json_next+0x20>
    ofs = 0;  // Out of boundaries, stop scanning
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
 800ddb6:	e133      	b.n	800e020 <mg_json_next+0x288>
  } else if (obj.len < 2 || (*obj.buf != '{' && *obj.buf != '[')) {
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d907      	bls.n	800ddce <mg_json_next+0x36>
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b7b      	cmp	r3, #123	@ 0x7b
 800ddc4:	d006      	beq.n	800ddd4 <mg_json_next+0x3c>
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b5b      	cmp	r3, #91	@ 0x5b
 800ddcc:	d002      	beq.n	800ddd4 <mg_json_next+0x3c>
    ofs = 0;  // Not an array or object, stop
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
 800ddd2:	e125      	b.n	800e020 <mg_json_next+0x288>
  } else {
    struct mg_str sub = mg_str_n(obj.buf + ofs, obj.len - ofs);
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	18d1      	adds	r1, r2, r3
 800ddda:	697a      	ldr	r2, [r7, #20]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	1ad2      	subs	r2, r2, r3
 800dde0:	f107 0320 	add.w	r3, r7, #32
 800dde4:	4618      	mov	r0, r3
 800dde6:	f008 fdde 	bl	80169a6 <mg_str_n>
    if (ofs == 0) ofs++, sub.buf++, sub.len--;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d108      	bne.n	800de02 <mg_json_next+0x6a>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	60fb      	str	r3, [r7, #12]
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	623b      	str	r3, [r7, #32]
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfe:	3b01      	subs	r3, #1
 800de00:	627b      	str	r3, [r7, #36]	@ 0x24
    if (*obj.buf == '[') {  // Iterate over an array
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	2b5b      	cmp	r3, #91	@ 0x5b
 800de08:	d146      	bne.n	800de98 <mg_json_next+0x100>
      int n = 0, o = mg_json_get(sub, "$", &n);
 800de0a:	2300      	movs	r3, #0
 800de0c:	61fb      	str	r3, [r7, #28]
 800de0e:	f107 031c 	add.w	r3, r7, #28
 800de12:	4a86      	ldr	r2, [pc, #536]	@ (800e02c <mg_json_next+0x294>)
 800de14:	f107 0120 	add.w	r1, r7, #32
 800de18:	c903      	ldmia	r1, {r0, r1}
 800de1a:	f000 f909 	bl	800e030 <mg_json_get>
 800de1e:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	2b00      	cmp	r3, #0
 800de24:	db09      	blt.n	800de3a <mg_json_next+0xa2>
 800de26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de28:	2b00      	cmp	r3, #0
 800de2a:	db06      	blt.n	800de3a <mg_json_next+0xa2>
 800de2c:	69fa      	ldr	r2, [r7, #28]
 800de2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de30:	4413      	add	r3, r2
 800de32:	461a      	mov	r2, r3
 800de34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de36:	429a      	cmp	r2, r3
 800de38:	d902      	bls.n	800de40 <mg_json_next+0xa8>
        ofs = 0;  // Error parsing key, stop scanning
 800de3a:	2300      	movs	r3, #0
 800de3c:	60fb      	str	r3, [r7, #12]
 800de3e:	e0b6      	b.n	800dfae <mg_json_next+0x216>
      } else {
        if (key) *key = mg_str_n(NULL, 0);
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00c      	beq.n	800de60 <mg_json_next+0xc8>
 800de46:	68bc      	ldr	r4, [r7, #8]
 800de48:	463b      	mov	r3, r7
 800de4a:	2200      	movs	r2, #0
 800de4c:	2100      	movs	r1, #0
 800de4e:	4618      	mov	r0, r3
 800de50:	f008 fda9 	bl	80169a6 <mg_str_n>
 800de54:	4622      	mov	r2, r4
 800de56:	463b      	mov	r3, r7
 800de58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de5c:	e882 0003 	stmia.w	r2, {r0, r1}
        if (val) *val = mg_str_n(sub.buf + o, (size_t) n);
 800de60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00f      	beq.n	800de86 <mg_json_next+0xee>
 800de66:	6a3a      	ldr	r2, [r7, #32]
 800de68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6a:	18d1      	adds	r1, r2, r3
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	461a      	mov	r2, r3
 800de70:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800de72:	463b      	mov	r3, r7
 800de74:	4618      	mov	r0, r3
 800de76:	f008 fd96 	bl	80169a6 <mg_str_n>
 800de7a:	4622      	mov	r2, r4
 800de7c:	463b      	mov	r3, r7
 800de7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de82:	e882 0003 	stmia.w	r2, {r0, r1}
        ofs = (size_t) (&sub.buf[o + n] - obj.buf);
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	69f9      	ldr	r1, [r7, #28]
 800de8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de8c:	440a      	add	r2, r1
 800de8e:	441a      	add	r2, r3
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	e08e      	b.n	800dfb6 <mg_json_next+0x21e>
      }
    } else {  // Iterate over an object
      int n = 0, o = mg_json_get(sub, "$", &n);
 800de98:	2300      	movs	r3, #0
 800de9a:	61bb      	str	r3, [r7, #24]
 800de9c:	f107 0318 	add.w	r3, r7, #24
 800dea0:	4a62      	ldr	r2, [pc, #392]	@ (800e02c <mg_json_next+0x294>)
 800dea2:	f107 0120 	add.w	r1, r7, #32
 800dea6:	c903      	ldmia	r1, {r0, r1}
 800dea8:	f000 f8c2 	bl	800e030 <mg_json_get>
 800deac:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	db09      	blt.n	800dec8 <mg_json_next+0x130>
 800deb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	db06      	blt.n	800dec8 <mg_json_next+0x130>
 800deba:	69ba      	ldr	r2, [r7, #24]
 800debc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debe:	4413      	add	r3, r2
 800dec0:	461a      	mov	r2, r3
 800dec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d902      	bls.n	800dece <mg_json_next+0x136>
        ofs = 0;  // Error parsing key, stop scanning
 800dec8:	2300      	movs	r3, #0
 800deca:	60fb      	str	r3, [r7, #12]
 800decc:	e06f      	b.n	800dfae <mg_json_next+0x216>
      } else {
        if (key) *key = mg_str_n(sub.buf + o, (size_t) n);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00f      	beq.n	800def4 <mg_json_next+0x15c>
 800ded4:	6a3a      	ldr	r2, [r7, #32]
 800ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded8:	18d1      	adds	r1, r2, r3
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	461a      	mov	r2, r3
 800dede:	68bc      	ldr	r4, [r7, #8]
 800dee0:	463b      	mov	r3, r7
 800dee2:	4618      	mov	r0, r3
 800dee4:	f008 fd5f 	bl	80169a6 <mg_str_n>
 800dee8:	4622      	mov	r2, r4
 800deea:	463b      	mov	r3, r7
 800deec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800def0:	e882 0003 	stmia.w	r2, {r0, r1}
        sub.buf += o + n, sub.len -= (size_t) (o + n);
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	69b9      	ldr	r1, [r7, #24]
 800def8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800defa:	440a      	add	r2, r1
 800defc:	4413      	add	r3, r2
 800defe:	623b      	str	r3, [r7, #32]
 800df00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df02:	69b9      	ldr	r1, [r7, #24]
 800df04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df06:	440a      	add	r2, r1
 800df08:	1a9b      	subs	r3, r3, r2
 800df0a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (sub.len > 0 && *sub.buf != ':') sub.len--, sub.buf++;
 800df0c:	e005      	b.n	800df1a <mg_json_next+0x182>
 800df0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df10:	3b01      	subs	r3, #1
 800df12:	627b      	str	r3, [r7, #36]	@ 0x24
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	3301      	adds	r3, #1
 800df18:	623b      	str	r3, [r7, #32]
 800df1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d003      	beq.n	800df28 <mg_json_next+0x190>
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	2b3a      	cmp	r3, #58	@ 0x3a
 800df26:	d1f2      	bne.n	800df0e <mg_json_next+0x176>
        if (sub.len > 0 && *sub.buf == ':') sub.len--, sub.buf++;
 800df28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <mg_json_next+0x1aa>
 800df2e:	6a3b      	ldr	r3, [r7, #32]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2b3a      	cmp	r3, #58	@ 0x3a
 800df34:	d105      	bne.n	800df42 <mg_json_next+0x1aa>
 800df36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df38:	3b01      	subs	r3, #1
 800df3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	3301      	adds	r3, #1
 800df40:	623b      	str	r3, [r7, #32]
        n = 0, o = mg_json_get(sub, "$", &n);
 800df42:	2300      	movs	r3, #0
 800df44:	61bb      	str	r3, [r7, #24]
 800df46:	f107 0318 	add.w	r3, r7, #24
 800df4a:	4a38      	ldr	r2, [pc, #224]	@ (800e02c <mg_json_next+0x294>)
 800df4c:	f107 0120 	add.w	r1, r7, #32
 800df50:	c903      	ldmia	r1, {r0, r1}
 800df52:	f000 f86d 	bl	800e030 <mg_json_get>
 800df56:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	db09      	blt.n	800df72 <mg_json_next+0x1da>
 800df5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df60:	2b00      	cmp	r3, #0
 800df62:	db06      	blt.n	800df72 <mg_json_next+0x1da>
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df68:	4413      	add	r3, r2
 800df6a:	461a      	mov	r2, r3
 800df6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6e:	429a      	cmp	r2, r3
 800df70:	d902      	bls.n	800df78 <mg_json_next+0x1e0>
          ofs = 0;  // Error parsing value, stop scanning
 800df72:	2300      	movs	r3, #0
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	e01a      	b.n	800dfae <mg_json_next+0x216>
        } else {
          if (val) *val = mg_str_n(sub.buf + o, (size_t) n);
 800df78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00f      	beq.n	800df9e <mg_json_next+0x206>
 800df7e:	6a3a      	ldr	r2, [r7, #32]
 800df80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df82:	18d1      	adds	r1, r2, r3
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	461a      	mov	r2, r3
 800df88:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800df8a:	463b      	mov	r3, r7
 800df8c:	4618      	mov	r0, r3
 800df8e:	f008 fd0a 	bl	80169a6 <mg_str_n>
 800df92:	4622      	mov	r2, r4
 800df94:	463b      	mov	r3, r7
 800df96:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df9a:	e882 0003 	stmia.w	r2, {r0, r1}
          ofs = (size_t) (&sub.buf[o + n] - obj.buf);
 800df9e:	6a3b      	ldr	r3, [r7, #32]
 800dfa0:	69b9      	ldr	r1, [r7, #24]
 800dfa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfa4:	440a      	add	r2, r1
 800dfa6:	441a      	add	r2, r3
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	60fb      	str	r3, [r7, #12]
        }
      }
    }
    // MG_INFO(("SUB ofs %u %.*s", ofs, sub.len, sub.buf));
    while (ofs && ofs < obj.len &&
 800dfae:	e002      	b.n	800dfb6 <mg_json_next+0x21e>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
      ofs++;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	60fb      	str	r3, [r7, #12]
    while (ofs && ofs < obj.len &&
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d01b      	beq.n	800dff4 <mg_json_next+0x25c>
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d217      	bcs.n	800dff4 <mg_json_next+0x25c>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	4413      	add	r3, r2
 800dfca:	781b      	ldrb	r3, [r3, #0]
    while (ofs && ofs < obj.len &&
 800dfcc:	2b20      	cmp	r3, #32
 800dfce:	d0ef      	beq.n	800dfb0 <mg_json_next+0x218>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b09      	cmp	r3, #9
 800dfda:	d0e9      	beq.n	800dfb0 <mg_json_next+0x218>
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	781b      	ldrb	r3, [r3, #0]
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800dfe4:	2b0a      	cmp	r3, #10
 800dfe6:	d0e3      	beq.n	800dfb0 <mg_json_next+0x218>
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
 800dfe8:	693a      	ldr	r2, [r7, #16]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	4413      	add	r3, r2
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	2b0d      	cmp	r3, #13
 800dff2:	d0dd      	beq.n	800dfb0 <mg_json_next+0x218>
    }
    if (ofs && ofs < obj.len && obj.buf[ofs] == ',') ofs++;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00c      	beq.n	800e014 <mg_json_next+0x27c>
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d208      	bcs.n	800e014 <mg_json_next+0x27c>
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4413      	add	r3, r2
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	2b2c      	cmp	r3, #44	@ 0x2c
 800e00c:	d102      	bne.n	800e014 <mg_json_next+0x27c>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3301      	adds	r3, #1
 800e012:	60fb      	str	r3, [r7, #12]
    if (ofs > obj.len) ofs = 0;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d901      	bls.n	800e020 <mg_json_next+0x288>
 800e01c:	2300      	movs	r3, #0
 800e01e:	60fb      	str	r3, [r7, #12]
  }
  return ofs;
 800e020:	68fb      	ldr	r3, [r7, #12]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3734      	adds	r7, #52	@ 0x34
 800e026:	46bd      	mov	sp, r7
 800e028:	bd90      	pop	{r4, r7, pc}
 800e02a:	bf00      	nop
 800e02c:	0802acd8 	.word	0x0802acd8

0800e030 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800e030:	b590      	push	{r4, r7, lr}
 800e032:	b09b      	sub	sp, #108	@ 0x6c
 800e034:	af00      	add	r7, sp, #0
 800e036:	f107 0408 	add.w	r4, r7, #8
 800e03a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e03e:	607a      	str	r2, [r7, #4]
 800e040:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800e04a:	2300      	movs	r3, #0
 800e04c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800e050:	2300      	movs	r3, #0
 800e052:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800e054:	2300      	movs	r3, #0
 800e056:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800e058:	2300      	movs	r3, #0
 800e05a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800e05c:	2300      	movs	r3, #0
 800e05e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800e060:	2301      	movs	r3, #1
 800e062:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800e064:	f04f 33ff 	mov.w	r3, #4294967295
 800e068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e06a:	f04f 33ff 	mov.w	r3, #4294967295
 800e06e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <mg_json_get+0x4c>
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	2b24      	cmp	r3, #36	@ 0x24
 800e082:	d002      	beq.n	800e08a <mg_json_get+0x5a>
 800e084:	f06f 0301 	mvn.w	r3, #1
 800e088:	e308      	b.n	800e69c <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800e08a:	2300      	movs	r3, #0
 800e08c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e08e:	e2fe      	b.n	800e68e <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800e090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e094:	4413      	add	r3, r2
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800e09c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0a0:	2b20      	cmp	r3, #32
 800e0a2:	f000 82ee 	beq.w	800e682 <mg_json_get+0x652>
 800e0a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0aa:	2b09      	cmp	r3, #9
 800e0ac:	f000 82e9 	beq.w	800e682 <mg_json_get+0x652>
 800e0b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0b4:	2b0a      	cmp	r3, #10
 800e0b6:	f000 82e4 	beq.w	800e682 <mg_json_get+0x652>
 800e0ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0be:	2b0d      	cmp	r3, #13
 800e0c0:	f000 82df 	beq.w	800e682 <mg_json_get+0x652>
    switch (expecting) {
 800e0c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	f200 82dd 	bhi.w	800e688 <mg_json_get+0x658>
 800e0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d4 <mg_json_get+0xa4>)
 800e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d4:	0800e0e5 	.word	0x0800e0e5
 800e0d8:	0800e3cd 	.word	0x0800e3cd
 800e0dc:	0800e55b 	.word	0x0800e55b
 800e0e0:	0800e571 	.word	0x0800e571
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800e0e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d101      	bne.n	800e0f0 <mg_json_get+0xc0>
 800e0ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e0ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800e0f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e0f4:	2b7b      	cmp	r3, #123	@ 0x7b
 800e0f6:	d12b      	bne.n	800e150 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800e0f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0fa:	2b1d      	cmp	r3, #29
 800e0fc:	dd02      	ble.n	800e104 <mg_json_get+0xd4>
 800e0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e102:	e2cb      	b.n	800e69c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800e104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e108:	429a      	cmp	r2, r3
 800e10a:	d114      	bne.n	800e136 <mg_json_get+0x106>
 800e10c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	4413      	add	r3, r2
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	2b2e      	cmp	r3, #46	@ 0x2e
 800e116:	d10e      	bne.n	800e136 <mg_json_get+0x106>
 800e118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d10a      	bne.n	800e136 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800e120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e122:	3301      	adds	r3, #1
 800e124:	657b      	str	r3, [r7, #84]	@ 0x54
 800e126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e128:	3301      	adds	r3, #1
 800e12a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e12c:	f04f 33ff 	mov.w	r3, #4294967295
 800e130:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e134:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800e136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e13c:	3368      	adds	r3, #104	@ 0x68
 800e13e:	443b      	add	r3, r7
 800e140:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e144:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800e148:	2301      	movs	r3, #1
 800e14a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800e14e:	e29b      	b.n	800e688 <mg_json_get+0x658>
        } else if (c == '[') {
 800e150:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e154:	2b5b      	cmp	r3, #91	@ 0x5b
 800e156:	d14e      	bne.n	800e1f6 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800e158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e15a:	2b1d      	cmp	r3, #29
 800e15c:	dd02      	ble.n	800e164 <mg_json_get+0x134>
 800e15e:	f04f 33ff 	mov.w	r3, #4294967295
 800e162:	e29b      	b.n	800e69c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800e164:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e168:	429a      	cmp	r2, r3
 800e16a:	d13a      	bne.n	800e1e2 <mg_json_get+0x1b2>
 800e16c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	4413      	add	r3, r2
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2b5b      	cmp	r3, #91	@ 0x5b
 800e176:	d134      	bne.n	800e1e2 <mg_json_get+0x1b2>
 800e178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e17a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d130      	bne.n	800e1e2 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800e180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e182:	3301      	adds	r3, #1
 800e184:	657b      	str	r3, [r7, #84]	@ 0x54
 800e186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e188:	3301      	adds	r3, #1
 800e18a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e18c:	2300      	movs	r3, #0
 800e18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800e190:	2300      	movs	r3, #0
 800e192:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e194:	e010      	b.n	800e1b8 <mg_json_get+0x188>
              ei *= 10;
 800e196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e198:	4613      	mov	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	005b      	lsls	r3, r3, #1
 800e1a0:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800e1a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	3b30      	subs	r3, #48	@ 0x30
 800e1ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1ae:	4413      	add	r3, r2
 800e1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800e1b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	2b5d      	cmp	r3, #93	@ 0x5d
 800e1c2:	d005      	beq.n	800e1d0 <mg_json_get+0x1a0>
 800e1c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1e2      	bne.n	800e196 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800e1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <mg_json_get+0x1b2>
 800e1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1de:	3301      	adds	r3, #1
 800e1e0:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800e1e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e1e8:	3368      	adds	r3, #104	@ 0x68
 800e1ea:	443b      	add	r3, r7
 800e1ec:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e1f0:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800e1f4:	e248      	b.n	800e688 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800e1f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e1fa:	2b5d      	cmp	r3, #93	@ 0x5d
 800e1fc:	d13a      	bne.n	800e274 <mg_json_get+0x244>
 800e1fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e200:	2b00      	cmp	r3, #0
 800e202:	dd37      	ble.n	800e274 <mg_json_get+0x244>
          MG_EOO(']');
 800e204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e208:	429a      	cmp	r2, r3
 800e20a:	d106      	bne.n	800e21a <mg_json_get+0x1ea>
 800e20c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e20e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e210:	429a      	cmp	r2, r3
 800e212:	d002      	beq.n	800e21a <mg_json_get+0x1ea>
 800e214:	f06f 0302 	mvn.w	r3, #2
 800e218:	e240      	b.n	800e69c <mg_json_get+0x66c>
 800e21a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e21e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e220:	3b01      	subs	r3, #1
 800e222:	3368      	adds	r3, #104	@ 0x68
 800e224:	443b      	add	r3, r7
 800e226:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e22a:	3302      	adds	r3, #2
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d002      	beq.n	800e236 <mg_json_get+0x206>
 800e230:	f06f 0301 	mvn.w	r3, #1
 800e234:	e232      	b.n	800e69c <mg_json_get+0x66c>
 800e236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e238:	3b01      	subs	r3, #1
 800e23a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e23c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e23e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e240:	429a      	cmp	r2, r3
 800e242:	f040 809c 	bne.w	800e37e <mg_json_get+0x34e>
 800e246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	4413      	add	r3, r2
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f040 8095 	bne.w	800e37e <mg_json_get+0x34e>
 800e254:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e258:	429a      	cmp	r2, r3
 800e25a:	f040 8090 	bne.w	800e37e <mg_json_get+0x34e>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <mg_json_get+0x240>
 800e264:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	1c5a      	adds	r2, r3, #1
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	601a      	str	r2, [r3, #0]
 800e270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e272:	e213      	b.n	800e69c <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800e274:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e278:	2b74      	cmp	r3, #116	@ 0x74
 800e27a:	d113      	bne.n	800e2a4 <mg_json_get+0x274>
 800e27c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e27e:	3303      	adds	r3, #3
 800e280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e282:	429a      	cmp	r2, r3
 800e284:	dd0e      	ble.n	800e2a4 <mg_json_get+0x274>
 800e286:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e28a:	4413      	add	r3, r2
 800e28c:	2204      	movs	r2, #4
 800e28e:	4998      	ldr	r1, [pc, #608]	@ (800e4f0 <mg_json_get+0x4c0>)
 800e290:	4618      	mov	r0, r3
 800e292:	f019 fa53 	bl	802773c <memcmp>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d103      	bne.n	800e2a4 <mg_json_get+0x274>
          i += 3;
 800e29c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e29e:	3303      	adds	r3, #3
 800e2a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e2a2:	e06c      	b.n	800e37e <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800e2a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e2a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e2aa:	d113      	bne.n	800e2d4 <mg_json_get+0x2a4>
 800e2ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2ae:	3303      	adds	r3, #3
 800e2b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	dd0e      	ble.n	800e2d4 <mg_json_get+0x2a4>
 800e2b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e2ba:	4413      	add	r3, r2
 800e2bc:	2204      	movs	r2, #4
 800e2be:	498d      	ldr	r1, [pc, #564]	@ (800e4f4 <mg_json_get+0x4c4>)
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f019 fa3b 	bl	802773c <memcmp>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d103      	bne.n	800e2d4 <mg_json_get+0x2a4>
          i += 3;
 800e2cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2ce:	3303      	adds	r3, #3
 800e2d0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e2d2:	e054      	b.n	800e37e <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800e2d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e2d8:	2b66      	cmp	r3, #102	@ 0x66
 800e2da:	d113      	bne.n	800e304 <mg_json_get+0x2d4>
 800e2dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2de:	3304      	adds	r3, #4
 800e2e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	dd0e      	ble.n	800e304 <mg_json_get+0x2d4>
 800e2e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e2ea:	4413      	add	r3, r2
 800e2ec:	2205      	movs	r2, #5
 800e2ee:	4982      	ldr	r1, [pc, #520]	@ (800e4f8 <mg_json_get+0x4c8>)
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f019 fa23 	bl	802773c <memcmp>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d103      	bne.n	800e304 <mg_json_get+0x2d4>
          i += 4;
 800e2fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2fe:	3304      	adds	r3, #4
 800e300:	663b      	str	r3, [r7, #96]	@ 0x60
 800e302:	e03c      	b.n	800e37e <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800e304:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e308:	2b2d      	cmp	r3, #45	@ 0x2d
 800e30a:	d007      	beq.n	800e31c <mg_json_get+0x2ec>
 800e30c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e310:	2b2f      	cmp	r3, #47	@ 0x2f
 800e312:	d916      	bls.n	800e342 <mg_json_get+0x312>
 800e314:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e318:	2b39      	cmp	r3, #57	@ 0x39
 800e31a:	d812      	bhi.n	800e342 <mg_json_get+0x312>
          int numlen = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800e320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e324:	18d0      	adds	r0, r2, r3
 800e326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	f107 0210 	add.w	r2, r7, #16
 800e330:	4619      	mov	r1, r3
 800e332:	f7ff fbe1 	bl	800daf8 <mg_atod>
          i += numlen - 1;
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	3b01      	subs	r3, #1
 800e33a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e33c:	4413      	add	r3, r2
 800e33e:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800e340:	e01d      	b.n	800e37e <mg_json_get+0x34e>
        } else if (c == '"') {
 800e342:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e346:	2b22      	cmp	r3, #34	@ 0x22
 800e348:	d116      	bne.n	800e378 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800e34a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e34c:	3301      	adds	r3, #1
 800e34e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e350:	18d0      	adds	r0, r2, r3
 800e352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	3b01      	subs	r3, #1
 800e35a:	4619      	mov	r1, r3
 800e35c:	f7ff fb8a 	bl	800da74 <mg_pass_string>
 800e360:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800e362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e364:	2b00      	cmp	r3, #0
 800e366:	da01      	bge.n	800e36c <mg_json_get+0x33c>
 800e368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e36a:	e197      	b.n	800e69c <mg_json_get+0x66c>
          i += n + 1;
 800e36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e36e:	3301      	adds	r3, #1
 800e370:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e372:	4413      	add	r3, r2
 800e374:	663b      	str	r3, [r7, #96]	@ 0x60
 800e376:	e002      	b.n	800e37e <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800e378:	f06f 0301 	mvn.w	r3, #1
 800e37c:	e18e      	b.n	800e69c <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800e37e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e382:	429a      	cmp	r2, r3
 800e384:	d114      	bne.n	800e3b0 <mg_json_get+0x380>
 800e386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	4413      	add	r3, r2
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10e      	bne.n	800e3b0 <mg_json_get+0x380>
 800e392:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e396:	429a      	cmp	r2, r3
 800e398:	d10a      	bne.n	800e3b0 <mg_json_get+0x380>
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d005      	beq.n	800e3ac <mg_json_get+0x37c>
 800e3a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e3a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3ae:	e175      	b.n	800e69c <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800e3b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d105      	bne.n	800e3c4 <mg_json_get+0x394>
 800e3b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	db02      	blt.n	800e3c4 <mg_json_get+0x394>
 800e3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800e3ca:	e15d      	b.n	800e688 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800e3cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e3d0:	2b22      	cmp	r3, #34	@ 0x22
 800e3d2:	d170      	bne.n	800e4b6 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800e3d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3da:	18d0      	adds	r0, r2, r3
 800e3dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e3de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3e0:	1ad3      	subs	r3, r2, r3
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f7ff fb45 	bl	800da74 <mg_pass_string>
 800e3ea:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	da01      	bge.n	800e3f6 <mg_json_get+0x3c6>
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f4:	e152      	b.n	800e69c <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800e3f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3f8:	1c5a      	adds	r2, r3, #1
 800e3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fc:	4413      	add	r3, r2
 800e3fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e400:	429a      	cmp	r2, r3
 800e402:	dc02      	bgt.n	800e40a <mg_json_get+0x3da>
 800e404:	f06f 0302 	mvn.w	r3, #2
 800e408:	e148      	b.n	800e69c <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800e40a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e40c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e40e:	429a      	cmp	r2, r3
 800e410:	da02      	bge.n	800e418 <mg_json_get+0x3e8>
 800e412:	f06f 0302 	mvn.w	r3, #2
 800e416:	e141      	b.n	800e69c <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800e418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e41a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d109      	bne.n	800e434 <mg_json_get+0x404>
 800e420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e422:	3b01      	subs	r3, #1
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	4413      	add	r3, r2
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e42c:	d002      	beq.n	800e434 <mg_json_get+0x404>
 800e42e:	f06f 0302 	mvn.w	r3, #2
 800e432:	e133      	b.n	800e69c <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800e434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e438:	429a      	cmp	r2, r3
 800e43a:	d133      	bne.n	800e4a4 <mg_json_get+0x474>
 800e43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e43e:	3b01      	subs	r3, #1
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	4413      	add	r3, r2
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2b2e      	cmp	r3, #46	@ 0x2e
 800e448:	d12c      	bne.n	800e4a4 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800e44a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e44c:	3301      	adds	r3, #1
 800e44e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e450:	18d0      	adds	r0, r2, r3
 800e452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	4413      	add	r3, r2
 800e458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e45a:	4619      	mov	r1, r3
 800e45c:	f019 f9ad 	bl	80277ba <strncmp>
 800e460:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800e462:	2b00      	cmp	r3, #0
 800e464:	d11e      	bne.n	800e4a4 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800e466:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46a:	4413      	add	r3, r2
 800e46c:	461a      	mov	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4413      	add	r3, r2
 800e472:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800e474:	2b00      	cmp	r3, #0
 800e476:	d011      	beq.n	800e49c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800e478:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47c:	4413      	add	r3, r2
 800e47e:	461a      	mov	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4413      	add	r3, r2
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b2e      	cmp	r3, #46	@ 0x2e
 800e488:	d008      	beq.n	800e49c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800e48a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48e:	4413      	add	r3, r2
 800e490:	461a      	mov	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4413      	add	r3, r2
 800e496:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800e498:	2b5b      	cmp	r3, #91	@ 0x5b
 800e49a:	d103      	bne.n	800e4a4 <mg_json_get+0x474>
            pos += n;
 800e49c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a0:	4413      	add	r3, r2
 800e4a2:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800e4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e4aa:	4413      	add	r3, r2
 800e4ac:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800e4b4:	e0e7      	b.n	800e686 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800e4b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4ba:	2b7d      	cmp	r3, #125	@ 0x7d
 800e4bc:	d14a      	bne.n	800e554 <mg_json_get+0x524>
          MG_EOO('}');
 800e4be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d106      	bne.n	800e4d4 <mg_json_get+0x4a4>
 800e4c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e4c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d002      	beq.n	800e4d4 <mg_json_get+0x4a4>
 800e4ce:	f06f 0302 	mvn.w	r3, #2
 800e4d2:	e0e3      	b.n	800e69c <mg_json_get+0x66c>
 800e4d4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e4d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	3368      	adds	r3, #104	@ 0x68
 800e4de:	443b      	add	r3, r7
 800e4e0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e4e4:	3302      	adds	r3, #2
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d008      	beq.n	800e4fc <mg_json_get+0x4cc>
 800e4ea:	f06f 0301 	mvn.w	r3, #1
 800e4ee:	e0d5      	b.n	800e69c <mg_json_get+0x66c>
 800e4f0:	0802acdc 	.word	0x0802acdc
 800e4f4:	0802ace4 	.word	0x0802ace4
 800e4f8:	0802acec 	.word	0x0802acec
 800e4fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4fe:	3b01      	subs	r3, #1
 800e500:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e502:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e506:	429a      	cmp	r2, r3
 800e508:	d114      	bne.n	800e534 <mg_json_get+0x504>
 800e50a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	4413      	add	r3, r2
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d10e      	bne.n	800e534 <mg_json_get+0x504>
 800e516:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d10a      	bne.n	800e534 <mg_json_get+0x504>
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d005      	beq.n	800e530 <mg_json_get+0x500>
 800e524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	601a      	str	r2, [r3, #0]
 800e530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e532:	e0b3      	b.n	800e69c <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800e534:	2303      	movs	r3, #3
 800e536:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800e53a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e53e:	429a      	cmp	r2, r3
 800e540:	f040 80a1 	bne.w	800e686 <mg_json_get+0x656>
 800e544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e546:	2b00      	cmp	r3, #0
 800e548:	f2c0 809d 	blt.w	800e686 <mg_json_get+0x656>
 800e54c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e54e:	3301      	adds	r3, #1
 800e550:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800e552:	e098      	b.n	800e686 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800e554:	f06f 0301 	mvn.w	r3, #1
 800e558:	e0a0      	b.n	800e69c <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800e55a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e55e:	2b3a      	cmp	r3, #58	@ 0x3a
 800e560:	d103      	bne.n	800e56a <mg_json_get+0x53a>
          expecting = S_VALUE;
 800e562:	2300      	movs	r3, #0
 800e564:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800e568:	e08e      	b.n	800e688 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800e56a:	f06f 0301 	mvn.w	r3, #1
 800e56e:	e095      	b.n	800e69c <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800e570:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e572:	2b00      	cmp	r3, #0
 800e574:	dc02      	bgt.n	800e57c <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800e576:	f06f 0301 	mvn.w	r3, #1
 800e57a:	e08f      	b.n	800e69c <mg_json_get+0x66c>
        } else if (c == ',') {
 800e57c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e580:	2b2c      	cmp	r3, #44	@ 0x2c
 800e582:	d10d      	bne.n	800e5a0 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800e584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e586:	3b01      	subs	r3, #1
 800e588:	3368      	adds	r3, #104	@ 0x68
 800e58a:	443b      	add	r3, r7
 800e58c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e590:	2b7b      	cmp	r3, #123	@ 0x7b
 800e592:	bf0c      	ite	eq
 800e594:	2301      	moveq	r3, #1
 800e596:	2300      	movne	r3, #0
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800e59e:	e073      	b.n	800e688 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800e5a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e5a4:	2b5d      	cmp	r3, #93	@ 0x5d
 800e5a6:	d003      	beq.n	800e5b0 <mg_json_get+0x580>
 800e5a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e5ac:	2b7d      	cmp	r3, #125	@ 0x7d
 800e5ae:	d163      	bne.n	800e678 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800e5b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d10d      	bne.n	800e5d4 <mg_json_get+0x5a4>
 800e5b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e5bc:	2b7d      	cmp	r3, #125	@ 0x7d
 800e5be:	d109      	bne.n	800e5d4 <mg_json_get+0x5a4>
 800e5c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5c2:	3b01      	subs	r3, #1
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5cc:	d102      	bne.n	800e5d4 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800e5ce:	f06f 0302 	mvn.w	r3, #2
 800e5d2:	e063      	b.n	800e69c <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800e5d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d10d      	bne.n	800e5f8 <mg_json_get+0x5c8>
 800e5dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e5e0:	2b5d      	cmp	r3, #93	@ 0x5d
 800e5e2:	d109      	bne.n	800e5f8 <mg_json_get+0x5c8>
 800e5e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2b2c      	cmp	r3, #44	@ 0x2c
 800e5f0:	d102      	bne.n	800e5f8 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800e5f2:	f06f 0302 	mvn.w	r3, #2
 800e5f6:	e051      	b.n	800e69c <mg_json_get+0x66c>
          MG_EOO('O');
 800e5f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d106      	bne.n	800e60e <mg_json_get+0x5de>
 800e600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e604:	429a      	cmp	r2, r3
 800e606:	d002      	beq.n	800e60e <mg_json_get+0x5de>
 800e608:	f06f 0302 	mvn.w	r3, #2
 800e60c:	e046      	b.n	800e69c <mg_json_get+0x66c>
 800e60e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e614:	3b01      	subs	r3, #1
 800e616:	3368      	adds	r3, #104	@ 0x68
 800e618:	443b      	add	r3, r7
 800e61a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800e61e:	3302      	adds	r3, #2
 800e620:	429a      	cmp	r2, r3
 800e622:	d002      	beq.n	800e62a <mg_json_get+0x5fa>
 800e624:	f06f 0301 	mvn.w	r3, #1
 800e628:	e038      	b.n	800e69c <mg_json_get+0x66c>
 800e62a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e62c:	3b01      	subs	r3, #1
 800e62e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e630:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e634:	429a      	cmp	r2, r3
 800e636:	d114      	bne.n	800e662 <mg_json_get+0x632>
 800e638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	4413      	add	r3, r2
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10e      	bne.n	800e662 <mg_json_get+0x632>
 800e644:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e648:	429a      	cmp	r2, r3
 800e64a:	d10a      	bne.n	800e662 <mg_json_get+0x632>
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d005      	beq.n	800e65e <mg_json_get+0x62e>
 800e652:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	1c5a      	adds	r2, r3, #1
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e660:	e01c      	b.n	800e69c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800e662:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e666:	429a      	cmp	r2, r3
 800e668:	d109      	bne.n	800e67e <mg_json_get+0x64e>
 800e66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	db06      	blt.n	800e67e <mg_json_get+0x64e>
 800e670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e672:	3301      	adds	r3, #1
 800e674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e676:	e002      	b.n	800e67e <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800e678:	f06f 0301 	mvn.w	r3, #1
 800e67c:	e00e      	b.n	800e69c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800e67e:	bf00      	nop
        break;
 800e680:	e002      	b.n	800e688 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800e682:	bf00      	nop
 800e684:	e000      	b.n	800e688 <mg_json_get+0x658>
        break;
 800e686:	bf00      	nop
  for (i = 0; i < len; i++) {
 800e688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e68a:	3301      	adds	r3, #1
 800e68c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e68e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e692:	429a      	cmp	r2, r3
 800e694:	f6ff acfc 	blt.w	800e090 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800e698:	f06f 0302 	mvn.w	r3, #2
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	376c      	adds	r7, #108	@ 0x6c
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd90      	pop	{r4, r7, pc}

0800e6a4 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	1d38      	adds	r0, r7, #4
 800e6ae:	e880 0006 	stmia.w	r0, {r1, r2}
 800e6b2:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	613b      	str	r3, [r7, #16]
 800e6b8:	f107 0310 	add.w	r3, r7, #16
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	1d39      	adds	r1, r7, #4
 800e6c0:	c903      	ldmia	r1, {r0, r1}
 800e6c2:	f7ff fcb5 	bl	800e030 <mg_json_get>
 800e6c6:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	db03      	blt.n	800e6d6 <mg_json_get_tok+0x32>
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	e000      	b.n	800e6d8 <mg_json_get_tok+0x34>
 800e6d6:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	f008 f960 	bl	80169a6 <mg_str_n>
}
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800e6ee:	b590      	push	{r4, r7, lr}
 800e6f0:	b089      	sub	sp, #36	@ 0x24
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	f107 0408 	add.w	r4, r7, #8
 800e6f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800e6fc:	607a      	str	r2, [r7, #4]
 800e6fe:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800e704:	f107 0314 	add.w	r3, r7, #20
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	f107 0108 	add.w	r1, r7, #8
 800e70e:	c903      	ldmia	r1, {r0, r1}
 800e710:	f7ff fc8e 	bl	800e030 <mg_json_get>
 800e714:	61b8      	str	r0, [r7, #24]
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	db23      	blt.n	800e764 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	4413      	add	r3, r2
 800e722:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800e724:	2b2d      	cmp	r3, #45	@ 0x2d
 800e726:	d00b      	beq.n	800e740 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	4413      	add	r3, r2
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2b2f      	cmp	r3, #47	@ 0x2f
 800e732:	d917      	bls.n	800e764 <mg_json_get_num+0x76>
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	4413      	add	r3, r2
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b39      	cmp	r3, #57	@ 0x39
 800e73e:	d811      	bhi.n	800e764 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00c      	beq.n	800e760 <mg_json_get_num+0x72>
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	4413      	add	r3, r2
 800e74c:	6979      	ldr	r1, [r7, #20]
 800e74e:	2200      	movs	r2, #0
 800e750:	4618      	mov	r0, r3
 800e752:	f7ff f9d1 	bl	800daf8 <mg_atod>
 800e756:	eeb0 7b40 	vmov.f64	d7, d0
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800e760:	2301      	movs	r3, #1
 800e762:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	2b00      	cmp	r3, #0
 800e768:	bf14      	ite	ne
 800e76a:	2301      	movne	r3, #1
 800e76c:	2300      	moveq	r3, #0
 800e76e:	b2db      	uxtb	r3, r3
}
 800e770:	4618      	mov	r0, r3
 800e772:	3724      	adds	r7, #36	@ 0x24
 800e774:	46bd      	mov	sp, r7
 800e776:	bd90      	pop	{r4, r7, pc}

0800e778 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800e778:	b590      	push	{r4, r7, lr}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	f107 0408 	add.w	r4, r7, #8
 800e782:	e884 0003 	stmia.w	r4, {r0, r1}
 800e786:	607a      	str	r2, [r7, #4]
 800e788:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800e78a:	2300      	movs	r3, #0
 800e78c:	617b      	str	r3, [r7, #20]
 800e78e:	2300      	movs	r3, #0
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	f107 0108 	add.w	r1, r7, #8
 800e796:	c903      	ldmia	r1, {r0, r1}
 800e798:	f7ff fc4a 	bl	800e030 <mg_json_get>
 800e79c:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	db1b      	blt.n	800e7dc <mg_json_get_bool+0x64>
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2b74      	cmp	r3, #116	@ 0x74
 800e7ae:	d005      	beq.n	800e7bc <mg_json_get_bool+0x44>
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	2b66      	cmp	r3, #102	@ 0x66
 800e7ba:	d10f      	bne.n	800e7dc <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00a      	beq.n	800e7d8 <mg_json_get_bool+0x60>
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	2b74      	cmp	r3, #116	@ 0x74
 800e7cc:	bf0c      	ite	eq
 800e7ce:	2301      	moveq	r3, #1
 800e7d0:	2300      	movne	r3, #0
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	701a      	strb	r2, [r3, #0]
    found = 1;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	617b      	str	r3, [r7, #20]
  }
  return found;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	bf14      	ite	ne
 800e7e2:	2301      	movne	r3, #1
 800e7e4:	2300      	moveq	r3, #0
 800e7e6:	b2db      	uxtb	r3, r3
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	371c      	adds	r7, #28
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd90      	pop	{r4, r7, pc}

0800e7f0 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800e7f0:	b590      	push	{r4, r7, lr}
 800e7f2:	b08d      	sub	sp, #52	@ 0x34
 800e7f4:	af02      	add	r7, sp, #8
 800e7f6:	f107 0408 	add.w	r4, r7, #8
 800e7fa:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800e802:	2300      	movs	r3, #0
 800e804:	627b      	str	r3, [r7, #36]	@ 0x24
 800e806:	2300      	movs	r3, #0
 800e808:	623b      	str	r3, [r7, #32]
 800e80a:	e064      	b.n	800e8d6 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e810:	4413      	add	r3, r2
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	2b5c      	cmp	r3, #92	@ 0x5c
 800e816:	d12c      	bne.n	800e872 <mg_json_unescape+0x82>
 800e818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81a:	1d5a      	adds	r2, r3, #5
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d227      	bcs.n	800e872 <mg_json_unescape+0x82>
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e826:	3301      	adds	r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	2b75      	cmp	r3, #117	@ 0x75
 800e82e:	d120      	bne.n	800e872 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e834:	3302      	adds	r3, #2
 800e836:	18d1      	adds	r1, r2, r3
 800e838:	f107 0314 	add.w	r3, r7, #20
 800e83c:	2204      	movs	r2, #4
 800e83e:	4618      	mov	r0, r3
 800e840:	f008 f8b1 	bl	80169a6 <mg_str_n>
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	4413      	add	r3, r2
 800e84a:	2201      	movs	r2, #1
 800e84c:	9200      	str	r2, [sp, #0]
 800e84e:	2210      	movs	r2, #16
 800e850:	f107 0114 	add.w	r1, r7, #20
 800e854:	c903      	ldmia	r1, {r0, r1}
 800e856:	f008 fae4 	bl	8016e22 <mg_str_to_num>
 800e85a:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800e85c:	f083 0301 	eor.w	r3, r3, #1
 800e860:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <mg_json_unescape+0x7a>
        return false;
 800e866:	2300      	movs	r3, #0
 800e868:	e04c      	b.n	800e904 <mg_json_unescape+0x114>
      i += 5;
 800e86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86c:	3305      	adds	r3, #5
 800e86e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e870:	e02b      	b.n	800e8ca <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e876:	4413      	add	r3, r2
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	2b5c      	cmp	r3, #92	@ 0x5c
 800e87c:	d11d      	bne.n	800e8ba <mg_json_unescape+0xca>
 800e87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	429a      	cmp	r2, r3
 800e886:	d218      	bcs.n	800e8ba <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	3301      	adds	r3, #1
 800e88e:	4413      	add	r3, r2
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	2100      	movs	r1, #0
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff f8bd 	bl	800da14 <json_esc>
 800e89a:	4603      	mov	r3, r0
 800e89c:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800e89e:	7ffb      	ldrb	r3, [r7, #31]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <mg_json_unescape+0xb8>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	e02d      	b.n	800e904 <mg_json_unescape+0x114>
      to[j] = c;
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	7ffa      	ldrb	r2, [r7, #31]
 800e8b0:	701a      	strb	r2, [r3, #0]
      i++;
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800e8b8:	e007      	b.n	800e8ca <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8be:	441a      	add	r2, r3
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	440b      	add	r3, r1
 800e8c6:	7812      	ldrb	r2, [r2, #0]
 800e8c8:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	623b      	str	r3, [r7, #32]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d203      	bcs.n	800e8e6 <mg_json_unescape+0xf6>
 800e8de:	6a3a      	ldr	r2, [r7, #32]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d392      	bcc.n	800e80c <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800e8e6:	6a3a      	ldr	r2, [r7, #32]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d301      	bcc.n	800e8f2 <mg_json_unescape+0x102>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	e008      	b.n	800e904 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d004      	beq.n	800e902 <mg_json_unescape+0x112>
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	2200      	movs	r2, #0
 800e900:	701a      	strb	r2, [r3, #0]
  return true;
 800e902:	2301      	movs	r3, #1
}
 800e904:	4618      	mov	r0, r3
 800e906:	372c      	adds	r7, #44	@ 0x2c
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd90      	pop	{r4, r7, pc}

0800e90c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800e916:	4b05      	ldr	r3, [pc, #20]	@ (800e92c <logc+0x20>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a05      	ldr	r2, [pc, #20]	@ (800e930 <logc+0x24>)
 800e91c:	6811      	ldr	r1, [r2, #0]
 800e91e:	79fa      	ldrb	r2, [r7, #7]
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3
}
 800e924:	bf00      	nop
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	2400025c 	.word	0x2400025c
 800e930:	24002360 	.word	0x24002360

0800e934 <logs>:

static void logs(const char *buf, size_t len) {
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
 800e942:	e009      	b.n	800e958 <logs+0x24>
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	4413      	add	r3, r2
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff ffdd 	bl	800e90c <logc>
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3301      	adds	r3, #1
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d3f1      	bcc.n	800e944 <logs+0x10>
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
	...

0800e96c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800e96c:	b590      	push	{r4, r7, lr}
 800e96e:	b099      	sub	sp, #100	@ 0x64
 800e970:	af06      	add	r7, sp, #24
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800e97a:	212f      	movs	r1, #47	@ 0x2f
 800e97c:	68b8      	ldr	r0, [r7, #8]
 800e97e:	f018 ff41 	bl	8027804 <strrchr>
 800e982:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800e984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e986:	2b00      	cmp	r3, #0
 800e988:	d104      	bne.n	800e994 <mg_log_prefix+0x28>
 800e98a:	215c      	movs	r1, #92	@ 0x5c
 800e98c:	68b8      	ldr	r0, [r7, #8]
 800e98e:	f018 ff39 	bl	8027804 <strrchr>
 800e992:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800e994:	f7f2 f8dc 	bl	8000b50 <mg_millis>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e99e:	2900      	cmp	r1, #0
 800e9a0:	d002      	beq.n	800e9a8 <mg_log_prefix+0x3c>
 800e9a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9a4:	3101      	adds	r1, #1
 800e9a6:	e000      	b.n	800e9aa <mg_log_prefix+0x3e>
 800e9a8:	68b9      	ldr	r1, [r7, #8]
 800e9aa:	f107 0414 	add.w	r4, r7, #20
 800e9ae:	6838      	ldr	r0, [r7, #0]
 800e9b0:	9005      	str	r0, [sp, #20]
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	9004      	str	r0, [sp, #16]
 800e9b6:	9103      	str	r1, [sp, #12]
 800e9b8:	68f9      	ldr	r1, [r7, #12]
 800e9ba:	9102      	str	r1, [sp, #8]
 800e9bc:	e9cd 2300 	strd	r2, r3, [sp]
 800e9c0:	4a11      	ldr	r2, [pc, #68]	@ (800ea08 <mg_log_prefix+0x9c>)
 800e9c2:	2129      	movs	r1, #41	@ 0x29
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f004 fc0d 	bl	80131e4 <mg_snprintf>
 800e9ca:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800e9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9ce:	2b27      	cmp	r3, #39	@ 0x27
 800e9d0:	d90a      	bls.n	800e9e8 <mg_log_prefix+0x7c>
 800e9d2:	2327      	movs	r3, #39	@ 0x27
 800e9d4:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800e9d6:	e007      	b.n	800e9e8 <mg_log_prefix+0x7c>
 800e9d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9da:	1c5a      	adds	r2, r3, #1
 800e9dc:	643a      	str	r2, [r7, #64]	@ 0x40
 800e9de:	3348      	adds	r3, #72	@ 0x48
 800e9e0:	443b      	add	r3, r7
 800e9e2:	2220      	movs	r2, #32
 800e9e4:	f803 2c34 	strb.w	r2, [r3, #-52]
 800e9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9ea:	2b28      	cmp	r3, #40	@ 0x28
 800e9ec:	d9f4      	bls.n	800e9d8 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800e9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9f0:	1e5a      	subs	r2, r3, #1
 800e9f2:	f107 0314 	add.w	r3, r7, #20
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff ff9b 	bl	800e934 <logs>
}
 800e9fe:	bf00      	nop
 800ea00:	374c      	adds	r7, #76	@ 0x4c
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd90      	pop	{r4, r7, pc}
 800ea06:	bf00      	nop
 800ea08:	0802acf4 	.word	0x0802acf4

0800ea0c <mg_log>:

void mg_log(const char *fmt, ...) {
 800ea0c:	b40f      	push	{r0, r1, r2, r3}
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b082      	sub	sp, #8
 800ea12:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800ea14:	f107 0314 	add.w	r3, r7, #20
 800ea18:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800ea1a:	4b09      	ldr	r3, [pc, #36]	@ (800ea40 <mg_log+0x34>)
 800ea1c:	6818      	ldr	r0, [r3, #0]
 800ea1e:	4b09      	ldr	r3, [pc, #36]	@ (800ea44 <mg_log+0x38>)
 800ea20:	6819      	ldr	r1, [r3, #0]
 800ea22:	1d3b      	adds	r3, r7, #4
 800ea24:	693a      	ldr	r2, [r7, #16]
 800ea26:	f7fa ffbb 	bl	80099a0 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800ea2a:	2102      	movs	r1, #2
 800ea2c:	4806      	ldr	r0, [pc, #24]	@ (800ea48 <mg_log+0x3c>)
 800ea2e:	f7ff ff81 	bl	800e934 <logs>
}
 800ea32:	bf00      	nop
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ea3c:	b004      	add	sp, #16
 800ea3e:	4770      	bx	lr
 800ea40:	2400025c 	.word	0x2400025c
 800ea44:	24002360 	.word	0x24002360
 800ea48:	0802a164 	.word	0x0802a164

0800ea4c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b09      	cmp	r3, #9
 800ea58:	d804      	bhi.n	800ea64 <nibble+0x18>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	3330      	adds	r3, #48	@ 0x30
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	e003      	b.n	800ea6c <nibble+0x20>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	3357      	adds	r3, #87	@ 0x57
 800ea6a:	b2db      	uxtb	r3, r3
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b08a      	sub	sp, #40	@ 0x28
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	623b      	str	r3, [r7, #32]
 800ea90:	e07b      	b.n	800eb8a <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800ea92:	6a3b      	ldr	r3, [r7, #32]
 800ea94:	f003 030f 	and.w	r3, r3, #15
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d13b      	bne.n	800eb14 <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d010      	beq.n	800eac4 <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800eaa2:	2102      	movs	r1, #2
 800eaa4:	484e      	ldr	r0, [pc, #312]	@ (800ebe0 <mg_hexdump+0x168>)
 800eaa6:	f7ff ff45 	bl	800e934 <logs>
 800eaaa:	f107 030c 	add.w	r3, r7, #12
 800eaae:	2110      	movs	r1, #16
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff ff3f 	bl	800e934 <logs>
 800eab6:	2102      	movs	r1, #2
 800eab8:	484a      	ldr	r0, [pc, #296]	@ (800ebe4 <mg_hexdump+0x16c>)
 800eaba:	f7ff ff3b 	bl	800e934 <logs>
 800eabe:	2300      	movs	r3, #0
 800eac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800eac4:	6a3b      	ldr	r3, [r7, #32]
 800eac6:	0b1b      	lsrs	r3, r3, #12
 800eac8:	f003 030f 	and.w	r3, r3, #15
 800eacc:	4618      	mov	r0, r3
 800eace:	f7ff ffbd 	bl	800ea4c <nibble>
 800ead2:	4603      	mov	r3, r0
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff ff19 	bl	800e90c <logc>
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	0a1b      	lsrs	r3, r3, #8
 800eade:	f003 030f 	and.w	r3, r3, #15
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff ffb2 	bl	800ea4c <nibble>
 800eae8:	4603      	mov	r3, r0
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7ff ff0e 	bl	800e90c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800eaf0:	6a3b      	ldr	r3, [r7, #32]
 800eaf2:	091b      	lsrs	r3, r3, #4
 800eaf4:	f003 030f 	and.w	r3, r3, #15
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7ff ffa7 	bl	800ea4c <nibble>
 800eafe:	4603      	mov	r3, r0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff ff03 	bl	800e90c <logc>
 800eb06:	2030      	movs	r0, #48	@ 0x30
 800eb08:	f7ff ff00 	bl	800e90c <logc>
 800eb0c:	2103      	movs	r1, #3
 800eb0e:	4836      	ldr	r0, [pc, #216]	@ (800ebe8 <mg_hexdump+0x170>)
 800eb10:	f7ff ff10 	bl	800e934 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800eb14:	69fa      	ldr	r2, [r7, #28]
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	4413      	add	r3, r2
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	091b      	lsrs	r3, r3, #4
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7ff ff93 	bl	800ea4c <nibble>
 800eb26:	4603      	mov	r3, r0
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7ff feef 	bl	800e90c <logc>
 800eb2e:	69fa      	ldr	r2, [r7, #28]
 800eb30:	6a3b      	ldr	r3, [r7, #32]
 800eb32:	4413      	add	r3, r2
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	f003 030f 	and.w	r3, r3, #15
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff ff86 	bl	800ea4c <nibble>
 800eb40:	4603      	mov	r3, r0
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fee2 	bl	800e90c <logc>
    logc(' ');                                         // Space after hex number
 800eb48:	2020      	movs	r0, #32
 800eb4a:	f7ff fedf 	bl	800e90c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800eb4e:	69fa      	ldr	r2, [r7, #28]
 800eb50:	6a3b      	ldr	r3, [r7, #32]
 800eb52:	4413      	add	r3, r2
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	2b1f      	cmp	r3, #31
 800eb58:	d90a      	bls.n	800eb70 <mg_hexdump+0xf8>
 800eb5a:	69fa      	ldr	r2, [r7, #28]
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	4413      	add	r3, r2
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	2b7e      	cmp	r3, #126	@ 0x7e
 800eb64:	d804      	bhi.n	800eb70 <mg_hexdump+0xf8>
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	6a3b      	ldr	r3, [r7, #32]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	781a      	ldrb	r2, [r3, #0]
 800eb6e:	e000      	b.n	800eb72 <mg_hexdump+0xfa>
 800eb70:	222e      	movs	r2, #46	@ 0x2e
 800eb72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb76:	1c59      	adds	r1, r3, #1
 800eb78:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800eb7c:	3328      	adds	r3, #40	@ 0x28
 800eb7e:	443b      	add	r3, r7
 800eb80:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800eb84:	6a3b      	ldr	r3, [r7, #32]
 800eb86:	3301      	adds	r3, #1
 800eb88:	623b      	str	r3, [r7, #32]
 800eb8a:	6a3a      	ldr	r2, [r7, #32]
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	f4ff af7f 	bcc.w	800ea92 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800eb94:	e00d      	b.n	800ebb2 <mg_hexdump+0x13a>
 800eb96:	2103      	movs	r1, #3
 800eb98:	4813      	ldr	r0, [pc, #76]	@ (800ebe8 <mg_hexdump+0x170>)
 800eb9a:	f7ff fecb 	bl	800e934 <logs>
 800eb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800eba8:	3328      	adds	r3, #40	@ 0x28
 800ebaa:	443b      	add	r3, r7
 800ebac:	2220      	movs	r2, #32
 800ebae:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800ebb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebb6:	2b0f      	cmp	r3, #15
 800ebb8:	d9ed      	bls.n	800eb96 <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800ebba:	2102      	movs	r1, #2
 800ebbc:	4808      	ldr	r0, [pc, #32]	@ (800ebe0 <mg_hexdump+0x168>)
 800ebbe:	f7ff feb9 	bl	800e934 <logs>
 800ebc2:	f107 030c 	add.w	r3, r7, #12
 800ebc6:	2110      	movs	r1, #16
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7ff feb3 	bl	800e934 <logs>
 800ebce:	2102      	movs	r1, #2
 800ebd0:	4804      	ldr	r0, [pc, #16]	@ (800ebe4 <mg_hexdump+0x16c>)
 800ebd2:	f7ff feaf 	bl	800e934 <logs>
}
 800ebd6:	bf00      	nop
 800ebd8:	3728      	adds	r7, #40	@ 0x28
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	0802ad08 	.word	0x0802ad08
 800ebe4:	0802a164 	.word	0x0802a164
 800ebe8:	0802ad0c 	.word	0x0802ad0c

0800ebec <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebfc:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	4805      	ldr	r0, [pc, #20]	@ (800ec20 <mg_vprintf+0x34>)
 800ec0a:	f7fa fec9 	bl	80099a0 <mg_vxprintf>
  return c->send.len - old;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	1ad3      	subs	r3, r2, r3
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	08013175 	.word	0x08013175

0800ec24 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800ec24:	b40e      	push	{r1, r2, r3}
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800ec32:	f107 0320 	add.w	r3, r7, #32
 800ec36:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800ec38:	f107 0308 	add.w	r3, r7, #8
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	69f9      	ldr	r1, [r7, #28]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7ff ffd3 	bl	800ebec <mg_vprintf>
 800ec46:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800ec48:	68fb      	ldr	r3, [r7, #12]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec54:	b003      	add	sp, #12
 800ec56:	4770      	bx	lr

0800ec58 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b088      	sub	sp, #32
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	f107 0308 	add.w	r3, r7, #8
 800ec62:	e883 0003 	stmia.w	r3, {r0, r1}
 800ec66:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800ec68:	4811      	ldr	r0, [pc, #68]	@ (800ecb0 <mg_atonl+0x58>)
 800ec6a:	f013 f930 	bl	8021ece <mg_ntohl>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800ec72:	f107 0318 	add.w	r3, r7, #24
 800ec76:	490f      	ldr	r1, [pc, #60]	@ (800ecb4 <mg_atonl+0x5c>)
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f007 fe77 	bl	801696c <mg_str_s>
 800ec7e:	f107 0318 	add.w	r3, r7, #24
 800ec82:	cb0c      	ldmia	r3, {r2, r3}
 800ec84:	f107 0108 	add.w	r1, r7, #8
 800ec88:	c903      	ldmia	r1, {r0, r1}
 800ec8a:	f007 ff32 	bl	8016af2 <mg_strcasecmp>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d001      	beq.n	800ec98 <mg_atonl+0x40>
 800ec94:	2300      	movs	r3, #0
 800ec96:	e006      	b.n	800eca6 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	74da      	strb	r2, [r3, #19]
  return true;
 800eca4:	2301      	movs	r3, #1
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3720      	adds	r7, #32
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	7f000001 	.word	0x7f000001
 800ecb4:	0802adb0 	.word	0x0802adb0

0800ecb8 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	f107 0308 	add.w	r3, r7, #8
 800ecc2:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecc6:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d001      	beq.n	800ecd2 <mg_atone+0x1a>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	e009      	b.n	800ece6 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2210      	movs	r2, #16
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f018 fd59 	bl	8027790 <memset>
  addr->is_ip6 = false;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	74da      	strb	r2, [r3, #19]
  return true;
 800ece4:	2301      	movs	r3, #1
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800ecee:	b480      	push	{r7}
 800ecf0:	b089      	sub	sp, #36	@ 0x24
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	f107 0308 	add.w	r3, r7, #8
 800ecf8:	e883 0003 	stmia.w	r3, {r0, r1}
 800ecfc:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800ed06:	2300      	movs	r3, #0
 800ed08:	61fb      	str	r3, [r7, #28]
 800ed0a:	e049      	b.n	800eda0 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	4413      	add	r3, r2
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	2b2f      	cmp	r3, #47	@ 0x2f
 800ed16:	d925      	bls.n	800ed64 <mg_aton4+0x76>
 800ed18:	68ba      	ldr	r2, [r7, #8]
 800ed1a:	69fb      	ldr	r3, [r7, #28]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	2b39      	cmp	r3, #57	@ 0x39
 800ed22:	d81f      	bhi.n	800ed64 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800ed24:	f107 0210 	add.w	r2, r7, #16
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	4613      	mov	r3, r2
 800ed32:	009b      	lsls	r3, r3, #2
 800ed34:	4413      	add	r3, r2
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	4619      	mov	r1, r3
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	4413      	add	r3, r2
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	3b30      	subs	r3, #48	@ 0x30
 800ed44:	440b      	add	r3, r1
 800ed46:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2bff      	cmp	r3, #255	@ 0xff
 800ed4c:	dd01      	ble.n	800ed52 <mg_aton4+0x64>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e03d      	b.n	800edce <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	b2d9      	uxtb	r1, r3
 800ed56:	f107 0210 	add.w	r2, r7, #16
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	460a      	mov	r2, r1
 800ed60:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800ed62:	e01a      	b.n	800ed9a <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800ed64:	68ba      	ldr	r2, [r7, #8]
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	4413      	add	r3, r2
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed6e:	d112      	bne.n	800ed96 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	d809      	bhi.n	800ed8a <mg_aton4+0x9c>
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d006      	beq.n	800ed8a <mg_aton4+0x9c>
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	4413      	add	r3, r2
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed88:	d101      	bne.n	800ed8e <mg_aton4+0xa0>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	e01f      	b.n	800edce <mg_aton4+0xe0>
      num_dots++;
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	3301      	adds	r3, #1
 800ed92:	61bb      	str	r3, [r7, #24]
 800ed94:	e001      	b.n	800ed9a <mg_aton4+0xac>
    } else {
      return false;
 800ed96:	2300      	movs	r3, #0
 800ed98:	e019      	b.n	800edce <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	61fb      	str	r3, [r7, #28]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	69fa      	ldr	r2, [r7, #28]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d3b1      	bcc.n	800ed0c <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d106      	bne.n	800edbc <mg_aton4+0xce>
 800edae:	68ba      	ldr	r2, [r7, #8]
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	3b01      	subs	r3, #1
 800edb4:	4413      	add	r3, r2
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800edba:	d101      	bne.n	800edc0 <mg_aton4+0xd2>
 800edbc:	2300      	movs	r3, #0
 800edbe:	e006      	b.n	800edce <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	693a      	ldr	r2, [r7, #16]
 800edc4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	74da      	strb	r2, [r3, #19]
  return true;
 800edcc:	2301      	movs	r3, #1
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3724      	adds	r7, #36	@ 0x24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800edda:	b580      	push	{r7, lr}
 800eddc:	b088      	sub	sp, #32
 800edde:	af00      	add	r7, sp, #0
 800ede0:	f107 0308 	add.w	r3, r7, #8
 800ede4:	e883 0003 	stmia.w	r3, {r0, r1}
 800ede8:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b0d      	cmp	r3, #13
 800edee:	d801      	bhi.n	800edf4 <mg_v4mapped+0x1a>
 800edf0:	2300      	movs	r3, #0
 800edf2:	e056      	b.n	800eea2 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	2b3a      	cmp	r3, #58	@ 0x3a
 800edfa:	d109      	bne.n	800ee10 <mg_v4mapped+0x36>
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	3301      	adds	r3, #1
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	2b3a      	cmp	r3, #58	@ 0x3a
 800ee04:	d104      	bne.n	800ee10 <mg_v4mapped+0x36>
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	3306      	adds	r3, #6
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b3a      	cmp	r3, #58	@ 0x3a
 800ee0e:	d001      	beq.n	800ee14 <mg_v4mapped+0x3a>
 800ee10:	2300      	movs	r3, #0
 800ee12:	e046      	b.n	800eea2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800ee14:	2302      	movs	r3, #2
 800ee16:	61fb      	str	r3, [r7, #28]
 800ee18:	e010      	b.n	800ee3c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	4413      	add	r3, r2
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	2b66      	cmp	r3, #102	@ 0x66
 800ee24:	d007      	beq.n	800ee36 <mg_v4mapped+0x5c>
 800ee26:	68ba      	ldr	r2, [r7, #8]
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	2b46      	cmp	r3, #70	@ 0x46
 800ee30:	d001      	beq.n	800ee36 <mg_v4mapped+0x5c>
 800ee32:	2300      	movs	r3, #0
 800ee34:	e035      	b.n	800eea2 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	2b05      	cmp	r3, #5
 800ee40:	ddeb      	ble.n	800ee1a <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	1dd9      	adds	r1, r3, #7
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	1fda      	subs	r2, r3, #7
 800ee4a:	f107 0314 	add.w	r3, r7, #20
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f007 fda9 	bl	80169a6 <mg_str_n>
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	f107 0314 	add.w	r3, r7, #20
 800ee5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ee5e:	f7ff ff46 	bl	800ecee <mg_aton4>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f083 0301 	eor.w	r3, r3, #1
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <mg_v4mapped+0x98>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	e017      	b.n	800eea2 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2210      	movs	r2, #16
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f018 fc86 	bl	8027790 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	22ff      	movs	r2, #255	@ 0xff
 800ee88:	72da      	strb	r2, [r3, #11]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	7ada      	ldrb	r2, [r3, #11]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	330c      	adds	r3, #12
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	74da      	strb	r2, [r3, #19]
  return true;
 800eea0:	2301      	movs	r3, #1
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3720      	adds	r7, #32
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b090      	sub	sp, #64	@ 0x40
 800eeae:	af02      	add	r7, sp, #8
 800eeb0:	f107 0308 	add.w	r3, r7, #8
 800eeb4:	e883 0003 	stmia.w	r3, {r0, r1}
 800eeb8:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800eeba:	2300      	movs	r3, #0
 800eebc:	633b      	str	r3, [r7, #48]	@ 0x30
 800eebe:	2300      	movs	r3, #0
 800eec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eec2:	232a      	movs	r3, #42	@ 0x2a
 800eec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b02      	cmp	r3, #2
 800eed0:	d909      	bls.n	800eee6 <mg_aton6+0x3c>
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	2b5b      	cmp	r3, #91	@ 0x5b
 800eed8:	d105      	bne.n	800eee6 <mg_aton6+0x3c>
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	3301      	adds	r3, #1
 800eede:	60bb      	str	r3, [r7, #8]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3b02      	subs	r3, #2
 800eee4:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	f107 0308 	add.w	r3, r7, #8
 800eeec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eef0:	f7ff ff73 	bl	800edda <mg_v4mapped>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <mg_aton6+0x54>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e0e1      	b.n	800f0c2 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800eefe:	2300      	movs	r3, #0
 800ef00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef02:	e0b0      	b.n	800f066 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef08:	4413      	add	r3, r2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef0e:	d905      	bls.n	800ef1c <mg_aton6+0x72>
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef14:	4413      	add	r3, r2
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	2b39      	cmp	r3, #57	@ 0x39
 800ef1a:	d917      	bls.n	800ef4c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef20:	4413      	add	r3, r2
 800ef22:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800ef24:	2b60      	cmp	r3, #96	@ 0x60
 800ef26:	d905      	bls.n	800ef34 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2c:	4413      	add	r3, r2
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b66      	cmp	r3, #102	@ 0x66
 800ef32:	d90b      	bls.n	800ef4c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef38:	4413      	add	r3, r2
 800ef3a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ef3c:	2b40      	cmp	r3, #64	@ 0x40
 800ef3e:	d933      	bls.n	800efa8 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef44:	4413      	add	r3, r2
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	2b46      	cmp	r3, #70	@ 0x46
 800ef4a:	d82d      	bhi.n	800efa8 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800ef50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef52:	3303      	adds	r3, #3
 800ef54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d901      	bls.n	800ef5e <mg_aton6+0xb4>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e0b1      	b.n	800f0c2 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef62:	18d1      	adds	r1, r2, r3
 800ef64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	1c5a      	adds	r2, r3, #1
 800ef6c:	f107 0318 	add.w	r3, r7, #24
 800ef70:	4618      	mov	r0, r3
 800ef72:	f007 fd18 	bl	80169a6 <mg_str_n>
 800ef76:	f107 0314 	add.w	r3, r7, #20
 800ef7a:	2204      	movs	r2, #4
 800ef7c:	9200      	str	r2, [sp, #0]
 800ef7e:	2210      	movs	r2, #16
 800ef80:	f107 0118 	add.w	r1, r7, #24
 800ef84:	c903      	ldmia	r1, {r0, r1}
 800ef86:	f007 ff4c 	bl	8016e22 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	0a1b      	lsrs	r3, r3, #8
 800ef8e:	b2d9      	uxtb	r1, r3
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef94:	4413      	add	r3, r2
 800ef96:	460a      	mov	r2, r1
 800ef98:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800ef9a:	697a      	ldr	r2, [r7, #20]
 800ef9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef9e:	3301      	adds	r3, #1
 800efa0:	b2d1      	uxtb	r1, r2
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800efa6:	e05b      	b.n	800f060 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efac:	4413      	add	r3, r2
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b3a      	cmp	r3, #58	@ 0x3a
 800efb2:	d134      	bne.n	800f01e <mg_aton6+0x174>
      j = i + 1;
 800efb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efb6:	3301      	adds	r3, #1
 800efb8:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800efba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d014      	beq.n	800efea <mg_aton6+0x140>
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc4:	3b01      	subs	r3, #1
 800efc6:	4413      	add	r3, r2
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b3a      	cmp	r3, #58	@ 0x3a
 800efcc:	d10d      	bne.n	800efea <mg_aton6+0x140>
        dc = n;  // Double colon
 800efce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800efd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d90f      	bls.n	800eff8 <mg_aton6+0x14e>
 800efd8:	68ba      	ldr	r2, [r7, #8]
 800efda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efdc:	3b02      	subs	r3, #2
 800efde:	4413      	add	r3, r2
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b3a      	cmp	r3, #58	@ 0x3a
 800efe4:	d108      	bne.n	800eff8 <mg_aton6+0x14e>
 800efe6:	2300      	movs	r3, #0
 800efe8:	e06b      	b.n	800f0c2 <mg_aton6+0x218>
      } else if (i > 0) {
 800efea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efec:	2b00      	cmp	r3, #0
 800efee:	d004      	beq.n	800effa <mg_aton6+0x150>
        n += 2;
 800eff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff2:	3302      	adds	r3, #2
 800eff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eff6:	e000      	b.n	800effa <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800eff8:	bf00      	nop
      }
      if (n > 14) return false;
 800effa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effc:	2b0e      	cmp	r3, #14
 800effe:	d901      	bls.n	800f004 <mg_aton6+0x15a>
 800f000:	2300      	movs	r3, #0
 800f002:	e05e      	b.n	800f0c2 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800f004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f006:	3301      	adds	r3, #1
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	2100      	movs	r1, #0
 800f00c:	54d1      	strb	r1, [r2, r3]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	5cd1      	ldrb	r1, [r2, r3]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f016:	4413      	add	r3, r2
 800f018:	460a      	mov	r2, r1
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	e020      	b.n	800f060 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f022:	4413      	add	r3, r2
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	2b25      	cmp	r3, #37	@ 0x25
 800f028:	d118      	bne.n	800f05c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f02e:	3301      	adds	r3, #1
 800f030:	18d1      	adds	r1, r2, r3
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	1e5a      	subs	r2, r3, #1
 800f03a:	f107 0320 	add.w	r3, r7, #32
 800f03e:	4618      	mov	r0, r3
 800f040:	f007 fcb1 	bl	80169a6 <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800f048:	2201      	movs	r2, #1
 800f04a:	9200      	str	r2, [sp, #0]
 800f04c:	220a      	movs	r2, #10
 800f04e:	f107 0120 	add.w	r1, r7, #32
 800f052:	c903      	ldmia	r1, {r0, r1}
 800f054:	f007 fee5 	bl	8016e22 <mg_str_to_num>
 800f058:	4603      	mov	r3, r0
 800f05a:	e032      	b.n	800f0c2 <mg_aton6+0x218>
    } else {
      return false;
 800f05c:	2300      	movs	r3, #0
 800f05e:	e030      	b.n	800f0c2 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800f060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f062:	3301      	adds	r3, #1
 800f064:	637b      	str	r3, [r7, #52]	@ 0x34
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f06a:	429a      	cmp	r2, r3
 800f06c:	f4ff af4a 	bcc.w	800ef04 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800f070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f072:	2b0d      	cmp	r3, #13
 800f074:	d804      	bhi.n	800f080 <mg_aton6+0x1d6>
 800f076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f078:	2b2a      	cmp	r3, #42	@ 0x2a
 800f07a:	d101      	bne.n	800f080 <mg_aton6+0x1d6>
 800f07c:	2300      	movs	r3, #0
 800f07e:	e020      	b.n	800f0c2 <mg_aton6+0x218>
  if (n < 14) {
 800f080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f082:	2b0d      	cmp	r3, #13
 800f084:	d819      	bhi.n	800f0ba <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800f086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	330e      	adds	r3, #14
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	18d0      	adds	r0, r2, r3
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f096:	18d1      	adds	r1, r2, r3
 800f098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	3302      	adds	r3, #2
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	f018 fb5b 	bl	802775c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0aa:	18d0      	adds	r0, r2, r3
 800f0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ae:	f1c3 030e 	rsb	r3, r3, #14
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	f018 fb6b 	bl	8027790 <memset>
  }

  addr->is_ip6 = true;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	74da      	strb	r2, [r3, #19]
  return true;
 800f0c0:	2301      	movs	r3, #1
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3738      	adds	r7, #56	@ 0x38
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	f107 0308 	add.w	r3, r7, #8
 800f0d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0d8:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	f107 0308 	add.w	r3, r7, #8
 800f0e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f0e4:	f7ff fde8 	bl	800ecb8 <mg_atone>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d11d      	bne.n	800f12a <mg_aton+0x60>
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	f107 0308 	add.w	r3, r7, #8
 800f0f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f0f8:	f7ff fdae 	bl	800ec58 <mg_atonl>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d113      	bne.n	800f12a <mg_aton+0x60>
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	f107 0308 	add.w	r3, r7, #8
 800f108:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f10c:	f7ff fdef 	bl	800ecee <mg_aton4>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d109      	bne.n	800f12a <mg_aton+0x60>
         mg_aton6(str, addr);
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	f107 0308 	add.w	r3, r7, #8
 800f11c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f120:	f7ff fec3 	bl	800eeaa <mg_aton6>
 800f124:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <mg_aton+0x64>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <mg_aton+0x66>
 800f12e:	2300      	movs	r3, #0
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	b2db      	uxtb	r3, r3
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f14a:	33b0      	adds	r3, #176	@ 0xb0
 800f14c:	4619      	mov	r1, r3
 800f14e:	2001      	movs	r0, #1
 800f150:	f016 fc70 	bl	8025a34 <calloc>
 800f154:	4603      	mov	r3, r0
 800f156:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d017      	beq.n	800f18e <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f16a:	675a      	str	r2, [r3, #116]	@ 0x74
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	645a      	str	r2, [r3, #68]	@ 0x44
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	69db      	ldr	r3, [r3, #28]
 800f180:	1c5a      	adds	r2, r3, #1
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	61da      	str	r2, [r3, #28]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	69da      	ldr	r2, [r3, #28]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800f18e:	68fb      	ldr	r3, [r7, #12]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7f8 ff84 	bl	80080ae <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	e002      	b.n	800f1b4 <mg_close_conn+0x1c>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d1f7      	bne.n	800f1ae <mg_close_conn+0x16>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d103      	bne.n	800f1da <mg_close_conn+0x42>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d103      	bne.n	800f1ee <mg_close_conn+0x56>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	2109      	movs	r1, #9
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7f9 fd22 	bl	8008c3c <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800f1f8:	4b17      	ldr	r3, [pc, #92]	@ (800f258 <mg_close_conn+0xc0>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	dd0e      	ble.n	800f21e <mg_close_conn+0x86>
 800f200:	4b16      	ldr	r3, [pc, #88]	@ (800f25c <mg_close_conn+0xc4>)
 800f202:	f640 72bb 	movw	r2, #4027	@ 0xfbb
 800f206:	4916      	ldr	r1, [pc, #88]	@ (800f260 <mg_close_conn+0xc8>)
 800f208:	2003      	movs	r0, #3
 800f20a:	f7ff fbaf 	bl	800e96c <mg_log_prefix>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f216:	461a      	mov	r2, r3
 800f218:	4812      	ldr	r0, [pc, #72]	@ (800f264 <mg_close_conn+0xcc>)
 800f21a:	f7ff fbf7 	bl	800ea0c <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f00c f8c0 	bl	801b3a4 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	3338      	adds	r3, #56	@ 0x38
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fe fbd2 	bl	800d9d2 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	3348      	adds	r3, #72	@ 0x48
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe fbcd 	bl	800d9d2 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3368      	adds	r3, #104	@ 0x68
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe fbc8 	bl	800d9d2 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800f242:	21b0      	movs	r1, #176	@ 0xb0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f012 fd4b 	bl	8021ce0 <mg_bzero>
  free(c);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f016 fc16 	bl	8025a7c <free>
}
 800f250:	bf00      	nop
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	24000258 	.word	0x24000258
 800f25c:	0802da50 	.word	0x0802da50
 800f260:	08029e1c 	.word	0x08029e1c
 800f264:	0802adbc 	.word	0x0802adbc

0800f268 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
 800f274:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <mg_connect+0x20>
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10e      	bne.n	800f2a6 <mg_connect+0x3e>
    MG_ERROR(("null url"));
 800f288:	4b3f      	ldr	r3, [pc, #252]	@ (800f388 <mg_connect+0x120>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dd76      	ble.n	800f37e <mg_connect+0x116>
 800f290:	4b3e      	ldr	r3, [pc, #248]	@ (800f38c <mg_connect+0x124>)
 800f292:	f640 72cb 	movw	r2, #4043	@ 0xfcb
 800f296:	493e      	ldr	r1, [pc, #248]	@ (800f390 <mg_connect+0x128>)
 800f298:	2001      	movs	r0, #1
 800f29a:	f7ff fb67 	bl	800e96c <mg_log_prefix>
 800f29e:	483d      	ldr	r0, [pc, #244]	@ (800f394 <mg_connect+0x12c>)
 800f2a0:	f7ff fbb4 	bl	800ea0c <mg_log>
 800f2a4:	e06b      	b.n	800f37e <mg_connect+0x116>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f7ff ff49 	bl	800f13e <mg_alloc_conn>
 800f2ac:	6178      	str	r0, [r7, #20]
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10e      	bne.n	800f2d2 <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 800f2b4:	4b34      	ldr	r3, [pc, #208]	@ (800f388 <mg_connect+0x120>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	dd60      	ble.n	800f37e <mg_connect+0x116>
 800f2bc:	4b33      	ldr	r3, [pc, #204]	@ (800f38c <mg_connect+0x124>)
 800f2be:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 800f2c2:	4933      	ldr	r1, [pc, #204]	@ (800f390 <mg_connect+0x128>)
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	f7ff fb51 	bl	800e96c <mg_log_prefix>
 800f2ca:	4833      	ldr	r0, [pc, #204]	@ (800f398 <mg_connect+0x130>)
 800f2cc:	f7ff fb9e 	bl	800ea0c <mg_log>
 800f2d0:	e055      	b.n	800f37e <mg_connect+0x116>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	601a      	str	r2, [r3, #0]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 800f2e0:	2204      	movs	r2, #4
 800f2e2:	492e      	ldr	r1, [pc, #184]	@ (800f39c <mg_connect+0x134>)
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f018 fa68 	bl	80277ba <strncmp>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	bf0c      	ite	eq
 800f2f0:	2301      	moveq	r3, #1
 800f2f2:	2300      	movne	r3, #0
 800f2f4:	b2d9      	uxtb	r1, r3
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f2fc:	f361 0300 	bfi	r3, r1, #0, #1
 800f300:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	f04f 32ff 	mov.w	r2, #4294967295
 800f30a:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f318:	f043 0302 	orr.w	r3, r3, #2
 800f31c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800f326:	68b8      	ldr	r0, [r7, #8]
 800f328:	f012 fb7a 	bl	8021a20 <mg_url_is_ssl>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	bf14      	ite	ne
 800f332:	2301      	movne	r3, #1
 800f334:	2300      	moveq	r3, #0
 800f336:	b2d9      	uxtb	r1, r3
 800f338:	697a      	ldr	r2, [r7, #20]
 800f33a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f33e:	f361 1386 	bfi	r3, r1, #6, #1
 800f342:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, (void *) url);
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	2101      	movs	r1, #1
 800f34a:	6978      	ldr	r0, [r7, #20]
 800f34c:	f7f9 fc76 	bl	8008c3c <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800f350:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <mg_connect+0x120>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b02      	cmp	r3, #2
 800f356:	dd0e      	ble.n	800f376 <mg_connect+0x10e>
 800f358:	4b0c      	ldr	r3, [pc, #48]	@ (800f38c <mg_connect+0x124>)
 800f35a:	f640 72d7 	movw	r2, #4055	@ 0xfd7
 800f35e:	490c      	ldr	r1, [pc, #48]	@ (800f390 <mg_connect+0x128>)
 800f360:	2003      	movs	r0, #3
 800f362:	f7ff fb03 	bl	800e96c <mg_log_prefix>
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	480b      	ldr	r0, [pc, #44]	@ (800f3a0 <mg_connect+0x138>)
 800f372:	f7ff fb4b 	bl	800ea0c <mg_log>
    mg_resolve(c, url);
 800f376:	68b9      	ldr	r1, [r7, #8]
 800f378:	6978      	ldr	r0, [r7, #20]
 800f37a:	f7f9 fc1b 	bl	8008bb4 <mg_resolve>
  }
  return c;
 800f37e:	697b      	ldr	r3, [r7, #20]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3718      	adds	r7, #24
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	24000258 	.word	0x24000258
 800f38c:	0802da60 	.word	0x0802da60
 800f390:	08029e1c 	.word	0x08029e1c
 800f394:	0802adcc 	.word	0x0802adcc
 800f398:	0802add8 	.word	0x0802add8
 800f39c:	0802addc 	.word	0x0802addc
 800f3a0:	08029fcc 	.word	0x08029fcc

0800f3a4 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
 800f3b0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f7ff fec1 	bl	800f13e <mg_alloc_conn>
 800f3bc:	6178      	str	r0, [r7, #20]
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10f      	bne.n	800f3e4 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800f3c4:	4b43      	ldr	r3, [pc, #268]	@ (800f4d4 <mg_listen+0x130>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	dd7d      	ble.n	800f4c8 <mg_listen+0x124>
 800f3cc:	4b42      	ldr	r3, [pc, #264]	@ (800f4d8 <mg_listen+0x134>)
 800f3ce:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800f3d2:	4942      	ldr	r1, [pc, #264]	@ (800f4dc <mg_listen+0x138>)
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	f7ff fac9 	bl	800e96c <mg_log_prefix>
 800f3da:	68b9      	ldr	r1, [r7, #8]
 800f3dc:	4840      	ldr	r0, [pc, #256]	@ (800f4e0 <mg_listen+0x13c>)
 800f3de:	f7ff fb15 	bl	800ea0c <mg_log>
 800f3e2:	e071      	b.n	800f4c8 <mg_listen+0x124>
  } else if (!mg_open_listener(c, url)) {
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	6978      	ldr	r0, [r7, #20]
 800f3e8:	f003 fb06 	bl	80129f8 <mg_open_listener>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	f083 0301 	eor.w	r3, r3, #1
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d019      	beq.n	800f42c <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800f3f8:	4b36      	ldr	r3, [pc, #216]	@ (800f4d4 <mg_listen+0x130>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	dd0f      	ble.n	800f420 <mg_listen+0x7c>
 800f400:	4b35      	ldr	r3, [pc, #212]	@ (800f4d8 <mg_listen+0x134>)
 800f402:	f640 72e3 	movw	r2, #4067	@ 0xfe3
 800f406:	4935      	ldr	r1, [pc, #212]	@ (800f4dc <mg_listen+0x138>)
 800f408:	2001      	movs	r0, #1
 800f40a:	f7ff faaf 	bl	800e96c <mg_log_prefix>
 800f40e:	f018 fac3 	bl	8027998 <__errno>
 800f412:	4603      	mov	r3, r0
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	461a      	mov	r2, r3
 800f418:	68b9      	ldr	r1, [r7, #8]
 800f41a:	4832      	ldr	r0, [pc, #200]	@ (800f4e4 <mg_listen+0x140>)
 800f41c:	f7ff faf6 	bl	800ea0c <mg_log>
    MG_PROF_FREE(c);
    free(c);
 800f420:	6978      	ldr	r0, [r7, #20]
 800f422:	f016 fb2b 	bl	8025a7c <free>
    c = NULL;
 800f426:	2300      	movs	r3, #0
 800f428:	617b      	str	r3, [r7, #20]
 800f42a:	e04d      	b.n	800f4c8 <mg_listen+0x124>
  } else {
    c->is_listening = 1;
 800f42c:	697a      	ldr	r2, [r7, #20]
 800f42e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f432:	f043 0301 	orr.w	r3, r3, #1
 800f436:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800f43a:	2204      	movs	r2, #4
 800f43c:	492a      	ldr	r1, [pc, #168]	@ (800f4e8 <mg_listen+0x144>)
 800f43e:	68b8      	ldr	r0, [r7, #8]
 800f440:	f018 f9bb 	bl	80277ba <strncmp>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	bf0c      	ite	eq
 800f44a:	2301      	moveq	r3, #1
 800f44c:	2300      	movne	r3, #0
 800f44e:	b2d9      	uxtb	r1, r3
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f456:	f361 0300 	bfi	r3, r1, #0, #1
 800f45a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	601a      	str	r2, [r3, #0]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	683a      	ldr	r2, [r7, #0]
 800f476:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800f478:	68b8      	ldr	r0, [r7, #8]
 800f47a:	f012 fad1 	bl	8021a20 <mg_url_is_ssl>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	bf14      	ite	ne
 800f484:	2301      	movne	r3, #1
 800f486:	2300      	moveq	r3, #0
 800f488:	b2d9      	uxtb	r1, r3
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f490:	f361 1386 	bfi	r3, r1, #6, #1
 800f494:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, NULL);
 800f498:	2200      	movs	r2, #0
 800f49a:	2101      	movs	r1, #1
 800f49c:	6978      	ldr	r0, [r7, #20]
 800f49e:	f7f9 fbcd 	bl	8008c3c <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800f4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f4d4 <mg_listen+0x130>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	dd0e      	ble.n	800f4c8 <mg_listen+0x124>
 800f4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f4d8 <mg_listen+0x134>)
 800f4ac:	f640 72ef 	movw	r2, #4079	@ 0xfef
 800f4b0:	490a      	ldr	r1, [pc, #40]	@ (800f4dc <mg_listen+0x138>)
 800f4b2:	2003      	movs	r0, #3
 800f4b4:	f7ff fa5a 	bl	800e96c <mg_log_prefix>
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	480a      	ldr	r0, [pc, #40]	@ (800f4ec <mg_listen+0x148>)
 800f4c4:	f7ff faa2 	bl	800ea0c <mg_log>
  }
  return c;
 800f4c8:	697b      	ldr	r3, [r7, #20]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	24000258 	.word	0x24000258
 800f4d8:	0802da6c 	.word	0x0802da6c
 800f4dc:	08029e1c 	.word	0x08029e1c
 800f4e0:	0802ade4 	.word	0x0802ade4
 800f4e4:	0802adec 	.word	0x0802adec
 800f4e8:	0802addc 	.word	0x0802addc
 800f4ec:	08029fcc 	.word	0x08029fcc

0800f4f0 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08a      	sub	sp, #40	@ 0x28
 800f4f4:	af04      	add	r7, sp, #16
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800f4fc:	2120      	movs	r1, #32
 800f4fe:	2001      	movs	r0, #1
 800f500:	f016 fa98 	bl	8025a34 <calloc>
 800f504:	4603      	mov	r3, r0
 800f506:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d011      	beq.n	800f532 <mg_timer_add+0x42>
    flags |= MG_TIMER_AUTODELETE;  // We have calloc-ed it, so autodelete
 800f50e:	6a3b      	ldr	r3, [r7, #32]
 800f510:	f043 0308 	orr.w	r3, r3, #8
 800f514:	623b      	str	r3, [r7, #32]
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800f51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f51e:	9302      	str	r3, [sp, #8]
 800f520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f522:	9301      	str	r3, [sp, #4]
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f52c:	6979      	ldr	r1, [r7, #20]
 800f52e:	f007 feab 	bl	8017288 <mg_timer_init>
  }
  return t;
 800f532:	697b      	ldr	r3, [r7, #20]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3718      	adds	r7, #24
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800f544:	2244      	movs	r2, #68	@ 0x44
 800f546:	2100      	movs	r1, #0
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f018 f921 	bl	8027790 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f04f 32ff 	mov.w	r2, #4294967295
 800f554:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800f556:	4b34      	ldr	r3, [pc, #208]	@ (800f628 <mg_mgr_init+0xec>)
 800f558:	2204      	movs	r2, #4
 800f55a:	601a      	str	r2, [r3, #0]
 800f55c:	4b32      	ldr	r3, [pc, #200]	@ (800f628 <mg_mgr_init+0xec>)
 800f55e:	2200      	movs	r2, #0
 800f560:	711a      	strb	r2, [r3, #4]
 800f562:	4b31      	ldr	r3, [pc, #196]	@ (800f628 <mg_mgr_init+0xec>)
 800f564:	2202      	movs	r2, #2
 800f566:	715a      	strb	r2, [r3, #5]
 800f568:	4830      	ldr	r0, [pc, #192]	@ (800f62c <mg_mgr_init+0xf0>)
 800f56a:	f012 fcb0 	bl	8021ece <mg_ntohl>
 800f56e:	4603      	mov	r3, r0
 800f570:	4a2f      	ldr	r2, [pc, #188]	@ (800f630 <mg_mgr_init+0xf4>)
 800f572:	6093      	str	r3, [r2, #8]
 800f574:	482f      	ldr	r0, [pc, #188]	@ (800f634 <mg_mgr_init+0xf8>)
 800f576:	f012 fcaa 	bl	8021ece <mg_ntohl>
 800f57a:	4603      	mov	r3, r0
 800f57c:	4a2c      	ldr	r2, [pc, #176]	@ (800f630 <mg_mgr_init+0xf4>)
 800f57e:	60d3      	str	r3, [r2, #12]
 800f580:	482d      	ldr	r0, [pc, #180]	@ (800f638 <mg_mgr_init+0xfc>)
 800f582:	f012 fca4 	bl	8021ece <mg_ntohl>
 800f586:	4603      	mov	r3, r0
 800f588:	4a29      	ldr	r2, [pc, #164]	@ (800f630 <mg_mgr_init+0xf4>)
 800f58a:	6113      	str	r3, [r2, #16]
 800f58c:	4b28      	ldr	r3, [pc, #160]	@ (800f630 <mg_mgr_init+0xf4>)
 800f58e:	4a2b      	ldr	r2, [pc, #172]	@ (800f63c <mg_mgr_init+0x100>)
 800f590:	625a      	str	r2, [r3, #36]	@ 0x24
 800f592:	4b27      	ldr	r3, [pc, #156]	@ (800f630 <mg_mgr_init+0xf4>)
 800f594:	4a24      	ldr	r2, [pc, #144]	@ (800f628 <mg_mgr_init+0xec>)
 800f596:	629a      	str	r2, [r3, #40]	@ 0x28
 800f598:	4b25      	ldr	r3, [pc, #148]	@ (800f630 <mg_mgr_init+0xf4>)
 800f59a:	2202      	movs	r2, #2
 800f59c:	701a      	strb	r2, [r3, #0]
 800f59e:	4b28      	ldr	r3, [pc, #160]	@ (800f640 <mg_mgr_init+0x104>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	4b22      	ldr	r3, [pc, #136]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5a6:	705a      	strb	r2, [r3, #1]
 800f5a8:	4b25      	ldr	r3, [pc, #148]	@ (800f640 <mg_mgr_init+0x104>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	0a9b      	lsrs	r3, r3, #10
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	4b1f      	ldr	r3, [pc, #124]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5b2:	709a      	strb	r2, [r3, #2]
 800f5b4:	4b22      	ldr	r3, [pc, #136]	@ (800f640 <mg_mgr_init+0x104>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	0cdb      	lsrs	r3, r3, #19
 800f5ba:	b2da      	uxtb	r2, r3
 800f5bc:	4b1c      	ldr	r3, [pc, #112]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5be:	70da      	strb	r2, [r3, #3]
 800f5c0:	4b20      	ldr	r3, [pc, #128]	@ (800f644 <mg_mgr_init+0x108>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	b2da      	uxtb	r2, r3
 800f5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5c8:	711a      	strb	r2, [r3, #4]
 800f5ca:	4b1f      	ldr	r3, [pc, #124]	@ (800f648 <mg_mgr_init+0x10c>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	4b17      	ldr	r3, [pc, #92]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5d2:	715a      	strb	r2, [r3, #5]
 800f5d4:	4916      	ldr	r1, [pc, #88]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f002 ffb4 	bl	8012544 <mg_tcpip_init>
 800f5dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f64c <mg_mgr_init+0x110>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	dd0b      	ble.n	800f5fc <mg_mgr_init+0xc0>
 800f5e4:	4b1a      	ldr	r3, [pc, #104]	@ (800f650 <mg_mgr_init+0x114>)
 800f5e6:	f241 023b 	movw	r2, #4155	@ 0x103b
 800f5ea:	491a      	ldr	r1, [pc, #104]	@ (800f654 <mg_mgr_init+0x118>)
 800f5ec:	2002      	movs	r0, #2
 800f5ee:	f7ff f9bd 	bl	800e96c <mg_log_prefix>
 800f5f2:	4a0f      	ldr	r2, [pc, #60]	@ (800f630 <mg_mgr_init+0xf4>)
 800f5f4:	4918      	ldr	r1, [pc, #96]	@ (800f658 <mg_mgr_init+0x11c>)
 800f5f6:	4819      	ldr	r0, [pc, #100]	@ (800f65c <mg_mgr_init+0x120>)
 800f5f8:	f7ff fa08 	bl	800ea0c <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f602:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f60a:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a14      	ldr	r2, [pc, #80]	@ (800f660 <mg_mgr_init+0x124>)
 800f610:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a13      	ldr	r2, [pc, #76]	@ (800f664 <mg_mgr_init+0x128>)
 800f616:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f00c f81e 	bl	801b65a <mg_tls_ctx_init>
}
 800f61e:	bf00      	nop
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	24005450 	.word	0x24005450
 800f62c:	c0a80119 	.word	0xc0a80119
 800f630:	24005458 	.word	0x24005458
 800f634:	ffff0000 	.word	0xffff0000
 800f638:	c0a80101 	.word	0xc0a80101
 800f63c:	240002a0 	.word	0x240002a0
 800f640:	1ff1e800 	.word	0x1ff1e800
 800f644:	1ff1e804 	.word	0x1ff1e804
 800f648:	1ff1e808 	.word	0x1ff1e808
 800f64c:	24000258 	.word	0x24000258
 800f650:	0802da78 	.word	0x0802da78
 800f654:	08029e1c 	.word	0x08029e1c
 800f658:	08013461 	.word	0x08013461
 800f65c:	0802ae1c 	.word	0x0802ae1c
 800f660:	0802ae34 	.word	0x0802ae34
 800f664:	0802ae48 	.word	0x0802ae48

0800f668 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d005      	beq.n	800f688 <mg_tcpip_call+0x20>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	4798      	blx	r3
}
 800f688:	bf00      	nop
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800f690:	b590      	push	{r4, r7, lr}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	441a      	add	r2, r3
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	1ad3      	subs	r3, r2, r3
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	68fc      	ldr	r4, [r7, #12]
 800f6ac:	463b      	mov	r3, r7
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f007 f978 	bl	80169a6 <mg_str_n>
 800f6b6:	f104 0308 	add.w	r3, r4, #8
 800f6ba:	463a      	mov	r2, r7
 800f6bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6c0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800f6c4:	bf00      	nop
 800f6c6:	3714      	adds	r7, #20
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd90      	pop	{r4, r7, pc}

0800f6cc <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800f6cc:	b480      	push	{r7}
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	e014      	b.n	800f70c <csumup+0x40>
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d004      	beq.n	800f6f6 <csumup+0x2a>
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	e004      	b.n	800f700 <csumup+0x34>
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	021b      	lsls	r3, r3, #8
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	4413      	add	r3, r2
 800f704:	60fb      	str	r3, [r7, #12]
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	3301      	adds	r3, #1
 800f70a:	617b      	str	r3, [r7, #20]
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	429a      	cmp	r2, r3
 800f712:	d3e6      	bcc.n	800f6e2 <csumup+0x16>
  return sum;
 800f714:	68fb      	ldr	r3, [r7, #12]
}
 800f716:	4618      	mov	r0, r3
 800f718:	371c      	adds	r7, #28
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800f722:	b580      	push	{r7, lr}
 800f724:	b082      	sub	sp, #8
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800f72a:	e005      	b.n	800f738 <csumfin+0x16>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	b29a      	uxth	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	0c1b      	lsrs	r3, r3, #16
 800f734:	4413      	add	r3, r2
 800f736:	607b      	str	r3, [r7, #4]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	0c1b      	lsrs	r3, r3, #16
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d1f5      	bne.n	800f72c <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	b29b      	uxth	r3, r3
 800f744:	43db      	mvns	r3, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	4618      	mov	r0, r3
 800f74a:	f012 fba9 	bl	8021ea0 <mg_ntohs>
 800f74e:	4603      	mov	r3, r0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3708      	adds	r7, #8
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800f762:	683a      	ldr	r2, [r7, #0]
 800f764:	6879      	ldr	r1, [r7, #4]
 800f766:	2000      	movs	r0, #0
 800f768:	f7ff ffb0 	bl	800f6cc <csumup>
 800f76c:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f7ff ffd7 	bl	800f722 <csumfin>
 800f774:	4603      	mov	r3, r0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
	...

0800f780 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800f780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f784:	b088      	sub	sp, #32
 800f786:	af02      	add	r7, sp, #8
 800f788:	6078      	str	r0, [r7, #4]
 800f78a:	460b      	mov	r3, r1
 800f78c:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f794:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	33b0      	adds	r3, #176	@ 0xb0
 800f79a:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800f79c:	78fb      	ldrb	r3, [r7, #3]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d013      	beq.n	800f7ca <settmout+0x4a>
 800f7a2:	78fb      	ldrb	r3, [r7, #3]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d00e      	beq.n	800f7c6 <settmout+0x46>
 800f7a8:	78fb      	ldrb	r3, [r7, #3]
 800f7aa:	2b03      	cmp	r3, #3
 800f7ac:	d008      	beq.n	800f7c0 <settmout+0x40>
 800f7ae:	78fb      	ldrb	r3, [r7, #3]
 800f7b0:	2b04      	cmp	r3, #4
 800f7b2:	d102      	bne.n	800f7ba <settmout+0x3a>
 800f7b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f7b8:	e008      	b.n	800f7cc <settmout+0x4c>
 800f7ba:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800f7be:	e005      	b.n	800f7cc <settmout+0x4c>
 800f7c0:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800f7c4:	e002      	b.n	800f7cc <settmout+0x4c>
 800f7c6:	2364      	movs	r3, #100	@ 0x64
 800f7c8:	e000      	b.n	800f7cc <settmout+0x4c>
 800f7ca:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800f7cc:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7d4:	2b04      	cmp	r3, #4
 800f7d6:	d029      	beq.n	800f82c <settmout+0xac>
  s->timer = ifp->now + n;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800f7de:	68f9      	ldr	r1, [r7, #12]
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	eb12 0804 	adds.w	r8, r2, r4
 800f7ea:	eb43 0905 	adc.w	r9, r3, r5
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	78fa      	ldrb	r2, [r7, #3]
 800f7f8:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800f7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f838 <settmout+0xb8>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b03      	cmp	r3, #3
 800f802:	dd14      	ble.n	800f82e <settmout+0xae>
 800f804:	4b0d      	ldr	r3, [pc, #52]	@ (800f83c <settmout+0xbc>)
 800f806:	f241 02fd 	movw	r2, #4349	@ 0x10fd
 800f80a:	490d      	ldr	r1, [pc, #52]	@ (800f840 <settmout+0xc0>)
 800f80c:	2004      	movs	r0, #4
 800f80e:	f7ff f8ad 	bl	800e96c <mg_log_prefix>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f816:	78f8      	ldrb	r0, [r7, #3]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f81e:	e9cd 2300 	strd	r2, r3, [sp]
 800f822:	4602      	mov	r2, r0
 800f824:	4807      	ldr	r0, [pc, #28]	@ (800f844 <settmout+0xc4>)
 800f826:	f7ff f8f1 	bl	800ea0c <mg_log>
 800f82a:	e000      	b.n	800f82e <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800f82c:	bf00      	nop
}
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f836:	bf00      	nop
 800f838:	24000258 	.word	0x24000258
 800f83c:	0802da84 	.word	0x0802da84
 800f840:	08029e1c 	.word	0x08029e1c
 800f844:	0802ae68 	.word	0x0802ae68

0800f848 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	6950      	ldr	r0, [r2, #20]
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	4798      	blx	r3
 800f862:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d104      	bne.n	800f876 <ether_output+0x2e>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f870:	1c5a      	adds	r2, r3, #1
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 800f876:	68fb      	ldr	r3, [r7, #12]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3710      	adds	r7, #16
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	695b      	ldr	r3, [r3, #20]
 800f890:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	330e      	adds	r3, #14
 800f896:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2206      	movs	r2, #6
 800f89c:	21ff      	movs	r1, #255	@ 0xff
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f017 ff76 	bl	8027790 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	3306      	adds	r3, #6
 800f8a8:	68f9      	ldr	r1, [r7, #12]
 800f8aa:	2206      	movs	r2, #6
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f018 f8a8 	bl	8027a02 <memcpy>
  eth->type = mg_htons(0x806);
 800f8b2:	f640 0006 	movw	r0, #2054	@ 0x806
 800f8b6:	f012 faf3 	bl	8021ea0 <mg_ntohs>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	461a      	mov	r2, r3
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800f8c2:	221c      	movs	r2, #28
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	6938      	ldr	r0, [r7, #16]
 800f8c8:	f017 ff62 	bl	8027790 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	f012 fae7 	bl	8021ea0 <mg_ntohs>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	801a      	strh	r2, [r3, #0]
 800f8da:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f8de:	f012 fadf 	bl	8021ea0 <mg_ntohs>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	805a      	strh	r2, [r3, #2]
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	2206      	movs	r2, #6
 800f8ee:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	2204      	movs	r2, #4
 800f8f4:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	f012 fad2 	bl	8021ea0 <mg_ntohs>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	461a      	mov	r2, r3
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	80da      	strh	r2, [r3, #6]
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	619a      	str	r2, [r3, #24]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	689a      	ldr	r2, [r3, #8]
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	3308      	adds	r3, #8
 800f918:	68f9      	ldr	r1, [r7, #12]
 800f91a:	2206      	movs	r2, #6
 800f91c:	4618      	mov	r0, r3
 800f91e:	f018 f870 	bl	8027a02 <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d006      	beq.n	800f936 <mg_tcpip_arp_request+0xb6>
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	3312      	adds	r3, #18
 800f92c:	2206      	movs	r2, #6
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	f018 f866 	bl	8027a02 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	f103 021c 	add.w	r2, r3, #28
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	4619      	mov	r1, r3
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7ff ff80 	bl	800f848 <ether_output>
}
 800f948:	bf00      	nop
 800f94a:	3718      	adds	r7, #24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f95e:	2b04      	cmp	r3, #4
 800f960:	d135      	bne.n	800f9ce <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800f962:	4b45      	ldr	r3, [pc, #276]	@ (800fa78 <onstatechange+0x128>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b01      	cmp	r3, #1
 800f968:	dd0d      	ble.n	800f986 <onstatechange+0x36>
 800f96a:	4b44      	ldr	r3, [pc, #272]	@ (800fa7c <onstatechange+0x12c>)
 800f96c:	f241 1217 	movw	r2, #4375	@ 0x1117
 800f970:	4943      	ldr	r1, [pc, #268]	@ (800fa80 <onstatechange+0x130>)
 800f972:	2002      	movs	r0, #2
 800f974:	f7fe fffa 	bl	800e96c <mg_log_prefix>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	3308      	adds	r3, #8
 800f97c:	461a      	mov	r2, r3
 800f97e:	4941      	ldr	r1, [pc, #260]	@ (800fa84 <onstatechange+0x134>)
 800f980:	4841      	ldr	r0, [pc, #260]	@ (800fa88 <onstatechange+0x138>)
 800f982:	f7ff f843 	bl	800ea0c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800f986:	4b3c      	ldr	r3, [pc, #240]	@ (800fa78 <onstatechange+0x128>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	dd0d      	ble.n	800f9aa <onstatechange+0x5a>
 800f98e:	4b3b      	ldr	r3, [pc, #236]	@ (800fa7c <onstatechange+0x12c>)
 800f990:	f241 1218 	movw	r2, #4376	@ 0x1118
 800f994:	493a      	ldr	r1, [pc, #232]	@ (800fa80 <onstatechange+0x130>)
 800f996:	2002      	movs	r0, #2
 800f998:	f7fe ffe8 	bl	800e96c <mg_log_prefix>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	3310      	adds	r3, #16
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4938      	ldr	r1, [pc, #224]	@ (800fa84 <onstatechange+0x134>)
 800f9a4:	4839      	ldr	r0, [pc, #228]	@ (800fa8c <onstatechange+0x13c>)
 800f9a6:	f7ff f831 	bl	800ea0c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800f9aa:	4b33      	ldr	r3, [pc, #204]	@ (800fa78 <onstatechange+0x128>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	dd57      	ble.n	800fa62 <onstatechange+0x112>
 800f9b2:	4b32      	ldr	r3, [pc, #200]	@ (800fa7c <onstatechange+0x12c>)
 800f9b4:	f241 1219 	movw	r2, #4377	@ 0x1119
 800f9b8:	4931      	ldr	r1, [pc, #196]	@ (800fa80 <onstatechange+0x130>)
 800f9ba:	2002      	movs	r0, #2
 800f9bc:	f7fe ffd6 	bl	800e96c <mg_log_prefix>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	4932      	ldr	r1, [pc, #200]	@ (800fa90 <onstatechange+0x140>)
 800f9c6:	4833      	ldr	r0, [pc, #204]	@ (800fa94 <onstatechange+0x144>)
 800f9c8:	f7ff f820 	bl	800ea0c <mg_log>
 800f9cc:	e049      	b.n	800fa62 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9d4:	2b03      	cmp	r3, #3
 800f9d6:	d115      	bne.n	800fa04 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 800f9d8:	4b27      	ldr	r3, [pc, #156]	@ (800fa78 <onstatechange+0x128>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dd09      	ble.n	800f9f4 <onstatechange+0xa4>
 800f9e0:	4b26      	ldr	r3, [pc, #152]	@ (800fa7c <onstatechange+0x12c>)
 800f9e2:	f241 121b 	movw	r2, #4379	@ 0x111b
 800f9e6:	4926      	ldr	r1, [pc, #152]	@ (800fa80 <onstatechange+0x130>)
 800f9e8:	2001      	movs	r0, #1
 800f9ea:	f7fe ffbf 	bl	800e96c <mg_log_prefix>
 800f9ee:	482a      	ldr	r0, [pc, #168]	@ (800fa98 <onstatechange+0x148>)
 800f9f0:	f7ff f80c 	bl	800ea0c <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	691b      	ldr	r3, [r3, #16]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7ff ff3f 	bl	800f880 <mg_tcpip_arp_request>
 800fa02:	e02e      	b.n	800fa62 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d116      	bne.n	800fa3c <onstatechange+0xec>
    MG_ERROR(("Link up"));
 800fa0e:	4b1a      	ldr	r3, [pc, #104]	@ (800fa78 <onstatechange+0x128>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	dd09      	ble.n	800fa2a <onstatechange+0xda>
 800fa16:	4b19      	ldr	r3, [pc, #100]	@ (800fa7c <onstatechange+0x12c>)
 800fa18:	f241 121e 	movw	r2, #4382	@ 0x111e
 800fa1c:	4918      	ldr	r1, [pc, #96]	@ (800fa80 <onstatechange+0x130>)
 800fa1e:	2001      	movs	r0, #1
 800fa20:	f7fe ffa4 	bl	800e96c <mg_log_prefix>
 800fa24:	481d      	ldr	r0, [pc, #116]	@ (800fa9c <onstatechange+0x14c>)
 800fa26:	f7fe fff1 	bl	800ea0c <mg_log>
    srand((unsigned int) mg_millis());
 800fa2a:	f7f1 f891 	bl	8000b50 <mg_millis>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	4613      	mov	r3, r2
 800fa34:	4618      	mov	r0, r3
 800fa36:	f016 f8d7 	bl	8025be8 <srand>
 800fa3a:	e012      	b.n	800fa62 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d10d      	bne.n	800fa62 <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800fa46:	4b0c      	ldr	r3, [pc, #48]	@ (800fa78 <onstatechange+0x128>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	dd09      	ble.n	800fa62 <onstatechange+0x112>
 800fa4e:	4b0b      	ldr	r3, [pc, #44]	@ (800fa7c <onstatechange+0x12c>)
 800fa50:	f241 1221 	movw	r2, #4385	@ 0x1121
 800fa54:	490a      	ldr	r1, [pc, #40]	@ (800fa80 <onstatechange+0x130>)
 800fa56:	2001      	movs	r0, #1
 800fa58:	f7fe ff88 	bl	800e96c <mg_log_prefix>
 800fa5c:	4810      	ldr	r0, [pc, #64]	@ (800faa0 <onstatechange+0x150>)
 800fa5e:	f7fe ffd5 	bl	800ea0c <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3384      	adds	r3, #132	@ 0x84
 800fa66:	461a      	mov	r2, r3
 800fa68:	2100      	movs	r1, #0
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7ff fdfc 	bl	800f668 <mg_tcpip_call>
}
 800fa70:	bf00      	nop
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	24000258 	.word	0x24000258
 800fa7c:	0802da90 	.word	0x0802da90
 800fa80:	08029e1c 	.word	0x08029e1c
 800fa84:	0801339d 	.word	0x0801339d
 800fa88:	0802ae78 	.word	0x0802ae78
 800fa8c:	0802ae88 	.word	0x0802ae88
 800fa90:	08013461 	.word	0x08013461
 800fa94:	0802ae98 	.word	0x0802ae98
 800fa98:	0802aea8 	.word	0x0802aea8
 800fa9c:	0802aeb0 	.word	0x0802aeb0
 800faa0:	0802aeb8 	.word	0x0802aeb8

0800faa4 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b086      	sub	sp, #24
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	4613      	mov	r3, r2
 800fab2:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	695b      	ldr	r3, [r3, #20]
 800fab8:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	330e      	adds	r3, #14
 800fabe:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2206      	movs	r2, #6
 800fac4:	68b9      	ldr	r1, [r7, #8]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f017 ff9b 	bl	8027a02 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	3306      	adds	r3, #6
 800fad0:	68f9      	ldr	r1, [r7, #12]
 800fad2:	2206      	movs	r2, #6
 800fad4:	4618      	mov	r0, r3
 800fad6:	f017 ff94 	bl	8027a02 <memcpy>
  eth->type = mg_htons(0x800);
 800fada:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800fade:	f012 f9df 	bl	8021ea0 <mg_ntohs>
 800fae2:	4603      	mov	r3, r0
 800fae4:	461a      	mov	r2, r3
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800faea:	2214      	movs	r2, #20
 800faec:	2100      	movs	r1, #0
 800faee:	6938      	ldr	r0, [r7, #16]
 800faf0:	f017 fe4e 	bl	8027790 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	2245      	movs	r2, #69	@ 0x45
 800faf8:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800fafa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800fafe:	f012 f9cf 	bl	8021ea0 <mg_ntohs>
 800fb02:	4603      	mov	r3, r0
 800fb04:	461a      	mov	r2, r3
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	3314      	adds	r3, #20
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	4618      	mov	r0, r3
 800fb14:	f012 f9c4 	bl	8021ea0 <mg_ntohs>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	2240      	movs	r2, #64	@ 0x40
 800fb24:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	79fa      	ldrb	r2, [r7, #7]
 800fb2a:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	6a3a      	ldr	r2, [r7, #32]
 800fb36:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800fb38:	2114      	movs	r1, #20
 800fb3a:	6938      	ldr	r0, [r7, #16]
 800fb3c:	f7ff fe0c 	bl	800f758 <ipcsum>
 800fb40:	4603      	mov	r3, r0
 800fb42:	461a      	mov	r2, r3
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	815a      	strh	r2, [r3, #10]
  return ip;
 800fb48:	693b      	ldr	r3, [r7, #16]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3718      	adds	r7, #24
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b08a      	sub	sp, #40	@ 0x28
 800fb56:	af02      	add	r7, sp, #8
 800fb58:	60f8      	str	r0, [r7, #12]
 800fb5a:	60b9      	str	r1, [r7, #8]
 800fb5c:	607a      	str	r2, [r7, #4]
 800fb5e:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800fb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb62:	3308      	adds	r3, #8
 800fb64:	9301      	str	r3, [sp, #4]
 800fb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2211      	movs	r2, #17
 800fb6e:	68b9      	ldr	r1, [r7, #8]
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f7ff ff97 	bl	800faa4 <tx_ip>
 800fb76:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	3314      	adds	r3, #20
 800fb7c:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	887a      	ldrh	r2, [r7, #2]
 800fb82:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800fb88:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	3308      	adds	r3, #8
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	4618      	mov	r0, r3
 800fb94:	f012 f984 	bl	8021ea0 <mg_ntohs>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	2200      	movs	r2, #0
 800fba4:	719a      	strb	r2, [r3, #6]
 800fba6:	2200      	movs	r2, #0
 800fba8:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800fbaa:	2208      	movs	r2, #8
 800fbac:	69b9      	ldr	r1, [r7, #24]
 800fbae:	2000      	movs	r0, #0
 800fbb0:	f7ff fd8c 	bl	800f6cc <csumup>
 800fbb4:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800fbb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fbba:	6978      	ldr	r0, [r7, #20]
 800fbbc:	f7ff fd86 	bl	800f6cc <csumup>
 800fbc0:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	330c      	adds	r3, #12
 800fbc6:	2204      	movs	r2, #4
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6978      	ldr	r0, [r7, #20]
 800fbcc:	f7ff fd7e 	bl	800f6cc <csumup>
 800fbd0:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	3310      	adds	r3, #16
 800fbd6:	2204      	movs	r2, #4
 800fbd8:	4619      	mov	r1, r3
 800fbda:	6978      	ldr	r0, [r7, #20]
 800fbdc:	f7ff fd76 	bl	800f6cc <csumup>
 800fbe0:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	7a5b      	ldrb	r3, [r3, #9]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbea:	441a      	add	r2, r3
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	4413      	add	r3, r2
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800fbf4:	6978      	ldr	r0, [r7, #20]
 800fbf6:	f7ff fd94 	bl	800f722 <csumfin>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	3308      	adds	r3, #8
 800fc06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f017 fda6 	bl	802775c <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800fc10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc12:	332a      	adds	r3, #42	@ 0x2a
 800fc14:	4619      	mov	r1, r3
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f7ff fe16 	bl	800f848 <ether_output>
}
 800fc1c:	bf00      	nop
 800fc1e:	3720      	adds	r7, #32
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800fc24:	b5b0      	push	{r4, r5, r7, lr}
 800fc26:	b0d0      	sub	sp, #320	@ 0x140
 800fc28:	af04      	add	r7, sp, #16
 800fc2a:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800fc2e:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800fc32:	6020      	str	r0, [r4, #0]
 800fc34:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800fc38:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800fc3c:	6001      	str	r1, [r0, #0]
 800fc3e:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800fc42:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800fc46:	600a      	str	r2, [r1, #0]
 800fc48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc4c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fc50:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800fc52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fc5a:	4a38      	ldr	r2, [pc, #224]	@ (800fd3c <tx_dhcp+0x118>)
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	4611      	mov	r1, r2
 800fc60:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800fc64:	461a      	mov	r2, r3
 800fc66:	f017 fecc 	bl	8027a02 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800fc6a:	4835      	ldr	r0, [pc, #212]	@ (800fd40 <tx_dhcp+0x11c>)
 800fc6c:	f012 f92f 	bl	8021ece <mg_ntohl>
 800fc70:	4602      	mov	r2, r0
 800fc72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fc7a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800fc7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc82:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc86:	6819      	ldr	r1, [r3, #0]
 800fc88:	f107 0314 	add.w	r3, r7, #20
 800fc8c:	331c      	adds	r3, #28
 800fc8e:	2206      	movs	r2, #6
 800fc90:	4618      	mov	r0, r3
 800fc92:	f017 feb6 	bl	8027a02 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800fc96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3302      	adds	r3, #2
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	461a      	mov	r2, r3
 800fca6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcaa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fcae:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800fcb0:	f107 0314 	add.w	r3, r7, #20
 800fcb4:	33f0      	adds	r3, #240	@ 0xf0
 800fcb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800fcba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f017 fe9f 	bl	8027a02 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800fcc4:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d009      	beq.n	800fce0 <tx_dhcp+0xbc>
 800fccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcd0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fcd4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fcd8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fcdc:	6812      	ldr	r2, [r2, #0]
 800fcde:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800fce0:	2044      	movs	r0, #68	@ 0x44
 800fce2:	f012 f8dd 	bl	8021ea0 <mg_ntohs>
 800fce6:	4603      	mov	r3, r0
 800fce8:	461d      	mov	r5, r3
 800fcea:	2043      	movs	r0, #67	@ 0x43
 800fcec:	f012 f8d8 	bl	8021ea0 <mg_ntohs>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	461c      	mov	r4, r3
 800fcf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcf8:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800fcfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd00:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800fd04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd08:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800fd0c:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800fd10:	9303      	str	r3, [sp, #12]
 800fd12:	f107 0314 	add.w	r3, r7, #20
 800fd16:	9302      	str	r3, [sp, #8]
 800fd18:	9401      	str	r4, [sp, #4]
 800fd1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	462b      	mov	r3, r5
 800fd28:	6812      	ldr	r2, [r2, #0]
 800fd2a:	6809      	ldr	r1, [r1, #0]
 800fd2c:	6800      	ldr	r0, [r0, #0]
 800fd2e:	f7ff ff10 	bl	800fb52 <tx_udp>
         sizeof(dhcp));
}
 800fd32:	bf00      	nop
 800fd34:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd3c:	0802aec4 	.word	0x0802aec4
 800fd40:	63825363 	.word	0x63825363

0800fd44 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b096      	sub	sp, #88	@ 0x58
 800fd48:	af04      	add	r7, sp, #16
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	60b9      	str	r1, [r7, #8]
 800fd4e:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	7fdb      	ldrb	r3, [r3, #31]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <tx_dhcp_request_sel+0x18>
 800fd58:	2201      	movs	r2, #1
 800fd5a:	e000      	b.n	800fd5e <tx_dhcp_request_sel+0x1a>
 800fd5c:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <tx_dhcp_request_sel+0x28>
 800fd68:	2301      	movs	r3, #1
 800fd6a:	e000      	b.n	800fd6e <tx_dhcp_request_sel+0x2a>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	4413      	add	r3, r2
 800fd70:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	3344      	adds	r3, #68	@ 0x44
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7f0 fb29 	bl	80003d0 <strlen>
 800fd7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 800fd80:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800fd84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd86:	4413      	add	r3, r2
 800fd88:	3318      	adds	r3, #24
 800fd8a:	63bb      	str	r3, [r7, #56]	@ 0x38
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 800fd8c:	f107 0310 	add.w	r3, r7, #16
 800fd90:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 800fd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd94:	2b26      	cmp	r3, #38	@ 0x26
 800fd96:	d906      	bls.n	800fda6 <tx_dhcp_request_sel+0x62>
 800fd98:	4b50      	ldr	r3, [pc, #320]	@ (800fedc <tx_dhcp_request_sel+0x198>)
 800fd9a:	4a51      	ldr	r2, [pc, #324]	@ (800fee0 <tx_dhcp_request_sel+0x19c>)
 800fd9c:	f241 116a 	movw	r1, #4458	@ 0x116a
 800fda0:	4850      	ldr	r0, [pc, #320]	@ (800fee4 <tx_dhcp_request_sel+0x1a0>)
 800fda2:	f015 fe21 	bl	80259e8 <__assert_func>
  memset(opts, 0, sizeof(opts));
 800fda6:	f107 0310 	add.w	r3, r7, #16
 800fdaa:	2226      	movs	r2, #38	@ 0x26
 800fdac:	2100      	movs	r1, #0
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f017 fcee 	bl	8027790 <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 800fdb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdb6:	1c5a      	adds	r2, r3, #1
 800fdb8:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdba:	2235      	movs	r2, #53	@ 0x35
 800fdbc:	701a      	strb	r2, [r3, #0]
 800fdbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdc0:	1c5a      	adds	r2, r3, #1
 800fdc2:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	701a      	strb	r2, [r3, #0]
 800fdc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdca:	1c5a      	adds	r2, r3, #1
 800fdcc:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdce:	2203      	movs	r2, #3
 800fdd0:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 800fdd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdd4:	1c5a      	adds	r2, r3, #1
 800fdd6:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdd8:	2236      	movs	r2, #54	@ 0x36
 800fdda:	701a      	strb	r2, [r3, #0]
 800fddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	647a      	str	r2, [r7, #68]	@ 0x44
 800fde2:	2204      	movs	r2, #4
 800fde4:	701a      	strb	r2, [r3, #0]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdee:	3304      	adds	r3, #4
 800fdf0:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 800fdf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdf4:	1c5a      	adds	r2, r3, #1
 800fdf6:	647a      	str	r2, [r7, #68]	@ 0x44
 800fdf8:	2232      	movs	r2, #50	@ 0x32
 800fdfa:	701a      	strb	r2, [r3, #0]
 800fdfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdfe:	1c5a      	adds	r2, r3, #1
 800fe00:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe02:	2204      	movs	r2, #4
 800fe04:	701a      	strb	r2, [r3, #0]
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe0e:	3304      	adds	r3, #4
 800fe10:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 800fe12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe18:	220c      	movs	r2, #12
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe24:	b2d2      	uxtb	r2, r2
 800fe26:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	3344      	adds	r3, #68	@ 0x44
 800fe2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe2e:	4619      	mov	r1, r3
 800fe30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe32:	f017 fde6 	bl	8027a02 <memcpy>
 800fe36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe3a:	4413      	add	r3, r2
 800fe3c:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 800fe3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe40:	1c5a      	adds	r2, r3, #1
 800fe42:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe44:	2237      	movs	r2, #55	@ 0x37
 800fe46:	701a      	strb	r2, [r3, #0]
 800fe48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe4e:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800fe52:	3202      	adds	r2, #2
 800fe54:	b2d2      	uxtb	r2, r2
 800fe56:	701a      	strb	r2, [r3, #0]
 800fe58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe5e:	2201      	movs	r2, #1
 800fe60:	701a      	strb	r2, [r3, #0]
 800fe62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe68:	2203      	movs	r2, #3
 800fe6a:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	7fdb      	ldrb	r3, [r3, #31]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d004      	beq.n	800fe7e <tx_dhcp_request_sel+0x13a>
 800fe74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe76:	1c5a      	adds	r2, r3, #1
 800fe78:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe7a:	2206      	movs	r2, #6
 800fe7c:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d004      	beq.n	800fe92 <tx_dhcp_request_sel+0x14e>
 800fe88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe8a:	1c5a      	adds	r2, r3, #1
 800fe8c:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe8e:	222a      	movs	r2, #42	@ 0x2a
 800fe90:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800fe92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe94:	1c5a      	adds	r2, r3, #1
 800fe96:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe98:	22ff      	movs	r2, #255	@ 0xff
 800fe9a:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	9302      	str	r3, [sp, #8]
 800fea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea2:	9301      	str	r3, [sp, #4]
 800fea4:	f107 0310 	add.w	r3, r7, #16
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	f04f 33ff 	mov.w	r3, #4294967295
 800feae:	2200      	movs	r2, #0
 800feb0:	490d      	ldr	r1, [pc, #52]	@ (800fee8 <tx_dhcp_request_sel+0x1a4>)
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	f7ff feb6 	bl	800fc24 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800feb8:	4b0c      	ldr	r3, [pc, #48]	@ (800feec <tx_dhcp_request_sel+0x1a8>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b02      	cmp	r3, #2
 800febe:	dd09      	ble.n	800fed4 <tx_dhcp_request_sel+0x190>
 800fec0:	4b07      	ldr	r3, [pc, #28]	@ (800fee0 <tx_dhcp_request_sel+0x19c>)
 800fec2:	f241 1277 	movw	r2, #4471	@ 0x1177
 800fec6:	4907      	ldr	r1, [pc, #28]	@ (800fee4 <tx_dhcp_request_sel+0x1a0>)
 800fec8:	2003      	movs	r0, #3
 800feca:	f7fe fd4f 	bl	800e96c <mg_log_prefix>
 800fece:	4808      	ldr	r0, [pc, #32]	@ (800fef0 <tx_dhcp_request_sel+0x1ac>)
 800fed0:	f7fe fd9c 	bl	800ea0c <mg_log>
}
 800fed4:	bf00      	nop
 800fed6:	3748      	adds	r7, #72	@ 0x48
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	0802afe0 	.word	0x0802afe0
 800fee0:	0802daa0 	.word	0x0802daa0
 800fee4:	08029e1c 	.word	0x08029e1c
 800fee8:	0802d558 	.word	0x0802d558
 800feec:	24000258 	.word	0x24000258
 800fef0:	0802aff8 	.word	0x0802aff8

0800fef4 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b08a      	sub	sp, #40	@ 0x28
 800fef8:	af04      	add	r7, sp, #16
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800ff02:	4b10      	ldr	r3, [pc, #64]	@ (800ff44 <tx_dhcp_request_re+0x50>)
 800ff04:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800ff06:	2301      	movs	r3, #1
 800ff08:	9302      	str	r3, [sp, #8]
 800ff0a:	2304      	movs	r3, #4
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	f107 0314 	add.w	r3, r7, #20
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	68b9      	ldr	r1, [r7, #8]
 800ff1a:	68f8      	ldr	r0, [r7, #12]
 800ff1c:	f7ff fe82 	bl	800fc24 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800ff20:	4b09      	ldr	r3, [pc, #36]	@ (800ff48 <tx_dhcp_request_re+0x54>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	dd09      	ble.n	800ff3c <tx_dhcp_request_re+0x48>
 800ff28:	4b08      	ldr	r3, [pc, #32]	@ (800ff4c <tx_dhcp_request_re+0x58>)
 800ff2a:	f241 1282 	movw	r2, #4482	@ 0x1182
 800ff2e:	4908      	ldr	r1, [pc, #32]	@ (800ff50 <tx_dhcp_request_re+0x5c>)
 800ff30:	2003      	movs	r0, #3
 800ff32:	f7fe fd1b 	bl	800e96c <mg_log_prefix>
 800ff36:	4807      	ldr	r0, [pc, #28]	@ (800ff54 <tx_dhcp_request_re+0x60>)
 800ff38:	f7fe fd68 	bl	800ea0c <mg_log>
}
 800ff3c:	bf00      	nop
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	ff030135 	.word	0xff030135
 800ff48:	24000258 	.word	0x24000258
 800ff4c:	0802dab4 	.word	0x0802dab4
 800ff50:	08029e1c 	.word	0x08029e1c
 800ff54:	0802aff8 	.word	0x0802aff8

0800ff58 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b088      	sub	sp, #32
 800ff5c:	af04      	add	r7, sp, #16
 800ff5e:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800ff60:	4a14      	ldr	r2, [pc, #80]	@ (800ffb4 <tx_dhcp_discover+0x5c>)
 800ff62:	f107 0308 	add.w	r3, r7, #8
 800ff66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff6a:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800ff6e:	2300      	movs	r3, #0
 800ff70:	9302      	str	r3, [sp, #8]
 800ff72:	2308      	movs	r3, #8
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	f107 0308 	add.w	r3, r7, #8
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff80:	2200      	movs	r2, #0
 800ff82:	490d      	ldr	r1, [pc, #52]	@ (800ffb8 <tx_dhcp_discover+0x60>)
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f7ff fe4d 	bl	800fc24 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800ff8a:	4b0c      	ldr	r3, [pc, #48]	@ (800ffbc <tx_dhcp_discover+0x64>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	dd0c      	ble.n	800ffac <tx_dhcp_discover+0x54>
 800ff92:	4b0b      	ldr	r3, [pc, #44]	@ (800ffc0 <tx_dhcp_discover+0x68>)
 800ff94:	f241 128c 	movw	r2, #4492	@ 0x118c
 800ff98:	490a      	ldr	r1, [pc, #40]	@ (800ffc4 <tx_dhcp_discover+0x6c>)
 800ff9a:	2003      	movs	r0, #3
 800ff9c:	f7fe fce6 	bl	800e96c <mg_log_prefix>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4908      	ldr	r1, [pc, #32]	@ (800ffc8 <tx_dhcp_discover+0x70>)
 800ffa6:	4809      	ldr	r0, [pc, #36]	@ (800ffcc <tx_dhcp_discover+0x74>)
 800ffa8:	f7fe fd30 	bl	800ea0c <mg_log>
}
 800ffac:	bf00      	nop
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	0802b028 	.word	0x0802b028
 800ffb8:	0802d558 	.word	0x0802d558
 800ffbc:	24000258 	.word	0x24000258
 800ffc0:	0802dac8 	.word	0x0802dac8
 800ffc4:	08029e1c 	.word	0x08029e1c
 800ffc8:	08013461 	.word	0x08013461
 800ffcc:	0802b008 	.word	0x0802b008

0800ffd0 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	617b      	str	r3, [r7, #20]
 800ffe8:	e057      	b.n	801009a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fff0:	f003 0310 	and.w	r3, r3, #16
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d010      	beq.n	801001c <getpeer+0x4c>
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	699b      	ldr	r3, [r3, #24]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00c      	beq.n	801001c <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	699b      	ldr	r3, [r3, #24]
 8010006:	f103 000e 	add.w	r0, r3, #14
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	331c      	adds	r3, #28
 801000e:	2204      	movs	r2, #4
 8010010:	4619      	mov	r1, r3
 8010012:	f017 fb93 	bl	802773c <memcmp>
 8010016:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 8010018:	2b00      	cmp	r3, #0
 801001a:	d042      	beq.n	80100a2 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00b      	beq.n	8010044 <getpeer+0x74>
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010030:	2b00      	cmp	r3, #0
 8010032:	d007      	beq.n	8010044 <getpeer+0x74>
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	8b1a      	ldrh	r2, [r3, #24]
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003c:	885b      	ldrh	r3, [r3, #2]
 801003e:	b29b      	uxth	r3, r3
 8010040:	429a      	cmp	r2, r3
 8010042:	d030      	beq.n	80100a6 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801004a:	f003 0301 	and.w	r3, r3, #1
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	d11f      	bne.n	8010094 <getpeer+0xc4>
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010058:	2b00      	cmp	r3, #0
 801005a:	d01b      	beq.n	8010094 <getpeer+0xc4>
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	8b1a      	ldrh	r2, [r3, #24]
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010064:	885b      	ldrh	r3, [r3, #2]
 8010066:	b29b      	uxth	r3, r3
 8010068:	429a      	cmp	r2, r3
 801006a:	d113      	bne.n	8010094 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010072:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010076:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8010078:	79fa      	ldrb	r2, [r7, #7]
 801007a:	429a      	cmp	r2, r3
 801007c:	d10a      	bne.n	8010094 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801007e:	79fb      	ldrb	r3, [r7, #7]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d111      	bne.n	80100a8 <getpeer+0xd8>
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	b29b      	uxth	r3, r3
 8010090:	429a      	cmp	r2, r3
 8010092:	d009      	beq.n	80100a8 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	617b      	str	r3, [r7, #20]
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1a4      	bne.n	800ffea <getpeer+0x1a>
 80100a0:	e002      	b.n	80100a8 <getpeer+0xd8>
      break;
 80100a2:	bf00      	nop
 80100a4:	e000      	b.n	80100a8 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 80100a6:	bf00      	nop
      break;
  }
  return c;
 80100a8:	697b      	ldr	r3, [r7, #20]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3718      	adds	r7, #24
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
	...

080100b4 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80100b4:	b5b0      	push	{r4, r5, r7, lr}
 80100b6:	b088      	sub	sp, #32
 80100b8:	af02      	add	r7, sp, #8
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	88db      	ldrh	r3, [r3, #6]
 80100c4:	b29c      	uxth	r4, r3
 80100c6:	2001      	movs	r0, #1
 80100c8:	f011 feea 	bl	8021ea0 <mg_ntohs>
 80100cc:	4603      	mov	r3, r0
 80100ce:	429c      	cmp	r4, r3
 80100d0:	d176      	bne.n	80101c0 <rx_arp+0x10c>
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	699a      	ldr	r2, [r3, #24]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d16f      	bne.n	80101c0 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	695b      	ldr	r3, [r3, #20]
 80100e4:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	330e      	adds	r3, #14
 80100ea:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80100ec:	6978      	ldr	r0, [r7, #20]
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	3306      	adds	r3, #6
 80100f4:	2206      	movs	r2, #6
 80100f6:	4619      	mov	r1, r3
 80100f8:	f017 fc83 	bl	8027a02 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	3306      	adds	r3, #6
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	2206      	movs	r2, #6
 8010104:	4618      	mov	r0, r3
 8010106:	f017 fc7c 	bl	8027a02 <memcpy>
    eth->type = mg_htons(0x806);
 801010a:	f640 0006 	movw	r0, #2054	@ 0x806
 801010e:	f011 fec7 	bl	8021ea0 <mg_ntohs>
 8010112:	4603      	mov	r3, r0
 8010114:	461a      	mov	r2, r3
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	699a      	ldr	r2, [r3, #24]
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	6814      	ldr	r4, [r2, #0]
 8010122:	6850      	ldr	r0, [r2, #4]
 8010124:	6891      	ldr	r1, [r2, #8]
 8010126:	68d5      	ldr	r5, [r2, #12]
 8010128:	601c      	str	r4, [r3, #0]
 801012a:	6058      	str	r0, [r3, #4]
 801012c:	6099      	str	r1, [r3, #8]
 801012e:	60dd      	str	r5, [r3, #12]
 8010130:	6914      	ldr	r4, [r2, #16]
 8010132:	6950      	ldr	r0, [r2, #20]
 8010134:	6991      	ldr	r1, [r2, #24]
 8010136:	611c      	str	r4, [r3, #16]
 8010138:	6158      	str	r0, [r3, #20]
 801013a:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 801013c:	2002      	movs	r0, #2
 801013e:	f011 feaf 	bl	8021ea0 <mg_ntohs>
 8010142:	4603      	mov	r3, r0
 8010144:	461a      	mov	r2, r3
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	f103 0012 	add.w	r0, r3, #18
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	699b      	ldr	r3, [r3, #24]
 8010154:	3308      	adds	r3, #8
 8010156:	2206      	movs	r2, #6
 8010158:	4619      	mov	r1, r3
 801015a:	f017 fc52 	bl	8027a02 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	3308      	adds	r3, #8
 8010162:	6879      	ldr	r1, [r7, #4]
 8010164:	2206      	movs	r2, #6
 8010166:	4618      	mov	r0, r3
 8010168:	f017 fc4b 	bl	8027a02 <memcpy>
    arp->tpa = pkt->arp->spa;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	699b      	ldr	r3, [r3, #24]
 8010170:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	689a      	ldr	r2, [r3, #8]
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8010182:	4b4e      	ldr	r3, [pc, #312]	@ (80102bc <rx_arp+0x208>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	2b02      	cmp	r3, #2
 8010188:	dd10      	ble.n	80101ac <rx_arp+0xf8>
 801018a:	4b4d      	ldr	r3, [pc, #308]	@ (80102c0 <rx_arp+0x20c>)
 801018c:	f241 12b0 	movw	r2, #4528	@ 0x11b0
 8010190:	494c      	ldr	r1, [pc, #304]	@ (80102c4 <rx_arp+0x210>)
 8010192:	2003      	movs	r0, #3
 8010194:	f7fe fbea 	bl	800e96c <mg_log_prefix>
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	f103 0218 	add.w	r2, r3, #24
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	4b49      	ldr	r3, [pc, #292]	@ (80102c8 <rx_arp+0x214>)
 80101a4:	4949      	ldr	r1, [pc, #292]	@ (80102cc <rx_arp+0x218>)
 80101a6:	484a      	ldr	r0, [pc, #296]	@ (80102d0 <rx_arp+0x21c>)
 80101a8:	f7fe fc30 	bl	800ea0c <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	f103 021c 	add.w	r2, r3, #28
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff fb45 	bl	800f848 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80101be:	e079      	b.n	80102b4 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	88db      	ldrh	r3, [r3, #6]
 80101c6:	b29c      	uxth	r4, r3
 80101c8:	2002      	movs	r0, #2
 80101ca:	f011 fe69 	bl	8021ea0 <mg_ntohs>
 80101ce:	4603      	mov	r3, r0
 80101d0:	429c      	cmp	r4, r3
 80101d2:	d16f      	bne.n	80102b4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	699b      	ldr	r3, [r3, #24]
 80101d8:	3312      	adds	r3, #18
 80101da:	6879      	ldr	r1, [r7, #4]
 80101dc:	2206      	movs	r2, #6
 80101de:	4618      	mov	r0, r3
 80101e0:	f017 faac 	bl	802773c <memcmp>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d163      	bne.n	80102b2 <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	691b      	ldr	r3, [r3, #16]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d116      	bne.n	8010228 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	699b      	ldr	r3, [r3, #24]
 8010204:	3308      	adds	r3, #8
 8010206:	2206      	movs	r2, #6
 8010208:	4619      	mov	r1, r3
 801020a:	f017 fbfa 	bl	8027a02 <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010214:	2b03      	cmp	r3, #3
 8010216:	d14d      	bne.n	80102b4 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2204      	movs	r2, #4
 801021c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7ff fb95 	bl	800f950 <onstatechange>
 8010226:	e045      	b.n	80102b4 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801022c:	2200      	movs	r2, #0
 801022e:	6839      	ldr	r1, [r7, #0]
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff fecd 	bl	800ffd0 <getpeer>
 8010236:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d03a      	beq.n	80102b4 <rx_arp+0x200>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010244:	f003 0310 	and.w	r3, r3, #16
 8010248:	b2db      	uxtb	r3, r3
 801024a:	2b00      	cmp	r3, #0
 801024c:	d032      	beq.n	80102b4 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	33b0      	adds	r3, #176	@ 0xb0
 8010252:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f103 001a 	add.w	r0, r3, #26
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	699b      	ldr	r3, [r3, #24]
 801025e:	3308      	adds	r3, #8
 8010260:	2206      	movs	r2, #6
 8010262:	4619      	mov	r1, r3
 8010264:	f017 fbcd 	bl	8027a02 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8010268:	4b14      	ldr	r3, [pc, #80]	@ (80102bc <rx_arp+0x208>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b02      	cmp	r3, #2
 801026e:	dd15      	ble.n	801029c <rx_arp+0x1e8>
 8010270:	4b13      	ldr	r3, [pc, #76]	@ (80102c0 <rx_arp+0x20c>)
 8010272:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 8010276:	4913      	ldr	r1, [pc, #76]	@ (80102c4 <rx_arp+0x210>)
 8010278:	2003      	movs	r0, #3
 801027a:	f7fe fb77 	bl	800e96c <mg_log_prefix>
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f103 021c 	add.w	r2, r3, #28
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	331a      	adds	r3, #26
 801028c:	9301      	str	r3, [sp, #4]
 801028e:	4b0e      	ldr	r3, [pc, #56]	@ (80102c8 <rx_arp+0x214>)
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	4613      	mov	r3, r2
 8010294:	4a0d      	ldr	r2, [pc, #52]	@ (80102cc <rx_arp+0x218>)
 8010296:	480f      	ldr	r0, [pc, #60]	@ (80102d4 <rx_arp+0x220>)
 8010298:	f7fe fbb8 	bl	800ea0c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80102a2:	f023 0310 	bic.w	r3, r3, #16
 80102a6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f002 fa69 	bl	8012782 <mac_resolved>
 80102b0:	e000      	b.n	80102b4 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80102b2:	bf00      	nop
      }
    }
  }
}
 80102b4:	3718      	adds	r7, #24
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bdb0      	pop	{r4, r5, r7, pc}
 80102ba:	bf00      	nop
 80102bc:	24000258 	.word	0x24000258
 80102c0:	0802dadc 	.word	0x0802dadc
 80102c4:	08029e1c 	.word	0x08029e1c
 80102c8:	08013461 	.word	0x08013461
 80102cc:	0801339d 	.word	0x0801339d
 80102d0:	0802b030 	.word	0x0802b030
 80102d4:	0802b048 	.word	0x0802b048

080102d8 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08a      	sub	sp, #40	@ 0x28
 80102dc:	af02      	add	r7, sp, #8
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	2b08      	cmp	r3, #8
 80102ea:	d14d      	bne.n	8010388 <rx_icmp+0xb0>
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	69db      	ldr	r3, [r3, #28]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d049      	beq.n	8010388 <rx_icmp+0xb0>
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	69db      	ldr	r3, [r3, #28]
 80102f8:	691a      	ldr	r2, [r3, #16]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d142      	bne.n	8010388 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 8010302:	2326      	movs	r3, #38	@ 0x26
 8010304:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	699a      	ldr	r2, [r3, #24]
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	617b      	str	r3, [r7, #20]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 8010316:	69fa      	ldr	r2, [r7, #28]
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	429a      	cmp	r2, r3
 801031c:	d901      	bls.n	8010322 <rx_icmp+0x4a>
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	1d99      	adds	r1, r3, #6
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6898      	ldr	r0, [r3, #8]
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	69db      	ldr	r3, [r3, #28]
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	69fa      	ldr	r2, [r7, #28]
 8010334:	3204      	adds	r2, #4
 8010336:	9201      	str	r2, [sp, #4]
 8010338:	9300      	str	r3, [sp, #0]
 801033a:	4603      	mov	r3, r0
 801033c:	2201      	movs	r2, #1
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7ff fbb0 	bl	800faa4 <tx_ip>
 8010344:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	3314      	adds	r3, #20
 801034a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 801034c:	2204      	movs	r2, #4
 801034e:	2100      	movs	r1, #0
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f017 fa1d 	bl	8027790 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	1d18      	adds	r0, r3, #4
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	69fa      	ldr	r2, [r7, #28]
 8010360:	4619      	mov	r1, r3
 8010362:	f017 fb4e 	bl	8027a02 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	3304      	adds	r3, #4
 801036a:	4619      	mov	r1, r3
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff f9f3 	bl	800f758 <ipcsum>
 8010372:	4603      	mov	r3, r0
 8010374:	461a      	mov	r2, r3
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 801037a:	69ba      	ldr	r2, [r7, #24]
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	4413      	add	r3, r2
 8010380:	4619      	mov	r1, r3
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7ff fa60 	bl	800f848 <ether_output>
  }
}
 8010388:	bf00      	nop
 801038a:	3720      	adds	r7, #32
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010394:	b090      	sub	sp, #64	@ 0x40
 8010396:	af00      	add	r7, sp, #0
 8010398:	60f8      	str	r0, [r7, #12]
 801039a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 801039c:	2300      	movs	r3, #0
 801039e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103a0:	2300      	movs	r3, #0
 80103a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103a4:	2300      	movs	r3, #0
 80103a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80103a8:	2300      	movs	r3, #0
 80103aa:	623b      	str	r3, [r7, #32]
 80103ac:	2300      	movs	r3, #0
 80103ae:	61fb      	str	r3, [r7, #28]
 80103b0:	2300      	movs	r3, #0
 80103b2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 80103b4:	2300      	movs	r3, #0
 80103b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80103c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103c8:	33f0      	adds	r3, #240	@ 0xf0
 80103ca:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	4413      	add	r3, r2
 80103d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103dc:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 80103e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103e2:	429a      	cmp	r2, r3
 80103e4:	f0c0 81ac 	bcc.w	8010740 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ec:	1d18      	adds	r0, r3, #4
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	3302      	adds	r3, #2
 80103f2:	2204      	movs	r2, #4
 80103f4:	4619      	mov	r1, r3
 80103f6:	f017 f9a1 	bl	802773c <memcmp>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f040 81a1 	bne.w	8010744 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8010402:	e08a      	b.n	801051a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8010404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d10e      	bne.n	801042a <rx_dhcp_client+0x9a>
 801040c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801040e:	3301      	adds	r3, #1
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b04      	cmp	r3, #4
 8010414:	d109      	bne.n	801042a <rx_dhcp_client+0x9a>
 8010416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010418:	3306      	adds	r3, #6
 801041a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801041c:	429a      	cmp	r2, r3
 801041e:	d904      	bls.n	801042a <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 8010420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010422:	3302      	adds	r3, #2
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	627b      	str	r3, [r7, #36]	@ 0x24
 8010428:	e070      	b.n	801050c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 801042a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b03      	cmp	r3, #3
 8010430:	d112      	bne.n	8010458 <rx_dhcp_client+0xc8>
 8010432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010434:	3301      	adds	r3, #1
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	2b04      	cmp	r3, #4
 801043a:	d10d      	bne.n	8010458 <rx_dhcp_client+0xc8>
 801043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043e:	3306      	adds	r3, #6
 8010440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010442:	429a      	cmp	r2, r3
 8010444:	d908      	bls.n	8010458 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 8010446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010448:	3302      	adds	r3, #2
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010456:	e059      	b.n	801050c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	7fdb      	ldrb	r3, [r3, #31]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d012      	beq.n	8010486 <rx_dhcp_client+0xf6>
 8010460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	2b06      	cmp	r3, #6
 8010466:	d10e      	bne.n	8010486 <rx_dhcp_client+0xf6>
 8010468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801046a:	3301      	adds	r3, #1
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b04      	cmp	r3, #4
 8010470:	d109      	bne.n	8010486 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 8010472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010474:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8010476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010478:	429a      	cmp	r2, r3
 801047a:	d904      	bls.n	8010486 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 801047c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801047e:	3302      	adds	r3, #2
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	61fb      	str	r3, [r7, #28]
 8010484:	e042      	b.n	801050c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f893 3020 	ldrb.w	r3, [r3, #32]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d012      	beq.n	80104b6 <rx_dhcp_client+0x126>
 8010490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	2b2a      	cmp	r3, #42	@ 0x2a
 8010496:	d10e      	bne.n	80104b6 <rx_dhcp_client+0x126>
 8010498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801049a:	3301      	adds	r3, #1
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b04      	cmp	r3, #4
 80104a0:	d109      	bne.n	80104b6 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 80104a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104a4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 80104a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d904      	bls.n	80104b6 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 80104ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ae:	3302      	adds	r3, #2
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	61bb      	str	r3, [r7, #24]
 80104b4:	e02a      	b.n	801050c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80104b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b33      	cmp	r3, #51	@ 0x33
 80104bc:	d114      	bne.n	80104e8 <rx_dhcp_client+0x158>
 80104be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104c0:	3301      	adds	r3, #1
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	2b04      	cmp	r3, #4
 80104c6:	d10f      	bne.n	80104e8 <rx_dhcp_client+0x158>
 80104c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ca:	3306      	adds	r3, #6
 80104cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d90a      	bls.n	80104e8 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 80104d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104d4:	3302      	adds	r3, #2
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	4618      	mov	r0, r3
 80104de:	f011 fcf6 	bl	8021ece <mg_ntohl>
 80104e2:	4603      	mov	r3, r0
 80104e4:	623b      	str	r3, [r7, #32]
 80104e6:	e011      	b.n	801050c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80104e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	2b35      	cmp	r3, #53	@ 0x35
 80104ee:	d10d      	bne.n	801050c <rx_dhcp_client+0x17c>
 80104f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104f2:	3301      	adds	r3, #1
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d108      	bne.n	801050c <rx_dhcp_client+0x17c>
 80104fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104fc:	3306      	adds	r3, #6
 80104fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010500:	429a      	cmp	r2, r3
 8010502:	d903      	bls.n	801050c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 8010504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010506:	789b      	ldrb	r3, [r3, #2]
 8010508:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 801050c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801050e:	3301      	adds	r3, #1
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	3302      	adds	r3, #2
 8010514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010516:	4413      	add	r3, r2
 8010518:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801051a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801051c:	3301      	adds	r3, #1
 801051e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010520:	429a      	cmp	r2, r3
 8010522:	d904      	bls.n	801052e <rx_dhcp_client+0x19e>
 8010524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	2bff      	cmp	r3, #255	@ 0xff
 801052a:	f47f af6b 	bne.w	8010404 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 801052e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010532:	2b06      	cmp	r3, #6
 8010534:	d10c      	bne.n	8010550 <rx_dhcp_client+0x1c0>
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801053c:	429a      	cmp	r2, r3
 801053e:	d107      	bne.n	8010550 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2201      	movs	r2, #1
 8010544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	609a      	str	r2, [r3, #8]
 801054e:	e0ec      	b.n	801072a <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8010550:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010554:	2b02      	cmp	r3, #2
 8010556:	d123      	bne.n	80105a0 <rx_dhcp_client+0x210>
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801055e:	2b01      	cmp	r3, #1
 8010560:	d11e      	bne.n	80105a0 <rx_dhcp_client+0x210>
 8010562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d01b      	beq.n	80105a0 <rx_dhcp_client+0x210>
 8010568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801056a:	2b00      	cmp	r3, #0
 801056c:	d018      	beq.n	80105a0 <rx_dhcp_client+0x210>
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d015      	beq.n	80105a0 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010578:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 801057a:	2b00      	cmp	r3, #0
 801057c:	d003      	beq.n	8010586 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 8010582:	695b      	ldr	r3, [r3, #20]
 8010584:	e002      	b.n	801058c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	461a      	mov	r2, r3
 801058e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f7ff fbd7 	bl	800fd44 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2202      	movs	r2, #2
 801059a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801059e:	e0c4      	b.n	801072a <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 80105a0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80105a4:	2b05      	cmp	r3, #5
 80105a6:	f040 80c0 	bne.w	801072a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	f040 8081 	bne.w	80106b8 <rx_dhcp_client+0x328>
 80105b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d07d      	beq.n	80106b8 <rx_dhcp_client+0x328>
 80105bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d07a      	beq.n	80106b8 <rx_dhcp_client+0x328>
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d077      	beq.n	80106b8 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80105ce:	6a39      	ldr	r1, [r7, #32]
 80105d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80105d4:	fb00 f101 	mul.w	r1, r0, r1
 80105d8:	2000      	movs	r0, #0
 80105da:	4688      	mov	r8, r1
 80105dc:	4681      	mov	r9, r0
 80105de:	eb12 0108 	adds.w	r1, r2, r8
 80105e2:	6039      	str	r1, [r7, #0]
 80105e4:	eb43 0309 	adc.w	r3, r3, r9
 80105e8:	607b      	str	r3, [r7, #4]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80105f0:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80105f4:	4b56      	ldr	r3, [pc, #344]	@ (8010750 <rx_dhcp_client+0x3c0>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	dd16      	ble.n	801062a <rx_dhcp_client+0x29a>
 80105fc:	4b55      	ldr	r3, [pc, #340]	@ (8010754 <rx_dhcp_client+0x3c4>)
 80105fe:	f241 2202 	movw	r2, #4610	@ 0x1202
 8010602:	4955      	ldr	r1, [pc, #340]	@ (8010758 <rx_dhcp_client+0x3c8>)
 8010604:	2002      	movs	r0, #2
 8010606:	f7fe f9b1 	bl	800e96c <mg_log_prefix>
 801060a:	6a3c      	ldr	r4, [r7, #32]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8010612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010616:	f04f 0300 	mov.w	r3, #0
 801061a:	f7f0 f89d 	bl	8000758 <__aeabi_uldivmod>
 801061e:	4602      	mov	r2, r0
 8010620:	460b      	mov	r3, r1
 8010622:	4621      	mov	r1, r4
 8010624:	484d      	ldr	r0, [pc, #308]	@ (801075c <rx_dhcp_client+0x3cc>)
 8010626:	f7fe f9f1 	bl	800ea0c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	3306      	adds	r3, #6
 8010636:	2206      	movs	r2, #6
 8010638:	4619      	mov	r1, r3
 801063a:	f017 f9e2 	bl	8027a02 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010642:	609a      	str	r2, [r3, #8]
 8010644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	611a      	str	r2, [r3, #16]
 801064a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2203      	movs	r2, #3
 8010654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8010658:	f107 0310 	add.w	r3, r7, #16
 801065c:	2108      	movs	r1, #8
 801065e:	4618      	mov	r0, r3
 8010660:	f7f0 fa48 	bl	8000af4 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8010664:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010668:	4614      	mov	r4, r2
 801066a:	f7f0 fa71 	bl	8000b50 <mg_millis>
 801066e:	4602      	mov	r2, r0
 8010670:	460b      	mov	r3, r1
 8010672:	4613      	mov	r3, r2
 8010674:	4423      	add	r3, r4
 8010676:	4618      	mov	r0, r3
 8010678:	f015 fab6 	bl	8025be8 <srand>
      if (ifp->enable_req_dns && dns != 0)
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	7fdb      	ldrb	r3, [r3, #31]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d009      	beq.n	8010698 <rx_dhcp_client+0x308>
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d006      	beq.n	8010698 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 801068a:	f107 031c 	add.w	r3, r7, #28
 801068e:	461a      	mov	r2, r3
 8010690:	2101      	movs	r1, #1
 8010692:	68f8      	ldr	r0, [r7, #12]
 8010694:	f7fe ffe8 	bl	800f668 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d042      	beq.n	8010728 <rx_dhcp_client+0x398>
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d03f      	beq.n	8010728 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 80106a8:	f107 0318 	add.w	r3, r7, #24
 80106ac:	461a      	mov	r2, r3
 80106ae:	2102      	movs	r1, #2
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f7fe ffd9 	bl	800f668 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80106b6:	e037      	b.n	8010728 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106be:	2b04      	cmp	r3, #4
 80106c0:	d133      	bne.n	801072a <rx_dhcp_client+0x39a>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d12e      	bne.n	801072a <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80106d2:	6a39      	ldr	r1, [r7, #32]
 80106d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80106d8:	fb00 f101 	mul.w	r1, r0, r1
 80106dc:	2000      	movs	r0, #0
 80106de:	460c      	mov	r4, r1
 80106e0:	4605      	mov	r5, r0
 80106e2:	eb12 0a04 	adds.w	sl, r2, r4
 80106e6:	eb43 0b05 	adc.w	fp, r3, r5
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80106f0:	4b17      	ldr	r3, [pc, #92]	@ (8010750 <rx_dhcp_client+0x3c0>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	dd18      	ble.n	801072a <rx_dhcp_client+0x39a>
 80106f8:	4b16      	ldr	r3, [pc, #88]	@ (8010754 <rx_dhcp_client+0x3c4>)
 80106fa:	f241 2210 	movw	r2, #4624	@ 0x1210
 80106fe:	4916      	ldr	r1, [pc, #88]	@ (8010758 <rx_dhcp_client+0x3c8>)
 8010700:	2002      	movs	r0, #2
 8010702:	f7fe f933 	bl	800e96c <mg_log_prefix>
 8010706:	6a3c      	ldr	r4, [r7, #32]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 801070e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010712:	f04f 0300 	mov.w	r3, #0
 8010716:	f7f0 f81f 	bl	8000758 <__aeabi_uldivmod>
 801071a:	4602      	mov	r2, r0
 801071c:	460b      	mov	r3, r1
 801071e:	4621      	mov	r1, r4
 8010720:	480e      	ldr	r0, [pc, #56]	@ (801075c <rx_dhcp_client+0x3cc>)
 8010722:	f7fe f973 	bl	800ea0c <mg_log>
 8010726:	e000      	b.n	801072a <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8010728:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010730:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8010734:	429a      	cmp	r2, r3
 8010736:	d006      	beq.n	8010746 <rx_dhcp_client+0x3b6>
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f7ff f909 	bl	800f950 <onstatechange>
 801073e:	e002      	b.n	8010746 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8010740:	bf00      	nop
 8010742:	e000      	b.n	8010746 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8010744:	bf00      	nop
}
 8010746:	3740      	adds	r7, #64	@ 0x40
 8010748:	46bd      	mov	sp, r7
 801074a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801074e:	bf00      	nop
 8010750:	24000258 	.word	0x24000258
 8010754:	0802dae4 	.word	0x0802dae4
 8010758:	08029e1c 	.word	0x08029e1c
 801075c:	0802b064 	.word	0x0802b064

08010760 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	b0d8      	sub	sp, #352	@ 0x160
 8010766:	af04      	add	r7, sp, #16
 8010768:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801076c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010770:	6018      	str	r0, [r3, #0]
 8010772:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010776:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801077a:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 801077c:	2300      	movs	r3, #0
 801077e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8010782:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010786:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801078e:	33f0      	adds	r3, #240	@ 0xf0
 8010790:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 8010794:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010798:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	4413      	add	r3, r2
 80107ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80107b2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107b6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107be:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 80107c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80107c6:	429a      	cmp	r2, r3
 80107c8:	f0c0 81b0 	bcc.w	8010b2c <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 80107cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80107d4:	4ad8      	ldr	r2, [pc, #864]	@ (8010b38 <rx_dhcp_server+0x3d8>)
 80107d6:	4618      	mov	r0, r3
 80107d8:	4611      	mov	r1, r2
 80107da:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 80107de:	461a      	mov	r2, r3
 80107e0:	f017 f90f 	bl	8027a02 <memcpy>
  res.yiaddr = ifp->ip;
 80107e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	689a      	ldr	r2, [r3, #8]
 80107f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80107f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80107f8:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80107fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80107fe:	3310      	adds	r3, #16
 8010800:	3303      	adds	r3, #3
 8010802:	781a      	ldrb	r2, [r3, #0]
 8010804:	3201      	adds	r2, #1
 8010806:	b2d2      	uxtb	r2, r2
 8010808:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801080a:	e020      	b.n	801084e <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 801080c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	2b35      	cmp	r3, #53	@ 0x35
 8010814:	d111      	bne.n	801083a <rx_dhcp_server+0xda>
 8010816:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801081a:	3301      	adds	r3, #1
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	2b01      	cmp	r3, #1
 8010820:	d10b      	bne.n	801083a <rx_dhcp_server+0xda>
 8010822:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010826:	3302      	adds	r3, #2
 8010828:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 801082c:	429a      	cmp	r2, r3
 801082e:	d904      	bls.n	801083a <rx_dhcp_server+0xda>
      op = p[2];
 8010830:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010834:	789b      	ldrb	r3, [r3, #2]
 8010836:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 801083a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801083e:	3301      	adds	r3, #1
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	3302      	adds	r3, #2
 8010844:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010848:	4413      	add	r3, r2
 801084a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801084e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010852:	3301      	adds	r3, #1
 8010854:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010858:	429a      	cmp	r2, r3
 801085a:	d904      	bls.n	8010866 <rx_dhcp_server+0x106>
 801085c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	2bff      	cmp	r3, #255	@ 0xff
 8010864:	d1d2      	bne.n	801080c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8010866:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 801086a:	2b01      	cmp	r3, #1
 801086c:	d004      	beq.n	8010878 <rx_dhcp_server+0x118>
 801086e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8010872:	2b03      	cmp	r3, #3
 8010874:	f040 815b 	bne.w	8010b2e <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8010878:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 801087c:	2b01      	cmp	r3, #1
 801087e:	d101      	bne.n	8010884 <rx_dhcp_server+0x124>
 8010880:	2302      	movs	r3, #2
 8010882:	e000      	b.n	8010886 <rx_dhcp_server+0x126>
 8010884:	2305      	movs	r3, #5
 8010886:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 801088a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801088e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010892:	2235      	movs	r2, #53	@ 0x35
 8010894:	701a      	strb	r2, [r3, #0]
 8010896:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801089a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801089e:	2201      	movs	r2, #1
 80108a0:	705a      	strb	r2, [r3, #1]
 80108a2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108aa:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 80108ae:	709a      	strb	r2, [r3, #2]
 80108b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108b8:	2201      	movs	r2, #1
 80108ba:	70da      	strb	r2, [r3, #3]
 80108bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108c4:	2204      	movs	r2, #4
 80108c6:	711a      	strb	r2, [r3, #4]
 80108c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108d0:	2200      	movs	r2, #0
 80108d2:	715a      	strb	r2, [r3, #5]
 80108d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108dc:	2200      	movs	r2, #0
 80108de:	719a      	strb	r2, [r3, #6]
 80108e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108e8:	2200      	movs	r2, #0
 80108ea:	71da      	strb	r2, [r3, #7]
 80108ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80108f4:	2200      	movs	r2, #0
 80108f6:	721a      	strb	r2, [r3, #8]
 80108f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80108fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010900:	2236      	movs	r2, #54	@ 0x36
 8010902:	725a      	strb	r2, [r3, #9]
 8010904:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010908:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801090c:	2204      	movs	r2, #4
 801090e:	729a      	strb	r2, [r3, #10]
 8010910:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010914:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010918:	2200      	movs	r2, #0
 801091a:	72da      	strb	r2, [r3, #11]
 801091c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010920:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010924:	2200      	movs	r2, #0
 8010926:	731a      	strb	r2, [r3, #12]
 8010928:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801092c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010930:	2200      	movs	r2, #0
 8010932:	735a      	strb	r2, [r3, #13]
 8010934:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010938:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801093c:	2200      	movs	r2, #0
 801093e:	739a      	strb	r2, [r3, #14]
 8010940:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010944:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010948:	220c      	movs	r2, #12
 801094a:	73da      	strb	r2, [r3, #15]
 801094c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010950:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010954:	2203      	movs	r2, #3
 8010956:	741a      	strb	r2, [r3, #16]
 8010958:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801095c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010960:	226d      	movs	r2, #109	@ 0x6d
 8010962:	745a      	strb	r2, [r3, #17]
 8010964:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010968:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801096c:	2269      	movs	r2, #105	@ 0x69
 801096e:	749a      	strb	r2, [r3, #18]
 8010970:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010974:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010978:	2270      	movs	r2, #112	@ 0x70
 801097a:	74da      	strb	r2, [r3, #19]
 801097c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010980:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010984:	2233      	movs	r2, #51	@ 0x33
 8010986:	751a      	strb	r2, [r3, #20]
 8010988:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801098c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8010990:	2204      	movs	r2, #4
 8010992:	755a      	strb	r2, [r3, #21]
 8010994:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010998:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801099c:	22ff      	movs	r2, #255	@ 0xff
 801099e:	759a      	strb	r2, [r3, #22]
 80109a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80109a8:	22ff      	movs	r2, #255	@ 0xff
 80109aa:	75da      	strb	r2, [r3, #23]
 80109ac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80109b4:	22ff      	movs	r2, #255	@ 0xff
 80109b6:	761a      	strb	r2, [r3, #24]
 80109b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80109c0:	22ff      	movs	r2, #255	@ 0xff
 80109c2:	765a      	strb	r2, [r3, #25]
 80109c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80109cc:	22ff      	movs	r2, #255	@ 0xff
 80109ce:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80109d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80109d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109dc:	f103 011c 	add.w	r1, r3, #28
 80109e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80109e4:	331c      	adds	r3, #28
 80109e6:	2206      	movs	r2, #6
 80109e8:	4618      	mov	r0, r3
 80109ea:	f017 f80a 	bl	8027a02 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80109ee:	f107 030c 	add.w	r3, r7, #12
 80109f2:	3305      	adds	r3, #5
 80109f4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80109f8:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80109fc:	6812      	ldr	r2, [r2, #0]
 80109fe:	320c      	adds	r2, #12
 8010a00:	6812      	ldr	r2, [r2, #0]
 8010a02:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8010a04:	f107 030c 	add.w	r3, r7, #12
 8010a08:	330b      	adds	r3, #11
 8010a0a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8010a0e:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8010a12:	6812      	ldr	r2, [r2, #0]
 8010a14:	3208      	adds	r2, #8
 8010a16:	6812      	ldr	r2, [r2, #0]
 8010a18:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 8010a1a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010a22:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8010a26:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8010a2a:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 8010a2e:	4615      	mov	r5, r2
 8010a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a38:	c403      	stmia	r4!, {r0, r1}
 8010a3a:	8022      	strh	r2, [r4, #0]
 8010a3c:	3402      	adds	r4, #2
 8010a3e:	0c13      	lsrs	r3, r2, #16
 8010a40:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 8010a42:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a46:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a4e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8010a52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010a5a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 8010a5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a62:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a6a:	685a      	ldr	r2, [r3, #4]
 8010a6c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a70:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010a74:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 8010a76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a7a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	7f9b      	ldrb	r3, [r3, #30]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d01c      	beq.n	8010ac0 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 8010a86:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010a8e:	691a      	ldr	r2, [r3, #16]
 8010a90:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010a94:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8010a9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010aa0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8010aaa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010aae:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	691b      	ldr	r3, [r3, #16]
 8010ab6:	3306      	adds	r3, #6
 8010ab8:	2206      	movs	r2, #6
 8010aba:	4619      	mov	r1, r3
 8010abc:	f016 ffa1 	bl	8027a02 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8010ac0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010ac4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	691b      	ldr	r3, [r3, #16]
 8010acc:	1d9d      	adds	r5, r3, #6
 8010ace:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010ad2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	689e      	ldr	r6, [r3, #8]
 8010ada:	2043      	movs	r0, #67	@ 0x43
 8010adc:	f011 f9e0 	bl	8021ea0 <mg_ntohs>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	4698      	mov	r8, r3
 8010ae4:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d005      	beq.n	8010af8 <rx_dhcp_server+0x398>
 8010aec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010af0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010af4:	691c      	ldr	r4, [r3, #16]
 8010af6:	e001      	b.n	8010afc <rx_dhcp_server+0x39c>
 8010af8:	f04f 34ff 	mov.w	r4, #4294967295
 8010afc:	2044      	movs	r0, #68	@ 0x44
 8010afe:	f011 f9cf 	bl	8021ea0 <mg_ntohs>
 8010b02:	4603      	mov	r3, r0
 8010b04:	461a      	mov	r2, r3
 8010b06:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010b0a:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8010b0e:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8010b12:	9303      	str	r3, [sp, #12]
 8010b14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010b18:	9302      	str	r3, [sp, #8]
 8010b1a:	9201      	str	r2, [sp, #4]
 8010b1c:	9400      	str	r4, [sp, #0]
 8010b1e:	4643      	mov	r3, r8
 8010b20:	4632      	mov	r2, r6
 8010b22:	4629      	mov	r1, r5
 8010b24:	6800      	ldr	r0, [r0, #0]
 8010b26:	f7ff f814 	bl	800fb52 <tx_udp>
 8010b2a:	e000      	b.n	8010b2e <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8010b2c:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8010b2e:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8010b32:	46bd      	mov	sp, r7
 8010b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b38:	0802b07c 	.word	0x0802b07c

08010b3c <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff fa3e 	bl	800ffd0 <getpeer>
 8010b54:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d059      	beq.n	8010c10 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b60:	881b      	ldrh	r3, [r3, #0]
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	331c      	adds	r3, #28
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	69d2      	ldr	r2, [r2, #28]
 8010b70:	320c      	adds	r2, #12
 8010b72:	6812      	ldr	r2, [r2, #0]
 8010b74:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	33b0      	adds	r3, #176	@ 0xb0
 8010b7a:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	f103 001a 	add.w	r0, r3, #26
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	691b      	ldr	r3, [r3, #16]
 8010b86:	3306      	adds	r3, #6
 8010b88:	2206      	movs	r2, #6
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	f016 ff39 	bl	8027a02 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010b98:	d304      	bcc.n	8010ba4 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 8010b9a:	491f      	ldr	r1, [pc, #124]	@ (8010c18 <rx_udp+0xdc>)
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f7f8 f86d 	bl	8008c7c <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8010ba2:	e035      	b.n	8010c10 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bac:	1ad2      	subs	r2, r2, r3
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d212      	bcs.n	8010bdc <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f7fc fdda 	bl	800d780 <mg_iobuf_resize>
 8010bcc:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d104      	bne.n	8010bdc <rx_udp+0xa0>
      mg_error(c, "oom");
 8010bd2:	4912      	ldr	r1, [pc, #72]	@ (8010c1c <rx_udp+0xe0>)
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	f7f8 f851 	bl	8008c7c <mg_error>
}
 8010bda:	e019      	b.n	8010c10 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010be4:	18d0      	adds	r0, r2, r3
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	6899      	ldr	r1, [r3, #8]
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	f016 ff07 	bl	8027a02 <memcpy>
      c->recv.len += pkt->pay.len;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	441a      	add	r2, r3
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	330c      	adds	r3, #12
 8010c06:	461a      	mov	r2, r3
 8010c08:	2107      	movs	r1, #7
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7f8 f816 	bl	8008c3c <mg_call>
}
 8010c10:	bf00      	nop
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	0802b198 	.word	0x0802b198
 8010c1c:	0802b1b4 	.word	0x0802b1b4

08010c20 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8010c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c22:	b091      	sub	sp, #68	@ 0x44
 8010c24:	af06      	add	r7, sp, #24
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	607a      	str	r2, [r7, #4]
 8010c2c:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                 // Send MSS, RFC-9293 3.7.1
 8010c2e:	78fb      	ldrb	r3, [r7, #3]
 8010c30:	f003 0302 	and.w	r3, r3, #2
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d014      	beq.n	8010c62 <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);         // RFC-9293 3.2
 8010c38:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8010c3c:	f011 f930 	bl	8021ea0 <mg_ntohs>
 8010c40:	4603      	mov	r3, r0
 8010c42:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons(ifp->mtu - 40);  // RFC-6691
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c4a:	3b28      	subs	r3, #40	@ 0x28
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f011 f926 	bl	8021ea0 <mg_ntohs>
 8010c54:	4603      	mov	r3, r0
 8010c56:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 8010c58:	f107 0314 	add.w	r3, r7, #20
 8010c5c:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 8010c5e:	2304      	movs	r3, #4
 8010c60:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	689a      	ldr	r2, [r3, #8]
 8010c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c68:	3314      	adds	r3, #20
 8010c6a:	9301      	str	r3, [sp, #4]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	4613      	mov	r3, r2
 8010c72:	2206      	movs	r2, #6
 8010c74:	68b9      	ldr	r1, [r7, #8]
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f7fe ff14 	bl	800faa4 <tx_ip>
 8010c7c:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c80:	3314      	adds	r3, #20
 8010c82:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8010c84:	2214      	movs	r2, #20
 8010c86:	2100      	movs	r1, #0
 8010c88:	6a38      	ldr	r0, [r7, #32]
 8010c8a:	f016 fd81 	bl	8027790 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8010c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d009      	beq.n	8010ca8 <tx_tcp+0x88>
 8010c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d006      	beq.n	8010ca8 <tx_tcp+0x88>
 8010c9a:	6a3b      	ldr	r3, [r7, #32]
 8010c9c:	3314      	adds	r3, #20
 8010c9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010ca0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f016 fd5a 	bl	802775c <memmove>
  tcp->sport = sport;
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010cae:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010cb6:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8010cb8:	6a3b      	ldr	r3, [r7, #32]
 8010cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cbc:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 8010cbe:	6a3b      	ldr	r3, [r7, #32]
 8010cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010cc2:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8010cc4:	6a3b      	ldr	r3, [r7, #32]
 8010cc6:	78fa      	ldrb	r2, [r7, #3]
 8010cc8:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 8010cca:	f241 7070 	movw	r0, #6000	@ 0x1770
 8010cce:	f011 f8e7 	bl	8021ea0 <mg_ntohs>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	2250      	movs	r2, #80	@ 0x50
 8010cde:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 8010ce0:	78fb      	ldrb	r3, [r7, #3]
 8010ce2:	f003 0302 	and.w	r3, r3, #2
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d005      	beq.n	8010cf6 <tx_tcp+0xd6>
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	7b1b      	ldrb	r3, [r3, #12]
 8010cee:	3310      	adds	r3, #16
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	731a      	strb	r2, [r3, #12]

  uint32_t cs = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8010cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	3314      	adds	r3, #20
 8010d00:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8010d02:	2300      	movs	r3, #0
 8010d04:	743b      	strb	r3, [r7, #16]
 8010d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d08:	7a5b      	ldrb	r3, [r3, #9]
 8010d0a:	747b      	strb	r3, [r7, #17]
 8010d0c:	8b7b      	ldrh	r3, [r7, #26]
 8010d0e:	0a1b      	lsrs	r3, r3, #8
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	74bb      	strb	r3, [r7, #18]
 8010d16:	8b7b      	ldrh	r3, [r7, #26]
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	74fb      	strb	r3, [r7, #19]
  cs = csumup(cs, tcp, n);
 8010d1c:	8b7b      	ldrh	r3, [r7, #26]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	6a39      	ldr	r1, [r7, #32]
 8010d22:	69f8      	ldr	r0, [r7, #28]
 8010d24:	f7fe fcd2 	bl	800f6cc <csumup>
 8010d28:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2c:	330c      	adds	r3, #12
 8010d2e:	2204      	movs	r2, #4
 8010d30:	4619      	mov	r1, r3
 8010d32:	69f8      	ldr	r0, [r7, #28]
 8010d34:	f7fe fcca 	bl	800f6cc <csumup>
 8010d38:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8010d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3c:	3310      	adds	r3, #16
 8010d3e:	2204      	movs	r2, #4
 8010d40:	4619      	mov	r1, r3
 8010d42:	69f8      	ldr	r0, [r7, #28]
 8010d44:	f7fe fcc2 	bl	800f6cc <csumup>
 8010d48:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8010d4a:	f107 0310 	add.w	r3, r7, #16
 8010d4e:	2204      	movs	r2, #4
 8010d50:	4619      	mov	r1, r3
 8010d52:	69f8      	ldr	r0, [r7, #28]
 8010d54:	f7fe fcba 	bl	800f6cc <csumup>
 8010d58:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8010d5a:	69f8      	ldr	r0, [r7, #28]
 8010d5c:	f7fe fce1 	bl	800f722 <csumfin>
 8010d60:	4603      	mov	r3, r0
 8010d62:	461a      	mov	r2, r3
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8010d68:	4b21      	ldr	r3, [pc, #132]	@ (8010df0 <tx_tcp+0x1d0>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b03      	cmp	r3, #3
 8010d6e:	dd2c      	ble.n	8010dca <tx_tcp+0x1aa>
 8010d70:	4b20      	ldr	r3, [pc, #128]	@ (8010df4 <tx_tcp+0x1d4>)
 8010d72:	f241 2275 	movw	r2, #4725	@ 0x1275
 8010d76:	4920      	ldr	r1, [pc, #128]	@ (8010df8 <tx_tcp+0x1d8>)
 8010d78:	2004      	movs	r0, #4
 8010d7a:	f7fd fdf7 	bl	800e96c <mg_log_prefix>
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d80:	f103 050c 	add.w	r5, r3, #12
 8010d84:	6a3b      	ldr	r3, [r7, #32]
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f011 f888 	bl	8021ea0 <mg_ntohs>
 8010d90:	4603      	mov	r3, r0
 8010d92:	461e      	mov	r6, r3
 8010d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d96:	f103 0410 	add.w	r4, r3, #16
 8010d9a:	6a3b      	ldr	r3, [r7, #32]
 8010d9c:	885b      	ldrh	r3, [r3, #2]
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	4618      	mov	r0, r3
 8010da2:	f011 f87d 	bl	8021ea0 <mg_ntohs>
 8010da6:	4603      	mov	r3, r0
 8010da8:	461a      	mov	r2, r3
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	7b5b      	ldrb	r3, [r3, #13]
 8010dae:	4619      	mov	r1, r3
 8010db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010db2:	9304      	str	r3, [sp, #16]
 8010db4:	9103      	str	r1, [sp, #12]
 8010db6:	9202      	str	r2, [sp, #8]
 8010db8:	9401      	str	r4, [sp, #4]
 8010dba:	4b10      	ldr	r3, [pc, #64]	@ (8010dfc <tx_tcp+0x1dc>)
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	4633      	mov	r3, r6
 8010dc0:	462a      	mov	r2, r5
 8010dc2:	490e      	ldr	r1, [pc, #56]	@ (8010dfc <tx_tcp+0x1dc>)
 8010dc4:	480e      	ldr	r0, [pc, #56]	@ (8010e00 <tx_tcp+0x1e0>)
 8010dc6:	f7fd fe21 	bl	800ea0c <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8010dca:	6a3b      	ldr	r3, [r7, #32]
 8010dcc:	f103 0214 	add.w	r2, r3, #20
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	695b      	ldr	r3, [r3, #20]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dda:	4413      	add	r3, r2
 8010ddc:	4619      	mov	r1, r3
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f7fe fd32 	bl	800f848 <ether_output>
 8010de4:	4603      	mov	r3, r0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	372c      	adds	r7, #44	@ 0x2c
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dee:	bf00      	nop
 8010df0:	24000258 	.word	0x24000258
 8010df4:	0802daf4 	.word	0x0802daf4
 8010df8:	08029e1c 	.word	0x08029e1c
 8010dfc:	0801339d 	.word	0x0801339d
 8010e00:	0802b1b8 	.word	0x0802b1b8

08010e04 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8010e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e08:	b08c      	sub	sp, #48	@ 0x30
 8010e0a:	af06      	add	r7, sp, #24
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	60b9      	str	r1, [r7, #8]
 8010e10:	603b      	str	r3, [r7, #0]
 8010e12:	4613      	mov	r3, r2
 8010e14:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e1a:	7b5b      	ldrb	r3, [r3, #13]
 8010e1c:	f003 0303 	and.w	r3, r3, #3
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	bf14      	ite	ne
 8010e24:	2301      	movne	r3, #1
 8010e26:	2300      	moveq	r3, #0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	691b      	ldr	r3, [r3, #16]
 8010e30:	1d9e      	adds	r6, r3, #6
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	69db      	ldr	r3, [r3, #28]
 8010e36:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e3e:	885b      	ldrh	r3, [r3, #2]
 8010e40:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010e46:	881b      	ldrh	r3, [r3, #0]
 8010e48:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f011 f83c 	bl	8021ece <mg_ntohl>
 8010e56:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f011 f836 	bl	8021ece <mg_ntohl>
 8010e62:	4601      	mov	r1, r0
 8010e64:	79fa      	ldrb	r2, [r7, #7]
 8010e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e68:	9305      	str	r3, [sp, #20]
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6c:	9304      	str	r3, [sp, #16]
 8010e6e:	9103      	str	r1, [sp, #12]
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	9302      	str	r3, [sp, #8]
 8010e74:	9501      	str	r5, [sp, #4]
 8010e76:	9400      	str	r4, [sp, #0]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	4642      	mov	r2, r8
 8010e7c:	4631      	mov	r1, r6
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f7ff fece 	bl	8010c20 <tx_tcp>
 8010e84:	4603      	mov	r3, r0
                buf, len);
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e90 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8010e90:	b5b0      	push	{r4, r5, r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe f94d 	bl	800f13e <mg_alloc_conn>
 8010ea4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d10f      	bne.n	8010ecc <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 8010eac:	4b5e      	ldr	r3, [pc, #376]	@ (8011028 <accept_conn+0x198>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dd09      	ble.n	8010ec8 <accept_conn+0x38>
 8010eb4:	4b5d      	ldr	r3, [pc, #372]	@ (801102c <accept_conn+0x19c>)
 8010eb6:	f241 2289 	movw	r2, #4745	@ 0x1289
 8010eba:	495d      	ldr	r1, [pc, #372]	@ (8011030 <accept_conn+0x1a0>)
 8010ebc:	2001      	movs	r0, #1
 8010ebe:	f7fd fd55 	bl	800e96c <mg_log_prefix>
 8010ec2:	485c      	ldr	r0, [pc, #368]	@ (8011034 <accept_conn+0x1a4>)
 8010ec4:	f7fd fda2 	bl	800ea0c <mg_log>
    return NULL;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	e0a8      	b.n	801101e <accept_conn+0x18e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	33b0      	adds	r3, #176	@ 0xb0
 8010ed0:	60bb      	str	r3, [r7, #8]
  s->dmss = 536;  // assume default, RFC-9293 3.7.1
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010ed8:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ede:	689b      	ldr	r3, [r3, #8]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f010 fff4 	bl	8021ece <mg_ntohl>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	601a      	str	r2, [r3, #0]
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f010 ffeb 	bl	8021ece <mg_ntohl>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	f103 001a 	add.w	r0, r3, #26
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	3306      	adds	r3, #6
 8010f0a:	2206      	movs	r2, #6
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	f016 fd78 	bl	8027a02 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8010f12:	2100      	movs	r1, #0
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	f7fe fc33 	bl	800f780 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	331c      	adds	r3, #28
 8010f1e:	683a      	ldr	r2, [r7, #0]
 8010f20:	69d2      	ldr	r2, [r2, #28]
 8010f22:	320c      	adds	r2, #12
 8010f24:	6812      	ldr	r2, [r2, #0]
 8010f26:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8010f34:	4b3c      	ldr	r3, [pc, #240]	@ (8011028 <accept_conn+0x198>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	dd0e      	ble.n	8010f5a <accept_conn+0xca>
 8010f3c:	4b3b      	ldr	r3, [pc, #236]	@ (801102c <accept_conn+0x19c>)
 8010f3e:	f241 2293 	movw	r2, #4755	@ 0x1293
 8010f42:	493b      	ldr	r1, [pc, #236]	@ (8011030 <accept_conn+0x1a0>)
 8010f44:	2003      	movs	r0, #3
 8010f46:	f7fd fd11 	bl	800e96c <mg_log_prefix>
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	331c      	adds	r3, #28
 8010f52:	4a39      	ldr	r2, [pc, #228]	@ (8011038 <accept_conn+0x1a8>)
 8010f54:	4839      	ldr	r0, [pc, #228]	@ (801103c <accept_conn+0x1ac>)
 8010f56:	f7fd fd59 	bl	800ea0c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	681a      	ldr	r2, [r3, #0]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	601a      	str	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8010f6c:	68fa      	ldr	r2, [r7, #12]
 8010f6e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010f72:	f043 0304 	orr.w	r3, r3, #4
 8010f76:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010f80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010f84:	b2d9      	uxtb	r1, r3
 8010f86:	68fa      	ldr	r2, [r7, #12]
 8010f88:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8010f8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8010f90:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f102 0408 	add.w	r4, r2, #8
 8010fa8:	f103 0508 	add.w	r5, r3, #8
 8010fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010fb0:	682b      	ldr	r3, [r5, #0]
 8010fb2:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	67da      	str	r2, [r3, #124]	@ 0x7c
  c->is_tls = lsn->is_tls;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010fd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010fda:	b2d9      	uxtb	r1, r3
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010fe2:	f361 1386 	bfi	r3, r1, #6, #1
 8010fe6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_call(c, MG_EV_OPEN, NULL);
 8010fea:	2200      	movs	r2, #0
 8010fec:	2101      	movs	r1, #1
 8010fee:	68f8      	ldr	r0, [r7, #12]
 8010ff0:	f7f7 fe24 	bl	8008c3c <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	2105      	movs	r1, #5
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f7f7 fe1f 	bl	8008c3c <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011004:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011008:	b2db      	uxtb	r3, r3
 801100a:	2b00      	cmp	r3, #0
 801100c:	d106      	bne.n	801101c <accept_conn+0x18c>
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011018:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  return c;
 801101c:	68fb      	ldr	r3, [r7, #12]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bdb0      	pop	{r4, r5, r7, pc}
 8011026:	bf00      	nop
 8011028:	24000258 	.word	0x24000258
 801102c:	0802dafc 	.word	0x0802dafc
 8011030:	08029e1c 	.word	0x08029e1c
 8011034:	0802add8 	.word	0x0802add8
 8011038:	08013415 	.word	0x08013415
 801103c:	0802b1dc 	.word	0x0802b1dc

08011040 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 8011040:	b580      	push	{r7, lr}
 8011042:	b08a      	sub	sp, #40	@ 0x28
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011050:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 8011052:	230e      	movs	r3, #14
 8011054:	623b      	str	r3, [r7, #32]
 8011056:	2318      	movs	r3, #24
 8011058:	61fb      	str	r3, [r7, #28]
 801105a:	233c      	movs	r3, #60	@ 0x3c
 801105c:	61bb      	str	r3, [r7, #24]
 801105e:	2308      	movs	r3, #8
 8011060:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8011062:	6a3a      	ldr	r2, [r7, #32]
 8011064:	69fb      	ldr	r3, [r7, #28]
 8011066:	441a      	add	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801106e:	f003 0301 	and.w	r3, r3, #1
 8011072:	b2db      	uxtb	r3, r3
 8011074:	2b00      	cmp	r3, #0
 8011076:	d001      	beq.n	801107c <trim_len+0x3c>
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	e000      	b.n	801107e <trim_len+0x3e>
 801107c:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801107e:	4413      	add	r3, r2
 8011080:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d103      	bne.n	801109a <trim_len+0x5a>
 8011092:	693a      	ldr	r2, [r7, #16]
 8011094:	6a3b      	ldr	r3, [r7, #32]
 8011096:	1ad3      	subs	r3, r2, r3
 8011098:	e000      	b.n	801109c <trim_len+0x5c>
 801109a:	2344      	movs	r3, #68	@ 0x44
 801109c:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801109e:	683a      	ldr	r2, [r7, #0]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	441a      	add	r2, r3
 80110a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a6:	699b      	ldr	r3, [r3, #24]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d904      	bls.n	80110b6 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 80110ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ae:	699a      	ldr	r2, [r3, #24]
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 80110b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80110bc:	461a      	mov	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d913      	bls.n	80110ec <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80110c4:	4b20      	ldr	r3, [pc, #128]	@ (8011148 <trim_len+0x108>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	dd0a      	ble.n	80110e2 <trim_len+0xa2>
 80110cc:	4b1f      	ldr	r3, [pc, #124]	@ (801114c <trim_len+0x10c>)
 80110ce:	f241 22b0 	movw	r2, #4784	@ 0x12b0
 80110d2:	491f      	ldr	r1, [pc, #124]	@ (8011150 <trim_len+0x110>)
 80110d4:	2001      	movs	r0, #1
 80110d6:	f7fd fc49 	bl	800e96c <mg_log_prefix>
 80110da:	68f9      	ldr	r1, [r7, #12]
 80110dc:	481d      	ldr	r0, [pc, #116]	@ (8011154 <trim_len+0x114>)
 80110de:	f7fd fc95 	bl	800ea0c <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80110ec:	683a      	ldr	r2, [r7, #0]
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	441a      	add	r2, r3
 80110f2:	6a3b      	ldr	r3, [r7, #32]
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110f8:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d91e      	bls.n	801113e <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8011100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011106:	461a      	mov	r2, r3
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	6a3a      	ldr	r2, [r7, #32]
 801110e:	4413      	add	r3, r2
 8011110:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011118:	f003 0301 	and.w	r3, r3, #1
 801111c:	b2db      	uxtb	r3, r3
 801111e:	2b00      	cmp	r3, #0
 8011120:	d00d      	beq.n	801113e <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8011122:	4b09      	ldr	r3, [pc, #36]	@ (8011148 <trim_len+0x108>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	dd09      	ble.n	801113e <trim_len+0xfe>
 801112a:	4b08      	ldr	r3, [pc, #32]	@ (801114c <trim_len+0x10c>)
 801112c:	f241 22b7 	movw	r2, #4791	@ 0x12b7
 8011130:	4907      	ldr	r1, [pc, #28]	@ (8011150 <trim_len+0x110>)
 8011132:	2001      	movs	r0, #1
 8011134:	f7fd fc1a 	bl	800e96c <mg_log_prefix>
 8011138:	4807      	ldr	r0, [pc, #28]	@ (8011158 <trim_len+0x118>)
 801113a:	f7fd fc67 	bl	800ea0c <mg_log>
    }
  }

  return len;
 801113e:	683b      	ldr	r3, [r7, #0]
}
 8011140:	4618      	mov	r0, r3
 8011142:	3728      	adds	r7, #40	@ 0x28
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	24000258 	.word	0x24000258
 801114c:	0802db08 	.word	0x0802db08
 8011150:	08029e1c 	.word	0x08029e1c
 8011154:	0802b1ec 	.word	0x0802b1ec
 8011158:	0802b218 	.word	0x0802b218

0801115c <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 801115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801115e:	b08f      	sub	sp, #60	@ 0x3c
 8011160:	af06      	add	r7, sp, #24
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801116e:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	33b0      	adds	r3, #176	@ 0xb0
 8011174:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	331c      	adds	r3, #28
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801117e:	6879      	ldr	r1, [r7, #4]
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f7ff ff5d 	bl	8011040 <trim_len>
 8011186:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	b2db      	uxtb	r3, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	d015      	beq.n	80111c4 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	f103 011a 	add.w	r1, r3, #26
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	6898      	ldr	r0, [r3, #8]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	8b1c      	ldrh	r4, [r3, #24]
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	9203      	str	r2, [sp, #12]
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	9202      	str	r2, [sp, #8]
 80111b2:	9301      	str	r3, [sp, #4]
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	4623      	mov	r3, r4
 80111ba:	4602      	mov	r2, r0
 80111bc:	69f8      	ldr	r0, [r7, #28]
 80111be:	f7fe fcc8 	bl	800fb52 <tx_udp>
 80111c2:	e047      	b.n	8011254 <mg_io_send+0xf8>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 80111c4:	69bb      	ldr	r3, [r7, #24]
 80111c6:	8b1b      	ldrh	r3, [r3, #24]
 80111c8:	461a      	mov	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d902      	bls.n	80111d6 <mg_io_send+0x7a>
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	8b1b      	ldrh	r3, [r3, #24]
 80111d4:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	f103 061a 	add.w	r6, r3, #26
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	8b1c      	ldrh	r4, [r3, #24]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f010 fe70 	bl	8021ece <mg_ntohl>
 80111ee:	6038      	str	r0, [r7, #0]
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f010 fe6a 	bl	8021ece <mg_ntohl>
 80111fa:	4602      	mov	r2, r0
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	9305      	str	r3, [sp, #20]
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	9304      	str	r3, [sp, #16]
 8011204:	9203      	str	r2, [sp, #12]
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	9302      	str	r3, [sp, #8]
 801120a:	9501      	str	r5, [sp, #4]
 801120c:	9400      	str	r4, [sp, #0]
 801120e:	2318      	movs	r3, #24
 8011210:	697a      	ldr	r2, [r7, #20]
 8011212:	4631      	mov	r1, r6
 8011214:	69f8      	ldr	r0, [r7, #28]
 8011216:	f7ff fd03 	bl	8010c20 <tx_tcp>
 801121a:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d102      	bne.n	8011228 <mg_io_send+0xcc>
      return MG_IO_WAIT;
 8011222:	f06f 0301 	mvn.w	r3, #1
 8011226:	e016      	b.n	8011256 <mg_io_send+0xfa>
    } else if (sent == (size_t) -1) {
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122e:	d102      	bne.n	8011236 <mg_io_send+0xda>
      return MG_IO_ERR;
 8011230:	f04f 33ff 	mov.w	r3, #4294967295
 8011234:	e00f      	b.n	8011256 <mg_io_send+0xfa>
    } else {
      s->seq += (uint32_t) len;
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	681a      	ldr	r2, [r3, #0]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	441a      	add	r2, r3
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d103      	bne.n	8011254 <mg_io_send+0xf8>
 801124c:	2100      	movs	r1, #0
 801124e:	68f8      	ldr	r0, [r7, #12]
 8011250:	f7fe fa96 	bl	800f780 <settmout>
    }
  }
  return (long) len;
 8011254:	687b      	ldr	r3, [r7, #4]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3724      	adds	r7, #36	@ 0x24
 801125a:	46bd      	mov	sp, r7
 801125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011260 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f00a f9bd 	bl	801b5e8 <mg_tls_pending>
 801126e:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011276:	bf28      	it	cs
 8011278:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 801127c:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	3338      	adds	r3, #56	@ 0x38
 8011282:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	685a      	ldr	r2, [r3, #4]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	1ad3      	subs	r3, r2, r3
 801128e:	693a      	ldr	r2, [r7, #16]
 8011290:	429a      	cmp	r2, r3
 8011292:	d90f      	bls.n	80112b4 <handle_tls_recv+0x54>
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	689a      	ldr	r2, [r3, #8]
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	4413      	add	r3, r2
 801129c:	4619      	mov	r1, r3
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f7fc fa6e 	bl	800d780 <mg_iobuf_resize>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d104      	bne.n	80112b4 <handle_tls_recv+0x54>
    mg_error(c, "oom");
 80112aa:	491c      	ldr	r1, [pc, #112]	@ (801131c <handle_tls_recv+0xbc>)
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7f7 fce5 	bl	8008c7c <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 80112b2:	e02f      	b.n	8011314 <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d005      	beq.n	80112c8 <handle_tls_recv+0x68>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	4413      	add	r3, r2
 80112c6:	e001      	b.n	80112cc <handle_tls_recv+0x6c>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	6851      	ldr	r1, [r2, #4]
 80112d0:	68fa      	ldr	r2, [r7, #12]
 80112d2:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 80112d4:	1a8a      	subs	r2, r1, r2
 80112d6:	4619      	mov	r1, r3
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f00a f931 	bl	801b540 <mg_tls_recv>
 80112de:	4603      	mov	r3, r0
 80112e0:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e8:	d104      	bne.n	80112f4 <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 80112ea:	490d      	ldr	r1, [pc, #52]	@ (8011320 <handle_tls_recv+0xc0>)
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7f7 fcc5 	bl	8008c7c <mg_error>
}
 80112f2:	e00f      	b.n	8011314 <handle_tls_recv+0xb4>
    } else if (n > 0) {
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	dd0c      	ble.n	8011314 <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	441a      	add	r2, r3
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 8011306:	f107 0308 	add.w	r3, r7, #8
 801130a:	461a      	mov	r2, r3
 801130c:	2107      	movs	r1, #7
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7f7 fc94 	bl	8008c3c <mg_call>
}
 8011314:	bf00      	nop
 8011316:	3718      	adds	r7, #24
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}
 801131c:	0802b1b4 	.word	0x0802b1b4
 8011320:	0802b244 	.word	0x0802b244

08011324 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8011324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011328:	b090      	sub	sp, #64	@ 0x40
 801132a:	af06      	add	r7, sp, #24
 801132c:	60f8      	str	r0, [r7, #12]
 801132e:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	33b0      	adds	r3, #176	@ 0xb0
 8011334:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801133c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d002      	beq.n	801134c <read_conn+0x28>
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	3368      	adds	r3, #104	@ 0x68
 801134a:	e001      	b.n	8011350 <read_conn+0x2c>
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	3338      	adds	r3, #56	@ 0x38
 8011350:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	4618      	mov	r0, r3
 801135a:	f010 fdb8 	bl	8021ece <mg_ntohl>
 801135e:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	331c      	adds	r3, #28
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801136c:	7b5b      	ldrb	r3, [r3, #13]
 801136e:	f003 0301 	and.w	r3, r3, #1
 8011372:	2b00      	cmp	r3, #0
 8011374:	d07e      	beq.n	8011474 <read_conn+0x150>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 8011376:	2310      	movs	r3, #16
 8011378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	4618      	mov	r0, r3
 8011384:	f010 fda3 	bl	8021ece <mg_ntohl>
 8011388:	4602      	mov	r2, r0
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	4413      	add	r3, r2
 8011390:	1c5a      	adds	r2, r3, #1
 8011392:	6a3b      	ldr	r3, [r7, #32]
 8011394:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 8011396:	6a3b      	ldr	r3, [r7, #32]
 8011398:	2201      	movs	r2, #1
 801139a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80113a4:	f003 0310 	and.w	r3, r3, #16
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d023      	beq.n	80113f6 <read_conn+0xd2>
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80113b4:	2b04      	cmp	r3, #4
 80113b6:	d11e      	bne.n	80113f6 <read_conn+0xd2>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 80113b8:	6a3b      	ldr	r3, [r7, #32]
 80113ba:	681c      	ldr	r4, [r3, #0]
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f010 fd83 	bl	8021ece <mg_ntohl>
 80113c8:	4603      	mov	r3, r0
 80113ca:	429c      	cmp	r4, r3
 80113cc:	d105      	bne.n	80113da <read_conn+0xb6>
        s->seq++;                               // Yes. Increment our SEQ
 80113ce:	6a3b      	ldr	r3, [r7, #32]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	1c5a      	adds	r2, r3, #1
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	e008      	b.n	80113ec <read_conn+0xc8>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f010 fd74 	bl	8021ece <mg_ntohl>
 80113e6:	4602      	mov	r2, r0
 80113e8:	6a3b      	ldr	r3, [r7, #32]
 80113ea:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	2201      	movs	r2, #1
 80113f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80113f4:	e010      	b.n	8011418 <read_conn+0xf4>
    } else {
      flags |= TH_FIN;
 80113f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113fa:	f043 0301 	orr.w	r3, r3, #1
 80113fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 8011402:	68fa      	ldr	r2, [r7, #12]
 8011404:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8011408:	f043 0310 	orr.w	r3, r3, #16
 801140c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8011410:	2104      	movs	r1, #4
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f7fe f9b4 	bl	800f780 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 801141e:	6a3b      	ldr	r3, [r7, #32]
 8011420:	f103 081a 	add.w	r8, r3, #26
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	607b      	str	r3, [r7, #4]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	8b1c      	ldrh	r4, [r3, #24]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8011430:	6a3b      	ldr	r3, [r7, #32]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4618      	mov	r0, r3
 8011436:	f010 fd4a 	bl	8021ece <mg_ntohl>
 801143a:	6038      	str	r0, [r7, #0]
 801143c:	6a3b      	ldr	r3, [r7, #32]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	4618      	mov	r0, r3
 8011442:	f010 fd44 	bl	8021ece <mg_ntohl>
 8011446:	4602      	mov	r2, r0
 8011448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801144c:	2100      	movs	r1, #0
 801144e:	9105      	str	r1, [sp, #20]
 8011450:	499b      	ldr	r1, [pc, #620]	@ (80116c0 <read_conn+0x39c>)
 8011452:	9104      	str	r1, [sp, #16]
 8011454:	9203      	str	r2, [sp, #12]
 8011456:	6839      	ldr	r1, [r7, #0]
 8011458:	9102      	str	r1, [sp, #8]
 801145a:	9501      	str	r5, [sp, #4]
 801145c:	9400      	str	r4, [sp, #0]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	4641      	mov	r1, r8
 8011462:	4630      	mov	r0, r6
 8011464:	f7ff fbdc 	bl	8010c20 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f040 808f 	bne.w	8011590 <read_conn+0x26c>
 8011472:	e16b      	b.n	801174c <read_conn+0x428>
  } else if (pkt->pay.len == 0) {   // this is an ACK
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d110      	bne.n	801149e <read_conn+0x17a>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 801147c:	6a3b      	ldr	r3, [r7, #32]
 801147e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011482:	2b00      	cmp	r3, #0
 8011484:	f000 815f 	beq.w	8011746 <read_conn+0x422>
 8011488:	6a3b      	ldr	r3, [r7, #32]
 801148a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801148e:	2b04      	cmp	r3, #4
 8011490:	f040 8159 	bne.w	8011746 <read_conn+0x422>
 8011494:	6a3b      	ldr	r3, [r7, #32]
 8011496:	2201      	movs	r2, #1
 8011498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 801149c:	e153      	b.n	8011746 <read_conn+0x422>
  } else if (seq != s->ack) {
 801149e:	6a3b      	ldr	r3, [r7, #32]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	69ba      	ldr	r2, [r7, #24]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d059      	beq.n	801155c <read_conn+0x238>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f010 fd0d 	bl	8021ece <mg_ntohl>
 80114b4:	4602      	mov	r2, r0
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	4413      	add	r3, r2
 80114bc:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 80114be:	6a3b      	ldr	r3, [r7, #32]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	697a      	ldr	r2, [r7, #20]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d10f      	bne.n	80114e8 <read_conn+0x1c4>
      MG_VERBOSE(("ignoring duplicate pkt"));
 80114c8:	4b7e      	ldr	r3, [pc, #504]	@ (80116c4 <read_conn+0x3a0>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b03      	cmp	r3, #3
 80114ce:	f340 813c 	ble.w	801174a <read_conn+0x426>
 80114d2:	4b7d      	ldr	r3, [pc, #500]	@ (80116c8 <read_conn+0x3a4>)
 80114d4:	f241 320c 	movw	r2, #4876	@ 0x130c
 80114d8:	497c      	ldr	r1, [pc, #496]	@ (80116cc <read_conn+0x3a8>)
 80114da:	2004      	movs	r0, #4
 80114dc:	f7fd fa46 	bl	800e96c <mg_log_prefix>
 80114e0:	487b      	ldr	r0, [pc, #492]	@ (80116d0 <read_conn+0x3ac>)
 80114e2:	f7fd fa93 	bl	800ea0c <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 80114e6:	e130      	b.n	801174a <read_conn+0x426>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80114e8:	4b76      	ldr	r3, [pc, #472]	@ (80116c4 <read_conn+0x3a0>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2b03      	cmp	r3, #3
 80114ee:	dd0d      	ble.n	801150c <read_conn+0x1e8>
 80114f0:	4b75      	ldr	r3, [pc, #468]	@ (80116c8 <read_conn+0x3a4>)
 80114f2:	f241 320e 	movw	r2, #4878	@ 0x130e
 80114f6:	4975      	ldr	r1, [pc, #468]	@ (80116cc <read_conn+0x3a8>)
 80114f8:	2004      	movs	r0, #4
 80114fa:	f7fd fa37 	bl	800e96c <mg_log_prefix>
 80114fe:	6a3b      	ldr	r3, [r7, #32]
 8011500:	685a      	ldr	r2, [r3, #4]
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	69b9      	ldr	r1, [r7, #24]
 8011506:	4873      	ldr	r0, [pc, #460]	@ (80116d4 <read_conn+0x3b0>)
 8011508:	f7fd fa80 	bl	800ea0c <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8011512:	6a3b      	ldr	r3, [r7, #32]
 8011514:	f103 081a 	add.w	r8, r3, #26
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	607b      	str	r3, [r7, #4]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	8b1c      	ldrh	r4, [r3, #24]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8011524:	6a3b      	ldr	r3, [r7, #32]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f010 fcd0 	bl	8021ece <mg_ntohl>
 801152e:	6038      	str	r0, [r7, #0]
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	f010 fcca 	bl	8021ece <mg_ntohl>
 801153a:	4603      	mov	r3, r0
 801153c:	2200      	movs	r2, #0
 801153e:	9205      	str	r2, [sp, #20]
 8011540:	4a5f      	ldr	r2, [pc, #380]	@ (80116c0 <read_conn+0x39c>)
 8011542:	9204      	str	r2, [sp, #16]
 8011544:	9303      	str	r3, [sp, #12]
 8011546:	6839      	ldr	r1, [r7, #0]
 8011548:	9102      	str	r1, [sp, #8]
 801154a:	9501      	str	r5, [sp, #4]
 801154c:	9400      	str	r4, [sp, #0]
 801154e:	2310      	movs	r3, #16
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	4641      	mov	r1, r8
 8011554:	4630      	mov	r0, r6
 8011556:	f7ff fb63 	bl	8010c20 <tx_tcp>
    return;  // drop it
 801155a:	e0f6      	b.n	801174a <read_conn+0x426>
  } else if (io->size - io->len < pkt->pay.len &&
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	689b      	ldr	r3, [r3, #8]
 8011564:	1ad2      	subs	r2, r2, r3
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	429a      	cmp	r2, r3
 801156c:	d210      	bcs.n	8011590 <read_conn+0x26c>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	689a      	ldr	r2, [r3, #8]
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	4413      	add	r3, r2
 8011578:	4619      	mov	r1, r3
 801157a:	69f8      	ldr	r0, [r7, #28]
 801157c:	f7fc f900 	bl	800d780 <mg_iobuf_resize>
 8011580:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 8011582:	2b00      	cmp	r3, #0
 8011584:	d104      	bne.n	8011590 <read_conn+0x26c>
    mg_error(c, "oom");
 8011586:	4954      	ldr	r1, [pc, #336]	@ (80116d8 <read_conn+0x3b4>)
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f7f7 fb77 	bl	8008c7c <mg_error>
    return;  // drop it
 801158e:	e0dd      	b.n	801174c <read_conn+0x428>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	18d0      	adds	r0, r2, r3
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	6899      	ldr	r1, [r3, #8]
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	461a      	mov	r2, r3
 80115a4:	f016 fa2d 	bl	8027a02 <memcpy>
  io->len += pkt->pay.len;
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	689a      	ldr	r2, [r3, #8]
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	441a      	add	r2, r3
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 80115b6:	4b43      	ldr	r3, [pc, #268]	@ (80116c4 <read_conn+0x3a0>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b03      	cmp	r3, #3
 80115bc:	dd15      	ble.n	80115ea <read_conn+0x2c6>
 80115be:	4b42      	ldr	r3, [pc, #264]	@ (80116c8 <read_conn+0x3a4>)
 80115c0:	f241 321f 	movw	r2, #4895	@ 0x131f
 80115c4:	4941      	ldr	r1, [pc, #260]	@ (80116cc <read_conn+0x3a8>)
 80115c6:	2004      	movs	r0, #4
 80115c8:	f7fd f9d0 	bl	800e96c <mg_log_prefix>
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	4618      	mov	r0, r3
 80115d8:	f010 fc79 	bl	8021ece <mg_ntohl>
 80115dc:	4602      	mov	r2, r0
 80115de:	6a3b      	ldr	r3, [r7, #32]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	4621      	mov	r1, r4
 80115e4:	483d      	ldr	r0, [pc, #244]	@ (80116dc <read_conn+0x3b8>)
 80115e6:	f7fd fa11 	bl	800ea0c <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f010 fc6c 	bl	8021ece <mg_ntohl>
 80115f6:	4602      	mov	r2, r0
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	441a      	add	r2, r3
 80115fe:	6a3b      	ldr	r3, [r7, #32]
 8011600:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 8011602:	6a3b      	ldr	r3, [r7, #32]
 8011604:	695a      	ldr	r2, [r3, #20]
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	68db      	ldr	r3, [r3, #12]
 801160a:	441a      	add	r2, r3
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8011610:	6a3b      	ldr	r3, [r7, #32]
 8011612:	695b      	ldr	r3, [r3, #20]
 8011614:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011618:	4293      	cmp	r3, r2
 801161a:	d963      	bls.n	80116e4 <read_conn+0x3c0>
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	691a      	ldr	r2, [r3, #16]
 8011620:	6a3b      	ldr	r3, [r7, #32]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	429a      	cmp	r2, r3
 8011626:	d05d      	beq.n	80116e4 <read_conn+0x3c0>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8011628:	4b26      	ldr	r3, [pc, #152]	@ (80116c4 <read_conn+0x3a0>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b03      	cmp	r3, #3
 801162e:	dd0e      	ble.n	801164e <read_conn+0x32a>
 8011630:	4b25      	ldr	r3, [pc, #148]	@ (80116c8 <read_conn+0x3a4>)
 8011632:	f241 3226 	movw	r2, #4902	@ 0x1326
 8011636:	4925      	ldr	r1, [pc, #148]	@ (80116cc <read_conn+0x3a8>)
 8011638:	2004      	movs	r0, #4
 801163a:	f7fd f997 	bl	800e96c <mg_log_prefix>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8011642:	6a3b      	ldr	r3, [r7, #32]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	461a      	mov	r2, r3
 8011648:	4825      	ldr	r0, [pc, #148]	@ (80116e0 <read_conn+0x3bc>)
 801164a:	f7fd f9df 	bl	800ea0c <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8011654:	6a3b      	ldr	r3, [r7, #32]
 8011656:	f103 081a 	add.w	r8, r3, #26
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	607b      	str	r3, [r7, #4]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	8b1c      	ldrh	r4, [r3, #24]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8011666:	6a3b      	ldr	r3, [r7, #32]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4618      	mov	r0, r3
 801166c:	f010 fc2f 	bl	8021ece <mg_ntohl>
 8011670:	6038      	str	r0, [r7, #0]
 8011672:	6a3b      	ldr	r3, [r7, #32]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	4618      	mov	r0, r3
 8011678:	f010 fc29 	bl	8021ece <mg_ntohl>
 801167c:	4603      	mov	r3, r0
 801167e:	2200      	movs	r2, #0
 8011680:	9205      	str	r2, [sp, #20]
 8011682:	2200      	movs	r2, #0
 8011684:	9204      	str	r2, [sp, #16]
 8011686:	9303      	str	r3, [sp, #12]
 8011688:	6839      	ldr	r1, [r7, #0]
 801168a:	9102      	str	r1, [sp, #8]
 801168c:	9501      	str	r5, [sp, #4]
 801168e:	9400      	str	r4, [sp, #0]
 8011690:	2310      	movs	r3, #16
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	4641      	mov	r1, r8
 8011696:	4630      	mov	r0, r6
 8011698:	f7ff fac2 	bl	8010c20 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 801169c:	6a3b      	ldr	r3, [r7, #32]
 801169e:	2200      	movs	r2, #0
 80116a0:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 80116a2:	6a3b      	ldr	r3, [r7, #32]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	6a3b      	ldr	r3, [r7, #32]
 80116a8:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d020      	beq.n	80116f6 <read_conn+0x3d2>
 80116b4:	2100      	movs	r1, #0
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f7fe f862 	bl	800f780 <settmout>
 80116bc:	e01b      	b.n	80116f6 <read_conn+0x3d2>
 80116be:	bf00      	nop
 80116c0:	0802a65c 	.word	0x0802a65c
 80116c4:	24000258 	.word	0x24000258
 80116c8:	0802db14 	.word	0x0802db14
 80116cc:	08029e1c 	.word	0x08029e1c
 80116d0:	0802b254 	.word	0x0802b254
 80116d4:	0802b26c 	.word	0x0802b26c
 80116d8:	0802b1b4 	.word	0x0802b1b4
 80116dc:	0802b284 	.word	0x0802b284
 80116e0:	0802b298 	.word	0x0802b298
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80116e4:	6a3b      	ldr	r3, [r7, #32]
 80116e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d003      	beq.n	80116f6 <read_conn+0x3d2>
 80116ee:	2101      	movs	r1, #1
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f7fe f845 	bl	800f780 <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80116fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011700:	b2db      	uxtb	r3, r3
 8011702:	2b00      	cmp	r3, #0
 8011704:	d00b      	beq.n	801171e <read_conn+0x3fa>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801170c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011710:	b2db      	uxtb	r3, r3
 8011712:	2b00      	cmp	r3, #0
 8011714:	d003      	beq.n	801171e <read_conn+0x3fa>
    mg_tls_handshake(c);
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f009 fbf4 	bl	801af04 <mg_tls_handshake>
 801171c:	e016      	b.n	801174c <read_conn+0x428>
  } else if (c->is_tls) {
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b00      	cmp	r3, #0
 801172c:	d003      	beq.n	8011736 <read_conn+0x412>
    handle_tls_recv(c);
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f7ff fd96 	bl	8011260 <handle_tls_recv>
 8011734:	e00a      	b.n	801174c <read_conn+0x428>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	330c      	adds	r3, #12
 801173a:	461a      	mov	r2, r3
 801173c:	2107      	movs	r1, #7
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f7f7 fa7c 	bl	8008c3c <mg_call>
 8011744:	e002      	b.n	801174c <read_conn+0x428>
    return;  // no data to process
 8011746:	bf00      	nop
 8011748:	e000      	b.n	801174c <read_conn+0x428>
    return;  // drop it
 801174a:	bf00      	nop
  }
}
 801174c:	3728      	adds	r7, #40	@ 0x28
 801174e:	46bd      	mov	sp, r7
 8011750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011754 <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	3314      	adds	r3, #20
 8011762:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	7b1b      	ldrb	r3, [r3, #12]
 8011768:	091b      	lsrs	r3, r3, #4
 801176a:	b2db      	uxtb	r3, r3
 801176c:	3b05      	subs	r3, #5
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011778:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 801177a:	e038      	b.n	80117ee <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	73bb      	strb	r3, [r7, #14]
 8011782:	2301      	movs	r3, #1
 8011784:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 8011786:	7bbb      	ldrb	r3, [r7, #14]
 8011788:	2b01      	cmp	r3, #1
 801178a:	d017      	beq.n	80117bc <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 801178c:	7bbb      	ldrb	r3, [r7, #14]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d031      	beq.n	80117f6 <handle_opt+0xa2>
      optlen = opts[1];
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	785b      	ldrb	r3, [r3, #1]
 8011796:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 8011798:	7bbb      	ldrb	r3, [r7, #14]
 801179a:	2b02      	cmp	r3, #2
 801179c:	d10e      	bne.n	80117bc <handle_opt+0x68>
 801179e:	7bfb      	ldrb	r3, [r7, #15]
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	d10b      	bne.n	80117bc <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	3302      	adds	r3, #2
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	021b      	lsls	r3, r3, #8
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	697a      	ldr	r2, [r7, #20]
 80117b0:	3203      	adds	r2, #3
 80117b2:	7812      	ldrb	r2, [r2, #0]
 80117b4:	4413      	add	r3, r2
 80117b6:	b29a      	uxth	r2, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 80117bc:	4b10      	ldr	r3, [pc, #64]	@ (8011800 <handle_opt+0xac>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b03      	cmp	r3, #3
 80117c2:	dd0c      	ble.n	80117de <handle_opt+0x8a>
 80117c4:	4b0f      	ldr	r3, [pc, #60]	@ (8011804 <handle_opt+0xb0>)
 80117c6:	f241 3247 	movw	r2, #4935	@ 0x1347
 80117ca:	490f      	ldr	r1, [pc, #60]	@ (8011808 <handle_opt+0xb4>)
 80117cc:	2004      	movs	r0, #4
 80117ce:	f7fd f8cd 	bl	800e96c <mg_log_prefix>
 80117d2:	7bb9      	ldrb	r1, [r7, #14]
 80117d4:	7bfa      	ldrb	r2, [r7, #15]
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	480c      	ldr	r0, [pc, #48]	@ (801180c <handle_opt+0xb8>)
 80117da:	f7fd f917 	bl	800ea0c <mg_log>
    opts += optlen;
 80117de:	7bfb      	ldrb	r3, [r7, #15]
 80117e0:	697a      	ldr	r2, [r7, #20]
 80117e2:	4413      	add	r3, r2
 80117e4:	617b      	str	r3, [r7, #20]
    len -= optlen;
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	693a      	ldr	r2, [r7, #16]
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	dcc3      	bgt.n	801177c <handle_opt+0x28>
  }
}
 80117f4:	e000      	b.n	80117f8 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 80117f6:	bf00      	nop
}
 80117f8:	bf00      	nop
 80117fa:	3718      	adds	r7, #24
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	24000258 	.word	0x24000258
 8011804:	0802db20 	.word	0x0802db20
 8011808:	08029e1c 	.word	0x08029e1c
 801180c:	0802b2a8 	.word	0x0802b2a8

08011810 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011810:	b590      	push	{r4, r7, lr}
 8011812:	b089      	sub	sp, #36	@ 0x24
 8011814:	af02      	add	r7, sp, #8
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801181e:	2200      	movs	r2, #0
 8011820:	6839      	ldr	r1, [r7, #0]
 8011822:	4618      	mov	r0, r3
 8011824:	f7fe fbd4 	bl	800ffd0 <getpeer>
 8011828:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <rx_tcp+0x26>
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	33b0      	adds	r3, #176	@ 0xb0
 8011834:	e000      	b.n	8011838 <rx_tcp+0x28>
 8011836:	2300      	movs	r3, #0
 8011838:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d05d      	beq.n	80118fc <rx_tcp+0xec>
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011846:	f003 0320 	and.w	r3, r3, #32
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	d055      	beq.n	80118fc <rx_tcp+0xec>
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011854:	7b5b      	ldrb	r3, [r3, #13]
 8011856:	2b12      	cmp	r3, #18
 8011858:	d150      	bne.n	80118fc <rx_tcp+0xec>
    handle_opt(s, pkt->tcp);  // process options (MSS)
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801185e:	4619      	mov	r1, r3
 8011860:	6938      	ldr	r0, [r7, #16]
 8011862:	f7ff ff77 	bl	8011754 <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	4618      	mov	r0, r3
 801186e:	f010 fb2e 	bl	8021ece <mg_ntohl>
 8011872:	4602      	mov	r2, r0
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	4618      	mov	r0, r3
 8011880:	f010 fb25 	bl	8021ece <mg_ntohl>
 8011884:	4603      	mov	r3, r0
 8011886:	1c5a      	adds	r2, r3, #1
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	2200      	movs	r2, #0
 8011894:	9201      	str	r2, [sp, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	9200      	str	r2, [sp, #0]
 801189a:	2210      	movs	r2, #16
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff fab0 	bl	8010e04 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 80118a4:	697a      	ldr	r2, [r7, #20]
 80118a6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80118aa:	f023 0320 	bic.w	r3, r3, #32
 80118ae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 80118b2:	2100      	movs	r1, #0
 80118b4:	6978      	ldr	r0, [r7, #20]
 80118b6:	f7fd ff63 	bl	800f780 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 80118ba:	2200      	movs	r2, #0
 80118bc:	2104      	movs	r1, #4
 80118be:	6978      	ldr	r0, [r7, #20]
 80118c0:	f7f7 f9bc 	bl	8008c3c <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80118ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d002      	beq.n	80118da <rx_tcp+0xca>
 80118d4:	6978      	ldr	r0, [r7, #20]
 80118d6:	f009 fb15 	bl	801af04 <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80118e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f040 80d3 	bne.w	8011a92 <rx_tcp+0x282>
 80118ec:	697a      	ldr	r2, [r7, #20]
 80118ee:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80118f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118f6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 80118fa:	e0ca      	b.n	8011a92 <rx_tcp+0x282>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d019      	beq.n	8011936 <rx_tcp+0x126>
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011908:	f003 0320 	and.w	r3, r3, #32
 801190c:	b2db      	uxtb	r3, r3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d011      	beq.n	8011936 <rx_tcp+0x126>
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011916:	7b5b      	ldrb	r3, [r3, #13]
 8011918:	2b10      	cmp	r3, #16
 801191a:	d00c      	beq.n	8011936 <rx_tcp+0x126>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	2200      	movs	r2, #0
 8011924:	9201      	str	r2, [sp, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	9200      	str	r2, [sp, #0]
 801192a:	2214      	movs	r2, #20
 801192c:	6839      	ldr	r1, [r7, #0]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fa68 	bl	8010e04 <tx_tcp_pkt>
 8011934:	e0ad      	b.n	8011a92 <rx_tcp+0x282>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00b      	beq.n	8011954 <rx_tcp+0x144>
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011940:	7b5b      	ldrb	r3, [r3, #13]
 8011942:	f003 0304 	and.w	r3, r3, #4
 8011946:	2b00      	cmp	r3, #0
 8011948:	d004      	beq.n	8011954 <rx_tcp+0x144>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801194a:	4954      	ldr	r1, [pc, #336]	@ (8011a9c <rx_tcp+0x28c>)
 801194c:	6978      	ldr	r0, [r7, #20]
 801194e:	f7f7 f995 	bl	8008c7c <mg_error>
 8011952:	e09e      	b.n	8011a92 <rx_tcp+0x282>
  } else if (c != NULL) {
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d011      	beq.n	801197e <rx_tcp+0x16e>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	2200      	movs	r2, #0
 801195e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d103      	bne.n	8011974 <rx_tcp+0x164>
      settmout(c,
 801196c:	2100      	movs	r1, #0
 801196e:	6978      	ldr	r0, [r7, #20]
 8011970:	f7fd ff06 	bl	800f780 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8011974:	6839      	ldr	r1, [r7, #0]
 8011976:	6978      	ldr	r0, [r7, #20]
 8011978:	f7ff fcd4 	bl	8011324 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 801197c:	e089      	b.n	8011a92 <rx_tcp+0x282>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011982:	2201      	movs	r2, #1
 8011984:	6839      	ldr	r1, [r7, #0]
 8011986:	4618      	mov	r0, r3
 8011988:	f7fe fb22 	bl	800ffd0 <getpeer>
 801198c:	6178      	str	r0, [r7, #20]
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d10c      	bne.n	80119ae <rx_tcp+0x19e>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	2200      	movs	r2, #0
 801199c:	9201      	str	r2, [sp, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	9200      	str	r2, [sp, #0]
 80119a2:	2214      	movs	r2, #20
 80119a4:	6839      	ldr	r1, [r7, #0]
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fa2c 	bl	8010e04 <tx_tcp_pkt>
}
 80119ac:	e071      	b.n	8011a92 <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_RST) {
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119b2:	7b5b      	ldrb	r3, [r3, #13]
 80119b4:	f003 0304 	and.w	r3, r3, #4
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00c      	beq.n	80119d6 <rx_tcp+0x1c6>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80119c2:	f003 0304 	and.w	r3, r3, #4
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d062      	beq.n	8011a92 <rx_tcp+0x282>
 80119cc:	4933      	ldr	r1, [pc, #204]	@ (8011a9c <rx_tcp+0x28c>)
 80119ce:	6978      	ldr	r0, [r7, #20]
 80119d0:	f7f7 f954 	bl	8008c7c <mg_error>
}
 80119d4:	e05d      	b.n	8011a92 <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_SYN) {
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119da:	7b5b      	ldrb	r3, [r3, #13]
 80119dc:	f003 0302 	and.w	r3, r3, #2
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d016      	beq.n	8011a12 <rx_tcp+0x202>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4618      	mov	r0, r3
 80119ee:	f010 fa57 	bl	8021ea0 <mg_ntohs>
 80119f2:	4603      	mov	r3, r0
 80119f4:	4618      	mov	r0, r3
 80119f6:	f010 fa6a 	bl	8021ece <mg_ntohl>
 80119fa:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 80119fc:	2300      	movs	r3, #0
 80119fe:	9301      	str	r3, [sp, #4]
 8011a00:	2300      	movs	r3, #0
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2212      	movs	r2, #18
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7ff f9fa 	bl	8010e04 <tx_tcp_pkt>
}
 8011a10:	e03f      	b.n	8011a92 <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_FIN) {
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a16:	7b5b      	ldrb	r3, [r3, #13]
 8011a18:	f003 0301 	and.w	r3, r3, #1
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00c      	beq.n	8011a3a <rx_tcp+0x22a>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a24:	689b      	ldr	r3, [r3, #8]
 8011a26:	2200      	movs	r2, #0
 8011a28:	9201      	str	r2, [sp, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	9200      	str	r2, [sp, #0]
 8011a2e:	2211      	movs	r2, #17
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f7ff f9e6 	bl	8010e04 <tx_tcp_pkt>
}
 8011a38:	e02b      	b.n	8011a92 <rx_tcp+0x282>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a3e:	689b      	ldr	r3, [r3, #8]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f010 fa44 	bl	8021ece <mg_ntohl>
 8011a46:	4604      	mov	r4, r0
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a4c:	881b      	ldrh	r3, [r3, #0]
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	4618      	mov	r0, r3
 8011a52:	f010 fa25 	bl	8021ea0 <mg_ntohs>
 8011a56:	4603      	mov	r3, r0
 8011a58:	3301      	adds	r3, #1
 8011a5a:	429c      	cmp	r4, r3
 8011a5c:	d104      	bne.n	8011a68 <rx_tcp+0x258>
    accept_conn(c, pkt);
 8011a5e:	6839      	ldr	r1, [r7, #0]
 8011a60:	6978      	ldr	r0, [r7, #20]
 8011a62:	f7ff fa15 	bl	8010e90 <accept_conn>
}
 8011a66:	e014      	b.n	8011a92 <rx_tcp+0x282>
  } else if (!c->is_accepted) {  // no peer
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011a6e:	f003 0304 	and.w	r3, r3, #4
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d10c      	bne.n	8011a92 <rx_tcp+0x282>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	9201      	str	r2, [sp, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	9200      	str	r2, [sp, #0]
 8011a86:	2214      	movs	r2, #20
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f7ff f9ba 	bl	8010e04 <tx_tcp_pkt>
}
 8011a90:	e7ff      	b.n	8011a92 <rx_tcp+0x282>
 8011a92:	bf00      	nop
 8011a94:	371c      	adds	r7, #28
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd90      	pop	{r4, r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	0802b2c8 	.word	0x0802b2c8

08011aa0 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aa2:	b08b      	sub	sp, #44	@ 0x2c
 8011aa4:	af04      	add	r7, sp, #16
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	69db      	ldr	r3, [r3, #28]
 8011aae:	88db      	ldrh	r3, [r3, #6]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f010 f9f4 	bl	8021ea0 <mg_ntohs>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8011abc:	8afb      	ldrh	r3, [r7, #22]
 8011abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d104      	bne.n	8011ad0 <rx_ip+0x30>
 8011ac6:	8afb      	ldrh	r3, [r7, #22]
 8011ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d026      	beq.n	8011b1e <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	69db      	ldr	r3, [r3, #28]
 8011ad4:	7a5b      	ldrb	r3, [r3, #9]
 8011ad6:	2b11      	cmp	r3, #17
 8011ad8:	d105      	bne.n	8011ae6 <rx_ip+0x46>
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	69db      	ldr	r3, [r3, #28]
 8011ade:	f103 0214 	add.w	r2, r3, #20
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	69db      	ldr	r3, [r3, #28]
 8011aea:	7a5b      	ldrb	r3, [r3, #9]
 8011aec:	2b06      	cmp	r3, #6
 8011aee:	d105      	bne.n	8011afc <rx_ip+0x5c>
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	69db      	ldr	r3, [r3, #28]
 8011af4:	f103 0214 	add.w	r2, r3, #20
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b00:	2200      	movs	r2, #0
 8011b02:	6839      	ldr	r1, [r7, #0]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fe fa63 	bl	800ffd0 <getpeer>
 8011b0a:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f000 811b 	beq.w	8011d4a <rx_ip+0x2aa>
 8011b14:	4992      	ldr	r1, [pc, #584]	@ (8011d60 <rx_ip+0x2c0>)
 8011b16:	68f8      	ldr	r0, [r7, #12]
 8011b18:	f7f7 f8b0 	bl	8008c7c <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8011b1c:	e115      	b.n	8011d4a <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	69db      	ldr	r3, [r3, #28]
 8011b22:	7a5b      	ldrb	r3, [r3, #9]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d116      	bne.n	8011b56 <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	f103 0214 	add.w	r2, r3, #20
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	2b03      	cmp	r3, #3
 8011b3a:	f240 8108 	bls.w	8011d4e <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b42:	3304      	adds	r3, #4
 8011b44:	4619      	mov	r1, r3
 8011b46:	6838      	ldr	r0, [r7, #0]
 8011b48:	f7fd fda2 	bl	800f690 <mkpay>
    rx_icmp(ifp, pkt);
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7fe fbc2 	bl	80102d8 <rx_icmp>
 8011b54:	e100      	b.n	8011d58 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	69db      	ldr	r3, [r3, #28]
 8011b5a:	7a5b      	ldrb	r3, [r3, #9]
 8011b5c:	2b11      	cmp	r3, #17
 8011b5e:	f040 808b 	bne.w	8011c78 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	f103 0214 	add.w	r2, r3, #20
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	2b07      	cmp	r3, #7
 8011b74:	f240 80ed 	bls.w	8011d52 <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b7c:	3308      	adds	r3, #8
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6838      	ldr	r0, [r7, #0]
 8011b82:	f7fd fd85 	bl	800f690 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8011b86:	4b77      	ldr	r3, [pc, #476]	@ (8011d64 <rx_ip+0x2c4>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2b03      	cmp	r3, #3
 8011b8c:	dd2d      	ble.n	8011bea <rx_ip+0x14a>
 8011b8e:	4b76      	ldr	r3, [pc, #472]	@ (8011d68 <rx_ip+0x2c8>)
 8011b90:	f241 3293 	movw	r2, #5011	@ 0x1393
 8011b94:	4975      	ldr	r1, [pc, #468]	@ (8011d6c <rx_ip+0x2cc>)
 8011b96:	2004      	movs	r0, #4
 8011b98:	f7fc fee8 	bl	800e96c <mg_log_prefix>
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	69db      	ldr	r3, [r3, #28]
 8011ba0:	f103 050c 	add.w	r5, r3, #12
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba8:	881b      	ldrh	r3, [r3, #0]
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	4618      	mov	r0, r3
 8011bae:	f010 f977 	bl	8021ea0 <mg_ntohs>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	461e      	mov	r6, r3
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	69db      	ldr	r3, [r3, #28]
 8011bba:	f103 0410 	add.w	r4, r3, #16
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bc2:	885b      	ldrh	r3, [r3, #2]
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f010 f96a 	bl	8021ea0 <mg_ntohs>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	9303      	str	r3, [sp, #12]
 8011bd6:	9202      	str	r2, [sp, #8]
 8011bd8:	9401      	str	r4, [sp, #4]
 8011bda:	4b65      	ldr	r3, [pc, #404]	@ (8011d70 <rx_ip+0x2d0>)
 8011bdc:	9300      	str	r3, [sp, #0]
 8011bde:	4633      	mov	r3, r6
 8011be0:	462a      	mov	r2, r5
 8011be2:	4963      	ldr	r1, [pc, #396]	@ (8011d70 <rx_ip+0x2d0>)
 8011be4:	4863      	ldr	r0, [pc, #396]	@ (8011d74 <rx_ip+0x2d4>)
 8011be6:	f7fc ff11 	bl	800ea0c <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	7f1b      	ldrb	r3, [r3, #28]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d01c      	beq.n	8011c2c <rx_ip+0x18c>
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bf6:	885b      	ldrh	r3, [r3, #2]
 8011bf8:	b29c      	uxth	r4, r3
 8011bfa:	2044      	movs	r0, #68	@ 0x44
 8011bfc:	f010 f950 	bl	8021ea0 <mg_ntohs>
 8011c00:	4603      	mov	r3, r0
 8011c02:	429c      	cmp	r4, r3
 8011c04:	d112      	bne.n	8011c2c <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c0a:	f103 0208 	add.w	r2, r3, #8
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c16:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	6838      	ldr	r0, [r7, #0]
 8011c1e:	f7fd fd37 	bl	800f690 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8011c22:	6839      	ldr	r1, [r7, #0]
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7fe fbb3 	bl	8010390 <rx_dhcp_client>
 8011c2a:	e095      	b.n	8011d58 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	7f5b      	ldrb	r3, [r3, #29]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d01c      	beq.n	8011c6e <rx_ip+0x1ce>
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c38:	885b      	ldrh	r3, [r3, #2]
 8011c3a:	b29c      	uxth	r4, r3
 8011c3c:	2043      	movs	r0, #67	@ 0x43
 8011c3e:	f010 f92f 	bl	8021ea0 <mg_ntohs>
 8011c42:	4603      	mov	r3, r0
 8011c44:	429c      	cmp	r4, r3
 8011c46:	d112      	bne.n	8011c6e <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4c:	f103 0208 	add.w	r2, r3, #8
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c58:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	6838      	ldr	r0, [r7, #0]
 8011c60:	f7fd fd16 	bl	800f690 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8011c64:	6839      	ldr	r1, [r7, #0]
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7fe fd7a 	bl	8010760 <rx_dhcp_server>
 8011c6c:	e074      	b.n	8011d58 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 8011c6e:	6839      	ldr	r1, [r7, #0]
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7fe ff63 	bl	8010b3c <rx_udp>
 8011c76:	e06f      	b.n	8011d58 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	69db      	ldr	r3, [r3, #28]
 8011c7c:	7a5b      	ldrb	r3, [r3, #9]
 8011c7e:	2b06      	cmp	r3, #6
 8011c80:	d16a      	bne.n	8011d58 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	69db      	ldr	r3, [r3, #28]
 8011c86:	f103 0214 	add.w	r2, r3, #20
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	2b13      	cmp	r3, #19
 8011c94:	d95f      	bls.n	8011d56 <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c9a:	3314      	adds	r3, #20
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	6838      	ldr	r0, [r7, #0]
 8011ca0:	f7fd fcf6 	bl	800f690 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	69db      	ldr	r3, [r3, #28]
 8011ca8:	885b      	ldrh	r3, [r3, #2]
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	4618      	mov	r0, r3
 8011cae:	f010 f8f7 	bl	8021ea0 <mg_ntohs>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cba:	7b1b      	ldrb	r3, [r3, #12]
 8011cbc:	091b      	lsrs	r3, r3, #4
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	3305      	adds	r3, #5
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8011cc8:	8aba      	ldrh	r2, [r7, #20]
 8011cca:	8a7b      	ldrh	r3, [r7, #18]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d305      	bcc.n	8011cdc <rx_ip+0x23c>
 8011cd0:	8aba      	ldrh	r2, [r7, #20]
 8011cd2:	8a7b      	ldrh	r3, [r7, #18]
 8011cd4:	1ad3      	subs	r3, r2, r3
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8011cdc:	4b21      	ldr	r3, [pc, #132]	@ (8011d64 <rx_ip+0x2c4>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b03      	cmp	r3, #3
 8011ce2:	dd2d      	ble.n	8011d40 <rx_ip+0x2a0>
 8011ce4:	4b20      	ldr	r3, [pc, #128]	@ (8011d68 <rx_ip+0x2c8>)
 8011ce6:	f241 32a8 	movw	r2, #5032	@ 0x13a8
 8011cea:	4920      	ldr	r1, [pc, #128]	@ (8011d6c <rx_ip+0x2cc>)
 8011cec:	2004      	movs	r0, #4
 8011cee:	f7fc fe3d 	bl	800e96c <mg_log_prefix>
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	69db      	ldr	r3, [r3, #28]
 8011cf6:	f103 050c 	add.w	r5, r3, #12
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cfe:	881b      	ldrh	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	4618      	mov	r0, r3
 8011d04:	f010 f8cc 	bl	8021ea0 <mg_ntohs>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	461e      	mov	r6, r3
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	69db      	ldr	r3, [r3, #28]
 8011d10:	f103 0410 	add.w	r4, r3, #16
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d18:	885b      	ldrh	r3, [r3, #2]
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f010 f8bf 	bl	8021ea0 <mg_ntohs>
 8011d22:	4603      	mov	r3, r0
 8011d24:	461a      	mov	r2, r3
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	9303      	str	r3, [sp, #12]
 8011d2c:	9202      	str	r2, [sp, #8]
 8011d2e:	9401      	str	r4, [sp, #4]
 8011d30:	4b0f      	ldr	r3, [pc, #60]	@ (8011d70 <rx_ip+0x2d0>)
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	4633      	mov	r3, r6
 8011d36:	462a      	mov	r2, r5
 8011d38:	490d      	ldr	r1, [pc, #52]	@ (8011d70 <rx_ip+0x2d0>)
 8011d3a:	480f      	ldr	r0, [pc, #60]	@ (8011d78 <rx_ip+0x2d8>)
 8011d3c:	f7fc fe66 	bl	800ea0c <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8011d40:	6839      	ldr	r1, [r7, #0]
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7ff fd64 	bl	8011810 <rx_tcp>
 8011d48:	e006      	b.n	8011d58 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8011d4a:	bf00      	nop
 8011d4c:	e004      	b.n	8011d58 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011d4e:	bf00      	nop
 8011d50:	e002      	b.n	8011d58 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011d52:	bf00      	nop
 8011d54:	e000      	b.n	8011d58 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8011d56:	bf00      	nop
  }
}
 8011d58:	371c      	adds	r7, #28
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	0802b2d4 	.word	0x0802b2d4
 8011d64:	24000258 	.word	0x24000258
 8011d68:	0802db2c 	.word	0x0802db2c
 8011d6c:	08029e1c 	.word	0x08029e1c
 8011d70:	0801339d 	.word	0x0801339d
 8011d74:	0802b2f0 	.word	0x0802b2f0
 8011d78:	0802b30c 	.word	0x0802b30c

08011d7c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	6a1b      	ldr	r3, [r3, #32]
 8011d8a:	799b      	ldrb	r3, [r3, #6]
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d004      	beq.n	8011d9a <rx_ip6+0x1e>
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	6a1b      	ldr	r3, [r3, #32]
 8011d94:	799b      	ldrb	r3, [r3, #6]
 8011d96:	2b3a      	cmp	r3, #58	@ 0x3a
 8011d98:	d115      	bne.n	8011dc6 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	6a1b      	ldr	r3, [r3, #32]
 8011d9e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	2b03      	cmp	r3, #3
 8011dac:	d922      	bls.n	8011df4 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011db2:	3304      	adds	r3, #4
 8011db4:	4619      	mov	r1, r3
 8011db6:	6838      	ldr	r0, [r7, #0]
 8011db8:	f7fd fc6a 	bl	800f690 <mkpay>
    rx_icmp(ifp, pkt);
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7fe fa8a 	bl	80102d8 <rx_icmp>
 8011dc4:	e019      	b.n	8011dfa <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	6a1b      	ldr	r3, [r3, #32]
 8011dca:	799b      	ldrb	r3, [r3, #6]
 8011dcc:	2b11      	cmp	r3, #17
 8011dce:	d114      	bne.n	8011dfa <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	6a1b      	ldr	r3, [r3, #32]
 8011dd4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	2b07      	cmp	r3, #7
 8011de2:	d909      	bls.n	8011df8 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011de8:	3308      	adds	r3, #8
 8011dea:	4619      	mov	r1, r3
 8011dec:	6838      	ldr	r0, [r7, #0]
 8011dee:	f7fd fc4f 	bl	800f690 <mkpay>
 8011df2:	e002      	b.n	8011dfa <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011df4:	bf00      	nop
 8011df6:	e000      	b.n	8011dfa <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8011df8:	bf00      	nop
  }
}
 8011dfa:	3708      	adds	r7, #8
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8011e00:	b590      	push	{r4, r7, lr}
 8011e02:	b093      	sub	sp, #76	@ 0x4c
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 8011e0c:	f107 0314 	add.w	r3, r7, #20
 8011e10:	2234      	movs	r2, #52	@ 0x34
 8011e12:	2100      	movs	r1, #0
 8011e14:	4618      	mov	r0, r3
 8011e16:	f015 fcbb 	bl	8027790 <memset>
  pkt.raw.buf = (char *) buf;
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	2b0d      	cmp	r3, #13
 8011e2a:	f240 80df 	bls.w	8011fec <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d013      	beq.n	8011e60 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8011e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2206      	movs	r2, #6
 8011e40:	4619      	mov	r1, r3
 8011e42:	f015 fc7b 	bl	802773c <memcmp>
 8011e46:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d009      	beq.n	8011e60 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4e:	2206      	movs	r2, #6
 8011e50:	4970      	ldr	r1, [pc, #448]	@ (8012014 <mg_tcpip_rx+0x214>)
 8011e52:	4618      	mov	r0, r3
 8011e54:	f015 fc72 	bl	802773c <memcmp>
 8011e58:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f040 80c8 	bne.w	8011ff0 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d01a      	beq.n	8011ea0 <mg_tcpip_rx+0xa0>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2b04      	cmp	r3, #4
 8011e6e:	d917      	bls.n	8011ea0 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	3b04      	subs	r3, #4
 8011e74:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	68b9      	ldr	r1, [r7, #8]
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f00f ff90 	bl	8021da0 <mg_crc32>
 8011e80:	4603      	mov	r3, r0
 8011e82:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8011e84:	68ba      	ldr	r2, [r7, #8]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4413      	add	r3, r2
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f107 0310 	add.w	r3, r7, #16
 8011e90:	2204      	movs	r2, #4
 8011e92:	4619      	mov	r1, r3
 8011e94:	f015 fc52 	bl	802773c <memcmp>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f040 80aa 	bne.w	8011ff4 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea2:	899b      	ldrh	r3, [r3, #12]
 8011ea4:	b29c      	uxth	r4, r3
 8011ea6:	f640 0006 	movw	r0, #2054	@ 0x806
 8011eaa:	f00f fff9 	bl	8021ea0 <mg_ntohs>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	429c      	cmp	r4, r3
 8011eb2:	d114      	bne.n	8011ede <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8011eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb6:	330e      	adds	r3, #14
 8011eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	2b29      	cmp	r3, #41	@ 0x29
 8011ebe:	f240 809b 	bls.w	8011ff8 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 8011ec2:	f107 0314 	add.w	r3, r7, #20
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	2103      	movs	r1, #3
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f7fd fbcc 	bl	800f668 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 8011ed0:	f107 0314 	add.w	r3, r7, #20
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7fe f8ec 	bl	80100b4 <rx_arp>
 8011edc:	e097      	b.n	801200e <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8011ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee0:	899b      	ldrh	r3, [r3, #12]
 8011ee2:	b29c      	uxth	r4, r3
 8011ee4:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8011ee8:	f00f ffda 	bl	8021ea0 <mg_ntohs>
 8011eec:	4603      	mov	r3, r0
 8011eee:	429c      	cmp	r4, r3
 8011ef0:	d11b      	bne.n	8011f2a <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef4:	330e      	adds	r3, #14
 8011ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	2b35      	cmp	r3, #53	@ 0x35
 8011efc:	d97e      	bls.n	8011ffc <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8011efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	091b      	lsrs	r3, r3, #4
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b06      	cmp	r3, #6
 8011f08:	d17a      	bne.n	8012000 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 8011f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f0c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011f10:	f107 0314 	add.w	r3, r7, #20
 8011f14:	4611      	mov	r1, r2
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fd fbba 	bl	800f690 <mkpay>
    rx_ip6(ifp, &pkt);
 8011f1c:	f107 0314 	add.w	r3, r7, #20
 8011f20:	4619      	mov	r1, r3
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	f7ff ff2a 	bl	8011d7c <rx_ip6>
 8011f28:	e071      	b.n	801200e <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	b29c      	uxth	r4, r3
 8011f30:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011f34:	f00f ffb4 	bl	8021ea0 <mg_ntohs>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	429c      	cmp	r4, r3
 8011f3c:	d133      	bne.n	8011fa6 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f40:	330e      	adds	r3, #14
 8011f42:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	2b21      	cmp	r3, #33	@ 0x21
 8011f48:	d95c      	bls.n	8012004 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4c:	885b      	ldrh	r3, [r3, #2]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	4618      	mov	r0, r3
 8011f52:	f00f ffa5 	bl	8021ea0 <mg_ntohs>
 8011f56:	4603      	mov	r3, r0
 8011f58:	f103 020e 	add.w	r2, r3, #14
 8011f5c:	69bb      	ldr	r3, [r7, #24]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d208      	bcs.n	8011f74 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8011f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f64:	885b      	ldrh	r3, [r3, #2]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f00f ff99 	bl	8021ea0 <mg_ntohs>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	330e      	adds	r3, #14
 8011f72:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	2b21      	cmp	r3, #33	@ 0x21
 8011f78:	d946      	bls.n	8012008 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	091b      	lsrs	r3, r3, #4
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b04      	cmp	r3, #4
 8011f84:	d142      	bne.n	801200c <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 8011f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f88:	f103 0214 	add.w	r2, r3, #20
 8011f8c:	f107 0314 	add.w	r3, r7, #20
 8011f90:	4611      	mov	r1, r2
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fd fb7c 	bl	800f690 <mkpay>
    rx_ip(ifp, &pkt);
 8011f98:	f107 0314 	add.w	r3, r7, #20
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f7ff fd7e 	bl	8011aa0 <rx_ip>
 8011fa4:	e033      	b.n	801200e <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8011fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8012018 <mg_tcpip_rx+0x218>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2b02      	cmp	r3, #2
 8011fac:	dd11      	ble.n	8011fd2 <mg_tcpip_rx+0x1d2>
 8011fae:	4b1b      	ldr	r3, [pc, #108]	@ (801201c <mg_tcpip_rx+0x21c>)
 8011fb0:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 8011fb4:	491a      	ldr	r1, [pc, #104]	@ (8012020 <mg_tcpip_rx+0x220>)
 8011fb6:	2003      	movs	r0, #3
 8011fb8:	f7fc fcd8 	bl	800e96c <mg_log_prefix>
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fbe:	899b      	ldrh	r3, [r3, #12]
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f00f ff6c 	bl	8021ea0 <mg_ntohs>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	4619      	mov	r1, r3
 8011fcc:	4815      	ldr	r0, [pc, #84]	@ (8012024 <mg_tcpip_rx+0x224>)
 8011fce:	f7fc fd1d 	bl	800ea0c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8011fd2:	4b11      	ldr	r3, [pc, #68]	@ (8012018 <mg_tcpip_rx+0x218>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	2b03      	cmp	r3, #3
 8011fd8:	dd19      	ble.n	801200e <mg_tcpip_rx+0x20e>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2b20      	cmp	r3, #32
 8011fde:	bf28      	it	cs
 8011fe0:	2320      	movcs	r3, #32
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	68b8      	ldr	r0, [r7, #8]
 8011fe6:	f7fc fd47 	bl	800ea78 <mg_hexdump>
 8011fea:	e010      	b.n	801200e <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8011fec:	bf00      	nop
 8011fee:	e00e      	b.n	801200e <mg_tcpip_rx+0x20e>
    return;
 8011ff0:	bf00      	nop
 8011ff2:	e00c      	b.n	801200e <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8011ff4:	bf00      	nop
 8011ff6:	e00a      	b.n	801200e <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8011ff8:	bf00      	nop
 8011ffa:	e008      	b.n	801200e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8011ffc:	bf00      	nop
 8011ffe:	e006      	b.n	801200e <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8012000:	bf00      	nop
 8012002:	e004      	b.n	801200e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8012004:	bf00      	nop
 8012006:	e002      	b.n	801200e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8012008:	bf00      	nop
 801200a:	e000      	b.n	801200e <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 801200c:	bf00      	nop
  }
}
 801200e:	374c      	adds	r7, #76	@ 0x4c
 8012010:	46bd      	mov	sp, r7
 8012012:	bd90      	pop	{r4, r7, pc}
 8012014:	0802d558 	.word	0x0802d558
 8012018:	24000258 	.word	0x24000258
 801201c:	0802db34 	.word	0x0802db34
 8012020:	08029e1c 	.word	0x08029e1c
 8012024:	0802b328 	.word	0x0802b328

08012028 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8012028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801202a:	b095      	sub	sp, #84	@ 0x54
 801202c:	af06      	add	r7, sp, #24
 801202e:	6178      	str	r0, [r7, #20]
 8012030:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 801203a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801203e:	e9cd 2300 	strd	r2, r3, [sp]
 8012042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012046:	f04f 0300 	mov.w	r3, #0
 801204a:	4608      	mov	r0, r1
 801204c:	f005 f966 	bl	801731c <mg_timer_expired>
 8012050:	4603      	mov	r3, r0
 8012052:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 8012056:	6979      	ldr	r1, [r7, #20]
 8012058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801205c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 8012060:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00b      	beq.n	8012080 <mg_tcpip_poll+0x58>
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801206e:	2b03      	cmp	r3, #3
 8012070:	d106      	bne.n	8012080 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	2204      	movs	r2, #4
 8012076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 801207a:	6978      	ldr	r0, [r7, #20]
 801207c:	f7fd fc68 	bl	800f950 <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d075      	beq.n	8012176 <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8012094:	4611      	mov	r1, r2
 8012096:	6978      	ldr	r0, [r7, #20]
 8012098:	4798      	blx	r3
 801209a:	4603      	mov	r3, r0
 801209c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 80120a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d066      	beq.n	8012176 <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	bf14      	ite	ne
 80120b2:	2301      	movne	r3, #1
 80120b4:	2300      	moveq	r3, #0
 80120b6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 80120ba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80120be:	f083 0301 	eor.w	r3, r3, #1
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d006      	beq.n	80120d6 <mg_tcpip_poll+0xae>
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	7f1b      	ldrb	r3, [r3, #28]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d002      	beq.n	80120d6 <mg_tcpip_poll+0xae>
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	2200      	movs	r2, #0
 80120d4:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 80120d6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80120da:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80120de:	429a      	cmp	r2, r3
 80120e0:	d01a      	beq.n	8012118 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 80120e2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80120e6:	f083 0301 	eor.w	r3, r3, #1
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d001      	beq.n	80120f4 <mg_tcpip_poll+0xcc>
 80120f0:	2300      	movs	r3, #0
 80120f2:	e00a      	b.n	801210a <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d103      	bne.n	8012104 <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	689b      	ldr	r3, [r3, #8]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d101      	bne.n	8012108 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8012104:	2301      	movs	r3, #1
 8012106:	e000      	b.n	801210a <mg_tcpip_poll+0xe2>
 8012108:	2303      	movs	r3, #3
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 8012110:	6978      	ldr	r0, [r7, #20]
 8012112:	f7fd fc1d 	bl	800f950 <onstatechange>
 8012116:	e016      	b.n	8012146 <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	7f1b      	ldrb	r3, [r3, #28]
 801211c:	f083 0301 	eor.w	r3, r3, #1
 8012120:	b2db      	uxtb	r3, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	d00f      	beq.n	8012146 <mg_tcpip_poll+0x11e>
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801212c:	2b01      	cmp	r3, #1
 801212e:	d10a      	bne.n	8012146 <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8012134:	2b00      	cmp	r3, #0
 8012136:	d006      	beq.n	8012146 <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	2203      	movs	r2, #3
 801213c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 8012140:	6978      	ldr	r0, [r7, #20]
 8012142:	f7fd fc05 	bl	800f950 <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801214c:	2b00      	cmp	r3, #0
 801214e:	d10d      	bne.n	801216c <mg_tcpip_poll+0x144>
 8012150:	4ba4      	ldr	r3, [pc, #656]	@ (80123e4 <mg_tcpip_poll+0x3bc>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	dd09      	ble.n	801216c <mg_tcpip_poll+0x144>
 8012158:	4ba3      	ldr	r3, [pc, #652]	@ (80123e8 <mg_tcpip_poll+0x3c0>)
 801215a:	f241 4210 	movw	r2, #5136	@ 0x1410
 801215e:	49a3      	ldr	r1, [pc, #652]	@ (80123ec <mg_tcpip_poll+0x3c4>)
 8012160:	2001      	movs	r0, #1
 8012162:	f7fc fc03 	bl	800e96c <mg_log_prefix>
 8012166:	48a2      	ldr	r0, [pc, #648]	@ (80123f0 <mg_tcpip_poll+0x3c8>)
 8012168:	f7fc fc50 	bl	800ea0c <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 801216c:	2200      	movs	r2, #0
 801216e:	2104      	movs	r1, #4
 8012170:	6978      	ldr	r0, [r7, #20]
 8012172:	f7fd fa79 	bl	800f668 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801217c:	2b00      	cmp	r3, #0
 801217e:	f000 81a5 	beq.w	80124cc <mg_tcpip_poll+0x4a4>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	7f1b      	ldrb	r3, [r3, #28]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d055      	beq.n	8012236 <mg_tcpip_poll+0x20e>
 801218a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801218e:	2b00      	cmp	r3, #0
 8012190:	d051      	beq.n	8012236 <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012198:	2b01      	cmp	r3, #1
 801219a:	d103      	bne.n	80121a4 <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 801219c:	6978      	ldr	r0, [r7, #20]
 801219e:	f7fd fedb 	bl	800ff58 <tx_dhcp_discover>
 80121a2:	e048      	b.n	8012236 <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80121aa:	2b04      	cmp	r3, #4
 80121ac:	d143      	bne.n	8012236 <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 80121b4:	4313      	orrs	r3, r2
 80121b6:	d03e      	beq.n	8012236 <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 80121b8:	697b      	ldr	r3, [r7, #20]
 80121ba:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80121c4:	4290      	cmp	r0, r2
 80121c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80121ca:	d30a      	bcc.n	80121e2 <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	2201      	movs	r2, #1
 80121d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2200      	movs	r2, #0
 80121d8:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 80121da:	6978      	ldr	r0, [r7, #20]
 80121dc:	f7fd fbb8 	bl	800f950 <onstatechange>
 80121e0:	e029      	b.n	8012236 <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80121e8:	4982      	ldr	r1, [pc, #520]	@ (80123f4 <mg_tcpip_poll+0x3cc>)
 80121ea:	1854      	adds	r4, r2, r1
 80121ec:	f143 0500 	adc.w	r5, r3, #0
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80121f6:	42a2      	cmp	r2, r4
 80121f8:	41ab      	sbcs	r3, r5
 80121fa:	d21c      	bcs.n	8012236 <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8012202:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012206:	f04f 0300 	mov.w	r3, #0
 801220a:	f7ee faa5 	bl	8000758 <__aeabi_uldivmod>
 801220e:	4602      	mov	r2, r0
 8012210:	460b      	mov	r3, r1
 8012212:	4610      	mov	r0, r2
 8012214:	4619      	mov	r1, r3
 8012216:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 801221a:	f04f 0300 	mov.w	r3, #0
 801221e:	f7ee fa9b 	bl	8000758 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8012222:	4313      	orrs	r3, r2
 8012224:	d107      	bne.n	8012236 <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	689a      	ldr	r2, [r3, #8]
 801222a:	f04f 33ff 	mov.w	r3, #4294967295
 801222e:	4972      	ldr	r1, [pc, #456]	@ (80123f8 <mg_tcpip_poll+0x3d0>)
 8012230:	6978      	ldr	r0, [r7, #20]
 8012232:	f7fd fe5f 	bl	800fef4 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801223a:	689b      	ldr	r3, [r3, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d019      	beq.n	8012274 <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	697a      	ldr	r2, [r7, #20]
 8012248:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 801224a:	697a      	ldr	r2, [r7, #20]
 801224c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 801224e:	697a      	ldr	r2, [r7, #20]
 8012250:	4798      	blx	r3
 8012252:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8012254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012256:	2b00      	cmp	r3, #0
 8012258:	d024      	beq.n	80122a4 <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801225e:	1c5a      	adds	r2, r3, #1
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801226a:	4619      	mov	r1, r3
 801226c:	6978      	ldr	r0, [r7, #20]
 801226e:	f7ff fdc7 	bl	8011e00 <mg_tcpip_rx>
 8012272:	e017      	b.n	80122a4 <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	3334      	adds	r3, #52	@ 0x34
 8012278:	f107 0220 	add.w	r2, r7, #32
 801227c:	4611      	mov	r1, r2
 801227e:	4618      	mov	r0, r3
 8012280:	f001 faba 	bl	80137f8 <mg_queue_next>
 8012284:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 8012286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012288:	2b00      	cmp	r3, #0
 801228a:	d00b      	beq.n	80122a4 <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 801228c:	6a3b      	ldr	r3, [r7, #32]
 801228e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012290:	4619      	mov	r1, r3
 8012292:	6978      	ldr	r0, [r7, #20]
 8012294:	f7ff fdb4 	bl	8011e00 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	3334      	adds	r3, #52	@ 0x34
 801229c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801229e:	4618      	mov	r0, r3
 80122a0:	f001 fb28 	bl	80138f4 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80122ac:	e109      	b.n	80124c2 <mg_tcpip_poll+0x49a>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 80122ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122b0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80122b4:	f003 0301 	and.w	r3, r3, #1
 80122b8:	b2db      	uxtb	r3, r3
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d008      	beq.n	80122d0 <mg_tcpip_poll+0x2a8>
 80122be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122c0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80122c4:	f003 0310 	and.w	r3, r3, #16
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f000 80f3 	beq.w	80124b6 <mg_tcpip_poll+0x48e>
 80122d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80122d6:	f003 0301 	and.w	r3, r3, #1
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	2b00      	cmp	r3, #0
 80122de:	f040 80ea 	bne.w	80124b6 <mg_tcpip_poll+0x48e>
 80122e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122e4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80122e8:	f003 0308 	and.w	r3, r3, #8
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f040 80e1 	bne.w	80124b6 <mg_tcpip_poll+0x48e>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 80122f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122f6:	33b0      	adds	r3, #176	@ 0xb0
 80122f8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80122fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122fc:	331c      	adds	r3, #28
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8012308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801230a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 801230e:	4290      	cmp	r0, r2
 8012310:	eb71 0303 	sbcs.w	r3, r1, r3
 8012314:	f080 80d2 	bcs.w	80124bc <mg_tcpip_poll+0x494>
      if (s->ttype == MIP_TTYPE_ARP) {
 8012318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801231a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801231e:	2b02      	cmp	r3, #2
 8012320:	d104      	bne.n	801232c <mg_tcpip_poll+0x304>
        mg_error(c, "ARP timeout");
 8012322:	4936      	ldr	r1, [pc, #216]	@ (80123fc <mg_tcpip_poll+0x3d4>)
 8012324:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012326:	f7f6 fca9 	bl	8008c7c <mg_error>
 801232a:	e0bf      	b.n	80124ac <mg_tcpip_poll+0x484>
      } else if (c->is_udp) {
 801232c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801232e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	b2db      	uxtb	r3, r3
 8012338:	2b00      	cmp	r3, #0
 801233a:	f040 80be 	bne.w	80124ba <mg_tcpip_poll+0x492>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 801233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d142      	bne.n	80123ce <mg_tcpip_poll+0x3a6>
 8012348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234a:	691a      	ldr	r2, [r3, #16]
 801234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	429a      	cmp	r2, r3
 8012352:	d03c      	beq.n	80123ce <mg_tcpip_poll+0x3a6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8012354:	4b23      	ldr	r3, [pc, #140]	@ (80123e4 <mg_tcpip_poll+0x3bc>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b03      	cmp	r3, #3
 801235a:	dd0f      	ble.n	801237c <mg_tcpip_poll+0x354>
 801235c:	4b22      	ldr	r3, [pc, #136]	@ (80123e8 <mg_tcpip_poll+0x3c0>)
 801235e:	f241 4245 	movw	r2, #5189	@ 0x1445
 8012362:	4922      	ldr	r1, [pc, #136]	@ (80123ec <mg_tcpip_poll+0x3c4>)
 8012364:	2004      	movs	r0, #4
 8012366:	f7fc fb01 	bl	800e96c <mg_log_prefix>
 801236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801236c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	4822      	ldr	r0, [pc, #136]	@ (8012400 <mg_tcpip_poll+0x3d8>)
 8012378:	f7fc fb48 	bl	800ea0c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801237e:	f103 061a 	add.w	r6, r3, #26
 8012382:	69fb      	ldr	r3, [r7, #28]
 8012384:	613b      	str	r3, [r7, #16]
 8012386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012388:	8b1c      	ldrh	r4, [r3, #24]
 801238a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801238c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4618      	mov	r0, r3
 8012394:	f00f fd9b 	bl	8021ece <mg_ntohl>
 8012398:	6078      	str	r0, [r7, #4]
 801239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	4618      	mov	r0, r3
 80123a0:	f00f fd95 	bl	8021ece <mg_ntohl>
 80123a4:	4603      	mov	r3, r0
 80123a6:	2200      	movs	r2, #0
 80123a8:	9205      	str	r2, [sp, #20]
 80123aa:	2200      	movs	r2, #0
 80123ac:	9204      	str	r2, [sp, #16]
 80123ae:	9303      	str	r3, [sp, #12]
 80123b0:	6879      	ldr	r1, [r7, #4]
 80123b2:	9102      	str	r1, [sp, #8]
 80123b4:	9501      	str	r5, [sp, #4]
 80123b6:	9400      	str	r4, [sp, #0]
 80123b8:	2310      	movs	r3, #16
 80123ba:	693a      	ldr	r2, [r7, #16]
 80123bc:	4631      	mov	r1, r6
 80123be:	6978      	ldr	r0, [r7, #20]
 80123c0:	f7fe fc2e 	bl	8010c20 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 80123c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123c6:	685a      	ldr	r2, [r3, #4]
 80123c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ca:	611a      	str	r2, [r3, #16]
 80123cc:	e06e      	b.n	80124ac <mg_tcpip_poll+0x484>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80123ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d117      	bne.n	8012408 <mg_tcpip_poll+0x3e0>
        mg_error(c, "Connection timeout");
 80123d8:	490a      	ldr	r1, [pc, #40]	@ (8012404 <mg_tcpip_poll+0x3dc>)
 80123da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80123dc:	f7f6 fc4e 	bl	8008c7c <mg_error>
 80123e0:	e064      	b.n	80124ac <mg_tcpip_poll+0x484>
 80123e2:	bf00      	nop
 80123e4:	24000258 	.word	0x24000258
 80123e8:	0802db40 	.word	0x0802db40
 80123ec:	08029e1c 	.word	0x08029e1c
 80123f0:	0802b33c 	.word	0x0802b33c
 80123f4:	001b7740 	.word	0x001b7740
 80123f8:	0802d558 	.word	0x0802d558
 80123fc:	0802b34c 	.word	0x0802b34c
 8012400:	0802b358 	.word	0x0802b358
 8012404:	0802b368 	.word	0x0802b368
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8012408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801240e:	2b04      	cmp	r3, #4
 8012410:	d107      	bne.n	8012422 <mg_tcpip_poll+0x3fa>
        c->is_closing = 1;
 8012412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012414:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8012418:	f043 0320 	orr.w	r3, r3, #32
 801241c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 8012420:	e04c      	b.n	80124bc <mg_tcpip_poll+0x494>
      } else {
        if (s->tmiss++ > 2) {
 8012422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012424:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012428:	1c5a      	adds	r2, r3, #1
 801242a:	b2d1      	uxtb	r1, r2
 801242c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801242e:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 8012432:	2b02      	cmp	r3, #2
 8012434:	d904      	bls.n	8012440 <mg_tcpip_poll+0x418>
          mg_error(c, "keepalive");
 8012436:	4927      	ldr	r1, [pc, #156]	@ (80124d4 <mg_tcpip_poll+0x4ac>)
 8012438:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801243a:	f7f6 fc1f 	bl	8008c7c <mg_error>
 801243e:	e035      	b.n	80124ac <mg_tcpip_poll+0x484>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8012440:	4b25      	ldr	r3, [pc, #148]	@ (80124d8 <mg_tcpip_poll+0x4b0>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b03      	cmp	r3, #3
 8012446:	dd0c      	ble.n	8012462 <mg_tcpip_poll+0x43a>
 8012448:	4b24      	ldr	r3, [pc, #144]	@ (80124dc <mg_tcpip_poll+0x4b4>)
 801244a:	f241 4252 	movw	r2, #5202	@ 0x1452
 801244e:	4924      	ldr	r1, [pc, #144]	@ (80124e0 <mg_tcpip_poll+0x4b8>)
 8012450:	2004      	movs	r0, #4
 8012452:	f7fc fa8b 	bl	800e96c <mg_log_prefix>
 8012456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801245a:	4619      	mov	r1, r3
 801245c:	4821      	ldr	r0, [pc, #132]	@ (80124e4 <mg_tcpip_poll+0x4bc>)
 801245e:	f7fc fad5 	bl	800ea0c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8012462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012464:	f103 061a 	add.w	r6, r3, #26
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	613b      	str	r3, [r7, #16]
 801246c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801246e:	8b1c      	ldrh	r4, [r3, #24]
 8012470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012472:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8012474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012476:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8012478:	3b01      	subs	r3, #1
 801247a:	4618      	mov	r0, r3
 801247c:	f00f fd27 	bl	8021ece <mg_ntohl>
 8012480:	6078      	str	r0, [r7, #4]
 8012482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	4618      	mov	r0, r3
 8012488:	f00f fd21 	bl	8021ece <mg_ntohl>
 801248c:	4603      	mov	r3, r0
 801248e:	2200      	movs	r2, #0
 8012490:	9205      	str	r2, [sp, #20]
 8012492:	2200      	movs	r2, #0
 8012494:	9204      	str	r2, [sp, #16]
 8012496:	9303      	str	r3, [sp, #12]
 8012498:	6879      	ldr	r1, [r7, #4]
 801249a:	9102      	str	r1, [sp, #8]
 801249c:	9501      	str	r5, [sp, #4]
 801249e:	9400      	str	r4, [sp, #0]
 80124a0:	2310      	movs	r3, #16
 80124a2:	693a      	ldr	r2, [r7, #16]
 80124a4:	4631      	mov	r1, r6
 80124a6:	6978      	ldr	r0, [r7, #20]
 80124a8:	f7fe fbba 	bl	8010c20 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 80124ac:	2100      	movs	r1, #0
 80124ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80124b0:	f7fd f966 	bl	800f780 <settmout>
 80124b4:	e002      	b.n	80124bc <mg_tcpip_poll+0x494>
      continue;
 80124b6:	bf00      	nop
 80124b8:	e000      	b.n	80124bc <mg_tcpip_poll+0x494>
        continue;
 80124ba:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80124bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80124c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	f47f aef2 	bne.w	80122ae <mg_tcpip_poll+0x286>
 80124ca:	e000      	b.n	80124ce <mg_tcpip_poll+0x4a6>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80124cc:	bf00      	nop
    }
  }
}
 80124ce:	373c      	adds	r7, #60	@ 0x3c
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d4:	0802b37c 	.word	0x0802b37c
 80124d8:	24000258 	.word	0x24000258
 80124dc:	0802db40 	.word	0x0802db40
 80124e0:	08029e1c 	.word	0x08029e1c
 80124e4:	0802b388 	.word	0x0802b388

080124e8 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	3334      	adds	r3, #52	@ 0x34
 80124f8:	f107 0114 	add.w	r1, r7, #20
 80124fc:	68ba      	ldr	r2, [r7, #8]
 80124fe:	4618      	mov	r0, r3
 8012500:	f001 f922 	bl	8013748 <mg_queue_book>
 8012504:	4602      	mov	r2, r0
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	4293      	cmp	r3, r2
 801250a:	d811      	bhi.n	8012530 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	68f9      	ldr	r1, [r7, #12]
 8012512:	4618      	mov	r0, r3
 8012514:	f015 fa75 	bl	8027a02 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	3334      	adds	r3, #52	@ 0x34
 801251c:	68b9      	ldr	r1, [r7, #8]
 801251e:	4618      	mov	r0, r3
 8012520:	f001 f9b0 	bl	8013884 <mg_queue_add>
    ifp->nrecv++;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 801252e:	e004      	b.n	801253a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012534:	1c5a      	adds	r2, r3, #1
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801253a:	bf00      	nop
 801253c:	3718      	adds	r7, #24
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d12d      	bne.n	80125b2 <mg_tcpip_init+0x6e>
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	785b      	ldrb	r3, [r3, #1]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d129      	bne.n	80125b2 <mg_tcpip_init+0x6e>
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	789b      	ldrb	r3, [r3, #2]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d125      	bne.n	80125b2 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801256a:	2b00      	cmp	r3, #0
 801256c:	d121      	bne.n	80125b2 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	791b      	ldrb	r3, [r3, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d11d      	bne.n	80125b2 <mg_tcpip_init+0x6e>
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	795b      	ldrb	r3, [r3, #5]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d119      	bne.n	80125b2 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	2202      	movs	r2, #2
 8012582:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	3301      	adds	r3, #1
 8012588:	2105      	movs	r1, #5
 801258a:	4618      	mov	r0, r3
 801258c:	f7ee fab2 	bl	8000af4 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8012590:	4b59      	ldr	r3, [pc, #356]	@ (80126f8 <mg_tcpip_init+0x1b4>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	2b01      	cmp	r3, #1
 8012596:	dd0c      	ble.n	80125b2 <mg_tcpip_init+0x6e>
 8012598:	4b58      	ldr	r3, [pc, #352]	@ (80126fc <mg_tcpip_init+0x1b8>)
 801259a:	f241 4271 	movw	r2, #5233	@ 0x1471
 801259e:	4958      	ldr	r1, [pc, #352]	@ (8012700 <mg_tcpip_init+0x1bc>)
 80125a0:	2002      	movs	r0, #2
 80125a2:	f7fc f9e3 	bl	800e96c <mg_log_prefix>
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	461a      	mov	r2, r3
 80125aa:	4956      	ldr	r1, [pc, #344]	@ (8012704 <mg_tcpip_init+0x1c0>)
 80125ac:	4856      	ldr	r0, [pc, #344]	@ (8012708 <mg_tcpip_init+0x1c4>)
 80125ae:	f7fc fa2d 	bl	800ea0c <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d106      	bne.n	80125ca <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	3344      	adds	r3, #68	@ 0x44
 80125c0:	2204      	movs	r2, #4
 80125c2:	4952      	ldr	r1, [pc, #328]	@ (801270c <mg_tcpip_init+0x1c8>)
 80125c4:	4618      	mov	r0, r3
 80125c6:	f015 fa1c 	bl	8027a02 <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	2200      	movs	r2, #0
 80125ce:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d019      	beq.n	8012610 <mg_tcpip_init+0xcc>
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	6838      	ldr	r0, [r7, #0]
 80125e4:	4798      	blx	r3
 80125e6:	4603      	mov	r3, r0
 80125e8:	f083 0301 	eor.w	r3, r3, #1
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00e      	beq.n	8012610 <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 80125f2:	4b41      	ldr	r3, [pc, #260]	@ (80126f8 <mg_tcpip_init+0x1b4>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	dd7a      	ble.n	80126f0 <mg_tcpip_init+0x1ac>
 80125fa:	4b40      	ldr	r3, [pc, #256]	@ (80126fc <mg_tcpip_init+0x1b8>)
 80125fc:	f241 427b 	movw	r2, #5243	@ 0x147b
 8012600:	493f      	ldr	r1, [pc, #252]	@ (8012700 <mg_tcpip_init+0x1bc>)
 8012602:	2001      	movs	r0, #1
 8012604:	f7fc f9b2 	bl	800e96c <mg_log_prefix>
 8012608:	4841      	ldr	r0, [pc, #260]	@ (8012710 <mg_tcpip_init+0x1cc>)
 801260a:	f7fc f9ff 	bl	800ea0c <mg_log>
 801260e:	e06f      	b.n	80126f0 <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 8012610:	f240 6304 	movw	r3, #1540	@ 0x604
 8012614:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8012616:	68f9      	ldr	r1, [r7, #12]
 8012618:	2001      	movs	r0, #1
 801261a:	f013 fa0b 	bl	8025a34 <calloc>
 801261e:	4603      	mov	r3, r0
 8012620:	461a      	mov	r2, r3
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	615a      	str	r2, [r3, #20]
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012630:	2b00      	cmp	r3, #0
 8012632:	d10a      	bne.n	801264a <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <mg_tcpip_init+0xfe>
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	e001      	b.n	8012646 <mg_tcpip_init+0x102>
 8012642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012646:	683a      	ldr	r2, [r7, #0]
 8012648:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801264e:	4619      	mov	r1, r3
 8012650:	2001      	movs	r0, #1
 8012652:	f013 f9ef 	bl	8025a34 <calloc>
 8012656:	4603      	mov	r3, r0
 8012658:	461a      	mov	r2, r3
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 801265e:	f7ee fa77 	bl	8000b50 <mg_millis>
 8012662:	4602      	mov	r2, r0
 8012664:	460b      	mov	r3, r1
 8012666:	6839      	ldr	r1, [r7, #0]
 8012668:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	683a      	ldr	r2, [r7, #0]
 8012670:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 801267e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2238      	movs	r2, #56	@ 0x38
 8012686:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	689b      	ldr	r3, [r3, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d102      	bne.n	8012696 <mg_tcpip_init+0x152>
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	2201      	movs	r2, #1
 8012694:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	3352      	adds	r3, #82	@ 0x52
 801269a:	2206      	movs	r2, #6
 801269c:	21ff      	movs	r1, #255	@ 0xff
 801269e:	4618      	mov	r0, r3
 80126a0:	f015 f876 	bl	8027790 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	3370      	adds	r3, #112	@ 0x70
 80126a8:	2102      	movs	r1, #2
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7ee fa22 	bl	8000af4 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80126b6:	4b17      	ldr	r3, [pc, #92]	@ (8012714 <mg_tcpip_init+0x1d0>)
 80126b8:	4313      	orrs	r3, r2
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	695b      	ldr	r3, [r3, #20]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d003      	beq.n	80126d2 <mg_tcpip_init+0x18e>
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d10e      	bne.n	80126f0 <mg_tcpip_init+0x1ac>
 80126d2:	4b09      	ldr	r3, [pc, #36]	@ (80126f8 <mg_tcpip_init+0x1b4>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	dd0a      	ble.n	80126f0 <mg_tcpip_init+0x1ac>
 80126da:	4b08      	ldr	r3, [pc, #32]	@ (80126fc <mg_tcpip_init+0x1b8>)
 80126dc:	f241 428c 	movw	r2, #5260	@ 0x148c
 80126e0:	4907      	ldr	r1, [pc, #28]	@ (8012700 <mg_tcpip_init+0x1bc>)
 80126e2:	2001      	movs	r0, #1
 80126e4:	f7fc f942 	bl	800e96c <mg_log_prefix>
 80126e8:	480b      	ldr	r0, [pc, #44]	@ (8012718 <mg_tcpip_init+0x1d4>)
 80126ea:	f7fc f98f 	bl	800ea0c <mg_log>
  }
}
 80126ee:	e7ff      	b.n	80126f0 <mg_tcpip_init+0x1ac>
 80126f0:	bf00      	nop
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	24000258 	.word	0x24000258
 80126fc:	0802db50 	.word	0x0802db50
 8012700:	08029e1c 	.word	0x08029e1c
 8012704:	08013461 	.word	0x08013461
 8012708:	0802b398 	.word	0x0802b398
 801270c:	0802b3bc 	.word	0x0802b3bc
 8012710:	0802b3c0 	.word	0x0802b3c0
 8012714:	ffff8000 	.word	0xffff8000
 8012718:	0802add8 	.word	0x0802add8

0801271c <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 801271c:	b5b0      	push	{r4, r5, r7, lr}
 801271e:	b08c      	sub	sp, #48	@ 0x30
 8012720:	af06      	add	r7, sp, #24
 8012722:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	33b0      	adds	r3, #176	@ 0xb0
 8012728:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	8b1b      	ldrh	r3, [r3, #24]
 801272e:	4618      	mov	r0, r3
 8012730:	f00f fbb6 	bl	8021ea0 <mg_ntohs>
 8012734:	4603      	mov	r3, r0
 8012736:	4618      	mov	r0, r3
 8012738:	f00f fbc9 	bl	8021ece <mg_ntohl>
 801273c:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	331c      	adds	r3, #28
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	f103 041a 	add.w	r4, r3, #26
 8012752:	68fd      	ldr	r5, [r7, #12]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	8b1b      	ldrh	r3, [r3, #24]
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 801275c:	2100      	movs	r1, #0
 801275e:	9105      	str	r1, [sp, #20]
 8012760:	2100      	movs	r1, #0
 8012762:	9104      	str	r1, [sp, #16]
 8012764:	2100      	movs	r1, #0
 8012766:	9103      	str	r1, [sp, #12]
 8012768:	6939      	ldr	r1, [r7, #16]
 801276a:	9102      	str	r1, [sp, #8]
 801276c:	9201      	str	r2, [sp, #4]
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	2302      	movs	r3, #2
 8012772:	462a      	mov	r2, r5
 8012774:	4621      	mov	r1, r4
 8012776:	f7fe fa53 	bl	8010c20 <tx_tcp>
         NULL, 0);
}
 801277a:	bf00      	nop
 801277c:	3718      	adds	r7, #24
 801277e:	46bd      	mov	sp, r7
 8012780:	bdb0      	pop	{r4, r5, r7, pc}

08012782 <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 8012782:	b580      	push	{r7, lr}
 8012784:	b082      	sub	sp, #8
 8012786:	af00      	add	r7, sp, #0
 8012788:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	b2db      	uxtb	r3, r3
 8012796:	2b00      	cmp	r3, #0
 8012798:	d00c      	beq.n	80127b4 <mac_resolved+0x32>
    c->is_connecting = 0;
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80127a0:	f023 0320 	bic.w	r3, r3, #32
 80127a4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 80127a8:	2200      	movs	r2, #0
 80127aa:	2104      	movs	r1, #4
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7f6 fa45 	bl	8008c3c <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 80127b2:	e006      	b.n	80127c2 <mac_resolved+0x40>
    send_syn(c);
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7ff ffb1 	bl	801271c <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 80127ba:	2103      	movs	r1, #3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7fc ffdf 	bl	800f780 <settmout>
}
 80127c2:	bf00      	nop
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
	...

080127cc <ip4_mcastmac>:

static void ip4_mcastmac(uint8_t *mac, uint32_t *ip) {
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  uint8_t mcastp[3] = {0x01, 0x00, 0x5E};  // multicast group MAC
 80127d6:	4a13      	ldr	r2, [pc, #76]	@ (8012824 <ip4_mcastmac+0x58>)
 80127d8:	f107 030c 	add.w	r3, r7, #12
 80127dc:	6812      	ldr	r2, [r2, #0]
 80127de:	4611      	mov	r1, r2
 80127e0:	8019      	strh	r1, [r3, #0]
 80127e2:	3302      	adds	r3, #2
 80127e4:	0c12      	lsrs	r2, r2, #16
 80127e6:	701a      	strb	r2, [r3, #0]
  memcpy(mac, mcastp, 3);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	461a      	mov	r2, r3
 80127ec:	f107 030c 	add.w	r3, r7, #12
 80127f0:	8819      	ldrh	r1, [r3, #0]
 80127f2:	789b      	ldrb	r3, [r3, #2]
 80127f4:	8011      	strh	r1, [r2, #0]
 80127f6:	7093      	strb	r3, [r2, #2]
  memcpy(mac + 3, ((uint8_t *) ip) + 1, 3);  // 23 LSb
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	1cd8      	adds	r0, r3, #3
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	3301      	adds	r3, #1
 8012800:	2203      	movs	r2, #3
 8012802:	4619      	mov	r1, r3
 8012804:	f015 f8fd 	bl	8027a02 <memcpy>
  mac[3] &= 0x7F;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3303      	adds	r3, #3
 801280c:	781a      	ldrb	r2, [r3, #0]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	3303      	adds	r3, #3
 8012812:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012816:	b2d2      	uxtb	r2, r2
 8012818:	701a      	strb	r2, [r3, #0]
}
 801281a:	bf00      	nop
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	0802b3d4 	.word	0x0802b3d4

08012828 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8012828:	b580      	push	{r7, lr}
 801282a:	b08a      	sub	sp, #40	@ 0x28
 801282c:	af02      	add	r7, sp, #8
 801282e:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012836:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	331c      	adds	r3, #28
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012846:	f023 0308 	bic.w	r3, r3, #8
 801284a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8012854:	b21b      	sxth	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	db04      	blt.n	8012864 <mg_connect_resolved+0x3c>
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8012860:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	3308      	adds	r3, #8
 8012868:	69fa      	ldr	r2, [r7, #28]
 801286a:	3208      	adds	r2, #8
 801286c:	6812      	ldr	r2, [r2, #0]
 801286e:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8012870:	69fb      	ldr	r3, [r7, #28]
 8012872:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8012876:	1c5a      	adds	r2, r3, #1
 8012878:	b291      	uxth	r1, r2
 801287a:	69fa      	ldr	r2, [r7, #28]
 801287c:	f8a2 1070 	strh.w	r1, [r2, #112]	@ 0x70
 8012880:	4618      	mov	r0, r3
 8012882:	f00f fb0d 	bl	8021ea0 <mg_ntohs>
 8012886:	4603      	mov	r3, r0
 8012888:	461a      	mov	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 801288e:	4b54      	ldr	r3, [pc, #336]	@ (80129e0 <mg_connect_resolved+0x1b8>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b02      	cmp	r3, #2
 8012894:	dd15      	ble.n	80128c2 <mg_connect_resolved+0x9a>
 8012896:	4b53      	ldr	r3, [pc, #332]	@ (80129e4 <mg_connect_resolved+0x1bc>)
 8012898:	f241 42b7 	movw	r2, #5303	@ 0x14b7
 801289c:	4952      	ldr	r1, [pc, #328]	@ (80129e8 <mg_connect_resolved+0x1c0>)
 801289e:	2003      	movs	r0, #3
 80128a0:	f7fc f864 	bl	800e96c <mg_log_prefix>
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f103 0208 	add.w	r2, r3, #8
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	331c      	adds	r3, #28
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	4b4d      	ldr	r3, [pc, #308]	@ (80129ec <mg_connect_resolved+0x1c4>)
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	4613      	mov	r3, r2
 80128ba:	4a4c      	ldr	r2, [pc, #304]	@ (80129ec <mg_connect_resolved+0x1c4>)
 80128bc:	484c      	ldr	r0, [pc, #304]	@ (80129f0 <mg_connect_resolved+0x1c8>)
 80128be:	f7fc f8a5 	bl	800ea0c <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 80128c2:	2200      	movs	r2, #0
 80128c4:	2103      	movs	r1, #3
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7f6 f9b8 	bl	8008c3c <mg_call>
  c->is_connecting = 1;
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80128d2:	f043 0320 	orr.w	r3, r3, #32
 80128d6:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80128e0:	f003 0301 	and.w	r3, r3, #1
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d01a      	beq.n	8012920 <mg_connect_resolved+0xf8>
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128f0:	d008      	beq.n	8012904 <mg_connect_resolved+0xdc>
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	689a      	ldr	r2, [r3, #8]
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	43db      	mvns	r3, r3
 80128fc:	431a      	orrs	r2, r3
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	429a      	cmp	r2, r3
 8012902:	d10d      	bne.n	8012920 <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	33b0      	adds	r3, #176	@ 0xb0
 8012908:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	331a      	adds	r3, #26
 801290e:	2206      	movs	r2, #6
 8012910:	21ff      	movs	r1, #255	@ 0xff
 8012912:	4618      	mov	r0, r3
 8012914:	f014 ff3c 	bl	8027790 <memset>
    mac_resolved(c);
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f7ff ff32 	bl	8012782 <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 801291e:	e05a      	b.n	80129d6 <mg_connect_resolved+0x1ae>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	689b      	ldr	r3, [r3, #8]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d030      	beq.n	801298a <mg_connect_resolved+0x162>
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	689a      	ldr	r2, [r3, #8]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	405a      	eors	r2, r3
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	68db      	ldr	r3, [r3, #12]
 8012934:	4013      	ands	r3, r2
 8012936:	2b00      	cmp	r3, #0
 8012938:	d127      	bne.n	801298a <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	691a      	ldr	r2, [r3, #16]
 801293e:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8012940:	429a      	cmp	r2, r3
 8012942:	d022      	beq.n	801298a <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8012944:	4b26      	ldr	r3, [pc, #152]	@ (80129e0 <mg_connect_resolved+0x1b8>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b02      	cmp	r3, #2
 801294a:	dd0c      	ble.n	8012966 <mg_connect_resolved+0x13e>
 801294c:	4b25      	ldr	r3, [pc, #148]	@ (80129e4 <mg_connect_resolved+0x1bc>)
 801294e:	f241 42c2 	movw	r2, #5314	@ 0x14c2
 8012952:	4925      	ldr	r1, [pc, #148]	@ (80129e8 <mg_connect_resolved+0x1c0>)
 8012954:	2003      	movs	r0, #3
 8012956:	f7fc f809 	bl	800e96c <mg_log_prefix>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801295e:	4619      	mov	r1, r3
 8012960:	4824      	ldr	r0, [pc, #144]	@ (80129f4 <mg_connect_resolved+0x1cc>)
 8012962:	f7fc f853 	bl	800ea0c <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	4619      	mov	r1, r3
 801296c:	69f8      	ldr	r0, [r7, #28]
 801296e:	f7fc ff87 	bl	800f880 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 8012972:	2102      	movs	r1, #2
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7fc ff03 	bl	800f780 <settmout>
    c->is_arplooking = 1;
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012980:	f043 0310 	orr.w	r3, r3, #16
 8012984:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8012988:	e025      	b.n	80129d6 <mg_connect_resolved+0x1ae>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 801298a:	f107 030c 	add.w	r3, r7, #12
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8012994:	2be0      	cmp	r3, #224	@ 0xe0
 8012996:	d10e      	bne.n	80129b6 <mg_connect_resolved+0x18e>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	33b0      	adds	r3, #176	@ 0xb0
 801299c:	613b      	str	r3, [r7, #16]
    ip4_mcastmac(s->mac, &rem_ip);                       // multicast group
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	331a      	adds	r3, #26
 80129a2:	f107 020c 	add.w	r2, r7, #12
 80129a6:	4611      	mov	r1, r2
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7ff ff0f 	bl	80127cc <ip4_mcastmac>
    mac_resolved(c);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f7ff fee7 	bl	8012782 <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 80129b4:	e00f      	b.n	80129d6 <mg_connect_resolved+0x1ae>
    struct connstate *s = (struct connstate *) (c + 1);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	33b0      	adds	r3, #176	@ 0xb0
 80129ba:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	f103 001a 	add.w	r0, r3, #26
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	3352      	adds	r3, #82	@ 0x52
 80129c6:	2206      	movs	r2, #6
 80129c8:	4619      	mov	r1, r3
 80129ca:	f015 f81a 	bl	8027a02 <memcpy>
    mac_resolved(c);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7ff fed7 	bl	8012782 <mac_resolved>
}
 80129d4:	e7ff      	b.n	80129d6 <mg_connect_resolved+0x1ae>
 80129d6:	bf00      	nop
 80129d8:	3720      	adds	r7, #32
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	24000258 	.word	0x24000258
 80129e4:	0802db60 	.word	0x0802db60
 80129e8:	08029e1c 	.word	0x08029e1c
 80129ec:	08013415 	.word	0x08013415
 80129f0:	0802b3d8 	.word	0x0802b3d8
 80129f4:	0802b3e8 	.word	0x0802b3e8

080129f8 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b084      	sub	sp, #16
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8012a02:	6838      	ldr	r0, [r7, #0]
 8012a04:	f00f f908 	bl	8021c18 <mg_url_port>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f00f fa48 	bl	8021ea0 <mg_ntohs>
 8012a10:	4603      	mov	r3, r0
 8012a12:	461a      	mov	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 8012a18:	f107 0308 	add.w	r3, r7, #8
 8012a1c:	6839      	ldr	r1, [r7, #0]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f00f f8c7 	bl	8021bb2 <mg_url_host>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3308      	adds	r3, #8
 8012a28:	461a      	mov	r2, r3
 8012a2a:	f107 0308 	add.w	r3, r7, #8
 8012a2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a32:	f7fc fb4a 	bl	800f0ca <mg_aton>
 8012a36:	4603      	mov	r3, r0
 8012a38:	f083 0301 	eor.w	r3, r3, #1
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d010      	beq.n	8012a64 <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 8012a42:	4b0b      	ldr	r3, [pc, #44]	@ (8012a70 <mg_open_listener+0x78>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	dd0a      	ble.n	8012a60 <mg_open_listener+0x68>
 8012a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8012a74 <mg_open_listener+0x7c>)
 8012a4c:	f241 42d4 	movw	r2, #5332	@ 0x14d4
 8012a50:	4909      	ldr	r1, [pc, #36]	@ (8012a78 <mg_open_listener+0x80>)
 8012a52:	2001      	movs	r0, #1
 8012a54:	f7fb ff8a 	bl	800e96c <mg_log_prefix>
 8012a58:	6839      	ldr	r1, [r7, #0]
 8012a5a:	4808      	ldr	r0, [pc, #32]	@ (8012a7c <mg_open_listener+0x84>)
 8012a5c:	f7fb ffd6 	bl	800ea0c <mg_log>
    return false;
 8012a60:	2300      	movs	r3, #0
 8012a62:	e000      	b.n	8012a66 <mg_open_listener+0x6e>
  }
  return true;
 8012a64:	2301      	movs	r3, #1
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3710      	adds	r7, #16
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	24000258 	.word	0x24000258
 8012a74:	0802db74 	.word	0x0802db74
 8012a78:	08029e1c 	.word	0x08029e1c
 8012a7c:	0802b3fc 	.word	0x0802b3fc

08012a80 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a92:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d009      	beq.n	8012aac <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f008 fca8 	bl	801b3f8 <mg_tls_send>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	e008      	b.n	8012abe <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7fe fb50 	bl	801115c <mg_io_send>
 8012abc:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8012abe:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac6:	d104      	bne.n	8012ad2 <write_conn+0x52>
    mg_error(c, "tx err");
 8012ac8:	490c      	ldr	r1, [pc, #48]	@ (8012afc <write_conn+0x7c>)
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f7f6 f8d6 	bl	8008c7c <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8012ad0:	e010      	b.n	8012af4 <write_conn+0x74>
  } else if (len > 0) {
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	dd0d      	ble.n	8012af4 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	3348      	adds	r3, #72	@ 0x48
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	2100      	movs	r1, #0
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7fa ff2b 	bl	800d93c <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8012ae6:	f107 030c 	add.w	r3, r7, #12
 8012aea:	461a      	mov	r2, r3
 8012aec:	2108      	movs	r1, #8
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7f6 f8a4 	bl	8008c3c <mg_call>
}
 8012af4:	bf00      	nop
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	0802b418 	.word	0x0802b418

08012b00 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8012b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b04:	b08c      	sub	sp, #48	@ 0x30
 8012b06:	af06      	add	r7, sp, #24
 8012b08:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	33b0      	adds	r3, #176	@ 0xb0
 8012b0e:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d13e      	bne.n	8012b9e <init_closure+0x9e>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012b26:	f003 0301 	and.w	r3, r3, #1
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d136      	bne.n	8012b9e <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012b36:	f003 0320 	and.w	r3, r3, #32
 8012b3a:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d12e      	bne.n	8012b9e <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	331c      	adds	r3, #28
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	f103 081a 	add.w	r8, r3, #26
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	60bb      	str	r3, [r7, #8]
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	8b1c      	ldrh	r4, [r3, #24]
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f00f f9b2 	bl	8021ece <mg_ntohl>
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f00f f9ac 	bl	8021ece <mg_ntohl>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2200      	movs	r2, #0
 8012b7a:	9205      	str	r2, [sp, #20]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	9204      	str	r2, [sp, #16]
 8012b80:	9303      	str	r3, [sp, #12]
 8012b82:	6879      	ldr	r1, [r7, #4]
 8012b84:	9102      	str	r1, [sp, #8]
 8012b86:	9501      	str	r5, [sp, #4]
 8012b88:	9400      	str	r4, [sp, #0]
 8012b8a:	2311      	movs	r3, #17
 8012b8c:	68ba      	ldr	r2, [r7, #8]
 8012b8e:	4641      	mov	r1, r8
 8012b90:	4630      	mov	r0, r6
 8012b92:	f7fe f845 	bl	8010c20 <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8012b96:	2104      	movs	r1, #4
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f7fc fdf1 	bl	800f780 <settmout>
  }
}
 8012b9e:	bf00      	nop
 8012ba0:	3718      	adds	r7, #24
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ba8 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	33b0      	adds	r3, #176	@ 0xb0
 8012bb4:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	3324      	adds	r3, #36	@ 0x24
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fa ff09 	bl	800d9d2 <mg_iobuf_free>
  mg_close_conn(c);
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7fc fae9 	bl	800f198 <mg_close_conn>
}
 8012bc6:	bf00      	nop
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}

08012bce <can_write>:

static bool can_write(struct mg_connection *c) {
 8012bce:	b480      	push	{r7}
 8012bd0:	b083      	sub	sp, #12
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012bdc:	f003 0320 	and.w	r3, r3, #32
 8012be0:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d11d      	bne.n	8012c22 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012bec:	f003 0308 	and.w	r3, r3, #8
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d115      	bne.n	8012c22 <can_write+0x54>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d011      	beq.n	8012c22 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012c08:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d109      	bne.n	8012c22 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c14:	f003 0310 	and.w	r3, r3, #16
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d101      	bne.n	8012c22 <can_write+0x54>
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e000      	b.n	8012c24 <can_write+0x56>
 8012c22:	2300      	movs	r3, #0
 8012c24:	f003 0301 	and.w	r3, r3, #1
 8012c28:	b2db      	uxtb	r3, r3
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	370c      	adds	r7, #12
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c34:	4770      	bx	lr
	...

08012c38 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8012c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c3c:	b091      	sub	sp, #68	@ 0x44
 8012c3e:	af06      	add	r7, sp, #24
 8012c40:	60f8      	str	r0, [r7, #12]
 8012c42:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8012c44:	f7ed ff84 	bl	8000b50 <mg_millis>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012c56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012c5a:	4608      	mov	r0, r1
 8012c5c:	f004 fbc2 	bl	80173e4 <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	f000 810c 	beq.w	8012e82 <mg_mgr_poll+0x24a>
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	f000 8106 	beq.w	8012e82 <mg_mgr_poll+0x24a>
  mg_tcpip_poll(mgr->ifp, now);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012c7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012c7e:	4608      	mov	r0, r1
 8012c80:	f7ff f9d2 	bl	8012028 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c8a:	e0f5      	b.n	8012e78 <mg_mgr_poll+0x240>
    tmp = c->next;
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 8012c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c94:	33b0      	adds	r3, #176	@ 0xb0
 8012c96:	61fb      	str	r3, [r7, #28]
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8012c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012c9e:	f003 0308 	and.w	r3, r3, #8
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d119      	bne.n	8012cdc <mg_mgr_poll+0xa4>
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012caa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012cae:	f003 0310 	and.w	r3, r3, #16
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d111      	bne.n	8012cdc <mg_mgr_poll+0xa4>
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cba:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012cbe:	f003 0301 	and.w	r3, r3, #1
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d109      	bne.n	8012cdc <mg_mgr_poll+0xa4>
                  !c->is_connecting;
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cca:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012cce:	f003 0320 	and.w	r3, r3, #32
 8012cd2:	b2db      	uxtb	r3, r3
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d101      	bne.n	8012cdc <mg_mgr_poll+0xa4>
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e000      	b.n	8012cde <mg_mgr_poll+0xa6>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	76fb      	strb	r3, [r7, #27]
 8012ce0:	7efb      	ldrb	r3, [r7, #27]
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	76fb      	strb	r3, [r7, #27]
    mg_call(c, MG_EV_POLL, &now);
 8012ce8:	f107 0310 	add.w	r3, r7, #16
 8012cec:	461a      	mov	r2, r3
 8012cee:	2102      	movs	r1, #2
 8012cf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cf2:	f7f5 ffa3 	bl	8008c3c <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 8012cf6:	4b65      	ldr	r3, [pc, #404]	@ (8012e8c <mg_mgr_poll+0x254>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	2b03      	cmp	r3, #3
 8012cfc:	dd55      	ble.n	8012daa <mg_mgr_poll+0x172>
 8012cfe:	4b64      	ldr	r3, [pc, #400]	@ (8012e90 <mg_mgr_poll+0x258>)
 8012d00:	f241 5208 	movw	r2, #5384	@ 0x1508
 8012d04:	4963      	ldr	r1, [pc, #396]	@ (8012e94 <mg_mgr_poll+0x25c>)
 8012d06:	2004      	movs	r0, #4
 8012d08:	f7fb fe30 	bl	800e96c <mg_log_prefix>
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d10:	607b      	str	r3, [r7, #4]
 8012d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d14:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d002      	beq.n	8012d28 <mg_mgr_poll+0xf0>
 8012d22:	f04f 0854 	mov.w	r8, #84	@ 0x54
 8012d26:	e001      	b.n	8012d2c <mg_mgr_poll+0xf4>
 8012d28:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d2e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012d32:	f003 0320 	and.w	r3, r3, #32
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d002      	beq.n	8012d42 <mg_mgr_poll+0x10a>
 8012d3c:	f04f 0943 	mov.w	r9, #67	@ 0x43
 8012d40:	e001      	b.n	8012d46 <mg_mgr_poll+0x10e>
 8012d42:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8012d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d48:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012d4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d001      	beq.n	8012d5a <mg_mgr_poll+0x122>
 8012d56:	2448      	movs	r4, #72	@ 0x48
 8012d58:	e000      	b.n	8012d5c <mg_mgr_poll+0x124>
 8012d5a:	2468      	movs	r4, #104	@ 0x68
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012d62:	f003 0308 	and.w	r3, r3, #8
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d001      	beq.n	8012d70 <mg_mgr_poll+0x138>
 8012d6c:	2552      	movs	r5, #82	@ 0x52
 8012d6e:	e000      	b.n	8012d72 <mg_mgr_poll+0x13a>
 8012d70:	2572      	movs	r5, #114	@ 0x72
 8012d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012d78:	f003 0320 	and.w	r3, r3, #32
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <mg_mgr_poll+0x14e>
 8012d82:	2643      	movs	r6, #67	@ 0x43
 8012d84:	e000      	b.n	8012d88 <mg_mgr_poll+0x150>
 8012d86:	2663      	movs	r6, #99	@ 0x63
 8012d88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d8a:	f008 fc2d 	bl	801b5e8 <mg_tls_pending>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d94:	9304      	str	r3, [sp, #16]
 8012d96:	9203      	str	r2, [sp, #12]
 8012d98:	9602      	str	r6, [sp, #8]
 8012d9a:	9501      	str	r5, [sp, #4]
 8012d9c:	9400      	str	r4, [sp, #0]
 8012d9e:	464b      	mov	r3, r9
 8012da0:	4642      	mov	r2, r8
 8012da2:	6879      	ldr	r1, [r7, #4]
 8012da4:	483c      	ldr	r0, [pc, #240]	@ (8012e98 <mg_mgr_poll+0x260>)
 8012da6:	f7fb fe31 	bl	800ea0c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 8012daa:	7efb      	ldrb	r3, [r7, #27]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d00c      	beq.n	8012dca <mg_mgr_poll+0x192>
 8012db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d105      	bne.n	8012dc4 <mg_mgr_poll+0x18c>
 8012db8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dba:	f008 fc15 	bl	801b5e8 <mg_tls_pending>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d002      	beq.n	8012dca <mg_mgr_poll+0x192>
      handle_tls_recv(c);
 8012dc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dc6:	f7fe fa4b 	bl	8011260 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8012dca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dcc:	f7ff feff 	bl	8012bce <can_write>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d002      	beq.n	8012ddc <mg_mgr_poll+0x1a4>
 8012dd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012dd8:	f7ff fe52 	bl	8012a80 <write_conn>
    if (is_tls && c->tls && c->send.len == 0) mg_tls_flush(c);
 8012ddc:	7efb      	ldrb	r3, [r7, #27]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d00b      	beq.n	8012dfa <mg_mgr_poll+0x1c2>
 8012de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d006      	beq.n	8012dfa <mg_mgr_poll+0x1c2>
 8012dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d102      	bne.n	8012dfa <mg_mgr_poll+0x1c2>
 8012df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012df6:	f008 fc0c 	bl	801b612 <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dfc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012e00:	f003 0310 	and.w	r3, r3, #16
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d00b      	beq.n	8012e22 <mg_mgr_poll+0x1ea>
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d107      	bne.n	8012e22 <mg_mgr_poll+0x1ea>
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e18:	2b04      	cmp	r3, #4
 8012e1a:	d002      	beq.n	8012e22 <mg_mgr_poll+0x1ea>
      init_closure(c);
 8012e1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e1e:	f7ff fe6f 	bl	8012b00 <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d018      	beq.n	8012e5e <mg_mgr_poll+0x226>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8012e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e2e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e36:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d009      	beq.n	8012e50 <mg_mgr_poll+0x218>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d10c      	bne.n	8012e5e <mg_mgr_poll+0x226>
 8012e44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e46:	f008 fbcf 	bl	801b5e8 <mg_tls_pending>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d106      	bne.n	8012e5e <mg_mgr_poll+0x226>
      c->is_closing = 1;
 8012e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e52:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8012e56:	f043 0320 	orr.w	r3, r3, #32
 8012e5a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 8012e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e60:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012e64:	f003 0320 	and.w	r3, r3, #32
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d002      	beq.n	8012e74 <mg_mgr_poll+0x23c>
 8012e6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e70:	f7ff fe9a 	bl	8012ba8 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8012e74:	6a3b      	ldr	r3, [r7, #32]
 8012e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f47f af06 	bne.w	8012c8c <mg_mgr_poll+0x54>
 8012e80:	e000      	b.n	8012e84 <mg_mgr_poll+0x24c>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8012e82:	bf00      	nop
  }
  (void) ms;
}
 8012e84:	372c      	adds	r7, #44	@ 0x2c
 8012e86:	46bd      	mov	sp, r7
 8012e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e8c:	24000258 	.word	0x24000258
 8012e90:	0802db88 	.word	0x0802db88
 8012e94:	08029e1c 	.word	0x08029e1c
 8012e98:	0802b420 	.word	0x0802b420

08012e9c <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8012e9c:	b5b0      	push	{r4, r5, r7, lr}
 8012e9e:	b08c      	sub	sp, #48	@ 0x30
 8012ea0:	af04      	add	r7, sp, #16
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eae:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	331c      	adds	r3, #28
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d004      	beq.n	8012ece <mg_send+0x32>
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012eca:	2b04      	cmp	r3, #4
 8012ecc:	d004      	beq.n	8012ed8 <mg_send+0x3c>
    mg_error(c, "net down");
 8012ece:	4934      	ldr	r1, [pc, #208]	@ (8012fa0 <mg_send+0x104>)
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f7f5 fed3 	bl	8008c7c <mg_error>
 8012ed6:	e05e      	b.n	8012f96 <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012ede:	f003 0301 	and.w	r3, r3, #1
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d01e      	beq.n	8012f26 <mg_send+0x8a>
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012eee:	f003 0310 	and.w	r3, r3, #16
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d107      	bne.n	8012f08 <mg_send+0x6c>
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012efe:	f003 0308 	and.w	r3, r3, #8
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d00e      	beq.n	8012f26 <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 8012f08:	4b26      	ldr	r3, [pc, #152]	@ (8012fa4 <mg_send+0x108>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b03      	cmp	r3, #3
 8012f0e:	dd42      	ble.n	8012f96 <mg_send+0xfa>
 8012f10:	4b25      	ldr	r3, [pc, #148]	@ (8012fa8 <mg_send+0x10c>)
 8012f12:	f241 5226 	movw	r2, #5414	@ 0x1526
 8012f16:	4925      	ldr	r1, [pc, #148]	@ (8012fac <mg_send+0x110>)
 8012f18:	2004      	movs	r0, #4
 8012f1a:	f7fb fd27 	bl	800e96c <mg_log_prefix>
 8012f1e:	4824      	ldr	r0, [pc, #144]	@ (8012fb0 <mg_send+0x114>)
 8012f20:	f7fb fd74 	bl	800ea0c <mg_log>
 8012f24:	e037      	b.n	8012f96 <mg_send+0xfa>
  } else if (c->is_udp) {
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	b2db      	uxtb	r3, r3
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d020      	beq.n	8012f78 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	33b0      	adds	r3, #176	@ 0xb0
 8012f3a:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8012f3c:	6879      	ldr	r1, [r7, #4]
 8012f3e:	68f8      	ldr	r0, [r7, #12]
 8012f40:	f7fe f87e 	bl	8011040 <trim_len>
 8012f44:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	f103 001a 	add.w	r0, r3, #26
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	689c      	ldr	r4, [r3, #8]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	8b1d      	ldrh	r5, [r3, #24]
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	68fa      	ldr	r2, [r7, #12]
 8012f58:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8012f5a:	6879      	ldr	r1, [r7, #4]
 8012f5c:	9103      	str	r1, [sp, #12]
 8012f5e:	68b9      	ldr	r1, [r7, #8]
 8012f60:	9102      	str	r1, [sp, #8]
 8012f62:	9201      	str	r2, [sp, #4]
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	462b      	mov	r3, r5
 8012f68:	4622      	mov	r2, r4
 8012f6a:	4601      	mov	r1, r0
 8012f6c:	69b8      	ldr	r0, [r7, #24]
 8012f6e:	f7fc fdf0 	bl	800fb52 <tx_udp>
    res = true;
 8012f72:	2301      	movs	r3, #1
 8012f74:	77fb      	strb	r3, [r7, #31]
 8012f76:	e00e      	b.n	8012f96 <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68ba      	ldr	r2, [r7, #8]
 8012f86:	f7fa fc87 	bl	800d898 <mg_iobuf_add>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	bf14      	ite	ne
 8012f90:	2301      	movne	r3, #1
 8012f92:	2300      	moveq	r3, #0
 8012f94:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8012f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3720      	adds	r7, #32
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8012fa0:	0802b43c 	.word	0x0802b43c
 8012fa4:	24000258 	.word	0x24000258
 8012fa8:	0802db94 	.word	0x0802db94
 8012fac:	08029e1c 	.word	0x08029e1c
 8012fb0:	0802b448 	.word	0x0802b448

08012fb4 <mg_ota_begin>:
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
  }
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
}

bool mg_ota_begin(size_t new_firmware_size) {
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  s_mg_flash_stm32h7.size = MG_REG(FLASH_SIZE_REG) * 1024;
 8012fbc:	4b06      	ldr	r3, [pc, #24]	@ (8012fd8 <mg_ota_begin+0x24>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	029b      	lsls	r3, r3, #10
 8012fc2:	4a06      	ldr	r2, [pc, #24]	@ (8012fdc <mg_ota_begin+0x28>)
 8012fc4:	6053      	str	r3, [r2, #4]
  if (IS_DUALCORE()) {
    // Using only the 1st bank (mapped to CM7)
    s_mg_flash_stm32h7.size /= 2;
  }
  return mg_ota_flash_begin(new_firmware_size, &s_mg_flash_stm32h7);
 8012fc6:	4905      	ldr	r1, [pc, #20]	@ (8012fdc <mg_ota_begin+0x28>)
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7f5 fe99 	bl	8008d00 <mg_ota_flash_begin>
 8012fce:	4603      	mov	r3, r0
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	1ff1e880 	.word	0x1ff1e880
 8012fdc:	24000268 	.word	0x24000268

08012fe0 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  return mg_ota_flash_write(buf, len, &s_mg_flash_stm32h7);
 8012fea:	4a05      	ldr	r2, [pc, #20]	@ (8013000 <mg_ota_write+0x20>)
 8012fec:	6839      	ldr	r1, [r7, #0]
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7f5 ff02 	bl	8008df8 <mg_ota_flash_write>
 8012ff4:	4603      	mov	r3, r0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	24000268 	.word	0x24000268

08013004 <mg_ota_end>:

bool mg_ota_end(void) {
 8013004:	b580      	push	{r7, lr}
 8013006:	af00      	add	r7, sp, #0
  if (mg_ota_flash_end(&s_mg_flash_stm32h7)) {
 8013008:	4825      	ldr	r0, [pc, #148]	@ (80130a0 <mg_ota_end+0x9c>)
 801300a:	f7f5 ffb9 	bl	8008f80 <mg_ota_flash_end>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d042      	beq.n	801309a <mg_ota_end+0x96>
    if (is_dualbank()) {
 8013014:	f016 fd10 	bl	8029a38 <__is_dualbank_veneer>
 8013018:	4603      	mov	r3, r0
 801301a:	2b00      	cmp	r3, #0
 801301c:	d003      	beq.n	8013026 <mg_ota_end+0x22>
      // Bank swap is deferred until reset, been executing in flash, reset
      *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 801301e:	4b21      	ldr	r3, [pc, #132]	@ (80130a4 <mg_ota_end+0xa0>)
 8013020:	4a21      	ldr	r2, [pc, #132]	@ (80130a8 <mg_ota_end+0xa4>)
 8013022:	601a      	str	r2, [r3, #0]
 8013024:	e039      	b.n	801309a <mg_ota_end+0x96>
    } else {
      // Swap partitions. Pray power does not go away
      MG_INFO(("Swapping partitions, size %u (%u sectors)",
 8013026:	4b21      	ldr	r3, [pc, #132]	@ (80130ac <mg_ota_end+0xa8>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2b01      	cmp	r3, #1
 801302c:	dd12      	ble.n	8013054 <mg_ota_end+0x50>
 801302e:	4b20      	ldr	r3, [pc, #128]	@ (80130b0 <mg_ota_end+0xac>)
 8013030:	f641 528d 	movw	r2, #7565	@ 0x1d8d
 8013034:	491f      	ldr	r1, [pc, #124]	@ (80130b4 <mg_ota_end+0xb0>)
 8013036:	2002      	movs	r0, #2
 8013038:	f7fb fc98 	bl	800e96c <mg_log_prefix>
 801303c:	4b18      	ldr	r3, [pc, #96]	@ (80130a0 <mg_ota_end+0x9c>)
 801303e:	6859      	ldr	r1, [r3, #4]
 8013040:	4b17      	ldr	r3, [pc, #92]	@ (80130a0 <mg_ota_end+0x9c>)
 8013042:	685a      	ldr	r2, [r3, #4]
 8013044:	4b16      	ldr	r3, [pc, #88]	@ (80130a0 <mg_ota_end+0x9c>)
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	fbb2 f3f3 	udiv	r3, r2, r3
 801304c:	461a      	mov	r2, r3
 801304e:	481a      	ldr	r0, [pc, #104]	@ (80130b8 <mg_ota_end+0xb4>)
 8013050:	f7fb fcdc 	bl	800ea0c <mg_log>
               s_mg_flash_stm32h7.size,
               s_mg_flash_stm32h7.size / s_mg_flash_stm32h7.secsz));
      MG_INFO(("Do NOT power off..."));
 8013054:	4b15      	ldr	r3, [pc, #84]	@ (80130ac <mg_ota_end+0xa8>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b01      	cmp	r3, #1
 801305a:	dd09      	ble.n	8013070 <mg_ota_end+0x6c>
 801305c:	4b14      	ldr	r3, [pc, #80]	@ (80130b0 <mg_ota_end+0xac>)
 801305e:	f641 5290 	movw	r2, #7568	@ 0x1d90
 8013062:	4914      	ldr	r1, [pc, #80]	@ (80130b4 <mg_ota_end+0xb0>)
 8013064:	2002      	movs	r0, #2
 8013066:	f7fb fc81 	bl	800e96c <mg_log_prefix>
 801306a:	4814      	ldr	r0, [pc, #80]	@ (80130bc <mg_ota_end+0xb8>)
 801306c:	f7fb fcce 	bl	800ea0c <mg_log>
      mg_log_level = MG_LL_NONE;
 8013070:	4b0e      	ldr	r3, [pc, #56]	@ (80130ac <mg_ota_end+0xa8>)
 8013072:	2200      	movs	r2, #0
 8013074:	601a      	str	r2, [r3, #0]
      s_flash_irq_disabled = true;
 8013076:	4b12      	ldr	r3, [pc, #72]	@ (80130c0 <mg_ota_end+0xbc>)
 8013078:	2201      	movs	r2, #1
 801307a:	701a      	strb	r2, [r3, #0]
      // Runs in RAM, will reset when finished
      single_bank_swap(
          (char *) s_mg_flash_stm32h7.start,
 801307c:	4b08      	ldr	r3, [pc, #32]	@ (80130a0 <mg_ota_end+0x9c>)
 801307e:	6818      	ldr	r0, [r3, #0]
          (char *) s_mg_flash_stm32h7.start + s_mg_flash_stm32h7.size / 2,
 8013080:	4b07      	ldr	r3, [pc, #28]	@ (80130a0 <mg_ota_end+0x9c>)
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	4b06      	ldr	r3, [pc, #24]	@ (80130a0 <mg_ota_end+0x9c>)
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	085b      	lsrs	r3, r3, #1
      single_bank_swap(
 801308a:	18d1      	adds	r1, r2, r3
          s_mg_flash_stm32h7.size / 2, s_mg_flash_stm32h7.secsz);
 801308c:	4b04      	ldr	r3, [pc, #16]	@ (80130a0 <mg_ota_end+0x9c>)
 801308e:	685b      	ldr	r3, [r3, #4]
      single_bank_swap(
 8013090:	085a      	lsrs	r2, r3, #1
 8013092:	4b03      	ldr	r3, [pc, #12]	@ (80130a0 <mg_ota_end+0x9c>)
 8013094:	689b      	ldr	r3, [r3, #8]
 8013096:	f016 fcd3 	bl	8029a40 <__single_bank_swap_veneer>
    }
  }
  return false;
 801309a:	2300      	movs	r3, #0
}
 801309c:	4618      	mov	r0, r3
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	24000268 	.word	0x24000268
 80130a4:	e000ed0c 	.word	0xe000ed0c
 80130a8:	05fa0004 	.word	0x05fa0004
 80130ac:	24000258 	.word	0x24000258
 80130b0:	0802dbc4 	.word	0x0802dbc4
 80130b4:	08029e1c 	.word	0x08029e1c
 80130b8:	0802b4f4 	.word	0x0802b4f4
 80130bc:	0802b520 	.word	0x0802b520
 80130c0:	24002364 	.word	0x24002364

080130c4 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b084      	sub	sp, #16
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	4603      	mov	r3, r0
 80130cc:	6039      	str	r1, [r7, #0]
 80130ce:	71fb      	strb	r3, [r7, #7]
 80130d0:	4613      	mov	r3, r2
 80130d2:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80130d8:	79bb      	ldrb	r3, [r7, #6]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d00d      	beq.n	80130fa <mg_pfn_iobuf_private+0x36>
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	689b      	ldr	r3, [r3, #8]
 80130e2:	1c9a      	adds	r2, r3, #2
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d906      	bls.n	80130fa <mg_pfn_iobuf_private+0x36>
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	689b      	ldr	r3, [r3, #8]
 80130f0:	3302      	adds	r3, #2
 80130f2:	4619      	mov	r1, r3
 80130f4:	68f8      	ldr	r0, [r7, #12]
 80130f6:	f7fa fb43 	bl	800d780 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	689b      	ldr	r3, [r3, #8]
 80130fe:	1c9a      	adds	r2, r3, #2
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	429a      	cmp	r2, r3
 8013106:	d811      	bhi.n	801312c <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	689b      	ldr	r3, [r3, #8]
 8013110:	1c58      	adds	r0, r3, #1
 8013112:	68f9      	ldr	r1, [r7, #12]
 8013114:	6088      	str	r0, [r1, #8]
 8013116:	4413      	add	r3, r2
 8013118:	79fa      	ldrb	r2, [r7, #7]
 801311a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	689b      	ldr	r3, [r3, #8]
 8013124:	4413      	add	r3, r2
 8013126:	2200      	movs	r2, #0
 8013128:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 801312a:	e00f      	b.n	801314c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	689a      	ldr	r2, [r3, #8]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	429a      	cmp	r2, r3
 8013136:	d209      	bcs.n	801314c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	689b      	ldr	r3, [r3, #8]
 8013140:	1c58      	adds	r0, r3, #1
 8013142:	68f9      	ldr	r1, [r7, #12]
 8013144:	6088      	str	r0, [r1, #8]
 8013146:	4413      	add	r3, r2
 8013148:	2200      	movs	r2, #0
 801314a:	701a      	strb	r2, [r3, #0]
}
 801314c:	bf00      	nop
 801314e:	3710      	adds	r7, #16
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}

08013154 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8013154:	b580      	push	{r7, lr}
 8013156:	b082      	sub	sp, #8
 8013158:	af00      	add	r7, sp, #0
 801315a:	4603      	mov	r3, r0
 801315c:	6039      	str	r1, [r7, #0]
 801315e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8013160:	79fb      	ldrb	r3, [r7, #7]
 8013162:	2200      	movs	r2, #0
 8013164:	6839      	ldr	r1, [r7, #0]
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff ffac 	bl	80130c4 <mg_pfn_iobuf_private>
}
 801316c:	bf00      	nop
 801316e:	3708      	adds	r7, #8
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	4603      	mov	r3, r0
 801317c:	6039      	str	r1, [r7, #0]
 801317e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8013180:	79fb      	ldrb	r3, [r7, #7]
 8013182:	2201      	movs	r2, #1
 8013184:	6839      	ldr	r1, [r7, #0]
 8013186:	4618      	mov	r0, r3
 8013188:	f7ff ff9c 	bl	80130c4 <mg_pfn_iobuf_private>
}
 801318c:	bf00      	nop
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8013194:	b580      	push	{r7, lr}
 8013196:	b08a      	sub	sp, #40	@ 0x28
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
 80131a0:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	617b      	str	r3, [r7, #20]
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	61bb      	str	r3, [r7, #24]
 80131aa:	2300      	movs	r3, #0
 80131ac:	61fb      	str	r3, [r7, #28]
 80131ae:	2300      	movs	r3, #0
 80131b0:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 80131b2:	f107 0114 	add.w	r1, r7, #20
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	4809      	ldr	r0, [pc, #36]	@ (80131e0 <mg_vsnprintf+0x4c>)
 80131bc:	f7f6 fbf0 	bl	80099a0 <mg_vxprintf>
 80131c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 80131c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d204      	bcs.n	80131d4 <mg_vsnprintf+0x40>
 80131ca:	68fa      	ldr	r2, [r7, #12]
 80131cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ce:	4413      	add	r3, r2
 80131d0:	2200      	movs	r2, #0
 80131d2:	701a      	strb	r2, [r3, #0]
  return n;
 80131d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3728      	adds	r7, #40	@ 0x28
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	08013155 	.word	0x08013155

080131e4 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 80131e4:	b40c      	push	{r2, r3}
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b084      	sub	sp, #16
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 80131f0:	f107 031c 	add.w	r3, r7, #28
 80131f4:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 80131f6:	f107 0308 	add.w	r3, r7, #8
 80131fa:	69ba      	ldr	r2, [r7, #24]
 80131fc:	6839      	ldr	r1, [r7, #0]
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7ff ffc8 	bl	8013194 <mg_vsnprintf>
 8013204:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8013206:	68fb      	ldr	r3, [r7, #12]
}
 8013208:	4618      	mov	r0, r3
 801320a:	3710      	adds	r7, #16
 801320c:	46bd      	mov	sp, r7
 801320e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013212:	b002      	add	sp, #8
 8013214:	4770      	bx	lr
	...

08013218 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8013218:	b580      	push	{r7, lr}
 801321a:	b086      	sub	sp, #24
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8013222:	2300      	movs	r3, #0
 8013224:	60bb      	str	r3, [r7, #8]
 8013226:	2300      	movs	r3, #0
 8013228:	60fb      	str	r3, [r7, #12]
 801322a:	2300      	movs	r3, #0
 801322c:	613b      	str	r3, [r7, #16]
 801322e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013232:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8013234:	f107 0108 	add.w	r1, r7, #8
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	4803      	ldr	r0, [pc, #12]	@ (801324c <mg_vmprintf+0x34>)
 801323e:	f7f6 fbaf 	bl	80099a0 <mg_vxprintf>
  return (char *) io.buf;
 8013242:	68bb      	ldr	r3, [r7, #8]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3718      	adds	r7, #24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	08013175 	.word	0x08013175

08013250 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8013250:	b40f      	push	{r0, r1, r2, r3}
 8013252:	b580      	push	{r7, lr}
 8013254:	b082      	sub	sp, #8
 8013256:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8013258:	f107 0314 	add.w	r3, r7, #20
 801325c:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 801325e:	463b      	mov	r3, r7
 8013260:	4619      	mov	r1, r3
 8013262:	6938      	ldr	r0, [r7, #16]
 8013264:	f7ff ffd8 	bl	8013218 <mg_vmprintf>
 8013268:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 801326a:	687b      	ldr	r3, [r7, #4]
}
 801326c:	4618      	mov	r0, r3
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013276:	b004      	add	sp, #16
 8013278:	4770      	bx	lr

0801327a <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 801327a:	b580      	push	{r7, lr}
 801327c:	b082      	sub	sp, #8
 801327e:	af00      	add	r7, sp, #0
 8013280:	4603      	mov	r3, r0
 8013282:	6039      	str	r1, [r7, #0]
 8013284:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8013286:	79fb      	ldrb	r3, [r7, #7]
 8013288:	4618      	mov	r0, r3
 801328a:	f014 f919 	bl	80274c0 <putchar>
  (void) param;
}
 801328e:	bf00      	nop
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
	...

08013298 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8013298:	b580      	push	{r7, lr}
 801329a:	b088      	sub	sp, #32
 801329c:	af04      	add	r7, sp, #16
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	4618      	mov	r0, r3
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	3301      	adds	r3, #1
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	461a      	mov	r2, r3
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	3302      	adds	r3, #2
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	4619      	mov	r1, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	3303      	adds	r3, #3
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	9302      	str	r3, [sp, #8]
 80132c2:	9101      	str	r1, [sp, #4]
 80132c4:	9200      	str	r2, [sp, #0]
 80132c6:	4603      	mov	r3, r0
 80132c8:	4a04      	ldr	r2, [pc, #16]	@ (80132dc <print_ip4+0x44>)
 80132ca:	68b9      	ldr	r1, [r7, #8]
 80132cc:	68f8      	ldr	r0, [r7, #12]
 80132ce:	f7f6 fb4c 	bl	800996a <mg_xprintf>
 80132d2:	4603      	mov	r3, r0
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3710      	adds	r7, #16
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	0802b534 	.word	0x0802b534

080132e0 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 80132e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132e4:	b08e      	sub	sp, #56	@ 0x38
 80132e6:	af08      	add	r7, sp, #32
 80132e8:	6178      	str	r0, [r7, #20]
 80132ea:	6139      	str	r1, [r7, #16]
 80132ec:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	881b      	ldrh	r3, [r3, #0]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f00e fdd4 	bl	8021ea0 <mg_ntohs>
 80132f8:	4603      	mov	r3, r0
 80132fa:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	3302      	adds	r3, #2
 8013300:	881b      	ldrh	r3, [r3, #0]
 8013302:	4618      	mov	r0, r3
 8013304:	f00e fdcc 	bl	8021ea0 <mg_ntohs>
 8013308:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801330a:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	3304      	adds	r3, #4
 8013310:	881b      	ldrh	r3, [r3, #0]
 8013312:	4618      	mov	r0, r3
 8013314:	f00e fdc4 	bl	8021ea0 <mg_ntohs>
 8013318:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801331a:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3306      	adds	r3, #6
 8013320:	881b      	ldrh	r3, [r3, #0]
 8013322:	4618      	mov	r0, r3
 8013324:	f00e fdbc 	bl	8021ea0 <mg_ntohs>
 8013328:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801332a:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	3308      	adds	r3, #8
 8013330:	881b      	ldrh	r3, [r3, #0]
 8013332:	4618      	mov	r0, r3
 8013334:	f00e fdb4 	bl	8021ea0 <mg_ntohs>
 8013338:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801333a:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	330a      	adds	r3, #10
 8013340:	881b      	ldrh	r3, [r3, #0]
 8013342:	4618      	mov	r0, r3
 8013344:	f00e fdac 	bl	8021ea0 <mg_ntohs>
 8013348:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801334a:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	330c      	adds	r3, #12
 8013350:	881b      	ldrh	r3, [r3, #0]
 8013352:	4618      	mov	r0, r3
 8013354:	f00e fda4 	bl	8021ea0 <mg_ntohs>
 8013358:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801335a:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	330e      	adds	r3, #14
 8013360:	881b      	ldrh	r3, [r3, #0]
 8013362:	4618      	mov	r0, r3
 8013364:	f00e fd9c 	bl	8021ea0 <mg_ntohs>
 8013368:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801336a:	9306      	str	r3, [sp, #24]
 801336c:	683a      	ldr	r2, [r7, #0]
 801336e:	9205      	str	r2, [sp, #20]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	9204      	str	r2, [sp, #16]
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	9303      	str	r3, [sp, #12]
 8013378:	9602      	str	r6, [sp, #8]
 801337a:	9501      	str	r5, [sp, #4]
 801337c:	9400      	str	r4, [sp, #0]
 801337e:	4643      	mov	r3, r8
 8013380:	4a05      	ldr	r2, [pc, #20]	@ (8013398 <print_ip6+0xb8>)
 8013382:	6939      	ldr	r1, [r7, #16]
 8013384:	6978      	ldr	r0, [r7, #20]
 8013386:	f7f6 faf0 	bl	800996a <mg_xprintf>
 801338a:	4603      	mov	r3, r0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013396:	bf00      	nop
 8013398:	0802b540 	.word	0x0802b540

0801339c <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 801339c:	b580      	push	{r7, lr}
 801339e:	b086      	sub	sp, #24
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	1d19      	adds	r1, r3, #4
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	6011      	str	r1, [r2, #0]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 80133b6:	697a      	ldr	r2, [r7, #20]
 80133b8:	68b9      	ldr	r1, [r7, #8]
 80133ba:	68f8      	ldr	r0, [r7, #12]
 80133bc:	f7ff ff6c 	bl	8013298 <print_ip4>
 80133c0:	4603      	mov	r3, r0
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3718      	adds	r7, #24
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}

080133ca <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 80133ca:	b580      	push	{r7, lr}
 80133cc:	b086      	sub	sp, #24
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	60f8      	str	r0, [r7, #12]
 80133d2:	60b9      	str	r1, [r7, #8]
 80133d4:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	1d19      	adds	r1, r3, #4
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	6011      	str	r1, [r2, #0]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	7cdb      	ldrb	r3, [r3, #19]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d007      	beq.n	80133fc <mg_print_ip+0x32>
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	461a      	mov	r2, r3
 80133f0:	68b9      	ldr	r1, [r7, #8]
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	f7ff ff74 	bl	80132e0 <print_ip6>
 80133f8:	4603      	mov	r3, r0
 80133fa:	e006      	b.n	801340a <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	461a      	mov	r2, r3
 8013400:	68b9      	ldr	r1, [r7, #8]
 8013402:	68f8      	ldr	r0, [r7, #12]
 8013404:	f7ff ff48 	bl	8013298 <print_ip4>
 8013408:	4603      	mov	r3, r0
}
 801340a:	4618      	mov	r0, r3
 801340c:	3718      	adds	r7, #24
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
	...

08013414 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8013414:	b580      	push	{r7, lr}
 8013416:	b088      	sub	sp, #32
 8013418:	af02      	add	r7, sp, #8
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	1d19      	adds	r1, r3, #4
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	6011      	str	r1, [r2, #0]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	8a1b      	ldrh	r3, [r3, #16]
 8013432:	4618      	mov	r0, r3
 8013434:	f00e fd34 	bl	8021ea0 <mg_ntohs>
 8013438:	4603      	mov	r3, r0
 801343a:	9301      	str	r3, [sp, #4]
 801343c:	697b      	ldr	r3, [r7, #20]
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	4b05      	ldr	r3, [pc, #20]	@ (8013458 <mg_print_ip_port+0x44>)
 8013442:	4a06      	ldr	r2, [pc, #24]	@ (801345c <mg_print_ip_port+0x48>)
 8013444:	68b9      	ldr	r1, [r7, #8]
 8013446:	68f8      	ldr	r0, [r7, #12]
 8013448:	f7f6 fa8f 	bl	800996a <mg_xprintf>
 801344c:	4603      	mov	r3, r0
}
 801344e:	4618      	mov	r0, r3
 8013450:	3718      	adds	r7, #24
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}
 8013456:	bf00      	nop
 8013458:	080133cb 	.word	0x080133cb
 801345c:	0802b55c 	.word	0x0802b55c

08013460 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8013460:	b5b0      	push	{r4, r5, r7, lr}
 8013462:	b08c      	sub	sp, #48	@ 0x30
 8013464:	af06      	add	r7, sp, #24
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	1d19      	adds	r1, r3, #4
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	6011      	str	r1, [r2, #0]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	461d      	mov	r5, r3
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	3301      	adds	r3, #1
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	461a      	mov	r2, r3
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	3302      	adds	r3, #2
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	3303      	adds	r3, #3
 8013494:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8013496:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	3304      	adds	r3, #4
 801349c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801349e:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	3305      	adds	r3, #5
 80134a4:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80134a6:	9304      	str	r3, [sp, #16]
 80134a8:	9403      	str	r4, [sp, #12]
 80134aa:	9002      	str	r0, [sp, #8]
 80134ac:	9101      	str	r1, [sp, #4]
 80134ae:	9200      	str	r2, [sp, #0]
 80134b0:	462b      	mov	r3, r5
 80134b2:	4a05      	ldr	r2, [pc, #20]	@ (80134c8 <mg_print_mac+0x68>)
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f7f6 fa57 	bl	800996a <mg_xprintf>
 80134bc:	4603      	mov	r3, r0
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3718      	adds	r7, #24
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bdb0      	pop	{r4, r5, r7, pc}
 80134c6:	bf00      	nop
 80134c8:	0802b564 	.word	0x0802b564

080134cc <mg_esc>:

static char mg_esc(int c, bool esc) {
 80134cc:	b480      	push	{r7}
 80134ce:	b087      	sub	sp, #28
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	460b      	mov	r3, r1
 80134d6:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 80134d8:	4b19      	ldr	r3, [pc, #100]	@ (8013540 <mg_esc+0x74>)
 80134da:	613b      	str	r3, [r7, #16]
 80134dc:	4b19      	ldr	r3, [pc, #100]	@ (8013544 <mg_esc+0x78>)
 80134de:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d001      	beq.n	80134ea <mg_esc+0x1e>
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	e000      	b.n	80134ec <mg_esc+0x20>
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	617b      	str	r3, [r7, #20]
 80134ee:	e01b      	b.n	8013528 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	461a      	mov	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d112      	bne.n	8013522 <mg_esc+0x56>
 80134fc:	78fb      	ldrb	r3, [r7, #3]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d007      	beq.n	8013512 <mg_esc+0x46>
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	1ad3      	subs	r3, r2, r3
 8013508:	461a      	mov	r2, r3
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	4413      	add	r3, r2
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	e00f      	b.n	8013532 <mg_esc+0x66>
 8013512:	697a      	ldr	r2, [r7, #20]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	461a      	mov	r2, r3
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	4413      	add	r3, r2
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	e007      	b.n	8013532 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	3301      	adds	r3, #1
 8013526:	617b      	str	r3, [r7, #20]
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d1df      	bne.n	80134f0 <mg_esc+0x24>
  }
  return 0;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	371c      	adds	r7, #28
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop
 8013540:	0802acc8 	.word	0x0802acc8
 8013544:	0802acd0 	.word	0x0802acd0

08013548 <mg_escape>:

static char mg_escape(int c) {
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8013550:	2101      	movs	r1, #1
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f7ff ffba 	bl	80134cc <mg_esc>
 8013558:	4603      	mov	r3, r0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3708      	adds	r7, #8
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8013562:	b580      	push	{r7, lr}
 8013564:	b088      	sub	sp, #32
 8013566:	af00      	add	r7, sp, #0
 8013568:	60f8      	str	r0, [r7, #12]
 801356a:	60b9      	str	r1, [r7, #8]
 801356c:	607a      	str	r2, [r7, #4]
 801356e:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8013570:	2300      	movs	r3, #0
 8013572:	61fb      	str	r3, [r7, #28]
 8013574:	2300      	movs	r3, #0
 8013576:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8013578:	2300      	movs	r3, #0
 801357a:	61fb      	str	r3, [r7, #28]
 801357c:	e023      	b.n	80135c6 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	4413      	add	r3, r2
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff ffde 	bl	8013548 <mg_escape>
 801358c:	4603      	mov	r3, r0
 801358e:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8013590:	7dfb      	ldrb	r3, [r7, #23]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d00c      	beq.n	80135b0 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	68b9      	ldr	r1, [r7, #8]
 801359a:	205c      	movs	r0, #92	@ 0x5c
 801359c:	4798      	blx	r3
 801359e:	7dfa      	ldrb	r2, [r7, #23]
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	68b9      	ldr	r1, [r7, #8]
 80135a4:	4610      	mov	r0, r2
 80135a6:	4798      	blx	r3
 80135a8:	69bb      	ldr	r3, [r7, #24]
 80135aa:	3301      	adds	r3, #1
 80135ac:	61bb      	str	r3, [r7, #24]
 80135ae:	e007      	b.n	80135c0 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	4413      	add	r3, r2
 80135b6:	781a      	ldrb	r2, [r3, #0]
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	68b9      	ldr	r1, [r7, #8]
 80135bc:	4610      	mov	r0, r2
 80135be:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	3301      	adds	r3, #1
 80135c4:	61fb      	str	r3, [r7, #28]
 80135c6:	69fa      	ldr	r2, [r7, #28]
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d205      	bcs.n	80135da <qcpy+0x78>
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	4413      	add	r3, r2
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d1d1      	bne.n	801357e <qcpy+0x1c>
    }
  }
  return i + extra;
 80135da:	69fa      	ldr	r2, [r7, #28]
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	4413      	add	r3, r2
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3720      	adds	r7, #32
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b088      	sub	sp, #32
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	60f8      	str	r0, [r7, #12]
 80135f0:	60b9      	str	r1, [r7, #8]
 80135f2:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	1d19      	adds	r1, r3, #4
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	6011      	str	r1, [r2, #0]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	1d19      	adds	r1, r3, #4
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	6011      	str	r1, [r2, #0]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8013610:	4b16      	ldr	r3, [pc, #88]	@ (801366c <mg_print_hex+0x84>)
 8013612:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8013614:	2300      	movs	r3, #0
 8013616:	61fb      	str	r3, [r7, #28]
 8013618:	e01e      	b.n	8013658 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 801361a:	697a      	ldr	r2, [r7, #20]
 801361c:	69fb      	ldr	r3, [r7, #28]
 801361e:	4413      	add	r3, r2
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	091b      	lsrs	r3, r3, #4
 8013624:	b2db      	uxtb	r3, r3
 8013626:	f003 030f 	and.w	r3, r3, #15
 801362a:	693a      	ldr	r2, [r7, #16]
 801362c:	4413      	add	r3, r2
 801362e:	781a      	ldrb	r2, [r3, #0]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	68b9      	ldr	r1, [r7, #8]
 8013634:	4610      	mov	r0, r2
 8013636:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8013638:	697a      	ldr	r2, [r7, #20]
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	4413      	add	r3, r2
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	f003 030f 	and.w	r3, r3, #15
 8013644:	693a      	ldr	r2, [r7, #16]
 8013646:	4413      	add	r3, r2
 8013648:	781a      	ldrb	r2, [r3, #0]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	68b9      	ldr	r1, [r7, #8]
 801364e:	4610      	mov	r0, r2
 8013650:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	3301      	adds	r3, #1
 8013656:	61fb      	str	r3, [r7, #28]
 8013658:	69fa      	ldr	r2, [r7, #28]
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	429a      	cmp	r2, r3
 801365e:	d3dc      	bcc.n	801361a <mg_print_hex+0x32>
  }
  return 2 * bl;
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	005b      	lsls	r3, r3, #1
}
 8013664:	4618      	mov	r0, r3
 8013666:	3720      	adds	r7, #32
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	0802a104 	.word	0x0802a104

08013670 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8013670:	b580      	push	{r7, lr}
 8013672:	b086      	sub	sp, #24
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	1d19      	adds	r1, r3, #4
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	6011      	str	r1, [r2, #0]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	1d19      	adds	r1, r3, #4
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	6011      	str	r1, [r2, #0]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d109      	bne.n	80136b2 <mg_print_esc+0x42>
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d004      	beq.n	80136ae <mg_print_esc+0x3e>
 80136a4:	6938      	ldr	r0, [r7, #16]
 80136a6:	f7ec fe93 	bl	80003d0 <strlen>
 80136aa:	4603      	mov	r3, r0
 80136ac:	e000      	b.n	80136b0 <mg_print_esc+0x40>
 80136ae:	2300      	movs	r3, #0
 80136b0:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	693a      	ldr	r2, [r7, #16]
 80136b6:	68b9      	ldr	r1, [r7, #8]
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	f7ff ff52 	bl	8013562 <qcpy>
 80136be:	4603      	mov	r3, r0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3718      	adds	r7, #24
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b084      	sub	sp, #16
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80136d0:	2300      	movs	r3, #0
 80136d2:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80136d4:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	4413      	add	r3, r2
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	689a      	ldr	r2, [r3, #8]
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	4413      	add	r3, r2
 80136ee:	1d1a      	adds	r2, r3, #4
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d906      	bls.n	8013706 <mg_queue_read_len+0x3e>
 80136f8:	4b05      	ldr	r3, [pc, #20]	@ (8013710 <mg_queue_read_len+0x48>)
 80136fa:	4a06      	ldr	r2, [pc, #24]	@ (8013714 <mg_queue_read_len+0x4c>)
 80136fc:	f641 6181 	movw	r1, #7809	@ 0x1e81
 8013700:	4805      	ldr	r0, [pc, #20]	@ (8013718 <mg_queue_read_len+0x50>)
 8013702:	f012 f971 	bl	80259e8 <__assert_func>
  return n;
 8013706:	68fb      	ldr	r3, [r7, #12]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3710      	adds	r7, #16
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	0802b5c8 	.word	0x0802b5c8
 8013714:	0802dbd0 	.word	0x0802dbd0
 8013718:	08029e1c 	.word	0x08029e1c

0801371c <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 801371c:	b480      	push	{r7}
 801371e:	b085      	sub	sp, #20
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	4413      	add	r3, r2
 8013734:	68fa      	ldr	r2, [r7, #12]
 8013736:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8013738:	f3bf 8f5b 	dmb	ish
}
 801373c:	bf00      	nop
 801373e:	3714      	adds	r7, #20
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr

08013748 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8013748:	b580      	push	{r7, lr}
 801374a:	b086      	sub	sp, #24
 801374c:	af00      	add	r7, sp, #0
 801374e:	60f8      	str	r0, [r7, #12]
 8013750:	60b9      	str	r1, [r7, #8]
 8013752:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8013754:	2300      	movs	r3, #0
 8013756:	617b      	str	r3, [r7, #20]
 8013758:	2308      	movs	r3, #8
 801375a:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	68da      	ldr	r2, [r3, #12]
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	429a      	cmp	r2, r3
 8013766:	d312      	bcc.n	801378e <mg_queue_book+0x46>
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	68da      	ldr	r2, [r3, #12]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	441a      	add	r2, r3
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	441a      	add	r2, r3
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	429a      	cmp	r2, r3
 801377a:	d808      	bhi.n	801378e <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	685a      	ldr	r2, [r3, #4]
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	1ad2      	subs	r2, r2, r3
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	1ad3      	subs	r3, r2, r3
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	e011      	b.n	80137b2 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	68da      	ldr	r2, [r3, #12]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	429a      	cmp	r2, r3
 8013798:	d30b      	bcc.n	80137b2 <mg_queue_book+0x6a>
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	689b      	ldr	r3, [r3, #8]
 801379e:	693a      	ldr	r2, [r7, #16]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d206      	bcs.n	80137b2 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 80137a4:	2100      	movs	r1, #0
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff ffb8 	bl	801371c <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2200      	movs	r2, #0
 80137b0:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	68da      	ldr	r2, [r3, #12]
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	441a      	add	r2, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	441a      	add	r2, r3
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d207      	bcs.n	80137d6 <mg_queue_book+0x8e>
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	689a      	ldr	r2, [r3, #8]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	68db      	ldr	r3, [r3, #12]
 80137ce:	1ad2      	subs	r2, r2, r3
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	1ad3      	subs	r3, r2, r3
 80137d4:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d007      	beq.n	80137ec <mg_queue_book+0xa4>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	3304      	adds	r3, #4
 80137e6:	441a      	add	r2, r3
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	601a      	str	r2, [r3, #0]
  return space;
 80137ec:	697b      	ldr	r3, [r7, #20]
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3718      	adds	r7, #24
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
	...

080137f8 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b084      	sub	sp, #16
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8013802:	2300      	movs	r3, #0
 8013804:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	689a      	ldr	r2, [r3, #8]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	68db      	ldr	r3, [r3, #12]
 801380e:	429a      	cmp	r2, r3
 8013810:	d013      	beq.n	801383a <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f7ff ff58 	bl	80136c8 <mg_queue_read_len>
 8013818:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d10c      	bne.n	801383a <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2200      	movs	r2, #0
 8013824:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	68da      	ldr	r2, [r3, #12]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	689b      	ldr	r3, [r3, #8]
 801382e:	429a      	cmp	r2, r3
 8013830:	d903      	bls.n	801383a <mg_queue_next+0x42>
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7ff ff48 	bl	80136c8 <mg_queue_read_len>
 8013838:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d007      	beq.n	8013850 <mg_queue_next+0x58>
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	3304      	adds	r3, #4
 801384a:	441a      	add	r2, r3
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	689a      	ldr	r2, [r3, #8]
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	441a      	add	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	429a      	cmp	r2, r3
 801385e:	d906      	bls.n	801386e <mg_queue_next+0x76>
 8013860:	4b05      	ldr	r3, [pc, #20]	@ (8013878 <mg_queue_next+0x80>)
 8013862:	4a06      	ldr	r2, [pc, #24]	@ (801387c <mg_queue_next+0x84>)
 8013864:	f641 61a2 	movw	r1, #7842	@ 0x1ea2
 8013868:	4805      	ldr	r0, [pc, #20]	@ (8013880 <mg_queue_next+0x88>)
 801386a:	f012 f8bd 	bl	80259e8 <__assert_func>
  return len;
 801386e:	68fb      	ldr	r3, [r7, #12]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3710      	adds	r7, #16
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	0802b5ec 	.word	0x0802b5ec
 801387c:	0802dbe4 	.word	0x0802dbe4
 8013880:	08029e1c 	.word	0x08029e1c

08013884 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d106      	bne.n	80138a2 <mg_queue_add+0x1e>
 8013894:	4b13      	ldr	r3, [pc, #76]	@ (80138e4 <mg_queue_add+0x60>)
 8013896:	4a14      	ldr	r2, [pc, #80]	@ (80138e8 <mg_queue_add+0x64>)
 8013898:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 801389c:	4813      	ldr	r0, [pc, #76]	@ (80138ec <mg_queue_add+0x68>)
 801389e:	f012 f8a3 	bl	80259e8 <__assert_func>
  mg_queue_write_len(q, len);
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f7ff ff39 	bl	801371c <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	68da      	ldr	r2, [r3, #12]
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	4413      	add	r3, r2
 80138b2:	f103 0208 	add.w	r2, r3, #8
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d906      	bls.n	80138cc <mg_queue_add+0x48>
 80138be:	4b0c      	ldr	r3, [pc, #48]	@ (80138f0 <mg_queue_add+0x6c>)
 80138c0:	4a09      	ldr	r2, [pc, #36]	@ (80138e8 <mg_queue_add+0x64>)
 80138c2:	f641 61a9 	movw	r1, #7849	@ 0x1ea9
 80138c6:	4809      	ldr	r0, [pc, #36]	@ (80138ec <mg_queue_add+0x68>)
 80138c8:	f012 f88e 	bl	80259e8 <__assert_func>
  q->head += len + sizeof(uint32_t);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	68da      	ldr	r2, [r3, #12]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	4413      	add	r3, r2
 80138d4:	1d1a      	adds	r2, r3, #4
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	60da      	str	r2, [r3, #12]
}
 80138da:	bf00      	nop
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	0802b608 	.word	0x0802b608
 80138e8:	0802dbf4 	.word	0x0802dbf4
 80138ec:	08029e1c 	.word	0x08029e1c
 80138f0:	0802b610 	.word	0x0802b610

080138f4 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	689a      	ldr	r2, [r3, #8]
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	4413      	add	r3, r2
 8013906:	1d1a      	adds	r2, r3, #4
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	689b      	ldr	r3, [r3, #8]
 8013910:	1d1a      	adds	r2, r3, #4
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	429a      	cmp	r2, r3
 8013918:	d906      	bls.n	8013928 <mg_queue_del+0x34>
 801391a:	4b05      	ldr	r3, [pc, #20]	@ (8013930 <mg_queue_del+0x3c>)
 801391c:	4a05      	ldr	r2, [pc, #20]	@ (8013934 <mg_queue_del+0x40>)
 801391e:	f641 61af 	movw	r1, #7855	@ 0x1eaf
 8013922:	4805      	ldr	r0, [pc, #20]	@ (8013938 <mg_queue_del+0x44>)
 8013924:	f012 f860 	bl	80259e8 <__assert_func>
}
 8013928:	bf00      	nop
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	0802b640 	.word	0x0802b640
 8013934:	0802dc04 	.word	0x0802dc04
 8013938:	08029e1c 	.word	0x08029e1c

0801393c <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 8013946:	4b12      	ldr	r3, [pc, #72]	@ (8013990 <blk0+0x54>)
 8013948:	881b      	ldrh	r3, [r3, #0]
 801394a:	2bff      	cmp	r3, #255	@ 0xff
 801394c:	d915      	bls.n	801397a <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	683a      	ldr	r2, [r7, #0]
 8013952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013956:	ea4f 2333 	mov.w	r3, r3, ror #8
 801395a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6839      	ldr	r1, [r7, #0]
 8013962:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013966:	ea4f 6333 	mov.w	r3, r3, ror #24
 801396a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 801396e:	ea42 0103 	orr.w	r1, r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	683a      	ldr	r2, [r7, #0]
 8013976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	683a      	ldr	r2, [r7, #0]
 801397e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8013982:	4618      	mov	r0, r3
 8013984:	370c      	adds	r7, #12
 8013986:	46bd      	mov	sp, r7
 8013988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398c:	4770      	bx	lr
 801398e:	bf00      	nop
 8013990:	0802ad10 	.word	0x0802ad10

08013994 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 8013994:	b590      	push	{r4, r7, lr}
 8013996:	b099      	sub	sp, #100	@ 0x64
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 801399e:	f107 030c 	add.w	r3, r7, #12
 80139a2:	2240      	movs	r2, #64	@ 0x40
 80139a4:	6839      	ldr	r1, [r7, #0]
 80139a6:	4618      	mov	r0, r3
 80139a8:	f014 f82b 	bl	8027a02 <memcpy>
  a = state[0];
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 80139ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80139cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139ce:	405a      	eors	r2, r3
 80139d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139d2:	401a      	ands	r2, r3
 80139d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139d6:	ea82 0403 	eor.w	r4, r2, r3
 80139da:	f107 030c 	add.w	r3, r7, #12
 80139de:	2100      	movs	r1, #0
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7ff ffab 	bl	801393c <blk0>
 80139e6:	4603      	mov	r3, r0
 80139e8:	18e2      	adds	r2, r4, r3
 80139ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139ec:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80139f0:	441a      	add	r2, r3
 80139f2:	4bbd      	ldr	r3, [pc, #756]	@ (8013ce8 <mg_sha1_transform+0x354>)
 80139f4:	4413      	add	r3, r2
 80139f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80139f8:	4413      	add	r3, r2
 80139fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80139fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139fe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a02:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 8013a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a08:	405a      	eors	r2, r3
 8013a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a0c:	401a      	ands	r2, r3
 8013a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a10:	ea82 0403 	eor.w	r4, r2, r3
 8013a14:	f107 030c 	add.w	r3, r7, #12
 8013a18:	2101      	movs	r1, #1
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7ff ff8e 	bl	801393c <blk0>
 8013a20:	4603      	mov	r3, r0
 8013a22:	18e2      	adds	r2, r4, r3
 8013a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a26:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a2a:	441a      	add	r2, r3
 8013a2c:	4bae      	ldr	r3, [pc, #696]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013a2e:	4413      	add	r3, r2
 8013a30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a32:	4413      	add	r3, r2
 8013a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a38:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 8013a3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a42:	405a      	eors	r2, r3
 8013a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a46:	401a      	ands	r2, r3
 8013a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a4a:	ea82 0403 	eor.w	r4, r2, r3
 8013a4e:	f107 030c 	add.w	r3, r7, #12
 8013a52:	2102      	movs	r1, #2
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7ff ff71 	bl	801393c <blk0>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	18e2      	adds	r2, r4, r3
 8013a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a60:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a64:	441a      	add	r2, r3
 8013a66:	4ba0      	ldr	r3, [pc, #640]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013a68:	4413      	add	r3, r2
 8013a6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013a6c:	4413      	add	r3, r2
 8013a6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8013a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a72:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 8013a78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a7c:	405a      	eors	r2, r3
 8013a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a80:	401a      	ands	r2, r3
 8013a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a84:	ea82 0403 	eor.w	r4, r2, r3
 8013a88:	f107 030c 	add.w	r3, r7, #12
 8013a8c:	2103      	movs	r1, #3
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff ff54 	bl	801393c <blk0>
 8013a94:	4603      	mov	r3, r0
 8013a96:	18e2      	adds	r2, r4, r3
 8013a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a9a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a9e:	441a      	add	r2, r3
 8013aa0:	4b91      	ldr	r3, [pc, #580]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013aa2:	4413      	add	r3, r2
 8013aa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013aa6:	4413      	add	r3, r2
 8013aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013aac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ab0:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 8013ab2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ab6:	405a      	eors	r2, r3
 8013ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013aba:	401a      	ands	r2, r3
 8013abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013abe:	ea82 0403 	eor.w	r4, r2, r3
 8013ac2:	f107 030c 	add.w	r3, r7, #12
 8013ac6:	2104      	movs	r1, #4
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7ff ff37 	bl	801393c <blk0>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	18e2      	adds	r2, r4, r3
 8013ad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ad4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ad8:	441a      	add	r2, r3
 8013ada:	4b83      	ldr	r3, [pc, #524]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013adc:	4413      	add	r3, r2
 8013ade:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013ae0:	4413      	add	r3, r2
 8013ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ae6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013aea:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 8013aec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013af0:	405a      	eors	r2, r3
 8013af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013af4:	401a      	ands	r2, r3
 8013af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013af8:	ea82 0403 	eor.w	r4, r2, r3
 8013afc:	f107 030c 	add.w	r3, r7, #12
 8013b00:	2105      	movs	r1, #5
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7ff ff1a 	bl	801393c <blk0>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	18e2      	adds	r2, r4, r3
 8013b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b0e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b12:	441a      	add	r2, r3
 8013b14:	4b74      	ldr	r3, [pc, #464]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013b16:	4413      	add	r3, r2
 8013b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013b1a:	4413      	add	r3, r2
 8013b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b20:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 8013b26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b2a:	405a      	eors	r2, r3
 8013b2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b2e:	401a      	ands	r2, r3
 8013b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b32:	ea82 0403 	eor.w	r4, r2, r3
 8013b36:	f107 030c 	add.w	r3, r7, #12
 8013b3a:	2106      	movs	r1, #6
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7ff fefd 	bl	801393c <blk0>
 8013b42:	4603      	mov	r3, r0
 8013b44:	18e2      	adds	r2, r4, r3
 8013b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b48:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b4c:	441a      	add	r2, r3
 8013b4e:	4b66      	ldr	r3, [pc, #408]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013b50:	4413      	add	r3, r2
 8013b52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b54:	4413      	add	r3, r2
 8013b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b5a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 8013b60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b64:	405a      	eors	r2, r3
 8013b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b68:	401a      	ands	r2, r3
 8013b6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b6c:	ea82 0403 	eor.w	r4, r2, r3
 8013b70:	f107 030c 	add.w	r3, r7, #12
 8013b74:	2107      	movs	r1, #7
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7ff fee0 	bl	801393c <blk0>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	18e2      	adds	r2, r4, r3
 8013b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b86:	441a      	add	r2, r3
 8013b88:	4b57      	ldr	r3, [pc, #348]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013b8a:	4413      	add	r3, r2
 8013b8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b8e:	4413      	add	r3, r2
 8013b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8013b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 8013b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b9e:	405a      	eors	r2, r3
 8013ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ba2:	401a      	ands	r2, r3
 8013ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ba6:	ea82 0403 	eor.w	r4, r2, r3
 8013baa:	f107 030c 	add.w	r3, r7, #12
 8013bae:	2108      	movs	r1, #8
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7ff fec3 	bl	801393c <blk0>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	18e2      	adds	r2, r4, r3
 8013bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bbc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013bc0:	441a      	add	r2, r3
 8013bc2:	4b49      	ldr	r3, [pc, #292]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013bc4:	4413      	add	r3, r2
 8013bc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013bc8:	4413      	add	r3, r2
 8013bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 8013bd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bd8:	405a      	eors	r2, r3
 8013bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bdc:	401a      	ands	r2, r3
 8013bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013be0:	ea82 0403 	eor.w	r4, r2, r3
 8013be4:	f107 030c 	add.w	r3, r7, #12
 8013be8:	2109      	movs	r1, #9
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7ff fea6 	bl	801393c <blk0>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	18e2      	adds	r2, r4, r3
 8013bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bf6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013bfa:	441a      	add	r2, r3
 8013bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013bfe:	4413      	add	r3, r2
 8013c00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c02:	4413      	add	r3, r2
 8013c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c08:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c0c:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 8013c0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c12:	405a      	eors	r2, r3
 8013c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c16:	401a      	ands	r2, r3
 8013c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c1a:	ea82 0403 	eor.w	r4, r2, r3
 8013c1e:	f107 030c 	add.w	r3, r7, #12
 8013c22:	210a      	movs	r1, #10
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff fe89 	bl	801393c <blk0>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	18e2      	adds	r2, r4, r3
 8013c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c30:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c34:	441a      	add	r2, r3
 8013c36:	4b2c      	ldr	r3, [pc, #176]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013c38:	4413      	add	r3, r2
 8013c3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c3c:	4413      	add	r3, r2
 8013c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c42:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c46:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 8013c48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c4c:	405a      	eors	r2, r3
 8013c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c50:	401a      	ands	r2, r3
 8013c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c54:	ea82 0403 	eor.w	r4, r2, r3
 8013c58:	f107 030c 	add.w	r3, r7, #12
 8013c5c:	210b      	movs	r1, #11
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7ff fe6c 	bl	801393c <blk0>
 8013c64:	4603      	mov	r3, r0
 8013c66:	18e2      	adds	r2, r4, r3
 8013c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c6a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c6e:	441a      	add	r2, r3
 8013c70:	4b1d      	ldr	r3, [pc, #116]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013c72:	4413      	add	r3, r2
 8013c74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013c76:	4413      	add	r3, r2
 8013c78:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c7c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 8013c82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c86:	405a      	eors	r2, r3
 8013c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c8a:	401a      	ands	r2, r3
 8013c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c8e:	ea82 0403 	eor.w	r4, r2, r3
 8013c92:	f107 030c 	add.w	r3, r7, #12
 8013c96:	210c      	movs	r1, #12
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7ff fe4f 	bl	801393c <blk0>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	18e2      	adds	r2, r4, r3
 8013ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ca4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ca8:	441a      	add	r2, r3
 8013caa:	4b0f      	ldr	r3, [pc, #60]	@ (8013ce8 <mg_sha1_transform+0x354>)
 8013cac:	4413      	add	r3, r2
 8013cae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013cb0:	4413      	add	r3, r2
 8013cb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8013cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cb6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8013cbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cc0:	405a      	eors	r2, r3
 8013cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cc4:	401a      	ands	r2, r3
 8013cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cc8:	ea82 0403 	eor.w	r4, r2, r3
 8013ccc:	f107 030c 	add.w	r3, r7, #12
 8013cd0:	210d      	movs	r1, #13
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7ff fe32 	bl	801393c <blk0>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	18e2      	adds	r2, r4, r3
 8013cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cde:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ce2:	441a      	add	r2, r3
 8013ce4:	e002      	b.n	8013cec <mg_sha1_transform+0x358>
 8013ce6:	bf00      	nop
 8013ce8:	5a827999 	.word	0x5a827999
 8013cec:	4bac      	ldr	r3, [pc, #688]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013cee:	4413      	add	r3, r2
 8013cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013cf2:	4413      	add	r3, r2
 8013cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cf8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013cfc:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 8013cfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d02:	405a      	eors	r2, r3
 8013d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d06:	401a      	ands	r2, r3
 8013d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d0a:	ea82 0403 	eor.w	r4, r2, r3
 8013d0e:	f107 030c 	add.w	r3, r7, #12
 8013d12:	210e      	movs	r1, #14
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ff fe11 	bl	801393c <blk0>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	18e2      	adds	r2, r4, r3
 8013d1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d20:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d24:	441a      	add	r2, r3
 8013d26:	4b9e      	ldr	r3, [pc, #632]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013d28:	4413      	add	r3, r2
 8013d2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d2c:	4413      	add	r3, r2
 8013d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d32:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d36:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 8013d38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d3c:	405a      	eors	r2, r3
 8013d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d40:	401a      	ands	r2, r3
 8013d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d44:	ea82 0403 	eor.w	r4, r2, r3
 8013d48:	f107 030c 	add.w	r3, r7, #12
 8013d4c:	210f      	movs	r1, #15
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7ff fdf4 	bl	801393c <blk0>
 8013d54:	4603      	mov	r3, r0
 8013d56:	18e2      	adds	r2, r4, r3
 8013d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d5a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d5e:	441a      	add	r2, r3
 8013d60:	4b8f      	ldr	r3, [pc, #572]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013d62:	4413      	add	r3, r2
 8013d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013d66:	4413      	add	r3, r2
 8013d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d6c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d70:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 8013d72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d76:	405a      	eors	r2, r3
 8013d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d7a:	401a      	ands	r2, r3
 8013d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d7e:	405a      	eors	r2, r3
 8013d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d84:	4059      	eors	r1, r3
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	4059      	eors	r1, r3
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	404b      	eors	r3, r1
 8013d8e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d92:	60fb      	str	r3, [r7, #12]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	441a      	add	r2, r3
 8013d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d9a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d9e:	441a      	add	r2, r3
 8013da0:	4b7f      	ldr	r3, [pc, #508]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013da2:	4413      	add	r3, r2
 8013da4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013da6:	4413      	add	r3, r2
 8013da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8013daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 8013db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013db6:	405a      	eors	r2, r3
 8013db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dba:	401a      	ands	r2, r3
 8013dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dbe:	405a      	eors	r2, r3
 8013dc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dc4:	4059      	eors	r1, r3
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	4059      	eors	r1, r3
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	404b      	eors	r3, r1
 8013dce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013dd2:	613b      	str	r3, [r7, #16]
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	441a      	add	r2, r3
 8013dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dda:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013dde:	441a      	add	r2, r3
 8013de0:	4b6f      	ldr	r3, [pc, #444]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013de2:	4413      	add	r3, r2
 8013de4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013de6:	4413      	add	r3, r2
 8013de8:	657b      	str	r3, [r7, #84]	@ 0x54
 8013dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dec:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 8013df2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013df4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013df6:	405a      	eors	r2, r3
 8013df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dfa:	401a      	ands	r2, r3
 8013dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dfe:	405a      	eors	r2, r3
 8013e00:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e04:	4059      	eors	r1, r3
 8013e06:	69fb      	ldr	r3, [r7, #28]
 8013e08:	4059      	eors	r1, r3
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	404b      	eors	r3, r1
 8013e0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e12:	617b      	str	r3, [r7, #20]
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	441a      	add	r2, r3
 8013e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e1e:	441a      	add	r2, r3
 8013e20:	4b5f      	ldr	r3, [pc, #380]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013e22:	4413      	add	r3, r2
 8013e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013e26:	4413      	add	r3, r2
 8013e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e30:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 8013e32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e36:	405a      	eors	r2, r3
 8013e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e3a:	401a      	ands	r2, r3
 8013e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e3e:	405a      	eors	r2, r3
 8013e40:	68f9      	ldr	r1, [r7, #12]
 8013e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e44:	4059      	eors	r1, r3
 8013e46:	6a3b      	ldr	r3, [r7, #32]
 8013e48:	4059      	eors	r1, r3
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	404b      	eors	r3, r1
 8013e4e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e52:	61bb      	str	r3, [r7, #24]
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	441a      	add	r2, r3
 8013e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e5a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e5e:	441a      	add	r2, r3
 8013e60:	4b4f      	ldr	r3, [pc, #316]	@ (8013fa0 <mg_sha1_transform+0x60c>)
 8013e62:	4413      	add	r3, r2
 8013e64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013e66:	4413      	add	r3, r2
 8013e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e6c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e70:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 8013e72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e76:	405a      	eors	r2, r3
 8013e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e7a:	405a      	eors	r2, r3
 8013e7c:	6939      	ldr	r1, [r7, #16]
 8013e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e80:	4059      	eors	r1, r3
 8013e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e84:	4059      	eors	r1, r3
 8013e86:	69fb      	ldr	r3, [r7, #28]
 8013e88:	404b      	eors	r3, r1
 8013e8a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e8e:	61fb      	str	r3, [r7, #28]
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	441a      	add	r2, r3
 8013e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e96:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e9a:	441a      	add	r2, r3
 8013e9c:	4b41      	ldr	r3, [pc, #260]	@ (8013fa4 <mg_sha1_transform+0x610>)
 8013e9e:	4413      	add	r3, r2
 8013ea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013ea2:	4413      	add	r3, r2
 8013ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ea6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ea8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013eac:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 8013eae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013eb2:	405a      	eors	r2, r3
 8013eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eb6:	405a      	eors	r2, r3
 8013eb8:	6979      	ldr	r1, [r7, #20]
 8013eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ebc:	4059      	eors	r1, r3
 8013ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ec0:	4059      	eors	r1, r3
 8013ec2:	6a3b      	ldr	r3, [r7, #32]
 8013ec4:	404b      	eors	r3, r1
 8013ec6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013eca:	623b      	str	r3, [r7, #32]
 8013ecc:	6a3b      	ldr	r3, [r7, #32]
 8013ece:	441a      	add	r2, r3
 8013ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ed2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ed6:	441a      	add	r2, r3
 8013ed8:	4b32      	ldr	r3, [pc, #200]	@ (8013fa4 <mg_sha1_transform+0x610>)
 8013eda:	4413      	add	r3, r2
 8013edc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013ede:	4413      	add	r3, r2
 8013ee0:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ee4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 8013eea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013eee:	405a      	eors	r2, r3
 8013ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ef2:	405a      	eors	r2, r3
 8013ef4:	69b9      	ldr	r1, [r7, #24]
 8013ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ef8:	4059      	eors	r1, r3
 8013efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013efc:	4059      	eors	r1, r3
 8013efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f00:	404b      	eors	r3, r1
 8013f02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0a:	441a      	add	r2, r3
 8013f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f0e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f12:	441a      	add	r2, r3
 8013f14:	4b23      	ldr	r3, [pc, #140]	@ (8013fa4 <mg_sha1_transform+0x610>)
 8013f16:	4413      	add	r3, r2
 8013f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f1a:	4413      	add	r3, r2
 8013f1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f20:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 8013f26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f2a:	405a      	eors	r2, r3
 8013f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f2e:	405a      	eors	r2, r3
 8013f30:	69f9      	ldr	r1, [r7, #28]
 8013f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f34:	4059      	eors	r1, r3
 8013f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f38:	4059      	eors	r1, r3
 8013f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f3c:	404b      	eors	r3, r1
 8013f3e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f46:	441a      	add	r2, r3
 8013f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f4a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f4e:	441a      	add	r2, r3
 8013f50:	4b14      	ldr	r3, [pc, #80]	@ (8013fa4 <mg_sha1_transform+0x610>)
 8013f52:	4413      	add	r3, r2
 8013f54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013f56:	4413      	add	r3, r2
 8013f58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f5c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f60:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 8013f62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f66:	405a      	eors	r2, r3
 8013f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f6a:	405a      	eors	r2, r3
 8013f6c:	6a39      	ldr	r1, [r7, #32]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	4059      	eors	r1, r3
 8013f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f74:	4059      	eors	r1, r3
 8013f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f78:	404b      	eors	r3, r1
 8013f7a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f82:	441a      	add	r2, r3
 8013f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f86:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f8a:	441a      	add	r2, r3
 8013f8c:	4b05      	ldr	r3, [pc, #20]	@ (8013fa4 <mg_sha1_transform+0x610>)
 8013f8e:	4413      	add	r3, r2
 8013f90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013f92:	4413      	add	r3, r2
 8013f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f98:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f9c:	e004      	b.n	8013fa8 <mg_sha1_transform+0x614>
 8013f9e:	bf00      	nop
 8013fa0:	5a827999 	.word	0x5a827999
 8013fa4:	6ed9eba1 	.word	0x6ed9eba1
 8013fa8:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 8013faa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fae:	405a      	eors	r2, r3
 8013fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fb2:	405a      	eors	r2, r3
 8013fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	4059      	eors	r1, r3
 8013fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fbc:	4059      	eors	r1, r3
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc0:	404b      	eors	r3, r1
 8013fc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8013fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fca:	441a      	add	r2, r3
 8013fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013fce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013fd2:	441a      	add	r2, r3
 8013fd4:	4ba9      	ldr	r3, [pc, #676]	@ (801427c <mg_sha1_transform+0x8e8>)
 8013fd6:	4413      	add	r3, r2
 8013fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013fda:	4413      	add	r3, r2
 8013fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fe0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013fe4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 8013fe6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fea:	405a      	eors	r2, r3
 8013fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fee:	405a      	eors	r2, r3
 8013ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	4059      	eors	r1, r3
 8013ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ff8:	4059      	eors	r1, r3
 8013ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ffc:	404b      	eors	r3, r1
 8013ffe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014002:	637b      	str	r3, [r7, #52]	@ 0x34
 8014004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014006:	441a      	add	r2, r3
 8014008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801400a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801400e:	441a      	add	r2, r3
 8014010:	4b9a      	ldr	r3, [pc, #616]	@ (801427c <mg_sha1_transform+0x8e8>)
 8014012:	4413      	add	r3, r2
 8014014:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014016:	4413      	add	r3, r2
 8014018:	653b      	str	r3, [r7, #80]	@ 0x50
 801401a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801401c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014020:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 8014022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014026:	405a      	eors	r2, r3
 8014028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801402a:	405a      	eors	r2, r3
 801402c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801402e:	69bb      	ldr	r3, [r7, #24]
 8014030:	4059      	eors	r1, r3
 8014032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014034:	4059      	eors	r1, r3
 8014036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014038:	404b      	eors	r3, r1
 801403a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801403e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014042:	441a      	add	r2, r3
 8014044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014046:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801404a:	441a      	add	r2, r3
 801404c:	4b8b      	ldr	r3, [pc, #556]	@ (801427c <mg_sha1_transform+0x8e8>)
 801404e:	4413      	add	r3, r2
 8014050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014052:	4413      	add	r3, r2
 8014054:	657b      	str	r3, [r7, #84]	@ 0x54
 8014056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014058:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 801405e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014062:	405a      	eors	r2, r3
 8014064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014066:	405a      	eors	r2, r3
 8014068:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801406a:	69fb      	ldr	r3, [r7, #28]
 801406c:	4059      	eors	r1, r3
 801406e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014070:	4059      	eors	r1, r3
 8014072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014074:	404b      	eors	r3, r1
 8014076:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801407a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801407c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801407e:	441a      	add	r2, r3
 8014080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014082:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014086:	441a      	add	r2, r3
 8014088:	4b7c      	ldr	r3, [pc, #496]	@ (801427c <mg_sha1_transform+0x8e8>)
 801408a:	4413      	add	r3, r2
 801408c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801408e:	4413      	add	r3, r2
 8014090:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014094:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014098:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 801409a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801409c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801409e:	405a      	eors	r2, r3
 80140a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140a2:	405a      	eors	r2, r3
 80140a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80140a6:	6a3b      	ldr	r3, [r7, #32]
 80140a8:	4059      	eors	r1, r3
 80140aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80140ac:	4059      	eors	r1, r3
 80140ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80140b0:	404b      	eors	r3, r1
 80140b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80140b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80140b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80140ba:	441a      	add	r2, r3
 80140bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80140c2:	441a      	add	r2, r3
 80140c4:	4b6d      	ldr	r3, [pc, #436]	@ (801427c <mg_sha1_transform+0x8e8>)
 80140c6:	4413      	add	r3, r2
 80140c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80140ca:	4413      	add	r3, r2
 80140cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80140ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80140d4:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 80140d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80140d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140da:	405a      	eors	r2, r3
 80140dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140de:	405a      	eors	r2, r3
 80140e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80140e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140e4:	4059      	eors	r1, r3
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	4059      	eors	r1, r3
 80140ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140ec:	404b      	eors	r3, r1
 80140ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80140f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80140f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140f6:	441a      	add	r2, r3
 80140f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80140fe:	441a      	add	r2, r3
 8014100:	4b5e      	ldr	r3, [pc, #376]	@ (801427c <mg_sha1_transform+0x8e8>)
 8014102:	4413      	add	r3, r2
 8014104:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014106:	4413      	add	r3, r2
 8014108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801410a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801410c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014110:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 8014112:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014116:	405a      	eors	r2, r3
 8014118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801411a:	405a      	eors	r2, r3
 801411c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014120:	4059      	eors	r1, r3
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	4059      	eors	r1, r3
 8014126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014128:	404b      	eors	r3, r1
 801412a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801412e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014132:	441a      	add	r2, r3
 8014134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014136:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801413a:	441a      	add	r2, r3
 801413c:	4b4f      	ldr	r3, [pc, #316]	@ (801427c <mg_sha1_transform+0x8e8>)
 801413e:	4413      	add	r3, r2
 8014140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014142:	4413      	add	r3, r2
 8014144:	653b      	str	r3, [r7, #80]	@ 0x50
 8014146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014148:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801414c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 801414e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014152:	405a      	eors	r2, r3
 8014154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014156:	405a      	eors	r2, r3
 8014158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801415a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801415c:	4059      	eors	r1, r3
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	4059      	eors	r1, r3
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	404b      	eors	r3, r1
 8014166:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801416a:	60fb      	str	r3, [r7, #12]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	441a      	add	r2, r3
 8014170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014172:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014176:	441a      	add	r2, r3
 8014178:	4b40      	ldr	r3, [pc, #256]	@ (801427c <mg_sha1_transform+0x8e8>)
 801417a:	4413      	add	r3, r2
 801417c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801417e:	4413      	add	r3, r2
 8014180:	657b      	str	r3, [r7, #84]	@ 0x54
 8014182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014184:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014188:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 801418a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801418c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801418e:	405a      	eors	r2, r3
 8014190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014192:	405a      	eors	r2, r3
 8014194:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014198:	4059      	eors	r1, r3
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	4059      	eors	r1, r3
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	404b      	eors	r3, r1
 80141a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80141a6:	613b      	str	r3, [r7, #16]
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	441a      	add	r2, r3
 80141ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80141b2:	441a      	add	r2, r3
 80141b4:	4b31      	ldr	r3, [pc, #196]	@ (801427c <mg_sha1_transform+0x8e8>)
 80141b6:	4413      	add	r3, r2
 80141b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80141ba:	4413      	add	r3, r2
 80141bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80141be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80141c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80141c4:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 80141c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80141c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80141ca:	405a      	eors	r2, r3
 80141cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141ce:	405a      	eors	r2, r3
 80141d0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80141d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141d4:	4059      	eors	r1, r3
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	4059      	eors	r1, r3
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	404b      	eors	r3, r1
 80141de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80141e2:	617b      	str	r3, [r7, #20]
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	441a      	add	r2, r3
 80141e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141ea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80141ee:	441a      	add	r2, r3
 80141f0:	4b22      	ldr	r3, [pc, #136]	@ (801427c <mg_sha1_transform+0x8e8>)
 80141f2:	4413      	add	r3, r2
 80141f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80141f6:	4413      	add	r3, r2
 80141f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80141fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141fc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014200:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 8014202:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014206:	405a      	eors	r2, r3
 8014208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801420a:	405a      	eors	r2, r3
 801420c:	68f9      	ldr	r1, [r7, #12]
 801420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014210:	4059      	eors	r1, r3
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	4059      	eors	r1, r3
 8014216:	69bb      	ldr	r3, [r7, #24]
 8014218:	404b      	eors	r3, r1
 801421a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801421e:	61bb      	str	r3, [r7, #24]
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	441a      	add	r2, r3
 8014224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014226:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801422a:	441a      	add	r2, r3
 801422c:	4b13      	ldr	r3, [pc, #76]	@ (801427c <mg_sha1_transform+0x8e8>)
 801422e:	4413      	add	r3, r2
 8014230:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014232:	4413      	add	r3, r2
 8014234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014238:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801423c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 801423e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014240:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014242:	405a      	eors	r2, r3
 8014244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014246:	405a      	eors	r2, r3
 8014248:	6939      	ldr	r1, [r7, #16]
 801424a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801424c:	4059      	eors	r1, r3
 801424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014250:	4059      	eors	r1, r3
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	404b      	eors	r3, r1
 8014256:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801425a:	61fb      	str	r3, [r7, #28]
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	441a      	add	r2, r3
 8014260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014262:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014266:	441a      	add	r2, r3
 8014268:	4b04      	ldr	r3, [pc, #16]	@ (801427c <mg_sha1_transform+0x8e8>)
 801426a:	4413      	add	r3, r2
 801426c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801426e:	4413      	add	r3, r2
 8014270:	653b      	str	r3, [r7, #80]	@ 0x50
 8014272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014274:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014278:	e002      	b.n	8014280 <mg_sha1_transform+0x8ec>
 801427a:	bf00      	nop
 801427c:	6ed9eba1 	.word	0x6ed9eba1
 8014280:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 8014282:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014286:	405a      	eors	r2, r3
 8014288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801428a:	405a      	eors	r2, r3
 801428c:	6979      	ldr	r1, [r7, #20]
 801428e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014290:	4059      	eors	r1, r3
 8014292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014294:	4059      	eors	r1, r3
 8014296:	6a3b      	ldr	r3, [r7, #32]
 8014298:	404b      	eors	r3, r1
 801429a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801429e:	623b      	str	r3, [r7, #32]
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	441a      	add	r2, r3
 80142a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80142aa:	441a      	add	r2, r3
 80142ac:	4ba9      	ldr	r3, [pc, #676]	@ (8014554 <mg_sha1_transform+0xbc0>)
 80142ae:	4413      	add	r3, r2
 80142b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80142b2:	4413      	add	r3, r2
 80142b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80142b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142b8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80142bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 80142be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80142c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142c2:	405a      	eors	r2, r3
 80142c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80142c6:	405a      	eors	r2, r3
 80142c8:	69b9      	ldr	r1, [r7, #24]
 80142ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142cc:	4059      	eors	r1, r3
 80142ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d0:	4059      	eors	r1, r3
 80142d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d4:	404b      	eors	r3, r1
 80142d6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80142da:	627b      	str	r3, [r7, #36]	@ 0x24
 80142dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142de:	441a      	add	r2, r3
 80142e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142e2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80142e6:	441a      	add	r2, r3
 80142e8:	4b9a      	ldr	r3, [pc, #616]	@ (8014554 <mg_sha1_transform+0xbc0>)
 80142ea:	4413      	add	r3, r2
 80142ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80142ee:	4413      	add	r3, r2
 80142f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80142f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80142f8:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 80142fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80142fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142fe:	405a      	eors	r2, r3
 8014300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014302:	405a      	eors	r2, r3
 8014304:	69f9      	ldr	r1, [r7, #28]
 8014306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014308:	4059      	eors	r1, r3
 801430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801430c:	4059      	eors	r1, r3
 801430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014310:	404b      	eors	r3, r1
 8014312:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801431a:	441a      	add	r2, r3
 801431c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801431e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014322:	441a      	add	r2, r3
 8014324:	4b8b      	ldr	r3, [pc, #556]	@ (8014554 <mg_sha1_transform+0xbc0>)
 8014326:	4413      	add	r3, r2
 8014328:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801432a:	4413      	add	r3, r2
 801432c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801432e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014330:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014334:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 8014336:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801433a:	431a      	orrs	r2, r3
 801433c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801433e:	401a      	ands	r2, r3
 8014340:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014344:	400b      	ands	r3, r1
 8014346:	431a      	orrs	r2, r3
 8014348:	6a39      	ldr	r1, [r7, #32]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	4059      	eors	r1, r3
 801434e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014350:	4059      	eors	r1, r3
 8014352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014354:	404b      	eors	r3, r1
 8014356:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801435a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801435e:	441a      	add	r2, r3
 8014360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014362:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014366:	441a      	add	r2, r3
 8014368:	4b7b      	ldr	r3, [pc, #492]	@ (8014558 <mg_sha1_transform+0xbc4>)
 801436a:	4413      	add	r3, r2
 801436c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801436e:	4413      	add	r3, r2
 8014370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014374:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014378:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 801437a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801437c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801437e:	431a      	orrs	r2, r3
 8014380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014382:	401a      	ands	r2, r3
 8014384:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8014386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014388:	400b      	ands	r3, r1
 801438a:	431a      	orrs	r2, r3
 801438c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	4059      	eors	r1, r3
 8014392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014394:	4059      	eors	r1, r3
 8014396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014398:	404b      	eors	r3, r1
 801439a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801439e:	633b      	str	r3, [r7, #48]	@ 0x30
 80143a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143a2:	441a      	add	r2, r3
 80143a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143a6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80143aa:	441a      	add	r2, r3
 80143ac:	4b6a      	ldr	r3, [pc, #424]	@ (8014558 <mg_sha1_transform+0xbc4>)
 80143ae:	4413      	add	r3, r2
 80143b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80143b2:	4413      	add	r3, r2
 80143b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80143b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143b8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80143bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 80143be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80143c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143c2:	431a      	orrs	r2, r3
 80143c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80143c6:	401a      	ands	r2, r3
 80143c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80143ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143cc:	400b      	ands	r3, r1
 80143ce:	431a      	orrs	r2, r3
 80143d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	4059      	eors	r1, r3
 80143d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143d8:	4059      	eors	r1, r3
 80143da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143dc:	404b      	eors	r3, r1
 80143de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80143e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80143e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143e6:	441a      	add	r2, r3
 80143e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143ea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80143ee:	441a      	add	r2, r3
 80143f0:	4b59      	ldr	r3, [pc, #356]	@ (8014558 <mg_sha1_transform+0xbc4>)
 80143f2:	4413      	add	r3, r2
 80143f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80143f6:	4413      	add	r3, r2
 80143f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80143fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143fc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 8014402:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014406:	431a      	orrs	r2, r3
 8014408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801440a:	401a      	ands	r2, r3
 801440c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801440e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014410:	400b      	ands	r3, r1
 8014412:	431a      	orrs	r2, r3
 8014414:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	4059      	eors	r1, r3
 801441a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801441c:	4059      	eors	r1, r3
 801441e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014420:	404b      	eors	r3, r1
 8014422:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014426:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801442a:	441a      	add	r2, r3
 801442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801442e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014432:	441a      	add	r2, r3
 8014434:	4b48      	ldr	r3, [pc, #288]	@ (8014558 <mg_sha1_transform+0xbc4>)
 8014436:	4413      	add	r3, r2
 8014438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801443a:	4413      	add	r3, r2
 801443c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801443e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014440:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014444:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 8014446:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801444a:	431a      	orrs	r2, r3
 801444c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801444e:	401a      	ands	r2, r3
 8014450:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014454:	400b      	ands	r3, r1
 8014456:	431a      	orrs	r2, r3
 8014458:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	4059      	eors	r1, r3
 801445e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014460:	4059      	eors	r1, r3
 8014462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014464:	404b      	eors	r3, r1
 8014466:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801446a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801446c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801446e:	441a      	add	r2, r3
 8014470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014472:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014476:	441a      	add	r2, r3
 8014478:	4b37      	ldr	r3, [pc, #220]	@ (8014558 <mg_sha1_transform+0xbc4>)
 801447a:	4413      	add	r3, r2
 801447c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801447e:	4413      	add	r3, r2
 8014480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014484:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014488:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 801448a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801448c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801448e:	431a      	orrs	r2, r3
 8014490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014492:	401a      	ands	r2, r3
 8014494:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014498:	400b      	ands	r3, r1
 801449a:	431a      	orrs	r2, r3
 801449c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801449e:	6a3b      	ldr	r3, [r7, #32]
 80144a0:	4059      	eors	r1, r3
 80144a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80144a4:	4059      	eors	r1, r3
 80144a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144a8:	404b      	eors	r3, r1
 80144aa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80144ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80144b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144b2:	441a      	add	r2, r3
 80144b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80144b6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80144ba:	441a      	add	r2, r3
 80144bc:	4b26      	ldr	r3, [pc, #152]	@ (8014558 <mg_sha1_transform+0xbc4>)
 80144be:	4413      	add	r3, r2
 80144c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80144c2:	4413      	add	r3, r2
 80144c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80144c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80144c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80144cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 80144ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80144d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80144d2:	431a      	orrs	r2, r3
 80144d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144d6:	401a      	ands	r2, r3
 80144d8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80144da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80144dc:	400b      	ands	r3, r1
 80144de:	431a      	orrs	r2, r3
 80144e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80144e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144e4:	4059      	eors	r1, r3
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	4059      	eors	r1, r3
 80144ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144ec:	404b      	eors	r3, r1
 80144ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80144f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80144f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144f6:	441a      	add	r2, r3
 80144f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80144fe:	441a      	add	r2, r3
 8014500:	4b15      	ldr	r3, [pc, #84]	@ (8014558 <mg_sha1_transform+0xbc4>)
 8014502:	4413      	add	r3, r2
 8014504:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014506:	4413      	add	r3, r2
 8014508:	653b      	str	r3, [r7, #80]	@ 0x50
 801450a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801450c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014510:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 8014512:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014516:	431a      	orrs	r2, r3
 8014518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801451a:	401a      	ands	r2, r3
 801451c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801451e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014520:	400b      	ands	r3, r1
 8014522:	431a      	orrs	r2, r3
 8014524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014528:	4059      	eors	r1, r3
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	4059      	eors	r1, r3
 801452e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014530:	404b      	eors	r3, r1
 8014532:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801453a:	441a      	add	r2, r3
 801453c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801453e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014542:	441a      	add	r2, r3
 8014544:	4b04      	ldr	r3, [pc, #16]	@ (8014558 <mg_sha1_transform+0xbc4>)
 8014546:	4413      	add	r3, r2
 8014548:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801454a:	4413      	add	r3, r2
 801454c:	657b      	str	r3, [r7, #84]	@ 0x54
 801454e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014550:	e004      	b.n	801455c <mg_sha1_transform+0xbc8>
 8014552:	bf00      	nop
 8014554:	6ed9eba1 	.word	0x6ed9eba1
 8014558:	8f1bbcdc 	.word	0x8f1bbcdc
 801455c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 8014562:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014566:	431a      	orrs	r2, r3
 8014568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801456a:	401a      	ands	r2, r3
 801456c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801456e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014570:	400b      	ands	r3, r1
 8014572:	431a      	orrs	r2, r3
 8014574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014578:	4059      	eors	r1, r3
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	4059      	eors	r1, r3
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	404b      	eors	r3, r1
 8014582:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014586:	60fb      	str	r3, [r7, #12]
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	441a      	add	r2, r3
 801458c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801458e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014592:	441a      	add	r2, r3
 8014594:	4ba8      	ldr	r3, [pc, #672]	@ (8014838 <mg_sha1_transform+0xea4>)
 8014596:	4413      	add	r3, r2
 8014598:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801459a:	4413      	add	r3, r2
 801459c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801459e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145a0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80145a4:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 80145a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80145a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145aa:	431a      	orrs	r2, r3
 80145ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145ae:	401a      	ands	r2, r3
 80145b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80145b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145b4:	400b      	ands	r3, r1
 80145b6:	431a      	orrs	r2, r3
 80145b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80145ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145bc:	4059      	eors	r1, r3
 80145be:	69bb      	ldr	r3, [r7, #24]
 80145c0:	4059      	eors	r1, r3
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	404b      	eors	r3, r1
 80145c6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80145ca:	613b      	str	r3, [r7, #16]
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	441a      	add	r2, r3
 80145d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80145d2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80145d6:	441a      	add	r2, r3
 80145d8:	4b97      	ldr	r3, [pc, #604]	@ (8014838 <mg_sha1_transform+0xea4>)
 80145da:	4413      	add	r3, r2
 80145dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80145de:	4413      	add	r3, r2
 80145e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80145e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145e4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80145e8:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 80145ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80145ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145ee:	431a      	orrs	r2, r3
 80145f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145f2:	401a      	ands	r2, r3
 80145f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80145f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145f8:	400b      	ands	r3, r1
 80145fa:	431a      	orrs	r2, r3
 80145fc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80145fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014600:	4059      	eors	r1, r3
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	4059      	eors	r1, r3
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	404b      	eors	r3, r1
 801460a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801460e:	617b      	str	r3, [r7, #20]
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	441a      	add	r2, r3
 8014614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014616:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801461a:	441a      	add	r2, r3
 801461c:	4b86      	ldr	r3, [pc, #536]	@ (8014838 <mg_sha1_transform+0xea4>)
 801461e:	4413      	add	r3, r2
 8014620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014622:	4413      	add	r3, r2
 8014624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014628:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801462c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 801462e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014632:	431a      	orrs	r2, r3
 8014634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014636:	401a      	ands	r2, r3
 8014638:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801463a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801463c:	400b      	ands	r3, r1
 801463e:	431a      	orrs	r2, r3
 8014640:	68f9      	ldr	r1, [r7, #12]
 8014642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014644:	4059      	eors	r1, r3
 8014646:	6a3b      	ldr	r3, [r7, #32]
 8014648:	4059      	eors	r1, r3
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	404b      	eors	r3, r1
 801464e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014652:	61bb      	str	r3, [r7, #24]
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	441a      	add	r2, r3
 8014658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801465a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801465e:	441a      	add	r2, r3
 8014660:	4b75      	ldr	r3, [pc, #468]	@ (8014838 <mg_sha1_transform+0xea4>)
 8014662:	4413      	add	r3, r2
 8014664:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014666:	4413      	add	r3, r2
 8014668:	653b      	str	r3, [r7, #80]	@ 0x50
 801466a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801466c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014670:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 8014672:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014676:	431a      	orrs	r2, r3
 8014678:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801467a:	401a      	ands	r2, r3
 801467c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801467e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014680:	400b      	ands	r3, r1
 8014682:	431a      	orrs	r2, r3
 8014684:	6939      	ldr	r1, [r7, #16]
 8014686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014688:	4059      	eors	r1, r3
 801468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801468c:	4059      	eors	r1, r3
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	404b      	eors	r3, r1
 8014692:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014696:	61fb      	str	r3, [r7, #28]
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	441a      	add	r2, r3
 801469c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801469e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80146a2:	441a      	add	r2, r3
 80146a4:	4b64      	ldr	r3, [pc, #400]	@ (8014838 <mg_sha1_transform+0xea4>)
 80146a6:	4413      	add	r3, r2
 80146a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80146aa:	4413      	add	r3, r2
 80146ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80146ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80146b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 80146b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80146b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146ba:	431a      	orrs	r2, r3
 80146bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146be:	401a      	ands	r2, r3
 80146c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80146c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146c4:	400b      	ands	r3, r1
 80146c6:	431a      	orrs	r2, r3
 80146c8:	6979      	ldr	r1, [r7, #20]
 80146ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146cc:	4059      	eors	r1, r3
 80146ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d0:	4059      	eors	r1, r3
 80146d2:	6a3b      	ldr	r3, [r7, #32]
 80146d4:	404b      	eors	r3, r1
 80146d6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80146da:	623b      	str	r3, [r7, #32]
 80146dc:	6a3b      	ldr	r3, [r7, #32]
 80146de:	441a      	add	r2, r3
 80146e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80146e6:	441a      	add	r2, r3
 80146e8:	4b53      	ldr	r3, [pc, #332]	@ (8014838 <mg_sha1_transform+0xea4>)
 80146ea:	4413      	add	r3, r2
 80146ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80146ee:	4413      	add	r3, r2
 80146f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80146f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80146f8:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 80146fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80146fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146fe:	431a      	orrs	r2, r3
 8014700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014702:	401a      	ands	r2, r3
 8014704:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014708:	400b      	ands	r3, r1
 801470a:	431a      	orrs	r2, r3
 801470c:	69b9      	ldr	r1, [r7, #24]
 801470e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014710:	4059      	eors	r1, r3
 8014712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014714:	4059      	eors	r1, r3
 8014716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014718:	404b      	eors	r3, r1
 801471a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801471e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014722:	441a      	add	r2, r3
 8014724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014726:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801472a:	441a      	add	r2, r3
 801472c:	4b42      	ldr	r3, [pc, #264]	@ (8014838 <mg_sha1_transform+0xea4>)
 801472e:	4413      	add	r3, r2
 8014730:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014732:	4413      	add	r3, r2
 8014734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014738:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801473c:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 801473e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014742:	431a      	orrs	r2, r3
 8014744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014746:	401a      	ands	r2, r3
 8014748:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801474a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801474c:	400b      	ands	r3, r1
 801474e:	431a      	orrs	r2, r3
 8014750:	69f9      	ldr	r1, [r7, #28]
 8014752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014754:	4059      	eors	r1, r3
 8014756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014758:	4059      	eors	r1, r3
 801475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801475c:	404b      	eors	r3, r1
 801475e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014766:	441a      	add	r2, r3
 8014768:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801476a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801476e:	441a      	add	r2, r3
 8014770:	4b31      	ldr	r3, [pc, #196]	@ (8014838 <mg_sha1_transform+0xea4>)
 8014772:	4413      	add	r3, r2
 8014774:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014776:	4413      	add	r3, r2
 8014778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801477a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801477c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014780:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 8014782:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014786:	431a      	orrs	r2, r3
 8014788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801478a:	401a      	ands	r2, r3
 801478c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801478e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014790:	400b      	ands	r3, r1
 8014792:	431a      	orrs	r2, r3
 8014794:	6a39      	ldr	r1, [r7, #32]
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	4059      	eors	r1, r3
 801479a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801479c:	4059      	eors	r1, r3
 801479e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147a0:	404b      	eors	r3, r1
 80147a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80147a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147aa:	441a      	add	r2, r3
 80147ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80147b2:	441a      	add	r2, r3
 80147b4:	4b20      	ldr	r3, [pc, #128]	@ (8014838 <mg_sha1_transform+0xea4>)
 80147b6:	4413      	add	r3, r2
 80147b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80147ba:	4413      	add	r3, r2
 80147bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80147be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80147c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 80147c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80147c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147ca:	431a      	orrs	r2, r3
 80147cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80147ce:	401a      	ands	r2, r3
 80147d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80147d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147d4:	400b      	ands	r3, r1
 80147d6:	431a      	orrs	r2, r3
 80147d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80147da:	693b      	ldr	r3, [r7, #16]
 80147dc:	4059      	eors	r1, r3
 80147de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e0:	4059      	eors	r1, r3
 80147e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147e4:	404b      	eors	r3, r1
 80147e6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80147ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80147ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ee:	441a      	add	r2, r3
 80147f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80147f6:	441a      	add	r2, r3
 80147f8:	4b0f      	ldr	r3, [pc, #60]	@ (8014838 <mg_sha1_transform+0xea4>)
 80147fa:	4413      	add	r3, r2
 80147fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80147fe:	4413      	add	r3, r2
 8014800:	657b      	str	r3, [r7, #84]	@ 0x54
 8014802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014804:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 801480a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801480c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801480e:	431a      	orrs	r2, r3
 8014810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014812:	401a      	ands	r2, r3
 8014814:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014818:	400b      	ands	r3, r1
 801481a:	431a      	orrs	r2, r3
 801481c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	4059      	eors	r1, r3
 8014822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014824:	4059      	eors	r1, r3
 8014826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014828:	404b      	eors	r3, r1
 801482a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801482e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014832:	441a      	add	r2, r3
 8014834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014836:	e001      	b.n	801483c <mg_sha1_transform+0xea8>
 8014838:	8f1bbcdc 	.word	0x8f1bbcdc
 801483c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014840:	441a      	add	r2, r3
 8014842:	4ba9      	ldr	r3, [pc, #676]	@ (8014ae8 <mg_sha1_transform+0x1154>)
 8014844:	4413      	add	r3, r2
 8014846:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014848:	4413      	add	r3, r2
 801484a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801484c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801484e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014852:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 8014854:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014858:	431a      	orrs	r2, r3
 801485a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801485c:	401a      	ands	r2, r3
 801485e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014862:	400b      	ands	r3, r1
 8014864:	431a      	orrs	r2, r3
 8014866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	4059      	eors	r1, r3
 801486c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801486e:	4059      	eors	r1, r3
 8014870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014872:	404b      	eors	r3, r1
 8014874:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014878:	63bb      	str	r3, [r7, #56]	@ 0x38
 801487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801487c:	441a      	add	r2, r3
 801487e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014880:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014884:	441a      	add	r2, r3
 8014886:	4b98      	ldr	r3, [pc, #608]	@ (8014ae8 <mg_sha1_transform+0x1154>)
 8014888:	4413      	add	r3, r2
 801488a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801488c:	4413      	add	r3, r2
 801488e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014892:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014896:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 8014898:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801489a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801489c:	405a      	eors	r2, r3
 801489e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148a0:	405a      	eors	r2, r3
 80148a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80148a4:	69fb      	ldr	r3, [r7, #28]
 80148a6:	4059      	eors	r1, r3
 80148a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148aa:	4059      	eors	r1, r3
 80148ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80148ae:	404b      	eors	r3, r1
 80148b0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80148b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80148b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80148b8:	441a      	add	r2, r3
 80148ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80148c0:	441a      	add	r2, r3
 80148c2:	4b8a      	ldr	r3, [pc, #552]	@ (8014aec <mg_sha1_transform+0x1158>)
 80148c4:	4413      	add	r3, r2
 80148c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80148c8:	4413      	add	r3, r2
 80148ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80148cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80148d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 80148d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80148d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148d8:	405a      	eors	r2, r3
 80148da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148dc:	405a      	eors	r2, r3
 80148de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80148e0:	6a3b      	ldr	r3, [r7, #32]
 80148e2:	4059      	eors	r1, r3
 80148e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148e6:	4059      	eors	r1, r3
 80148e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80148ea:	404b      	eors	r3, r1
 80148ec:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80148f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80148f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80148f4:	441a      	add	r2, r3
 80148f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80148f8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80148fc:	441a      	add	r2, r3
 80148fe:	4b7b      	ldr	r3, [pc, #492]	@ (8014aec <mg_sha1_transform+0x1158>)
 8014900:	4413      	add	r3, r2
 8014902:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014904:	4413      	add	r3, r2
 8014906:	653b      	str	r3, [r7, #80]	@ 0x50
 8014908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801490a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801490e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 8014910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014914:	405a      	eors	r2, r3
 8014916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014918:	405a      	eors	r2, r3
 801491a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801491e:	4059      	eors	r1, r3
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	4059      	eors	r1, r3
 8014924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014926:	404b      	eors	r3, r1
 8014928:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801492c:	647b      	str	r3, [r7, #68]	@ 0x44
 801492e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014930:	441a      	add	r2, r3
 8014932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014934:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014938:	441a      	add	r2, r3
 801493a:	4b6c      	ldr	r3, [pc, #432]	@ (8014aec <mg_sha1_transform+0x1158>)
 801493c:	4413      	add	r3, r2
 801493e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014940:	4413      	add	r3, r2
 8014942:	657b      	str	r3, [r7, #84]	@ 0x54
 8014944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014946:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801494a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 801494c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801494e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014950:	405a      	eors	r2, r3
 8014952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014954:	405a      	eors	r2, r3
 8014956:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801495a:	4059      	eors	r1, r3
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	4059      	eors	r1, r3
 8014960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014962:	404b      	eors	r3, r1
 8014964:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014968:	64bb      	str	r3, [r7, #72]	@ 0x48
 801496a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801496c:	441a      	add	r2, r3
 801496e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014970:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014974:	441a      	add	r2, r3
 8014976:	4b5d      	ldr	r3, [pc, #372]	@ (8014aec <mg_sha1_transform+0x1158>)
 8014978:	4413      	add	r3, r2
 801497a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801497c:	4413      	add	r3, r2
 801497e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014982:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014986:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 8014988:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801498a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801498c:	405a      	eors	r2, r3
 801498e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014990:	405a      	eors	r2, r3
 8014992:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014996:	4059      	eors	r1, r3
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	4059      	eors	r1, r3
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	404b      	eors	r3, r1
 80149a0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80149a4:	60fb      	str	r3, [r7, #12]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	441a      	add	r2, r3
 80149aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80149ac:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80149b0:	441a      	add	r2, r3
 80149b2:	4b4e      	ldr	r3, [pc, #312]	@ (8014aec <mg_sha1_transform+0x1158>)
 80149b4:	4413      	add	r3, r2
 80149b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80149b8:	4413      	add	r3, r2
 80149ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80149bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149be:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80149c2:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 80149c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80149c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149c8:	405a      	eors	r2, r3
 80149ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149cc:	405a      	eors	r2, r3
 80149ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80149d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149d2:	4059      	eors	r1, r3
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	4059      	eors	r1, r3
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	404b      	eors	r3, r1
 80149dc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80149e0:	613b      	str	r3, [r7, #16]
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	441a      	add	r2, r3
 80149e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80149e8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80149ec:	441a      	add	r2, r3
 80149ee:	4b3f      	ldr	r3, [pc, #252]	@ (8014aec <mg_sha1_transform+0x1158>)
 80149f0:	4413      	add	r3, r2
 80149f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80149f4:	4413      	add	r3, r2
 80149f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80149f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80149fa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80149fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 8014a00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a04:	405a      	eors	r2, r3
 8014a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a08:	405a      	eors	r2, r3
 8014a0a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a0e:	4059      	eors	r1, r3
 8014a10:	69fb      	ldr	r3, [r7, #28]
 8014a12:	4059      	eors	r1, r3
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	404b      	eors	r3, r1
 8014a18:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014a1c:	617b      	str	r3, [r7, #20]
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	441a      	add	r2, r3
 8014a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a24:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a28:	441a      	add	r2, r3
 8014a2a:	4b30      	ldr	r3, [pc, #192]	@ (8014aec <mg_sha1_transform+0x1158>)
 8014a2c:	4413      	add	r3, r2
 8014a2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a30:	4413      	add	r3, r2
 8014a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8014a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a36:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 8014a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a40:	405a      	eors	r2, r3
 8014a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a44:	405a      	eors	r2, r3
 8014a46:	68f9      	ldr	r1, [r7, #12]
 8014a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a4a:	4059      	eors	r1, r3
 8014a4c:	6a3b      	ldr	r3, [r7, #32]
 8014a4e:	4059      	eors	r1, r3
 8014a50:	69bb      	ldr	r3, [r7, #24]
 8014a52:	404b      	eors	r3, r1
 8014a54:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014a58:	61bb      	str	r3, [r7, #24]
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	441a      	add	r2, r3
 8014a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a60:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a64:	441a      	add	r2, r3
 8014a66:	4b21      	ldr	r3, [pc, #132]	@ (8014aec <mg_sha1_transform+0x1158>)
 8014a68:	4413      	add	r3, r2
 8014a6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a6c:	4413      	add	r3, r2
 8014a6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a72:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 8014a78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a7c:	405a      	eors	r2, r3
 8014a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a80:	405a      	eors	r2, r3
 8014a82:	6939      	ldr	r1, [r7, #16]
 8014a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a86:	4059      	eors	r1, r3
 8014a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a8a:	4059      	eors	r1, r3
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	404b      	eors	r3, r1
 8014a90:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014a94:	61fb      	str	r3, [r7, #28]
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	441a      	add	r2, r3
 8014a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a9c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014aa0:	441a      	add	r2, r3
 8014aa2:	4b12      	ldr	r3, [pc, #72]	@ (8014aec <mg_sha1_transform+0x1158>)
 8014aa4:	4413      	add	r3, r2
 8014aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014aa8:	4413      	add	r3, r2
 8014aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014aae:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014ab2:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 8014ab4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ab8:	405a      	eors	r2, r3
 8014aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014abc:	405a      	eors	r2, r3
 8014abe:	6979      	ldr	r1, [r7, #20]
 8014ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ac2:	4059      	eors	r1, r3
 8014ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ac6:	4059      	eors	r1, r3
 8014ac8:	6a3b      	ldr	r3, [r7, #32]
 8014aca:	404b      	eors	r3, r1
 8014acc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014ad0:	623b      	str	r3, [r7, #32]
 8014ad2:	6a3b      	ldr	r3, [r7, #32]
 8014ad4:	441a      	add	r2, r3
 8014ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ad8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014adc:	441a      	add	r2, r3
 8014ade:	4b03      	ldr	r3, [pc, #12]	@ (8014aec <mg_sha1_transform+0x1158>)
 8014ae0:	4413      	add	r3, r2
 8014ae2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014ae4:	4413      	add	r3, r2
 8014ae6:	e003      	b.n	8014af0 <mg_sha1_transform+0x115c>
 8014ae8:	8f1bbcdc 	.word	0x8f1bbcdc
 8014aec:	ca62c1d6 	.word	0xca62c1d6
 8014af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014af4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014af8:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 8014afa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014afe:	405a      	eors	r2, r3
 8014b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b02:	405a      	eors	r2, r3
 8014b04:	69b9      	ldr	r1, [r7, #24]
 8014b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014b08:	4059      	eors	r1, r3
 8014b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b0c:	4059      	eors	r1, r3
 8014b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b10:	404b      	eors	r3, r1
 8014b12:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b1a:	441a      	add	r2, r3
 8014b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b1e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b22:	441a      	add	r2, r3
 8014b24:	4ba7      	ldr	r3, [pc, #668]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014b26:	4413      	add	r3, r2
 8014b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b2a:	4413      	add	r3, r2
 8014b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b30:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b34:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 8014b36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b3a:	405a      	eors	r2, r3
 8014b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b3e:	405a      	eors	r2, r3
 8014b40:	69f9      	ldr	r1, [r7, #28]
 8014b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014b44:	4059      	eors	r1, r3
 8014b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b48:	4059      	eors	r1, r3
 8014b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b4c:	404b      	eors	r3, r1
 8014b4e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b56:	441a      	add	r2, r3
 8014b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b5a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b5e:	441a      	add	r2, r3
 8014b60:	4b98      	ldr	r3, [pc, #608]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014b62:	4413      	add	r3, r2
 8014b64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014b66:	4413      	add	r3, r2
 8014b68:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b6c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 8014b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b76:	405a      	eors	r2, r3
 8014b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b7a:	405a      	eors	r2, r3
 8014b7c:	6a39      	ldr	r1, [r7, #32]
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	4059      	eors	r1, r3
 8014b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b84:	4059      	eors	r1, r3
 8014b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b88:	404b      	eors	r3, r1
 8014b8a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b92:	441a      	add	r2, r3
 8014b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b96:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b9a:	441a      	add	r2, r3
 8014b9c:	4b89      	ldr	r3, [pc, #548]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014b9e:	4413      	add	r3, r2
 8014ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014ba2:	4413      	add	r3, r2
 8014ba4:	657b      	str	r3, [r7, #84]	@ 0x54
 8014ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ba8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 8014bae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014bb2:	405a      	eors	r2, r3
 8014bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bb6:	405a      	eors	r2, r3
 8014bb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	4059      	eors	r1, r3
 8014bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bc0:	4059      	eors	r1, r3
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc4:	404b      	eors	r3, r1
 8014bc6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bce:	441a      	add	r2, r3
 8014bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014bd2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014bd6:	441a      	add	r2, r3
 8014bd8:	4b7a      	ldr	r3, [pc, #488]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014bda:	4413      	add	r3, r2
 8014bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014bde:	4413      	add	r3, r2
 8014be0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014be4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014be8:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 8014bea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bee:	405a      	eors	r2, r3
 8014bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014bf2:	405a      	eors	r2, r3
 8014bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	4059      	eors	r1, r3
 8014bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bfc:	4059      	eors	r1, r3
 8014bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c00:	404b      	eors	r3, r1
 8014c02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c0a:	441a      	add	r2, r3
 8014c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c0e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c12:	441a      	add	r2, r3
 8014c14:	4b6b      	ldr	r3, [pc, #428]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014c16:	4413      	add	r3, r2
 8014c18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014c1a:	4413      	add	r3, r2
 8014c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c20:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c24:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 8014c26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c2a:	405a      	eors	r2, r3
 8014c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c2e:	405a      	eors	r2, r3
 8014c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	4059      	eors	r1, r3
 8014c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c38:	4059      	eors	r1, r3
 8014c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c3c:	404b      	eors	r3, r1
 8014c3e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c46:	441a      	add	r2, r3
 8014c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c4a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c4e:	441a      	add	r2, r3
 8014c50:	4b5c      	ldr	r3, [pc, #368]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014c52:	4413      	add	r3, r2
 8014c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014c56:	4413      	add	r3, r2
 8014c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c5c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c60:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 8014c62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c66:	405a      	eors	r2, r3
 8014c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c6a:	405a      	eors	r2, r3
 8014c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	4059      	eors	r1, r3
 8014c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c74:	4059      	eors	r1, r3
 8014c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c78:	404b      	eors	r3, r1
 8014c7a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c82:	441a      	add	r2, r3
 8014c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c86:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c8a:	441a      	add	r2, r3
 8014c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014c8e:	4413      	add	r3, r2
 8014c90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014c92:	4413      	add	r3, r2
 8014c94:	653b      	str	r3, [r7, #80]	@ 0x50
 8014c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c98:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 8014c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ca2:	405a      	eors	r2, r3
 8014ca4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ca6:	405a      	eors	r2, r3
 8014ca8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014caa:	6a3b      	ldr	r3, [r7, #32]
 8014cac:	4059      	eors	r1, r3
 8014cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014cb0:	4059      	eors	r1, r3
 8014cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cb4:	404b      	eors	r3, r1
 8014cb6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8014cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cbe:	441a      	add	r2, r3
 8014cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014cc2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014cc6:	441a      	add	r2, r3
 8014cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014cca:	4413      	add	r3, r2
 8014ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014cce:	4413      	add	r3, r2
 8014cd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8014cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cd4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 8014cda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cde:	405a      	eors	r2, r3
 8014ce0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ce2:	405a      	eors	r2, r3
 8014ce4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce8:	4059      	eors	r1, r3
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	4059      	eors	r1, r3
 8014cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014cf0:	404b      	eors	r3, r1
 8014cf2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8014cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014cfa:	441a      	add	r2, r3
 8014cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cfe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014d02:	441a      	add	r2, r3
 8014d04:	4b2f      	ldr	r3, [pc, #188]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014d06:	4413      	add	r3, r2
 8014d08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014d0a:	4413      	add	r3, r2
 8014d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d10:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014d14:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 8014d16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d1a:	405a      	eors	r2, r3
 8014d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d1e:	405a      	eors	r2, r3
 8014d20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d24:	4059      	eors	r1, r3
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	4059      	eors	r1, r3
 8014d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d2c:	404b      	eors	r3, r1
 8014d2e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d36:	441a      	add	r2, r3
 8014d38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d3a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014d3e:	441a      	add	r2, r3
 8014d40:	4b20      	ldr	r3, [pc, #128]	@ (8014dc4 <mg_sha1_transform+0x1430>)
 8014d42:	4413      	add	r3, r2
 8014d44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014d46:	4413      	add	r3, r2
 8014d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d4c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014d50:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d58:	441a      	add	r2, r3
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	3304      	adds	r3, #4
 8014d62:	6819      	ldr	r1, [r3, #0]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3304      	adds	r3, #4
 8014d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014d6a:	440a      	add	r2, r1
 8014d6c:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	3308      	adds	r3, #8
 8014d72:	6819      	ldr	r1, [r3, #0]
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	3308      	adds	r3, #8
 8014d78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014d7a:	440a      	add	r2, r1
 8014d7c:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	330c      	adds	r3, #12
 8014d82:	6819      	ldr	r1, [r3, #0]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	330c      	adds	r3, #12
 8014d88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014d8a:	440a      	add	r2, r1
 8014d8c:	601a      	str	r2, [r3, #0]
  state[4] += e;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	3310      	adds	r3, #16
 8014d92:	6819      	ldr	r1, [r3, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	3310      	adds	r3, #16
 8014d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014d9a:	440a      	add	r2, r1
 8014d9c:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8014d9e:	f107 030c 	add.w	r3, r7, #12
 8014da2:	2240      	movs	r2, #64	@ 0x40
 8014da4:	2100      	movs	r1, #0
 8014da6:	4618      	mov	r0, r3
 8014da8:	f012 fcf2 	bl	8027790 <memset>
  a = b = c = d = e = 0;
 8014dac:	2300      	movs	r3, #0
 8014dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8014db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8014db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014dba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014dc0:	e002      	b.n	8014dc8 <mg_sha1_transform+0x1434>
 8014dc2:	bf00      	nop
 8014dc4:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 8014dc8:	bf00      	nop
 8014dca:	3764      	adds	r7, #100	@ 0x64
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd90      	pop	{r4, r7, pc}

08014dd0 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	4a0d      	ldr	r2, [pc, #52]	@ (8014e10 <mg_sha1_init+0x40>)
 8014ddc:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	4a0c      	ldr	r2, [pc, #48]	@ (8014e14 <mg_sha1_init+0x44>)
 8014de2:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	4a0c      	ldr	r2, [pc, #48]	@ (8014e18 <mg_sha1_init+0x48>)
 8014de8:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	4a0b      	ldr	r2, [pc, #44]	@ (8014e1c <mg_sha1_init+0x4c>)
 8014dee:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	4a0b      	ldr	r2, [pc, #44]	@ (8014e20 <mg_sha1_init+0x50>)
 8014df4:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	619a      	str	r2, [r3, #24]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	699a      	ldr	r2, [r3, #24]
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	615a      	str	r2, [r3, #20]
}
 8014e04:	bf00      	nop
 8014e06:	370c      	adds	r7, #12
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr
 8014e10:	67452301 	.word	0x67452301
 8014e14:	efcdab89 	.word	0xefcdab89
 8014e18:	98badcfe 	.word	0x98badcfe
 8014e1c:	10325476 	.word	0x10325476
 8014e20:	c3d2e1f0 	.word	0xc3d2e1f0

08014e24 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b086      	sub	sp, #24
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	695b      	ldr	r3, [r3, #20]
 8014e34:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	695a      	ldr	r2, [r3, #20]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	00db      	lsls	r3, r3, #3
 8014e3e:	441a      	add	r2, r3
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	615a      	str	r2, [r3, #20]
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	695b      	ldr	r3, [r3, #20]
 8014e48:	693a      	ldr	r2, [r7, #16]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d904      	bls.n	8014e58 <mg_sha1_update+0x34>
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	699b      	ldr	r3, [r3, #24]
 8014e52:	1c5a      	adds	r2, r3, #1
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	699a      	ldr	r2, [r3, #24]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	0f5b      	lsrs	r3, r3, #29
 8014e60:	441a      	add	r2, r3
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	08db      	lsrs	r3, r3, #3
 8014e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014e6e:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 8014e70:	693a      	ldr	r2, [r7, #16]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	4413      	add	r3, r2
 8014e76:	2b3f      	cmp	r3, #63	@ 0x3f
 8014e78:	d926      	bls.n	8014ec8 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	3318      	adds	r3, #24
 8014e7e:	68fa      	ldr	r2, [r7, #12]
 8014e80:	4413      	add	r3, r2
 8014e82:	1d18      	adds	r0, r3, #4
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8014e8a:	617b      	str	r3, [r7, #20]
 8014e8c:	697a      	ldr	r2, [r7, #20]
 8014e8e:	68b9      	ldr	r1, [r7, #8]
 8014e90:	f012 fdb7 	bl	8027a02 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8014e94:	68fa      	ldr	r2, [r7, #12]
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	331c      	adds	r3, #28
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	4610      	mov	r0, r2
 8014e9e:	f7fe fd79 	bl	8013994 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8014ea2:	e009      	b.n	8014eb8 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8014ea4:	68f8      	ldr	r0, [r7, #12]
 8014ea6:	68ba      	ldr	r2, [r7, #8]
 8014ea8:	697b      	ldr	r3, [r7, #20]
 8014eaa:	4413      	add	r3, r2
 8014eac:	4619      	mov	r1, r3
 8014eae:	f7fe fd71 	bl	8013994 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	3340      	adds	r3, #64	@ 0x40
 8014eb6:	617b      	str	r3, [r7, #20]
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	333f      	adds	r3, #63	@ 0x3f
 8014ebc:	687a      	ldr	r2, [r7, #4]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d8f0      	bhi.n	8014ea4 <mg_sha1_update+0x80>
    }
    j = 0;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	613b      	str	r3, [r7, #16]
 8014ec6:	e001      	b.n	8014ecc <mg_sha1_update+0xa8>
  } else
    i = 0;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	3318      	adds	r3, #24
 8014ed0:	68fa      	ldr	r2, [r7, #12]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	1d18      	adds	r0, r3, #4
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	18d1      	adds	r1, r2, r3
 8014edc:	687a      	ldr	r2, [r7, #4]
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	f012 fd8d 	bl	8027a02 <memcpy>
}
 8014ee8:	bf00      	nop
 8014eea:	3718      	adds	r7, #24
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b086      	sub	sp, #24
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8014efa:	2300      	movs	r3, #0
 8014efc:	617b      	str	r3, [r7, #20]
 8014efe:	e01b      	b.n	8014f38 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	2b03      	cmp	r3, #3
 8014f04:	bf94      	ite	ls
 8014f06:	2301      	movls	r3, #1
 8014f08:	2300      	movhi	r3, #0
 8014f0a:	b2db      	uxtb	r3, r3
 8014f0c:	683a      	ldr	r2, [r7, #0]
 8014f0e:	3304      	adds	r3, #4
 8014f10:	009b      	lsls	r3, r3, #2
 8014f12:	4413      	add	r3, r2
 8014f14:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	43db      	mvns	r3, r3
 8014f1a:	f003 0303 	and.w	r3, r3, #3
 8014f1e:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8014f20:	fa22 f303 	lsr.w	r3, r2, r3
 8014f24:	b2d9      	uxtb	r1, r3
 8014f26:	f107 020c 	add.w	r2, r7, #12
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	460a      	mov	r2, r1
 8014f30:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	3301      	adds	r3, #1
 8014f36:	617b      	str	r3, [r7, #20]
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	2b07      	cmp	r3, #7
 8014f3c:	d9e0      	bls.n	8014f00 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 8014f3e:	2380      	movs	r3, #128	@ 0x80
 8014f40:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 8014f42:	f107 030b 	add.w	r3, r7, #11
 8014f46:	2201      	movs	r2, #1
 8014f48:	4619      	mov	r1, r3
 8014f4a:	6838      	ldr	r0, [r7, #0]
 8014f4c:	f7ff ff6a 	bl	8014e24 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8014f50:	e008      	b.n	8014f64 <mg_sha1_final+0x74>
    c = 0000;
 8014f52:	2300      	movs	r3, #0
 8014f54:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8014f56:	f107 030b 	add.w	r3, r7, #11
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	4619      	mov	r1, r3
 8014f5e:	6838      	ldr	r0, [r7, #0]
 8014f60:	f7ff ff60 	bl	8014e24 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8014f6c:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8014f70:	d1ef      	bne.n	8014f52 <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 8014f72:	f107 030c 	add.w	r3, r7, #12
 8014f76:	2208      	movs	r2, #8
 8014f78:	4619      	mov	r1, r3
 8014f7a:	6838      	ldr	r0, [r7, #0]
 8014f7c:	f7ff ff52 	bl	8014e24 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8014f80:	2300      	movs	r3, #0
 8014f82:	617b      	str	r3, [r7, #20]
 8014f84:	e013      	b.n	8014fae <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	089a      	lsrs	r2, r3, #2
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	43db      	mvns	r3, r3
 8014f94:	f003 0303 	and.w	r3, r3, #3
 8014f98:	00db      	lsls	r3, r3, #3
 8014f9a:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8014fa4:	b2ca      	uxtb	r2, r1
    digest[i] =
 8014fa6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	3301      	adds	r3, #1
 8014fac:	617b      	str	r3, [r7, #20]
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	2b13      	cmp	r3, #19
 8014fb2:	d9e8      	bls.n	8014f86 <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8014fb4:	225c      	movs	r2, #92	@ 0x5c
 8014fb6:	2100      	movs	r1, #0
 8014fb8:	6838      	ldr	r0, [r7, #0]
 8014fba:	f012 fbe9 	bl	8027790 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8014fbe:	f107 030c 	add.w	r3, r7, #12
 8014fc2:	2208      	movs	r2, #8
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f012 fbe2 	bl	8027790 <memset>
}
 8014fcc:	bf00      	nop
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 8014fe2:	6879      	ldr	r1, [r7, #4]
 8014fe4:	f04f 0200 	mov.w	r2, #0
 8014fe8:	f04f 0300 	mov.w	r3, #0
 8014fec:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	4a0e      	ldr	r2, [pc, #56]	@ (801502c <mg_sha256_init+0x58>)
 8014ff4:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8015030 <mg_sha256_init+0x5c>)
 8014ffa:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8015034 <mg_sha256_init+0x60>)
 8015000:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	4a0c      	ldr	r2, [pc, #48]	@ (8015038 <mg_sha256_init+0x64>)
 8015006:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	4a0c      	ldr	r2, [pc, #48]	@ (801503c <mg_sha256_init+0x68>)
 801500c:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4a0b      	ldr	r2, [pc, #44]	@ (8015040 <mg_sha256_init+0x6c>)
 8015012:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	4a0b      	ldr	r2, [pc, #44]	@ (8015044 <mg_sha256_init+0x70>)
 8015018:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	4a0a      	ldr	r2, [pc, #40]	@ (8015048 <mg_sha256_init+0x74>)
 801501e:	61da      	str	r2, [r3, #28]
}
 8015020:	bf00      	nop
 8015022:	370c      	adds	r7, #12
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	6a09e667 	.word	0x6a09e667
 8015030:	bb67ae85 	.word	0xbb67ae85
 8015034:	3c6ef372 	.word	0x3c6ef372
 8015038:	a54ff53a 	.word	0xa54ff53a
 801503c:	510e527f 	.word	0x510e527f
 8015040:	9b05688c 	.word	0x9b05688c
 8015044:	1f83d9ab 	.word	0x1f83d9ab
 8015048:	5be0cd19 	.word	0x5be0cd19

0801504c <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 801504c:	b480      	push	{r7}
 801504e:	b0cf      	sub	sp, #316	@ 0x13c
 8015050:	af00      	add	r7, sp, #0
 8015052:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015056:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801505a:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 801505c:	2300      	movs	r3, #0
 801505e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015062:	2300      	movs	r3, #0
 8015064:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8015068:	e043      	b.n	80150f2 <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 801506a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801506e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015072:	681a      	ldr	r2, [r3, #0]
 8015074:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015078:	4413      	add	r3, r2
 801507a:	332c      	adds	r3, #44	@ 0x2c
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8015080:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015084:	3301      	adds	r3, #1
 8015086:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801508a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801508e:	6809      	ldr	r1, [r1, #0]
 8015090:	440b      	add	r3, r1
 8015092:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015096:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8015098:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 801509a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801509e:	3302      	adds	r3, #2
 80150a0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80150a4:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80150a8:	6809      	ldr	r1, [r1, #0]
 80150aa:	440b      	add	r3, r1
 80150ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80150b0:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 80150b2:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 80150b4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80150b8:	3203      	adds	r2, #3
 80150ba:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80150be:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80150c2:	6809      	ldr	r1, [r1, #0]
 80150c4:	440a      	add	r2, r1
 80150c6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80150ca:	ea43 0102 	orr.w	r1, r3, r2
 80150ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80150da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 80150de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150e2:	3301      	adds	r3, #1
 80150e4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80150e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150ec:	3304      	adds	r3, #4
 80150ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80150f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150f6:	2b0f      	cmp	r3, #15
 80150f8:	ddb7      	ble.n	801506a <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 80150fa:	e069      	b.n	80151d0 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 80150fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015100:	1e9a      	subs	r2, r3, #2
 8015102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015106:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801510a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801510e:	ea4f 4273 	mov.w	r2, r3, ror #17
 8015112:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015116:	1e99      	subs	r1, r3, #2
 8015118:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801511c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015124:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8015128:	405a      	eors	r2, r3
 801512a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801512e:	1e99      	subs	r1, r3, #2
 8015130:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015134:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801513c:	0a9b      	lsrs	r3, r3, #10
 801513e:	405a      	eors	r2, r3
 8015140:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015144:	1fd9      	subs	r1, r3, #7
 8015146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801514a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801514e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015152:	441a      	add	r2, r3
 8015154:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015158:	f1a3 010f 	sub.w	r1, r3, #15
 801515c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015160:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015168:	ea4f 11f3 	mov.w	r1, r3, ror #7
 801516c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015170:	f1a3 000f 	sub.w	r0, r3, #15
 8015174:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015178:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801517c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015180:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8015184:	4059      	eors	r1, r3
 8015186:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801518a:	f1a3 000f 	sub.w	r0, r3, #15
 801518e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015192:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015196:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801519a:	08db      	lsrs	r3, r3, #3
 801519c:	404b      	eors	r3, r1
 801519e:	441a      	add	r2, r3
 80151a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151a4:	f1a3 0110 	sub.w	r1, r3, #16
 80151a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80151b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80151b4:	18d1      	adds	r1, r2, r3
 80151b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80151be:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80151c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 80151c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151ca:	3301      	adds	r3, #1
 80151cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80151d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80151d6:	dd91      	ble.n	80150fc <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 80151d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 80151e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 80151f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	689b      	ldr	r3, [r3, #8]
 8015204:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 8015208:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801520c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	68db      	ldr	r3, [r3, #12]
 8015214:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 8015218:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801521c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	691b      	ldr	r3, [r3, #16]
 8015224:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8015228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801522c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	695b      	ldr	r3, [r3, #20]
 8015234:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8015238:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801523c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	699b      	ldr	r3, [r3, #24]
 8015244:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 8015248:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801524c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	69db      	ldr	r3, [r3, #28]
 8015254:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 8015258:	2300      	movs	r3, #0
 801525a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801525e:	e078      	b.n	8015352 <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 8015260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015264:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8015268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801526c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8015270:	405a      	eors	r2, r3
 8015272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015276:	ea4f 6373 	mov.w	r3, r3, ror #25
 801527a:	405a      	eors	r2, r3
 801527c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015280:	441a      	add	r2, r3
 8015282:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8015286:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801528a:	4019      	ands	r1, r3
 801528c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015290:	43d8      	mvns	r0, r3
 8015292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015296:	4003      	ands	r3, r0
 8015298:	404b      	eors	r3, r1
 801529a:	441a      	add	r2, r3
 801529c:	496e      	ldr	r1, [pc, #440]	@ (8015458 <mg_sha256_chunk+0x40c>)
 801529e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80152a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80152a6:	441a      	add	r2, r3
 80152a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80152b0:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80152b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80152b8:	4413      	add	r3, r2
 80152ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 80152be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152c2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80152c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152ca:	ea4f 3373 	mov.w	r3, r3, ror #13
 80152ce:	405a      	eors	r2, r3
 80152d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152d4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80152d8:	405a      	eors	r2, r3
 80152da:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80152de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80152e2:	4059      	eors	r1, r3
 80152e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152e8:	4019      	ands	r1, r3
 80152ea:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80152ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80152f2:	4003      	ands	r3, r0
 80152f4:	404b      	eors	r3, r1
 80152f6:	4413      	add	r3, r2
 80152f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 80152fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015300:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 8015304:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015308:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 801530c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015310:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 8015314:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8015318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801531c:	4413      	add	r3, r2
 801531e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 8015322:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8015326:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 801532a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801532e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 8015332:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 801533a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801533e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8015342:	4413      	add	r3, r2
 8015344:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8015348:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801534c:	3301      	adds	r3, #1
 801534e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015352:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015356:	2b3f      	cmp	r3, #63	@ 0x3f
 8015358:	dd82      	ble.n	8015260 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 801535a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801535e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801536a:	441a      	add	r2, r3
 801536c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015370:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 8015378:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801537c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	685a      	ldr	r2, [r3, #4]
 8015384:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015388:	441a      	add	r2, r3
 801538a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801538e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 8015396:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801539a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	689a      	ldr	r2, [r3, #8]
 80153a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80153a6:	441a      	add	r2, r3
 80153a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 80153b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	68da      	ldr	r2, [r3, #12]
 80153c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80153c4:	441a      	add	r2, r3
 80153c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 80153d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	691a      	ldr	r2, [r3, #16]
 80153de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80153e2:	441a      	add	r2, r3
 80153e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 80153f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80153f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	695a      	ldr	r2, [r3, #20]
 80153fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015400:	441a      	add	r2, r3
 8015402:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015406:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 801540e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015412:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	699a      	ldr	r2, [r3, #24]
 801541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801541e:	441a      	add	r2, r3
 8015420:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015424:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 801542c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015430:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	69da      	ldr	r2, [r3, #28]
 8015438:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801543c:	441a      	add	r2, r3
 801543e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015442:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	61da      	str	r2, [r3, #28]
}
 801544a:	bf00      	nop
 801544c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr
 8015458:	0802d560 	.word	0x0802d560

0801545c <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 801545c:	b5b0      	push	{r4, r5, r7, lr}
 801545e:	b086      	sub	sp, #24
 8015460:	af00      	add	r7, sp, #0
 8015462:	60f8      	str	r0, [r7, #12]
 8015464:	60b9      	str	r1, [r7, #8]
 8015466:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 8015468:	2300      	movs	r3, #0
 801546a:	617b      	str	r3, [r7, #20]
 801546c:	e026      	b.n	80154bc <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 801546e:	68ba      	ldr	r2, [r7, #8]
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	441a      	add	r2, r3
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015478:	7811      	ldrb	r1, [r2, #0]
 801547a:	68fa      	ldr	r2, [r7, #12]
 801547c:	4413      	add	r3, r2
 801547e:	460a      	mov	r2, r1
 8015480:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015488:	1c5a      	adds	r2, r3, #1
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	629a      	str	r2, [r3, #40]	@ 0x28
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015492:	2b40      	cmp	r3, #64	@ 0x40
 8015494:	d10f      	bne.n	80154b6 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 8015496:	68f8      	ldr	r0, [r7, #12]
 8015498:	f7ff fdd8 	bl	801504c <mg_sha256_chunk>
      ctx->bits += 512;
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154a2:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 80154a6:	f143 0500 	adc.w	r5, r3, #0
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	2200      	movs	r2, #0
 80154b4:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	3301      	adds	r3, #1
 80154ba:	617b      	str	r3, [r7, #20]
 80154bc:	697a      	ldr	r2, [r7, #20]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d3d4      	bcc.n	801546e <mg_sha256_update+0x12>
    }
  }
}
 80154c4:	bf00      	nop
 80154c6:	bf00      	nop
 80154c8:	3718      	adds	r7, #24
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bdb0      	pop	{r4, r5, r7, pc}

080154ce <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 80154ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154de:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	2b37      	cmp	r3, #55	@ 0x37
 80154e4:	d814      	bhi.n	8015510 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	1c5a      	adds	r2, r3, #1
 80154ea:	60fa      	str	r2, [r7, #12]
 80154ec:	683a      	ldr	r2, [r7, #0]
 80154ee:	4413      	add	r3, r2
 80154f0:	2280      	movs	r2, #128	@ 0x80
 80154f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 80154f6:	e007      	b.n	8015508 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	1c5a      	adds	r2, r3, #1
 80154fc:	60fa      	str	r2, [r7, #12]
 80154fe:	683a      	ldr	r2, [r7, #0]
 8015500:	4413      	add	r3, r2
 8015502:	2200      	movs	r2, #0
 8015504:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	2b37      	cmp	r3, #55	@ 0x37
 801550c:	d9f4      	bls.n	80154f8 <mg_sha256_final+0x2a>
 801550e:	e01d      	b.n	801554c <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	1c5a      	adds	r2, r3, #1
 8015514:	60fa      	str	r2, [r7, #12]
 8015516:	683a      	ldr	r2, [r7, #0]
 8015518:	4413      	add	r3, r2
 801551a:	2280      	movs	r2, #128	@ 0x80
 801551c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8015520:	e007      	b.n	8015532 <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	1c5a      	adds	r2, r3, #1
 8015526:	60fa      	str	r2, [r7, #12]
 8015528:	683a      	ldr	r2, [r7, #0]
 801552a:	4413      	add	r3, r2
 801552c:	2200      	movs	r2, #0
 801552e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	2b3f      	cmp	r3, #63	@ 0x3f
 8015536:	d9f4      	bls.n	8015522 <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8015538:	6838      	ldr	r0, [r7, #0]
 801553a:	f7ff fd87 	bl	801504c <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	332c      	adds	r3, #44	@ 0x2c
 8015542:	2238      	movs	r2, #56	@ 0x38
 8015544:	2100      	movs	r1, #0
 8015546:	4618      	mov	r0, r3
 8015548:	f012 f922 	bl	8027790 <memset>
  }

  ctx->bits += ctx->len * 8;
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015552:	6839      	ldr	r1, [r7, #0]
 8015554:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8015556:	00c9      	lsls	r1, r1, #3
 8015558:	2000      	movs	r0, #0
 801555a:	460c      	mov	r4, r1
 801555c:	4605      	mov	r5, r0
 801555e:	eb12 0804 	adds.w	r8, r2, r4
 8015562:	eb43 0905 	adc.w	r9, r3, r5
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015572:	b2d2      	uxtb	r2, r2
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015580:	f04f 0200 	mov.w	r2, #0
 8015584:	f04f 0300 	mov.w	r3, #0
 8015588:	0a02      	lsrs	r2, r0, #8
 801558a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801558e:	0a0b      	lsrs	r3, r1, #8
 8015590:	b2d2      	uxtb	r2, r2
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801559e:	f04f 0200 	mov.w	r2, #0
 80155a2:	f04f 0300 	mov.w	r3, #0
 80155a6:	0c02      	lsrs	r2, r0, #16
 80155a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80155ac:	0c0b      	lsrs	r3, r1, #16
 80155ae:	b2d2      	uxtb	r2, r2
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80155bc:	f04f 0200 	mov.w	r2, #0
 80155c0:	f04f 0300 	mov.w	r3, #0
 80155c4:	0e02      	lsrs	r2, r0, #24
 80155c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80155ca:	0e0b      	lsrs	r3, r1, #24
 80155cc:	b2d2      	uxtb	r2, r2
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80155da:	f04f 0200 	mov.w	r2, #0
 80155de:	f04f 0300 	mov.w	r3, #0
 80155e2:	000a      	movs	r2, r1
 80155e4:	2300      	movs	r3, #0
 80155e6:	b2d2      	uxtb	r2, r2
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80155f4:	f04f 0200 	mov.w	r2, #0
 80155f8:	f04f 0300 	mov.w	r3, #0
 80155fc:	0a0a      	lsrs	r2, r1, #8
 80155fe:	2300      	movs	r3, #0
 8015600:	b2d2      	uxtb	r2, r2
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801560e:	f04f 0200 	mov.w	r2, #0
 8015612:	f04f 0300 	mov.w	r3, #0
 8015616:	0c0a      	lsrs	r2, r1, #16
 8015618:	2300      	movs	r3, #0
 801561a:	b2d2      	uxtb	r2, r2
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8015628:	f04f 0200 	mov.w	r2, #0
 801562c:	f04f 0300 	mov.w	r3, #0
 8015630:	0e0a      	lsrs	r2, r1, #24
 8015632:	2300      	movs	r3, #0
 8015634:	b2d2      	uxtb	r2, r2
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 801563c:	6838      	ldr	r0, [r7, #0]
 801563e:	f7ff fd05 	bl	801504c <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 8015642:	2300      	movs	r3, #0
 8015644:	60fb      	str	r3, [r7, #12]
 8015646:	e071      	b.n	801572c <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	681a      	ldr	r2, [r3, #0]
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	f1c3 0303 	rsb	r3, r3, #3
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	fa22 f103 	lsr.w	r1, r2, r3
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	4413      	add	r3, r2
 801565e:	b2ca      	uxtb	r2, r1
 8015660:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	685a      	ldr	r2, [r3, #4]
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f1c3 0303 	rsb	r3, r3, #3
 801566c:	00db      	lsls	r3, r3, #3
 801566e:	fa22 f103 	lsr.w	r1, r2, r3
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	3304      	adds	r3, #4
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	4413      	add	r3, r2
 801567a:	b2ca      	uxtb	r2, r1
 801567c:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	689a      	ldr	r2, [r3, #8]
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f1c3 0303 	rsb	r3, r3, #3
 8015688:	00db      	lsls	r3, r3, #3
 801568a:	fa22 f103 	lsr.w	r1, r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	3308      	adds	r3, #8
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	4413      	add	r3, r2
 8015696:	b2ca      	uxtb	r2, r1
 8015698:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	68da      	ldr	r2, [r3, #12]
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	f1c3 0303 	rsb	r3, r3, #3
 80156a4:	00db      	lsls	r3, r3, #3
 80156a6:	fa22 f103 	lsr.w	r1, r2, r3
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	330c      	adds	r3, #12
 80156ae:	687a      	ldr	r2, [r7, #4]
 80156b0:	4413      	add	r3, r2
 80156b2:	b2ca      	uxtb	r2, r1
 80156b4:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	691a      	ldr	r2, [r3, #16]
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	f1c3 0303 	rsb	r3, r3, #3
 80156c0:	00db      	lsls	r3, r3, #3
 80156c2:	fa22 f103 	lsr.w	r1, r2, r3
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	3310      	adds	r3, #16
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	4413      	add	r3, r2
 80156ce:	b2ca      	uxtb	r2, r1
 80156d0:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	695a      	ldr	r2, [r3, #20]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f1c3 0303 	rsb	r3, r3, #3
 80156dc:	00db      	lsls	r3, r3, #3
 80156de:	fa22 f103 	lsr.w	r1, r2, r3
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	3314      	adds	r3, #20
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	4413      	add	r3, r2
 80156ea:	b2ca      	uxtb	r2, r1
 80156ec:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	699a      	ldr	r2, [r3, #24]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	f1c3 0303 	rsb	r3, r3, #3
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	fa22 f103 	lsr.w	r1, r2, r3
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	3318      	adds	r3, #24
 8015702:	687a      	ldr	r2, [r7, #4]
 8015704:	4413      	add	r3, r2
 8015706:	b2ca      	uxtb	r2, r1
 8015708:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	69da      	ldr	r2, [r3, #28]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f1c3 0303 	rsb	r3, r3, #3
 8015714:	00db      	lsls	r3, r3, #3
 8015716:	fa22 f103 	lsr.w	r1, r2, r3
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	331c      	adds	r3, #28
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	4413      	add	r3, r2
 8015722:	b2ca      	uxtb	r2, r1
 8015724:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	3301      	adds	r3, #1
 801572a:	60fb      	str	r3, [r7, #12]
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2b03      	cmp	r3, #3
 8015730:	d98a      	bls.n	8015648 <mg_sha256_final+0x17a>
  }
}
 8015732:	bf00      	nop
 8015734:	bf00      	nop
 8015736:	3710      	adds	r7, #16
 8015738:	46bd      	mov	sp, r7
 801573a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801573e <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 801573e:	b580      	push	{r7, lr}
 8015740:	b0a0      	sub	sp, #128	@ 0x80
 8015742:	af00      	add	r7, sp, #0
 8015744:	60f8      	str	r0, [r7, #12]
 8015746:	60b9      	str	r1, [r7, #8]
 8015748:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 801574a:	f107 0310 	add.w	r3, r7, #16
 801574e:	4618      	mov	r0, r3
 8015750:	f7ff fc40 	bl	8014fd4 <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 8015754:	f107 0310 	add.w	r3, r7, #16
 8015758:	687a      	ldr	r2, [r7, #4]
 801575a:	68b9      	ldr	r1, [r7, #8]
 801575c:	4618      	mov	r0, r3
 801575e:	f7ff fe7d 	bl	801545c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8015762:	f107 0310 	add.w	r3, r7, #16
 8015766:	4619      	mov	r1, r3
 8015768:	68f8      	ldr	r0, [r7, #12]
 801576a:	f7ff feb0 	bl	80154ce <mg_sha256_final>
}
 801576e:	bf00      	nop
 8015770:	3780      	adds	r7, #128	@ 0x80
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}

08015776 <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 8015776:	b590      	push	{r4, r7, lr}
 8015778:	b0d3      	sub	sp, #332	@ 0x14c
 801577a:	af00      	add	r7, sp, #0
 801577c:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8015780:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8015784:	6020      	str	r0, [r4, #0]
 8015786:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 801578a:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 801578e:	6001      	str	r1, [r0, #0]
 8015790:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8015794:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8015798:	600a      	str	r2, [r1, #0]
 801579a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801579e:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80157a2:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 80157a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80157a8:	2240      	movs	r2, #64	@ 0x40
 80157aa:	2100      	movs	r1, #0
 80157ac:	4618      	mov	r0, r3
 80157ae:	f011 ffef 	bl	8027790 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 80157b2:	f107 0310 	add.w	r3, r7, #16
 80157b6:	2240      	movs	r2, #64	@ 0x40
 80157b8:	2136      	movs	r1, #54	@ 0x36
 80157ba:	4618      	mov	r0, r3
 80157bc:	f011 ffe8 	bl	8027790 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 80157c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80157c4:	2240      	movs	r2, #64	@ 0x40
 80157c6:	215c      	movs	r1, #92	@ 0x5c
 80157c8:	4618      	mov	r0, r3
 80157ca:	f011 ffe1 	bl	8027790 <memset>
  if (keysz < 64) {
 80157ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80157d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80157da:	d815      	bhi.n	8015808 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 80157dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80157e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d029      	beq.n	801583e <mg_hmac_sha256+0xc8>
 80157ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80157ee:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80157f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80157f6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80157fa:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80157fe:	6812      	ldr	r2, [r2, #0]
 8015800:	6819      	ldr	r1, [r3, #0]
 8015802:	f011 ffab 	bl	802775c <memmove>
 8015806:	e01a      	b.n	801583e <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 8015808:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff fbe1 	bl	8014fd4 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 8015812:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015816:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 801581a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801581e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8015822:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8015826:	6812      	ldr	r2, [r2, #0]
 8015828:	6819      	ldr	r1, [r3, #0]
 801582a:	f7ff fe17 	bl	801545c <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 801582e:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8015832:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8015836:	4611      	mov	r1, r2
 8015838:	4618      	mov	r0, r3
 801583a:	f7ff fe48 	bl	80154ce <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 801583e:	2300      	movs	r3, #0
 8015840:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8015844:	e032      	b.n	80158ac <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 8015846:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801584a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 801584e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015852:	4413      	add	r3, r2
 8015854:	781a      	ldrb	r2, [r3, #0]
 8015856:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 801585a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801585e:	440b      	add	r3, r1
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	4053      	eors	r3, r2
 8015864:	b2d9      	uxtb	r1, r3
 8015866:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801586a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 801586e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015872:	4413      	add	r3, r2
 8015874:	460a      	mov	r2, r1
 8015876:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 8015878:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801587c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015880:	4413      	add	r3, r2
 8015882:	781a      	ldrb	r2, [r3, #0]
 8015884:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8015888:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801588c:	440b      	add	r3, r1
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	4053      	eors	r3, r2
 8015892:	b2d9      	uxtb	r1, r3
 8015894:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8015898:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801589c:	4413      	add	r3, r2
 801589e:	460a      	mov	r2, r1
 80158a0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 80158a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80158a6:	3301      	adds	r3, #1
 80158a8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80158ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80158b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80158b2:	d9c8      	bls.n	8015846 <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 80158b4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7ff fb8b 	bl	8014fd4 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 80158be:	f107 0110 	add.w	r1, r7, #16
 80158c2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80158c6:	2240      	movs	r2, #64	@ 0x40
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7ff fdc7 	bl	801545c <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 80158ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80158d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80158d6:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80158da:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80158de:	6819      	ldr	r1, [r3, #0]
 80158e0:	f7ff fdbc 	bl	801545c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 80158e4:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80158e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80158ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80158f0:	4611      	mov	r1, r2
 80158f2:	6818      	ldr	r0, [r3, #0]
 80158f4:	f7ff fdeb 	bl	80154ce <mg_sha256_final>
  mg_sha256_init(&ctx);
 80158f8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7ff fb69 	bl	8014fd4 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 8015902:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8015906:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801590a:	2240      	movs	r2, #64	@ 0x40
 801590c:	4618      	mov	r0, r3
 801590e:	f7ff fda5 	bl	801545c <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 8015912:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8015916:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801591a:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 801591e:	2220      	movs	r2, #32
 8015920:	6819      	ldr	r1, [r3, #0]
 8015922:	f7ff fd9b 	bl	801545c <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8015926:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801592a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801592e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015932:	4611      	mov	r1, r2
 8015934:	6818      	ldr	r0, [r3, #0]
 8015936:	f7ff fdca 	bl	80154ce <mg_sha256_final>
}
 801593a:	bf00      	nop
 801593c:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8015940:	46bd      	mov	sp, r7
 8015942:	bd90      	pop	{r4, r7, pc}

08015944 <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 8015944:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015948:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 801594c:	af00      	add	r7, sp, #0
 801594e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015952:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015956:	6018      	str	r0, [r3, #0]
 8015958:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801595c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015960:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8015962:	2300      	movs	r3, #0
 8015964:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015968:	2300      	movs	r3, #0
 801596a:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 801596e:	e113      	b.n	8015b98 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8015970:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 8015974:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015978:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	4413      	add	r3, r2
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	b2db      	uxtb	r3, r3
 8015984:	2200      	movs	r2, #0
 8015986:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801598a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801598e:	f04f 0000 	mov.w	r0, #0
 8015992:	f04f 0100 	mov.w	r1, #0
 8015996:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801599a:	0619      	lsls	r1, r3, #24
 801599c:	2000      	movs	r0, #0
 801599e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80159a2:	1c5a      	adds	r2, r3, #1
 80159a4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80159a8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	4413      	add	r3, r2
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	2200      	movs	r2, #0
 80159b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80159ba:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80159be:	f04f 0200 	mov.w	r2, #0
 80159c2:	f04f 0300 	mov.w	r3, #0
 80159c6:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 80159ca:	0433      	lsls	r3, r6, #16
 80159cc:	2200      	movs	r2, #0
 80159ce:	ea40 0602 	orr.w	r6, r0, r2
 80159d2:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 80159d6:	430b      	orrs	r3, r1
 80159d8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 80159dc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80159e0:	1c9a      	adds	r2, r3, #2
 80159e2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80159e6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	4413      	add	r3, r2
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	b2db      	uxtb	r3, r3
 80159f2:	2200      	movs	r2, #0
 80159f4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80159f8:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80159fc:	f04f 0200 	mov.w	r2, #0
 8015a00:	f04f 0300 	mov.w	r3, #0
 8015a04:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8015a08:	020b      	lsls	r3, r1, #8
 8015a0a:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8015a0c:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8015a10:	4311      	orrs	r1, r2
 8015a12:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8015a16:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8015a1a:	430b      	orrs	r3, r1
 8015a1c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8015a20:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015a24:	1cda      	adds	r2, r3, #3
 8015a26:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015a2a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	4413      	add	r3, r2
 8015a32:	781b      	ldrb	r3, [r3, #0]
 8015a34:	b2db      	uxtb	r3, r3
 8015a36:	2200      	movs	r2, #0
 8015a38:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8015a3c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8015a40:	f04f 0200 	mov.w	r2, #0
 8015a44:	f04f 0300 	mov.w	r3, #0
 8015a48:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8015a4c:	000b      	movs	r3, r1
 8015a4e:	2200      	movs	r2, #0
 8015a50:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8015a54:	4311      	orrs	r1, r2
 8015a56:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8015a5a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8015a5e:	430b      	orrs	r3, r1
 8015a60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8015a64:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015a68:	1d1a      	adds	r2, r3, #4
 8015a6a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015a6e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4413      	add	r3, r2
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8015a80:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8015a84:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 8015a88:	460b      	mov	r3, r1
 8015a8a:	0a1b      	lsrs	r3, r3, #8
 8015a8c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8015a90:	460b      	mov	r3, r1
 8015a92:	061b      	lsls	r3, r3, #24
 8015a94:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8015a98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8015a9c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	ea43 0a02 	orr.w	sl, r3, r2
 8015aa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8015aaa:	460a      	mov	r2, r1
 8015aac:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8015ab0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015ab4:	1d5a      	adds	r2, r3, #5
 8015ab6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015aba:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	b2db      	uxtb	r3, r3
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8015acc:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8015ad0:	f04f 0200 	mov.w	r2, #0
 8015ad4:	f04f 0300 	mov.w	r3, #0
 8015ad8:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8015adc:	040b      	lsls	r3, r1, #16
 8015ade:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8015ae2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8015ae6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8015aea:	040a      	lsls	r2, r1, #16
 8015aec:	ea4a 0802 	orr.w	r8, sl, r2
 8015af0:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8015af4:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015af8:	1d9a      	adds	r2, r3, #6
 8015afa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015afe:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	4413      	add	r3, r2
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8015b10:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8015b14:	f04f 0200 	mov.w	r2, #0
 8015b18:	f04f 0300 	mov.w	r3, #0
 8015b1c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8015b20:	020b      	lsls	r3, r1, #8
 8015b22:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8015b26:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8015b2a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8015b2e:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8015b30:	ea48 0402 	orr.w	r4, r8, r2
 8015b34:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8015b38:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015b3c:	1dda      	adds	r2, r3, #7
 8015b3e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015b42:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	4413      	add	r3, r2
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	b2db      	uxtb	r3, r3
 8015b4e:	2200      	movs	r2, #0
 8015b50:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8015b54:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8015b58:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	4323      	orrs	r3, r4
 8015b60:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8015b64:	4613      	mov	r3, r2
 8015b66:	432b      	orrs	r3, r5
 8015b68:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8015b6c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015b70:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015b74:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015b78:	00db      	lsls	r3, r3, #3
 8015b7a:	4413      	add	r3, r2
 8015b7c:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8015b80:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8015b84:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015b88:	3301      	adds	r3, #1
 8015b8a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015b8e:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8015b92:	3308      	adds	r3, #8
 8015b94:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8015b98:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015b9c:	2b0f      	cmp	r3, #15
 8015b9e:	f77f aee7 	ble.w	8015970 <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 8015ba2:	e0f8      	b.n	8015d96 <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 8015ba4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015ba8:	1e99      	subs	r1, r3, #2
 8015baa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015bae:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015bb2:	00cb      	lsls	r3, r1, #3
 8015bb4:	4413      	add	r3, r2
 8015bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bba:	0358      	lsls	r0, r3, #13
 8015bbc:	0cd1      	lsrs	r1, r2, #19
 8015bbe:	4301      	orrs	r1, r0
 8015bc0:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8015bc4:	0351      	lsls	r1, r2, #13
 8015bc6:	0cdb      	lsrs	r3, r3, #19
 8015bc8:	430b      	orrs	r3, r1
 8015bca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8015bce:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015bd2:	1e99      	subs	r1, r3, #2
 8015bd4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015bd8:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015bdc:	00cb      	lsls	r3, r1, #3
 8015bde:	4413      	add	r3, r2
 8015be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be4:	0f50      	lsrs	r0, r2, #29
 8015be6:	00d9      	lsls	r1, r3, #3
 8015be8:	4301      	orrs	r1, r0
 8015bea:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8015bee:	0f59      	lsrs	r1, r3, #29
 8015bf0:	00d3      	lsls	r3, r2, #3
 8015bf2:	430b      	orrs	r3, r1
 8015bf4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8015bf8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8015bfc:	4623      	mov	r3, r4
 8015bfe:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8015c02:	4602      	mov	r2, r0
 8015c04:	4053      	eors	r3, r2
 8015c06:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8015c0a:	462b      	mov	r3, r5
 8015c0c:	460a      	mov	r2, r1
 8015c0e:	4053      	eors	r3, r2
 8015c10:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8015c14:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015c18:	1e99      	subs	r1, r3, #2
 8015c1a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015c1e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015c22:	00cb      	lsls	r3, r1, #3
 8015c24:	4413      	add	r3, r2
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	f04f 0000 	mov.w	r0, #0
 8015c2e:	f04f 0100 	mov.w	r1, #0
 8015c32:	0990      	lsrs	r0, r2, #6
 8015c34:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8015c38:	0999      	lsrs	r1, r3, #6
 8015c3a:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8015c3e:	4623      	mov	r3, r4
 8015c40:	4043      	eors	r3, r0
 8015c42:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8015c46:	462b      	mov	r3, r5
 8015c48:	404b      	eors	r3, r1
 8015c4a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8015c4e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015c52:	1fd9      	subs	r1, r3, #7
 8015c54:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015c58:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015c5c:	00cb      	lsls	r3, r1, #3
 8015c5e:	4413      	add	r3, r2
 8015c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c64:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8015c68:	4621      	mov	r1, r4
 8015c6a:	1889      	adds	r1, r1, r2
 8015c6c:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8015c70:	4629      	mov	r1, r5
 8015c72:	eb41 0303 	adc.w	r3, r1, r3
 8015c76:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015c7a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015c7e:	f1a3 010f 	sub.w	r1, r3, #15
 8015c82:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015c86:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015c8a:	00cb      	lsls	r3, r1, #3
 8015c8c:	4413      	add	r3, r2
 8015c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c92:	07d8      	lsls	r0, r3, #31
 8015c94:	0851      	lsrs	r1, r2, #1
 8015c96:	4301      	orrs	r1, r0
 8015c98:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8015c9c:	07d1      	lsls	r1, r2, #31
 8015c9e:	085b      	lsrs	r3, r3, #1
 8015ca0:	430b      	orrs	r3, r1
 8015ca2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015ca6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015caa:	f1a3 010f 	sub.w	r1, r3, #15
 8015cae:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015cb2:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015cb6:	00cb      	lsls	r3, r1, #3
 8015cb8:	4413      	add	r3, r2
 8015cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cbe:	0618      	lsls	r0, r3, #24
 8015cc0:	0a11      	lsrs	r1, r2, #8
 8015cc2:	4301      	orrs	r1, r0
 8015cc4:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8015cc8:	0611      	lsls	r1, r2, #24
 8015cca:	0a1b      	lsrs	r3, r3, #8
 8015ccc:	430b      	orrs	r3, r1
 8015cce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8015cd2:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8015cd6:	4623      	mov	r3, r4
 8015cd8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8015cdc:	4602      	mov	r2, r0
 8015cde:	4053      	eors	r3, r2
 8015ce0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8015ce4:	462b      	mov	r3, r5
 8015ce6:	460a      	mov	r2, r1
 8015ce8:	4053      	eors	r3, r2
 8015cea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8015cee:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015cf2:	f1a3 010f 	sub.w	r1, r3, #15
 8015cf6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015cfa:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015cfe:	00cb      	lsls	r3, r1, #3
 8015d00:	4413      	add	r3, r2
 8015d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d06:	f04f 0000 	mov.w	r0, #0
 8015d0a:	f04f 0100 	mov.w	r1, #0
 8015d0e:	09d0      	lsrs	r0, r2, #7
 8015d10:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8015d14:	09d9      	lsrs	r1, r3, #7
 8015d16:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8015d1a:	4623      	mov	r3, r4
 8015d1c:	4043      	eors	r3, r0
 8015d1e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015d22:	462b      	mov	r3, r5
 8015d24:	404b      	eors	r3, r1
 8015d26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8015d2a:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8015d2e:	4623      	mov	r3, r4
 8015d30:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8015d34:	4602      	mov	r2, r0
 8015d36:	189b      	adds	r3, r3, r2
 8015d38:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8015d3c:	462b      	mov	r3, r5
 8015d3e:	460a      	mov	r2, r1
 8015d40:	4153      	adcs	r3, r2
 8015d42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8015d46:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015d4a:	f1a3 0110 	sub.w	r1, r3, #16
 8015d4e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d52:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015d56:	00cb      	lsls	r3, r1, #3
 8015d58:	4413      	add	r3, r2
 8015d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5e:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8015d62:	4621      	mov	r1, r4
 8015d64:	1889      	adds	r1, r1, r2
 8015d66:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8015d6a:	4629      	mov	r1, r5
 8015d6c:	eb41 0303 	adc.w	r3, r1, r3
 8015d70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8015d74:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015d78:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015d7c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015d80:	00db      	lsls	r3, r3, #3
 8015d82:	4413      	add	r3, r2
 8015d84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8015d88:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 8015d8c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015d90:	3301      	adds	r3, #1
 8015d92:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015d96:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015d9a:	2b4f      	cmp	r3, #79	@ 0x4f
 8015d9c:	f77f af02 	ble.w	8015ba4 <mg_sha384_transform+0x260>

  a = ctx->state[0];
 8015da0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015da4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dae:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 8015db2:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 8015db6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015dba:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015dc4:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8015dc8:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 8015dcc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015dd0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015dda:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8015dde:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 8015de2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015de6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015df0:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8015df4:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 8015df8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015dfc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015e06:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8015e0a:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 8015e0e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015e12:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8015e1c:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8015e20:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8015e24:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015e28:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8015e32:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8015e36:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 8015e3a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015e3e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015e48:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8015e4c:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 8015e50:	2300      	movs	r3, #0
 8015e52:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015e56:	e1c3      	b.n	80161e0 <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 8015e58:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015e5c:	049a      	lsls	r2, r3, #18
 8015e5e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015e62:	0b9b      	lsrs	r3, r3, #14
 8015e64:	4313      	orrs	r3, r2
 8015e66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8015e6a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015e6e:	049a      	lsls	r2, r3, #18
 8015e70:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015e74:	0b9b      	lsrs	r3, r3, #14
 8015e76:	4313      	orrs	r3, r2
 8015e78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8015e7c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015e80:	039a      	lsls	r2, r3, #14
 8015e82:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015e86:	0c9b      	lsrs	r3, r3, #18
 8015e88:	4313      	orrs	r3, r2
 8015e8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8015e8e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015e92:	039a      	lsls	r2, r3, #14
 8015e94:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015e98:	0c9b      	lsrs	r3, r3, #18
 8015e9a:	4313      	orrs	r3, r2
 8015e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8015ea0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8015ea4:	4623      	mov	r3, r4
 8015ea6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8015eaa:	4602      	mov	r2, r0
 8015eac:	4053      	eors	r3, r2
 8015eae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8015eb2:	462b      	mov	r3, r5
 8015eb4:	460a      	mov	r2, r1
 8015eb6:	4053      	eors	r3, r2
 8015eb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015ebc:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015ec0:	0a5a      	lsrs	r2, r3, #9
 8015ec2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015ec6:	05db      	lsls	r3, r3, #23
 8015ec8:	4313      	orrs	r3, r2
 8015eca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8015ece:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015ed2:	0a5a      	lsrs	r2, r3, #9
 8015ed4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015ed8:	05db      	lsls	r3, r3, #23
 8015eda:	4313      	orrs	r3, r2
 8015edc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015ee0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8015ee4:	4623      	mov	r3, r4
 8015ee6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8015eea:	4602      	mov	r2, r0
 8015eec:	4053      	eors	r3, r2
 8015eee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8015ef2:	462b      	mov	r3, r5
 8015ef4:	460a      	mov	r2, r1
 8015ef6:	4053      	eors	r3, r2
 8015ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015efc:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8015f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f04:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8015f08:	4621      	mov	r1, r4
 8015f0a:	1889      	adds	r1, r1, r2
 8015f0c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8015f10:	4629      	mov	r1, r5
 8015f12:	eb41 0303 	adc.w	r3, r1, r3
 8015f16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8015f1a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8015f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015f22:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8015f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2a:	ea00 0402 	and.w	r4, r0, r2
 8015f2e:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8015f32:	400b      	ands	r3, r1
 8015f34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8015f38:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8015f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f40:	43d1      	mvns	r1, r2
 8015f42:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8015f46:	43db      	mvns	r3, r3
 8015f48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015f4c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f54:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8015f58:	4621      	mov	r1, r4
 8015f5a:	4011      	ands	r1, r2
 8015f5c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8015f60:	4629      	mov	r1, r5
 8015f62:	400b      	ands	r3, r1
 8015f64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015f68:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8015f6c:	4623      	mov	r3, r4
 8015f6e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8015f72:	4602      	mov	r2, r0
 8015f74:	4053      	eors	r3, r2
 8015f76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015f7a:	462b      	mov	r3, r5
 8015f7c:	460a      	mov	r2, r1
 8015f7e:	4053      	eors	r3, r2
 8015f80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015f84:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8015f88:	4623      	mov	r3, r4
 8015f8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8015f8e:	4602      	mov	r2, r0
 8015f90:	189b      	adds	r3, r3, r2
 8015f92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015f96:	462b      	mov	r3, r5
 8015f98:	460a      	mov	r2, r1
 8015f9a:	4153      	adcs	r3, r2
 8015f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015fa0:	4a8e      	ldr	r2, [pc, #568]	@ (80161dc <mg_sha384_transform+0x898>)
 8015fa2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015fa6:	00db      	lsls	r3, r3, #3
 8015fa8:	4413      	add	r3, r2
 8015faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fae:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8015fb2:	4621      	mov	r1, r4
 8015fb4:	1889      	adds	r1, r1, r2
 8015fb6:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8015fba:	4629      	mov	r1, r5
 8015fbc:	eb41 0303 	adc.w	r3, r1, r3
 8015fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8015fc4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015fc8:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015fcc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	4413      	add	r3, r2
 8015fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fd8:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8015fdc:	4621      	mov	r1, r4
 8015fde:	1889      	adds	r1, r1, r2
 8015fe0:	61b9      	str	r1, [r7, #24]
 8015fe2:	4629      	mov	r1, r5
 8015fe4:	eb41 0303 	adc.w	r3, r1, r3
 8015fe8:	61fb      	str	r3, [r7, #28]
 8015fea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015fee:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8015ff2:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 8015ff6:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015ffa:	011a      	lsls	r2, r3, #4
 8015ffc:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016000:	0f1b      	lsrs	r3, r3, #28
 8016002:	4313      	orrs	r3, r2
 8016004:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016008:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801600c:	011a      	lsls	r2, r3, #4
 801600e:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016012:	0f1b      	lsrs	r3, r3, #28
 8016014:	4313      	orrs	r3, r2
 8016016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801601a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801601e:	089a      	lsrs	r2, r3, #2
 8016020:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016024:	079b      	lsls	r3, r3, #30
 8016026:	4313      	orrs	r3, r2
 8016028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801602c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016030:	089a      	lsrs	r2, r3, #2
 8016032:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016036:	079b      	lsls	r3, r3, #30
 8016038:	4313      	orrs	r3, r2
 801603a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801603e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8016042:	4623      	mov	r3, r4
 8016044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8016048:	4602      	mov	r2, r0
 801604a:	4053      	eors	r3, r2
 801604c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8016050:	462b      	mov	r3, r5
 8016052:	460a      	mov	r2, r1
 8016054:	4053      	eors	r3, r2
 8016056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801605a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801605e:	09da      	lsrs	r2, r3, #7
 8016060:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016064:	065b      	lsls	r3, r3, #25
 8016066:	4313      	orrs	r3, r2
 8016068:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801606c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016070:	09da      	lsrs	r2, r3, #7
 8016072:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016076:	065b      	lsls	r3, r3, #25
 8016078:	4313      	orrs	r3, r2
 801607a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801607e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8016082:	4623      	mov	r3, r4
 8016084:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8016088:	4602      	mov	r2, r0
 801608a:	4053      	eors	r3, r2
 801608c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016090:	462b      	mov	r3, r5
 8016092:	460a      	mov	r2, r1
 8016094:	4053      	eors	r3, r2
 8016096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801609a:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801609e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80160a2:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80160a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160aa:	ea80 0402 	eor.w	r4, r0, r2
 80160ae:	67bc      	str	r4, [r7, #120]	@ 0x78
 80160b0:	404b      	eors	r3, r1
 80160b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80160b4:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80160b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160bc:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80160c0:	4621      	mov	r1, r4
 80160c2:	4011      	ands	r1, r2
 80160c4:	6739      	str	r1, [r7, #112]	@ 0x70
 80160c6:	4629      	mov	r1, r5
 80160c8:	400b      	ands	r3, r1
 80160ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80160cc:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80160d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80160d4:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80160d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160dc:	ea00 0402 	and.w	r4, r0, r2
 80160e0:	66bc      	str	r4, [r7, #104]	@ 0x68
 80160e2:	400b      	ands	r3, r1
 80160e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80160e6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80160ea:	4623      	mov	r3, r4
 80160ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80160f0:	4602      	mov	r2, r0
 80160f2:	4053      	eors	r3, r2
 80160f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80160f6:	462b      	mov	r3, r5
 80160f8:	460a      	mov	r2, r1
 80160fa:	4053      	eors	r3, r2
 80160fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80160fe:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8016102:	4623      	mov	r3, r4
 8016104:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8016108:	4602      	mov	r2, r0
 801610a:	189b      	adds	r3, r3, r2
 801610c:	613b      	str	r3, [r7, #16]
 801610e:	462b      	mov	r3, r5
 8016110:	460a      	mov	r2, r1
 8016112:	4153      	adcs	r3, r2
 8016114:	617b      	str	r3, [r7, #20]
 8016116:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801611a:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 801611e:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 8016122:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8016126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612a:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 801612e:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 8016132:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8016136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613a:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 801613e:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 8016142:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8016146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614a:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 801614e:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 8016152:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8016156:	e9d3 0100 	ldrd	r0, r1, [r3]
 801615a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016162:	1884      	adds	r4, r0, r2
 8016164:	60bc      	str	r4, [r7, #8]
 8016166:	eb41 0303 	adc.w	r3, r1, r3
 801616a:	60fb      	str	r3, [r7, #12]
 801616c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016170:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 8016174:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 8016178:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 801617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016180:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8016184:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 8016188:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016190:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8016194:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 8016198:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 80161a4:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 80161a8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80161ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80161b0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80161b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b8:	1884      	adds	r4, r0, r2
 80161ba:	603c      	str	r4, [r7, #0]
 80161bc:	eb41 0303 	adc.w	r3, r1, r3
 80161c0:	607b      	str	r3, [r7, #4]
 80161c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80161c6:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 80161ca:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 80161ce:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80161d2:	3301      	adds	r3, #1
 80161d4:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80161d8:	e002      	b.n	80161e0 <mg_sha384_transform+0x89c>
 80161da:	bf00      	nop
 80161dc:	0802d660 	.word	0x0802d660
 80161e0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80161e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80161e6:	f77f ae37 	ble.w	8015e58 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 80161ea:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80161ee:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80161f8:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80161fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016200:	1884      	adds	r4, r0, r2
 8016202:	65bc      	str	r4, [r7, #88]	@ 0x58
 8016204:	eb41 0303 	adc.w	r3, r1, r3
 8016208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801620a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801620e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8016218:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 801621c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016220:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801622a:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016232:	1884      	adds	r4, r0, r2
 8016234:	653c      	str	r4, [r7, #80]	@ 0x50
 8016236:	eb41 0303 	adc.w	r3, r1, r3
 801623a:	657b      	str	r3, [r7, #84]	@ 0x54
 801623c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016240:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801624a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 801624e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016252:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801625c:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8016260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016264:	1884      	adds	r4, r0, r2
 8016266:	64bc      	str	r4, [r7, #72]	@ 0x48
 8016268:	eb41 0303 	adc.w	r3, r1, r3
 801626c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801626e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016272:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801627c:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 8016280:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016284:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801628e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8016292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016296:	1884      	adds	r4, r0, r2
 8016298:	643c      	str	r4, [r7, #64]	@ 0x40
 801629a:	eb41 0303 	adc.w	r3, r1, r3
 801629e:	647b      	str	r3, [r7, #68]	@ 0x44
 80162a0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80162a4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80162ae:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 80162b2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80162b6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80162c0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80162c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c8:	1884      	adds	r4, r0, r2
 80162ca:	63bc      	str	r4, [r7, #56]	@ 0x38
 80162cc:	eb41 0303 	adc.w	r3, r1, r3
 80162d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80162d2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80162d6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80162e0:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 80162e4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80162e8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80162f2:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80162f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fa:	1884      	adds	r4, r0, r2
 80162fc:	633c      	str	r4, [r7, #48]	@ 0x30
 80162fe:	eb41 0303 	adc.w	r3, r1, r3
 8016302:	637b      	str	r3, [r7, #52]	@ 0x34
 8016304:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016308:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8016312:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 8016316:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801631a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8016324:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8016328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632c:	1884      	adds	r4, r0, r2
 801632e:	62bc      	str	r4, [r7, #40]	@ 0x28
 8016330:	eb41 0303 	adc.w	r3, r1, r3
 8016334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016336:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801633a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8016344:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 8016348:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801634c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8016356:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 801635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635e:	1884      	adds	r4, r0, r2
 8016360:	623c      	str	r4, [r7, #32]
 8016362:	eb41 0303 	adc.w	r3, r1, r3
 8016366:	627b      	str	r3, [r7, #36]	@ 0x24
 8016368:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801636c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8016376:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 801637a:	bf00      	nop
 801637c:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8016380:	46bd      	mov	sp, r7
 8016382:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016386:	4770      	bx	lr

08016388 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 8016388:	b480      	push	{r7}
 801638a:	b083      	sub	sp, #12
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2200      	movs	r2, #0
 8016394:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 8016398:	6879      	ldr	r1, [r7, #4]
 801639a:	f04f 0200 	mov.w	r2, #0
 801639e:	f04f 0300 	mov.w	r3, #0
 80163a2:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 80163a6:	6879      	ldr	r1, [r7, #4]
 80163a8:	f04f 0200 	mov.w	r2, #0
 80163ac:	f04f 0300 	mov.w	r3, #0
 80163b0:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 80163b4:	6879      	ldr	r1, [r7, #4]
 80163b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8016420 <mg_sha384_init+0x98>)
 80163b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163bc:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 80163c0:	6879      	ldr	r1, [r7, #4]
 80163c2:	a319      	add	r3, pc, #100	@ (adr r3, 8016428 <mg_sha384_init+0xa0>)
 80163c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 80163cc:	6879      	ldr	r1, [r7, #4]
 80163ce:	a318      	add	r3, pc, #96	@ (adr r3, 8016430 <mg_sha384_init+0xa8>)
 80163d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 80163d8:	6879      	ldr	r1, [r7, #4]
 80163da:	a317      	add	r3, pc, #92	@ (adr r3, 8016438 <mg_sha384_init+0xb0>)
 80163dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 80163e4:	6879      	ldr	r1, [r7, #4]
 80163e6:	a316      	add	r3, pc, #88	@ (adr r3, 8016440 <mg_sha384_init+0xb8>)
 80163e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 80163f0:	6879      	ldr	r1, [r7, #4]
 80163f2:	a315      	add	r3, pc, #84	@ (adr r3, 8016448 <mg_sha384_init+0xc0>)
 80163f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 80163fc:	6879      	ldr	r1, [r7, #4]
 80163fe:	a314      	add	r3, pc, #80	@ (adr r3, 8016450 <mg_sha384_init+0xc8>)
 8016400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016404:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 8016408:	6879      	ldr	r1, [r7, #4]
 801640a:	a313      	add	r3, pc, #76	@ (adr r3, 8016458 <mg_sha384_init+0xd0>)
 801640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016410:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8016414:	bf00      	nop
 8016416:	370c      	adds	r7, #12
 8016418:	46bd      	mov	sp, r7
 801641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641e:	4770      	bx	lr
 8016420:	c1059ed8 	.word	0xc1059ed8
 8016424:	cbbb9d5d 	.word	0xcbbb9d5d
 8016428:	367cd507 	.word	0x367cd507
 801642c:	629a292a 	.word	0x629a292a
 8016430:	3070dd17 	.word	0x3070dd17
 8016434:	9159015a 	.word	0x9159015a
 8016438:	f70e5939 	.word	0xf70e5939
 801643c:	152fecd8 	.word	0x152fecd8
 8016440:	ffc00b31 	.word	0xffc00b31
 8016444:	67332667 	.word	0x67332667
 8016448:	68581511 	.word	0x68581511
 801644c:	8eb44a87 	.word	0x8eb44a87
 8016450:	64f98fa7 	.word	0x64f98fa7
 8016454:	db0c2e0d 	.word	0xdb0c2e0d
 8016458:	befa4fa4 	.word	0xbefa4fa4
 801645c:	47b5481d 	.word	0x47b5481d

08016460 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8016460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016464:	b086      	sub	sp, #24
 8016466:	af00      	add	r7, sp, #0
 8016468:	60f8      	str	r0, [r7, #12]
 801646a:	60b9      	str	r1, [r7, #8]
 801646c:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 801646e:	2300      	movs	r3, #0
 8016470:	617b      	str	r3, [r7, #20]
 8016472:	e040      	b.n	80164f6 <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 8016474:	68ba      	ldr	r2, [r7, #8]
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	441a      	add	r2, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8016480:	7811      	ldrb	r1, [r2, #0]
 8016482:	68fa      	ldr	r2, [r7, #12]
 8016484:	4413      	add	r3, r2
 8016486:	460a      	mov	r2, r1
 8016488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8016492:	1c5a      	adds	r2, r3, #1
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80164a0:	2b80      	cmp	r3, #128	@ 0x80
 80164a2:	d125      	bne.n	80164f0 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	3340      	adds	r3, #64	@ 0x40
 80164a8:	4619      	mov	r1, r3
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f7ff fa4a 	bl	8015944 <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80164b6:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 80164ba:	f143 0500 	adc.w	r5, r3, #0
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80164ca:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80164ce:	f173 0300 	sbcs.w	r3, r3, #0
 80164d2:	d209      	bcs.n	80164e8 <mg_sha384_update+0x88>
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80164da:	f112 0801 	adds.w	r8, r2, #1
 80164de:	f143 0900 	adc.w	r9, r3, #0
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2200      	movs	r2, #0
 80164ec:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	3301      	adds	r3, #1
 80164f4:	617b      	str	r3, [r7, #20]
 80164f6:	697a      	ldr	r2, [r7, #20]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d3ba      	bcc.n	8016474 <mg_sha384_update+0x14>
    }
  }
}
 80164fe:	bf00      	nop
 8016500:	bf00      	nop
 8016502:	3718      	adds	r7, #24
 8016504:	46bd      	mov	sp, r7
 8016506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801650a <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 801650a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801650e:	b086      	sub	sp, #24
 8016510:	af00      	add	r7, sp, #0
 8016512:	60f8      	str	r0, [r7, #12]
 8016514:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801651c:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8016524:	2b6f      	cmp	r3, #111	@ 0x6f
 8016526:	d814      	bhi.n	8016552 <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	1c5a      	adds	r2, r3, #1
 801652c:	617a      	str	r2, [r7, #20]
 801652e:	68ba      	ldr	r2, [r7, #8]
 8016530:	4413      	add	r3, r2
 8016532:	2280      	movs	r2, #128	@ 0x80
 8016534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8016538:	e007      	b.n	801654a <mg_sha384_final+0x40>
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	1c5a      	adds	r2, r3, #1
 801653e:	617a      	str	r2, [r7, #20]
 8016540:	68ba      	ldr	r2, [r7, #8]
 8016542:	4413      	add	r3, r2
 8016544:	2200      	movs	r2, #0
 8016546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	2b6f      	cmp	r3, #111	@ 0x6f
 801654e:	d9f4      	bls.n	801653a <mg_sha384_final+0x30>
 8016550:	e020      	b.n	8016594 <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	1c5a      	adds	r2, r3, #1
 8016556:	617a      	str	r2, [r7, #20]
 8016558:	68ba      	ldr	r2, [r7, #8]
 801655a:	4413      	add	r3, r2
 801655c:	2280      	movs	r2, #128	@ 0x80
 801655e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 8016562:	e007      	b.n	8016574 <mg_sha384_final+0x6a>
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	1c5a      	adds	r2, r3, #1
 8016568:	617a      	str	r2, [r7, #20]
 801656a:	68ba      	ldr	r2, [r7, #8]
 801656c:	4413      	add	r3, r2
 801656e:	2200      	movs	r2, #0
 8016570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	2b7f      	cmp	r3, #127	@ 0x7f
 8016578:	d9f4      	bls.n	8016564 <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 801657a:	68bb      	ldr	r3, [r7, #8]
 801657c:	3340      	adds	r3, #64	@ 0x40
 801657e:	4619      	mov	r1, r3
 8016580:	68b8      	ldr	r0, [r7, #8]
 8016582:	f7ff f9df 	bl	8015944 <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	3340      	adds	r3, #64	@ 0x40
 801658a:	2270      	movs	r2, #112	@ 0x70
 801658c:	2100      	movs	r1, #0
 801658e:	4618      	mov	r0, r3
 8016590:	f011 f8fe 	bl	8027790 <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801659a:	68b9      	ldr	r1, [r7, #8]
 801659c:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80165a0:	00c9      	lsls	r1, r1, #3
 80165a2:	2000      	movs	r0, #0
 80165a4:	4688      	mov	r8, r1
 80165a6:	4681      	mov	r9, r0
 80165a8:	eb12 0108 	adds.w	r1, r2, r8
 80165ac:	6039      	str	r1, [r7, #0]
 80165ae:	eb43 0309 	adc.w	r3, r3, r9
 80165b2:	607b      	str	r3, [r7, #4]
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80165ba:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80165c4:	68b9      	ldr	r1, [r7, #8]
 80165c6:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80165ca:	00c9      	lsls	r1, r1, #3
 80165cc:	2000      	movs	r0, #0
 80165ce:	460c      	mov	r4, r1
 80165d0:	4605      	mov	r5, r0
 80165d2:	42a2      	cmp	r2, r4
 80165d4:	41ab      	sbcs	r3, r5
 80165d6:	d209      	bcs.n	80165ec <mg_sha384_final+0xe2>
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80165de:	f112 0a01 	adds.w	sl, r2, #1
 80165e2:	f143 0b00 	adc.w	fp, r3, #0
 80165e6:	68bb      	ldr	r3, [r7, #8]
 80165e8:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80165f2:	b2d2      	uxtb	r2, r2
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8016600:	f04f 0200 	mov.w	r2, #0
 8016604:	f04f 0300 	mov.w	r3, #0
 8016608:	0a02      	lsrs	r2, r0, #8
 801660a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801660e:	0a0b      	lsrs	r3, r1, #8
 8016610:	b2d2      	uxtb	r2, r2
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801661e:	f04f 0200 	mov.w	r2, #0
 8016622:	f04f 0300 	mov.w	r3, #0
 8016626:	0c02      	lsrs	r2, r0, #16
 8016628:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801662c:	0c0b      	lsrs	r3, r1, #16
 801662e:	b2d2      	uxtb	r2, r2
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801663c:	f04f 0200 	mov.w	r2, #0
 8016640:	f04f 0300 	mov.w	r3, #0
 8016644:	0e02      	lsrs	r2, r0, #24
 8016646:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801664a:	0e0b      	lsrs	r3, r1, #24
 801664c:	b2d2      	uxtb	r2, r2
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801665a:	f04f 0200 	mov.w	r2, #0
 801665e:	f04f 0300 	mov.w	r3, #0
 8016662:	000a      	movs	r2, r1
 8016664:	2300      	movs	r3, #0
 8016666:	b2d2      	uxtb	r2, r2
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 801666e:	68bb      	ldr	r3, [r7, #8]
 8016670:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8016674:	f04f 0200 	mov.w	r2, #0
 8016678:	f04f 0300 	mov.w	r3, #0
 801667c:	0a0a      	lsrs	r2, r1, #8
 801667e:	2300      	movs	r3, #0
 8016680:	b2d2      	uxtb	r2, r2
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801668e:	f04f 0200 	mov.w	r2, #0
 8016692:	f04f 0300 	mov.w	r3, #0
 8016696:	0c0a      	lsrs	r2, r1, #16
 8016698:	2300      	movs	r3, #0
 801669a:	b2d2      	uxtb	r2, r2
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80166a8:	f04f 0200 	mov.w	r2, #0
 80166ac:	f04f 0300 	mov.w	r3, #0
 80166b0:	0e0a      	lsrs	r2, r1, #24
 80166b2:	2300      	movs	r3, #0
 80166b4:	b2d2      	uxtb	r2, r2
 80166b6:	68bb      	ldr	r3, [r7, #8]
 80166b8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80166c2:	b2d2      	uxtb	r2, r2
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 80166ca:	68bb      	ldr	r3, [r7, #8]
 80166cc:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80166d0:	f04f 0200 	mov.w	r2, #0
 80166d4:	f04f 0300 	mov.w	r3, #0
 80166d8:	0a02      	lsrs	r2, r0, #8
 80166da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80166de:	0a0b      	lsrs	r3, r1, #8
 80166e0:	b2d2      	uxtb	r2, r2
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80166ee:	f04f 0200 	mov.w	r2, #0
 80166f2:	f04f 0300 	mov.w	r3, #0
 80166f6:	0c02      	lsrs	r2, r0, #16
 80166f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80166fc:	0c0b      	lsrs	r3, r1, #16
 80166fe:	b2d2      	uxtb	r2, r2
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801670c:	f04f 0200 	mov.w	r2, #0
 8016710:	f04f 0300 	mov.w	r3, #0
 8016714:	0e02      	lsrs	r2, r0, #24
 8016716:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801671a:	0e0b      	lsrs	r3, r1, #24
 801671c:	b2d2      	uxtb	r2, r2
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801672a:	f04f 0200 	mov.w	r2, #0
 801672e:	f04f 0300 	mov.w	r3, #0
 8016732:	000a      	movs	r2, r1
 8016734:	2300      	movs	r3, #0
 8016736:	b2d2      	uxtb	r2, r2
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016744:	f04f 0200 	mov.w	r2, #0
 8016748:	f04f 0300 	mov.w	r3, #0
 801674c:	0a0a      	lsrs	r2, r1, #8
 801674e:	2300      	movs	r3, #0
 8016750:	b2d2      	uxtb	r2, r2
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801675e:	f04f 0200 	mov.w	r2, #0
 8016762:	f04f 0300 	mov.w	r3, #0
 8016766:	0c0a      	lsrs	r2, r1, #16
 8016768:	2300      	movs	r3, #0
 801676a:	b2d2      	uxtb	r2, r2
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8016778:	f04f 0200 	mov.w	r2, #0
 801677c:	f04f 0300 	mov.w	r3, #0
 8016780:	0e0a      	lsrs	r2, r1, #24
 8016782:	2300      	movs	r3, #0
 8016784:	b2d2      	uxtb	r2, r2
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	3340      	adds	r3, #64	@ 0x40
 8016790:	4619      	mov	r1, r3
 8016792:	68b8      	ldr	r0, [r7, #8]
 8016794:	f7ff f8d6 	bl	8015944 <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 8016798:	2300      	movs	r3, #0
 801679a:	617b      	str	r3, [r7, #20]
 801679c:	e099      	b.n	80168d2 <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 801679e:	68ba      	ldr	r2, [r7, #8]
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	00db      	lsls	r3, r3, #3
 80167a4:	4413      	add	r3, r2
 80167a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167aa:	f04f 0200 	mov.w	r2, #0
 80167ae:	f04f 0300 	mov.w	r3, #0
 80167b2:	0e0a      	lsrs	r2, r1, #24
 80167b4:	2300      	movs	r3, #0
 80167b6:	6979      	ldr	r1, [r7, #20]
 80167b8:	00c9      	lsls	r1, r1, #3
 80167ba:	68f8      	ldr	r0, [r7, #12]
 80167bc:	4401      	add	r1, r0
 80167be:	b2d3      	uxtb	r3, r2
 80167c0:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 80167c2:	68ba      	ldr	r2, [r7, #8]
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	00db      	lsls	r3, r3, #3
 80167c8:	4413      	add	r3, r2
 80167ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167ce:	f04f 0200 	mov.w	r2, #0
 80167d2:	f04f 0300 	mov.w	r3, #0
 80167d6:	0c0a      	lsrs	r2, r1, #16
 80167d8:	2300      	movs	r3, #0
 80167da:	6979      	ldr	r1, [r7, #20]
 80167dc:	00c9      	lsls	r1, r1, #3
 80167de:	3101      	adds	r1, #1
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	4401      	add	r1, r0
 80167e4:	b2d3      	uxtb	r3, r2
 80167e6:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 80167e8:	68ba      	ldr	r2, [r7, #8]
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	4413      	add	r3, r2
 80167f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167f4:	f04f 0200 	mov.w	r2, #0
 80167f8:	f04f 0300 	mov.w	r3, #0
 80167fc:	0a0a      	lsrs	r2, r1, #8
 80167fe:	2300      	movs	r3, #0
 8016800:	6979      	ldr	r1, [r7, #20]
 8016802:	00c9      	lsls	r1, r1, #3
 8016804:	3102      	adds	r1, #2
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	4401      	add	r1, r0
 801680a:	b2d3      	uxtb	r3, r2
 801680c:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 801680e:	68ba      	ldr	r2, [r7, #8]
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	00db      	lsls	r3, r3, #3
 8016814:	4413      	add	r3, r2
 8016816:	e9d3 0100 	ldrd	r0, r1, [r3]
 801681a:	f04f 0200 	mov.w	r2, #0
 801681e:	f04f 0300 	mov.w	r3, #0
 8016822:	000a      	movs	r2, r1
 8016824:	2300      	movs	r3, #0
 8016826:	6979      	ldr	r1, [r7, #20]
 8016828:	00c9      	lsls	r1, r1, #3
 801682a:	3103      	adds	r1, #3
 801682c:	68f8      	ldr	r0, [r7, #12]
 801682e:	4401      	add	r1, r0
 8016830:	b2d3      	uxtb	r3, r2
 8016832:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 8016834:	68ba      	ldr	r2, [r7, #8]
 8016836:	697b      	ldr	r3, [r7, #20]
 8016838:	00db      	lsls	r3, r3, #3
 801683a:	4413      	add	r3, r2
 801683c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016840:	f04f 0200 	mov.w	r2, #0
 8016844:	f04f 0300 	mov.w	r3, #0
 8016848:	0e02      	lsrs	r2, r0, #24
 801684a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801684e:	0e0b      	lsrs	r3, r1, #24
 8016850:	6979      	ldr	r1, [r7, #20]
 8016852:	00c9      	lsls	r1, r1, #3
 8016854:	3104      	adds	r1, #4
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	4401      	add	r1, r0
 801685a:	b2d3      	uxtb	r3, r2
 801685c:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 801685e:	68ba      	ldr	r2, [r7, #8]
 8016860:	697b      	ldr	r3, [r7, #20]
 8016862:	00db      	lsls	r3, r3, #3
 8016864:	4413      	add	r3, r2
 8016866:	e9d3 0100 	ldrd	r0, r1, [r3]
 801686a:	f04f 0200 	mov.w	r2, #0
 801686e:	f04f 0300 	mov.w	r3, #0
 8016872:	0c02      	lsrs	r2, r0, #16
 8016874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016878:	0c0b      	lsrs	r3, r1, #16
 801687a:	6979      	ldr	r1, [r7, #20]
 801687c:	00c9      	lsls	r1, r1, #3
 801687e:	3105      	adds	r1, #5
 8016880:	68f8      	ldr	r0, [r7, #12]
 8016882:	4401      	add	r1, r0
 8016884:	b2d3      	uxtb	r3, r2
 8016886:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 8016888:	68ba      	ldr	r2, [r7, #8]
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	00db      	lsls	r3, r3, #3
 801688e:	4413      	add	r3, r2
 8016890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016894:	f04f 0200 	mov.w	r2, #0
 8016898:	f04f 0300 	mov.w	r3, #0
 801689c:	0a02      	lsrs	r2, r0, #8
 801689e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80168a2:	0a0b      	lsrs	r3, r1, #8
 80168a4:	6979      	ldr	r1, [r7, #20]
 80168a6:	00c9      	lsls	r1, r1, #3
 80168a8:	3106      	adds	r1, #6
 80168aa:	68f8      	ldr	r0, [r7, #12]
 80168ac:	4401      	add	r1, r0
 80168ae:	b2d3      	uxtb	r3, r2
 80168b0:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	00db      	lsls	r3, r3, #3
 80168b8:	4413      	add	r3, r2
 80168ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168be:	6979      	ldr	r1, [r7, #20]
 80168c0:	00c9      	lsls	r1, r1, #3
 80168c2:	3107      	adds	r1, #7
 80168c4:	68f8      	ldr	r0, [r7, #12]
 80168c6:	4401      	add	r1, r0
 80168c8:	b2d3      	uxtb	r3, r2
 80168ca:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	3301      	adds	r3, #1
 80168d0:	617b      	str	r3, [r7, #20]
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	2b05      	cmp	r3, #5
 80168d6:	f67f af62 	bls.w	801679e <mg_sha384_final+0x294>
  }
}
 80168da:	bf00      	nop
 80168dc:	bf00      	nop
 80168de:	3718      	adds	r7, #24
 80168e0:	46bd      	mov	sp, r7
 80168e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080168e6 <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 80168e6:	b580      	push	{r7, lr}
 80168e8:	b0ba      	sub	sp, #232	@ 0xe8
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	60f8      	str	r0, [r7, #12]
 80168ee:	60b9      	str	r1, [r7, #8]
 80168f0:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 80168f2:	f107 0310 	add.w	r3, r7, #16
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7ff fd46 	bl	8016388 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 80168fc:	f107 0310 	add.w	r3, r7, #16
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	68b9      	ldr	r1, [r7, #8]
 8016904:	4618      	mov	r0, r3
 8016906:	f7ff fdab 	bl	8016460 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 801690a:	f107 0310 	add.w	r3, r7, #16
 801690e:	4619      	mov	r1, r3
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f7ff fdfa 	bl	801650a <mg_sha384_final>
}
 8016916:	bf00      	nop
 8016918:	37e8      	adds	r7, #232	@ 0xe8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8016920:	b5b0      	push	{r4, r5, r7, lr}
 8016922:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 8016924:	f7ea f914 	bl	8000b50 <mg_millis>
 8016928:	4b05      	ldr	r3, [pc, #20]	@ (8016940 <mg_now+0x20>)
 801692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692e:	1884      	adds	r4, r0, r2
 8016930:	eb41 0503 	adc.w	r5, r1, r3
 8016934:	4622      	mov	r2, r4
 8016936:	462b      	mov	r3, r5
}
 8016938:	4610      	mov	r0, r2
 801693a:	4619      	mov	r1, r3
 801693c:	bdb0      	pop	{r4, r5, r7, pc}
 801693e:	bf00      	nop
 8016940:	24002368 	.word	0x24002368

08016944 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8016944:	b580      	push	{r7, lr}
 8016946:	b084      	sub	sp, #16
 8016948:	af00      	add	r7, sp, #0
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8016950:	4b05      	ldr	r3, [pc, #20]	@ (8016968 <mg_http_serve_ssi+0x24>)
 8016952:	2200      	movs	r2, #0
 8016954:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f7f5 f90f 	bl	800bb7c <mg_http_reply>
  (void) root, (void) fullpath;
}
 801695e:	bf00      	nop
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	0802b7c8 	.word	0x0802b7c8

0801696c <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	60bb      	str	r3, [r7, #8]
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d004      	beq.n	801698a <mg_str_s+0x1e>
 8016980:	6838      	ldr	r0, [r7, #0]
 8016982:	f7e9 fd25 	bl	80003d0 <strlen>
 8016986:	4603      	mov	r3, r0
 8016988:	e000      	b.n	801698c <mg_str_s+0x20>
 801698a:	2300      	movs	r3, #0
 801698c:	60fb      	str	r3, [r7, #12]
  return str;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	461a      	mov	r2, r3
 8016992:	f107 0308 	add.w	r3, r7, #8
 8016996:	e893 0003 	ldmia.w	r3, {r0, r1}
 801699a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	3710      	adds	r7, #16
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80169a6:	b480      	push	{r7}
 80169a8:	b087      	sub	sp, #28
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	60f8      	str	r0, [r7, #12]
 80169ae:	60b9      	str	r1, [r7, #8]
 80169b0:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	613b      	str	r3, [r7, #16]
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	617b      	str	r3, [r7, #20]
  return str;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	461a      	mov	r2, r3
 80169be:	f107 0310 	add.w	r3, r7, #16
 80169c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80169c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80169ca:	68f8      	ldr	r0, [r7, #12]
 80169cc:	371c      	adds	r7, #28
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr

080169d6 <mg_tolc>:

static int mg_tolc(char c) {
 80169d6:	b480      	push	{r7}
 80169d8:	b083      	sub	sp, #12
 80169da:	af00      	add	r7, sp, #0
 80169dc:	4603      	mov	r3, r0
 80169de:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80169e0:	79fb      	ldrb	r3, [r7, #7]
 80169e2:	2b40      	cmp	r3, #64	@ 0x40
 80169e4:	d905      	bls.n	80169f2 <mg_tolc+0x1c>
 80169e6:	79fb      	ldrb	r3, [r7, #7]
 80169e8:	2b5a      	cmp	r3, #90	@ 0x5a
 80169ea:	d802      	bhi.n	80169f2 <mg_tolc+0x1c>
 80169ec:	79fb      	ldrb	r3, [r7, #7]
 80169ee:	3320      	adds	r3, #32
 80169f0:	e000      	b.n	80169f4 <mg_tolc+0x1e>
 80169f2:	79fb      	ldrb	r3, [r7, #7]
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	370c      	adds	r7, #12
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr

08016a00 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b088      	sub	sp, #32
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	1d3b      	adds	r3, r7, #4
 8016a0a:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 8016a0e:	2300      	movs	r3, #0
 8016a10:	617b      	str	r3, [r7, #20]
 8016a12:	2300      	movs	r3, #0
 8016a14:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d01c      	beq.n	8016a56 <mg_strdup+0x56>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d019      	beq.n	8016a56 <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	3301      	adds	r3, #1
 8016a26:	4619      	mov	r1, r3
 8016a28:	2001      	movs	r0, #1
 8016a2a:	f00f f803 	bl	8025a34 <calloc>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d00e      	beq.n	8016a56 <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	68ba      	ldr	r2, [r7, #8]
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	69f8      	ldr	r0, [r7, #28]
 8016a40:	f010 ffdf 	bl	8027a02 <memcpy>
      sc[s.len] = '\0';
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	69fa      	ldr	r2, [r7, #28]
 8016a48:	4413      	add	r3, r2
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	461a      	mov	r2, r3
 8016a5a:	f107 0314 	add.w	r3, r7, #20
 8016a5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a62:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8016a66:	68f8      	ldr	r0, [r7, #12]
 8016a68:	3720      	adds	r7, #32
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	bd80      	pop	{r7, pc}

08016a6e <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8016a6e:	b490      	push	{r4, r7}
 8016a70:	b088      	sub	sp, #32
 8016a72:	af00      	add	r7, sp, #0
 8016a74:	f107 0408 	add.w	r4, r7, #8
 8016a78:	e884 0003 	stmia.w	r4, {r0, r1}
 8016a7c:	4639      	mov	r1, r7
 8016a7e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8016a82:	2300      	movs	r3, #0
 8016a84:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8016a86:	e019      	b.n	8016abc <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8016a88:	68ba      	ldr	r2, [r7, #8]
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	4413      	add	r3, r2
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8016a92:	683a      	ldr	r2, [r7, #0]
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	4413      	add	r3, r2
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8016a9c:	69ba      	ldr	r2, [r7, #24]
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	da02      	bge.n	8016aaa <mg_strcmp+0x3c>
 8016aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8016aa8:	e01e      	b.n	8016ae8 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8016aaa:	69ba      	ldr	r2, [r7, #24]
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	dd01      	ble.n	8016ab6 <mg_strcmp+0x48>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e018      	b.n	8016ae8 <mg_strcmp+0x7a>
    i++;
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	69fa      	ldr	r2, [r7, #28]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d203      	bcs.n	8016acc <mg_strcmp+0x5e>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	69fa      	ldr	r2, [r7, #28]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d3dd      	bcc.n	8016a88 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	69fa      	ldr	r2, [r7, #28]
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d201      	bcs.n	8016ad8 <mg_strcmp+0x6a>
 8016ad4:	2301      	movs	r3, #1
 8016ad6:	e007      	b.n	8016ae8 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	69fa      	ldr	r2, [r7, #28]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d202      	bcs.n	8016ae6 <mg_strcmp+0x78>
 8016ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae4:	e000      	b.n	8016ae8 <mg_strcmp+0x7a>
  return 0;
 8016ae6:	2300      	movs	r3, #0
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	3720      	adds	r7, #32
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bc90      	pop	{r4, r7}
 8016af0:	4770      	bx	lr

08016af2 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8016af2:	b590      	push	{r4, r7, lr}
 8016af4:	b089      	sub	sp, #36	@ 0x24
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	f107 0408 	add.w	r4, r7, #8
 8016afc:	e884 0003 	stmia.w	r4, {r0, r1}
 8016b00:	4639      	mov	r1, r7
 8016b02:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8016b06:	2300      	movs	r3, #0
 8016b08:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8016b0a:	e01f      	b.n	8016b4c <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8016b0c:	68ba      	ldr	r2, [r7, #8]
 8016b0e:	69fb      	ldr	r3, [r7, #28]
 8016b10:	4413      	add	r3, r2
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7ff ff5e 	bl	80169d6 <mg_tolc>
 8016b1a:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8016b1c:	683a      	ldr	r2, [r7, #0]
 8016b1e:	69fb      	ldr	r3, [r7, #28]
 8016b20:	4413      	add	r3, r2
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7ff ff56 	bl	80169d6 <mg_tolc>
 8016b2a:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8016b2c:	69ba      	ldr	r2, [r7, #24]
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	da02      	bge.n	8016b3a <mg_strcasecmp+0x48>
 8016b34:	f04f 33ff 	mov.w	r3, #4294967295
 8016b38:	e01e      	b.n	8016b78 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8016b3a:	69ba      	ldr	r2, [r7, #24]
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	dd01      	ble.n	8016b46 <mg_strcasecmp+0x54>
 8016b42:	2301      	movs	r3, #1
 8016b44:	e018      	b.n	8016b78 <mg_strcasecmp+0x86>
    i++;
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	3301      	adds	r3, #1
 8016b4a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	69fa      	ldr	r2, [r7, #28]
 8016b50:	429a      	cmp	r2, r3
 8016b52:	d203      	bcs.n	8016b5c <mg_strcasecmp+0x6a>
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	69fa      	ldr	r2, [r7, #28]
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d3d7      	bcc.n	8016b0c <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	69fa      	ldr	r2, [r7, #28]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d201      	bcs.n	8016b68 <mg_strcasecmp+0x76>
 8016b64:	2301      	movs	r3, #1
 8016b66:	e007      	b.n	8016b78 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	69fa      	ldr	r2, [r7, #28]
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	d202      	bcs.n	8016b76 <mg_strcasecmp+0x84>
 8016b70:	f04f 33ff 	mov.w	r3, #4294967295
 8016b74:	e000      	b.n	8016b78 <mg_strcasecmp+0x86>
  return 0;
 8016b76:	2300      	movs	r3, #0
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3724      	adds	r7, #36	@ 0x24
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd90      	pop	{r4, r7, pc}

08016b80 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8016b80:	b490      	push	{r4, r7}
 8016b82:	b088      	sub	sp, #32
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	f107 0408 	add.w	r4, r7, #8
 8016b8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8016b8e:	4639      	mov	r1, r7
 8016b90:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8016b94:	2300      	movs	r3, #0
 8016b96:	61fb      	str	r3, [r7, #28]
 8016b98:	2300      	movs	r3, #0
 8016b9a:	61bb      	str	r3, [r7, #24]
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	617b      	str	r3, [r7, #20]
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8016ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	f000 80ba 	beq.w	8016d20 <mg_match+0x1a0>
 8016bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bae:	2200      	movs	r2, #0
 8016bb0:	601a      	str	r2, [r3, #0]
 8016bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8016bb8:	e0b2      	b.n	8016d20 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	69fa      	ldr	r2, [r7, #28]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d25b      	bcs.n	8016c7a <mg_match+0xfa>
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	69ba      	ldr	r2, [r7, #24]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d257      	bcs.n	8016c7a <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8016bca:	683a      	ldr	r2, [r7, #0]
 8016bcc:	69fb      	ldr	r3, [r7, #28]
 8016bce:	4413      	add	r3, r2
 8016bd0:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8016bd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8016bd4:	d015      	beq.n	8016c02 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8016bd6:	683a      	ldr	r2, [r7, #0]
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	4413      	add	r3, r2
 8016bdc:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8016bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8016be0:	d04b      	beq.n	8016c7a <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8016be2:	683a      	ldr	r2, [r7, #0]
 8016be4:	69fb      	ldr	r3, [r7, #28]
 8016be6:	4413      	add	r3, r2
 8016be8:	781b      	ldrb	r3, [r3, #0]
 8016bea:	2b23      	cmp	r3, #35	@ 0x23
 8016bec:	d045      	beq.n	8016c7a <mg_match+0xfa>
 8016bee:	68ba      	ldr	r2, [r7, #8]
 8016bf0:	69bb      	ldr	r3, [r7, #24]
 8016bf2:	4413      	add	r3, r2
 8016bf4:	781a      	ldrb	r2, [r3, #0]
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	440b      	add	r3, r1
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d13b      	bne.n	8016c7a <mg_match+0xfa>
      if (caps == NULL) {
 8016c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d031      	beq.n	8016c6c <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8016c08:	683a      	ldr	r2, [r7, #0]
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	781b      	ldrb	r3, [r3, #0]
 8016c10:	2b3f      	cmp	r3, #63	@ 0x3f
 8016c12:	d111      	bne.n	8016c38 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8016c14:	68ba      	ldr	r2, [r7, #8]
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	441a      	add	r2, r3
 8016c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c1c:	601a      	str	r2, [r3, #0]
 8016c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c20:	2201      	movs	r2, #1
 8016c22:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8016c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c26:	3308      	adds	r3, #8
 8016c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	601a      	str	r2, [r3, #0]
 8016c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c32:	2200      	movs	r2, #0
 8016c34:	605a      	str	r2, [r3, #4]
 8016c36:	e019      	b.n	8016c6c <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8016c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d015      	beq.n	8016c6c <mg_match+0xec>
 8016c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c42:	685b      	ldr	r3, [r3, #4]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d111      	bne.n	8016c6c <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	69bb      	ldr	r3, [r7, #24]
 8016c4c:	441a      	add	r2, r3
 8016c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	1ad3      	subs	r3, r2, r3
 8016c54:	461a      	mov	r2, r3
 8016c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c58:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8016c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c5c:	3308      	adds	r3, #8
 8016c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c62:	2200      	movs	r2, #0
 8016c64:	605a      	str	r2, [r3, #4]
 8016c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c68:	2200      	movs	r2, #0
 8016c6a:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8016c6c:	69fb      	ldr	r3, [r7, #28]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	61fb      	str	r3, [r7, #28]
 8016c72:	69bb      	ldr	r3, [r7, #24]
 8016c74:	3301      	adds	r3, #1
 8016c76:	61bb      	str	r3, [r7, #24]
 8016c78:	e052      	b.n	8016d20 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	69fa      	ldr	r2, [r7, #28]
 8016c7e:	429a      	cmp	r2, r3
 8016c80:	d222      	bcs.n	8016cc8 <mg_match+0x148>
 8016c82:	683a      	ldr	r2, [r7, #0]
 8016c84:	69fb      	ldr	r3, [r7, #28]
 8016c86:	4413      	add	r3, r2
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c8c:	d005      	beq.n	8016c9a <mg_match+0x11a>
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	69fb      	ldr	r3, [r7, #28]
 8016c92:	4413      	add	r3, r2
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	2b23      	cmp	r3, #35	@ 0x23
 8016c98:	d116      	bne.n	8016cc8 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8016c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d00b      	beq.n	8016cb8 <mg_match+0x138>
 8016ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d107      	bne.n	8016cb8 <mg_match+0x138>
 8016ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016caa:	2200      	movs	r2, #0
 8016cac:	605a      	str	r2, [r3, #4]
 8016cae:	68ba      	ldr	r2, [r7, #8]
 8016cb0:	69bb      	ldr	r3, [r7, #24]
 8016cb2:	441a      	add	r2, r3
 8016cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cb6:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	1c5a      	adds	r2, r3, #1
 8016cbc:	61fa      	str	r2, [r7, #28]
 8016cbe:	617b      	str	r3, [r7, #20]
 8016cc0:	69bb      	ldr	r3, [r7, #24]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	613b      	str	r3, [r7, #16]
 8016cc6:	e02b      	b.n	8016d20 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d025      	beq.n	8016d1a <mg_match+0x19a>
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	693a      	ldr	r2, [r7, #16]
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d821      	bhi.n	8016d1a <mg_match+0x19a>
 8016cd6:	683a      	ldr	r2, [r7, #0]
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	4413      	add	r3, r2
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	2b23      	cmp	r3, #35	@ 0x23
 8016ce0:	d005      	beq.n	8016cee <mg_match+0x16e>
 8016ce2:	68ba      	ldr	r2, [r7, #8]
 8016ce4:	69bb      	ldr	r3, [r7, #24]
 8016ce6:	4413      	add	r3, r2
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	2b2f      	cmp	r3, #47	@ 0x2f
 8016cec:	d015      	beq.n	8016d1a <mg_match+0x19a>
      i = ni, j = nj;
 8016cee:	697b      	ldr	r3, [r7, #20]
 8016cf0:	61fb      	str	r3, [r7, #28]
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8016cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d010      	beq.n	8016d1e <mg_match+0x19e>
 8016cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10c      	bne.n	8016d1e <mg_match+0x19e>
 8016d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d108      	bne.n	8016d1e <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8016d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d0e:	3b08      	subs	r3, #8
 8016d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d14:	2200      	movs	r2, #0
 8016d16:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8016d18:	e001      	b.n	8016d1e <mg_match+0x19e>
      }
    } else {
      return false;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	e01f      	b.n	8016d5e <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8016d1e:	bf00      	nop
  while (i < p.len || j < s.len) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	69fa      	ldr	r2, [r7, #28]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	f4ff af48 	bcc.w	8016bba <mg_match+0x3a>
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	69ba      	ldr	r2, [r7, #24]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	f4ff af43 	bcc.w	8016bba <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8016d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d010      	beq.n	8016d5c <mg_match+0x1dc>
 8016d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d00c      	beq.n	8016d5c <mg_match+0x1dc>
 8016d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d108      	bne.n	8016d5c <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8016d4a:	68ba      	ldr	r2, [r7, #8]
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	441a      	add	r2, r3
 8016d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	1ad3      	subs	r3, r2, r3
 8016d56:	461a      	mov	r2, r3
 8016d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d5a:	605a      	str	r2, [r3, #4]
  }
  return true;
 8016d5c:	2301      	movs	r3, #1
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3720      	adds	r7, #32
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bc90      	pop	{r4, r7}
 8016d66:	4770      	bx	lr

08016d68 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8016d68:	b590      	push	{r4, r7, lr}
 8016d6a:	b089      	sub	sp, #36	@ 0x24
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	f107 0410 	add.w	r4, r7, #16
 8016d72:	e884 0003 	stmia.w	r4, {r0, r1}
 8016d76:	60fa      	str	r2, [r7, #12]
 8016d78:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d002      	beq.n	8016d86 <mg_span+0x1e>
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d101      	bne.n	8016d8a <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8016d86:	2300      	movs	r3, #0
 8016d88:	e047      	b.n	8016e1a <mg_span+0xb2>
  } else {
    size_t len = 0;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8016d8e:	e002      	b.n	8016d96 <mg_span+0x2e>
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	3301      	adds	r3, #1
 8016d94:	61fb      	str	r3, [r7, #28]
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	69fa      	ldr	r2, [r7, #28]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d207      	bcs.n	8016dae <mg_span+0x46>
 8016d9e:	693a      	ldr	r2, [r7, #16]
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	4413      	add	r3, r2
 8016da4:	781b      	ldrb	r3, [r3, #0]
 8016da6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d1f0      	bne.n	8016d90 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d00c      	beq.n	8016dce <mg_span+0x66>
 8016db4:	6939      	ldr	r1, [r7, #16]
 8016db6:	68fc      	ldr	r4, [r7, #12]
 8016db8:	463b      	mov	r3, r7
 8016dba:	69fa      	ldr	r2, [r7, #28]
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7ff fdf2 	bl	80169a6 <mg_str_n>
 8016dc2:	4622      	mov	r2, r4
 8016dc4:	463b      	mov	r3, r7
 8016dc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016dca:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d010      	beq.n	8016df6 <mg_span+0x8e>
 8016dd4:	693a      	ldr	r2, [r7, #16]
 8016dd6:	69fb      	ldr	r3, [r7, #28]
 8016dd8:	18d1      	adds	r1, r2, r3
 8016dda:	697a      	ldr	r2, [r7, #20]
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	1ad2      	subs	r2, r2, r3
 8016de0:	68bc      	ldr	r4, [r7, #8]
 8016de2:	463b      	mov	r3, r7
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7ff fdde 	bl	80169a6 <mg_str_n>
 8016dea:	4622      	mov	r2, r4
 8016dec:	463b      	mov	r3, r7
 8016dee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016df2:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d00d      	beq.n	8016e18 <mg_span+0xb0>
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	69fa      	ldr	r2, [r7, #28]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d209      	bcs.n	8016e18 <mg_span+0xb0>
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	1c5a      	adds	r2, r3, #1
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	601a      	str	r2, [r3, #0]
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	685b      	ldr	r3, [r3, #4]
 8016e12:	1e5a      	subs	r2, r3, #1
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	605a      	str	r2, [r3, #4]
    return true;
 8016e18:	2301      	movs	r3, #1
  }
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3724      	adds	r7, #36	@ 0x24
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd90      	pop	{r4, r7, pc}

08016e22 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8016e22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e26:	b0a5      	sub	sp, #148	@ 0x94
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8016e2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8016e32:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016e34:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8016e36:	2300      	movs	r3, #0
 8016e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8016e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d016      	beq.n	8016e78 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8016e4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e4e:	2b02      	cmp	r3, #2
 8016e50:	d00d      	beq.n	8016e6e <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8016e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e56:	2b04      	cmp	r3, #4
 8016e58:	d104      	bne.n	8016e64 <mg_str_to_num+0x42>
 8016e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e5e:	f04f 0300 	mov.w	r3, #0
 8016e62:	e00d      	b.n	8016e80 <mg_str_to_num+0x5e>
 8016e64:	f04f 32ff 	mov.w	r2, #4294967295
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6c:	e008      	b.n	8016e80 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8016e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016e72:	f04f 0300 	mov.w	r3, #0
 8016e76:	e003      	b.n	8016e80 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8016e78:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8016e7c:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8016e80:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8016e84:	f04f 0200 	mov.w	r2, #0
 8016e88:	f04f 0300 	mov.w	r3, #0
 8016e8c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8016e90:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8016e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e98:	bf08      	it	eq
 8016e9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8016e9e:	d105      	bne.n	8016eac <mg_str_to_num+0x8a>
 8016ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016ea4:	2b08      	cmp	r3, #8
 8016ea6:	d001      	beq.n	8016eac <mg_str_to_num+0x8a>
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	e1e8      	b.n	801727e <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8016eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d12d      	bne.n	8016f0e <mg_str_to_num+0xec>
 8016eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	d92a      	bls.n	8016f0e <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8016eb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ebe:	4413      	add	r3, r2
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	2b30      	cmp	r3, #48	@ 0x30
 8016ec4:	d121      	bne.n	8016f0a <mg_str_to_num+0xe8>
      i++;
 8016ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016eca:	3301      	adds	r3, #1
 8016ecc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8016ed0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ed6:	4413      	add	r3, r2
 8016ed8:	781b      	ldrb	r3, [r3, #0]
 8016eda:	2b62      	cmp	r3, #98	@ 0x62
 8016edc:	d00a      	beq.n	8016ef4 <mg_str_to_num+0xd2>
 8016ede:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ee4:	4413      	add	r3, r2
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	2b78      	cmp	r3, #120	@ 0x78
 8016eea:	d101      	bne.n	8016ef0 <mg_str_to_num+0xce>
 8016eec:	2310      	movs	r3, #16
 8016eee:	e002      	b.n	8016ef6 <mg_str_to_num+0xd4>
 8016ef0:	230a      	movs	r3, #10
 8016ef2:	e000      	b.n	8016ef6 <mg_str_to_num+0xd4>
 8016ef4:	2302      	movs	r3, #2
 8016ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8016ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016efa:	2b0a      	cmp	r3, #10
 8016efc:	d007      	beq.n	8016f0e <mg_str_to_num+0xec>
 8016efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f02:	3301      	adds	r3, #1
 8016f04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016f08:	e001      	b.n	8016f0e <mg_str_to_num+0xec>
    } else {
      base = 10;
 8016f0a:	230a      	movs	r3, #10
 8016f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8016f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f10:	2b10      	cmp	r3, #16
 8016f12:	f000 8178 	beq.w	8017206 <mg_str_to_num+0x3e4>
 8016f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f18:	2b10      	cmp	r3, #16
 8016f1a:	f300 817d 	bgt.w	8017218 <mg_str_to_num+0x3f6>
 8016f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f20:	2b02      	cmp	r3, #2
 8016f22:	d052      	beq.n	8016fca <mg_str_to_num+0x1a8>
 8016f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f26:	2b0a      	cmp	r3, #10
 8016f28:	f000 80cd 	beq.w	80170c6 <mg_str_to_num+0x2a4>
 8016f2c:	e174      	b.n	8017218 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8016f2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f34:	4413      	add	r3, r2
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	3b30      	subs	r3, #48	@ 0x30
 8016f3a:	17da      	asrs	r2, r3, #31
 8016f3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8016f40:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8016f44:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8016f48:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016f4c:	f04f 0200 	mov.w	r2, #0
 8016f50:	f04f 0300 	mov.w	r3, #0
 8016f54:	0842      	lsrs	r2, r0, #1
 8016f56:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8016f5a:	084b      	lsrs	r3, r1, #1
 8016f5c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016f60:	4282      	cmp	r2, r0
 8016f62:	418b      	sbcs	r3, r1
 8016f64:	d201      	bcs.n	8016f6a <mg_str_to_num+0x148>
 8016f66:	2300      	movs	r3, #0
 8016f68:	e189      	b.n	801727e <mg_str_to_num+0x45c>
        result *= 2;
 8016f6a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016f6e:	1891      	adds	r1, r2, r2
 8016f70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016f72:	415b      	adcs	r3, r3
 8016f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016f76:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8016f7a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8016f7e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016f86:	1a85      	subs	r5, r0, r2
 8016f88:	eb61 0603 	sbc.w	r6, r1, r3
 8016f8c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016f90:	4295      	cmp	r5, r2
 8016f92:	eb76 0303 	sbcs.w	r3, r6, r3
 8016f96:	d201      	bcs.n	8016f9c <mg_str_to_num+0x17a>
 8016f98:	2300      	movs	r3, #0
 8016f9a:	e170      	b.n	801727e <mg_str_to_num+0x45c>
        result += digit;
 8016f9c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016fa0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016fa4:	1884      	adds	r4, r0, r2
 8016fa6:	623c      	str	r4, [r7, #32]
 8016fa8:	eb41 0303 	adc.w	r3, r1, r3
 8016fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8016fae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8016fb2:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8016fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016fba:	3301      	adds	r3, #1
 8016fbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016fc4:	3301      	adds	r3, #1
 8016fc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8016fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fcc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	f080 8123 	bcs.w	801721c <mg_str_to_num+0x3fa>
 8016fd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016fdc:	4413      	add	r3, r2
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	2b30      	cmp	r3, #48	@ 0x30
 8016fe2:	d0a4      	beq.n	8016f2e <mg_str_to_num+0x10c>
 8016fe4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016fea:	4413      	add	r3, r2
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	2b31      	cmp	r3, #49	@ 0x31
 8016ff0:	d09d      	beq.n	8016f2e <mg_str_to_num+0x10c>
      }
      break;
 8016ff2:	e113      	b.n	801721c <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8016ff4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ffa:	4413      	add	r3, r2
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	3b30      	subs	r3, #48	@ 0x30
 8017000:	17da      	asrs	r2, r3, #31
 8017002:	61bb      	str	r3, [r7, #24]
 8017004:	61fa      	str	r2, [r7, #28]
 8017006:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801700a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 801700e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017012:	f04f 020a 	mov.w	r2, #10
 8017016:	f04f 0300 	mov.w	r3, #0
 801701a:	f7e9 fb9d 	bl	8000758 <__aeabi_uldivmod>
 801701e:	4602      	mov	r2, r0
 8017020:	460b      	mov	r3, r1
 8017022:	4610      	mov	r0, r2
 8017024:	4619      	mov	r1, r3
 8017026:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801702a:	4290      	cmp	r0, r2
 801702c:	eb71 0303 	sbcs.w	r3, r1, r3
 8017030:	d201      	bcs.n	8017036 <mg_str_to_num+0x214>
 8017032:	2300      	movs	r3, #0
 8017034:	e123      	b.n	801727e <mg_str_to_num+0x45c>
        result *= 10;
 8017036:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801703a:	4622      	mov	r2, r4
 801703c:	462b      	mov	r3, r5
 801703e:	f04f 0000 	mov.w	r0, #0
 8017042:	f04f 0100 	mov.w	r1, #0
 8017046:	0099      	lsls	r1, r3, #2
 8017048:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801704c:	0090      	lsls	r0, r2, #2
 801704e:	4602      	mov	r2, r0
 8017050:	460b      	mov	r3, r1
 8017052:	eb12 0804 	adds.w	r8, r2, r4
 8017056:	eb43 0905 	adc.w	r9, r3, r5
 801705a:	eb18 0308 	adds.w	r3, r8, r8
 801705e:	613b      	str	r3, [r7, #16]
 8017060:	eb49 0309 	adc.w	r3, r9, r9
 8017064:	617b      	str	r3, [r7, #20]
 8017066:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801706a:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 801706e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017072:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8017076:	1a84      	subs	r4, r0, r2
 8017078:	63bc      	str	r4, [r7, #56]	@ 0x38
 801707a:	eb61 0303 	sbc.w	r3, r1, r3
 801707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017080:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017084:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8017088:	4621      	mov	r1, r4
 801708a:	4291      	cmp	r1, r2
 801708c:	4629      	mov	r1, r5
 801708e:	eb71 0303 	sbcs.w	r3, r1, r3
 8017092:	d201      	bcs.n	8017098 <mg_str_to_num+0x276>
 8017094:	2300      	movs	r3, #0
 8017096:	e0f2      	b.n	801727e <mg_str_to_num+0x45c>
        result += digit;
 8017098:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801709c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80170a0:	1884      	adds	r4, r0, r2
 80170a2:	60bc      	str	r4, [r7, #8]
 80170a4:	eb41 0303 	adc.w	r3, r1, r3
 80170a8:	60fb      	str	r3, [r7, #12]
 80170aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80170ae:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80170b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80170b6:	3301      	adds	r3, #1
 80170b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80170bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80170c0:	3301      	adds	r3, #1
 80170c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80170c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80170cc:	429a      	cmp	r2, r3
 80170ce:	f080 80a7 	bcs.w	8017220 <mg_str_to_num+0x3fe>
 80170d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80170d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80170d8:	4413      	add	r3, r2
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80170de:	f240 809f 	bls.w	8017220 <mg_str_to_num+0x3fe>
 80170e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80170e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80170e8:	4413      	add	r3, r2
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	2b39      	cmp	r3, #57	@ 0x39
 80170ee:	d981      	bls.n	8016ff4 <mg_str_to_num+0x1d2>
      }
      break;
 80170f0:	e096      	b.n	8017220 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 80170f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80170f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80170f8:	4413      	add	r3, r2
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017100:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017104:	2b2f      	cmp	r3, #47	@ 0x2f
 8017106:	d90a      	bls.n	801711e <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8017108:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801710c:	2b39      	cmp	r3, #57	@ 0x39
 801710e:	d806      	bhi.n	801711e <mg_str_to_num+0x2fc>
 8017110:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017114:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017116:	17da      	asrs	r2, r3, #31
 8017118:	643b      	str	r3, [r7, #64]	@ 0x40
 801711a:	647a      	str	r2, [r7, #68]	@ 0x44
 801711c:	e023      	b.n	8017166 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801711e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017122:	2b40      	cmp	r3, #64	@ 0x40
 8017124:	d90a      	bls.n	801713c <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017126:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801712a:	2b46      	cmp	r3, #70	@ 0x46
 801712c:	d806      	bhi.n	801713c <mg_str_to_num+0x31a>
 801712e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017132:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8017134:	17da      	asrs	r2, r3, #31
 8017136:	643b      	str	r3, [r7, #64]	@ 0x40
 8017138:	647a      	str	r2, [r7, #68]	@ 0x44
 801713a:	e014      	b.n	8017166 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 801713c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017140:	2b60      	cmp	r3, #96	@ 0x60
 8017142:	d90a      	bls.n	801715a <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8017144:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017148:	2b66      	cmp	r3, #102	@ 0x66
 801714a:	d806      	bhi.n	801715a <mg_str_to_num+0x338>
 801714c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017150:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8017152:	17da      	asrs	r2, r3, #31
 8017154:	643b      	str	r3, [r7, #64]	@ 0x40
 8017156:	647a      	str	r2, [r7, #68]	@ 0x44
 8017158:	e005      	b.n	8017166 <mg_str_to_num+0x344>
 801715a:	f04f 33ff 	mov.w	r3, #4294967295
 801715e:	f04f 34ff 	mov.w	r4, #4294967295
 8017162:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8017166:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 801716a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 801716e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8017172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017176:	bf08      	it	eq
 8017178:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 801717c:	d04a      	beq.n	8017214 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 801717e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017182:	f04f 0200 	mov.w	r2, #0
 8017186:	f04f 0300 	mov.w	r3, #0
 801718a:	0902      	lsrs	r2, r0, #4
 801718c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8017190:	090b      	lsrs	r3, r1, #4
 8017192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017196:	4282      	cmp	r2, r0
 8017198:	418b      	sbcs	r3, r1
 801719a:	d201      	bcs.n	80171a0 <mg_str_to_num+0x37e>
 801719c:	2300      	movs	r3, #0
 801719e:	e06e      	b.n	801727e <mg_str_to_num+0x45c>
        result *= 16;
 80171a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80171a4:	f04f 0200 	mov.w	r2, #0
 80171a8:	f04f 0300 	mov.w	r3, #0
 80171ac:	010b      	lsls	r3, r1, #4
 80171ae:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80171b2:	0102      	lsls	r2, r0, #4
 80171b4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80171b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80171bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80171c0:	ebb0 0a02 	subs.w	sl, r0, r2
 80171c4:	eb61 0b03 	sbc.w	fp, r1, r3
 80171c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80171cc:	4592      	cmp	sl, r2
 80171ce:	eb7b 0303 	sbcs.w	r3, fp, r3
 80171d2:	d201      	bcs.n	80171d8 <mg_str_to_num+0x3b6>
 80171d4:	2300      	movs	r3, #0
 80171d6:	e052      	b.n	801727e <mg_str_to_num+0x45c>
        result += digit;
 80171d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80171dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80171e0:	1884      	adds	r4, r0, r2
 80171e2:	603c      	str	r4, [r7, #0]
 80171e4:	eb41 0303 	adc.w	r3, r1, r3
 80171e8:	607b      	str	r3, [r7, #4]
 80171ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80171ee:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80171f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80171f6:	3301      	adds	r3, #1
 80171f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80171fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017200:	3301      	adds	r3, #1
 8017202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8017206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017208:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801720c:	429a      	cmp	r2, r3
 801720e:	f4ff af70 	bcc.w	80170f2 <mg_str_to_num+0x2d0>
      }
      break;
 8017212:	e006      	b.n	8017222 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 8017214:	bf00      	nop
      break;
 8017216:	e004      	b.n	8017222 <mg_str_to_num+0x400>
    default:
      return false;
 8017218:	2300      	movs	r3, #0
 801721a:	e030      	b.n	801727e <mg_str_to_num+0x45c>
      break;
 801721c:	bf00      	nop
 801721e:	e000      	b.n	8017222 <mg_str_to_num+0x400>
      break;
 8017220:	bf00      	nop
  }
  if (ndigits == 0) return false;
 8017222:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017226:	2b00      	cmp	r3, #0
 8017228:	d101      	bne.n	801722e <mg_str_to_num+0x40c>
 801722a:	2300      	movs	r3, #0
 801722c:	e027      	b.n	801727e <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 801722e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017230:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017234:	429a      	cmp	r2, r3
 8017236:	d001      	beq.n	801723c <mg_str_to_num+0x41a>
 8017238:	2300      	movs	r3, #0
 801723a:	e020      	b.n	801727e <mg_str_to_num+0x45c>
  if (val_len == 1) {
 801723c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017240:	2b01      	cmp	r3, #1
 8017242:	d104      	bne.n	801724e <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 8017244:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8017248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801724a:	701a      	strb	r2, [r3, #0]
 801724c:	e016      	b.n	801727c <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 801724e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017252:	2b02      	cmp	r3, #2
 8017254:	d104      	bne.n	8017260 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8017256:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 801725a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801725c:	801a      	strh	r2, [r3, #0]
 801725e:	e00d      	b.n	801727c <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 8017260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017264:	2b04      	cmp	r3, #4
 8017266:	d104      	bne.n	8017272 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8017268:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801726c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801726e:	601a      	str	r2, [r3, #0]
 8017270:	e004      	b.n	801727c <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 8017272:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8017274:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017278:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 801727c:	2301      	movs	r3, #1
}
 801727e:	4618      	mov	r0, r3
 8017280:	3794      	adds	r7, #148	@ 0x94
 8017282:	46bd      	mov	sp, r7
 8017284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017288 <mg_timer_init>:
#endif



void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8017288:	b480      	push	{r7}
 801728a:	b085      	sub	sp, #20
 801728c:	af00      	add	r7, sp, #0
 801728e:	60f8      	str	r0, [r7, #12]
 8017290:	60b9      	str	r1, [r7, #8]
 8017292:	e9c7 2300 	strd	r2, r3, [r7]
  t->period_ms = ms, t->expire = 0;
 8017296:	68b9      	ldr	r1, [r7, #8]
 8017298:	e9d7 2300 	ldrd	r2, r3, [r7]
 801729c:	e9c1 2300 	strd	r2, r3, [r1]
 80172a0:	68b9      	ldr	r1, [r7, #8]
 80172a2:	f04f 0200 	mov.w	r2, #0
 80172a6:	f04f 0300 	mov.w	r3, #0
 80172aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	69ba      	ldr	r2, [r7, #24]
 80172b2:	611a      	str	r2, [r3, #16]
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	69fa      	ldr	r2, [r7, #28]
 80172b8:	615a      	str	r2, [r3, #20]
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	6a3a      	ldr	r2, [r7, #32]
 80172be:	619a      	str	r2, [r3, #24]
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	61da      	str	r2, [r3, #28]
  *head = t;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	68ba      	ldr	r2, [r7, #8]
 80172cc:	601a      	str	r2, [r3, #0]
}
 80172ce:	bf00      	nop
 80172d0:	3714      	adds	r7, #20
 80172d2:	46bd      	mov	sp, r7
 80172d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d8:	4770      	bx	lr

080172da <mg_timer_free>:

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 80172da:	b480      	push	{r7}
 80172dc:	b083      	sub	sp, #12
 80172de:	af00      	add	r7, sp, #0
 80172e0:	6078      	str	r0, [r7, #4]
 80172e2:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 80172e4:	e003      	b.n	80172ee <mg_timer_free+0x14>
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	331c      	adds	r3, #28
 80172ec:	607b      	str	r3, [r7, #4]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d004      	beq.n	8017300 <mg_timer_free+0x26>
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	683a      	ldr	r2, [r7, #0]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d1f2      	bne.n	80172e6 <mg_timer_free+0xc>
  if (*head) *head = t->next;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d003      	beq.n	8017310 <mg_timer_free+0x36>
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	69da      	ldr	r2, [r3, #28]
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	601a      	str	r2, [r3, #0]
}
 8017310:	bf00      	nop
 8017312:	370c      	adds	r7, #12
 8017314:	46bd      	mov	sp, r7
 8017316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731a:	4770      	bx	lr

0801731c <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 801731c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017320:	b086      	sub	sp, #24
 8017322:	af00      	add	r7, sp, #0
 8017324:	6178      	str	r0, [r7, #20]
 8017326:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 801732a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801732e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017332:	eb10 0a02 	adds.w	sl, r0, r2
 8017336:	eb41 0b03 	adc.w	fp, r1, r3
 801733a:	697b      	ldr	r3, [r7, #20]
 801733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017340:	4592      	cmp	sl, r2
 8017342:	eb7b 0303 	sbcs.w	r3, fp, r3
 8017346:	d206      	bcs.n	8017356 <mg_timer_expired+0x3a>
 8017348:	6979      	ldr	r1, [r7, #20]
 801734a:	f04f 0200 	mov.w	r2, #0
 801734e:	f04f 0300 	mov.w	r3, #0
 8017352:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8017356:	697b      	ldr	r3, [r7, #20]
 8017358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801735c:	4313      	orrs	r3, r2
 801735e:	d10d      	bne.n	801737c <mg_timer_expired+0x60>
 8017360:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8017364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017368:	1886      	adds	r6, r0, r2
 801736a:	603e      	str	r6, [r7, #0]
 801736c:	eb41 0303 	adc.w	r3, r1, r3
 8017370:	607b      	str	r3, [r7, #4]
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017378:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017382:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8017386:	4290      	cmp	r0, r2
 8017388:	eb71 0303 	sbcs.w	r3, r1, r3
 801738c:	d201      	bcs.n	8017392 <mg_timer_expired+0x76>
 801738e:	2300      	movs	r3, #0
 8017390:	e022      	b.n	80173d8 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017398:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801739c:	ebb0 0802 	subs.w	r8, r0, r2
 80173a0:	eb61 0903 	sbc.w	r9, r1, r3
 80173a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80173a8:	4542      	cmp	r2, r8
 80173aa:	eb73 0309 	sbcs.w	r3, r3, r9
 80173ae:	d207      	bcs.n	80173c0 <mg_timer_expired+0xa4>
 80173b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80173b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80173b8:	1884      	adds	r4, r0, r2
 80173ba:	eb41 0503 	adc.w	r5, r1, r3
 80173be:	e007      	b.n	80173d0 <mg_timer_expired+0xb4>
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80173c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80173ca:	1884      	adds	r4, r0, r2
 80173cc:	eb41 0503 	adc.w	r5, r1, r3
 80173d0:	697b      	ldr	r3, [r7, #20]
 80173d2:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80173d6:	2301      	movs	r3, #1
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3718      	adds	r7, #24
 80173dc:	46bd      	mov	sp, r7
 80173de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80173e2:	4770      	bx	lr

080173e4 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80173e4:	b590      	push	{r4, r7, lr}
 80173e6:	b08b      	sub	sp, #44	@ 0x2c
 80173e8:	af02      	add	r7, sp, #8
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	61fb      	str	r3, [r7, #28]
 80173f6:	e067      	b.n	80174c8 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80173fe:	4313      	orrs	r3, r2
 8017400:	d10d      	bne.n	801741e <mg_timer_poll+0x3a>
 8017402:	69fb      	ldr	r3, [r7, #28]
 8017404:	691b      	ldr	r3, [r3, #16]
 8017406:	f003 0302 	and.w	r3, r3, #2
 801740a:	2b00      	cmp	r3, #0
 801740c:	d007      	beq.n	801741e <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	691b      	ldr	r3, [r3, #16]
 8017412:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8017416:	2b00      	cmp	r3, #0
 8017418:	d101      	bne.n	801741e <mg_timer_poll+0x3a>
 801741a:	2301      	movs	r3, #1
 801741c:	e000      	b.n	8017420 <mg_timer_poll+0x3c>
 801741e:	2300      	movs	r3, #0
 8017420:	76fb      	strb	r3, [r7, #27]
 8017422:	7efb      	ldrb	r3, [r7, #27]
 8017424:	f003 0301 	and.w	r3, r3, #1
 8017428:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 801742a:	69fb      	ldr	r3, [r7, #28]
 801742c:	f103 0408 	add.w	r4, r3, #8
 8017430:	69fb      	ldr	r3, [r7, #28]
 8017432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017436:	e9d7 2300 	ldrd	r2, r3, [r7]
 801743a:	e9cd 2300 	strd	r2, r3, [sp]
 801743e:	4602      	mov	r2, r0
 8017440:	460b      	mov	r3, r1
 8017442:	4620      	mov	r0, r4
 8017444:	f7ff ff6a 	bl	801731c <mg_timer_expired>
 8017448:	4603      	mov	r3, r0
 801744a:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 801744c:	69fb      	ldr	r3, [r7, #28]
 801744e:	69db      	ldr	r3, [r3, #28]
 8017450:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8017452:	7efb      	ldrb	r3, [r7, #27]
 8017454:	f083 0301 	eor.w	r3, r3, #1
 8017458:	b2db      	uxtb	r3, r3
 801745a:	2b00      	cmp	r3, #0
 801745c:	d005      	beq.n	801746a <mg_timer_poll+0x86>
 801745e:	7ebb      	ldrb	r3, [r7, #26]
 8017460:	f083 0301 	eor.w	r3, r3, #1
 8017464:	b2db      	uxtb	r3, r3
 8017466:	2b00      	cmp	r3, #0
 8017468:	d12b      	bne.n	80174c2 <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 801746a:	69fb      	ldr	r3, [r7, #28]
 801746c:	691b      	ldr	r3, [r3, #16]
 801746e:	f003 0301 	and.w	r3, r3, #1
 8017472:	2b00      	cmp	r3, #0
 8017474:	d105      	bne.n	8017482 <mg_timer_poll+0x9e>
 8017476:	69fb      	ldr	r3, [r7, #28]
 8017478:	691b      	ldr	r3, [r3, #16]
 801747a:	f003 0304 	and.w	r3, r3, #4
 801747e:	2b00      	cmp	r3, #0
 8017480:	d105      	bne.n	801748e <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	695b      	ldr	r3, [r3, #20]
 8017486:	69fa      	ldr	r2, [r7, #28]
 8017488:	6992      	ldr	r2, [r2, #24]
 801748a:	4610      	mov	r0, r2
 801748c:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	691b      	ldr	r3, [r3, #16]
 8017492:	f043 0204 	orr.w	r2, r3, #4
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	691b      	ldr	r3, [r3, #16]
 801749e:	f003 0301 	and.w	r3, r3, #1
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d10e      	bne.n	80174c4 <mg_timer_poll+0xe0>
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	691b      	ldr	r3, [r3, #16]
 80174aa:	f003 0308 	and.w	r3, r3, #8
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d008      	beq.n	80174c4 <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 80174b2:	69f9      	ldr	r1, [r7, #28]
 80174b4:	68f8      	ldr	r0, [r7, #12]
 80174b6:	f7ff ff10 	bl	80172da <mg_timer_free>
      free(t);
 80174ba:	69f8      	ldr	r0, [r7, #28]
 80174bc:	f00e fade 	bl	8025a7c <free>
 80174c0:	e000      	b.n	80174c4 <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 80174c2:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	61fb      	str	r3, [r7, #28]
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d194      	bne.n	80173f8 <mg_timer_poll+0x14>
    }
  }
}
 80174ce:	bf00      	nop
 80174d0:	bf00      	nop
 80174d2:	3724      	adds	r7, #36	@ 0x24
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd90      	pop	{r4, r7, pc}

080174d8 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 80174d8:	b580      	push	{r7, lr}
 80174da:	b086      	sub	sp, #24
 80174dc:	af02      	add	r7, sp, #8
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	60b9      	str	r1, [r7, #8]
 80174e2:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 80174e4:	4b0b      	ldr	r3, [pc, #44]	@ (8017514 <mg_tls_hexdump+0x3c>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2b03      	cmp	r3, #3
 80174ea:	dd0e      	ble.n	801750a <mg_tls_hexdump+0x32>
 80174ec:	4b0a      	ldr	r3, [pc, #40]	@ (8017518 <mg_tls_hexdump+0x40>)
 80174ee:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 80174f2:	490a      	ldr	r1, [pc, #40]	@ (801751c <mg_tls_hexdump+0x44>)
 80174f4:	2004      	movs	r0, #4
 80174f6:	f7f7 fa39 	bl	800e96c <mg_log_prefix>
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	9300      	str	r3, [sp, #0]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	4a07      	ldr	r2, [pc, #28]	@ (8017520 <mg_tls_hexdump+0x48>)
 8017502:	68f9      	ldr	r1, [r7, #12]
 8017504:	4807      	ldr	r0, [pc, #28]	@ (8017524 <mg_tls_hexdump+0x4c>)
 8017506:	f7f7 fa81 	bl	800ea0c <mg_log>
}
 801750a:	bf00      	nop
 801750c:	3710      	adds	r7, #16
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	24000258 	.word	0x24000258
 8017518:	0802dc14 	.word	0x0802dc14
 801751c:	08029e1c 	.word	0x08029e1c
 8017520:	080135e9 	.word	0x080135e9
 8017524:	0802b7d8 	.word	0x0802b7d8

08017528 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8017528:	b480      	push	{r7}
 801752a:	b089      	sub	sp, #36	@ 0x24
 801752c:	af00      	add	r7, sp, #0
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 8017534:	2302      	movs	r3, #2
 8017536:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	2b01      	cmp	r3, #1
 801753c:	d903      	bls.n	8017546 <mg_der_parse+0x1e>
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	3301      	adds	r3, #1
 8017542:	781b      	ldrb	r3, [r3, #0]
 8017544:	e000      	b.n	8017548 <mg_der_parse+0x20>
 8017546:	2300      	movs	r3, #0
 8017548:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	2b01      	cmp	r3, #1
 801754e:	d802      	bhi.n	8017556 <mg_der_parse+0x2e>
 8017550:	f04f 33ff 	mov.w	r3, #4294967295
 8017554:	e042      	b.n	80175dc <mg_der_parse+0xb4>
  tlv->type = der[0];
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	781a      	ldrb	r2, [r3, #0]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 801755e:	69bb      	ldr	r3, [r7, #24]
 8017560:	2b7f      	cmp	r3, #127	@ 0x7f
 8017562:	d927      	bls.n	80175b4 <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 8017564:	69bb      	ldr	r3, [r7, #24]
 8017566:	b2db      	uxtb	r3, r3
 8017568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801756c:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 801756e:	7dbb      	ldrb	r3, [r7, #22]
 8017570:	3302      	adds	r3, #2
 8017572:	461a      	mov	r2, r3
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	4293      	cmp	r3, r2
 8017578:	d202      	bcs.n	8017580 <mg_der_parse+0x58>
 801757a:	f04f 33ff 	mov.w	r3, #4294967295
 801757e:	e02d      	b.n	80175dc <mg_der_parse+0xb4>
    len = 0;
 8017580:	2300      	movs	r3, #0
 8017582:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8017584:	2300      	movs	r3, #0
 8017586:	75fb      	strb	r3, [r7, #23]
 8017588:	e00c      	b.n	80175a4 <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 801758a:	69bb      	ldr	r3, [r7, #24]
 801758c:	021b      	lsls	r3, r3, #8
 801758e:	7dfa      	ldrb	r2, [r7, #23]
 8017590:	3202      	adds	r2, #2
 8017592:	4611      	mov	r1, r2
 8017594:	68fa      	ldr	r2, [r7, #12]
 8017596:	440a      	add	r2, r1
 8017598:	7812      	ldrb	r2, [r2, #0]
 801759a:	4313      	orrs	r3, r2
 801759c:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 801759e:	7dfb      	ldrb	r3, [r7, #23]
 80175a0:	3301      	adds	r3, #1
 80175a2:	75fb      	strb	r3, [r7, #23]
 80175a4:	7dfa      	ldrb	r2, [r7, #23]
 80175a6:	7dbb      	ldrb	r3, [r7, #22]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d3ee      	bcc.n	801758a <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 80175ac:	7dbb      	ldrb	r3, [r7, #22]
 80175ae:	69fa      	ldr	r2, [r7, #28]
 80175b0:	4413      	add	r3, r2
 80175b2:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 80175b4:	69fa      	ldr	r2, [r7, #28]
 80175b6:	69bb      	ldr	r3, [r7, #24]
 80175b8:	4413      	add	r3, r2
 80175ba:	68ba      	ldr	r2, [r7, #8]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d202      	bcs.n	80175c6 <mg_der_parse+0x9e>
 80175c0:	f04f 33ff 	mov.w	r3, #4294967295
 80175c4:	e00a      	b.n	80175dc <mg_der_parse+0xb4>
  tlv->len = len;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	69ba      	ldr	r2, [r7, #24]
 80175ca:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	69fb      	ldr	r3, [r7, #28]
 80175d0:	441a      	add	r2, r3
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 80175d6:	69fa      	ldr	r2, [r7, #28]
 80175d8:	69bb      	ldr	r3, [r7, #24]
 80175da:	4413      	add	r3, r2
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3724      	adds	r7, #36	@ 0x24
 80175e0:	46bd      	mov	sp, r7
 80175e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e6:	4770      	bx	lr

080175e8 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b084      	sub	sp, #16
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	685b      	ldr	r3, [r3, #4]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d101      	bne.n	80175fe <mg_der_next+0x16>
 80175fa:	2300      	movs	r3, #0
 80175fc:	e01b      	b.n	8017636 <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	6898      	ldr	r0, [r3, #8]
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	683a      	ldr	r2, [r7, #0]
 8017608:	4619      	mov	r1, r3
 801760a:	f7ff ff8d 	bl	8017528 <mg_der_parse>
 801760e:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	2b00      	cmp	r3, #0
 8017614:	da02      	bge.n	801761c <mg_der_next+0x34>
 8017616:	f04f 33ff 	mov.w	r3, #4294967295
 801761a:	e00c      	b.n	8017636 <mg_der_next+0x4e>
  parent->value += consumed;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	689a      	ldr	r2, [r3, #8]
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	441a      	add	r2, r3
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	685a      	ldr	r2, [r3, #4]
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	1ad2      	subs	r2, r2, r3
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	605a      	str	r2, [r3, #4]
  return 1;
 8017634:	2301      	movs	r3, #1
}
 8017636:	4618      	mov	r0, r3
 8017638:	3710      	adds	r7, #16
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}

0801763e <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 801763e:	b580      	push	{r7, lr}
 8017640:	b08e      	sub	sp, #56	@ 0x38
 8017642:	af00      	add	r7, sp, #0
 8017644:	60f8      	str	r0, [r7, #12]
 8017646:	60b9      	str	r1, [r7, #8]
 8017648:	607a      	str	r2, [r7, #4]
 801764a:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 801764c:	68fa      	ldr	r2, [r7, #12]
 801764e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8017652:	ca07      	ldmia	r2, {r0, r1, r2}
 8017654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8017658:	e031      	b.n	80176be <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 801765a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801765e:	2b06      	cmp	r3, #6
 8017660:	d114      	bne.n	801768c <mg_der_find_oid+0x4e>
 8017662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	429a      	cmp	r2, r3
 8017668:	d110      	bne.n	801768c <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 801766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	68b9      	ldr	r1, [r7, #8]
 8017670:	4618      	mov	r0, r3
 8017672:	f010 f863 	bl	802773c <memcmp>
 8017676:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8017678:	2b00      	cmp	r3, #0
 801767a:	d107      	bne.n	801768c <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 801767c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8017680:	6839      	ldr	r1, [r7, #0]
 8017682:	4618      	mov	r0, r3
 8017684:	f7ff ffb0 	bl	80175e8 <mg_der_next>
 8017688:	4603      	mov	r3, r0
 801768a:	e024      	b.n	80176d6 <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 801768c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017690:	f003 0320 	and.w	r3, r3, #32
 8017694:	2b00      	cmp	r3, #0
 8017696:	d012      	beq.n	80176be <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8017698:	f107 0314 	add.w	r3, r7, #20
 801769c:	f107 0220 	add.w	r2, r7, #32
 80176a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80176a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 80176a6:	f107 0014 	add.w	r0, r7, #20
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	f7ff ffc5 	bl	801763e <mg_der_find_oid>
 80176b4:	4603      	mov	r3, r0
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d001      	beq.n	80176be <mg_der_find_oid+0x80>
 80176ba:	2301      	movs	r3, #1
 80176bc:	e00b      	b.n	80176d6 <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 80176be:	f107 0220 	add.w	r2, r7, #32
 80176c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80176c6:	4611      	mov	r1, r2
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7ff ff8d 	bl	80175e8 <mg_der_next>
 80176ce:	4603      	mov	r3, r0
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	dcc2      	bgt.n	801765a <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 80176d4:	2300      	movs	r3, #0
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3738      	adds	r7, #56	@ 0x38
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}

080176de <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 80176de:	b480      	push	{r7}
 80176e0:	b087      	sub	sp, #28
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	60f8      	str	r0, [r7, #12]
 80176e6:	60b9      	str	r1, [r7, #8]
 80176e8:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	2b01      	cmp	r3, #1
 80176ee:	d802      	bhi.n	80176f6 <mg_der_to_tlv+0x18>
    return -1;
 80176f0:	f04f 33ff 	mov.w	r3, #4294967295
 80176f4:	e041      	b.n	801777a <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	781a      	ldrb	r2, [r3, #0]
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	3301      	adds	r3, #1
 8017702:	781b      	ldrb	r3, [r3, #0]
 8017704:	461a      	mov	r2, r3
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	1c9a      	adds	r2, r3, #2
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	2b7f      	cmp	r3, #127	@ 0x7f
 8017718:	d921      	bls.n	801775e <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	3b80      	subs	r3, #128	@ 0x80
 8017720:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2200      	movs	r2, #0
 8017726:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8017728:	2300      	movs	r3, #0
 801772a:	617b      	str	r3, [r7, #20]
 801772c:	e00d      	b.n	801774a <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	685b      	ldr	r3, [r3, #4]
 8017732:	021b      	lsls	r3, r3, #8
 8017734:	697a      	ldr	r2, [r7, #20]
 8017736:	3202      	adds	r2, #2
 8017738:	68f9      	ldr	r1, [r7, #12]
 801773a:	440a      	add	r2, r1
 801773c:	7812      	ldrb	r2, [r2, #0]
 801773e:	431a      	orrs	r2, r3
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8017744:	697b      	ldr	r3, [r7, #20]
 8017746:	3301      	adds	r3, #1
 8017748:	617b      	str	r3, [r7, #20]
 801774a:	697a      	ldr	r2, [r7, #20]
 801774c:	693b      	ldr	r3, [r7, #16]
 801774e:	429a      	cmp	r2, r3
 8017750:	d3ed      	bcc.n	801772e <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 8017752:	693b      	ldr	r3, [r7, #16]
 8017754:	3302      	adds	r3, #2
 8017756:	68fa      	ldr	r2, [r7, #12]
 8017758:	441a      	add	r2, r3
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 801775e:	68fa      	ldr	r2, [r7, #12]
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	441a      	add	r2, r3
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6899      	ldr	r1, [r3, #8]
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	685b      	ldr	r3, [r3, #4]
 801776c:	440b      	add	r3, r1
 801776e:	429a      	cmp	r2, r3
 8017770:	d202      	bcs.n	8017778 <mg_der_to_tlv+0x9a>
    return -1;
 8017772:	f04f 33ff 	mov.w	r3, #4294967295
 8017776:	e000      	b.n	801777a <mg_der_to_tlv+0x9c>
  }
  return 0;
 8017778:	2300      	movs	r3, #0
}
 801777a:	4618      	mov	r0, r3
 801777c:	371c      	adds	r7, #28
 801777e:	46bd      	mov	sp, r7
 8017780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017784:	4770      	bx	lr

08017786 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 8017786:	b480      	push	{r7}
 8017788:	b083      	sub	sp, #12
 801778a:	af00      	add	r7, sp, #0
 801778c:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017792:	2b04      	cmp	r3, #4
 8017794:	d915      	bls.n	80177c2 <mg_tls_got_record+0x3c>
         c->rtls.len >=
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801779e:	3203      	adds	r2, #3
 80177a0:	7812      	ldrb	r2, [r2, #0]
 80177a2:	b212      	sxth	r2, r2
 80177a4:	0212      	lsls	r2, r2, #8
 80177a6:	b211      	sxth	r1, r2
 80177a8:	687a      	ldr	r2, [r7, #4]
 80177aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80177ac:	3204      	adds	r2, #4
 80177ae:	7812      	ldrb	r2, [r2, #0]
 80177b0:	b212      	sxth	r2, r2
 80177b2:	430a      	orrs	r2, r1
 80177b4:	b212      	sxth	r2, r2
 80177b6:	b292      	uxth	r2, r2
 80177b8:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 80177ba:	4293      	cmp	r3, r2
 80177bc:	d301      	bcc.n	80177c2 <mg_tls_got_record+0x3c>
 80177be:	2301      	movs	r3, #1
 80177c0:	e000      	b.n	80177c4 <mg_tls_got_record+0x3e>
 80177c2:	2300      	movs	r3, #0
 80177c4:	f003 0301 	and.w	r3, r3, #1
 80177c8:	b2db      	uxtb	r3, r3
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	370c      	adds	r7, #12
 80177ce:	46bd      	mov	sp, r7
 80177d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d4:	4770      	bx	lr

080177d6 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 80177d6:	b580      	push	{r7, lr}
 80177d8:	b084      	sub	sp, #16
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	3368      	adds	r3, #104	@ 0x68
 80177e2:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	3303      	adds	r3, #3
 80177ea:	781b      	ldrb	r3, [r3, #0]
 80177ec:	b21b      	sxth	r3, r3
 80177ee:	021b      	lsls	r3, r3, #8
 80177f0:	b21a      	sxth	r2, r3
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	3304      	adds	r3, #4
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	b21b      	sxth	r3, r3
 80177fc:	4313      	orrs	r3, r2
 80177fe:	b21b      	sxth	r3, r3
 8017800:	b29b      	uxth	r3, r3
 8017802:	3305      	adds	r3, #5
 8017804:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 8017806:	897b      	ldrh	r3, [r7, #10]
 8017808:	461a      	mov	r2, r3
 801780a:	2100      	movs	r1, #0
 801780c:	68f8      	ldr	r0, [r7, #12]
 801780e:	f7f6 f895 	bl	800d93c <mg_iobuf_del>
}
 8017812:	bf00      	nop
 8017814:	3710      	adds	r7, #16
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}
	...

0801781c <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 801781c:	b580      	push	{r7, lr}
 801781e:	b086      	sub	sp, #24
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801782a:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	695b      	ldr	r3, [r3, #20]
 8017834:	4413      	add	r3, r2
 8017836:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	699b      	ldr	r3, [r3, #24]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d033      	beq.n	80178a8 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	3301      	adds	r3, #1
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	041a      	lsls	r2, r3, #16
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	3302      	adds	r3, #2
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	021b      	lsls	r3, r3, #8
 8017850:	4313      	orrs	r3, r2
 8017852:	693a      	ldr	r2, [r7, #16]
 8017854:	3203      	adds	r2, #3
 8017856:	7812      	ldrb	r2, [r2, #0]
 8017858:	4313      	orrs	r3, r2
 801785a:	3304      	adds	r3, #4
 801785c:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	699b      	ldr	r3, [r3, #24]
 8017862:	68fa      	ldr	r2, [r7, #12]
 8017864:	429a      	cmp	r2, r3
 8017866:	d904      	bls.n	8017872 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 8017868:	4911      	ldr	r1, [pc, #68]	@ (80178b0 <mg_tls_drop_message+0x94>)
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7f1 fa06 	bl	8008c7c <mg_error>
    return;
 8017870:	e01b      	b.n	80178aa <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	3320      	adds	r3, #32
 8017876:	68fa      	ldr	r2, [r7, #12]
 8017878:	6939      	ldr	r1, [r7, #16]
 801787a:	4618      	mov	r0, r3
 801787c:	f7fd fdee 	bl	801545c <mg_sha256_update>
  tls->recv_offset += len;
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	695a      	ldr	r2, [r3, #20]
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	441a      	add	r2, r3
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	699a      	ldr	r2, [r3, #24]
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	1ad2      	subs	r2, r2, r3
 8017894:	697b      	ldr	r3, [r7, #20]
 8017896:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	699b      	ldr	r3, [r3, #24]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d104      	bne.n	80178aa <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f7ff ff98 	bl	80177d6 <mg_tls_drop_record>
 80178a6:	e000      	b.n	80178aa <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 80178a8:	bf00      	nop
  }
}
 80178aa:	3718      	adds	r7, #24
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	0802b7e0 	.word	0x0802b7e0

080178b4 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 80178b4:	b590      	push	{r4, r7, lr}
 80178b6:	b0d1      	sub	sp, #324	@ 0x144
 80178b8:	af02      	add	r7, sp, #8
 80178ba:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80178be:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 80178c2:	6020      	str	r0, [r4, #0]
 80178c4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80178c8:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 80178cc:	6001      	str	r1, [r0, #0]
 80178ce:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80178d2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80178d6:	600a      	str	r2, [r1, #0]
 80178d8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80178dc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80178e0:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 80178e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80178e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80178ea:	6818      	ldr	r0, [r3, #0]
 80178ec:	f7e8 fd70 	bl	80003d0 <strlen>
 80178f0:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 80178f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80178f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80178fc:	4618      	mov	r0, r3
 80178fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017902:	461a      	mov	r2, r3
 8017904:	2100      	movs	r1, #0
 8017906:	f00f ff43 	bl	8027790 <memset>
 801790a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801790e:	b2da      	uxtb	r2, r3
 8017910:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8017914:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017918:	705a      	strb	r2, [r3, #1]
 801791a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801791e:	b2da      	uxtb	r2, r3
 8017920:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8017924:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8017928:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 801792a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801792e:	2b00      	cmp	r3, #0
 8017930:	d00c      	beq.n	801794c <mg_tls_derive_secret+0x98>
 8017932:	f107 0314 	add.w	r3, r7, #20
 8017936:	3303      	adds	r3, #3
 8017938:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801793c:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8017940:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8017944:	6809      	ldr	r1, [r1, #0]
 8017946:	4618      	mov	r0, r3
 8017948:	f00f ff08 	bl	802775c <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 801794c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8017950:	3303      	adds	r3, #3
 8017952:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8017956:	b2d1      	uxtb	r1, r2
 8017958:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801795c:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8017960:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 8017962:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8017966:	2b00      	cmp	r3, #0
 8017968:	d00e      	beq.n	8017988 <mg_tls_derive_secret+0xd4>
 801796a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801796e:	3304      	adds	r3, #4
 8017970:	f107 0214 	add.w	r2, r7, #20
 8017974:	18d0      	adds	r0, r2, r3
 8017976:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801797a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801797e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8017982:	6819      	ldr	r1, [r3, #0]
 8017984:	f00f feea 	bl	802775c <memmove>
  packed[4 + labelsz + datasz] = 1;
 8017988:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801798c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8017990:	4413      	add	r3, r2
 8017992:	3304      	adds	r3, #4
 8017994:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8017998:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 801799c:	2101      	movs	r1, #1
 801799e:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 80179a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80179a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80179a8:	4413      	add	r3, r2
 80179aa:	3305      	adds	r3, #5
 80179ac:	f107 0414 	add.w	r4, r7, #20
 80179b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80179b4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80179b8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80179bc:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 80179c0:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80179c4:	9300      	str	r3, [sp, #0]
 80179c6:	4623      	mov	r3, r4
 80179c8:	6812      	ldr	r2, [r2, #0]
 80179ca:	6809      	ldr	r1, [r1, #0]
 80179cc:	f7fd fed3 	bl	8015776 <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 80179d0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80179d4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80179d8:	4619      	mov	r1, r3
 80179da:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80179de:	f00f febd 	bl	802775c <memmove>
}
 80179e2:	bf00      	nop
 80179e4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd90      	pop	{r4, r7, pc}

080179ec <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b0cc      	sub	sp, #304	@ 0x130
 80179f0:	af04      	add	r7, sp, #16
 80179f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80179f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80179fa:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80179fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017a00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017a0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8017a0e:	2320      	movs	r3, #32
 8017a10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 8017a14:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8017a18:	2320      	movs	r3, #32
 8017a1a:	9300      	str	r3, [sp, #0]
 8017a1c:	4b89      	ldr	r3, [pc, #548]	@ (8017c44 <mg_tls_generate_handshake_keys+0x258>)
 8017a1e:	2200      	movs	r2, #0
 8017a20:	2100      	movs	r1, #0
 8017a22:	f7fd fea8 	bl	8015776 <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 8017a26:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8017a2a:	2320      	movs	r3, #32
 8017a2c:	9302      	str	r3, [sp, #8]
 8017a2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8017a32:	9301      	str	r3, [sp, #4]
 8017a34:	2320      	movs	r3, #32
 8017a36:	9300      	str	r3, [sp, #0]
 8017a38:	4b83      	ldr	r3, [pc, #524]	@ (8017c48 <mg_tls_generate_handshake_keys+0x25c>)
 8017a3a:	2220      	movs	r2, #32
 8017a3c:	4883      	ldr	r0, [pc, #524]	@ (8017c4c <mg_tls_generate_handshake_keys+0x260>)
 8017a3e:	f7ff ff39 	bl	80178b4 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8017a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a46:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 8017a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a4e:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8017a50:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8017a54:	2220      	movs	r2, #32
 8017a56:	9200      	str	r2, [sp, #0]
 8017a58:	2220      	movs	r2, #32
 8017a5a:	f7fd fe8c 	bl	8015776 <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 8017a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a62:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 8017a66:	2220      	movs	r2, #32
 8017a68:	4619      	mov	r1, r3
 8017a6a:	4879      	ldr	r0, [pc, #484]	@ (8017c50 <mg_tls_generate_handshake_keys+0x264>)
 8017a6c:	f7ff fd34 	bl	80174d8 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8017a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017a74:	f103 0120 	add.w	r1, r3, #32
 8017a78:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8017a7c:	2270      	movs	r2, #112	@ 0x70
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f00f fe6c 	bl	802775c <memmove>
  mg_sha256_final(hello_hash, &sha256);
 8017a84:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8017a88:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8017a8c:	4611      	mov	r1, r2
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f7fd fd1d 	bl	80154ce <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 8017a94:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8017a98:	2220      	movs	r2, #32
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	486d      	ldr	r0, [pc, #436]	@ (8017c54 <mg_tls_generate_handshake_keys+0x268>)
 8017a9e:	f7ff fd1b 	bl	80174d8 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 8017aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017aa6:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8017aaa:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8017aae:	2320      	movs	r3, #32
 8017ab0:	9302      	str	r3, [sp, #8]
 8017ab2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017ab6:	9301      	str	r3, [sp, #4]
 8017ab8:	2320      	movs	r3, #32
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	4613      	mov	r3, r2
 8017abe:	2220      	movs	r2, #32
 8017ac0:	4865      	ldr	r0, [pc, #404]	@ (8017c58 <mg_tls_generate_handshake_keys+0x26c>)
 8017ac2:	f7ff fef7 	bl	80178b4 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 8017ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017aca:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8017ace:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8017ad2:	2320      	movs	r3, #32
 8017ad4:	9302      	str	r3, [sp, #8]
 8017ad6:	f107 0308 	add.w	r3, r7, #8
 8017ada:	9301      	str	r3, [sp, #4]
 8017adc:	2320      	movs	r3, #32
 8017ade:	9300      	str	r3, [sp, #0]
 8017ae0:	4613      	mov	r3, r2
 8017ae2:	2220      	movs	r2, #32
 8017ae4:	485d      	ldr	r0, [pc, #372]	@ (8017c5c <mg_tls_generate_handshake_keys+0x270>)
 8017ae6:	f7ff fee5 	bl	80178b4 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8017aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017aee:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 8017af2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017af6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017afa:	9202      	str	r2, [sp, #8]
 8017afc:	9301      	str	r3, [sp, #4]
 8017afe:	2300      	movs	r3, #0
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	2300      	movs	r3, #0
 8017b04:	2220      	movs	r2, #32
 8017b06:	4856      	ldr	r0, [pc, #344]	@ (8017c60 <mg_tls_generate_handshake_keys+0x274>)
 8017b08:	f7ff fed4 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8017b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b10:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 8017b14:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017b18:	220c      	movs	r2, #12
 8017b1a:	9202      	str	r2, [sp, #8]
 8017b1c:	9301      	str	r3, [sp, #4]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	9300      	str	r3, [sp, #0]
 8017b22:	2300      	movs	r3, #0
 8017b24:	2220      	movs	r2, #32
 8017b26:	484f      	ldr	r0, [pc, #316]	@ (8017c64 <mg_tls_generate_handshake_keys+0x278>)
 8017b28:	f7ff fec4 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8017b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b30:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 8017b34:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8017b38:	2220      	movs	r2, #32
 8017b3a:	9202      	str	r2, [sp, #8]
 8017b3c:	9301      	str	r3, [sp, #4]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	9300      	str	r3, [sp, #0]
 8017b42:	2300      	movs	r3, #0
 8017b44:	2220      	movs	r2, #32
 8017b46:	4848      	ldr	r0, [pc, #288]	@ (8017c68 <mg_tls_generate_handshake_keys+0x27c>)
 8017b48:	f7ff feb4 	bl	80178b4 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8017b4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b50:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 8017b54:	f107 0108 	add.w	r1, r7, #8
 8017b58:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017b5c:	9202      	str	r2, [sp, #8]
 8017b5e:	9301      	str	r3, [sp, #4]
 8017b60:	2300      	movs	r3, #0
 8017b62:	9300      	str	r3, [sp, #0]
 8017b64:	2300      	movs	r3, #0
 8017b66:	2220      	movs	r2, #32
 8017b68:	483d      	ldr	r0, [pc, #244]	@ (8017c60 <mg_tls_generate_handshake_keys+0x274>)
 8017b6a:	f7ff fea3 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8017b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b72:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 8017b76:	f107 0108 	add.w	r1, r7, #8
 8017b7a:	220c      	movs	r2, #12
 8017b7c:	9202      	str	r2, [sp, #8]
 8017b7e:	9301      	str	r3, [sp, #4]
 8017b80:	2300      	movs	r3, #0
 8017b82:	9300      	str	r3, [sp, #0]
 8017b84:	2300      	movs	r3, #0
 8017b86:	2220      	movs	r2, #32
 8017b88:	4836      	ldr	r0, [pc, #216]	@ (8017c64 <mg_tls_generate_handshake_keys+0x278>)
 8017b8a:	f7ff fe93 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 8017b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017b92:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 8017b96:	f107 0108 	add.w	r1, r7, #8
 8017b9a:	2220      	movs	r2, #32
 8017b9c:	9202      	str	r2, [sp, #8]
 8017b9e:	9301      	str	r3, [sp, #4]
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	2220      	movs	r2, #32
 8017ba8:	482f      	ldr	r0, [pc, #188]	@ (8017c68 <mg_tls_generate_handshake_keys+0x27c>)
 8017baa:	f7ff fe83 	bl	80178b4 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8017bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017bb2:	2220      	movs	r2, #32
 8017bb4:	4619      	mov	r1, r3
 8017bb6:	482d      	ldr	r0, [pc, #180]	@ (8017c6c <mg_tls_generate_handshake_keys+0x280>)
 8017bb8:	f7ff fc8e 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8017bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017bc0:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8017bc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4829      	ldr	r0, [pc, #164]	@ (8017c70 <mg_tls_generate_handshake_keys+0x284>)
 8017bcc:	f7ff fc84 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8017bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017bd4:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8017bd8:	220c      	movs	r2, #12
 8017bda:	4619      	mov	r1, r3
 8017bdc:	4825      	ldr	r0, [pc, #148]	@ (8017c74 <mg_tls_generate_handshake_keys+0x288>)
 8017bde:	f7ff fc7b 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8017be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017be6:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8017bea:	2220      	movs	r2, #32
 8017bec:	4619      	mov	r1, r3
 8017bee:	4822      	ldr	r0, [pc, #136]	@ (8017c78 <mg_tls_generate_handshake_keys+0x28c>)
 8017bf0:	f7ff fc72 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8017bf4:	f107 0308 	add.w	r3, r7, #8
 8017bf8:	2220      	movs	r2, #32
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	481f      	ldr	r0, [pc, #124]	@ (8017c7c <mg_tls_generate_handshake_keys+0x290>)
 8017bfe:	f7ff fc6b 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8017c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017c06:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017c0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017c0e:	4619      	mov	r1, r3
 8017c10:	481b      	ldr	r0, [pc, #108]	@ (8017c80 <mg_tls_generate_handshake_keys+0x294>)
 8017c12:	f7ff fc61 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8017c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017c1a:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017c1e:	220c      	movs	r2, #12
 8017c20:	4619      	mov	r1, r3
 8017c22:	4818      	ldr	r0, [pc, #96]	@ (8017c84 <mg_tls_generate_handshake_keys+0x298>)
 8017c24:	f7ff fc58 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8017c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017c2c:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8017c30:	2220      	movs	r2, #32
 8017c32:	4619      	mov	r1, r3
 8017c34:	4814      	ldr	r0, [pc, #80]	@ (8017c88 <mg_tls_generate_handshake_keys+0x29c>)
 8017c36:	f7ff fc4f 	bl	80174d8 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 8017c3a:	bf00      	nop
 8017c3c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	24002370 	.word	0x24002370
 8017c48:	24000280 	.word	0x24000280
 8017c4c:	0802b7ec 	.word	0x0802b7ec
 8017c50:	0802b7fc 	.word	0x0802b7fc
 8017c54:	0802b808 	.word	0x0802b808
 8017c58:	0802b814 	.word	0x0802b814
 8017c5c:	0802b828 	.word	0x0802b828
 8017c60:	0802b83c 	.word	0x0802b83c
 8017c64:	0802b848 	.word	0x0802b848
 8017c68:	0802b854 	.word	0x0802b854
 8017c6c:	0802b864 	.word	0x0802b864
 8017c70:	0802b874 	.word	0x0802b874
 8017c74:	0802b87c 	.word	0x0802b87c
 8017c78:	0802b884 	.word	0x0802b884
 8017c7c:	0802b890 	.word	0x0802b890
 8017c80:	0802b8a0 	.word	0x0802b8a0
 8017c84:	0802b8a8 	.word	0x0802b8a8
 8017c88:	0802b8b0 	.word	0x0802b8b0

08017c8c <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b0cc      	sub	sp, #304	@ 0x130
 8017c90:	af04      	add	r7, sp, #16
 8017c92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017c96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017c9a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017c9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017ca0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017caa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8017cae:	2320      	movs	r3, #32
 8017cb0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8017cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017cb8:	f103 0120 	add.w	r1, r3, #32
 8017cbc:	f107 0308 	add.w	r3, r7, #8
 8017cc0:	2270      	movs	r2, #112	@ 0x70
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f00f fd4a 	bl	802775c <memmove>
  mg_sha256_final(hash, &sha256);
 8017cc8:	f107 0208 	add.w	r2, r7, #8
 8017ccc:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8017cd0:	4611      	mov	r1, r2
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f7fd fbfb 	bl	80154ce <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8017cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017cdc:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8017ce0:	2320      	movs	r3, #32
 8017ce2:	9302      	str	r3, [sp, #8]
 8017ce4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017ce8:	9301      	str	r3, [sp, #4]
 8017cea:	2320      	movs	r3, #32
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	4b64      	ldr	r3, [pc, #400]	@ (8017e80 <mg_tls_generate_application_keys+0x1f4>)
 8017cf0:	2220      	movs	r2, #32
 8017cf2:	4864      	ldr	r0, [pc, #400]	@ (8017e84 <mg_tls_generate_application_keys+0x1f8>)
 8017cf4:	f7ff fdde 	bl	80178b4 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8017cf8:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8017cfc:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8017d00:	2320      	movs	r3, #32
 8017d02:	9300      	str	r3, [sp, #0]
 8017d04:	4b60      	ldr	r3, [pc, #384]	@ (8017e88 <mg_tls_generate_application_keys+0x1fc>)
 8017d06:	2220      	movs	r2, #32
 8017d08:	f7fd fd35 	bl	8015776 <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8017d0c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8017d10:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8017d14:	2320      	movs	r3, #32
 8017d16:	9302      	str	r3, [sp, #8]
 8017d18:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8017d1c:	9301      	str	r3, [sp, #4]
 8017d1e:	2320      	movs	r3, #32
 8017d20:	9300      	str	r3, [sp, #0]
 8017d22:	4613      	mov	r3, r2
 8017d24:	2220      	movs	r2, #32
 8017d26:	4859      	ldr	r0, [pc, #356]	@ (8017e8c <mg_tls_generate_application_keys+0x200>)
 8017d28:	f7ff fdc4 	bl	80178b4 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8017d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d30:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8017d34:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8017d38:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017d3c:	9202      	str	r2, [sp, #8]
 8017d3e:	9301      	str	r3, [sp, #4]
 8017d40:	2300      	movs	r3, #0
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	2300      	movs	r3, #0
 8017d46:	2220      	movs	r2, #32
 8017d48:	4851      	ldr	r0, [pc, #324]	@ (8017e90 <mg_tls_generate_application_keys+0x204>)
 8017d4a:	f7ff fdb3 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8017d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d52:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8017d56:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8017d5a:	220c      	movs	r2, #12
 8017d5c:	9202      	str	r2, [sp, #8]
 8017d5e:	9301      	str	r3, [sp, #4]
 8017d60:	2300      	movs	r3, #0
 8017d62:	9300      	str	r3, [sp, #0]
 8017d64:	2300      	movs	r3, #0
 8017d66:	2220      	movs	r2, #32
 8017d68:	484a      	ldr	r0, [pc, #296]	@ (8017e94 <mg_tls_generate_application_keys+0x208>)
 8017d6a:	f7ff fda3 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 8017d6e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8017d72:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8017d76:	2320      	movs	r3, #32
 8017d78:	9302      	str	r3, [sp, #8]
 8017d7a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017d7e:	9301      	str	r3, [sp, #4]
 8017d80:	2320      	movs	r3, #32
 8017d82:	9300      	str	r3, [sp, #0]
 8017d84:	4613      	mov	r3, r2
 8017d86:	2220      	movs	r2, #32
 8017d88:	4843      	ldr	r0, [pc, #268]	@ (8017e98 <mg_tls_generate_application_keys+0x20c>)
 8017d8a:	f7ff fd93 	bl	80178b4 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8017d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017d92:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8017d96:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8017d9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017d9e:	9202      	str	r2, [sp, #8]
 8017da0:	9301      	str	r3, [sp, #4]
 8017da2:	2300      	movs	r3, #0
 8017da4:	9300      	str	r3, [sp, #0]
 8017da6:	2300      	movs	r3, #0
 8017da8:	2220      	movs	r2, #32
 8017daa:	4839      	ldr	r0, [pc, #228]	@ (8017e90 <mg_tls_generate_application_keys+0x204>)
 8017dac:	f7ff fd82 	bl	80178b4 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8017db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017db4:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8017db8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8017dbc:	220c      	movs	r2, #12
 8017dbe:	9202      	str	r2, [sp, #8]
 8017dc0:	9301      	str	r3, [sp, #4]
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	9300      	str	r3, [sp, #0]
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	2220      	movs	r2, #32
 8017dca:	4832      	ldr	r0, [pc, #200]	@ (8017e94 <mg_tls_generate_application_keys+0x208>)
 8017dcc:	f7ff fd72 	bl	80178b4 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8017dd0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8017dd4:	2220      	movs	r2, #32
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	4830      	ldr	r0, [pc, #192]	@ (8017e9c <mg_tls_generate_application_keys+0x210>)
 8017dda:	f7ff fb7d 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8017dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017de2:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8017de6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017dea:	4619      	mov	r1, r3
 8017dec:	482c      	ldr	r0, [pc, #176]	@ (8017ea0 <mg_tls_generate_application_keys+0x214>)
 8017dee:	f7ff fb73 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8017df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017df6:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8017dfa:	220c      	movs	r2, #12
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	4829      	ldr	r0, [pc, #164]	@ (8017ea4 <mg_tls_generate_application_keys+0x218>)
 8017e00:	f7ff fb6a 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8017e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e08:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8017e0c:	2220      	movs	r2, #32
 8017e0e:	4619      	mov	r1, r3
 8017e10:	4825      	ldr	r0, [pc, #148]	@ (8017ea8 <mg_tls_generate_application_keys+0x21c>)
 8017e12:	f7ff fb61 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8017e16:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017e1a:	2220      	movs	r2, #32
 8017e1c:	4619      	mov	r1, r3
 8017e1e:	4823      	ldr	r0, [pc, #140]	@ (8017eac <mg_tls_generate_application_keys+0x220>)
 8017e20:	f7ff fb5a 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8017e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e28:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017e2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017e30:	4619      	mov	r1, r3
 8017e32:	481f      	ldr	r0, [pc, #124]	@ (8017eb0 <mg_tls_generate_application_keys+0x224>)
 8017e34:	f7ff fb50 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8017e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e3c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017e40:	220c      	movs	r2, #12
 8017e42:	4619      	mov	r1, r3
 8017e44:	481b      	ldr	r0, [pc, #108]	@ (8017eb4 <mg_tls_generate_application_keys+0x228>)
 8017e46:	f7ff fb47 	bl	80174d8 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8017e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e4e:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8017e52:	2220      	movs	r2, #32
 8017e54:	4619      	mov	r1, r3
 8017e56:	4818      	ldr	r0, [pc, #96]	@ (8017eb8 <mg_tls_generate_application_keys+0x22c>)
 8017e58:	f7ff fb3e 	bl	80174d8 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 8017e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e60:	2200      	movs	r2, #0
 8017e62:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8017e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e6a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8017e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017e72:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8017e76:	bf00      	nop
 8017e78:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}
 8017e80:	24000280 	.word	0x24000280
 8017e84:	0802b7ec 	.word	0x0802b7ec
 8017e88:	24002370 	.word	0x24002370
 8017e8c:	0802b8bc 	.word	0x0802b8bc
 8017e90:	0802b83c 	.word	0x0802b83c
 8017e94:	0802b848 	.word	0x0802b848
 8017e98:	0802b8d0 	.word	0x0802b8d0
 8017e9c:	0802b8e4 	.word	0x0802b8e4
 8017ea0:	0802b874 	.word	0x0802b874
 8017ea4:	0802b87c 	.word	0x0802b87c
 8017ea8:	0802b884 	.word	0x0802b884
 8017eac:	0802b8f4 	.word	0x0802b8f4
 8017eb0:	0802b8a0 	.word	0x0802b8a0
 8017eb4:	0802b8a8 	.word	0x0802b8a8
 8017eb8:	0802b8b0 	.word	0x0802b8b0

08017ebc <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b09a      	sub	sp, #104	@ 0x68
 8017ec0:	af04      	add	r7, sp, #16
 8017ec2:	60f8      	str	r0, [r7, #12]
 8017ec4:	60b9      	str	r1, [r7, #8]
 8017ec6:	607a      	str	r2, [r7, #4]
 8017ec8:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017ed0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8017ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ed4:	3304      	adds	r3, #4
 8017ed6:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	3311      	adds	r3, #17
 8017edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017ede:	2317      	movs	r3, #23
 8017ee0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8017ee4:	2303      	movs	r3, #3
 8017ee6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017eea:	2303      	movs	r3, #3
 8017eec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8017ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ef2:	0a1b      	lsrs	r3, r3, #8
 8017ef4:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8017efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017efc:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017efe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017f02:	2317      	movs	r3, #23
 8017f04:	773b      	strb	r3, [r7, #28]
 8017f06:	2303      	movs	r3, #3
 8017f08:	777b      	strb	r3, [r7, #29]
 8017f0a:	2303      	movs	r3, #3
 8017f0c:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8017f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f10:	0a1b      	lsrs	r3, r3, #8
 8017f12:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017f14:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8017f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f18:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8017f1a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017f24:	f003 0302 	and.w	r3, r3, #2
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d003      	beq.n	8017f36 <mg_tls_encrypt+0x7a>
 8017f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f30:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8017f34:	e002      	b.n	8017f3c <mg_tls_encrypt+0x80>
 8017f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f38:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8017f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017f44:	f003 0302 	and.w	r3, r3, #2
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d003      	beq.n	8017f56 <mg_tls_encrypt+0x9a>
 8017f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f50:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017f54:	e002      	b.n	8017f5c <mg_tls_encrypt+0xa0>
 8017f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f58:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 8017f5c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017f64:	f003 0302 	and.w	r3, r3, #2
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d003      	beq.n	8017f76 <mg_tls_encrypt+0xba>
 8017f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f70:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017f74:	e002      	b.n	8017f7c <mg_tls_encrypt+0xc0>
 8017f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f78:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 8017f7c:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8017f7e:	f107 0310 	add.w	r3, r7, #16
 8017f82:	220c      	movs	r2, #12
 8017f84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017f86:	4618      	mov	r0, r3
 8017f88:	f00f fbe8 	bl	802775c <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8017f8c:	7e3a      	ldrb	r2, [r7, #24]
 8017f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f90:	0e1b      	lsrs	r3, r3, #24
 8017f92:	b2db      	uxtb	r3, r3
 8017f94:	4053      	eors	r3, r2
 8017f96:	b2db      	uxtb	r3, r3
 8017f98:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8017f9a:	7e7a      	ldrb	r2, [r7, #25]
 8017f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f9e:	0c1b      	lsrs	r3, r3, #16
 8017fa0:	b2db      	uxtb	r3, r3
 8017fa2:	4053      	eors	r3, r2
 8017fa4:	b2db      	uxtb	r3, r3
 8017fa6:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8017fa8:	7eba      	ldrb	r2, [r7, #26]
 8017faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017fac:	0a1b      	lsrs	r3, r3, #8
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	4053      	eors	r3, r2
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8017fb6:	7efa      	ldrb	r2, [r7, #27]
 8017fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017fba:	b2db      	uxtb	r3, r3
 8017fbc:	4053      	eors	r3, r2
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8017fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fc4:	6899      	ldr	r1, [r3, #8]
 8017fc6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017fca:	2305      	movs	r3, #5
 8017fcc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017fce:	f7f5 fc63 	bl	800d898 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8017fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fd4:	689a      	ldr	r2, [r3, #8]
 8017fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fd8:	4413      	add	r3, r2
 8017fda:	4619      	mov	r1, r3
 8017fdc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017fde:	f7f5 fbcf 	bl	800d780 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8017fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fe4:	681a      	ldr	r2, [r3, #0]
 8017fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fe8:	689b      	ldr	r3, [r3, #8]
 8017fea:	4413      	add	r3, r2
 8017fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8017fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ff0:	681a      	ldr	r2, [r3, #0]
 8017ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ff4:	6899      	ldr	r1, [r3, #8]
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	440b      	add	r3, r1
 8017ffa:	3301      	adds	r3, #1
 8017ffc:	4413      	add	r3, r2
 8017ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8018000:	687a      	ldr	r2, [r7, #4]
 8018002:	68b9      	ldr	r1, [r7, #8]
 8018004:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018006:	f00f fba9 	bl	802775c <memmove>
  outmsg[msgsz] = msgtype;
 801800a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	4413      	add	r3, r2
 8018010:	78fa      	ldrb	r2, [r7, #3]
 8018012:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8018014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018018:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 801801a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801801c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8018020:	4619      	mov	r1, r3
 8018022:	2001      	movs	r0, #1
 8018024:	f00d fd06 	bl	8025a34 <calloc>
 8018028:	4603      	mov	r3, r0
 801802a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 801802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801802e:	2b00      	cmp	r3, #0
 8018030:	d104      	bne.n	801803c <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8018032:	491f      	ldr	r1, [pc, #124]	@ (80180b0 <mg_tls_encrypt+0x1f4>)
 8018034:	68f8      	ldr	r0, [r7, #12]
 8018036:	f7f0 fe21 	bl	8008c7c <mg_error>
 801803a:	e035      	b.n	80180a8 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	3301      	adds	r3, #1
 8018040:	f107 011c 	add.w	r1, r7, #28
 8018044:	f107 0210 	add.w	r2, r7, #16
 8018048:	9302      	str	r3, [sp, #8]
 801804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801804c:	9301      	str	r3, [sp, #4]
 801804e:	2305      	movs	r3, #5
 8018050:	9300      	str	r3, [sp, #0]
 8018052:	460b      	mov	r3, r1
 8018054:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018058:	f005 fa61 	bl	801d51e <mg_chacha20_poly1305_encrypt>
 801805c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 801805e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018060:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018062:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018064:	f00f fb7a 	bl	802775c <memmove>
      free(enc);
 8018068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801806a:	f00d fd07 	bl	8025a7c <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018074:	f003 0302 	and.w	r3, r3, #2
 8018078:	b2db      	uxtb	r3, r3
 801807a:	2b00      	cmp	r3, #0
 801807c:	d007      	beq.n	801808e <mg_tls_encrypt+0x1d2>
 801807e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018080:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8018084:	1c5a      	adds	r2, r3, #1
 8018086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018088:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 801808c:	e006      	b.n	801809c <mg_tls_encrypt+0x1e0>
 801808e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018090:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8018094:	1c5a      	adds	r2, r3, #1
 8018096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018098:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 801809c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801809e:	689a      	ldr	r2, [r3, #8]
 80180a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180a2:	441a      	add	r2, r3
 80180a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180a6:	609a      	str	r2, [r3, #8]
}
 80180a8:	3758      	adds	r7, #88	@ 0x58
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd80      	pop	{r7, pc}
 80180ae:	bf00      	nop
 80180b0:	0802b904 	.word	0x0802b904

080180b4 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b092      	sub	sp, #72	@ 0x48
 80180b8:	af02      	add	r7, sp, #8
 80180ba:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80180c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	3368      	adds	r3, #104	@ 0x68
 80180c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80180d0:	f003 0302 	and.w	r3, r3, #2
 80180d4:	b2db      	uxtb	r3, r3
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d003      	beq.n	80180e2 <mg_tls_recv_record+0x2e>
 80180da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180dc:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80180e0:	e002      	b.n	80180e8 <mg_tls_recv_record+0x34>
 80180e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180e4:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 80180e8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80180f0:	f003 0302 	and.w	r3, r3, #2
 80180f4:	b2db      	uxtb	r3, r3
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d003      	beq.n	8018102 <mg_tls_recv_record+0x4e>
 80180fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180fc:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8018100:	e002      	b.n	8018108 <mg_tls_recv_record+0x54>
 8018102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018104:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 8018108:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018110:	f003 0302 	and.w	r3, r3, #2
 8018114:	b2db      	uxtb	r3, r3
 8018116:	2b00      	cmp	r3, #0
 8018118:	d003      	beq.n	8018122 <mg_tls_recv_record+0x6e>
 801811a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801811c:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8018120:	e002      	b.n	8018128 <mg_tls_recv_record+0x74>
 8018122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018124:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8018128:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 801812a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801812c:	699b      	ldr	r3, [r3, #24]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8018132:	2300      	movs	r3, #0
 8018134:	e0c7      	b.n	80182c6 <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f7ff fb25 	bl	8017786 <mg_tls_got_record>
 801813c:	4603      	mov	r3, r0
 801813e:	f083 0301 	eor.w	r3, r3, #1
 8018142:	b2db      	uxtb	r3, r3
 8018144:	2b00      	cmp	r3, #0
 8018146:	d002      	beq.n	801814e <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8018148:	f06f 0301 	mvn.w	r3, #1
 801814c:	e0bb      	b.n	80182c6 <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 801814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	781b      	ldrb	r3, [r3, #0]
 8018154:	2b17      	cmp	r3, #23
 8018156:	d026      	beq.n	80181a6 <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8018158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	781b      	ldrb	r3, [r3, #0]
 801815e:	2b14      	cmp	r3, #20
 8018160:	d103      	bne.n	801816a <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f7ff fb37 	bl	80177d6 <mg_tls_drop_record>
 8018168:	e7e5      	b.n	8018136 <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 801816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b15      	cmp	r3, #21
 8018172:	d111      	bne.n	8018198 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8018174:	4b56      	ldr	r3, [pc, #344]	@ (80182d0 <mg_tls_recv_record+0x21c>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	2b01      	cmp	r3, #1
 801817a:	dd09      	ble.n	8018190 <mg_tls_recv_record+0xdc>
 801817c:	4b55      	ldr	r3, [pc, #340]	@ (80182d4 <mg_tls_recv_record+0x220>)
 801817e:	f642 423a 	movw	r2, #11322	@ 0x2c3a
 8018182:	4955      	ldr	r1, [pc, #340]	@ (80182d8 <mg_tls_recv_record+0x224>)
 8018184:	2002      	movs	r0, #2
 8018186:	f7f6 fbf1 	bl	800e96c <mg_log_prefix>
 801818a:	4854      	ldr	r0, [pc, #336]	@ (80182dc <mg_tls_recv_record+0x228>)
 801818c:	f7f6 fc3e 	bl	800ea0c <mg_log>
      mg_tls_drop_record(c);
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f7ff fb20 	bl	80177d6 <mg_tls_drop_record>
 8018196:	e7ce      	b.n	8018136 <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8018198:	4951      	ldr	r1, [pc, #324]	@ (80182e0 <mg_tls_recv_record+0x22c>)
 801819a:	6878      	ldr	r0, [r7, #4]
 801819c:	f7f0 fd6e 	bl	8008c7c <mg_error>
      return -1;
 80181a0:	f04f 33ff 	mov.w	r3, #4294967295
 80181a4:	e08f      	b.n	80182c6 <mg_tls_recv_record+0x212>
      break;
 80181a6:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 80181a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	3303      	adds	r3, #3
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	b21b      	sxth	r3, r3
 80181b2:	021b      	lsls	r3, r3, #8
 80181b4:	b21a      	sxth	r2, r3
 80181b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	3304      	adds	r3, #4
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	b21b      	sxth	r3, r3
 80181c0:	4313      	orrs	r3, r2
 80181c2:	b21b      	sxth	r3, r3
 80181c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 80181c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	3305      	adds	r3, #5
 80181cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 80181ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80181d0:	2b0f      	cmp	r3, #15
 80181d2:	d806      	bhi.n	80181e2 <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 80181d4:	4943      	ldr	r1, [pc, #268]	@ (80182e4 <mg_tls_recv_record+0x230>)
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7f0 fd50 	bl	8008c7c <mg_error>
    return -1;
 80181dc:	f04f 33ff 	mov.w	r3, #4294967295
 80181e0:	e071      	b.n	80182c6 <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 80181e2:	f107 030c 	add.w	r3, r7, #12
 80181e6:	220c      	movs	r2, #12
 80181e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80181ea:	4618      	mov	r0, r3
 80181ec:	f00f fab6 	bl	802775c <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80181f0:	7d3a      	ldrb	r2, [r7, #20]
 80181f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181f4:	0e1b      	lsrs	r3, r3, #24
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	4053      	eors	r3, r2
 80181fa:	b2db      	uxtb	r3, r3
 80181fc:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80181fe:	7d7a      	ldrb	r2, [r7, #21]
 8018200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018202:	0c1b      	lsrs	r3, r3, #16
 8018204:	b2db      	uxtb	r3, r3
 8018206:	4053      	eors	r3, r2
 8018208:	b2db      	uxtb	r3, r3
 801820a:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 801820c:	7dba      	ldrb	r2, [r7, #22]
 801820e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018210:	0a1b      	lsrs	r3, r3, #8
 8018212:	b2db      	uxtb	r3, r3
 8018214:	4053      	eors	r3, r2
 8018216:	b2db      	uxtb	r3, r3
 8018218:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 801821a:	7dfa      	ldrb	r2, [r7, #23]
 801821c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801821e:	b2db      	uxtb	r3, r3
 8018220:	4053      	eors	r3, r2
 8018222:	b2db      	uxtb	r3, r3
 8018224:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8018226:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018228:	4619      	mov	r1, r3
 801822a:	2001      	movs	r0, #1
 801822c:	f00d fc02 	bl	8025a34 <calloc>
 8018230:	4603      	mov	r3, r0
 8018232:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 8018234:	6a3b      	ldr	r3, [r7, #32]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d106      	bne.n	8018248 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 801823a:	492b      	ldr	r1, [pc, #172]	@ (80182e8 <mg_tls_recv_record+0x234>)
 801823c:	6878      	ldr	r0, [r7, #4]
 801823e:	f7f0 fd1d 	bl	8008c7c <mg_error>
      return -1;
 8018242:	f04f 33ff 	mov.w	r3, #4294967295
 8018246:	e03e      	b.n	80182c6 <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8018248:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801824a:	f107 020c 	add.w	r2, r7, #12
 801824e:	9300      	str	r3, [sp, #0]
 8018250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018254:	6a38      	ldr	r0, [r7, #32]
 8018256:	f005 f99a 	bl	801d58e <mg_chacha20_poly1305_decrypt>
 801825a:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 801825c:	69fa      	ldr	r2, [r7, #28]
 801825e:	6a39      	ldr	r1, [r7, #32]
 8018260:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018262:	f00f fa7b 	bl	802775c <memmove>
    free(dec);
 8018266:	6a38      	ldr	r0, [r7, #32]
 8018268:	f00d fc08 	bl	8025a7c <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 801826c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801826e:	3b11      	subs	r3, #17
 8018270:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 8018272:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018274:	3b11      	subs	r3, #17
 8018276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018278:	4413      	add	r3, r2
 801827a:	781a      	ldrb	r2, [r3, #0]
 801827c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801827e:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 8018280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018284:	6812      	ldr	r2, [r2, #0]
 8018286:	1a9a      	subs	r2, r3, r2
 8018288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801828a:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 801828c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801828e:	f1a3 0211 	sub.w	r2, r3, #17
 8018292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018294:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801829c:	f003 0302 	and.w	r3, r3, #2
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d007      	beq.n	80182b6 <mg_tls_recv_record+0x202>
 80182a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182a8:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80182ac:	1c5a      	adds	r2, r3, #1
 80182ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182b0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 80182b4:	e006      	b.n	80182c4 <mg_tls_recv_record+0x210>
 80182b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182b8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 80182bc:	1c5a      	adds	r2, r3, #1
 80182be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182c0:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 80182c4:	69bb      	ldr	r3, [r7, #24]
}
 80182c6:	4618      	mov	r0, r3
 80182c8:	3740      	adds	r7, #64	@ 0x40
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}
 80182ce:	bf00      	nop
 80182d0:	24000258 	.word	0x24000258
 80182d4:	0802dc24 	.word	0x0802dc24
 80182d8:	08029e1c 	.word	0x08029e1c
 80182dc:	0802b90c 	.word	0x0802b90c
 80182e0:	0802b928 	.word	0x0802b928
 80182e4:	0802b7e0 	.word	0x0802b7e0
 80182e8:	0802b904 	.word	0x0802b904

080182ec <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 80182ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182ee:	b0d5      	sub	sp, #340	@ 0x154
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80182f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80182fa:	6018      	str	r0, [r3, #0]
 80182fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018300:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8018304:	6019      	str	r1, [r3, #0]
 8018306:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801830a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801830e:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018310:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018314:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801831e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 8018322:	4b41      	ldr	r3, [pc, #260]	@ (8018428 <mg_tls_calc_cert_verify_hash+0x13c>)
 8018324:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8018328:	461d      	mov	r5, r3
 801832a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801832c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801832e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018332:	682b      	ldr	r3, [r5, #0]
 8018334:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8018336:	4b3d      	ldr	r3, [pc, #244]	@ (801842c <mg_tls_calc_cert_verify_hash+0x140>)
 8018338:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 801833c:	461d      	mov	r5, r3
 801833e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018346:	682b      	ldr	r3, [r5, #0]
 8018348:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 801834a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801834e:	2240      	movs	r2, #64	@ 0x40
 8018350:	2120      	movs	r1, #32
 8018352:	4618      	mov	r0, r3
 8018354:	f00f fa1c 	bl	8027790 <memset>
  if (is_client) {
 8018358:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801835c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d018      	beq.n	8018398 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 8018366:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801836a:	3340      	adds	r3, #64	@ 0x40
 801836c:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8018370:	469c      	mov	ip, r3
 8018372:	f104 0e20 	add.w	lr, r4, #32
 8018376:	4665      	mov	r5, ip
 8018378:	4626      	mov	r6, r4
 801837a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801837c:	6028      	str	r0, [r5, #0]
 801837e:	6069      	str	r1, [r5, #4]
 8018380:	60aa      	str	r2, [r5, #8]
 8018382:	60eb      	str	r3, [r5, #12]
 8018384:	3410      	adds	r4, #16
 8018386:	f10c 0c10 	add.w	ip, ip, #16
 801838a:	4574      	cmp	r4, lr
 801838c:	d1f3      	bne.n	8018376 <mg_tls_calc_cert_verify_hash+0x8a>
 801838e:	4662      	mov	r2, ip
 8018390:	4623      	mov	r3, r4
 8018392:	881b      	ldrh	r3, [r3, #0]
 8018394:	8013      	strh	r3, [r2, #0]
 8018396:	e017      	b.n	80183c8 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8018398:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801839c:	3340      	adds	r3, #64	@ 0x40
 801839e:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80183a2:	469c      	mov	ip, r3
 80183a4:	f104 0e20 	add.w	lr, r4, #32
 80183a8:	4665      	mov	r5, ip
 80183aa:	4626      	mov	r6, r4
 80183ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80183ae:	6028      	str	r0, [r5, #0]
 80183b0:	6069      	str	r1, [r5, #4]
 80183b2:	60aa      	str	r2, [r5, #8]
 80183b4:	60eb      	str	r3, [r5, #12]
 80183b6:	3410      	adds	r4, #16
 80183b8:	f10c 0c10 	add.w	ip, ip, #16
 80183bc:	4574      	cmp	r4, lr
 80183be:	d1f3      	bne.n	80183a8 <mg_tls_calc_cert_verify_hash+0xbc>
 80183c0:	4662      	mov	r2, ip
 80183c2:	4623      	mov	r3, r4
 80183c4:	881b      	ldrh	r3, [r3, #0]
 80183c6:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80183c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80183cc:	f103 0120 	add.w	r1, r3, #32
 80183d0:	f107 0310 	add.w	r3, r7, #16
 80183d4:	2270      	movs	r2, #112	@ 0x70
 80183d6:	4618      	mov	r0, r3
 80183d8:	f00f f9c0 	bl	802775c <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 80183dc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80183e0:	3362      	adds	r3, #98	@ 0x62
 80183e2:	f107 0210 	add.w	r2, r7, #16
 80183e6:	4611      	mov	r1, r2
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7fd f870 	bl	80154ce <mg_sha256_final>

  mg_sha256_init(&sha256);
 80183ee:	f107 0310 	add.w	r3, r7, #16
 80183f2:	4618      	mov	r0, r3
 80183f4:	f7fc fdee 	bl	8014fd4 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 80183f8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80183fc:	f107 0310 	add.w	r3, r7, #16
 8018400:	2282      	movs	r2, #130	@ 0x82
 8018402:	4618      	mov	r0, r3
 8018404:	f7fd f82a 	bl	801545c <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8018408:	f107 0210 	add.w	r2, r7, #16
 801840c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018410:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8018414:	4611      	mov	r1, r2
 8018416:	6818      	ldr	r0, [r3, #0]
 8018418:	f7fd f859 	bl	80154ce <mg_sha256_final>
}
 801841c:	bf00      	nop
 801841e:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8018422:	46bd      	mov	sp, r7
 8018424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018426:	bf00      	nop
 8018428:	0802b93c 	.word	0x0802b93c
 801842c:	0802b960 	.word	0x0802b960

08018430 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8018430:	b580      	push	{r7, lr}
 8018432:	b08c      	sub	sp, #48	@ 0x30
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801843e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	3368      	adds	r3, #104	@ 0x68
 8018444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8018446:	6878      	ldr	r0, [r7, #4]
 8018448:	f7ff f99d 	bl	8017786 <mg_tls_got_record>
 801844c:	4603      	mov	r3, r0
 801844e:	f083 0301 	eor.w	r3, r3, #1
 8018452:	b2db      	uxtb	r3, r3
 8018454:	2b00      	cmp	r3, #0
 8018456:	d002      	beq.n	801845e <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8018458:	f06f 0301 	mvn.w	r3, #1
 801845c:	e16d      	b.n	801873a <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 801845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	2b16      	cmp	r3, #22
 8018466:	d105      	bne.n	8018474 <mg_tls_server_recv_hello+0x44>
 8018468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	3305      	adds	r3, #5
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	2b01      	cmp	r3, #1
 8018472:	d006      	beq.n	8018482 <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8018474:	4998      	ldr	r1, [pc, #608]	@ (80186d8 <mg_tls_server_recv_hello+0x2a8>)
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7f0 fc00 	bl	8008c7c <mg_error>
    return -1;
 801847c:	f04f 33ff 	mov.w	r3, #4294967295
 8018480:	e15b      	b.n	801873a <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->len < 50) goto fail;
 8018482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018484:	689b      	ldr	r3, [r3, #8]
 8018486:	2b31      	cmp	r3, #49	@ 0x31
 8018488:	f240 8146 	bls.w	8018718 <mg_tls_server_recv_hello+0x2e8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	3303      	adds	r3, #3
 8018492:	781b      	ldrb	r3, [r3, #0]
 8018494:	b21b      	sxth	r3, r3
 8018496:	021b      	lsls	r3, r3, #8
 8018498:	b21a      	sxth	r2, r3
 801849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	3304      	adds	r3, #4
 80184a0:	781b      	ldrb	r3, [r3, #0]
 80184a2:	b21b      	sxth	r3, r3
 80184a4:	4313      	orrs	r3, r2
 80184a6:	b21b      	sxth	r3, r3
 80184a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 80184aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80184ac:	1d1a      	adds	r2, r3, #4
 80184ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184b0:	689b      	ldr	r3, [r3, #8]
 80184b2:	429a      	cmp	r2, r3
 80184b4:	f200 8132 	bhi.w	801871c <mg_tls_server_recv_hello+0x2ec>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80184b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184ba:	f103 0020 	add.w	r0, r3, #32
 80184be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	3305      	adds	r3, #5
 80184c4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80184c6:	4619      	mov	r1, r3
 80184c8:	f7fc ffc8 	bl	801545c <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80184cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184ce:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80184d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	330b      	adds	r3, #11
 80184d8:	2220      	movs	r2, #32
 80184da:	4619      	mov	r1, r3
 80184dc:	f00f f93e 	bl	802775c <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80184e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80184e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80184ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80184f0:	2b20      	cmp	r3, #32
 80184f2:	d10b      	bne.n	801850c <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 80184f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f6:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80184fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	332c      	adds	r3, #44	@ 0x2c
 8018500:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8018504:	4619      	mov	r1, r3
 8018506:	f00f f929 	bl	802775c <memmove>
 801850a:	e011      	b.n	8018530 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 801850c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018510:	2b00      	cmp	r3, #0
 8018512:	d00d      	beq.n	8018530 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 8018514:	4b71      	ldr	r3, [pc, #452]	@ (80186dc <mg_tls_server_recv_hello+0x2ac>)
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	2b01      	cmp	r3, #1
 801851a:	dd09      	ble.n	8018530 <mg_tls_server_recv_hello+0x100>
 801851c:	4b70      	ldr	r3, [pc, #448]	@ (80186e0 <mg_tls_server_recv_hello+0x2b0>)
 801851e:	f642 429b 	movw	r2, #11419	@ 0x2c9b
 8018522:	4970      	ldr	r1, [pc, #448]	@ (80186e4 <mg_tls_server_recv_hello+0x2b4>)
 8018524:	2002      	movs	r0, #2
 8018526:	f7f6 fa21 	bl	800e96c <mg_log_prefix>
 801852a:	486f      	ldr	r0, [pc, #444]	@ (80186e8 <mg_tls_server_recv_hello+0x2b8>)
 801852c:	f7f6 fa6e 	bl	800ea0c <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8018530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018532:	681a      	ldr	r2, [r3, #0]
 8018534:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018538:	332c      	adds	r3, #44	@ 0x2c
 801853a:	4413      	add	r3, r2
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	b21b      	sxth	r3, r3
 8018540:	021b      	lsls	r3, r3, #8
 8018542:	b21a      	sxth	r2, r3
 8018544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018546:	6819      	ldr	r1, [r3, #0]
 8018548:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801854c:	332d      	adds	r3, #45	@ 0x2d
 801854e:	440b      	add	r3, r1
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	b21b      	sxth	r3, r3
 8018554:	4313      	orrs	r3, r2
 8018556:	b21b      	sxth	r3, r3
 8018558:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 801855a:	8bfa      	ldrh	r2, [r7, #30]
 801855c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8018560:	4413      	add	r3, r2
 8018562:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8018566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018568:	689b      	ldr	r3, [r3, #8]
 801856a:	429a      	cmp	r2, r3
 801856c:	f200 80d8 	bhi.w	8018720 <mg_tls_server_recv_hello+0x2f0>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8018570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018572:	681a      	ldr	r2, [r3, #0]
 8018574:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8018578:	8bfb      	ldrh	r3, [r7, #30]
 801857a:	440b      	add	r3, r1
 801857c:	3330      	adds	r3, #48	@ 0x30
 801857e:	4413      	add	r3, r2
 8018580:	781b      	ldrb	r3, [r3, #0]
 8018582:	b21b      	sxth	r3, r3
 8018584:	021b      	lsls	r3, r3, #8
 8018586:	b21a      	sxth	r2, r3
 8018588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801858a:	6819      	ldr	r1, [r3, #0]
 801858c:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8018590:	8bfb      	ldrh	r3, [r7, #30]
 8018592:	4403      	add	r3, r0
 8018594:	3331      	adds	r3, #49	@ 0x31
 8018596:	440b      	add	r3, r1
 8018598:	781b      	ldrb	r3, [r3, #0]
 801859a:	b21b      	sxth	r3, r3
 801859c:	4313      	orrs	r3, r2
 801859e:	b21b      	sxth	r3, r3
 80185a0:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 80185a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80185aa:	8bfb      	ldrh	r3, [r7, #30]
 80185ac:	440b      	add	r3, r1
 80185ae:	3332      	adds	r3, #50	@ 0x32
 80185b0:	4413      	add	r3, r2
 80185b2:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 80185b4:	8bbb      	ldrh	r3, [r7, #28]
 80185b6:	69ba      	ldr	r2, [r7, #24]
 80185b8:	441a      	add	r2, r3
 80185ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185bc:	6819      	ldr	r1, [r3, #0]
 80185be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c0:	689b      	ldr	r3, [r3, #8]
 80185c2:	440b      	add	r3, r1
 80185c4:	429a      	cmp	r2, r3
 80185c6:	f200 80ad 	bhi.w	8018724 <mg_tls_server_recv_hello+0x2f4>
  for (j = 0; j < ext_len;) {
 80185ca:	2300      	movs	r3, #0
 80185cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80185ce:	e09d      	b.n	801870c <mg_tls_server_recv_hello+0x2dc>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80185d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80185d2:	3302      	adds	r3, #2
 80185d4:	69ba      	ldr	r2, [r7, #24]
 80185d6:	4413      	add	r3, r2
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	b21b      	sxth	r3, r3
 80185dc:	021b      	lsls	r3, r3, #8
 80185de:	b21a      	sxth	r2, r3
 80185e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80185e2:	3303      	adds	r3, #3
 80185e4:	69b9      	ldr	r1, [r7, #24]
 80185e6:	440b      	add	r3, r1
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	b21b      	sxth	r3, r3
 80185ec:	4313      	orrs	r3, r2
 80185ee:	b21b      	sxth	r3, r3
 80185f0:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 80185f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80185f4:	69ba      	ldr	r2, [r7, #24]
 80185f6:	4413      	add	r3, r2
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	b21b      	sxth	r3, r3
 80185fc:	021b      	lsls	r3, r3, #8
 80185fe:	b21a      	sxth	r2, r3
 8018600:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018602:	3301      	adds	r3, #1
 8018604:	69b9      	ldr	r1, [r7, #24]
 8018606:	440b      	add	r3, r1
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	b21b      	sxth	r3, r3
 801860c:	4313      	orrs	r3, r2
 801860e:	b21b      	sxth	r3, r3
 8018610:	2b33      	cmp	r3, #51	@ 0x33
 8018612:	d006      	beq.n	8018622 <mg_tls_server_recv_hello+0x1f2>
      j += (uint16_t) (n + 4);
 8018614:	8afa      	ldrh	r2, [r7, #22]
 8018616:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018618:	4413      	add	r3, r2
 801861a:	b29b      	uxth	r3, r3
 801861c:	3304      	adds	r3, #4
 801861e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8018620:	e074      	b.n	801870c <mg_tls_server_recv_hello+0x2dc>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8018622:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018624:	3304      	adds	r3, #4
 8018626:	69ba      	ldr	r2, [r7, #24]
 8018628:	4413      	add	r3, r2
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	b21b      	sxth	r3, r3
 801862e:	021b      	lsls	r3, r3, #8
 8018630:	b21a      	sxth	r2, r3
 8018632:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018634:	3305      	adds	r3, #5
 8018636:	69b9      	ldr	r1, [r7, #24]
 8018638:	440b      	add	r3, r1
 801863a:	781b      	ldrb	r3, [r3, #0]
 801863c:	b21b      	sxth	r3, r3
 801863e:	4313      	orrs	r3, r2
 8018640:	b21b      	sxth	r3, r3
 8018642:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8018644:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018646:	3306      	adds	r3, #6
 8018648:	69ba      	ldr	r2, [r7, #24]
 801864a:	4413      	add	r3, r2
 801864c:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 801864e:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8018650:	693b      	ldr	r3, [r7, #16]
 8018652:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018654:	6809      	ldr	r1, [r1, #0]
 8018656:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8018658:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 801865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801865c:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 801865e:	429a      	cmp	r2, r3
 8018660:	d862      	bhi.n	8018728 <mg_tls_server_recv_hello+0x2f8>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8018662:	2300      	movs	r3, #0
 8018664:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8018666:	e047      	b.n	80186f8 <mg_tls_server_recv_hello+0x2c8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8018668:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801866a:	3302      	adds	r3, #2
 801866c:	693a      	ldr	r2, [r7, #16]
 801866e:	4413      	add	r3, r2
 8018670:	781b      	ldrb	r3, [r3, #0]
 8018672:	b21b      	sxth	r3, r3
 8018674:	021b      	lsls	r3, r3, #8
 8018676:	b21a      	sxth	r2, r3
 8018678:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801867a:	3303      	adds	r3, #3
 801867c:	6939      	ldr	r1, [r7, #16]
 801867e:	440b      	add	r3, r1
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	b21b      	sxth	r3, r3
 8018684:	4313      	orrs	r3, r2
 8018686:	b21b      	sxth	r3, r3
 8018688:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 801868a:	89fa      	ldrh	r2, [r7, #14]
 801868c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801868e:	4413      	add	r3, r2
 8018690:	1d1a      	adds	r2, r3, #4
 8018692:	8abb      	ldrh	r3, [r7, #20]
 8018694:	429a      	cmp	r2, r3
 8018696:	d849      	bhi.n	801872c <mg_tls_server_recv_hello+0x2fc>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8018698:	89fb      	ldrh	r3, [r7, #14]
 801869a:	2b20      	cmp	r3, #32
 801869c:	d126      	bne.n	80186ec <mg_tls_server_recv_hello+0x2bc>
 801869e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80186a0:	693a      	ldr	r2, [r7, #16]
 80186a2:	4413      	add	r3, r2
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d120      	bne.n	80186ec <mg_tls_server_recv_hello+0x2bc>
 80186aa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80186ac:	3301      	adds	r3, #1
 80186ae:	693a      	ldr	r2, [r7, #16]
 80186b0:	4413      	add	r3, r2
 80186b2:	781b      	ldrb	r3, [r3, #0]
 80186b4:	2b1d      	cmp	r3, #29
 80186b6:	d119      	bne.n	80186ec <mg_tls_server_recv_hello+0x2bc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 80186b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186ba:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 80186be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80186c0:	3304      	adds	r3, #4
 80186c2:	693a      	ldr	r2, [r7, #16]
 80186c4:	4413      	add	r3, r2
 80186c6:	89fa      	ldrh	r2, [r7, #14]
 80186c8:	4619      	mov	r1, r3
 80186ca:	f00f f847 	bl	802775c <memmove>
        mg_tls_drop_record(c);
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f7ff f881 	bl	80177d6 <mg_tls_drop_record>
        return 0;
 80186d4:	2300      	movs	r3, #0
 80186d6:	e030      	b.n	801873a <mg_tls_server_recv_hello+0x30a>
 80186d8:	0802b984 	.word	0x0802b984
 80186dc:	24000258 	.word	0x24000258
 80186e0:	0802dc38 	.word	0x0802dc38
 80186e4:	08029e1c 	.word	0x08029e1c
 80186e8:	0802b9a0 	.word	0x0802b9a0
      }
      k += (uint16_t) (m + 4);
 80186ec:	89fa      	ldrh	r2, [r7, #14]
 80186ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80186f0:	4413      	add	r3, r2
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	3304      	adds	r3, #4
 80186f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 80186f8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80186fa:	8abb      	ldrh	r3, [r7, #20]
 80186fc:	429a      	cmp	r2, r3
 80186fe:	d3b3      	bcc.n	8018668 <mg_tls_server_recv_hello+0x238>
    }
    j += (uint16_t) (n + 4);
 8018700:	8afa      	ldrh	r2, [r7, #22]
 8018702:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018704:	4413      	add	r3, r2
 8018706:	b29b      	uxth	r3, r3
 8018708:	3304      	adds	r3, #4
 801870a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 801870c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801870e:	8bbb      	ldrh	r3, [r7, #28]
 8018710:	429a      	cmp	r2, r3
 8018712:	f4ff af5d 	bcc.w	80185d0 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 8018716:	e00a      	b.n	801872e <mg_tls_server_recv_hello+0x2fe>
  if (rio->len < 50) goto fail;
 8018718:	bf00      	nop
 801871a:	e008      	b.n	801872e <mg_tls_server_recv_hello+0x2fe>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 801871c:	bf00      	nop
 801871e:	e006      	b.n	801872e <mg_tls_server_recv_hello+0x2fe>
    goto fail;
 8018720:	bf00      	nop
 8018722:	e004      	b.n	801872e <mg_tls_server_recv_hello+0x2fe>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8018724:	bf00      	nop
 8018726:	e002      	b.n	801872e <mg_tls_server_recv_hello+0x2fe>
      goto fail;
 8018728:	bf00      	nop
 801872a:	e000      	b.n	801872e <mg_tls_server_recv_hello+0x2fe>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 801872c:	bf00      	nop
  mg_error(c, "bad client hello");
 801872e:	4905      	ldr	r1, [pc, #20]	@ (8018744 <mg_tls_server_recv_hello+0x314>)
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f7f0 faa3 	bl	8008c7c <mg_error>
  return -1;
 8018736:	f04f 33ff 	mov.w	r3, #4294967295
}
 801873a:	4618      	mov	r0, r3
 801873c:	3730      	adds	r7, #48	@ 0x30
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	0802b9b4 	.word	0x0802b9b4

08018748 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8018748:	b5b0      	push	{r4, r5, r7, lr}
 801874a:	b0b4      	sub	sp, #208	@ 0xd0
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018756:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 801875a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801875e:	3304      	adds	r3, #4
 8018760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8018764:	4a4c      	ldr	r2, [pc, #304]	@ (8018898 <mg_tls_server_send_hello+0x150>)
 8018766:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801876a:	4611      	mov	r1, r2
 801876c:	227a      	movs	r2, #122	@ 0x7a
 801876e:	4618      	mov	r0, r3
 8018770:	f00f f947 	bl	8027a02 <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8018774:	f107 030c 	add.w	r3, r7, #12
 8018778:	2120      	movs	r1, #32
 801877a:	4618      	mov	r0, r3
 801877c:	f7e8 f9ba 	bl	8000af4 <mg_random>
 8018780:	4603      	mov	r3, r0
 8018782:	f083 0301 	eor.w	r3, r3, #1
 8018786:	b2db      	uxtb	r3, r3
 8018788:	2b00      	cmp	r3, #0
 801878a:	d003      	beq.n	8018794 <mg_tls_server_send_hello+0x4c>
 801878c:	4943      	ldr	r1, [pc, #268]	@ (801889c <mg_tls_server_send_hello+0x154>)
 801878e:	6878      	ldr	r0, [r7, #4]
 8018790:	f7f0 fa74 	bl	8008c7c <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8018794:	f107 010c 	add.w	r1, r7, #12
 8018798:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801879c:	2301      	movs	r3, #1
 801879e:	4a40      	ldr	r2, [pc, #256]	@ (80188a0 <mg_tls_server_send_hello+0x158>)
 80187a0:	f009 f872 	bl	8021888 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 80187a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80187a8:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 80187ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80187b0:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 80187b4:	f107 010c 	add.w	r1, r7, #12
 80187b8:	2301      	movs	r3, #1
 80187ba:	f009 f865 	bl	8021888 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 80187be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80187c2:	33f0      	adds	r3, #240	@ 0xf0
 80187c4:	2220      	movs	r2, #32
 80187c6:	4619      	mov	r1, r3
 80187c8:	4836      	ldr	r0, [pc, #216]	@ (80188a4 <mg_tls_server_send_hello+0x15c>)
 80187ca:	f7fe fe85 	bl	80174d8 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 80187ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80187d2:	3306      	adds	r3, #6
 80187d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80187d8:	3290      	adds	r2, #144	@ 0x90
 80187da:	6815      	ldr	r5, [r2, #0]
 80187dc:	6854      	ldr	r4, [r2, #4]
 80187de:	6890      	ldr	r0, [r2, #8]
 80187e0:	68d1      	ldr	r1, [r2, #12]
 80187e2:	601d      	str	r5, [r3, #0]
 80187e4:	605c      	str	r4, [r3, #4]
 80187e6:	6098      	str	r0, [r3, #8]
 80187e8:	60d9      	str	r1, [r3, #12]
 80187ea:	6915      	ldr	r5, [r2, #16]
 80187ec:	6954      	ldr	r4, [r2, #20]
 80187ee:	6990      	ldr	r0, [r2, #24]
 80187f0:	69d1      	ldr	r1, [r2, #28]
 80187f2:	611d      	str	r5, [r3, #16]
 80187f4:	615c      	str	r4, [r3, #20]
 80187f6:	6198      	str	r0, [r3, #24]
 80187f8:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 80187fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80187fe:	3327      	adds	r3, #39	@ 0x27
 8018800:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8018804:	32b0      	adds	r2, #176	@ 0xb0
 8018806:	6815      	ldr	r5, [r2, #0]
 8018808:	6854      	ldr	r4, [r2, #4]
 801880a:	6890      	ldr	r0, [r2, #8]
 801880c:	68d1      	ldr	r1, [r2, #12]
 801880e:	601d      	str	r5, [r3, #0]
 8018810:	605c      	str	r4, [r3, #4]
 8018812:	6098      	str	r0, [r3, #8]
 8018814:	60d9      	str	r1, [r3, #12]
 8018816:	6915      	ldr	r5, [r2, #16]
 8018818:	6954      	ldr	r4, [r2, #20]
 801881a:	6990      	ldr	r0, [r2, #24]
 801881c:	69d1      	ldr	r1, [r2, #28]
 801881e:	611d      	str	r5, [r3, #16]
 8018820:	615c      	str	r4, [r3, #20]
 8018822:	6198      	str	r0, [r3, #24]
 8018824:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8018826:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801882a:	3354      	adds	r3, #84	@ 0x54
 801882c:	461d      	mov	r5, r3
 801882e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8018832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018834:	6028      	str	r0, [r5, #0]
 8018836:	6069      	str	r1, [r5, #4]
 8018838:	60aa      	str	r2, [r5, #8]
 801883a:	60eb      	str	r3, [r5, #12]
 801883c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801883e:	6128      	str	r0, [r5, #16]
 8018840:	6169      	str	r1, [r5, #20]
 8018842:	61aa      	str	r2, [r5, #24]
 8018844:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8018846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801884a:	6899      	ldr	r1, [r3, #8]
 801884c:	2305      	movs	r3, #5
 801884e:	4a16      	ldr	r2, [pc, #88]	@ (80188a8 <mg_tls_server_send_hello+0x160>)
 8018850:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8018854:	f7f5 f820 	bl	800d898 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8018858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801885c:	6899      	ldr	r1, [r3, #8]
 801885e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8018862:	237a      	movs	r3, #122	@ 0x7a
 8018864:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8018868:	f7f5 f816 	bl	800d898 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 801886c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8018870:	3320      	adds	r3, #32
 8018872:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8018876:	227a      	movs	r2, #122	@ 0x7a
 8018878:	4618      	mov	r0, r3
 801887a:	f7fc fdef 	bl	801545c <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 801887e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018882:	6899      	ldr	r1, [r3, #8]
 8018884:	2306      	movs	r3, #6
 8018886:	4a09      	ldr	r2, [pc, #36]	@ (80188ac <mg_tls_server_send_hello+0x164>)
 8018888:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 801888c:	f7f5 f804 	bl	800d898 <mg_iobuf_add>
}
 8018890:	bf00      	nop
 8018892:	37d0      	adds	r7, #208	@ 0xd0
 8018894:	46bd      	mov	sp, r7
 8018896:	bdb0      	pop	{r4, r5, r7, pc}
 8018898:	0802b9ec 	.word	0x0802b9ec
 801889c:	0802b9c8 	.word	0x0802b9c8
 80188a0:	0802d994 	.word	0x0802d994
 80188a4:	0802b9cc 	.word	0x0802b9cc
 80188a8:	0802b9dc 	.word	0x0802b9dc
 80188ac:	0802b9e4 	.word	0x0802b9e4

080188b0 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b086      	sub	sp, #24
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80188be:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 80188c0:	4b0b      	ldr	r3, [pc, #44]	@ (80188f0 <mg_tls_server_send_ext+0x40>)
 80188c2:	60fb      	str	r3, [r7, #12]
 80188c4:	2300      	movs	r3, #0
 80188c6:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 80188c8:	697b      	ldr	r3, [r7, #20]
 80188ca:	3320      	adds	r3, #32
 80188cc:	f107 010c 	add.w	r1, r7, #12
 80188d0:	2206      	movs	r2, #6
 80188d2:	4618      	mov	r0, r3
 80188d4:	f7fc fdc2 	bl	801545c <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 80188d8:	f107 010c 	add.w	r1, r7, #12
 80188dc:	2316      	movs	r3, #22
 80188de:	2206      	movs	r2, #6
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f7ff faeb 	bl	8017ebc <mg_tls_encrypt>
}
 80188e6:	bf00      	nop
 80188e8:	3718      	adds	r7, #24
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop
 80188f0:	02000008 	.word	0x02000008

080188f4 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b088      	sub	sp, #32
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018902:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801890a:	f003 0302 	and.w	r3, r3, #2
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b00      	cmp	r3, #0
 8018912:	d106      	bne.n	8018922 <mg_tls_server_send_cert+0x2e>
 8018914:	69fb      	ldr	r3, [r7, #28]
 8018916:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801891a:	2b00      	cmp	r3, #0
 801891c:	d001      	beq.n	8018922 <mg_tls_server_send_cert+0x2e>
 801891e:	2301      	movs	r3, #1
 8018920:	e000      	b.n	8018924 <mg_tls_server_send_cert+0x30>
 8018922:	2300      	movs	r3, #0
 8018924:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 8018926:	69fb      	ldr	r3, [r7, #28]
 8018928:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801892c:	69bb      	ldr	r3, [r7, #24]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d004      	beq.n	801893c <mg_tls_server_send_cert+0x48>
 8018932:	69fb      	ldr	r3, [r7, #28]
 8018934:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018938:	3305      	adds	r3, #5
 801893a:	e000      	b.n	801893e <mg_tls_server_send_cert+0x4a>
 801893c:	2300      	movs	r3, #0
 801893e:	4413      	add	r3, r2
 8018940:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	330d      	adds	r3, #13
 8018946:	4619      	mov	r1, r3
 8018948:	2001      	movs	r0, #1
 801894a:	f00d f873 	bl	8025a34 <calloc>
 801894e:	4603      	mov	r3, r0
 8018950:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 8018952:	693b      	ldr	r3, [r7, #16]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d104      	bne.n	8018962 <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 8018958:	495e      	ldr	r1, [pc, #376]	@ (8018ad4 <mg_tls_server_send_cert+0x1e0>)
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f7f0 f98e 	bl	8008c7c <mg_error>
    return;
 8018960:	e0b4      	b.n	8018acc <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	220b      	movs	r2, #11
 8018966:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 8018968:	697b      	ldr	r3, [r7, #20]
 801896a:	3309      	adds	r3, #9
 801896c:	0c1a      	lsrs	r2, r3, #16
 801896e:	693b      	ldr	r3, [r7, #16]
 8018970:	3301      	adds	r3, #1
 8018972:	b2d2      	uxtb	r2, r2
 8018974:	701a      	strb	r2, [r3, #0]
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	3309      	adds	r3, #9
 801897a:	0a1a      	lsrs	r2, r3, #8
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	3302      	adds	r3, #2
 8018980:	b2d2      	uxtb	r2, r2
 8018982:	701a      	strb	r2, [r3, #0]
 8018984:	697b      	ldr	r3, [r7, #20]
 8018986:	b2da      	uxtb	r2, r3
 8018988:	693b      	ldr	r3, [r7, #16]
 801898a:	3303      	adds	r3, #3
 801898c:	3209      	adds	r2, #9
 801898e:	b2d2      	uxtb	r2, r2
 8018990:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	3304      	adds	r3, #4
 8018996:	2200      	movs	r2, #0
 8018998:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 801899a:	697b      	ldr	r3, [r7, #20]
 801899c:	3305      	adds	r3, #5
 801899e:	0c1a      	lsrs	r2, r3, #16
 80189a0:	693b      	ldr	r3, [r7, #16]
 80189a2:	3305      	adds	r3, #5
 80189a4:	b2d2      	uxtb	r2, r2
 80189a6:	701a      	strb	r2, [r3, #0]
 80189a8:	697b      	ldr	r3, [r7, #20]
 80189aa:	3305      	adds	r3, #5
 80189ac:	0a1a      	lsrs	r2, r3, #8
 80189ae:	693b      	ldr	r3, [r7, #16]
 80189b0:	3306      	adds	r3, #6
 80189b2:	b2d2      	uxtb	r2, r2
 80189b4:	701a      	strb	r2, [r3, #0]
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	b2da      	uxtb	r2, r3
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	3307      	adds	r3, #7
 80189be:	3205      	adds	r2, #5
 80189c0:	b2d2      	uxtb	r2, r2
 80189c2:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 80189c4:	69fb      	ldr	r3, [r7, #28]
 80189c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80189ca:	0c1a      	lsrs	r2, r3, #16
 80189cc:	693b      	ldr	r3, [r7, #16]
 80189ce:	3308      	adds	r3, #8
 80189d0:	b2d2      	uxtb	r2, r2
 80189d2:	701a      	strb	r2, [r3, #0]
 80189d4:	69fb      	ldr	r3, [r7, #28]
 80189d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80189da:	0a1a      	lsrs	r2, r3, #8
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	3309      	adds	r3, #9
 80189e0:	b2d2      	uxtb	r2, r2
 80189e2:	701a      	strb	r2, [r3, #0]
 80189e4:	69fb      	ldr	r3, [r7, #28]
 80189e6:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	330a      	adds	r3, #10
 80189ee:	b2d2      	uxtb	r2, r2
 80189f0:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	f103 000b 	add.w	r0, r3, #11
 80189f8:	69fb      	ldr	r3, [r7, #28]
 80189fa:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80189fe:	69fb      	ldr	r3, [r7, #28]
 8018a00:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018a04:	461a      	mov	r2, r3
 8018a06:	f00e fea9 	bl	802775c <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 8018a0a:	69fb      	ldr	r3, [r7, #28]
 8018a0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018a10:	330b      	adds	r3, #11
 8018a12:	693a      	ldr	r2, [r7, #16]
 8018a14:	4413      	add	r3, r2
 8018a16:	2200      	movs	r2, #0
 8018a18:	701a      	strb	r2, [r3, #0]
 8018a1a:	69fb      	ldr	r3, [r7, #28]
 8018a1c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018a20:	330c      	adds	r3, #12
 8018a22:	693a      	ldr	r2, [r7, #16]
 8018a24:	4413      	add	r3, r2
 8018a26:	2200      	movs	r2, #0
 8018a28:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 8018a2a:	69bb      	ldr	r3, [r7, #24]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d039      	beq.n	8018aa4 <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018a36:	330d      	adds	r3, #13
 8018a38:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 8018a3a:	69fb      	ldr	r3, [r7, #28]
 8018a3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018a40:	0c19      	lsrs	r1, r3, #16
 8018a42:	693a      	ldr	r2, [r7, #16]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	4413      	add	r3, r2
 8018a48:	b2ca      	uxtb	r2, r1
 8018a4a:	701a      	strb	r2, [r3, #0]
 8018a4c:	69fb      	ldr	r3, [r7, #28]
 8018a4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018a52:	0a19      	lsrs	r1, r3, #8
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	3301      	adds	r3, #1
 8018a58:	693a      	ldr	r2, [r7, #16]
 8018a5a:	4413      	add	r3, r2
 8018a5c:	b2ca      	uxtb	r2, r1
 8018a5e:	701a      	strb	r2, [r3, #0]
 8018a60:	69fb      	ldr	r3, [r7, #28]
 8018a62:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	3302      	adds	r3, #2
 8018a6a:	693a      	ldr	r2, [r7, #16]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	b2ca      	uxtb	r2, r1
 8018a70:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	3303      	adds	r3, #3
 8018a76:	693a      	ldr	r2, [r7, #16]
 8018a78:	18d0      	adds	r0, r2, r3
 8018a7a:	69fb      	ldr	r3, [r7, #28]
 8018a7c:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 8018a80:	69fb      	ldr	r3, [r7, #28]
 8018a82:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8018a86:	461a      	mov	r2, r3
 8018a88:	f00e fe68 	bl	802775c <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	330b      	adds	r3, #11
 8018a90:	693a      	ldr	r2, [r7, #16]
 8018a92:	4413      	add	r3, r2
 8018a94:	2200      	movs	r2, #0
 8018a96:	701a      	strb	r2, [r3, #0]
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	330c      	adds	r3, #12
 8018a9c:	693a      	ldr	r2, [r7, #16]
 8018a9e:	4413      	add	r3, r2
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8018aa4:	69fb      	ldr	r3, [r7, #28]
 8018aa6:	f103 0020 	add.w	r0, r3, #32
 8018aaa:	697b      	ldr	r3, [r7, #20]
 8018aac:	330d      	adds	r3, #13
 8018aae:	461a      	mov	r2, r3
 8018ab0:	6939      	ldr	r1, [r7, #16]
 8018ab2:	f7fc fcd3 	bl	801545c <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	f103 020d 	add.w	r2, r3, #13
 8018abc:	2316      	movs	r3, #22
 8018abe:	6939      	ldr	r1, [r7, #16]
 8018ac0:	6878      	ldr	r0, [r7, #4]
 8018ac2:	f7ff f9fb 	bl	8017ebc <mg_tls_encrypt>
  free(cert);
 8018ac6:	6938      	ldr	r0, [r7, #16]
 8018ac8:	f00c ffd8 	bl	8025a7c <free>
}
 8018acc:	3720      	adds	r7, #32
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	0802ba68 	.word	0x0802ba68

08018ad8 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b084      	sub	sp, #16
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	3318      	adds	r3, #24
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7fc fa73 	bl	8014fd4 <mg_sha256_init>
}
 8018aee:	bf00      	nop
 8018af0:	3710      	adds	r7, #16
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}

08018af6 <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8018af6:	b580      	push	{r7, lr}
 8018af8:	b086      	sub	sp, #24
 8018afa:	af00      	add	r7, sp, #0
 8018afc:	60f8      	str	r0, [r7, #12]
 8018afe:	60b9      	str	r1, [r7, #8]
 8018b00:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	3318      	adds	r3, #24
 8018b0a:	687a      	ldr	r2, [r7, #4]
 8018b0c:	68b9      	ldr	r1, [r7, #8]
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7fc fca4 	bl	801545c <mg_sha256_update>
}
 8018b14:	bf00      	nop
 8018b16:	3718      	adds	r7, #24
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}

08018b1c <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
 8018b24:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	3318      	adds	r3, #24
 8018b2e:	4619      	mov	r1, r3
 8018b30:	6838      	ldr	r0, [r7, #0]
 8018b32:	f7fc fccc 	bl	80154ce <mg_sha256_final>
}
 8018b36:	bf00      	nop
 8018b38:	3710      	adds	r7, #16
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}
	...

08018b40 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 8018b40:	b590      	push	{r4, r7, lr}
 8018b42:	b0f9      	sub	sp, #484	@ 0x1e4
 8018b44:	af02      	add	r7, sp, #8
 8018b46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b4a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018b4e:	6018      	str	r0, [r3, #0]
 8018b50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b54:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8018b58:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018b5a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018b5e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018b68:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8018b6c:	4a8a      	ldr	r2, [pc, #552]	@ (8018d98 <mg_tls_send_cert_verify+0x258>)
 8018b6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8018b72:	6810      	ldr	r0, [r2, #0]
 8018b74:	6851      	ldr	r1, [r2, #4]
 8018b76:	c303      	stmia	r3!, {r0, r1}
 8018b78:	7a12      	ldrb	r2, [r2, #8]
 8018b7a:	701a      	strb	r2, [r3, #0]
 8018b7c:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8018b80:	2249      	movs	r2, #73	@ 0x49
 8018b82:	2100      	movs	r1, #0
 8018b84:	4618      	mov	r0, r3
 8018b86:	f00e fe03 	bl	8027790 <memset>
  size_t sigsz, verifysz = 0;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8018b90:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018b94:	2220      	movs	r2, #32
 8018b96:	2100      	movs	r1, #0
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f00e fdf9 	bl	8027790 <memset>
 8018b9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	2380      	movs	r3, #128	@ 0x80
 8018baa:	461a      	mov	r2, r3
 8018bac:	2100      	movs	r1, #0
 8018bae:	f00e fdef 	bl	8027790 <memset>
  struct SHA256_HashContext ctx = {
 8018bb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018bb6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018bba:	4618      	mov	r0, r3
 8018bbc:	2388      	movs	r3, #136	@ 0x88
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	2100      	movs	r1, #0
 8018bc2:	f00e fde5 	bl	8027790 <memset>
 8018bc6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018bca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018bce:	4a73      	ldr	r2, [pc, #460]	@ (8018d9c <mg_tls_send_cert_verify+0x25c>)
 8018bd0:	601a      	str	r2, [r3, #0]
 8018bd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018bd6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018bda:	4a71      	ldr	r2, [pc, #452]	@ (8018da0 <mg_tls_send_cert_verify+0x260>)
 8018bdc:	605a      	str	r2, [r3, #4]
 8018bde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018be2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018be6:	4a6f      	ldr	r2, [pc, #444]	@ (8018da4 <mg_tls_send_cert_verify+0x264>)
 8018be8:	609a      	str	r2, [r3, #8]
 8018bea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018bee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018bf2:	2240      	movs	r2, #64	@ 0x40
 8018bf4:	60da      	str	r2, [r3, #12]
 8018bf6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018bfa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018bfe:	2220      	movs	r2, #32
 8018c00:	611a      	str	r2, [r3, #16]
 8018c02:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018c06:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8018c0a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8018c0e:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8018c10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018c14:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018c18:	4618      	mov	r0, r3
 8018c1a:	2340      	movs	r3, #64	@ 0x40
 8018c1c:	461a      	mov	r2, r3
 8018c1e:	2100      	movs	r1, #0
 8018c20:	f00e fdb6 	bl	8027790 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8018c24:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018c28:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8018c2c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8018c30:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018c34:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018c38:	6812      	ldr	r2, [r2, #0]
 8018c3a:	6818      	ldr	r0, [r3, #0]
 8018c3c:	f7ff fb56 	bl	80182ec <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8018c40:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8018c44:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 8018c48:	f006 fdca 	bl	801f7e0 <mg_uecc_secp256r1>
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8018c52:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8018c56:	9301      	str	r3, [sp, #4]
 8018c58:	f107 0308 	add.w	r3, r7, #8
 8018c5c:	9300      	str	r3, [sp, #0]
 8018c5e:	4613      	mov	r3, r2
 8018c60:	2220      	movs	r2, #32
 8018c62:	4620      	mov	r0, r4
 8018c64:	f007 fe2c 	bl	80208c0 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8018c68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018c6c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	b25b      	sxtb	r3, r3
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	09db      	lsrs	r3, r3, #7
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8018c7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018c82:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018c8a:	b25b      	sxtb	r3, r3
 8018c8c:	b2db      	uxtb	r3, r3
 8018c8e:	09db      	lsrs	r3, r3, #7
 8018c90:	b2db      	uxtb	r3, r3
 8018c92:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8018c96:	2330      	movs	r3, #48	@ 0x30
 8018c98:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8018c9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018ca0:	b2da      	uxtb	r2, r3
 8018ca2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	4413      	add	r3, r2
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	3344      	adds	r3, #68	@ 0x44
 8018cae:	b2db      	uxtb	r3, r3
 8018cb0:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8018cb4:	2302      	movs	r3, #2
 8018cb6:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8018cba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	3320      	adds	r3, #32
 8018cc2:	b2db      	uxtb	r3, r3
 8018cc4:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8018cc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018ccc:	330c      	adds	r3, #12
 8018cce:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8018cd2:	4413      	add	r3, r2
 8018cd4:	f107 0108 	add.w	r1, r7, #8
 8018cd8:	2220      	movs	r2, #32
 8018cda:	4618      	mov	r0, r3
 8018cdc:	f00e fd3e 	bl	802775c <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8018ce0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018ce4:	332c      	adds	r3, #44	@ 0x2c
 8018ce6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8018cea:	443b      	add	r3, r7
 8018cec:	2202      	movs	r2, #2
 8018cee:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8018cf2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018cf6:	b2da      	uxtb	r2, r3
 8018cf8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018cfc:	332d      	adds	r3, #45	@ 0x2d
 8018cfe:	3220      	adds	r2, #32
 8018d00:	b2d2      	uxtb	r2, r2
 8018d02:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8018d06:	443b      	add	r3, r7
 8018d08:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8018d0c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8018d10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018d14:	4413      	add	r3, r2
 8018d16:	332e      	adds	r3, #46	@ 0x2e
 8018d18:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8018d1c:	18d0      	adds	r0, r2, r3
 8018d1e:	f107 0308 	add.w	r3, r7, #8
 8018d22:	3320      	adds	r3, #32
 8018d24:	2220      	movs	r2, #32
 8018d26:	4619      	mov	r1, r3
 8018d28:	f00e fd18 	bl	802775c <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8018d2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018d30:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8018d34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018d38:	4413      	add	r3, r2
 8018d3a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8018d3e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018d42:	3308      	adds	r3, #8
 8018d44:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8018d48:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	3304      	adds	r3, #4
 8018d50:	b2db      	uxtb	r3, r3
 8018d52:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8018d56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018d5a:	b2db      	uxtb	r3, r3
 8018d5c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8018d60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8018d64:	3320      	adds	r3, #32
 8018d66:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8018d6a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7fc fb74 	bl	801545c <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8018d74:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8018d78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018d7c:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8018d80:	2316      	movs	r3, #22
 8018d82:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8018d86:	6800      	ldr	r0, [r0, #0]
 8018d88:	f7ff f898 	bl	8017ebc <mg_tls_encrypt>
}
 8018d8c:	bf00      	nop
 8018d8e:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd90      	pop	{r4, r7, pc}
 8018d96:	bf00      	nop
 8018d98:	0802ba78 	.word	0x0802ba78
 8018d9c:	08018ad9 	.word	0x08018ad9
 8018da0:	08018af7 	.word	0x08018af7
 8018da4:	08018b1d 	.word	0x08018b1d

08018da8 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b0b4      	sub	sp, #208	@ 0xd0
 8018dac:	af02      	add	r7, sp, #8
 8018dae:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018db6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8018dba:	4b1e      	ldr	r3, [pc, #120]	@ (8018e34 <mg_tls_server_send_finish+0x8c>)
 8018dbc:	60fb      	str	r3, [r7, #12]
 8018dbe:	f107 0310 	add.w	r3, r7, #16
 8018dc2:	2220      	movs	r2, #32
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f00e fce2 	bl	8027790 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8018dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018dd0:	f103 0120 	add.w	r1, r3, #32
 8018dd4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8018dd8:	2270      	movs	r2, #112	@ 0x70
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f00e fcbe 	bl	802775c <memmove>
  mg_sha256_final(hash, &sha256);
 8018de0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8018de4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018de8:	4611      	mov	r1, r2
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7fc fb6f 	bl	80154ce <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8018df0:	f107 000c 	add.w	r0, r7, #12
 8018df4:	3004      	adds	r0, #4
 8018df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018dfa:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 8018dfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018e02:	2220      	movs	r2, #32
 8018e04:	9200      	str	r2, [sp, #0]
 8018e06:	2220      	movs	r2, #32
 8018e08:	f7fc fcb5 	bl	8015776 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8018e0c:	f107 010c 	add.w	r1, r7, #12
 8018e10:	2316      	movs	r3, #22
 8018e12:	2224      	movs	r2, #36	@ 0x24
 8018e14:	6878      	ldr	r0, [r7, #4]
 8018e16:	f7ff f851 	bl	8017ebc <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8018e1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018e1e:	3320      	adds	r3, #32
 8018e20:	f107 010c 	add.w	r1, r7, #12
 8018e24:	2224      	movs	r2, #36	@ 0x24
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7fc fb18 	bl	801545c <mg_sha256_update>
}
 8018e2c:	bf00      	nop
 8018e2e:	37c8      	adds	r7, #200	@ 0xc8
 8018e30:	46bd      	mov	sp, r7
 8018e32:	bd80      	pop	{r7, pc}
 8018e34:	20000014 	.word	0x20000014

08018e38 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b0a0      	sub	sp, #128	@ 0x80
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8018e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018e4a:	f107 0008 	add.w	r0, r7, #8
 8018e4e:	3320      	adds	r3, #32
 8018e50:	2270      	movs	r2, #112	@ 0x70
 8018e52:	4619      	mov	r1, r3
 8018e54:	f00e fdd5 	bl	8027a02 <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f7ff f92b 	bl	80180b4 <mg_tls_recv_record>
 8018e5e:	4603      	mov	r3, r0
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	da02      	bge.n	8018e6a <mg_tls_server_recv_finish+0x32>
    return -1;
 8018e64:	f04f 33ff 	mov.w	r3, #4294967295
 8018e68:	e01f      	b.n	8018eaa <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8018e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018e70:	695b      	ldr	r3, [r3, #20]
 8018e72:	4413      	add	r3, r2
 8018e74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8018e76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	2b14      	cmp	r3, #20
 8018e7c:	d009      	beq.n	8018e92 <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8018e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018e80:	781b      	ldrb	r3, [r3, #0]
 8018e82:	461a      	mov	r2, r3
 8018e84:	490b      	ldr	r1, [pc, #44]	@ (8018eb4 <mg_tls_server_recv_finish+0x7c>)
 8018e86:	6878      	ldr	r0, [r7, #4]
 8018e88:	f7ef fef8 	bl	8008c7c <mg_error>
    return -1;
 8018e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e90:	e00b      	b.n	8018eaa <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f7fe fcc2 	bl	801781c <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8018e98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018e9a:	3320      	adds	r3, #32
 8018e9c:	f107 0108 	add.w	r1, r7, #8
 8018ea0:	2270      	movs	r2, #112	@ 0x70
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f00e fdad 	bl	8027a02 <memcpy>
  return 0;
 8018ea8:	2300      	movs	r3, #0
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3780      	adds	r7, #128	@ 0x80
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	0802ba84 	.word	0x0802ba84

08018eb8 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8018eb8:	b5b0      	push	{r4, r5, r7, lr}
 8018eba:	b0c6      	sub	sp, #280	@ 0x118
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018ec2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8018ec6:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018ec8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018ecc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018ed6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 8018eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018ede:	3304      	adds	r3, #4
 8018ee0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 8018ee4:	4a27      	ldr	r2, [pc, #156]	@ (8018f84 <mg_tls_client_send_hello+0xcc>)
 8018ee6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8018eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8018eec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8018ef0:	4b25      	ldr	r3, [pc, #148]	@ (8018f88 <mg_tls_client_send_hello+0xd0>)
 8018ef2:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8018ef6:	461d      	mov	r5, r3
 8018ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f00:	682b      	ldr	r3, [r5, #0]
 8018f02:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8018f04:	4a21      	ldr	r2, [pc, #132]	@ (8018f8c <mg_tls_client_send_hello+0xd4>)
 8018f06:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8018f0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f0c:	c303      	stmia	r3!, {r0, r1}
 8018f0e:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8018f10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018f14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018f18:	4a1d      	ldr	r2, [pc, #116]	@ (8018f90 <mg_tls_client_send_hello+0xd8>)
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	4611      	mov	r1, r2
 8018f1e:	2391      	movs	r3, #145	@ 0x91
 8018f20:	461a      	mov	r2, r3
 8018f22:	f00e fd6e 	bl	8027a02 <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8018f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f2a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8018f2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 8018f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f36:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f7e7 fa48 	bl	80003d0 <strlen>
 8018f40:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8018f44:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d003      	beq.n	8018f54 <mg_tls_client_send_hello+0x9c>
 8018f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018f50:	3309      	adds	r3, #9
 8018f52:	e000      	b.n	8018f56 <mg_tls_client_send_hello+0x9e>
 8018f54:	2300      	movs	r3, #0
 8018f56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 8018f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d002      	beq.n	8018f6c <mg_tls_client_send_hello+0xb4>
 8018f66:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8018f6a:	e001      	b.n	8018f70 <mg_tls_client_send_hello+0xb8>
 8018f6c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8018f70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018f78:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d009      	beq.n	8018f94 <mg_tls_client_send_hello+0xdc>
 8018f80:	2322      	movs	r3, #34	@ 0x22
 8018f82:	e008      	b.n	8018f96 <mg_tls_client_send_hello+0xde>
 8018f84:	0802baa8 	.word	0x0802baa8
 8018f88:	0802bab4 	.word	0x0802bab4
 8018f8c:	0802bad8 	.word	0x0802bad8
 8018f90:	0802bae4 	.word	0x0802bae4
 8018f94:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018f96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8018f9a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018fa2:	4413      	add	r3, r2
 8018fa4:	338c      	adds	r3, #140	@ 0x8c
 8018fa6:	0a1b      	lsrs	r3, r3, #8
 8018fa8:	b2da      	uxtb	r2, r3
 8018faa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018fae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018fb2:	70da      	strb	r2, [r3, #3]
 8018fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018fb8:	b2da      	uxtb	r2, r3
 8018fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	4413      	add	r3, r2
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	3b74      	subs	r3, #116	@ 0x74
 8018fc6:	b2da      	uxtb	r2, r3
 8018fc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018fcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018fd0:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8018fd2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8018fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018fda:	4413      	add	r3, r2
 8018fdc:	3388      	adds	r3, #136	@ 0x88
 8018fde:	0a1b      	lsrs	r3, r3, #8
 8018fe0:	b2da      	uxtb	r2, r3
 8018fe2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018fe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018fea:	71da      	strb	r2, [r3, #7]
 8018fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018ff0:	b2da      	uxtb	r2, r3
 8018ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	4413      	add	r3, r2
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	3b78      	subs	r3, #120	@ 0x78
 8018ffe:	b2da      	uxtb	r2, r3
 8019000:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019004:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019008:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 801900a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801900e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019012:	4413      	add	r3, r2
 8019014:	333d      	adds	r3, #61	@ 0x3d
 8019016:	0a1b      	lsrs	r3, r3, #8
 8019018:	b2da      	uxtb	r2, r3
 801901a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801901e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019022:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8019026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801902a:	b2da      	uxtb	r2, r3
 801902c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019030:	b2db      	uxtb	r3, r3
 8019032:	4413      	add	r3, r2
 8019034:	b2db      	uxtb	r3, r3
 8019036:	333d      	adds	r3, #61	@ 0x3d
 8019038:	b2da      	uxtb	r2, r3
 801903a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801903e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019042:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8019046:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801904a:	2b00      	cmp	r3, #0
 801904c:	d026      	beq.n	801909c <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 801904e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019052:	3305      	adds	r3, #5
 8019054:	0a1b      	lsrs	r3, r3, #8
 8019056:	b2db      	uxtb	r3, r3
 8019058:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 801905c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019060:	b2db      	uxtb	r3, r3
 8019062:	3305      	adds	r3, #5
 8019064:	b2db      	uxtb	r3, r3
 8019066:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 801906a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801906e:	3303      	adds	r3, #3
 8019070:	0a1b      	lsrs	r3, r3, #8
 8019072:	b2db      	uxtb	r3, r3
 8019074:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8019078:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801907c:	b2db      	uxtb	r3, r3
 801907e:	3303      	adds	r3, #3
 8019080:	b2db      	uxtb	r3, r3
 8019082:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8019086:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801908a:	0a1b      	lsrs	r3, r3, #8
 801908c:	b2db      	uxtb	r3, r3
 801908e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8019092:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019096:	b2db      	uxtb	r3, r3
 8019098:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 801909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80190a0:	33d0      	adds	r3, #208	@ 0xd0
 80190a2:	2120      	movs	r1, #32
 80190a4:	4618      	mov	r0, r3
 80190a6:	f7e7 fd25 	bl	8000af4 <mg_random>
 80190aa:	4603      	mov	r3, r0
 80190ac:	f083 0301 	eor.w	r3, r3, #1
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d007      	beq.n	80190c6 <mg_tls_client_send_hello+0x20e>
 80190b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80190ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80190be:	496c      	ldr	r1, [pc, #432]	@ (8019270 <mg_tls_client_send_hello+0x3b8>)
 80190c0:	6818      	ldr	r0, [r3, #0]
 80190c2:	f7ef fddb 	bl	8008c7c <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 80190c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80190ca:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80190ce:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80190d2:	2301      	movs	r3, #1
 80190d4:	4a67      	ldr	r2, [pc, #412]	@ (8019274 <mg_tls_client_send_hello+0x3bc>)
 80190d6:	f008 fbd7 	bl	8021888 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 80190da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80190de:	33b0      	adds	r3, #176	@ 0xb0
 80190e0:	2120      	movs	r1, #32
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7e7 fd06 	bl	8000af4 <mg_random>
 80190e8:	4603      	mov	r3, r0
 80190ea:	f083 0301 	eor.w	r3, r3, #1
 80190ee:	b2db      	uxtb	r3, r3
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d007      	beq.n	8019104 <mg_tls_client_send_hello+0x24c>
 80190f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80190f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80190fc:	495c      	ldr	r1, [pc, #368]	@ (8019270 <mg_tls_client_send_hello+0x3b8>)
 80190fe:	6818      	ldr	r0, [r3, #0]
 8019100:	f7ef fdbc 	bl	8008c7c <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 8019104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019108:	3390      	adds	r3, #144	@ 0x90
 801910a:	2120      	movs	r1, #32
 801910c:	4618      	mov	r0, r3
 801910e:	f7e7 fcf1 	bl	8000af4 <mg_random>
 8019112:	4603      	mov	r3, r0
 8019114:	f083 0301 	eor.w	r3, r3, #1
 8019118:	b2db      	uxtb	r3, r3
 801911a:	2b00      	cmp	r3, #0
 801911c:	d007      	beq.n	801912e <mg_tls_client_send_hello+0x276>
 801911e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019122:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019126:	4952      	ldr	r1, [pc, #328]	@ (8019270 <mg_tls_client_send_hello+0x3b8>)
 8019128:	6818      	ldr	r0, [r3, #0]
 801912a:	f7ef fda7 	bl	8008c7c <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 801912e:	f107 030c 	add.w	r3, r7, #12
 8019132:	330b      	adds	r3, #11
 8019134:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019138:	3290      	adds	r2, #144	@ 0x90
 801913a:	6815      	ldr	r5, [r2, #0]
 801913c:	6854      	ldr	r4, [r2, #4]
 801913e:	6890      	ldr	r0, [r2, #8]
 8019140:	68d1      	ldr	r1, [r2, #12]
 8019142:	601d      	str	r5, [r3, #0]
 8019144:	605c      	str	r4, [r3, #4]
 8019146:	6098      	str	r0, [r3, #8]
 8019148:	60d9      	str	r1, [r3, #12]
 801914a:	6915      	ldr	r5, [r2, #16]
 801914c:	6954      	ldr	r4, [r2, #20]
 801914e:	6990      	ldr	r0, [r2, #24]
 8019150:	69d1      	ldr	r1, [r2, #28]
 8019152:	611d      	str	r5, [r3, #16]
 8019154:	615c      	str	r4, [r3, #20]
 8019156:	6198      	str	r0, [r3, #24]
 8019158:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 801915a:	f107 030c 	add.w	r3, r7, #12
 801915e:	332c      	adds	r3, #44	@ 0x2c
 8019160:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019164:	32b0      	adds	r2, #176	@ 0xb0
 8019166:	6815      	ldr	r5, [r2, #0]
 8019168:	6854      	ldr	r4, [r2, #4]
 801916a:	6890      	ldr	r0, [r2, #8]
 801916c:	68d1      	ldr	r1, [r2, #12]
 801916e:	601d      	str	r5, [r3, #0]
 8019170:	605c      	str	r4, [r3, #4]
 8019172:	6098      	str	r0, [r3, #8]
 8019174:	60d9      	str	r1, [r3, #12]
 8019176:	6915      	ldr	r5, [r2, #16]
 8019178:	6954      	ldr	r4, [r2, #20]
 801917a:	6990      	ldr	r0, [r2, #24]
 801917c:	69d1      	ldr	r1, [r2, #28]
 801917e:	611d      	str	r5, [r3, #16]
 8019180:	615c      	str	r4, [r3, #20]
 8019182:	6198      	str	r0, [r3, #24]
 8019184:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 8019186:	f107 030c 	add.w	r3, r7, #12
 801918a:	335e      	adds	r3, #94	@ 0x5e
 801918c:	461d      	mov	r5, r3
 801918e:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8019192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019194:	6028      	str	r0, [r5, #0]
 8019196:	6069      	str	r1, [r5, #4]
 8019198:	60aa      	str	r2, [r5, #8]
 801919a:	60eb      	str	r3, [r5, #12]
 801919c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801919e:	6128      	str	r0, [r5, #16]
 80191a0:	6169      	str	r1, [r5, #20]
 80191a2:	61aa      	str	r2, [r5, #24]
 80191a4:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 80191a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80191aa:	6899      	ldr	r1, [r3, #8]
 80191ac:	f107 020c 	add.w	r2, r7, #12
 80191b0:	2391      	movs	r3, #145	@ 0x91
 80191b2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80191b6:	f7f4 fb6f 	bl	800d898 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 80191ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80191be:	f103 0020 	add.w	r0, r3, #32
 80191c2:	f107 030c 	add.w	r3, r7, #12
 80191c6:	3305      	adds	r3, #5
 80191c8:	228c      	movs	r2, #140	@ 0x8c
 80191ca:	4619      	mov	r1, r3
 80191cc:	f7fc f946 	bl	801545c <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 80191d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80191d4:	6899      	ldr	r1, [r3, #8]
 80191d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80191da:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80191de:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80191e2:	f7f4 fb59 	bl	800d898 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 80191e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80191ea:	3320      	adds	r3, #32
 80191ec:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80191f0:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7fc f931 	bl	801545c <mg_sha256_update>
  if (hostnamesz > 0) {
 80191fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d027      	beq.n	8019252 <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 8019202:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019206:	6899      	ldr	r1, [r3, #8]
 8019208:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801920c:	2309      	movs	r3, #9
 801920e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019212:	f7f4 fb41 	bl	800d898 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 8019216:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801921a:	6899      	ldr	r1, [r3, #8]
 801921c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019220:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8019224:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019228:	f7f4 fb36 	bl	800d898 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 801922c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019230:	3320      	adds	r3, #32
 8019232:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8019236:	2209      	movs	r2, #9
 8019238:	4618      	mov	r0, r3
 801923a:	f7fc f90f 	bl	801545c <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 801923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019242:	3320      	adds	r3, #32
 8019244:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8019248:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 801924c:	4618      	mov	r0, r3
 801924e:	f7fc f905 	bl	801545c <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 8019252:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019256:	6899      	ldr	r1, [r3, #8]
 8019258:	2306      	movs	r3, #6
 801925a:	4a07      	ldr	r2, [pc, #28]	@ (8019278 <mg_tls_client_send_hello+0x3c0>)
 801925c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019260:	f7f4 fb1a 	bl	800d898 <mg_iobuf_add>
}
 8019264:	bf00      	nop
 8019266:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801926a:	46bd      	mov	sp, r7
 801926c:	bdb0      	pop	{r4, r5, r7, pc}
 801926e:	bf00      	nop
 8019270:	0802b9c8 	.word	0x0802b9c8
 8019274:	0802d994 	.word	0x0802d994
 8019278:	0802b9e4 	.word	0x0802b9e4

0801927c <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 801927c:	b580      	push	{r7, lr}
 801927e:	b08a      	sub	sp, #40	@ 0x28
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801928a:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	3368      	adds	r3, #104	@ 0x68
 8019290:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 8019292:	6878      	ldr	r0, [r7, #4]
 8019294:	f7fe fa77 	bl	8017786 <mg_tls_got_record>
 8019298:	4603      	mov	r3, r0
 801929a:	f083 0301 	eor.w	r3, r3, #1
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d002      	beq.n	80192aa <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 80192a4:	f06f 0301 	mvn.w	r3, #1
 80192a8:	e109      	b.n	80194be <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 80192aa:	69fb      	ldr	r3, [r7, #28]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	2b16      	cmp	r3, #22
 80192b2:	d105      	bne.n	80192c0 <mg_tls_client_recv_hello+0x44>
 80192b4:	69fb      	ldr	r3, [r7, #28]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	3305      	adds	r3, #5
 80192ba:	781b      	ldrb	r3, [r3, #0]
 80192bc:	2b02      	cmp	r3, #2
 80192be:	d032      	beq.n	8019326 <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 80192c0:	69fb      	ldr	r3, [r7, #28]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	2b15      	cmp	r3, #21
 80192c8:	d10f      	bne.n	80192ea <mg_tls_client_recv_hello+0x6e>
 80192ca:	69fb      	ldr	r3, [r7, #28]
 80192cc:	689b      	ldr	r3, [r3, #8]
 80192ce:	2b06      	cmp	r3, #6
 80192d0:	d90b      	bls.n	80192ea <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 80192d2:	69fb      	ldr	r3, [r7, #28]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	3306      	adds	r3, #6
 80192d8:	781b      	ldrb	r3, [r3, #0]
 80192da:	461a      	mov	r2, r3
 80192dc:	497a      	ldr	r1, [pc, #488]	@ (80194c8 <mg_tls_client_recv_hello+0x24c>)
 80192de:	6878      	ldr	r0, [r7, #4]
 80192e0:	f7ef fccc 	bl	8008c7c <mg_error>
      return -1;
 80192e4:	f04f 33ff 	mov.w	r3, #4294967295
 80192e8:	e0e9      	b.n	80194be <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 80192ea:	4b78      	ldr	r3, [pc, #480]	@ (80194cc <mg_tls_client_recv_hello+0x250>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	2b01      	cmp	r3, #1
 80192f0:	dd12      	ble.n	8019318 <mg_tls_client_recv_hello+0x9c>
 80192f2:	4b77      	ldr	r3, [pc, #476]	@ (80194d0 <mg_tls_client_recv_hello+0x254>)
 80192f4:	f642 52f1 	movw	r2, #11761	@ 0x2df1
 80192f8:	4976      	ldr	r1, [pc, #472]	@ (80194d4 <mg_tls_client_recv_hello+0x258>)
 80192fa:	2002      	movs	r0, #2
 80192fc:	f7f5 fb36 	bl	800e96c <mg_log_prefix>
 8019300:	69fb      	ldr	r3, [r7, #28]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	4619      	mov	r1, r3
 8019308:	69fb      	ldr	r3, [r7, #28]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	3305      	adds	r3, #5
 801930e:	781b      	ldrb	r3, [r3, #0]
 8019310:	461a      	mov	r2, r3
 8019312:	4871      	ldr	r0, [pc, #452]	@ (80194d8 <mg_tls_client_recv_hello+0x25c>)
 8019314:	f7f5 fb7a 	bl	800ea0c <mg_log>
    mg_error(c, "not a server hello packet");
 8019318:	4970      	ldr	r1, [pc, #448]	@ (80194dc <mg_tls_client_recv_hello+0x260>)
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f7ef fcae 	bl	8008c7c <mg_error>
    return -1;
 8019320:	f04f 33ff 	mov.w	r3, #4294967295
 8019324:	e0cb      	b.n	80194be <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8019326:	69fb      	ldr	r3, [r7, #28]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	3303      	adds	r3, #3
 801932c:	781b      	ldrb	r3, [r3, #0]
 801932e:	b21b      	sxth	r3, r3
 8019330:	021b      	lsls	r3, r3, #8
 8019332:	b21a      	sxth	r2, r3
 8019334:	69fb      	ldr	r3, [r7, #28]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	3304      	adds	r3, #4
 801933a:	781b      	ldrb	r3, [r3, #0]
 801933c:	b21b      	sxth	r3, r3
 801933e:	4313      	orrs	r3, r2
 8019340:	b21b      	sxth	r3, r3
 8019342:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8019344:	6a3b      	ldr	r3, [r7, #32]
 8019346:	f103 0020 	add.w	r0, r3, #32
 801934a:	69fb      	ldr	r3, [r7, #28]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	3305      	adds	r3, #5
 8019350:	8b7a      	ldrh	r2, [r7, #26]
 8019352:	4619      	mov	r1, r3
 8019354:	f7fc f882 	bl	801545c <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 8019358:	69fb      	ldr	r3, [r7, #28]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	334f      	adds	r3, #79	@ 0x4f
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	b21b      	sxth	r3, r3
 8019362:	021b      	lsls	r3, r3, #8
 8019364:	b21a      	sxth	r2, r3
 8019366:	69fb      	ldr	r3, [r7, #28]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	3350      	adds	r3, #80	@ 0x50
 801936c:	781b      	ldrb	r3, [r3, #0]
 801936e:	b21b      	sxth	r3, r3
 8019370:	4313      	orrs	r3, r2
 8019372:	b21b      	sxth	r3, r3
 8019374:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 8019376:	69fb      	ldr	r3, [r7, #28]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	3351      	adds	r3, #81	@ 0x51
 801937c:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 801937e:	8b3a      	ldrh	r2, [r7, #24]
 8019380:	69fb      	ldr	r3, [r7, #28]
 8019382:	689b      	ldr	r3, [r3, #8]
 8019384:	3b51      	subs	r3, #81	@ 0x51
 8019386:	429a      	cmp	r2, r3
 8019388:	f200 8090 	bhi.w	80194ac <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 801938c:	2300      	movs	r3, #0
 801938e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019390:	e086      	b.n	80194a0 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 8019392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019394:	697a      	ldr	r2, [r7, #20]
 8019396:	4413      	add	r3, r2
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	b21b      	sxth	r3, r3
 801939c:	021b      	lsls	r3, r3, #8
 801939e:	b21a      	sxth	r2, r3
 80193a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193a2:	3301      	adds	r3, #1
 80193a4:	6979      	ldr	r1, [r7, #20]
 80193a6:	440b      	add	r3, r1
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	b21b      	sxth	r3, r3
 80193ac:	4313      	orrs	r3, r2
 80193ae:	b21b      	sxth	r3, r3
 80193b0:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 80193b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193b4:	3302      	adds	r3, #2
 80193b6:	697a      	ldr	r2, [r7, #20]
 80193b8:	4413      	add	r3, r2
 80193ba:	781b      	ldrb	r3, [r3, #0]
 80193bc:	b21b      	sxth	r3, r3
 80193be:	021b      	lsls	r3, r3, #8
 80193c0:	b21a      	sxth	r2, r3
 80193c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193c4:	3303      	adds	r3, #3
 80193c6:	6979      	ldr	r1, [r7, #20]
 80193c8:	440b      	add	r3, r1
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	b21b      	sxth	r3, r3
 80193ce:	4313      	orrs	r3, r2
 80193d0:	b21b      	sxth	r3, r3
 80193d2:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 80193d4:	8b3a      	ldrh	r2, [r7, #24]
 80193d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193d8:	1ad3      	subs	r3, r2, r3
 80193da:	1eda      	subs	r2, r3, #3
 80193dc:	8a3b      	ldrh	r3, [r7, #16]
 80193de:	429a      	cmp	r2, r3
 80193e0:	dd66      	ble.n	80194b0 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 80193e2:	8a7b      	ldrh	r3, [r7, #18]
 80193e4:	2b33      	cmp	r3, #51	@ 0x33
 80193e6:	d007      	beq.n	80193f8 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 80193e8:	8a3b      	ldrh	r3, [r7, #16]
 80193ea:	3304      	adds	r3, #4
 80193ec:	b29b      	uxth	r3, r3
 80193ee:	461a      	mov	r2, r3
 80193f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193f2:	4413      	add	r3, r2
 80193f4:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80193f6:	e053      	b.n	80194a0 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 80193f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193fa:	3304      	adds	r3, #4
 80193fc:	697a      	ldr	r2, [r7, #20]
 80193fe:	4413      	add	r3, r2
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	b21b      	sxth	r3, r3
 8019404:	021b      	lsls	r3, r3, #8
 8019406:	b21a      	sxth	r2, r3
 8019408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801940a:	3305      	adds	r3, #5
 801940c:	6979      	ldr	r1, [r7, #20]
 801940e:	440b      	add	r3, r1
 8019410:	781b      	ldrb	r3, [r3, #0]
 8019412:	b21b      	sxth	r3, r3
 8019414:	4313      	orrs	r3, r2
 8019416:	b21b      	sxth	r3, r3
 8019418:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 801941a:	89fb      	ldrh	r3, [r7, #14]
 801941c:	2b1d      	cmp	r3, #29
 801941e:	d006      	beq.n	801942e <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 8019420:	492f      	ldr	r1, [pc, #188]	@ (80194e0 <mg_tls_client_recv_hello+0x264>)
 8019422:	6878      	ldr	r0, [r7, #4]
 8019424:	f7ef fc2a 	bl	8008c7c <mg_error>
      return -1;
 8019428:	f04f 33ff 	mov.w	r3, #4294967295
 801942c:	e047      	b.n	80194be <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 801942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019430:	3306      	adds	r3, #6
 8019432:	697a      	ldr	r2, [r7, #20]
 8019434:	4413      	add	r3, r2
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	b21b      	sxth	r3, r3
 801943a:	021b      	lsls	r3, r3, #8
 801943c:	b21a      	sxth	r2, r3
 801943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019440:	3307      	adds	r3, #7
 8019442:	6979      	ldr	r1, [r7, #20]
 8019444:	440b      	add	r3, r1
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	b21b      	sxth	r3, r3
 801944a:	4313      	orrs	r3, r2
 801944c:	b21b      	sxth	r3, r3
 801944e:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 8019450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019452:	3308      	adds	r3, #8
 8019454:	697a      	ldr	r2, [r7, #20]
 8019456:	4413      	add	r3, r2
 8019458:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 801945a:	89bb      	ldrh	r3, [r7, #12]
 801945c:	2b20      	cmp	r3, #32
 801945e:	d006      	beq.n	801946e <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 8019460:	4920      	ldr	r1, [pc, #128]	@ (80194e4 <mg_tls_client_recv_hello+0x268>)
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f7ef fc0a 	bl	8008c7c <mg_error>
      return -1;
 8019468:	f04f 33ff 	mov.w	r3, #4294967295
 801946c:	e027      	b.n	80194be <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 801946e:	6a3b      	ldr	r3, [r7, #32]
 8019470:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8019474:	6a3b      	ldr	r3, [r7, #32]
 8019476:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 801947a:	2301      	movs	r3, #1
 801947c:	68ba      	ldr	r2, [r7, #8]
 801947e:	f008 fa03 	bl	8021888 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 8019482:	6a3b      	ldr	r3, [r7, #32]
 8019484:	33f0      	adds	r3, #240	@ 0xf0
 8019486:	2220      	movs	r2, #32
 8019488:	4619      	mov	r1, r3
 801948a:	4817      	ldr	r0, [pc, #92]	@ (80194e8 <mg_tls_client_recv_hello+0x26c>)
 801948c:	f7fe f824 	bl	80174d8 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 8019490:	6878      	ldr	r0, [r7, #4]
 8019492:	f7fe f9a0 	bl	80177d6 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8019496:	6878      	ldr	r0, [r7, #4]
 8019498:	f7fe faa8 	bl	80179ec <mg_tls_generate_handshake_keys>
    return 0;
 801949c:	2300      	movs	r3, #0
 801949e:	e00e      	b.n	80194be <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 80194a0:	8b3b      	ldrh	r3, [r7, #24]
 80194a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194a4:	429a      	cmp	r2, r3
 80194a6:	f6ff af74 	blt.w	8019392 <mg_tls_client_recv_hello+0x116>
  }
fail:
 80194aa:	e002      	b.n	80194b2 <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 80194ac:	bf00      	nop
 80194ae:	e000      	b.n	80194b2 <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 80194b0:	bf00      	nop
  mg_error(c, "bad server hello");
 80194b2:	490e      	ldr	r1, [pc, #56]	@ (80194ec <mg_tls_client_recv_hello+0x270>)
 80194b4:	6878      	ldr	r0, [r7, #4]
 80194b6:	f7ef fbe1 	bl	8008c7c <mg_error>
  return -1;
 80194ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80194be:	4618      	mov	r0, r3
 80194c0:	3728      	adds	r7, #40	@ 0x28
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bd80      	pop	{r7, pc}
 80194c6:	bf00      	nop
 80194c8:	0802bb78 	.word	0x0802bb78
 80194cc:	24000258 	.word	0x24000258
 80194d0:	0802dc54 	.word	0x0802dc54
 80194d4:	08029e1c 	.word	0x08029e1c
 80194d8:	0802bb88 	.word	0x0802bb88
 80194dc:	0802bba8 	.word	0x0802bba8
 80194e0:	0802bbc4 	.word	0x0802bbc4
 80194e4:	0802bbdc 	.word	0x0802bbdc
 80194e8:	0802bbf4 	.word	0x0802bbf4
 80194ec:	0802bc04 	.word	0x0802bc04

080194f0 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b084      	sub	sp, #16
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80194fe:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8019500:	6878      	ldr	r0, [r7, #4]
 8019502:	f7fe fdd7 	bl	80180b4 <mg_tls_recv_record>
 8019506:	4603      	mov	r3, r0
 8019508:	2b00      	cmp	r3, #0
 801950a:	da02      	bge.n	8019512 <mg_tls_client_recv_ext+0x22>
    return -1;
 801950c:	f04f 33ff 	mov.w	r3, #4294967295
 8019510:	e017      	b.n	8019542 <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	695b      	ldr	r3, [r3, #20]
 801951a:	4413      	add	r3, r2
 801951c:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 801951e:	68bb      	ldr	r3, [r7, #8]
 8019520:	781b      	ldrb	r3, [r3, #0]
 8019522:	2b08      	cmp	r3, #8
 8019524:	d009      	beq.n	801953a <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 8019526:	68bb      	ldr	r3, [r7, #8]
 8019528:	781b      	ldrb	r3, [r3, #0]
 801952a:	461a      	mov	r2, r3
 801952c:	4907      	ldr	r1, [pc, #28]	@ (801954c <mg_tls_client_recv_ext+0x5c>)
 801952e:	6878      	ldr	r0, [r7, #4]
 8019530:	f7ef fba4 	bl	8008c7c <mg_error>
    return -1;
 8019534:	f04f 33ff 	mov.w	r3, #4294967295
 8019538:	e003      	b.n	8019542 <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 801953a:	6878      	ldr	r0, [r7, #4]
 801953c:	f7fe f96e 	bl	801781c <mg_tls_drop_message>
  return 0;
 8019540:	2300      	movs	r3, #0
}
 8019542:	4618      	mov	r0, r3
 8019544:	3710      	adds	r7, #16
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}
 801954a:	bf00      	nop
 801954c:	0802bc18 	.word	0x0802bc18

08019550 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 8019550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019552:	b099      	sub	sp, #100	@ 0x64
 8019554:	af06      	add	r7, sp, #24
 8019556:	6178      	str	r0, [r7, #20]
 8019558:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 801955a:	f107 031c 	add.w	r3, r7, #28
 801955e:	4946      	ldr	r1, [pc, #280]	@ (8019678 <mg_der_debug_cert_name+0x128>)
 8019560:	4618      	mov	r0, r3
 8019562:	f7fd fa03 	bl	801696c <mg_str_s>
 8019566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801956a:	f107 021c 	add.w	r2, r7, #28
 801956e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019572:	e883 0003 	stmia.w	r3, {r0, r1}
 8019576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801957a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801957e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019582:	e883 0003 	stmia.w	r3, {r0, r1}
 8019586:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801958a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801958e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019592:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 8019596:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801959a:	2203      	movs	r2, #3
 801959c:	4937      	ldr	r1, [pc, #220]	@ (801967c <mg_der_debug_cert_name+0x12c>)
 801959e:	6938      	ldr	r0, [r7, #16]
 80195a0:	f7fe f84d 	bl	801763e <mg_der_find_oid>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d006      	beq.n	80195b8 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 80195aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80195ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80195ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80195b2:	4618      	mov	r0, r3
 80195b4:	f7fd f9f7 	bl	80169a6 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 80195b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80195bc:	2203      	movs	r2, #3
 80195be:	4930      	ldr	r1, [pc, #192]	@ (8019680 <mg_der_debug_cert_name+0x130>)
 80195c0:	6938      	ldr	r0, [r7, #16]
 80195c2:	f7fe f83c 	bl	801763e <mg_der_find_oid>
 80195c6:	4603      	mov	r3, r0
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d006      	beq.n	80195da <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 80195cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80195ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80195d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7fd f9e6 	bl	80169a6 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 80195da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80195de:	2203      	movs	r2, #3
 80195e0:	4928      	ldr	r1, [pc, #160]	@ (8019684 <mg_der_debug_cert_name+0x134>)
 80195e2:	6938      	ldr	r0, [r7, #16]
 80195e4:	f7fe f82b 	bl	801763e <mg_der_find_oid>
 80195e8:	4603      	mov	r3, r0
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d006      	beq.n	80195fc <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 80195ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80195f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80195f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80195f6:	4618      	mov	r0, r3
 80195f8:	f7fd f9d5 	bl	80169a6 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 80195fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019600:	2203      	movs	r2, #3
 8019602:	4921      	ldr	r1, [pc, #132]	@ (8019688 <mg_der_debug_cert_name+0x138>)
 8019604:	6938      	ldr	r0, [r7, #16]
 8019606:	f7fe f81a 	bl	801763e <mg_der_find_oid>
 801960a:	4603      	mov	r3, r0
 801960c:	2b00      	cmp	r3, #0
 801960e:	d00e      	beq.n	801962e <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 8019610:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019614:	f107 0308 	add.w	r3, r7, #8
 8019618:	4618      	mov	r0, r3
 801961a:	f7fd f9c4 	bl	80169a6 <mg_str_n>
 801961e:	f107 031c 	add.w	r3, r7, #28
 8019622:	f107 0208 	add.w	r2, r7, #8
 8019626:	e892 0003 	ldmia.w	r2, {r0, r1}
 801962a:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 801962e:	4b17      	ldr	r3, [pc, #92]	@ (801968c <mg_der_debug_cert_name+0x13c>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	2b03      	cmp	r3, #3
 8019634:	dd1b      	ble.n	801966e <mg_der_debug_cert_name+0x11e>
 8019636:	4b16      	ldr	r3, [pc, #88]	@ (8019690 <mg_der_debug_cert_name+0x140>)
 8019638:	f642 6243 	movw	r2, #11843	@ 0x2e43
 801963c:	4915      	ldr	r1, [pc, #84]	@ (8019694 <mg_der_debug_cert_name+0x144>)
 801963e:	2004      	movs	r0, #4
 8019640:	f7f5 f994 	bl	800e96c <mg_log_prefix>
 8019644:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8019646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019648:	607b      	str	r3, [r7, #4]
 801964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801964c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801964e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019650:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019652:	6a3c      	ldr	r4, [r7, #32]
 8019654:	69fd      	ldr	r5, [r7, #28]
 8019656:	9505      	str	r5, [sp, #20]
 8019658:	9404      	str	r4, [sp, #16]
 801965a:	9003      	str	r0, [sp, #12]
 801965c:	9102      	str	r1, [sp, #8]
 801965e:	9201      	str	r2, [sp, #4]
 8019660:	9300      	str	r3, [sp, #0]
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	4632      	mov	r2, r6
 8019666:	6979      	ldr	r1, [r7, #20]
 8019668:	480b      	ldr	r0, [pc, #44]	@ (8019698 <mg_der_debug_cert_name+0x148>)
 801966a:	f7f5 f9cf 	bl	800ea0c <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 801966e:	bf00      	nop
 8019670:	374c      	adds	r7, #76	@ 0x4c
 8019672:	46bd      	mov	sp, r7
 8019674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019676:	bf00      	nop
 8019678:	0802a65c 	.word	0x0802a65c
 801967c:	0802bc48 	.word	0x0802bc48
 8019680:	0802bc4c 	.word	0x0802bc4c
 8019684:	0802bc50 	.word	0x0802bc50
 8019688:	0802bc54 	.word	0x0802bc54
 801968c:	24000258 	.word	0x24000258
 8019690:	0802dc70 	.word	0x0802dc70
 8019694:	08029e1c 	.word	0x08029e1c
 8019698:	0802bc58 	.word	0x0802bc58

0801969c <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 801969c:	b590      	push	{r4, r7, lr}
 801969e:	b0af      	sub	sp, #188	@ 0xbc
 80196a0:	af04      	add	r7, sp, #16
 80196a2:	6178      	str	r0, [r7, #20]
 80196a4:	6139      	str	r1, [r7, #16]
 80196a6:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 80196a8:	697b      	ldr	r3, [r7, #20]
 80196aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 80196ae:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80196b2:	461a      	mov	r2, r3
 80196b4:	6939      	ldr	r1, [r7, #16]
 80196b6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80196ba:	f7fd ff35 	bl	8017528 <mg_der_parse>
 80196be:	4603      	mov	r3, r0
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	dd03      	ble.n	80196cc <mg_tls_parse_cert_der+0x30>
 80196c4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80196c8:	2b30      	cmp	r3, #48	@ 0x30
 80196ca:	d002      	beq.n	80196d2 <mg_tls_parse_cert_der+0x36>
 80196cc:	f04f 33ff 	mov.w	r3, #4294967295
 80196d0:	e38a      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 80196d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80196d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 80196da:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80196de:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80196e2:	4611      	mov	r1, r2
 80196e4:	4618      	mov	r0, r3
 80196e6:	f7fd ff7f 	bl	80175e8 <mg_der_next>
 80196ea:	4603      	mov	r3, r0
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	dd03      	ble.n	80196f8 <mg_tls_parse_cert_der+0x5c>
 80196f0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80196f4:	2b30      	cmp	r3, #48	@ 0x30
 80196f6:	d002      	beq.n	80196fe <mg_tls_parse_cert_der+0x62>
 80196f8:	f04f 33ff 	mov.w	r3, #4294967295
 80196fc:	e374      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 80196fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8019702:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019706:	441a      	add	r2, r3
 8019708:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801970c:	1ad3      	subs	r3, r2, r3
 801970e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8019712:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019716:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801971a:	4611      	mov	r1, r2
 801971c:	4618      	mov	r0, r3
 801971e:	f7fd ff63 	bl	80175e8 <mg_der_next>
 8019722:	4603      	mov	r3, r0
 8019724:	2b00      	cmp	r3, #0
 8019726:	dc02      	bgt.n	801972e <mg_tls_parse_cert_der+0x92>
 8019728:	f04f 33ff 	mov.w	r3, #4294967295
 801972c:	e35c      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 801972e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019732:	2ba0      	cmp	r3, #160	@ 0xa0
 8019734:	d123      	bne.n	801977e <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8019736:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801973a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801973c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019740:	4618      	mov	r0, r3
 8019742:	f7fd fef1 	bl	8017528 <mg_der_parse>
 8019746:	4603      	mov	r3, r0
 8019748:	2b00      	cmp	r3, #0
 801974a:	dd07      	ble.n	801975c <mg_tls_parse_cert_der+0xc0>
 801974c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801974e:	2b01      	cmp	r3, #1
 8019750:	d104      	bne.n	801975c <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 8019752:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019756:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8019758:	2b02      	cmp	r3, #2
 801975a:	d002      	beq.n	8019762 <mg_tls_parse_cert_der+0xc6>
      return -1;
 801975c:	f04f 33ff 	mov.w	r3, #4294967295
 8019760:	e342      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8019762:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019766:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801976a:	4611      	mov	r1, r2
 801976c:	4618      	mov	r0, r3
 801976e:	f7fd ff3b 	bl	80175e8 <mg_der_next>
 8019772:	4603      	mov	r3, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	dc02      	bgt.n	801977e <mg_tls_parse_cert_der+0xe2>
 8019778:	f04f 33ff 	mov.w	r3, #4294967295
 801977c:	e334      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 801977e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019782:	2b02      	cmp	r3, #2
 8019784:	d002      	beq.n	801978c <mg_tls_parse_cert_der+0xf0>
 8019786:	f04f 33ff 	mov.w	r3, #4294967295
 801978a:	e32d      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 801978c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8019790:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019792:	68fc      	ldr	r4, [r7, #12]
 8019794:	463b      	mov	r3, r7
 8019796:	4618      	mov	r0, r3
 8019798:	f7fd f905 	bl	80169a6 <mg_str_n>
 801979c:	1d23      	adds	r3, r4, #4
 801979e:	463a      	mov	r2, r7
 80197a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80197a4:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 80197a8:	4bae      	ldr	r3, [pc, #696]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	2b03      	cmp	r3, #3
 80197ae:	dd0e      	ble.n	80197ce <mg_tls_parse_cert_der+0x132>
 80197b0:	4bad      	ldr	r3, [pc, #692]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 80197b2:	f642 6262 	movw	r2, #11874	@ 0x2e62
 80197b6:	49ad      	ldr	r1, [pc, #692]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 80197b8:	2004      	movs	r0, #4
 80197ba:	f7f5 f8d7 	bl	800e96c <mg_log_prefix>
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	689a      	ldr	r2, [r3, #8]
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	49aa      	ldr	r1, [pc, #680]	@ (8019a70 <mg_tls_parse_cert_der+0x3d4>)
 80197c8:	48aa      	ldr	r0, [pc, #680]	@ (8019a74 <mg_tls_parse_cert_der+0x3d8>)
 80197ca:	f7f5 f91f 	bl	800ea0c <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 80197ce:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80197d2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80197d6:	4611      	mov	r1, r2
 80197d8:	4618      	mov	r0, r3
 80197da:	f7fd ff05 	bl	80175e8 <mg_der_next>
 80197de:	4603      	mov	r3, r0
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	dd03      	ble.n	80197ec <mg_tls_parse_cert_der+0x150>
 80197e4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80197e8:	2b30      	cmp	r3, #48	@ 0x30
 80197ea:	d002      	beq.n	80197f2 <mg_tls_parse_cert_der+0x156>
 80197ec:	f04f 33ff 	mov.w	r3, #4294967295
 80197f0:	e2fa      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 80197f2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80197f6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80197fa:	4611      	mov	r1, r2
 80197fc:	4618      	mov	r0, r3
 80197fe:	f7fd fef3 	bl	80175e8 <mg_der_next>
 8019802:	4603      	mov	r3, r0
 8019804:	2b00      	cmp	r3, #0
 8019806:	dd03      	ble.n	8019810 <mg_tls_parse_cert_der+0x174>
 8019808:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 801980c:	2b06      	cmp	r3, #6
 801980e:	d002      	beq.n	8019816 <mg_tls_parse_cert_der+0x17a>
 8019810:	f04f 33ff 	mov.w	r3, #4294967295
 8019814:	e2e8      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 8019816:	4b93      	ldr	r3, [pc, #588]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	2b03      	cmp	r3, #3
 801981c:	dd0c      	ble.n	8019838 <mg_tls_parse_cert_der+0x19c>
 801981e:	4b92      	ldr	r3, [pc, #584]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 8019820:	f642 6268 	movw	r2, #11880	@ 0x2e68
 8019824:	4991      	ldr	r1, [pc, #580]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 8019826:	2004      	movs	r0, #4
 8019828:	f7f5 f8a0 	bl	800e96c <mg_log_prefix>
 801982c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801982e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019830:	498f      	ldr	r1, [pc, #572]	@ (8019a70 <mg_tls_parse_cert_der+0x3d4>)
 8019832:	4891      	ldr	r0, [pc, #580]	@ (8019a78 <mg_tls_parse_cert_der+0x3dc>)
 8019834:	f7f5 f8ea 	bl	800ea0c <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 8019838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801983a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801983c:	498f      	ldr	r1, [pc, #572]	@ (8019a7c <mg_tls_parse_cert_der+0x3e0>)
 801983e:	4618      	mov	r0, r3
 8019840:	f00d ff7c 	bl	802773c <memcmp>
 8019844:	4603      	mov	r3, r0
 8019846:	2b00      	cmp	r3, #0
 8019848:	d11a      	bne.n	8019880 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 801984a:	4b86      	ldr	r3, [pc, #536]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	2b03      	cmp	r3, #3
 8019850:	dd09      	ble.n	8019866 <mg_tls_parse_cert_der+0x1ca>
 8019852:	4b85      	ldr	r3, [pc, #532]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 8019854:	f642 626b 	movw	r2, #11883	@ 0x2e6b
 8019858:	4984      	ldr	r1, [pc, #528]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 801985a:	2004      	movs	r0, #4
 801985c:	f7f5 f886 	bl	800e96c <mg_log_prefix>
 8019860:	4887      	ldr	r0, [pc, #540]	@ (8019a80 <mg_tls_parse_cert_der+0x3e4>)
 8019862:	f7f5 f8d3 	bl	800ea0c <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	331c      	adds	r3, #28
 801986a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801986e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8019872:	4618      	mov	r0, r3
 8019874:	f7fb ff63 	bl	801573e <mg_sha256>
    cert->tbshashsz = 32;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2220      	movs	r2, #32
 801987c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801987e:	e07f      	b.n	8019980 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8019880:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8019882:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8019884:	497f      	ldr	r1, [pc, #508]	@ (8019a84 <mg_tls_parse_cert_der+0x3e8>)
 8019886:	4618      	mov	r0, r3
 8019888:	f00d ff58 	bl	802773c <memcmp>
 801988c:	4603      	mov	r3, r0
 801988e:	2b00      	cmp	r3, #0
 8019890:	d11a      	bne.n	80198c8 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 8019892:	4b74      	ldr	r3, [pc, #464]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	2b03      	cmp	r3, #3
 8019898:	dd09      	ble.n	80198ae <mg_tls_parse_cert_der+0x212>
 801989a:	4b73      	ldr	r3, [pc, #460]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 801989c:	f642 6270 	movw	r2, #11888	@ 0x2e70
 80198a0:	4972      	ldr	r1, [pc, #456]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 80198a2:	2004      	movs	r0, #4
 80198a4:	f7f5 f862 	bl	800e96c <mg_log_prefix>
 80198a8:	4877      	ldr	r0, [pc, #476]	@ (8019a88 <mg_tls_parse_cert_der+0x3ec>)
 80198aa:	f7f5 f8af 	bl	800ea0c <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	331c      	adds	r3, #28
 80198b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80198b6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7fb ff3f 	bl	801573e <mg_sha256>
    cert->tbshashsz = 32;
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	2220      	movs	r2, #32
 80198c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80198c6:	e05b      	b.n	8019980 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 80198c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80198ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80198cc:	496f      	ldr	r1, [pc, #444]	@ (8019a8c <mg_tls_parse_cert_der+0x3f0>)
 80198ce:	4618      	mov	r0, r3
 80198d0:	f00d ff34 	bl	802773c <memcmp>
 80198d4:	4603      	mov	r3, r0
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d11a      	bne.n	8019910 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 80198da:	4b62      	ldr	r3, [pc, #392]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	2b03      	cmp	r3, #3
 80198e0:	dd09      	ble.n	80198f6 <mg_tls_parse_cert_der+0x25a>
 80198e2:	4b61      	ldr	r3, [pc, #388]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 80198e4:	f642 6275 	movw	r2, #11893	@ 0x2e75
 80198e8:	4960      	ldr	r1, [pc, #384]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 80198ea:	2004      	movs	r0, #4
 80198ec:	f7f5 f83e 	bl	800e96c <mg_log_prefix>
 80198f0:	4867      	ldr	r0, [pc, #412]	@ (8019a90 <mg_tls_parse_cert_der+0x3f4>)
 80198f2:	f7f5 f88b 	bl	800ea0c <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	331c      	adds	r3, #28
 80198fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80198fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8019902:	4618      	mov	r0, r3
 8019904:	f7fc ffef 	bl	80168e6 <mg_sha384>
    cert->tbshashsz = 48;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	2230      	movs	r2, #48	@ 0x30
 801990c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801990e:	e037      	b.n	8019980 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8019910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8019912:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8019914:	495f      	ldr	r1, [pc, #380]	@ (8019a94 <mg_tls_parse_cert_der+0x3f8>)
 8019916:	4618      	mov	r0, r3
 8019918:	f00d ff10 	bl	802773c <memcmp>
 801991c:	4603      	mov	r3, r0
 801991e:	2b00      	cmp	r3, #0
 8019920:	d11a      	bne.n	8019958 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 8019922:	4b50      	ldr	r3, [pc, #320]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	2b03      	cmp	r3, #3
 8019928:	dd09      	ble.n	801993e <mg_tls_parse_cert_der+0x2a2>
 801992a:	4b4f      	ldr	r3, [pc, #316]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 801992c:	f642 627a 	movw	r2, #11898	@ 0x2e7a
 8019930:	494e      	ldr	r1, [pc, #312]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 8019932:	2004      	movs	r0, #4
 8019934:	f7f5 f81a 	bl	800e96c <mg_log_prefix>
 8019938:	4857      	ldr	r0, [pc, #348]	@ (8019a98 <mg_tls_parse_cert_der+0x3fc>)
 801993a:	f7f5 f867 	bl	800ea0c <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	331c      	adds	r3, #28
 8019942:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8019946:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801994a:	4618      	mov	r0, r3
 801994c:	f7fc ffcb 	bl	80168e6 <mg_sha384>
    cert->tbshashsz = 48;
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	2230      	movs	r2, #48	@ 0x30
 8019954:	64da      	str	r2, [r3, #76]	@ 0x4c
 8019956:	e013      	b.n	8019980 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 8019958:	4b42      	ldr	r3, [pc, #264]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	2b00      	cmp	r3, #0
 801995e:	dd0c      	ble.n	801997a <mg_tls_parse_cert_der+0x2de>
 8019960:	4b41      	ldr	r3, [pc, #260]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 8019962:	f642 627e 	movw	r2, #11902	@ 0x2e7e
 8019966:	4941      	ldr	r1, [pc, #260]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 8019968:	2001      	movs	r0, #1
 801996a:	f7f4 ffff 	bl	800e96c <mg_log_prefix>
 801996e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019972:	493f      	ldr	r1, [pc, #252]	@ (8019a70 <mg_tls_parse_cert_der+0x3d4>)
 8019974:	4849      	ldr	r0, [pc, #292]	@ (8019a9c <mg_tls_parse_cert_der+0x400>)
 8019976:	f7f5 f849 	bl	800ea0c <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 801997a:	f04f 33ff 	mov.w	r3, #4294967295
 801997e:	e233      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 8019980:	4b38      	ldr	r3, [pc, #224]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2b03      	cmp	r3, #3
 8019986:	dd0e      	ble.n	80199a6 <mg_tls_parse_cert_der+0x30a>
 8019988:	4b37      	ldr	r3, [pc, #220]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 801998a:	f642 6282 	movw	r2, #11906	@ 0x2e82
 801998e:	4937      	ldr	r1, [pc, #220]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 8019990:	2004      	movs	r0, #4
 8019992:	f7f4 ffeb 	bl	800e96c <mg_log_prefix>
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	331c      	adds	r3, #28
 801999e:	4934      	ldr	r1, [pc, #208]	@ (8019a70 <mg_tls_parse_cert_der+0x3d4>)
 80199a0:	483f      	ldr	r0, [pc, #252]	@ (8019aa0 <mg_tls_parse_cert_der+0x404>)
 80199a2:	f7f5 f833 	bl	800ea0c <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 80199a6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80199aa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80199ae:	4611      	mov	r1, r2
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7fd fe19 	bl	80175e8 <mg_der_next>
 80199b6:	4603      	mov	r3, r0
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	dd03      	ble.n	80199c4 <mg_tls_parse_cert_der+0x328>
 80199bc:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80199c0:	2b30      	cmp	r3, #48	@ 0x30
 80199c2:	d002      	beq.n	80199ca <mg_tls_parse_cert_der+0x32e>
 80199c4:	f04f 33ff 	mov.w	r3, #4294967295
 80199c8:	e20e      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 80199ca:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80199ce:	4619      	mov	r1, r3
 80199d0:	4834      	ldr	r0, [pc, #208]	@ (8019aa4 <mg_tls_parse_cert_der+0x408>)
 80199d2:	f7ff fdbd 	bl	8019550 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 80199d6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80199da:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80199de:	4611      	mov	r1, r2
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7fd fe01 	bl	80175e8 <mg_der_next>
 80199e6:	4603      	mov	r3, r0
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	dd03      	ble.n	80199f4 <mg_tls_parse_cert_der+0x358>
 80199ec:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80199f0:	2b30      	cmp	r3, #48	@ 0x30
 80199f2:	d002      	beq.n	80199fa <mg_tls_parse_cert_der+0x35e>
 80199f4:	f04f 33ff 	mov.w	r3, #4294967295
 80199f8:	e1f6      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 80199fa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80199fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019a02:	4611      	mov	r1, r2
 8019a04:	4618      	mov	r0, r3
 8019a06:	f7fd fdef 	bl	80175e8 <mg_der_next>
    mg_der_next(&field, &after);
 8019a0a:	f107 0218 	add.w	r2, r7, #24
 8019a0e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019a12:	4611      	mov	r1, r2
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7fd fde7 	bl	80175e8 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 8019a1a:	6a3b      	ldr	r3, [r7, #32]
 8019a1c:	69fa      	ldr	r2, [r7, #28]
 8019a1e:	4922      	ldr	r1, [pc, #136]	@ (8019aa8 <mg_tls_parse_cert_der+0x40c>)
 8019a20:	4618      	mov	r0, r3
 8019a22:	f00d fe8b 	bl	802773c <memcmp>
 8019a26:	4603      	mov	r3, r0
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	da41      	bge.n	8019ab0 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 8019a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8019a64 <mg_tls_parse_cert_der+0x3c8>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	dd14      	ble.n	8019a5e <mg_tls_parse_cert_der+0x3c2>
 8019a34:	4b0c      	ldr	r3, [pc, #48]	@ (8019a68 <mg_tls_parse_cert_der+0x3cc>)
 8019a36:	f642 628f 	movw	r2, #11919	@ 0x2e8f
 8019a3a:	490c      	ldr	r1, [pc, #48]	@ (8019a6c <mg_tls_parse_cert_der+0x3d0>)
 8019a3c:	2001      	movs	r0, #1
 8019a3e:	f7f4 ff95 	bl	800e96c <mg_log_prefix>
 8019a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019a44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a46:	69fb      	ldr	r3, [r7, #28]
 8019a48:	6a3a      	ldr	r2, [r7, #32]
 8019a4a:	9202      	str	r2, [sp, #8]
 8019a4c:	9301      	str	r3, [sp, #4]
 8019a4e:	4b08      	ldr	r3, [pc, #32]	@ (8019a70 <mg_tls_parse_cert_der+0x3d4>)
 8019a50:	9300      	str	r3, [sp, #0]
 8019a52:	4603      	mov	r3, r0
 8019a54:	460a      	mov	r2, r1
 8019a56:	4906      	ldr	r1, [pc, #24]	@ (8019a70 <mg_tls_parse_cert_der+0x3d4>)
 8019a58:	4814      	ldr	r0, [pc, #80]	@ (8019aac <mg_tls_parse_cert_der+0x410>)
 8019a5a:	f7f4 ffd7 	bl	800ea0c <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 8019a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8019a62:	e1c1      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
 8019a64:	24000258 	.word	0x24000258
 8019a68:	0802dc88 	.word	0x0802dc88
 8019a6c:	08029e1c 	.word	0x08029e1c
 8019a70:	080135e9 	.word	0x080135e9
 8019a74:	0802bc80 	.word	0x0802bc80
 8019a78:	0802bc90 	.word	0x0802bc90
 8019a7c:	0802bca4 	.word	0x0802bca4
 8019a80:	0802bcb0 	.word	0x0802bcb0
 8019a84:	0802bccc 	.word	0x0802bccc
 8019a88:	0802bcd8 	.word	0x0802bcd8
 8019a8c:	0802bcf4 	.word	0x0802bcf4
 8019a90:	0802bd00 	.word	0x0802bd00
 8019a94:	0802bd1c 	.word	0x0802bd1c
 8019a98:	0802bd28 	.word	0x0802bd28
 8019a9c:	0802bd44 	.word	0x0802bd44
 8019aa0:	0802bd64 	.word	0x0802bd64
 8019aa4:	0802bd74 	.word	0x0802bd74
 8019aa8:	0802bd7c 	.word	0x0802bd7c
 8019aac:	0802bd8c 	.word	0x0802bd8c
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8019ab0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019ab4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019ab8:	4611      	mov	r1, r2
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7fd fd94 	bl	80175e8 <mg_der_next>
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	dd03      	ble.n	8019ace <mg_tls_parse_cert_der+0x432>
 8019ac6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019aca:	2b30      	cmp	r3, #48	@ 0x30
 8019acc:	d002      	beq.n	8019ad4 <mg_tls_parse_cert_der+0x438>
 8019ace:	f04f 33ff 	mov.w	r3, #4294967295
 8019ad2:	e189      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 8019ad4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019ad8:	4619      	mov	r1, r3
 8019ada:	48a2      	ldr	r0, [pc, #648]	@ (8019d64 <mg_tls_parse_cert_der+0x6c8>)
 8019adc:	f7ff fd38 	bl	8019550 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8019ae0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019ae4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019ae8:	4611      	mov	r1, r2
 8019aea:	4618      	mov	r0, r3
 8019aec:	f7fd fd7c 	bl	80175e8 <mg_der_next>
 8019af0:	4603      	mov	r3, r0
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	dd03      	ble.n	8019afe <mg_tls_parse_cert_der+0x462>
 8019af6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019afa:	2b30      	cmp	r3, #48	@ 0x30
 8019afc:	d002      	beq.n	8019b04 <mg_tls_parse_cert_der+0x468>
 8019afe:	f04f 33ff 	mov.w	r3, #4294967295
 8019b02:	e171      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 8019b04:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8019b08:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019b0c:	4611      	mov	r1, r2
 8019b0e:	4618      	mov	r0, r3
 8019b10:	f7fd fd6a 	bl	80175e8 <mg_der_next>
 8019b14:	4603      	mov	r3, r0
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	dd03      	ble.n	8019b22 <mg_tls_parse_cert_der+0x486>
 8019b1a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8019b1e:	2b30      	cmp	r3, #48	@ 0x30
 8019b20:	d002      	beq.n	8019b28 <mg_tls_parse_cert_der+0x48c>
 8019b22:	f04f 33ff 	mov.w	r3, #4294967295
 8019b26:	e15f      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 8019b28:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8019b2c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8019b30:	4611      	mov	r1, r2
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7fd fd58 	bl	80175e8 <mg_der_next>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	dd03      	ble.n	8019b46 <mg_tls_parse_cert_der+0x4aa>
 8019b3e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019b42:	2b06      	cmp	r3, #6
 8019b44:	d002      	beq.n	8019b4c <mg_tls_parse_cert_der+0x4b0>
 8019b46:	f04f 33ff 	mov.w	r3, #4294967295
 8019b4a:	e14d      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 8019b4c:	4b86      	ldr	r3, [pc, #536]	@ (8019d68 <mg_tls_parse_cert_der+0x6cc>)
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	2b03      	cmp	r3, #3
 8019b52:	dd0c      	ble.n	8019b6e <mg_tls_parse_cert_der+0x4d2>
 8019b54:	4b85      	ldr	r3, [pc, #532]	@ (8019d6c <mg_tls_parse_cert_der+0x6d0>)
 8019b56:	f642 62a1 	movw	r2, #11937	@ 0x2ea1
 8019b5a:	4985      	ldr	r1, [pc, #532]	@ (8019d70 <mg_tls_parse_cert_der+0x6d4>)
 8019b5c:	2004      	movs	r0, #4
 8019b5e:	f7f4 ff05 	bl	800e96c <mg_log_prefix>
 8019b62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019b66:	4983      	ldr	r1, [pc, #524]	@ (8019d74 <mg_tls_parse_cert_der+0x6d8>)
 8019b68:	4883      	ldr	r0, [pc, #524]	@ (8019d78 <mg_tls_parse_cert_der+0x6dc>)
 8019b6a:	f7f4 ff4f 	bl	800ea0c <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8019b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 8019b70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8019b72:	4982      	ldr	r1, [pc, #520]	@ (8019d7c <mg_tls_parse_cert_der+0x6e0>)
 8019b74:	4618      	mov	r0, r3
 8019b76:	f00d fde1 	bl	802773c <memcmp>
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d111      	bne.n	8019ba4 <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	2201      	movs	r2, #1
 8019b84:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 8019b86:	4b78      	ldr	r3, [pc, #480]	@ (8019d68 <mg_tls_parse_cert_der+0x6cc>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	2b03      	cmp	r3, #3
 8019b8c:	dd6f      	ble.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
 8019b8e:	4b77      	ldr	r3, [pc, #476]	@ (8019d6c <mg_tls_parse_cert_der+0x6d0>)
 8019b90:	f642 62a5 	movw	r2, #11941	@ 0x2ea5
 8019b94:	4976      	ldr	r1, [pc, #472]	@ (8019d70 <mg_tls_parse_cert_der+0x6d4>)
 8019b96:	2004      	movs	r0, #4
 8019b98:	f7f4 fee8 	bl	800e96c <mg_log_prefix>
 8019b9c:	4878      	ldr	r0, [pc, #480]	@ (8019d80 <mg_tls_parse_cert_der+0x6e4>)
 8019b9e:	f7f4 ff35 	bl	800ea0c <mg_log>
 8019ba2:	e064      	b.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8019ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8019ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8019ba8:	4976      	ldr	r1, [pc, #472]	@ (8019d84 <mg_tls_parse_cert_der+0x6e8>)
 8019baa:	4618      	mov	r0, r3
 8019bac:	f00d fdc6 	bl	802773c <memcmp>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d111      	bne.n	8019bda <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	2201      	movs	r2, #1
 8019bba:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 8019bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8019d68 <mg_tls_parse_cert_der+0x6cc>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	2b03      	cmp	r3, #3
 8019bc2:	dd54      	ble.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
 8019bc4:	4b69      	ldr	r3, [pc, #420]	@ (8019d6c <mg_tls_parse_cert_der+0x6d0>)
 8019bc6:	f642 62a9 	movw	r2, #11945	@ 0x2ea9
 8019bca:	4969      	ldr	r1, [pc, #420]	@ (8019d70 <mg_tls_parse_cert_der+0x6d4>)
 8019bcc:	2004      	movs	r0, #4
 8019bce:	f7f4 fecd 	bl	800e96c <mg_log_prefix>
 8019bd2:	486d      	ldr	r0, [pc, #436]	@ (8019d88 <mg_tls_parse_cert_der+0x6ec>)
 8019bd4:	f7f4 ff1a 	bl	800ea0c <mg_log>
 8019bd8:	e049      	b.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8019bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8019bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8019bde:	496b      	ldr	r1, [pc, #428]	@ (8019d8c <mg_tls_parse_cert_der+0x6f0>)
 8019be0:	4618      	mov	r0, r3
 8019be2:	f00d fdab 	bl	802773c <memcmp>
 8019be6:	4603      	mov	r3, r0
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d111      	bne.n	8019c10 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	2201      	movs	r2, #1
 8019bf0:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 8019bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8019d68 <mg_tls_parse_cert_der+0x6cc>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	2b03      	cmp	r3, #3
 8019bf8:	dd39      	ble.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
 8019bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8019d6c <mg_tls_parse_cert_der+0x6d0>)
 8019bfc:	f642 62ad 	movw	r2, #11949	@ 0x2ead
 8019c00:	495b      	ldr	r1, [pc, #364]	@ (8019d70 <mg_tls_parse_cert_der+0x6d4>)
 8019c02:	2004      	movs	r0, #4
 8019c04:	f7f4 feb2 	bl	800e96c <mg_log_prefix>
 8019c08:	4861      	ldr	r0, [pc, #388]	@ (8019d90 <mg_tls_parse_cert_der+0x6f4>)
 8019c0a:	f7f4 feff 	bl	800ea0c <mg_log>
 8019c0e:	e02e      	b.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8019c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8019c12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8019c14:	495f      	ldr	r1, [pc, #380]	@ (8019d94 <mg_tls_parse_cert_der+0x6f8>)
 8019c16:	4618      	mov	r0, r3
 8019c18:	f00d fd90 	bl	802773c <memcmp>
 8019c1c:	4603      	mov	r3, r0
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d111      	bne.n	8019c46 <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	2200      	movs	r2, #0
 8019c26:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 8019c28:	4b4f      	ldr	r3, [pc, #316]	@ (8019d68 <mg_tls_parse_cert_der+0x6cc>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	2b03      	cmp	r3, #3
 8019c2e:	dd1e      	ble.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
 8019c30:	4b4e      	ldr	r3, [pc, #312]	@ (8019d6c <mg_tls_parse_cert_der+0x6d0>)
 8019c32:	f642 62b1 	movw	r2, #11953	@ 0x2eb1
 8019c36:	494e      	ldr	r1, [pc, #312]	@ (8019d70 <mg_tls_parse_cert_der+0x6d4>)
 8019c38:	2004      	movs	r0, #4
 8019c3a:	f7f4 fe97 	bl	800e96c <mg_log_prefix>
 8019c3e:	4856      	ldr	r0, [pc, #344]	@ (8019d98 <mg_tls_parse_cert_der+0x6fc>)
 8019c40:	f7f4 fee4 	bl	800ea0c <mg_log>
 8019c44:	e013      	b.n	8019c6e <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 8019c46:	4b48      	ldr	r3, [pc, #288]	@ (8019d68 <mg_tls_parse_cert_der+0x6cc>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	dd0c      	ble.n	8019c68 <mg_tls_parse_cert_der+0x5cc>
 8019c4e:	4b47      	ldr	r3, [pc, #284]	@ (8019d6c <mg_tls_parse_cert_der+0x6d0>)
 8019c50:	f642 62b3 	movw	r2, #11955	@ 0x2eb3
 8019c54:	4946      	ldr	r1, [pc, #280]	@ (8019d70 <mg_tls_parse_cert_der+0x6d4>)
 8019c56:	2001      	movs	r0, #1
 8019c58:	f7f4 fe88 	bl	800e96c <mg_log_prefix>
 8019c5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019c60:	4944      	ldr	r1, [pc, #272]	@ (8019d74 <mg_tls_parse_cert_der+0x6d8>)
 8019c62:	484e      	ldr	r0, [pc, #312]	@ (8019d9c <mg_tls_parse_cert_der+0x700>)
 8019c64:	f7f4 fed2 	bl	800ea0c <mg_log>
              pki_algo.value));
    return -1;
 8019c68:	f04f 33ff 	mov.w	r3, #4294967295
 8019c6c:	e0bc      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d011      	beq.n	8019c9a <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 8019c76:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8019c7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8019c7e:	4611      	mov	r1, r2
 8019c80:	4618      	mov	r0, r3
 8019c82:	f7fd fcb1 	bl	80175e8 <mg_der_next>
 8019c86:	4603      	mov	r3, r0
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	dd03      	ble.n	8019c94 <mg_tls_parse_cert_der+0x5f8>
 8019c8c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8019c90:	2b06      	cmp	r3, #6
 8019c92:	d002      	beq.n	8019c9a <mg_tls_parse_cert_der+0x5fe>
 8019c94:	f04f 33ff 	mov.w	r3, #4294967295
 8019c98:	e0a6      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 8019c9a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8019c9e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019ca2:	4611      	mov	r1, r2
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	f7fd fc9f 	bl	80175e8 <mg_der_next>
 8019caa:	4603      	mov	r3, r0
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	dd03      	ble.n	8019cb8 <mg_tls_parse_cert_der+0x61c>
 8019cb0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019cb4:	2b03      	cmp	r3, #3
 8019cb6:	d002      	beq.n	8019cbe <mg_tls_parse_cert_der+0x622>
 8019cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8019cbc:	e094      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d010      	beq.n	8019ce8 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 8019cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019cc8:	1c99      	adds	r1, r3, #2
 8019cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ccc:	1e9a      	subs	r2, r3, #2
 8019cce:	68fc      	ldr	r4, [r7, #12]
 8019cd0:	463b      	mov	r3, r7
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7fc fe67 	bl	80169a6 <mg_str_n>
 8019cd8:	f104 030c 	add.w	r3, r4, #12
 8019cdc:	463a      	mov	r2, r7
 8019cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ce2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ce6:	e00f      	b.n	8019d08 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 8019ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019cea:	1c59      	adds	r1, r3, #1
 8019cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cee:	1e5a      	subs	r2, r3, #1
 8019cf0:	68fc      	ldr	r4, [r7, #12]
 8019cf2:	463b      	mov	r3, r7
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	f7fc fe56 	bl	80169a6 <mg_str_n>
 8019cfa:	f104 030c 	add.w	r3, r4, #12
 8019cfe:	463a      	mov	r2, r7
 8019d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d04:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 8019d08:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8019d0c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8019d10:	4611      	mov	r1, r2
 8019d12:	4618      	mov	r0, r3
 8019d14:	f7fd fc68 	bl	80175e8 <mg_der_next>
 8019d18:	4603      	mov	r3, r0
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	dd03      	ble.n	8019d26 <mg_tls_parse_cert_der+0x68a>
 8019d1e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019d22:	2b30      	cmp	r3, #48	@ 0x30
 8019d24:	d002      	beq.n	8019d2c <mg_tls_parse_cert_der+0x690>
 8019d26:	f04f 33ff 	mov.w	r3, #4294967295
 8019d2a:	e05d      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 8019d2c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019d30:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8019d34:	4611      	mov	r1, r2
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7fd fc56 	bl	80175e8 <mg_der_next>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	dd03      	ble.n	8019d4a <mg_tls_parse_cert_der+0x6ae>
 8019d42:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019d46:	2b03      	cmp	r3, #3
 8019d48:	d002      	beq.n	8019d50 <mg_tls_parse_cert_der+0x6b4>
 8019d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8019d4e:	e04b      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 8019d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d003      	beq.n	8019d5e <mg_tls_parse_cert_der+0x6c2>
 8019d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d020      	beq.n	8019da0 <mg_tls_parse_cert_der+0x704>
 8019d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d62:	e041      	b.n	8019de8 <mg_tls_parse_cert_der+0x74c>
 8019d64:	0802bdb8 	.word	0x0802bdb8
 8019d68:	24000258 	.word	0x24000258
 8019d6c:	0802dc88 	.word	0x0802dc88
 8019d70:	08029e1c 	.word	0x08029e1c
 8019d74:	080135e9 	.word	0x080135e9
 8019d78:	0802bdc0 	.word	0x0802bdc0
 8019d7c:	0802bdd4 	.word	0x0802bdd4
 8019d80:	0802bde0 	.word	0x0802bde0
 8019d84:	0802bdfc 	.word	0x0802bdfc
 8019d88:	0802be08 	.word	0x0802be08
 8019d8c:	0802be24 	.word	0x0802be24
 8019d90:	0802be2c 	.word	0x0802be2c
 8019d94:	0802be44 	.word	0x0802be44
 8019d98:	0802be50 	.word	0x0802be50
 8019d9c:	0802be60 	.word	0x0802be60

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8019da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019da2:	1c59      	adds	r1, r3, #1
 8019da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019da6:	1e5a      	subs	r2, r3, #1
 8019da8:	68fc      	ldr	r4, [r7, #12]
 8019daa:	463b      	mov	r3, r7
 8019dac:	4618      	mov	r0, r3
 8019dae:	f7fc fdfa 	bl	80169a6 <mg_str_n>
 8019db2:	f104 0314 	add.w	r3, r4, #20
 8019db6:	463a      	mov	r2, r7
 8019db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019dbc:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 8019dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8019df0 <mg_tls_parse_cert_der+0x754>)
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	2b03      	cmp	r3, #3
 8019dc6:	dd0e      	ble.n	8019de6 <mg_tls_parse_cert_der+0x74a>
 8019dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8019df4 <mg_tls_parse_cert_der+0x758>)
 8019dca:	f642 62ca 	movw	r2, #11978	@ 0x2eca
 8019dce:	490a      	ldr	r1, [pc, #40]	@ (8019df8 <mg_tls_parse_cert_der+0x75c>)
 8019dd0:	2004      	movs	r0, #4
 8019dd2:	f7f4 fdcb 	bl	800e96c <mg_log_prefix>
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	699a      	ldr	r2, [r3, #24]
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	695b      	ldr	r3, [r3, #20]
 8019dde:	4907      	ldr	r1, [pc, #28]	@ (8019dfc <mg_tls_parse_cert_der+0x760>)
 8019de0:	4807      	ldr	r0, [pc, #28]	@ (8019e00 <mg_tls_parse_cert_der+0x764>)
 8019de2:	f7f4 fe13 	bl	800ea0c <mg_log>

  return 0;
 8019de6:	2300      	movs	r3, #0
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	37ac      	adds	r7, #172	@ 0xac
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd90      	pop	{r4, r7, pc}
 8019df0:	24000258 	.word	0x24000258
 8019df4:	0802dc88 	.word	0x0802dc88
 8019df8:	08029e1c 	.word	0x08029e1c
 8019dfc:	080135e9 	.word	0x080135e9
 8019e00:	0802be78 	.word	0x0802be78

08019e04 <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b094      	sub	sp, #80	@ 0x50
 8019e08:	af02      	add	r7, sp, #8
 8019e0a:	60f8      	str	r0, [r7, #12]
 8019e0c:	60b9      	str	r1, [r7, #8]
 8019e0e:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8019e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019e14:	461a      	mov	r2, r3
 8019e16:	68b9      	ldr	r1, [r7, #8]
 8019e18:	68f8      	ldr	r0, [r7, #12]
 8019e1a:	f7fd fb85 	bl	8017528 <mg_der_parse>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	db0a      	blt.n	8019e3a <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 8019e24:	f107 0320 	add.w	r3, r7, #32
 8019e28:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8019e2c:	2203      	movs	r2, #3
 8019e2e:	492f      	ldr	r1, [pc, #188]	@ (8019eec <mg_tls_verify_cert_san+0xe8>)
 8019e30:	f7fd fc05 	bl	801763e <mg_der_find_oid>
 8019e34:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	da10      	bge.n	8019e5c <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 8019e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8019ef0 <mg_tls_verify_cert_san+0xec>)
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	dd09      	ble.n	8019e56 <mg_tls_verify_cert_san+0x52>
 8019e42:	4b2c      	ldr	r3, [pc, #176]	@ (8019ef4 <mg_tls_verify_cert_san+0xf0>)
 8019e44:	f642 62d4 	movw	r2, #11988	@ 0x2ed4
 8019e48:	492b      	ldr	r1, [pc, #172]	@ (8019ef8 <mg_tls_verify_cert_san+0xf4>)
 8019e4a:	2001      	movs	r0, #1
 8019e4c:	f7f4 fd8e 	bl	800e96c <mg_log_prefix>
 8019e50:	482a      	ldr	r0, [pc, #168]	@ (8019efc <mg_tls_verify_cert_san+0xf8>)
 8019e52:	f7f4 fddb 	bl	800ea0c <mg_log>
    return -1;
 8019e56:	f04f 33ff 	mov.w	r3, #4294967295
 8019e5a:	e043      	b.n	8019ee4 <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 8019e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019e60:	f107 0220 	add.w	r2, r7, #32
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7fd fb5f 	bl	8017528 <mg_der_parse>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	da2c      	bge.n	8019eca <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 8019e70:	4b1f      	ldr	r3, [pc, #124]	@ (8019ef0 <mg_tls_verify_cert_san+0xec>)
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	dd09      	ble.n	8019e8c <mg_tls_verify_cert_san+0x88>
 8019e78:	4b1e      	ldr	r3, [pc, #120]	@ (8019ef4 <mg_tls_verify_cert_san+0xf0>)
 8019e7a:	f642 62d8 	movw	r2, #11992	@ 0x2ed8
 8019e7e:	491e      	ldr	r1, [pc, #120]	@ (8019ef8 <mg_tls_verify_cert_san+0xf4>)
 8019e80:	2001      	movs	r0, #1
 8019e82:	f7f4 fd73 	bl	800e96c <mg_log_prefix>
 8019e86:	481e      	ldr	r0, [pc, #120]	@ (8019f00 <mg_tls_verify_cert_san+0xfc>)
 8019e88:	f7f4 fdc0 	bl	800ea0c <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 8019e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e90:	e028      	b.n	8019ee4 <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 8019e92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8019e96:	6879      	ldr	r1, [r7, #4]
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7fc fd67 	bl	801696c <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 8019e9e:	69f9      	ldr	r1, [r7, #28]
 8019ea0:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 8019ea2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f7fc fd7d 	bl	80169a6 <mg_str_n>
 8019eac:	2300      	movs	r3, #0
 8019eae:	9300      	str	r3, [sp, #0]
 8019eb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019eb4:	cb0c      	ldmia	r3, {r2, r3}
 8019eb6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8019eba:	c903      	ldmia	r1, {r0, r1}
 8019ebc:	f7fc fe60 	bl	8016b80 <mg_match>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d001      	beq.n	8019eca <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 8019ec6:	2301      	movs	r3, #1
 8019ec8:	e00c      	b.n	8019ee4 <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 8019eca:	f107 0214 	add.w	r2, r7, #20
 8019ece:	f107 0320 	add.w	r3, r7, #32
 8019ed2:	4611      	mov	r1, r2
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7fd fb87 	bl	80175e8 <mg_der_next>
 8019eda:	4603      	mov	r3, r0
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	dcd8      	bgt.n	8019e92 <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 8019ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	3748      	adds	r7, #72	@ 0x48
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bd80      	pop	{r7, pc}
 8019eec:	0802be80 	.word	0x0802be80
 8019ef0:	24000258 	.word	0x24000258
 8019ef4:	0802dca0 	.word	0x0802dca0
 8019ef8:	08029e1c 	.word	0x08029e1c
 8019efc:	0802be84 	.word	0x0802be84
 8019f00:	0802beb0 	.word	0x0802beb0

08019f04 <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 8019f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f06:	b0db      	sub	sp, #364	@ 0x16c
 8019f08:	af04      	add	r7, sp, #16
 8019f0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019f0e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019f12:	6018      	str	r0, [r3, #0]
 8019f14:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019f18:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019f1c:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 8019f1e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019f22:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	f000 80eb 	beq.w	801a106 <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 8019f30:	2300      	movs	r3, #0
 8019f32:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 8019f36:	2300      	movs	r3, #0
 8019f38:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8019f42:	2300      	movs	r3, #0
 8019f44:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8019f48:	2300      	movs	r3, #0
 8019f4a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019f4e:	2300      	movs	r3, #0
 8019f50:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8019f54:	2300      	movs	r3, #0
 8019f56:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8019f60:	2300      	movs	r3, #0
 8019f62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 8019f66:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019f6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	6958      	ldr	r0, [r3, #20]
 8019f72:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019f76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	699b      	ldr	r3, [r3, #24]
 8019f7e:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8019f82:	4619      	mov	r1, r3
 8019f84:	f7fd fad0 	bl	8017528 <mg_der_parse>
    mg_der_next(&seq, &a);
 8019f88:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8019f8c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019f90:	4611      	mov	r1, r2
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7fd fb28 	bl	80175e8 <mg_der_next>
    mg_der_next(&seq, &b);
 8019f98:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8019f9c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019fa0:	4611      	mov	r1, r2
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f7fd fb20 	bl	80175e8 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8019fa8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d003      	beq.n	8019fb8 <mg_tls_verify_cert_signature+0xb4>
 8019fb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d10f      	bne.n	8019fd8 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8019fb8:	4b92      	ldr	r3, [pc, #584]	@ (801a204 <mg_tls_verify_cert_signature+0x300>)
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	dd09      	ble.n	8019fd4 <mg_tls_verify_cert_signature+0xd0>
 8019fc0:	4b91      	ldr	r3, [pc, #580]	@ (801a208 <mg_tls_verify_cert_signature+0x304>)
 8019fc2:	f642 62ef 	movw	r2, #12015	@ 0x2eef
 8019fc6:	4991      	ldr	r1, [pc, #580]	@ (801a20c <mg_tls_verify_cert_signature+0x308>)
 8019fc8:	2001      	movs	r0, #1
 8019fca:	f7f4 fccf 	bl	800e96c <mg_log_prefix>
 8019fce:	4890      	ldr	r0, [pc, #576]	@ (801a210 <mg_tls_verify_cert_signature+0x30c>)
 8019fd0:	f7f4 fd1c 	bl	800ea0c <mg_log>
      return 0;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	e110      	b.n	801a1fa <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 8019fd8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019fdc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	691b      	ldr	r3, [r3, #16]
 8019fe4:	2b40      	cmp	r3, #64	@ 0x40
 8019fe6:	d15f      	bne.n	801a0a8 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 8019fe8:	2320      	movs	r3, #32
 8019fea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 8019fee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019ff2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d20d      	bcs.n	801a016 <mg_tls_verify_cert_signature+0x112>
 8019ffa:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8019ffe:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 801a002:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801a006:	1acb      	subs	r3, r1, r3
 801a008:	4413      	add	r3, r2
 801a00a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801a00e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801a012:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 801a016:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a01a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801a01e:	429a      	cmp	r2, r3
 801a020:	d20d      	bcs.n	801a03e <mg_tls_verify_cert_signature+0x13a>
 801a022:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a026:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801a02a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801a02e:	1acb      	subs	r3, r1, r3
 801a030:	4413      	add	r3, r2
 801a032:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801a036:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801a03a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 801a03e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 801a042:	f107 0308 	add.w	r3, r7, #8
 801a046:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801a04a:	4618      	mov	r0, r3
 801a04c:	f00d fb86 	bl	802775c <memmove>
      memmove(sig + N, b.value, N);
 801a050:	f107 0208 	add.w	r2, r7, #8
 801a054:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801a058:	4413      	add	r3, r2
 801a05a:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 801a05e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801a062:	4618      	mov	r0, r3
 801a064:	f00d fb7a 	bl	802775c <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 801a068:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a06c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	68dc      	ldr	r4, [r3, #12]
 801a074:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a078:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 801a082:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a086:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 801a08e:	f005 fba7 	bl	801f7e0 <mg_uecc_secp256r1>
 801a092:	4602      	mov	r2, r0
 801a094:	f107 0308 	add.w	r3, r7, #8
 801a098:	9200      	str	r2, [sp, #0]
 801a09a:	4632      	mov	r2, r6
 801a09c:	4629      	mov	r1, r5
 801a09e:	4620      	mov	r0, r4
 801a0a0:	f006 fd3a 	bl	8020b18 <mg_uecc_verify>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	e0a8      	b.n	801a1fa <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 801a0a8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a0ac:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	691b      	ldr	r3, [r3, #16]
 801a0b4:	2b60      	cmp	r3, #96	@ 0x60
 801a0b6:	d10f      	bne.n	801a0d8 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 801a0b8:	4b52      	ldr	r3, [pc, #328]	@ (801a204 <mg_tls_verify_cert_signature+0x300>)
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	2b02      	cmp	r3, #2
 801a0be:	dd09      	ble.n	801a0d4 <mg_tls_verify_cert_signature+0x1d0>
 801a0c0:	4b51      	ldr	r3, [pc, #324]	@ (801a208 <mg_tls_verify_cert_signature+0x304>)
 801a0c2:	f642 62fc 	movw	r2, #12028	@ 0x2efc
 801a0c6:	4951      	ldr	r1, [pc, #324]	@ (801a20c <mg_tls_verify_cert_signature+0x308>)
 801a0c8:	2003      	movs	r0, #3
 801a0ca:	f7f4 fc4f 	bl	800e96c <mg_log_prefix>
 801a0ce:	4851      	ldr	r0, [pc, #324]	@ (801a214 <mg_tls_verify_cert_signature+0x310>)
 801a0d0:	f7f4 fc9c 	bl	800ea0c <mg_log>
      return 1;
 801a0d4:	2301      	movs	r3, #1
 801a0d6:	e090      	b.n	801a1fa <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 801a0d8:	4b4a      	ldr	r3, [pc, #296]	@ (801a204 <mg_tls_verify_cert_signature+0x300>)
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	dd10      	ble.n	801a102 <mg_tls_verify_cert_signature+0x1fe>
 801a0e0:	4b49      	ldr	r3, [pc, #292]	@ (801a208 <mg_tls_verify_cert_signature+0x304>)
 801a0e2:	f642 62ff 	movw	r2, #12031	@ 0x2eff
 801a0e6:	4949      	ldr	r1, [pc, #292]	@ (801a20c <mg_tls_verify_cert_signature+0x308>)
 801a0e8:	2001      	movs	r0, #1
 801a0ea:	f7f4 fc3f 	bl	800e96c <mg_log_prefix>
 801a0ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a0f2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	691b      	ldr	r3, [r3, #16]
 801a0fa:	4619      	mov	r1, r3
 801a0fc:	4846      	ldr	r0, [pc, #280]	@ (801a218 <mg_tls_verify_cert_signature+0x314>)
 801a0fe:	f7f4 fc85 	bl	800ea0c <mg_log>
      return 0;
 801a102:	2300      	movs	r3, #0
 801a104:	e079      	b.n	801a1fa <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 801a106:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a10a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	68d8      	ldr	r0, [r3, #12]
 801a112:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a116:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	691b      	ldr	r3, [r3, #16]
 801a11e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801a122:	4619      	mov	r1, r3
 801a124:	f7fd fa00 	bl	8017528 <mg_der_parse>
 801a128:	4603      	mov	r3, r0
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	dd1d      	ble.n	801a16a <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a12e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 801a132:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a136:	4611      	mov	r1, r2
 801a138:	4618      	mov	r0, r3
 801a13a:	f7fd fa55 	bl	80175e8 <mg_der_next>
 801a13e:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 801a140:	2b00      	cmp	r3, #0
 801a142:	dd12      	ble.n	801a16a <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a144:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 801a148:	2b02      	cmp	r3, #2
 801a14a:	d10e      	bne.n	801a16a <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a14c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801a150:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801a154:	4611      	mov	r1, r2
 801a156:	4618      	mov	r0, r3
 801a158:	f7fd fa46 	bl	80175e8 <mg_der_next>
 801a15c:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a15e:	2b00      	cmp	r3, #0
 801a160:	dd03      	ble.n	801a16a <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a162:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 801a166:	2b02      	cmp	r3, #2
 801a168:	d002      	beq.n	801a170 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 801a16a:	f04f 33ff 	mov.w	r3, #4294967295
 801a16e:	e044      	b.n	801a1fa <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801a170:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 801a174:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 801a178:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 801a17c:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 801a180:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a184:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	695b      	ldr	r3, [r3, #20]
 801a18c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 801a190:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 801a194:	6812      	ldr	r2, [r2, #0]
 801a196:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801a198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a19c:	9103      	str	r1, [sp, #12]
 801a19e:	f107 0108 	add.w	r1, r7, #8
 801a1a2:	9102      	str	r1, [sp, #8]
 801a1a4:	9201      	str	r2, [sp, #4]
 801a1a6:	9300      	str	r3, [sp, #0]
 801a1a8:	4633      	mov	r3, r6
 801a1aa:	462a      	mov	r2, r5
 801a1ac:	4621      	mov	r1, r4
 801a1ae:	f004 fae8 	bl	801e782 <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801a1b2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a1b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a1be:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801a1c2:	f107 0208 	add.w	r2, r7, #8
 801a1c6:	18d0      	adds	r0, r2, r3
 801a1c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a1cc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 801a1d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801a1da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801a1e2:	461a      	mov	r2, r3
 801a1e4:	f00d faaa 	bl	802773c <memcmp>
 801a1e8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 801a1ec:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	bf0c      	ite	eq
 801a1f4:	2301      	moveq	r3, #1
 801a1f6:	2300      	movne	r3, #0
 801a1f8:	b2db      	uxtb	r3, r3
  }
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 801a200:	46bd      	mov	sp, r7
 801a202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a204:	24000258 	.word	0x24000258
 801a208:	0802dcb8 	.word	0x0802dcb8
 801a20c:	08029e1c 	.word	0x08029e1c
 801a210:	0802bef4 	.word	0x0802bef4
 801a214:	0802bf0c 	.word	0x0802bf0c
 801a218:	0802bf24 	.word	0x0802bf24

0801a21c <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 801a21c:	b580      	push	{r7, lr}
 801a21e:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 801a222:	af00      	add	r7, sp, #0
 801a224:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a228:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a22c:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 801a22e:	2300      	movs	r3, #0
 801a230:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a234:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a238:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a242:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 801a246:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a24a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a24e:	6818      	ldr	r0, [r3, #0]
 801a250:	f7fd ff30 	bl	80180b4 <mg_tls_recv_record>
 801a254:	4603      	mov	r3, r0
 801a256:	2b00      	cmp	r3, #0
 801a258:	da02      	bge.n	801a260 <mg_tls_client_recv_cert+0x44>
    return -1;
 801a25a:	f04f 33ff 	mov.w	r3, #4294967295
 801a25e:	e24a      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a260:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a264:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801a26c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a270:	695b      	ldr	r3, [r3, #20]
 801a272:	4413      	add	r3, r2
 801a274:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 801a278:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a27c:	781b      	ldrb	r3, [r3, #0]
 801a27e:	2b0d      	cmp	r3, #13
 801a280:	d11c      	bne.n	801a2bc <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 801a282:	4bcb      	ldr	r3, [pc, #812]	@ (801a5b0 <mg_tls_client_recv_cert+0x394>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	2b03      	cmp	r3, #3
 801a288:	dd09      	ble.n	801a29e <mg_tls_client_recv_cert+0x82>
 801a28a:	4bca      	ldr	r3, [pc, #808]	@ (801a5b4 <mg_tls_client_recv_cert+0x398>)
 801a28c:	f642 7223 	movw	r2, #12067	@ 0x2f23
 801a290:	49c9      	ldr	r1, [pc, #804]	@ (801a5b8 <mg_tls_client_recv_cert+0x39c>)
 801a292:	2004      	movs	r0, #4
 801a294:	f7f4 fb6a 	bl	800e96c <mg_log_prefix>
 801a298:	48c8      	ldr	r0, [pc, #800]	@ (801a5bc <mg_tls_client_recv_cert+0x3a0>)
 801a29a:	f7f4 fbb7 	bl	800ea0c <mg_log>
    mg_tls_drop_message(c);
 801a29e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a2a2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a2a6:	6818      	ldr	r0, [r3, #0]
 801a2a8:	f7fd fab8 	bl	801781c <mg_tls_drop_message>
    tls->cert_requested = 1;
 801a2ac:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 801a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a2ba:	e21c      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 801a2bc:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	2b0b      	cmp	r3, #11
 801a2c4:	d00e      	beq.n	801a2e4 <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 801a2c6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a2ca:	781b      	ldrb	r3, [r3, #0]
 801a2cc:	461a      	mov	r2, r3
 801a2ce:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a2d2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a2d6:	49ba      	ldr	r1, [pc, #744]	@ (801a5c0 <mg_tls_client_recv_cert+0x3a4>)
 801a2d8:	6818      	ldr	r0, [r3, #0]
 801a2da:	f7ee fccf 	bl	8008c7c <mg_error>
    return -1;
 801a2de:	f04f 33ff 	mov.w	r3, #4294967295
 801a2e2:	e208      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 801a2e4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a2e8:	699b      	ldr	r3, [r3, #24]
 801a2ea:	2b0a      	cmp	r3, #10
 801a2ec:	d80a      	bhi.n	801a304 <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 801a2ee:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a2f2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a2f6:	49b3      	ldr	r1, [pc, #716]	@ (801a5c4 <mg_tls_client_recv_cert+0x3a8>)
 801a2f8:	6818      	ldr	r0, [r3, #0]
 801a2fa:	f7ee fcbf 	bl	8008c7c <mg_error>
    return -1;
 801a2fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a302:	e1f8      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 801a304:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a308:	3301      	adds	r3, #1
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	041a      	lsls	r2, r3, #16
 801a30e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a312:	3302      	adds	r3, #2
 801a314:	781b      	ldrb	r3, [r3, #0]
 801a316:	021b      	lsls	r3, r3, #8
 801a318:	4313      	orrs	r3, r2
 801a31a:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801a31e:	3203      	adds	r2, #3
 801a320:	7812      	ldrb	r2, [r2, #0]
 801a322:	4313      	orrs	r3, r2
 801a324:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 801a328:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a32c:	3305      	adds	r3, #5
 801a32e:	781b      	ldrb	r3, [r3, #0]
 801a330:	041a      	lsls	r2, r3, #16
 801a332:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a336:	3306      	adds	r3, #6
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	021b      	lsls	r3, r3, #8
 801a33c:	4313      	orrs	r3, r2
 801a33e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801a342:	3207      	adds	r2, #7
 801a344:	7812      	ldrb	r2, [r2, #0]
 801a346:	4313      	orrs	r3, r2
 801a348:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 801a34c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801a350:	3b04      	subs	r3, #4
 801a352:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801a356:	429a      	cmp	r2, r3
 801a358:	d01c      	beq.n	801a394 <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 801a35a:	4b95      	ldr	r3, [pc, #596]	@ (801a5b0 <mg_tls_client_recv_cert+0x394>)
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	dd0d      	ble.n	801a37e <mg_tls_client_recv_cert+0x162>
 801a362:	4b94      	ldr	r3, [pc, #592]	@ (801a5b4 <mg_tls_client_recv_cert+0x398>)
 801a364:	f642 7236 	movw	r2, #12086	@ 0x2f36
 801a368:	4993      	ldr	r1, [pc, #588]	@ (801a5b8 <mg_tls_client_recv_cert+0x39c>)
 801a36a:	2001      	movs	r0, #1
 801a36c:	f7f4 fafe 	bl	800e96c <mg_log_prefix>
 801a370:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801a374:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 801a378:	4893      	ldr	r0, [pc, #588]	@ (801a5c8 <mg_tls_client_recv_cert+0x3ac>)
 801a37a:	f7f4 fb47 	bl	800ea0c <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 801a37e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a382:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a386:	4991      	ldr	r1, [pc, #580]	@ (801a5cc <mg_tls_client_recv_cert+0x3b0>)
 801a388:	6818      	ldr	r0, [r3, #0]
 801a38a:	f7ee fc77 	bl	8008c7c <mg_error>
    return -1;
 801a38e:	f04f 33ff 	mov.w	r3, #4294967295
 801a392:	e1b0      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 801a394:	2300      	movs	r3, #0
 801a396:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 801a39a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801a39e:	3308      	adds	r3, #8
 801a3a0:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 801a3a4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801a3a8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801a3ac:	4413      	add	r3, r2
 801a3ae:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 801a3b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a3bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a3c0:	2100      	movs	r1, #0
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	f00d f9e4 	bl	8027790 <memset>
  memset(&ca, 0, sizeof(ca));
 801a3c8:	f107 030c 	add.w	r3, r7, #12
 801a3cc:	2250      	movs	r2, #80	@ 0x50
 801a3ce:	2100      	movs	r1, #0
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f00d f9dd 	bl	8027790 <memset>

  if (tls->ca_der.len > 0) {
 801a3d6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a3da:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	f000 8134 	beq.w	801a64c <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 801a3e4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a3e8:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 801a3ec:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a3f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801a3f4:	f107 020c 	add.w	r2, r7, #12
 801a3f8:	4619      	mov	r1, r3
 801a3fa:	f7ff f94f 	bl	801969c <mg_tls_parse_cert_der>
 801a3fe:	4603      	mov	r3, r0
 801a400:	2b00      	cmp	r3, #0
 801a402:	da0a      	bge.n	801a41a <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 801a404:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a408:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a40c:	4970      	ldr	r1, [pc, #448]	@ (801a5d0 <mg_tls_client_recv_cert+0x3b4>)
 801a40e:	6818      	ldr	r0, [r3, #0]
 801a410:	f7ee fc34 	bl	8008c7c <mg_error>
      return -1;
 801a414:	f04f 33ff 	mov.w	r3, #4294967295
 801a418:	e16d      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 801a41a:	4b65      	ldr	r3, [pc, #404]	@ (801a5b0 <mg_tls_client_recv_cert+0x394>)
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	2b03      	cmp	r3, #3
 801a420:	f340 8114 	ble.w	801a64c <mg_tls_client_recv_cert+0x430>
 801a424:	4b63      	ldr	r3, [pc, #396]	@ (801a5b4 <mg_tls_client_recv_cert+0x398>)
 801a426:	f642 724e 	movw	r2, #12110	@ 0x2f4e
 801a42a:	4963      	ldr	r1, [pc, #396]	@ (801a5b8 <mg_tls_client_recv_cert+0x39c>)
 801a42c:	2004      	movs	r0, #4
 801a42e:	f7f4 fa9d 	bl	800e96c <mg_log_prefix>
 801a432:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a436:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a43a:	689a      	ldr	r2, [r3, #8]
 801a43c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a440:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	4963      	ldr	r1, [pc, #396]	@ (801a5d4 <mg_tls_client_recv_cert+0x3b8>)
 801a448:	4863      	ldr	r0, [pc, #396]	@ (801a5d8 <mg_tls_client_recv_cert+0x3bc>)
 801a44a:	f7f4 fadf 	bl	800ea0c <mg_log>
  }

  while (p < endp) {
 801a44e:	e0fd      	b.n	801a64c <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 801a450:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801a454:	1c53      	adds	r3, r2, #1
 801a456:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801a45a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801a45e:	4613      	mov	r3, r2
 801a460:	009b      	lsls	r3, r3, #2
 801a462:	4413      	add	r3, r2
 801a464:	011b      	lsls	r3, r3, #4
 801a466:	440b      	add	r3, r1
 801a468:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 801a46c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	041a      	lsls	r2, r3, #16
 801a474:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801a478:	3301      	adds	r3, #1
 801a47a:	781b      	ldrb	r3, [r3, #0]
 801a47c:	021b      	lsls	r3, r3, #8
 801a47e:	4313      	orrs	r3, r2
 801a480:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801a484:	3202      	adds	r2, #2
 801a486:	7812      	ldrb	r2, [r2, #0]
 801a488:	4313      	orrs	r3, r2
 801a48a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 801a48e:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801a492:	3303      	adds	r3, #3
 801a494:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 801a498:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801a49c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801a4a0:	4413      	add	r3, r2
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	b21b      	sxth	r3, r3
 801a4a6:	021b      	lsls	r3, r3, #8
 801a4a8:	b21a      	sxth	r2, r3
 801a4aa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801a4ae:	3301      	adds	r3, #1
 801a4b0:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 801a4b4:	440b      	add	r3, r1
 801a4b6:	781b      	ldrb	r3, [r3, #0]
 801a4b8:	b21b      	sxth	r3, r3
 801a4ba:	4313      	orrs	r3, r2
 801a4bc:	b21b      	sxth	r3, r3
 801a4be:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 801a4c2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d00a      	beq.n	801a4e0 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 801a4ca:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a4ce:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a4d2:	4942      	ldr	r1, [pc, #264]	@ (801a5dc <mg_tls_client_recv_cert+0x3c0>)
 801a4d4:	6818      	ldr	r0, [r3, #0]
 801a4d6:	f7ee fbd1 	bl	8008c7c <mg_error>
      return -1;
 801a4da:	f04f 33ff 	mov.w	r3, #4294967295
 801a4de:	e10a      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 801a4e0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801a4e4:	3302      	adds	r3, #2
 801a4e6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801a4ea:	4413      	add	r3, r2
 801a4ec:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 801a4f0:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 801a4f4:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801a4f8:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801a4fc:	f7ff f8ce 	bl	801969c <mg_tls_parse_cert_der>
 801a500:	4603      	mov	r3, r0
 801a502:	2b00      	cmp	r3, #0
 801a504:	da0a      	bge.n	801a51c <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 801a506:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a50a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a50e:	4934      	ldr	r1, [pc, #208]	@ (801a5e0 <mg_tls_client_recv_cert+0x3c4>)
 801a510:	6818      	ldr	r0, [r3, #0]
 801a512:	f7ee fbb3 	bl	8008c7c <mg_error>
      return -1;
 801a516:	f04f 33ff 	mov.w	r3, #4294967295
 801a51a:	e0ec      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 801a51c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a520:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 801a524:	429a      	cmp	r2, r3
 801a526:	d12d      	bne.n	801a584 <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 801a528:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a52c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801a530:	461a      	mov	r2, r3
 801a532:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801a536:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801a53a:	f7ff fc63 	bl	8019e04 <mg_tls_verify_cert_san>
 801a53e:	4603      	mov	r3, r0
 801a540:	2b00      	cmp	r3, #0
 801a542:	dc0a      	bgt.n	801a55a <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 801a544:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a548:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a54c:	4925      	ldr	r1, [pc, #148]	@ (801a5e4 <mg_tls_client_recv_cert+0x3c8>)
 801a54e:	6818      	ldr	r0, [r3, #0]
 801a550:	f7ee fb94 	bl	8008c7c <mg_error>
        return -1;
 801a554:	f04f 33ff 	mov.w	r3, #4294967295
 801a558:	e0cd      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 801a55a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a55e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801a562:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a566:	68d9      	ldr	r1, [r3, #12]
 801a568:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a56c:	691b      	ldr	r3, [r3, #16]
 801a56e:	461a      	mov	r2, r3
 801a570:	f00d f8f4 	bl	802775c <memmove>
      tls->pubkeysz = ci->pubkey.len;
 801a574:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a578:	691a      	ldr	r2, [r3, #16]
 801a57a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a57e:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 801a582:	e033      	b.n	801a5ec <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 801a584:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a588:	3b50      	subs	r3, #80	@ 0x50
 801a58a:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801a58e:	4618      	mov	r0, r3
 801a590:	f7ff fcb8 	bl	8019f04 <mg_tls_verify_cert_signature>
 801a594:	4603      	mov	r3, r0
 801a596:	2b00      	cmp	r3, #0
 801a598:	d128      	bne.n	801a5ec <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 801a59a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a59e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a5a2:	4911      	ldr	r1, [pc, #68]	@ (801a5e8 <mg_tls_client_recv_cert+0x3cc>)
 801a5a4:	6818      	ldr	r0, [r3, #0]
 801a5a6:	f7ee fb69 	bl	8008c7c <mg_error>
        return -1;
 801a5aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a5ae:	e0a2      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
 801a5b0:	24000258 	.word	0x24000258
 801a5b4:	0802dcd8 	.word	0x0802dcd8
 801a5b8:	08029e1c 	.word	0x08029e1c
 801a5bc:	0802bf48 	.word	0x0802bf48
 801a5c0:	0802bf60 	.word	0x0802bf60
 801a5c4:	0802bf90 	.word	0x0802bf90
 801a5c8:	0802bfac 	.word	0x0802bfac
 801a5cc:	0802bfd4 	.word	0x0802bfd4
 801a5d0:	0802bff8 	.word	0x0802bff8
 801a5d4:	080135e9 	.word	0x080135e9
 801a5d8:	0802c018 	.word	0x0802c018
 801a5dc:	0802c028 	.word	0x0802c028
 801a5e0:	0802c054 	.word	0x0802c054
 801a5e4:	0802c070 	.word	0x0802c070
 801a5e8:	0802c08c 	.word	0x0802c08c
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 801a5ec:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a5f0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a5f4:	691a      	ldr	r2, [r3, #16]
 801a5f6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a5fa:	691b      	ldr	r3, [r3, #16]
 801a5fc:	429a      	cmp	r2, r3
 801a5fe:	d116      	bne.n	801a62e <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 801a600:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a604:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a608:	68d8      	ldr	r0, [r3, #12]
 801a60a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801a60e:	68d9      	ldr	r1, [r3, #12]
 801a610:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a614:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801a618:	691b      	ldr	r3, [r3, #16]
 801a61a:	461a      	mov	r2, r3
 801a61c:	f00d f88e 	bl	802773c <memcmp>
 801a620:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 801a622:	2b00      	cmp	r3, #0
 801a624:	d103      	bne.n	801a62e <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 801a626:	2301      	movs	r3, #1
 801a628:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 801a62c:	e015      	b.n	801a65a <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 801a62e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801a632:	2b07      	cmp	r3, #7
 801a634:	d10a      	bne.n	801a64c <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 801a636:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a63a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a63e:	4930      	ldr	r1, [pc, #192]	@ (801a700 <mg_tls_client_recv_cert+0x4e4>)
 801a640:	6818      	ldr	r0, [r3, #0]
 801a642:	f7ee fb1b 	bl	8008c7c <mg_error>
      return -1;
 801a646:	f04f 33ff 	mov.w	r3, #4294967295
 801a64a:	e054      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 801a64c:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801a650:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801a654:	429a      	cmp	r2, r3
 801a656:	f4ff aefb 	bcc.w	801a450 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 801a65a:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d135      	bne.n	801a6ce <mg_tls_client_recv_cert+0x4b2>
 801a662:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a666:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d02f      	beq.n	801a6ce <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 801a66e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801a672:	2b00      	cmp	r3, #0
 801a674:	dd12      	ble.n	801a69c <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 801a676:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801a67a:	1e5a      	subs	r2, r3, #1
 801a67c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801a680:	4613      	mov	r3, r2
 801a682:	009b      	lsls	r3, r3, #2
 801a684:	4413      	add	r3, r2
 801a686:	011b      	lsls	r3, r3, #4
 801a688:	440b      	add	r3, r1
 801a68a:	f107 020c 	add.w	r2, r7, #12
 801a68e:	4611      	mov	r1, r2
 801a690:	4618      	mov	r0, r3
 801a692:	f7ff fc37 	bl	8019f04 <mg_tls_verify_cert_signature>
 801a696:	4603      	mov	r3, r0
    if (certnum < 1 ||
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d10a      	bne.n	801a6b2 <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 801a69c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a6a0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a6a4:	4917      	ldr	r1, [pc, #92]	@ (801a704 <mg_tls_client_recv_cert+0x4e8>)
 801a6a6:	6818      	ldr	r0, [r3, #0]
 801a6a8:	f7ee fae8 	bl	8008c7c <mg_error>
      return -1;
 801a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a6b0:	e021      	b.n	801a6f6 <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 801a6b2:	4b15      	ldr	r3, [pc, #84]	@ (801a708 <mg_tls_client_recv_cert+0x4ec>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	2b03      	cmp	r3, #3
 801a6b8:	dd09      	ble.n	801a6ce <mg_tls_client_recv_cert+0x4b2>
 801a6ba:	4b14      	ldr	r3, [pc, #80]	@ (801a70c <mg_tls_client_recv_cert+0x4f0>)
 801a6bc:	f642 7283 	movw	r2, #12163	@ 0x2f83
 801a6c0:	4913      	ldr	r1, [pc, #76]	@ (801a710 <mg_tls_client_recv_cert+0x4f4>)
 801a6c2:	2004      	movs	r0, #4
 801a6c4:	f7f4 f952 	bl	800e96c <mg_log_prefix>
 801a6c8:	4812      	ldr	r0, [pc, #72]	@ (801a714 <mg_tls_client_recv_cert+0x4f8>)
 801a6ca:	f7f4 f99f 	bl	800ea0c <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 801a6ce:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a6d2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a6d6:	6818      	ldr	r0, [r3, #0]
 801a6d8:	f7fd f8a0 	bl	801781c <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 801a6dc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801a6e0:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 801a6e4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801a6e8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	6818      	ldr	r0, [r3, #0]
 801a6f0:	f7fd fdfc 	bl	80182ec <mg_tls_calc_cert_verify_hash>
  return 0;
 801a6f4:	2300      	movs	r3, #0
}
 801a6f6:	4618      	mov	r0, r3
 801a6f8:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	0802c0b0 	.word	0x0802c0b0
 801a704:	0802c0d4 	.word	0x0802c0d4
 801a708:	24000258 	.word	0x24000258
 801a70c:	0802dcd8 	.word	0x0802dcd8
 801a710:	08029e1c 	.word	0x08029e1c
 801a714:	0802c0e8 	.word	0x0802c0e8

0801a718 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 801a718:	b5b0      	push	{r4, r5, r7, lr}
 801a71a:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 801a71e:	af04      	add	r7, sp, #16
 801a720:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a724:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a728:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a72a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a72e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a738:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801a73c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a740:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a744:	6818      	ldr	r0, [r3, #0]
 801a746:	f7fd fcb5 	bl	80180b4 <mg_tls_recv_record>
 801a74a:	4603      	mov	r3, r0
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	da02      	bge.n	801a756 <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 801a750:	f04f 33ff 	mov.w	r3, #4294967295
 801a754:	e1f9      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a756:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a75a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801a762:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a766:	695b      	ldr	r3, [r3, #20]
 801a768:	4413      	add	r3, r2
 801a76a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 801a76e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	2b0f      	cmp	r3, #15
 801a776:	d00e      	beq.n	801a796 <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 801a778:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a77c:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 801a77e:	461a      	mov	r2, r3
 801a780:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a784:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a788:	49cb      	ldr	r1, [pc, #812]	@ (801aab8 <mg_tls_client_recv_cert_verify+0x3a0>)
 801a78a:	6818      	ldr	r0, [r3, #0]
 801a78c:	f7ee fa76 	bl	8008c7c <mg_error>
    return -1;
 801a790:	f04f 33ff 	mov.w	r3, #4294967295
 801a794:	e1d9      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 801a796:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a79a:	699b      	ldr	r3, [r3, #24]
 801a79c:	2b07      	cmp	r3, #7
 801a79e:	d80d      	bhi.n	801a7bc <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 801a7a0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a7a4:	699a      	ldr	r2, [r3, #24]
 801a7a6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a7aa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a7ae:	49c3      	ldr	r1, [pc, #780]	@ (801aabc <mg_tls_client_recv_cert_verify+0x3a4>)
 801a7b0:	6818      	ldr	r0, [r3, #0]
 801a7b2:	f7ee fa63 	bl	8008c7c <mg_error>
             tls->recv_len);
    return -1;
 801a7b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a7ba:	e1c6      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 801a7bc:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a7c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d008      	beq.n	801a7da <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 801a7c8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a7cc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a7d0:	6818      	ldr	r0, [r3, #0]
 801a7d2:	f7fd f823 	bl	801781c <mg_tls_drop_message>
    return 0;
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	e1b7      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 801a7da:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a7de:	3304      	adds	r3, #4
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	b21b      	sxth	r3, r3
 801a7e4:	021b      	lsls	r3, r3, #8
 801a7e6:	b21a      	sxth	r2, r3
 801a7e8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a7ec:	3305      	adds	r3, #5
 801a7ee:	781b      	ldrb	r3, [r3, #0]
 801a7f0:	b21b      	sxth	r3, r3
 801a7f2:	4313      	orrs	r3, r2
 801a7f4:	b21b      	sxth	r3, r3
 801a7f6:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 801a7fa:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a7fe:	3306      	adds	r3, #6
 801a800:	781b      	ldrb	r3, [r3, #0]
 801a802:	b21b      	sxth	r3, r3
 801a804:	021b      	lsls	r3, r3, #8
 801a806:	b21a      	sxth	r2, r3
 801a808:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a80c:	3307      	adds	r3, #7
 801a80e:	781b      	ldrb	r3, [r3, #0]
 801a810:	b21b      	sxth	r3, r3
 801a812:	4313      	orrs	r3, r2
 801a814:	b21b      	sxth	r3, r3
 801a816:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 801a81a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801a81e:	3308      	adds	r3, #8
 801a820:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 801a824:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801a828:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a82c:	699b      	ldr	r3, [r3, #24]
 801a82e:	3b08      	subs	r3, #8
 801a830:	429a      	cmp	r2, r3
 801a832:	d910      	bls.n	801a856 <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 801a834:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 801a838:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a83c:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 801a83e:	3b08      	subs	r3, #8
 801a840:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 801a844:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 801a848:	499d      	ldr	r1, [pc, #628]	@ (801aac0 <mg_tls_client_recv_cert_verify+0x3a8>)
 801a84a:	6800      	ldr	r0, [r0, #0]
 801a84c:	f7ee fa16 	bl	8008c7c <mg_error>
    return -1;
 801a850:	f04f 33ff 	mov.w	r3, #4294967295
 801a854:	e179      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 801a856:	4b9b      	ldr	r3, [pc, #620]	@ (801aac4 <mg_tls_client_recv_cert_verify+0x3ac>)
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	2b03      	cmp	r3, #3
 801a85c:	dd0e      	ble.n	801a87c <mg_tls_client_recv_cert_verify+0x164>
 801a85e:	4b9a      	ldr	r3, [pc, #616]	@ (801aac8 <mg_tls_client_recv_cert_verify+0x3b0>)
 801a860:	f642 72ad 	movw	r2, #12205	@ 0x2fad
 801a864:	4999      	ldr	r1, [pc, #612]	@ (801aacc <mg_tls_client_recv_cert_verify+0x3b4>)
 801a866:	2004      	movs	r0, #4
 801a868:	f7f4 f880 	bl	800e96c <mg_log_prefix>
 801a86c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801a870:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801a874:	4619      	mov	r1, r3
 801a876:	4896      	ldr	r0, [pc, #600]	@ (801aad0 <mg_tls_client_recv_cert_verify+0x3b8>)
 801a878:	f7f4 f8c8 	bl	800ea0c <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 801a87c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801a880:	f640 0204 	movw	r2, #2052	@ 0x804
 801a884:	4293      	cmp	r3, r2
 801a886:	d173      	bne.n	801a970 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801a888:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a88c:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801a890:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801a894:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 801a898:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 801a89c:	4619      	mov	r1, r3
 801a89e:	f7fc fe43 	bl	8017528 <mg_der_parse>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	dd1d      	ble.n	801a8e4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a8a8:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 801a8ac:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801a8b0:	4611      	mov	r1, r2
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	f7fc fe98 	bl	80175e8 <mg_der_next>
 801a8b8:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	dd12      	ble.n	801a8e4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a8be:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801a8c2:	2b02      	cmp	r3, #2
 801a8c4:	d10e      	bne.n	801a8e4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a8c6:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 801a8ca:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801a8ce:	4611      	mov	r1, r2
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f7fc fe89 	bl	80175e8 <mg_der_next>
 801a8d6:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	dd03      	ble.n	801a8e4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801a8dc:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 801a8e0:	2b02      	cmp	r3, #2
 801a8e2:	d00a      	beq.n	801a8fa <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 801a8e4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a8e8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a8ec:	4979      	ldr	r1, [pc, #484]	@ (801aad4 <mg_tls_client_recv_cert_verify+0x3bc>)
 801a8ee:	6818      	ldr	r0, [r3, #0]
 801a8f0:	f7ee f9c4 	bl	8008c7c <mg_error>
      return -1;
 801a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f8:	e127      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801a8fa:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 801a8fe:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 801a902:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 801a906:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 801a90a:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801a90e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a912:	9203      	str	r2, [sp, #12]
 801a914:	f107 0208 	add.w	r2, r7, #8
 801a918:	9202      	str	r2, [sp, #8]
 801a91a:	9301      	str	r3, [sp, #4]
 801a91c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801a920:	9300      	str	r3, [sp, #0]
 801a922:	462b      	mov	r3, r5
 801a924:	4622      	mov	r2, r4
 801a926:	f003 ff2c 	bl	801e782 <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 801a92a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a92e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801a932:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 801a936:	2bbc      	cmp	r3, #188	@ 0xbc
 801a938:	d00a      	beq.n	801a950 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 801a93a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a93e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a942:	4965      	ldr	r1, [pc, #404]	@ (801aad8 <mg_tls_client_recv_cert_verify+0x3c0>)
 801a944:	6818      	ldr	r0, [r3, #0]
 801a946:	f7ee f999 	bl	8008c7c <mg_error>
      return -1;
 801a94a:	f04f 33ff 	mov.w	r3, #4294967295
 801a94e:	e0fc      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 801a950:	4b5c      	ldr	r3, [pc, #368]	@ (801aac4 <mg_tls_client_recv_cert_verify+0x3ac>)
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	2b02      	cmp	r3, #2
 801a956:	f340 80f0 	ble.w	801ab3a <mg_tls_client_recv_cert_verify+0x422>
 801a95a:	4b5b      	ldr	r3, [pc, #364]	@ (801aac8 <mg_tls_client_recv_cert_verify+0x3b0>)
 801a95c:	f642 72c2 	movw	r2, #12226	@ 0x2fc2
 801a960:	495a      	ldr	r1, [pc, #360]	@ (801aacc <mg_tls_client_recv_cert_verify+0x3b4>)
 801a962:	2003      	movs	r0, #3
 801a964:	f7f4 f802 	bl	800e96c <mg_log_prefix>
 801a968:	485c      	ldr	r0, [pc, #368]	@ (801aadc <mg_tls_client_recv_cert_verify+0x3c4>)
 801a96a:	f7f4 f84f 	bl	800ea0c <mg_log>
 801a96e:	e0e4      	b.n	801ab3a <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 801a970:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801a974:	f240 4203 	movw	r2, #1027	@ 0x403
 801a978:	4293      	cmp	r3, r2
 801a97a:	f040 80c8 	bne.w	801ab0e <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 801a97e:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801a982:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801a986:	4619      	mov	r1, r3
 801a988:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 801a98c:	f7fc fea7 	bl	80176de <mg_der_to_tlv>
 801a990:	4603      	mov	r3, r0
 801a992:	2b00      	cmp	r3, #0
 801a994:	da0a      	bge.n	801a9ac <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 801a996:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a99a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a99e:	4950      	ldr	r1, [pc, #320]	@ (801aae0 <mg_tls_client_recv_cert_verify+0x3c8>)
 801a9a0:	6818      	ldr	r0, [r3, #0]
 801a9a2:	f7ee f96b 	bl	8008c7c <mg_error>
      return -1;
 801a9a6:	f04f 33ff 	mov.w	r3, #4294967295
 801a9aa:	e0ce      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 801a9ac:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 801a9b0:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 801a9b4:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7fc fe90 	bl	80176de <mg_der_to_tlv>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	da0a      	bge.n	801a9da <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 801a9c4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801a9c8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801a9cc:	4945      	ldr	r1, [pc, #276]	@ (801aae4 <mg_tls_client_recv_cert_verify+0x3cc>)
 801a9ce:	6818      	ldr	r0, [r3, #0]
 801a9d0:	f7ee f954 	bl	8008c7c <mg_error>
      return -1;
 801a9d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9d8:	e0b7      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 801a9da:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801a9de:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801a9e2:	18d0      	adds	r0, r2, r3
 801a9e4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801a9e8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801a9ec:	1ad3      	subs	r3, r2, r3
 801a9ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801a9f2:	4619      	mov	r1, r3
 801a9f4:	f7fc fe73 	bl	80176de <mg_der_to_tlv>
 801a9f8:	4603      	mov	r3, r0
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	da0a      	bge.n	801aa14 <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 801a9fe:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801aa02:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801aa06:	4938      	ldr	r1, [pc, #224]	@ (801aae8 <mg_tls_client_recv_cert_verify+0x3d0>)
 801aa08:	6818      	ldr	r0, [r3, #0]
 801aa0a:	f7ee f937 	bl	8008c7c <mg_error>
      return -1;
 801aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 801aa12:	e09a      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 801aa14:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801aa18:	2b20      	cmp	r3, #32
 801aa1a:	d90a      	bls.n	801aa32 <mg_tls_client_recv_cert_verify+0x31a>
 801aa1c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801aa20:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801aa24:	3b20      	subs	r3, #32
 801aa26:	4413      	add	r3, r2
 801aa28:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801aa2c:	2320      	movs	r3, #32
 801aa2e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 801aa32:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801aa36:	2b20      	cmp	r3, #32
 801aa38:	d90a      	bls.n	801aa50 <mg_tls_client_recv_cert_verify+0x338>
 801aa3a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801aa3e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801aa42:	3b20      	subs	r3, #32
 801aa44:	4413      	add	r3, r2
 801aa46:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801aa4a:	2320      	movs	r3, #32
 801aa4c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 801aa50:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 801aa54:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 801aa58:	f107 0308 	add.w	r3, r7, #8
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f00c fe7d 	bl	802775c <memmove>
    memmove(sig + 32, s.value, s.len);
 801aa62:	f107 0308 	add.w	r3, r7, #8
 801aa66:	3320      	adds	r3, #32
 801aa68:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801aa6c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 801aa70:	4618      	mov	r0, r3
 801aa72:	f00c fe73 	bl	802775c <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 801aa76:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801aa7a:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 801aa7e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801aa82:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 801aa86:	f004 feab 	bl	801f7e0 <mg_uecc_secp256r1>
 801aa8a:	4602      	mov	r2, r0
 801aa8c:	f107 0308 	add.w	r3, r7, #8
 801aa90:	9200      	str	r2, [sp, #0]
 801aa92:	2220      	movs	r2, #32
 801aa94:	4629      	mov	r1, r5
 801aa96:	4620      	mov	r0, r4
 801aa98:	f006 f83e 	bl	8020b18 <mg_uecc_verify>
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d026      	beq.n	801aaf0 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 801aaa2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801aaa6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801aaaa:	4910      	ldr	r1, [pc, #64]	@ (801aaec <mg_tls_client_recv_cert_verify+0x3d4>)
 801aaac:	6818      	ldr	r0, [r3, #0]
 801aaae:	f7ee f8e5 	bl	8008c7c <mg_error>
      return -1;
 801aab2:	f04f 33ff 	mov.w	r3, #4294967295
 801aab6:	e048      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
 801aab8:	0802c12c 	.word	0x0802c12c
 801aabc:	0802c164 	.word	0x0802c164
 801aac0:	0802c198 	.word	0x0802c198
 801aac4:	24000258 	.word	0x24000258
 801aac8:	0802dcf0 	.word	0x0802dcf0
 801aacc:	08029e1c 	.word	0x08029e1c
 801aad0:	0802c1d0 	.word	0x0802c1d0
 801aad4:	0802c200 	.word	0x0802c200
 801aad8:	0802c214 	.word	0x0802c214
 801aadc:	0802c244 	.word	0x0802c244
 801aae0:	0802c270 	.word	0x0802c270
 801aae4:	0802c2a4 	.word	0x0802c2a4
 801aae8:	0802c2c8 	.word	0x0802c2c8
 801aaec:	0802c2f0 	.word	0x0802c2f0
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 801aaf0:	4b18      	ldr	r3, [pc, #96]	@ (801ab54 <mg_tls_client_recv_cert_verify+0x43c>)
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	2b02      	cmp	r3, #2
 801aaf6:	dd20      	ble.n	801ab3a <mg_tls_client_recv_cert_verify+0x422>
 801aaf8:	4b17      	ldr	r3, [pc, #92]	@ (801ab58 <mg_tls_client_recv_cert_verify+0x440>)
 801aafa:	f642 72df 	movw	r2, #12255	@ 0x2fdf
 801aafe:	4917      	ldr	r1, [pc, #92]	@ (801ab5c <mg_tls_client_recv_cert_verify+0x444>)
 801ab00:	2003      	movs	r0, #3
 801ab02:	f7f3 ff33 	bl	800e96c <mg_log_prefix>
 801ab06:	4816      	ldr	r0, [pc, #88]	@ (801ab60 <mg_tls_client_recv_cert_verify+0x448>)
 801ab08:	f7f3 ff80 	bl	800ea0c <mg_log>
 801ab0c:	e015      	b.n	801ab3a <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 801ab0e:	4b11      	ldr	r3, [pc, #68]	@ (801ab54 <mg_tls_client_recv_cert_verify+0x43c>)
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	dd0e      	ble.n	801ab34 <mg_tls_client_recv_cert_verify+0x41c>
 801ab16:	4b10      	ldr	r3, [pc, #64]	@ (801ab58 <mg_tls_client_recv_cert_verify+0x440>)
 801ab18:	f642 72ea 	movw	r2, #12266	@ 0x2fea
 801ab1c:	490f      	ldr	r1, [pc, #60]	@ (801ab5c <mg_tls_client_recv_cert_verify+0x444>)
 801ab1e:	2001      	movs	r0, #1
 801ab20:	f7f3 ff24 	bl	800e96c <mg_log_prefix>
 801ab24:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801ab28:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801ab2c:	4619      	mov	r1, r3
 801ab2e:	480d      	ldr	r0, [pc, #52]	@ (801ab64 <mg_tls_client_recv_cert_verify+0x44c>)
 801ab30:	f7f3 ff6c 	bl	800ea0c <mg_log>
              siglen));
    return -1;
 801ab34:	f04f 33ff 	mov.w	r3, #4294967295
 801ab38:	e007      	b.n	801ab4a <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 801ab3a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801ab3e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801ab42:	6818      	ldr	r0, [r3, #0]
 801ab44:	f7fc fe6a 	bl	801781c <mg_tls_drop_message>
  return 0;
 801ab48:	2300      	movs	r3, #0
}
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 801ab50:	46bd      	mov	sp, r7
 801ab52:	bdb0      	pop	{r4, r5, r7, pc}
 801ab54:	24000258 	.word	0x24000258
 801ab58:	0802dcf0 	.word	0x0802dcf0
 801ab5c:	08029e1c 	.word	0x08029e1c
 801ab60:	0802c320 	.word	0x0802c320
 801ab64:	0802c34c 	.word	0x0802c34c

0801ab68 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b084      	sub	sp, #16
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ab76:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801ab78:	6878      	ldr	r0, [r7, #4]
 801ab7a:	f7fd fa9b 	bl	80180b4 <mg_tls_recv_record>
 801ab7e:	4603      	mov	r3, r0
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	da02      	bge.n	801ab8a <mg_tls_client_recv_finish+0x22>
    return -1;
 801ab84:	f04f 33ff 	mov.w	r3, #4294967295
 801ab88:	e017      	b.n	801abba <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	695b      	ldr	r3, [r3, #20]
 801ab92:	4413      	add	r3, r2
 801ab94:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 801ab96:	68bb      	ldr	r3, [r7, #8]
 801ab98:	781b      	ldrb	r3, [r3, #0]
 801ab9a:	2b14      	cmp	r3, #20
 801ab9c:	d009      	beq.n	801abb2 <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 801ab9e:	68bb      	ldr	r3, [r7, #8]
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	461a      	mov	r2, r3
 801aba4:	4907      	ldr	r1, [pc, #28]	@ (801abc4 <mg_tls_client_recv_finish+0x5c>)
 801aba6:	6878      	ldr	r0, [r7, #4]
 801aba8:	f7ee f868 	bl	8008c7c <mg_error>
    return -1;
 801abac:	f04f 33ff 	mov.w	r3, #4294967295
 801abb0:	e003      	b.n	801abba <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 801abb2:	6878      	ldr	r0, [r7, #4]
 801abb4:	f7fc fe32 	bl	801781c <mg_tls_drop_message>
  return 0;
 801abb8:	2300      	movs	r3, #0
}
 801abba:	4618      	mov	r0, r3
 801abbc:	3710      	adds	r7, #16
 801abbe:	46bd      	mov	sp, r7
 801abc0:	bd80      	pop	{r7, pc}
 801abc2:	bf00      	nop
 801abc4:	0802c384 	.word	0x0802c384

0801abc8 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 801abc8:	b580      	push	{r7, lr}
 801abca:	b0b4      	sub	sp, #208	@ 0xd0
 801abcc:	af02      	add	r7, sp, #8
 801abce:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801abd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801abda:	4b1a      	ldr	r3, [pc, #104]	@ (801ac44 <mg_tls_client_send_finish+0x7c>)
 801abdc:	60fb      	str	r3, [r7, #12]
 801abde:	f107 0310 	add.w	r3, r7, #16
 801abe2:	2220      	movs	r2, #32
 801abe4:	2100      	movs	r1, #0
 801abe6:	4618      	mov	r0, r3
 801abe8:	f00c fdd2 	bl	8027790 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801abec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801abf0:	f103 0120 	add.w	r1, r3, #32
 801abf4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801abf8:	2270      	movs	r2, #112	@ 0x70
 801abfa:	4618      	mov	r0, r3
 801abfc:	f00c fdae 	bl	802775c <memmove>
  mg_sha256_final(hash, &sha256);
 801ac00:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801ac04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ac08:	4611      	mov	r1, r2
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	f7fa fc5f 	bl	80154ce <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 801ac10:	f107 000c 	add.w	r0, r7, #12
 801ac14:	3004      	adds	r0, #4
 801ac16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801ac1a:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 801ac1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ac22:	2220      	movs	r2, #32
 801ac24:	9200      	str	r2, [sp, #0]
 801ac26:	2220      	movs	r2, #32
 801ac28:	f7fa fda5 	bl	8015776 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801ac2c:	f107 010c 	add.w	r1, r7, #12
 801ac30:	2316      	movs	r3, #22
 801ac32:	2224      	movs	r2, #36	@ 0x24
 801ac34:	6878      	ldr	r0, [r7, #4]
 801ac36:	f7fd f941 	bl	8017ebc <mg_tls_encrypt>
}
 801ac3a:	bf00      	nop
 801ac3c:	37c8      	adds	r7, #200	@ 0xc8
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	bd80      	pop	{r7, pc}
 801ac42:	bf00      	nop
 801ac44:	20000014 	.word	0x20000014

0801ac48 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b0e4      	sub	sp, #400	@ 0x190
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac52:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac56:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ac58:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac5c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ac66:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 801ac6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	2b05      	cmp	r3, #5
 801ac72:	f200 80da 	bhi.w	801ae2a <mg_tls_client_handshake+0x1e2>
 801ac76:	a201      	add	r2, pc, #4	@ (adr r2, 801ac7c <mg_tls_client_handshake+0x34>)
 801ac78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac7c:	0801ac95 	.word	0x0801ac95
 801ac80:	0801acab 	.word	0x0801acab
 801ac84:	0801acc9 	.word	0x0801acc9
 801ac88:	0801ace7 	.word	0x0801ace7
 801ac8c:	0801ad05 	.word	0x0801ad05
 801ac90:	0801ad23 	.word	0x0801ad23
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 801ac94:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ac98:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ac9c:	6818      	ldr	r0, [r3, #0]
 801ac9e:	f7fe f90b 	bl	8018eb8 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801aca2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801aca6:	2201      	movs	r2, #1
 801aca8:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 801acaa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801acae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801acb2:	6818      	ldr	r0, [r3, #0]
 801acb4:	f7fe fae2 	bl	801927c <mg_tls_client_recv_hello>
 801acb8:	4603      	mov	r3, r0
 801acba:	2b00      	cmp	r3, #0
 801acbc:	f2c0 80c2 	blt.w	801ae44 <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 801acc0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801acc4:	2202      	movs	r2, #2
 801acc6:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 801acc8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801accc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801acd0:	6818      	ldr	r0, [r3, #0]
 801acd2:	f7fe fc0d 	bl	80194f0 <mg_tls_client_recv_ext>
 801acd6:	4603      	mov	r3, r0
 801acd8:	2b00      	cmp	r3, #0
 801acda:	f2c0 80b5 	blt.w	801ae48 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 801acde:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ace2:	2203      	movs	r2, #3
 801ace4:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 801ace6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801acea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801acee:	6818      	ldr	r0, [r3, #0]
 801acf0:	f7ff fa94 	bl	801a21c <mg_tls_client_recv_cert>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	f2c0 80a8 	blt.w	801ae4c <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 801acfc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad00:	2204      	movs	r2, #4
 801ad02:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 801ad04:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad08:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad0c:	6818      	ldr	r0, [r3, #0]
 801ad0e:	f7ff fd03 	bl	801a718 <mg_tls_client_recv_cert_verify>
 801ad12:	4603      	mov	r3, r0
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	f2c0 809b 	blt.w	801ae50 <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 801ad1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad1e:	2205      	movs	r2, #5
 801ad20:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 801ad22:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad26:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad2a:	6818      	ldr	r0, [r3, #0]
 801ad2c:	f7ff ff1c 	bl	801ab68 <mg_tls_client_recv_finish>
 801ad30:	4603      	mov	r3, r0
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	f2c0 808e 	blt.w	801ae54 <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 801ad38:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d04b      	beq.n	801addc <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 801ad44:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad48:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 801ad4c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801ad50:	22c0      	movs	r2, #192	@ 0xc0
 801ad52:	4619      	mov	r1, r3
 801ad54:	f00c fe55 	bl	8027a02 <memcpy>
        mg_tls_generate_application_keys(c);
 801ad58:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad5c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad60:	6818      	ldr	r0, [r3, #0]
 801ad62:	f7fc ff93 	bl	8017c8c <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 801ad66:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad6a:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 801ad6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad72:	4610      	mov	r0, r2
 801ad74:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801ad78:	22c0      	movs	r2, #192	@ 0xc0
 801ad7a:	4619      	mov	r1, r3
 801ad7c:	f00c fe41 	bl	8027a02 <memcpy>
        tls->enc = hs_keys;
 801ad80:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ad84:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801ad88:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 801ad8c:	22c0      	movs	r2, #192	@ 0xc0
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f00c fe37 	bl	8027a02 <memcpy>
        mg_tls_server_send_cert(c);
 801ad94:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ad98:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ad9c:	6818      	ldr	r0, [r3, #0]
 801ad9e:	f7fd fda9 	bl	80188f4 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801ada2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ada6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801adaa:	2101      	movs	r1, #1
 801adac:	6818      	ldr	r0, [r3, #0]
 801adae:	f7fd fec7 	bl	8018b40 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801adb2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801adb6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801adba:	6818      	ldr	r0, [r3, #0]
 801adbc:	f7ff ff04 	bl	801abc8 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 801adc0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801adc4:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801adc8:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 801adcc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801add0:	4611      	mov	r1, r2
 801add2:	22c0      	movs	r2, #192	@ 0xc0
 801add4:	4618      	mov	r0, r3
 801add6:	f00c fe14 	bl	8027a02 <memcpy>
 801adda:	e00d      	b.n	801adf8 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 801addc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ade0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ade4:	6818      	ldr	r0, [r3, #0]
 801ade6:	f7ff feef 	bl	801abc8 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 801adea:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801adee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801adf2:	6818      	ldr	r0, [r3, #0]
 801adf4:	f7fc ff4a 	bl	8017c8c <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 801adf8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801adfc:	2206      	movs	r2, #6
 801adfe:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801ae00:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ae04:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ae08:	681a      	ldr	r2, [r3, #0]
 801ae0a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801ae0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ae12:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 801ae16:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ae1a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ae1e:	2200      	movs	r2, #0
 801ae20:	2106      	movs	r1, #6
 801ae22:	6818      	ldr	r0, [r3, #0]
 801ae24:	f7ed ff0a 	bl	8008c3c <mg_call>
      break;
 801ae28:	e015      	b.n	801ae56 <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 801ae2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ae2e:	781b      	ldrb	r3, [r3, #0]
 801ae30:	461a      	mov	r2, r3
 801ae32:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ae36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ae3a:	4909      	ldr	r1, [pc, #36]	@ (801ae60 <mg_tls_client_handshake+0x218>)
 801ae3c:	6818      	ldr	r0, [r3, #0]
 801ae3e:	f7ed ff1d 	bl	8008c7c <mg_error>
      break;
 801ae42:	e008      	b.n	801ae56 <mg_tls_client_handshake+0x20e>
        break;
 801ae44:	bf00      	nop
 801ae46:	e006      	b.n	801ae56 <mg_tls_client_handshake+0x20e>
        break;
 801ae48:	bf00      	nop
 801ae4a:	e004      	b.n	801ae56 <mg_tls_client_handshake+0x20e>
        break;
 801ae4c:	bf00      	nop
 801ae4e:	e002      	b.n	801ae56 <mg_tls_client_handshake+0x20e>
        break;
 801ae50:	bf00      	nop
 801ae52:	e000      	b.n	801ae56 <mg_tls_client_handshake+0x20e>
        break;
 801ae54:	bf00      	nop
  }
}
 801ae56:	bf00      	nop
 801ae58:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bd80      	pop	{r7, pc}
 801ae60:	0802c3b0 	.word	0x0802c3b0

0801ae64 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b084      	sub	sp, #16
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ae72:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	2b07      	cmp	r3, #7
 801ae7a:	d002      	beq.n	801ae82 <mg_tls_server_handshake+0x1e>
 801ae7c:	2b08      	cmp	r3, #8
 801ae7e:	d01c      	beq.n	801aeba <mg_tls_server_handshake+0x56>
 801ae80:	e02f      	b.n	801aee2 <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 801ae82:	6878      	ldr	r0, [r7, #4]
 801ae84:	f7fd fad4 	bl	8018430 <mg_tls_server_recv_hello>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	db31      	blt.n	801aef2 <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 801ae8e:	6878      	ldr	r0, [r7, #4]
 801ae90:	f7fd fc5a 	bl	8018748 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f7fc fda9 	bl	80179ec <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 801ae9a:	6878      	ldr	r0, [r7, #4]
 801ae9c:	f7fd fd08 	bl	80188b0 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f7fd fd27 	bl	80188f4 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 801aea6:	2100      	movs	r1, #0
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f7fd fe49 	bl	8018b40 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f7fd ff7a 	bl	8018da8 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	2208      	movs	r2, #8
 801aeb8:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 801aeba:	6878      	ldr	r0, [r7, #4]
 801aebc:	f7fd ffbc 	bl	8018e38 <mg_tls_server_recv_finish>
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	db17      	blt.n	801aef6 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 801aec6:	6878      	ldr	r0, [r7, #4]
 801aec8:	f7fc fee0 	bl	8017c8c <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	2209      	movs	r2, #9
 801aed0:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801aed2:	687a      	ldr	r2, [r7, #4]
 801aed4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801aed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801aedc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 801aee0:	e00a      	b.n	801aef8 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	781b      	ldrb	r3, [r3, #0]
 801aee6:	461a      	mov	r2, r3
 801aee8:	4905      	ldr	r1, [pc, #20]	@ (801af00 <mg_tls_server_handshake+0x9c>)
 801aeea:	6878      	ldr	r0, [r7, #4]
 801aeec:	f7ed fec6 	bl	8008c7c <mg_error>
      break;
 801aef0:	e002      	b.n	801aef8 <mg_tls_server_handshake+0x94>
        return;
 801aef2:	bf00      	nop
 801aef4:	e000      	b.n	801aef8 <mg_tls_server_handshake+0x94>
        return;
 801aef6:	bf00      	nop
  }
}
 801aef8:	3710      	adds	r7, #16
 801aefa:	46bd      	mov	sp, r7
 801aefc:	bd80      	pop	{r7, pc}
 801aefe:	bf00      	nop
 801af00:	0802c3cc 	.word	0x0802c3cc

0801af04 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801af04:	b580      	push	{r7, lr}
 801af06:	b084      	sub	sp, #16
 801af08:	af00      	add	r7, sp, #0
 801af0a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801af12:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801af1a:	f003 0302 	and.w	r3, r3, #2
 801af1e:	b2db      	uxtb	r3, r3
 801af20:	2b00      	cmp	r3, #0
 801af22:	d003      	beq.n	801af2c <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7ff fe8f 	bl	801ac48 <mg_tls_client_handshake>
 801af2a:	e00a      	b.n	801af42 <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 801af2c:	6878      	ldr	r0, [r7, #4]
 801af2e:	f7ff ff99 	bl	801ae64 <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 801af32:	e006      	b.n	801af42 <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	3304      	adds	r3, #4
 801af38:	68ba      	ldr	r2, [r7, #8]
 801af3a:	2100      	movs	r1, #0
 801af3c:	4618      	mov	r0, r3
 801af3e:	f7f2 fcfd 	bl	800d93c <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d00b      	beq.n	801af62 <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	6859      	ldr	r1, [r3, #4]
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	68db      	ldr	r3, [r3, #12]
 801af52:	461a      	mov	r2, r3
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	f7f6 f901 	bl	801115c <mg_io_send>
 801af5a:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801af5c:	68bb      	ldr	r3, [r7, #8]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	dce8      	bgt.n	801af34 <mg_tls_handshake+0x30>
  } // if last chunk fails to be sent, it will be sent with first app data,
    // otherwise, it needs to be flushed
}
 801af62:	bf00      	nop
 801af64:	3710      	adds	r7, #16
 801af66:	46bd      	mov	sp, r7
 801af68:	bd80      	pop	{r7, pc}
	...

0801af6c <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 801af6c:	b590      	push	{r4, r7, lr}
 801af6e:	b09b      	sub	sp, #108	@ 0x6c
 801af70:	af02      	add	r7, sp, #8
 801af72:	f107 0410 	add.w	r4, r7, #16
 801af76:	e884 0003 	stmia.w	r4, {r0, r1}
 801af7a:	f107 0108 	add.w	r1, r7, #8
 801af7e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 801af82:	2300      	movs	r3, #0
 801af84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801af86:	2300      	movs	r3, #0
 801af88:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801af8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801af8e:	4946      	ldr	r1, [pc, #280]	@ (801b0a8 <mg_parse_pem+0x13c>)
 801af90:	4618      	mov	r0, r3
 801af92:	f7fb fceb 	bl	801696c <mg_str_s>
 801af96:	f107 0318 	add.w	r3, r7, #24
 801af9a:	9300      	str	r3, [sp, #0]
 801af9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801afa0:	cb0c      	ldmia	r3, {r2, r3}
 801afa2:	f107 0110 	add.w	r1, r7, #16
 801afa6:	c903      	ldmia	r1, {r0, r1}
 801afa8:	f7fb fdea 	bl	8016b80 <mg_match>
 801afac:	4603      	mov	r3, r0
 801afae:	f083 0301 	eor.w	r3, r3, #1
 801afb2:	b2db      	uxtb	r3, r3
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d00f      	beq.n	801afd8 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 801afb8:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801afba:	4638      	mov	r0, r7
 801afbc:	f107 0310 	add.w	r3, r7, #16
 801afc0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801afc4:	f7fb fd1c 	bl	8016a00 <mg_strdup>
 801afc8:	4622      	mov	r2, r4
 801afca:	463b      	mov	r3, r7
 801afcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801afd0:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 801afd4:	2300      	movs	r3, #0
 801afd6:	e062      	b.n	801b09e <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 801afd8:	f107 0308 	add.w	r3, r7, #8
 801afdc:	cb0c      	ldmia	r3, {r2, r3}
 801afde:	f107 0120 	add.w	r1, r7, #32
 801afe2:	c903      	ldmia	r1, {r0, r1}
 801afe4:	f7fb fd43 	bl	8016a6e <mg_strcmp>
 801afe8:	4603      	mov	r3, r0
 801afea:	2b00      	cmp	r3, #0
 801afec:	d10a      	bne.n	801b004 <mg_parse_pem+0x98>
 801afee:	f107 0308 	add.w	r3, r7, #8
 801aff2:	cb0c      	ldmia	r3, {r2, r3}
 801aff4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801aff8:	c903      	ldmia	r1, {r0, r1}
 801affa:	f7fb fd38 	bl	8016a6e <mg_strcmp>
 801affe:	4603      	mov	r3, r0
 801b000:	2b00      	cmp	r3, #0
 801b002:	d002      	beq.n	801b00a <mg_parse_pem+0x9e>
    return -1;  // bad label
 801b004:	f04f 33ff 	mov.w	r3, #4294967295
 801b008:	e049      	b.n	801b09e <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801b00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b00c:	4619      	mov	r1, r3
 801b00e:	2001      	movs	r0, #1
 801b010:	f00a fd10 	bl	8025a34 <calloc>
 801b014:	4603      	mov	r3, r0
 801b016:	653b      	str	r3, [r7, #80]	@ 0x50
 801b018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d102      	bne.n	801b024 <mg_parse_pem+0xb8>
    return -1;
 801b01e:	f04f 33ff 	mov.w	r3, #4294967295
 801b022:	e03c      	b.n	801b09e <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801b024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b026:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b028:	e01c      	b.n	801b064 <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801b02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b02c:	781b      	ldrb	r3, [r3, #0]
 801b02e:	2b20      	cmp	r3, #32
 801b030:	d014      	beq.n	801b05c <mg_parse_pem+0xf0>
 801b032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b034:	781b      	ldrb	r3, [r3, #0]
 801b036:	2b0a      	cmp	r3, #10
 801b038:	d010      	beq.n	801b05c <mg_parse_pem+0xf0>
 801b03a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b03c:	781b      	ldrb	r3, [r3, #0]
 801b03e:	2b0d      	cmp	r3, #13
 801b040:	d00c      	beq.n	801b05c <mg_parse_pem+0xf0>
 801b042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b044:	781b      	ldrb	r3, [r3, #0]
 801b046:	2b09      	cmp	r3, #9
 801b048:	d008      	beq.n	801b05c <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 801b04a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b04c:	1c5a      	adds	r2, r3, #1
 801b04e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801b050:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b052:	4413      	add	r3, r2
 801b054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b056:	7812      	ldrb	r2, [r2, #0]
 801b058:	701a      	strb	r2, [r3, #0]
 801b05a:	e000      	b.n	801b05e <mg_parse_pem+0xf2>
      continue;
 801b05c:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801b05e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b060:	3301      	adds	r3, #1
 801b062:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b068:	4413      	add	r3, r2
 801b06a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b06c:	429a      	cmp	r2, r3
 801b06e:	d3dc      	bcc.n	801b02a <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 801b070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b072:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b074:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801b076:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801b078:	f7ec ff5c 	bl	8007f34 <mg_base64_decode>
 801b07c:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 801b07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b080:	2b00      	cmp	r3, #0
 801b082:	d105      	bne.n	801b090 <mg_parse_pem+0x124>
    free(s);
 801b084:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801b086:	f00a fcf9 	bl	8025a7c <free>
    return -1;
 801b08a:	f04f 33ff 	mov.w	r3, #4294967295
 801b08e:	e006      	b.n	801b09e <mg_parse_pem+0x132>
  }
  der->buf = s;
 801b090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b092:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b094:	601a      	str	r2, [r3, #0]
  der->len = m;
 801b096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b09a:	605a      	str	r2, [r3, #4]
  return 0;
 801b09c:	2300      	movs	r3, #0
}
 801b09e:	4618      	mov	r0, r3
 801b0a0:	3764      	adds	r7, #100	@ 0x64
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	bd90      	pop	{r4, r7, pc}
 801b0a6:	bf00      	nop
 801b0a8:	0802c3e8 	.word	0x0802c3e8

0801b0ac <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b090      	sub	sp, #64	@ 0x40
 801b0b0:	af02      	add	r7, sp, #8
 801b0b2:	6078      	str	r0, [r7, #4]
 801b0b4:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 801b0b6:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 801b0ba:	2001      	movs	r0, #1
 801b0bc:	f00a fcba 	bl	8025a34 <calloc>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 801b0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d104      	bne.n	801b0d4 <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 801b0ca:	49a5      	ldr	r1, [pc, #660]	@ (801b360 <mg_tls_init+0x2b4>)
 801b0cc:	6878      	ldr	r0, [r7, #4]
 801b0ce:	f7ed fdd5 	bl	8008c7c <mg_error>
    return;
 801b0d2:	e141      	b.n	801b358 <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801b0da:	f003 0302 	and.w	r3, r3, #2
 801b0de:	b2db      	uxtb	r3, r3
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d001      	beq.n	801b0e8 <mg_tls_init+0x3c>
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	e000      	b.n	801b0ea <mg_tls_init+0x3e>
 801b0e8:	2207      	movs	r2, #7
  tls->state =
 801b0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0ec:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	6a1a      	ldr	r2, [r3, #32]
 801b0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b0f4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b0fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 801b100:	687a      	ldr	r2, [r7, #4]
 801b102:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b10a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801b114:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801b118:	b2d9      	uxtb	r1, r3
 801b11a:	687a      	ldr	r2, [r7, #4]
 801b11c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801b120:	f361 1386 	bfi	r3, r1, #6, #1
 801b124:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 801b128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b12a:	3320      	adds	r3, #32
 801b12c:	4618      	mov	r0, r3
 801b12e:	f7f9 ff51 	bl	8014fd4 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	69db      	ldr	r3, [r3, #28]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d018      	beq.n	801b16c <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801b13a:	683b      	ldr	r3, [r7, #0]
 801b13c:	69db      	ldr	r3, [r3, #28]
 801b13e:	2bfc      	cmp	r3, #252	@ 0xfc
 801b140:	d904      	bls.n	801b14c <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 801b142:	4988      	ldr	r1, [pc, #544]	@ (801b364 <mg_tls_init+0x2b8>)
 801b144:	6878      	ldr	r0, [r7, #4]
 801b146:	f7ed fd99 	bl	8008c7c <mg_error>
      return;
 801b14a:	e105      	b.n	801b358 <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 801b14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b14e:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 801b152:	683b      	ldr	r3, [r7, #0]
 801b154:	699b      	ldr	r3, [r3, #24]
 801b156:	22fd      	movs	r2, #253	@ 0xfd
 801b158:	4619      	mov	r1, r3
 801b15a:	f00c fb40 	bl	80277de <strncpy>
    tls->hostname[opts->name.len] = 0;
 801b15e:	683b      	ldr	r3, [r7, #0]
 801b160:	69db      	ldr	r3, [r3, #28]
 801b162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b164:	4413      	add	r3, r2
 801b166:	2200      	movs	r2, #0
 801b168:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 801b16c:	683b      	ldr	r3, [r7, #0]
 801b16e:	685b      	ldr	r3, [r3, #4]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d023      	beq.n	801b1bc <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 801b174:	f107 0314 	add.w	r3, r7, #20
 801b178:	497b      	ldr	r1, [pc, #492]	@ (801b368 <mg_tls_init+0x2bc>)
 801b17a:	4618      	mov	r0, r3
 801b17c:	f7fb fbf6 	bl	801696c <mg_str_s>
 801b180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b182:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801b186:	6839      	ldr	r1, [r7, #0]
 801b188:	9300      	str	r3, [sp, #0]
 801b18a:	f107 0314 	add.w	r3, r7, #20
 801b18e:	cb0c      	ldmia	r3, {r2, r3}
 801b190:	c903      	ldmia	r1, {r0, r1}
 801b192:	f7ff feeb 	bl	801af6c <mg_parse_pem>
 801b196:	4603      	mov	r3, r0
 801b198:	2b00      	cmp	r3, #0
 801b19a:	da0f      	bge.n	801b1bc <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 801b19c:	4b73      	ldr	r3, [pc, #460]	@ (801b36c <mg_tls_init+0x2c0>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	f340 80d0 	ble.w	801b346 <mg_tls_init+0x29a>
 801b1a6:	4b72      	ldr	r3, [pc, #456]	@ (801b370 <mg_tls_init+0x2c4>)
 801b1a8:	f243 02b6 	movw	r2, #12470	@ 0x30b6
 801b1ac:	4971      	ldr	r1, [pc, #452]	@ (801b374 <mg_tls_init+0x2c8>)
 801b1ae:	2001      	movs	r0, #1
 801b1b0:	f7f3 fbdc 	bl	800e96c <mg_log_prefix>
 801b1b4:	4870      	ldr	r0, [pc, #448]	@ (801b378 <mg_tls_init+0x2cc>)
 801b1b6:	f7f3 fc29 	bl	800ea0c <mg_log>
      return;
 801b1ba:	e0c4      	b.n	801b346 <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 801b1bc:	683b      	ldr	r3, [r7, #0]
 801b1be:	689b      	ldr	r3, [r3, #8]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d10f      	bne.n	801b1e4 <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 801b1c4:	4b69      	ldr	r3, [pc, #420]	@ (801b36c <mg_tls_init+0x2c0>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	2b03      	cmp	r3, #3
 801b1ca:	f340 80be 	ble.w	801b34a <mg_tls_init+0x29e>
 801b1ce:	4b68      	ldr	r3, [pc, #416]	@ (801b370 <mg_tls_init+0x2c4>)
 801b1d0:	f243 02bc 	movw	r2, #12476	@ 0x30bc
 801b1d4:	4967      	ldr	r1, [pc, #412]	@ (801b374 <mg_tls_init+0x2c8>)
 801b1d6:	2004      	movs	r0, #4
 801b1d8:	f7f3 fbc8 	bl	800e96c <mg_log_prefix>
 801b1dc:	4867      	ldr	r0, [pc, #412]	@ (801b37c <mg_tls_init+0x2d0>)
 801b1de:	f7f3 fc15 	bl	800ea0c <mg_log>
    return;
 801b1e2:	e0b2      	b.n	801b34a <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801b1e4:	f107 031c 	add.w	r3, r7, #28
 801b1e8:	495f      	ldr	r1, [pc, #380]	@ (801b368 <mg_tls_init+0x2bc>)
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	f7fb fbbe 	bl	801696c <mg_str_s>
 801b1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b1f2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801b1f6:	6839      	ldr	r1, [r7, #0]
 801b1f8:	9300      	str	r3, [sp, #0]
 801b1fa:	f107 031c 	add.w	r3, r7, #28
 801b1fe:	cb0c      	ldmia	r3, {r2, r3}
 801b200:	3108      	adds	r1, #8
 801b202:	c903      	ldmia	r1, {r0, r1}
 801b204:	f7ff feb2 	bl	801af6c <mg_parse_pem>
 801b208:	4603      	mov	r3, r0
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	da0f      	bge.n	801b22e <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 801b20e:	4b57      	ldr	r3, [pc, #348]	@ (801b36c <mg_tls_init+0x2c0>)
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	2b00      	cmp	r3, #0
 801b214:	f340 809b 	ble.w	801b34e <mg_tls_init+0x2a2>
 801b218:	4b55      	ldr	r3, [pc, #340]	@ (801b370 <mg_tls_init+0x2c4>)
 801b21a:	f243 02c2 	movw	r2, #12482	@ 0x30c2
 801b21e:	4955      	ldr	r1, [pc, #340]	@ (801b374 <mg_tls_init+0x2c8>)
 801b220:	2001      	movs	r0, #1
 801b222:	f7f3 fba3 	bl	800e96c <mg_log_prefix>
 801b226:	4854      	ldr	r0, [pc, #336]	@ (801b378 <mg_tls_init+0x2cc>)
 801b228:	f7f3 fbf0 	bl	800ea0c <mg_log>
    return;
 801b22c:	e08f      	b.n	801b34e <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801b22e:	683b      	ldr	r3, [r7, #0]
 801b230:	691b      	ldr	r3, [r3, #16]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d104      	bne.n	801b240 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 801b236:	4952      	ldr	r1, [pc, #328]	@ (801b380 <mg_tls_init+0x2d4>)
 801b238:	6878      	ldr	r0, [r7, #4]
 801b23a:	f7ed fd1f 	bl	8008c7c <mg_error>
    return;
 801b23e:	e08b      	b.n	801b358 <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 801b240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b244:	494f      	ldr	r1, [pc, #316]	@ (801b384 <mg_tls_init+0x2d8>)
 801b246:	4618      	mov	r0, r3
 801b248:	f7fb fb90 	bl	801696c <mg_str_s>
 801b24c:	6839      	ldr	r1, [r7, #0]
 801b24e:	f107 030c 	add.w	r3, r7, #12
 801b252:	9300      	str	r3, [sp, #0]
 801b254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801b258:	cb0c      	ldmia	r3, {r2, r3}
 801b25a:	3110      	adds	r1, #16
 801b25c:	c903      	ldmia	r1, {r0, r1}
 801b25e:	f7ff fe85 	bl	801af6c <mg_parse_pem>
 801b262:	4603      	mov	r3, r0
 801b264:	2b00      	cmp	r3, #0
 801b266:	d150      	bne.n	801b30a <mg_tls_init+0x25e>
    if (key.len < 39) {
 801b268:	693b      	ldr	r3, [r7, #16]
 801b26a:	2b26      	cmp	r3, #38	@ 0x26
 801b26c:	d80e      	bhi.n	801b28c <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 801b26e:	4b3f      	ldr	r3, [pc, #252]	@ (801b36c <mg_tls_init+0x2c0>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	2b00      	cmp	r3, #0
 801b274:	dd6d      	ble.n	801b352 <mg_tls_init+0x2a6>
 801b276:	4b3e      	ldr	r3, [pc, #248]	@ (801b370 <mg_tls_init+0x2c4>)
 801b278:	f243 02ce 	movw	r2, #12494	@ 0x30ce
 801b27c:	493d      	ldr	r1, [pc, #244]	@ (801b374 <mg_tls_init+0x2c8>)
 801b27e:	2001      	movs	r0, #1
 801b280:	f7f3 fb74 	bl	800e96c <mg_log_prefix>
 801b284:	4840      	ldr	r0, [pc, #256]	@ (801b388 <mg_tls_init+0x2dc>)
 801b286:	f7f3 fbc1 	bl	800ea0c <mg_log>
      return;
 801b28a:	e062      	b.n	801b352 <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	781b      	ldrb	r3, [r3, #0]
 801b290:	2b30      	cmp	r3, #48	@ 0x30
 801b292:	d105      	bne.n	801b2a0 <mg_tls_init+0x1f4>
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	3301      	adds	r3, #1
 801b298:	781b      	ldrb	r3, [r3, #0]
 801b29a:	b25b      	sxtb	r3, r3
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	da0e      	bge.n	801b2be <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 801b2a0:	4b32      	ldr	r3, [pc, #200]	@ (801b36c <mg_tls_init+0x2c0>)
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	dd56      	ble.n	801b356 <mg_tls_init+0x2aa>
 801b2a8:	4b31      	ldr	r3, [pc, #196]	@ (801b370 <mg_tls_init+0x2c4>)
 801b2aa:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 801b2ae:	4931      	ldr	r1, [pc, #196]	@ (801b374 <mg_tls_init+0x2c8>)
 801b2b0:	2001      	movs	r0, #1
 801b2b2:	f7f3 fb5b 	bl	800e96c <mg_log_prefix>
 801b2b6:	4835      	ldr	r0, [pc, #212]	@ (801b38c <mg_tls_init+0x2e0>)
 801b2b8:	f7f3 fba8 	bl	800ea0c <mg_log>
      return;
 801b2bc:	e04b      	b.n	801b356 <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	3302      	adds	r3, #2
 801b2c2:	2205      	movs	r2, #5
 801b2c4:	4932      	ldr	r1, [pc, #200]	@ (801b390 <mg_tls_init+0x2e4>)
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f00c fa38 	bl	802773c <memcmp>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d00d      	beq.n	801b2ee <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801b2d2:	4b26      	ldr	r3, [pc, #152]	@ (801b36c <mg_tls_init+0x2c0>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	dd09      	ble.n	801b2ee <mg_tls_init+0x242>
 801b2da:	4b25      	ldr	r3, [pc, #148]	@ (801b370 <mg_tls_init+0x2c4>)
 801b2dc:	f243 02d8 	movw	r2, #12504	@ 0x30d8
 801b2e0:	4924      	ldr	r1, [pc, #144]	@ (801b374 <mg_tls_init+0x2c8>)
 801b2e2:	2001      	movs	r0, #1
 801b2e4:	f7f3 fb42 	bl	800e96c <mg_log_prefix>
 801b2e8:	482a      	ldr	r0, [pc, #168]	@ (801b394 <mg_tls_init+0x2e8>)
 801b2ea:	f7f3 fb8f 	bl	800ea0c <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 801b2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b2f0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	3307      	adds	r3, #7
 801b2f8:	2220      	movs	r2, #32
 801b2fa:	4619      	mov	r1, r3
 801b2fc:	f00c fa2e 	bl	802775c <memmove>
    free((void *) key.buf);
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	4618      	mov	r0, r3
 801b304:	f00a fbba 	bl	8025a7c <free>
 801b308:	e026      	b.n	801b358 <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 801b30a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801b30e:	4922      	ldr	r1, [pc, #136]	@ (801b398 <mg_tls_init+0x2ec>)
 801b310:	4618      	mov	r0, r3
 801b312:	f7fb fb2b 	bl	801696c <mg_str_s>
 801b316:	6839      	ldr	r1, [r7, #0]
 801b318:	f107 030c 	add.w	r3, r7, #12
 801b31c:	9300      	str	r3, [sp, #0]
 801b31e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801b322:	cb0c      	ldmia	r3, {r2, r3}
 801b324:	3110      	adds	r1, #16
 801b326:	c903      	ldmia	r1, {r0, r1}
 801b328:	f7ff fe20 	bl	801af6c <mg_parse_pem>
 801b32c:	4603      	mov	r3, r0
 801b32e:	2b00      	cmp	r3, #0
 801b330:	d104      	bne.n	801b33c <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 801b332:	491a      	ldr	r1, [pc, #104]	@ (801b39c <mg_tls_init+0x2f0>)
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	f7ed fca1 	bl	8008c7c <mg_error>
 801b33a:	e00d      	b.n	801b358 <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 801b33c:	4918      	ldr	r1, [pc, #96]	@ (801b3a0 <mg_tls_init+0x2f4>)
 801b33e:	6878      	ldr	r0, [r7, #4]
 801b340:	f7ed fc9c 	bl	8008c7c <mg_error>
 801b344:	e008      	b.n	801b358 <mg_tls_init+0x2ac>
      return;
 801b346:	bf00      	nop
 801b348:	e006      	b.n	801b358 <mg_tls_init+0x2ac>
    return;
 801b34a:	bf00      	nop
 801b34c:	e004      	b.n	801b358 <mg_tls_init+0x2ac>
    return;
 801b34e:	bf00      	nop
 801b350:	e002      	b.n	801b358 <mg_tls_init+0x2ac>
      return;
 801b352:	bf00      	nop
 801b354:	e000      	b.n	801b358 <mg_tls_init+0x2ac>
      return;
 801b356:	bf00      	nop
  }
}
 801b358:	3738      	adds	r7, #56	@ 0x38
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}
 801b35e:	bf00      	nop
 801b360:	0802c40c 	.word	0x0802c40c
 801b364:	0802c414 	.word	0x0802c414
 801b368:	0802c428 	.word	0x0802c428
 801b36c:	24000258 	.word	0x24000258
 801b370:	0802dd10 	.word	0x0802dd10
 801b374:	08029e1c 	.word	0x08029e1c
 801b378:	0802c434 	.word	0x0802c434
 801b37c:	0802c450 	.word	0x0802c450
 801b380:	0802c468 	.word	0x0802c468
 801b384:	0802c494 	.word	0x0802c494
 801b388:	0802c4a4 	.word	0x0802c4a4
 801b38c:	0802c4c0 	.word	0x0802c4c0
 801b390:	0802c4e4 	.word	0x0802c4e4
 801b394:	0802c4ec 	.word	0x0802c4ec
 801b398:	0802c50c 	.word	0x0802c50c
 801b39c:	0802c518 	.word	0x0802c518
 801b3a0:	0802c544 	.word	0x0802c544

0801b3a4 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b084      	sub	sp, #16
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b3b2:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d010      	beq.n	801b3dc <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	3304      	adds	r3, #4
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f7f2 fb07 	bl	800d9d2 <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	f00a fb56 	bl	8025a7c <free>
    free((void *) tls->ca_der.buf);
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	f00a fb50 	bl	8025a7c <free>
  }
  free(c->tls);
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	f00a fb4a 	bl	8025a7c <free>
  c->tls = NULL;
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 801b3f0:	bf00      	nop
 801b3f2:	3710      	adds	r7, #16
 801b3f4:	46bd      	mov	sp, r7
 801b3f6:	bd80      	pop	{r7, pc}

0801b3f8 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 801b3f8:	b590      	push	{r4, r7, lr}
 801b3fa:	b08d      	sub	sp, #52	@ 0x34
 801b3fc:	af04      	add	r7, sp, #16
 801b3fe:	60f8      	str	r0, [r7, #12]
 801b400:	60b9      	str	r1, [r7, #8]
 801b402:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b40a:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 801b40c:	f06f 0301 	mvn.w	r3, #1
 801b410:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801b418:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801b41c:	b2db      	uxtb	r3, r3
 801b41e:	2b00      	cmp	r3, #0
 801b420:	bf14      	ite	ne
 801b422:	2301      	movne	r3, #1
 801b424:	2300      	moveq	r3, #0
 801b426:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 801b428:	7dfb      	ldrb	r3, [r7, #23]
 801b42a:	f083 0301 	eor.w	r3, r3, #1
 801b42e:	b2db      	uxtb	r3, r3
 801b430:	2b00      	cmp	r3, #0
 801b432:	d01b      	beq.n	801b46c <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b43a:	d902      	bls.n	801b442 <mg_tls_send+0x4a>
 801b43c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b440:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b448:	d902      	bls.n	801b450 <mg_tls_send+0x58>
 801b44a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801b44e:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 801b450:	2317      	movs	r3, #23
 801b452:	687a      	ldr	r2, [r7, #4]
 801b454:	68b9      	ldr	r1, [r7, #8]
 801b456:	68f8      	ldr	r0, [r7, #12]
 801b458:	f7fc fd30 	bl	8017ebc <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 801b45c:	e006      	b.n	801b46c <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801b45e:	69bb      	ldr	r3, [r7, #24]
 801b460:	3304      	adds	r3, #4
 801b462:	69fa      	ldr	r2, [r7, #28]
 801b464:	2100      	movs	r1, #0
 801b466:	4618      	mov	r0, r3
 801b468:	f7f2 fa68 	bl	800d93c <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801b46c:	69bb      	ldr	r3, [r7, #24]
 801b46e:	68db      	ldr	r3, [r3, #12]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d00b      	beq.n	801b48c <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801b474:	69bb      	ldr	r3, [r7, #24]
 801b476:	6859      	ldr	r1, [r3, #4]
 801b478:	69bb      	ldr	r3, [r7, #24]
 801b47a:	68db      	ldr	r3, [r3, #12]
 801b47c:	461a      	mov	r2, r3
 801b47e:	68f8      	ldr	r0, [r7, #12]
 801b480:	f7f5 fe6c 	bl	801115c <mg_io_send>
 801b484:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 801b486:	69fb      	ldr	r3, [r7, #28]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	dce8      	bgt.n	801b45e <mg_tls_send+0x66>
  } // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 801b48c:	69bb      	ldr	r3, [r7, #24]
 801b48e:	68db      	ldr	r3, [r3, #12]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d005      	beq.n	801b4a0 <mg_tls_send+0xa8>
 801b494:	69fb      	ldr	r3, [r7, #28]
 801b496:	f113 0f02 	cmn.w	r3, #2
 801b49a:	d101      	bne.n	801b4a0 <mg_tls_send+0xa8>
 801b49c:	2301      	movs	r3, #1
 801b49e:	e000      	b.n	801b4a2 <mg_tls_send+0xaa>
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	f003 0301 	and.w	r3, r3, #1
 801b4a6:	b2d9      	uxtb	r1, r3
 801b4a8:	68fa      	ldr	r2, [r7, #12]
 801b4aa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801b4ae:	f361 13c7 	bfi	r3, r1, #7, #1
 801b4b2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 801b4b6:	4b1e      	ldr	r3, [pc, #120]	@ (801b530 <mg_tls_send+0x138>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	2b03      	cmp	r3, #3
 801b4bc:	dd26      	ble.n	801b50c <mg_tls_send+0x114>
 801b4be:	4b1d      	ldr	r3, [pc, #116]	@ (801b534 <mg_tls_send+0x13c>)
 801b4c0:	f243 02fc 	movw	r2, #12540	@ 0x30fc
 801b4c4:	491c      	ldr	r1, [pc, #112]	@ (801b538 <mg_tls_send+0x140>)
 801b4c6:	2004      	movs	r0, #4
 801b4c8:	f7f3 fa50 	bl	800e96c <mg_log_prefix>
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801b4d0:	6878      	ldr	r0, [r7, #4]
 801b4d2:	69bb      	ldr	r3, [r7, #24]
 801b4d4:	68db      	ldr	r3, [r3, #12]
 801b4d6:	461c      	mov	r4, r3
 801b4d8:	7dfb      	ldrb	r3, [r7, #23]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d001      	beq.n	801b4e2 <mg_tls_send+0xea>
 801b4de:	2354      	movs	r3, #84	@ 0x54
 801b4e0:	e000      	b.n	801b4e4 <mg_tls_send+0xec>
 801b4e2:	2374      	movs	r3, #116	@ 0x74
 801b4e4:	68fa      	ldr	r2, [r7, #12]
 801b4e6:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 801b4ea:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801b4ee:	b2d2      	uxtb	r2, r2
 801b4f0:	2a00      	cmp	r2, #0
 801b4f2:	d001      	beq.n	801b4f8 <mg_tls_send+0x100>
 801b4f4:	2254      	movs	r2, #84	@ 0x54
 801b4f6:	e000      	b.n	801b4fa <mg_tls_send+0x102>
 801b4f8:	2274      	movs	r2, #116	@ 0x74
 801b4fa:	9202      	str	r2, [sp, #8]
 801b4fc:	9301      	str	r3, [sp, #4]
 801b4fe:	69fb      	ldr	r3, [r7, #28]
 801b500:	9300      	str	r3, [sp, #0]
 801b502:	4623      	mov	r3, r4
 801b504:	4602      	mov	r2, r0
 801b506:	480d      	ldr	r0, [pc, #52]	@ (801b53c <mg_tls_send+0x144>)
 801b508:	f7f3 fa80 	bl	800ea0c <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 801b50c:	69fb      	ldr	r3, [r7, #28]
 801b50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b512:	d102      	bne.n	801b51a <mg_tls_send+0x122>
 801b514:	f04f 33ff 	mov.w	r3, #4294967295
 801b518:	e006      	b.n	801b528 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 801b51a:	7dfb      	ldrb	r3, [r7, #23]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d002      	beq.n	801b526 <mg_tls_send+0x12e>
 801b520:	f06f 0301 	mvn.w	r3, #1
 801b524:	e000      	b.n	801b528 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 801b526:	687b      	ldr	r3, [r7, #4]
}
 801b528:	4618      	mov	r0, r3
 801b52a:	3724      	adds	r7, #36	@ 0x24
 801b52c:	46bd      	mov	sp, r7
 801b52e:	bd90      	pop	{r4, r7, pc}
 801b530:	24000258 	.word	0x24000258
 801b534:	0802dd1c 	.word	0x0802dd1c
 801b538:	08029e1c 	.word	0x08029e1c
 801b53c:	0802c56c 	.word	0x0802c56c

0801b540 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 801b540:	b580      	push	{r7, lr}
 801b542:	b088      	sub	sp, #32
 801b544:	af00      	add	r7, sp, #0
 801b546:	60f8      	str	r0, [r7, #12]
 801b548:	60b9      	str	r1, [r7, #8]
 801b54a:	607a      	str	r2, [r7, #4]
  int r = 0;
 801b54c:	2300      	movs	r3, #0
 801b54e:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b556:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 801b558:	68f8      	ldr	r0, [r7, #12]
 801b55a:	f7fc fdab 	bl	80180b4 <mg_tls_recv_record>
 801b55e:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 801b560:	69fb      	ldr	r3, [r7, #28]
 801b562:	2b00      	cmp	r3, #0
 801b564:	da01      	bge.n	801b56a <mg_tls_recv+0x2a>
    return r;
 801b566:	69fb      	ldr	r3, [r7, #28]
 801b568:	e03a      	b.n	801b5e0 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b56e:	69bb      	ldr	r3, [r7, #24]
 801b570:	695b      	ldr	r3, [r3, #20]
 801b572:	4413      	add	r3, r2
 801b574:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801b576:	69bb      	ldr	r3, [r7, #24]
 801b578:	7f1b      	ldrb	r3, [r3, #28]
 801b57a:	2b17      	cmp	r3, #23
 801b57c:	d008      	beq.n	801b590 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801b57e:	69bb      	ldr	r3, [r7, #24]
 801b580:	2200      	movs	r2, #0
 801b582:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 801b584:	68f8      	ldr	r0, [r7, #12]
 801b586:	f7fc f926 	bl	80177d6 <mg_tls_drop_record>
    return MG_IO_WAIT;
 801b58a:	f06f 0301 	mvn.w	r3, #1
 801b58e:	e027      	b.n	801b5e0 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 801b590:	68bb      	ldr	r3, [r7, #8]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d002      	beq.n	801b59c <mg_tls_recv+0x5c>
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d101      	bne.n	801b5a0 <mg_tls_recv+0x60>
 801b59c:	2300      	movs	r3, #0
 801b59e:	e01f      	b.n	801b5e0 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 801b5a0:	69bb      	ldr	r3, [r7, #24]
 801b5a2:	699b      	ldr	r3, [r3, #24]
 801b5a4:	687a      	ldr	r2, [r7, #4]
 801b5a6:	4293      	cmp	r3, r2
 801b5a8:	bf28      	it	cs
 801b5aa:	4613      	movcs	r3, r2
 801b5ac:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 801b5ae:	693a      	ldr	r2, [r7, #16]
 801b5b0:	6979      	ldr	r1, [r7, #20]
 801b5b2:	68b8      	ldr	r0, [r7, #8]
 801b5b4:	f00c f8d2 	bl	802775c <memmove>
  tls->recv_offset += minlen;
 801b5b8:	69bb      	ldr	r3, [r7, #24]
 801b5ba:	695a      	ldr	r2, [r3, #20]
 801b5bc:	693b      	ldr	r3, [r7, #16]
 801b5be:	441a      	add	r2, r3
 801b5c0:	69bb      	ldr	r3, [r7, #24]
 801b5c2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 801b5c4:	69bb      	ldr	r3, [r7, #24]
 801b5c6:	699a      	ldr	r2, [r3, #24]
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	1ad2      	subs	r2, r2, r3
 801b5cc:	69bb      	ldr	r3, [r7, #24]
 801b5ce:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 801b5d0:	69bb      	ldr	r3, [r7, #24]
 801b5d2:	699b      	ldr	r3, [r3, #24]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d102      	bne.n	801b5de <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 801b5d8:	68f8      	ldr	r0, [r7, #12]
 801b5da:	f7fc f8fc 	bl	80177d6 <mg_tls_drop_record>
  }
  return (long) minlen;
 801b5de:	693b      	ldr	r3, [r7, #16]
}
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	3720      	adds	r7, #32
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bd80      	pop	{r7, pc}

0801b5e8 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 801b5e8:	b480      	push	{r7}
 801b5ea:	b085      	sub	sp, #20
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b5f6:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d002      	beq.n	801b604 <mg_tls_pending+0x1c>
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	699b      	ldr	r3, [r3, #24]
 801b602:	e000      	b.n	801b606 <mg_tls_pending+0x1e>
 801b604:	2300      	movs	r3, #0
}
 801b606:	4618      	mov	r0, r3
 801b608:	3714      	adds	r7, #20
 801b60a:	46bd      	mov	sp, r7
 801b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b610:	4770      	bx	lr

0801b612 <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 801b612:	b580      	push	{r7, lr}
 801b614:	b084      	sub	sp, #16
 801b616:	af00      	add	r7, sp, #0
 801b618:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b620:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 801b622:	e006      	b.n	801b632 <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	3304      	adds	r3, #4
 801b628:	68ba      	ldr	r2, [r7, #8]
 801b62a:	2100      	movs	r1, #0
 801b62c:	4618      	mov	r0, r3
 801b62e:	f7f2 f985 	bl	800d93c <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	68db      	ldr	r3, [r3, #12]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d00b      	beq.n	801b652 <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	6859      	ldr	r1, [r3, #4]
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	68db      	ldr	r3, [r3, #12]
 801b642:	461a      	mov	r2, r3
 801b644:	6878      	ldr	r0, [r7, #4]
 801b646:	f7f5 fd89 	bl	801115c <mg_io_send>
 801b64a:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801b64c:	68bb      	ldr	r3, [r7, #8]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	dce8      	bgt.n	801b624 <mg_tls_flush+0x12>
  }
}
 801b652:	bf00      	nop
 801b654:	3710      	adds	r7, #16
 801b656:	46bd      	mov	sp, r7
 801b658:	bd80      	pop	{r7, pc}

0801b65a <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 801b65a:	b480      	push	{r7}
 801b65c:	b083      	sub	sp, #12
 801b65e:	af00      	add	r7, sp, #0
 801b660:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 801b662:	bf00      	nop
 801b664:	370c      	adds	r7, #12
 801b666:	46bd      	mov	sp, r7
 801b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66c:	4770      	bx	lr
	...

0801b670 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 801b670:	b480      	push	{r7}
 801b672:	b085      	sub	sp, #20
 801b674:	af00      	add	r7, sp, #0
 801b676:	60f8      	str	r0, [r7, #12]
 801b678:	60b9      	str	r1, [r7, #8]
 801b67a:	607a      	str	r2, [r7, #4]
 801b67c:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	4a2b      	ldr	r2, [pc, #172]	@ (801b730 <initialize_state+0xc0>)
 801b682:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	3304      	adds	r3, #4
 801b688:	4a2a      	ldr	r2, [pc, #168]	@ (801b734 <initialize_state+0xc4>)
 801b68a:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	3308      	adds	r3, #8
 801b690:	4a29      	ldr	r2, [pc, #164]	@ (801b738 <initialize_state+0xc8>)
 801b692:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	330c      	adds	r3, #12
 801b698:	4a28      	ldr	r2, [pc, #160]	@ (801b73c <initialize_state+0xcc>)
 801b69a:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	3310      	adds	r3, #16
 801b6a0:	68ba      	ldr	r2, [r7, #8]
 801b6a2:	6812      	ldr	r2, [r2, #0]
 801b6a4:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	3314      	adds	r3, #20
 801b6aa:	68ba      	ldr	r2, [r7, #8]
 801b6ac:	3204      	adds	r2, #4
 801b6ae:	6812      	ldr	r2, [r2, #0]
 801b6b0:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	3318      	adds	r3, #24
 801b6b6:	68ba      	ldr	r2, [r7, #8]
 801b6b8:	3208      	adds	r2, #8
 801b6ba:	6812      	ldr	r2, [r2, #0]
 801b6bc:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	331c      	adds	r3, #28
 801b6c2:	68ba      	ldr	r2, [r7, #8]
 801b6c4:	320c      	adds	r2, #12
 801b6c6:	6812      	ldr	r2, [r2, #0]
 801b6c8:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	3320      	adds	r3, #32
 801b6ce:	68ba      	ldr	r2, [r7, #8]
 801b6d0:	3210      	adds	r2, #16
 801b6d2:	6812      	ldr	r2, [r2, #0]
 801b6d4:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	3324      	adds	r3, #36	@ 0x24
 801b6da:	68ba      	ldr	r2, [r7, #8]
 801b6dc:	3214      	adds	r2, #20
 801b6de:	6812      	ldr	r2, [r2, #0]
 801b6e0:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801b6e2:	68fb      	ldr	r3, [r7, #12]
 801b6e4:	3328      	adds	r3, #40	@ 0x28
 801b6e6:	68ba      	ldr	r2, [r7, #8]
 801b6e8:	3218      	adds	r2, #24
 801b6ea:	6812      	ldr	r2, [r2, #0]
 801b6ec:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	332c      	adds	r3, #44	@ 0x2c
 801b6f2:	68ba      	ldr	r2, [r7, #8]
 801b6f4:	321c      	adds	r2, #28
 801b6f6:	6812      	ldr	r2, [r2, #0]
 801b6f8:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	3330      	adds	r3, #48	@ 0x30
 801b6fe:	683a      	ldr	r2, [r7, #0]
 801b700:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	3334      	adds	r3, #52	@ 0x34
 801b706:	687a      	ldr	r2, [r7, #4]
 801b708:	6812      	ldr	r2, [r2, #0]
 801b70a:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	3338      	adds	r3, #56	@ 0x38
 801b710:	687a      	ldr	r2, [r7, #4]
 801b712:	3204      	adds	r2, #4
 801b714:	6812      	ldr	r2, [r2, #0]
 801b716:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	333c      	adds	r3, #60	@ 0x3c
 801b71c:	687a      	ldr	r2, [r7, #4]
 801b71e:	3208      	adds	r2, #8
 801b720:	6812      	ldr	r2, [r2, #0]
 801b722:	601a      	str	r2, [r3, #0]
}
 801b724:	bf00      	nop
 801b726:	3714      	adds	r7, #20
 801b728:	46bd      	mov	sp, r7
 801b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72e:	4770      	bx	lr
 801b730:	61707865 	.word	0x61707865
 801b734:	3320646e 	.word	0x3320646e
 801b738:	79622d32 	.word	0x79622d32
 801b73c:	6b206574 	.word	0x6b206574

0801b740 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 801b740:	b480      	push	{r7}
 801b742:	b095      	sub	sp, #84	@ 0x54
 801b744:	af00      	add	r7, sp, #0
 801b746:	6078      	str	r0, [r7, #4]
 801b748:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	3304      	adds	r3, #4
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	647b      	str	r3, [r7, #68]	@ 0x44
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	3308      	adds	r3, #8
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	330c      	adds	r3, #12
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	3310      	adds	r3, #16
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	3314      	adds	r3, #20
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	637b      	str	r3, [r7, #52]	@ 0x34
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	3318      	adds	r3, #24
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	633b      	str	r3, [r7, #48]	@ 0x30
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	331c      	adds	r3, #28
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	3320      	adds	r3, #32
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	3324      	adds	r3, #36	@ 0x24
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	627b      	str	r3, [r7, #36]	@ 0x24
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	3328      	adds	r3, #40	@ 0x28
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	623b      	str	r3, [r7, #32]
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	332c      	adds	r3, #44	@ 0x2c
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	61fb      	str	r3, [r7, #28]
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	3330      	adds	r3, #48	@ 0x30
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	61bb      	str	r3, [r7, #24]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	3334      	adds	r3, #52	@ 0x34
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	617b      	str	r3, [r7, #20]
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	3338      	adds	r3, #56	@ 0x38
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	613b      	str	r3, [r7, #16]
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	333c      	adds	r3, #60	@ 0x3c
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b7cc:	e182      	b.n	801bad4 <core_block+0x394>
    __Q(0, 4, 8, 12);
 801b7ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b7d2:	4413      	add	r3, r2
 801b7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b7d6:	69ba      	ldr	r2, [r7, #24]
 801b7d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b7da:	4053      	eors	r3, r2
 801b7dc:	61bb      	str	r3, [r7, #24]
 801b7de:	69bb      	ldr	r3, [r7, #24]
 801b7e0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b7e4:	61bb      	str	r3, [r7, #24]
 801b7e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b7e8:	69bb      	ldr	r3, [r7, #24]
 801b7ea:	4413      	add	r3, r2
 801b7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b7ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7f2:	4053      	eors	r3, r2
 801b7f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b7f8:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b7fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b7fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b802:	4413      	add	r3, r2
 801b804:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b806:	69ba      	ldr	r2, [r7, #24]
 801b808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b80a:	4053      	eors	r3, r2
 801b80c:	61bb      	str	r3, [r7, #24]
 801b80e:	69bb      	ldr	r3, [r7, #24]
 801b810:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b814:	61bb      	str	r3, [r7, #24]
 801b816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b818:	69bb      	ldr	r3, [r7, #24]
 801b81a:	4413      	add	r3, r2
 801b81c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b81e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b822:	4053      	eors	r3, r2
 801b824:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b828:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b82c:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 801b82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b832:	4413      	add	r3, r2
 801b834:	647b      	str	r3, [r7, #68]	@ 0x44
 801b836:	697a      	ldr	r2, [r7, #20]
 801b838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b83a:	4053      	eors	r3, r2
 801b83c:	617b      	str	r3, [r7, #20]
 801b83e:	697b      	ldr	r3, [r7, #20]
 801b840:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b844:	617b      	str	r3, [r7, #20]
 801b846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b848:	697b      	ldr	r3, [r7, #20]
 801b84a:	4413      	add	r3, r2
 801b84c:	627b      	str	r3, [r7, #36]	@ 0x24
 801b84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b852:	4053      	eors	r3, r2
 801b854:	637b      	str	r3, [r7, #52]	@ 0x34
 801b856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b858:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b85c:	637b      	str	r3, [r7, #52]	@ 0x34
 801b85e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b862:	4413      	add	r3, r2
 801b864:	647b      	str	r3, [r7, #68]	@ 0x44
 801b866:	697a      	ldr	r2, [r7, #20]
 801b868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b86a:	4053      	eors	r3, r2
 801b86c:	617b      	str	r3, [r7, #20]
 801b86e:	697b      	ldr	r3, [r7, #20]
 801b870:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b874:	617b      	str	r3, [r7, #20]
 801b876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	4413      	add	r3, r2
 801b87c:	627b      	str	r3, [r7, #36]	@ 0x24
 801b87e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b882:	4053      	eors	r3, r2
 801b884:	637b      	str	r3, [r7, #52]	@ 0x34
 801b886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b888:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b88c:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 801b88e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b892:	4413      	add	r3, r2
 801b894:	643b      	str	r3, [r7, #64]	@ 0x40
 801b896:	693a      	ldr	r2, [r7, #16]
 801b898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b89a:	4053      	eors	r3, r2
 801b89c:	613b      	str	r3, [r7, #16]
 801b89e:	693b      	ldr	r3, [r7, #16]
 801b8a0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b8a4:	613b      	str	r3, [r7, #16]
 801b8a6:	6a3a      	ldr	r2, [r7, #32]
 801b8a8:	693b      	ldr	r3, [r7, #16]
 801b8aa:	4413      	add	r3, r2
 801b8ac:	623b      	str	r3, [r7, #32]
 801b8ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b8b0:	6a3b      	ldr	r3, [r7, #32]
 801b8b2:	4053      	eors	r3, r2
 801b8b4:	633b      	str	r3, [r7, #48]	@ 0x30
 801b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8b8:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b8bc:	633b      	str	r3, [r7, #48]	@ 0x30
 801b8be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801b8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8c2:	4413      	add	r3, r2
 801b8c4:	643b      	str	r3, [r7, #64]	@ 0x40
 801b8c6:	693a      	ldr	r2, [r7, #16]
 801b8c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b8ca:	4053      	eors	r3, r2
 801b8cc:	613b      	str	r3, [r7, #16]
 801b8ce:	693b      	ldr	r3, [r7, #16]
 801b8d0:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b8d4:	613b      	str	r3, [r7, #16]
 801b8d6:	6a3a      	ldr	r2, [r7, #32]
 801b8d8:	693b      	ldr	r3, [r7, #16]
 801b8da:	4413      	add	r3, r2
 801b8dc:	623b      	str	r3, [r7, #32]
 801b8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b8e0:	6a3b      	ldr	r3, [r7, #32]
 801b8e2:	4053      	eors	r3, r2
 801b8e4:	633b      	str	r3, [r7, #48]	@ 0x30
 801b8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8e8:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b8ec:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801b8ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b8f2:	4413      	add	r3, r2
 801b8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b8f6:	68fa      	ldr	r2, [r7, #12]
 801b8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8fa:	4053      	eors	r3, r2
 801b8fc:	60fb      	str	r3, [r7, #12]
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b904:	60fb      	str	r3, [r7, #12]
 801b906:	69fa      	ldr	r2, [r7, #28]
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	4413      	add	r3, r2
 801b90c:	61fb      	str	r3, [r7, #28]
 801b90e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b910:	69fb      	ldr	r3, [r7, #28]
 801b912:	4053      	eors	r3, r2
 801b914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b918:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b91e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b922:	4413      	add	r3, r2
 801b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b926:	68fa      	ldr	r2, [r7, #12]
 801b928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b92a:	4053      	eors	r3, r2
 801b92c:	60fb      	str	r3, [r7, #12]
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b934:	60fb      	str	r3, [r7, #12]
 801b936:	69fa      	ldr	r2, [r7, #28]
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	4413      	add	r3, r2
 801b93c:	61fb      	str	r3, [r7, #28]
 801b93e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b940:	69fb      	ldr	r3, [r7, #28]
 801b942:	4053      	eors	r3, r2
 801b944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b948:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 801b94e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b952:	4413      	add	r3, r2
 801b954:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b956:	68fa      	ldr	r2, [r7, #12]
 801b958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b95a:	4053      	eors	r3, r2
 801b95c:	60fb      	str	r3, [r7, #12]
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b964:	60fb      	str	r3, [r7, #12]
 801b966:	6a3a      	ldr	r2, [r7, #32]
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	4413      	add	r3, r2
 801b96c:	623b      	str	r3, [r7, #32]
 801b96e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b970:	6a3b      	ldr	r3, [r7, #32]
 801b972:	4053      	eors	r3, r2
 801b974:	637b      	str	r3, [r7, #52]	@ 0x34
 801b976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b978:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b97c:	637b      	str	r3, [r7, #52]	@ 0x34
 801b97e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b982:	4413      	add	r3, r2
 801b984:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b986:	68fa      	ldr	r2, [r7, #12]
 801b988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b98a:	4053      	eors	r3, r2
 801b98c:	60fb      	str	r3, [r7, #12]
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b994:	60fb      	str	r3, [r7, #12]
 801b996:	6a3a      	ldr	r2, [r7, #32]
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	4413      	add	r3, r2
 801b99c:	623b      	str	r3, [r7, #32]
 801b99e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b9a0:	6a3b      	ldr	r3, [r7, #32]
 801b9a2:	4053      	eors	r3, r2
 801b9a4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b9a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b9a8:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b9ac:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801b9ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9b2:	4413      	add	r3, r2
 801b9b4:	647b      	str	r3, [r7, #68]	@ 0x44
 801b9b6:	69ba      	ldr	r2, [r7, #24]
 801b9b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b9ba:	4053      	eors	r3, r2
 801b9bc:	61bb      	str	r3, [r7, #24]
 801b9be:	69bb      	ldr	r3, [r7, #24]
 801b9c0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801b9c4:	61bb      	str	r3, [r7, #24]
 801b9c6:	69fa      	ldr	r2, [r7, #28]
 801b9c8:	69bb      	ldr	r3, [r7, #24]
 801b9ca:	4413      	add	r3, r2
 801b9cc:	61fb      	str	r3, [r7, #28]
 801b9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b9d0:	69fb      	ldr	r3, [r7, #28]
 801b9d2:	4053      	eors	r3, r2
 801b9d4:	633b      	str	r3, [r7, #48]	@ 0x30
 801b9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9d8:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b9dc:	633b      	str	r3, [r7, #48]	@ 0x30
 801b9de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b9e2:	4413      	add	r3, r2
 801b9e4:	647b      	str	r3, [r7, #68]	@ 0x44
 801b9e6:	69ba      	ldr	r2, [r7, #24]
 801b9e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b9ea:	4053      	eors	r3, r2
 801b9ec:	61bb      	str	r3, [r7, #24]
 801b9ee:	69bb      	ldr	r3, [r7, #24]
 801b9f0:	ea4f 6333 	mov.w	r3, r3, ror #24
 801b9f4:	61bb      	str	r3, [r7, #24]
 801b9f6:	69fa      	ldr	r2, [r7, #28]
 801b9f8:	69bb      	ldr	r3, [r7, #24]
 801b9fa:	4413      	add	r3, r2
 801b9fc:	61fb      	str	r3, [r7, #28]
 801b9fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ba00:	69fb      	ldr	r3, [r7, #28]
 801ba02:	4053      	eors	r3, r2
 801ba04:	633b      	str	r3, [r7, #48]	@ 0x30
 801ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba08:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ba0c:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801ba0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ba10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba12:	4413      	add	r3, r2
 801ba14:	643b      	str	r3, [r7, #64]	@ 0x40
 801ba16:	697a      	ldr	r2, [r7, #20]
 801ba18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ba1a:	4053      	eors	r3, r2
 801ba1c:	617b      	str	r3, [r7, #20]
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ba24:	617b      	str	r3, [r7, #20]
 801ba26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	4413      	add	r3, r2
 801ba2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba32:	4053      	eors	r3, r2
 801ba34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ba36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba38:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ba3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ba3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba42:	4413      	add	r3, r2
 801ba44:	643b      	str	r3, [r7, #64]	@ 0x40
 801ba46:	697a      	ldr	r2, [r7, #20]
 801ba48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ba4a:	4053      	eors	r3, r2
 801ba4c:	617b      	str	r3, [r7, #20]
 801ba4e:	697b      	ldr	r3, [r7, #20]
 801ba50:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ba54:	617b      	str	r3, [r7, #20]
 801ba56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	4413      	add	r3, r2
 801ba5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ba60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba62:	4053      	eors	r3, r2
 801ba64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ba66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba68:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ba6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 801ba6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ba70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba72:	4413      	add	r3, r2
 801ba74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ba76:	693a      	ldr	r2, [r7, #16]
 801ba78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ba7a:	4053      	eors	r3, r2
 801ba7c:	613b      	str	r3, [r7, #16]
 801ba7e:	693b      	ldr	r3, [r7, #16]
 801ba80:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ba84:	613b      	str	r3, [r7, #16]
 801ba86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ba88:	693b      	ldr	r3, [r7, #16]
 801ba8a:	4413      	add	r3, r2
 801ba8c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ba8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba92:	4053      	eors	r3, r2
 801ba94:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ba96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ba98:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ba9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ba9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801baa2:	4413      	add	r3, r2
 801baa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801baa6:	693a      	ldr	r2, [r7, #16]
 801baa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801baaa:	4053      	eors	r3, r2
 801baac:	613b      	str	r3, [r7, #16]
 801baae:	693b      	ldr	r3, [r7, #16]
 801bab0:	ea4f 6333 	mov.w	r3, r3, ror #24
 801bab4:	613b      	str	r3, [r7, #16]
 801bab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bab8:	693b      	ldr	r3, [r7, #16]
 801baba:	4413      	add	r3, r2
 801babc:	627b      	str	r3, [r7, #36]	@ 0x24
 801babe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bac2:	4053      	eors	r3, r2
 801bac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bac8:	ea4f 6373 	mov.w	r3, r3, ror #25
 801bacc:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801bace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bad0:	3301      	adds	r3, #1
 801bad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bad6:	2b09      	cmp	r3, #9
 801bad8:	f77f ae79 	ble.w	801b7ce <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681a      	ldr	r2, [r3, #0]
 801bae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bae2:	441a      	add	r2, r3
 801bae4:	683b      	ldr	r3, [r7, #0]
 801bae6:	601a      	str	r2, [r3, #0]
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	3304      	adds	r3, #4
 801baec:	6819      	ldr	r1, [r3, #0]
 801baee:	683b      	ldr	r3, [r7, #0]
 801baf0:	3304      	adds	r3, #4
 801baf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801baf4:	440a      	add	r2, r1
 801baf6:	601a      	str	r2, [r3, #0]
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	3308      	adds	r3, #8
 801bafc:	6819      	ldr	r1, [r3, #0]
 801bafe:	683b      	ldr	r3, [r7, #0]
 801bb00:	3308      	adds	r3, #8
 801bb02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bb04:	440a      	add	r2, r1
 801bb06:	601a      	str	r2, [r3, #0]
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	330c      	adds	r3, #12
 801bb0c:	6819      	ldr	r1, [r3, #0]
 801bb0e:	683b      	ldr	r3, [r7, #0]
 801bb10:	330c      	adds	r3, #12
 801bb12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bb14:	440a      	add	r2, r1
 801bb16:	601a      	str	r2, [r3, #0]
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	3310      	adds	r3, #16
 801bb1c:	6819      	ldr	r1, [r3, #0]
 801bb1e:	683b      	ldr	r3, [r7, #0]
 801bb20:	3310      	adds	r3, #16
 801bb22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bb24:	440a      	add	r2, r1
 801bb26:	601a      	str	r2, [r3, #0]
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	3314      	adds	r3, #20
 801bb2c:	6819      	ldr	r1, [r3, #0]
 801bb2e:	683b      	ldr	r3, [r7, #0]
 801bb30:	3314      	adds	r3, #20
 801bb32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bb34:	440a      	add	r2, r1
 801bb36:	601a      	str	r2, [r3, #0]
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	3318      	adds	r3, #24
 801bb3c:	6819      	ldr	r1, [r3, #0]
 801bb3e:	683b      	ldr	r3, [r7, #0]
 801bb40:	3318      	adds	r3, #24
 801bb42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801bb44:	440a      	add	r2, r1
 801bb46:	601a      	str	r2, [r3, #0]
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	331c      	adds	r3, #28
 801bb4c:	6819      	ldr	r1, [r3, #0]
 801bb4e:	683b      	ldr	r3, [r7, #0]
 801bb50:	331c      	adds	r3, #28
 801bb52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb54:	440a      	add	r2, r1
 801bb56:	601a      	str	r2, [r3, #0]
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	3320      	adds	r3, #32
 801bb5c:	6819      	ldr	r1, [r3, #0]
 801bb5e:	683b      	ldr	r3, [r7, #0]
 801bb60:	3320      	adds	r3, #32
 801bb62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bb64:	440a      	add	r2, r1
 801bb66:	601a      	str	r2, [r3, #0]
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	3324      	adds	r3, #36	@ 0x24
 801bb6c:	6819      	ldr	r1, [r3, #0]
 801bb6e:	683b      	ldr	r3, [r7, #0]
 801bb70:	3324      	adds	r3, #36	@ 0x24
 801bb72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb74:	440a      	add	r2, r1
 801bb76:	601a      	str	r2, [r3, #0]
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	3328      	adds	r3, #40	@ 0x28
 801bb7c:	6819      	ldr	r1, [r3, #0]
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	3328      	adds	r3, #40	@ 0x28
 801bb82:	6a3a      	ldr	r2, [r7, #32]
 801bb84:	440a      	add	r2, r1
 801bb86:	601a      	str	r2, [r3, #0]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	332c      	adds	r3, #44	@ 0x2c
 801bb8c:	6819      	ldr	r1, [r3, #0]
 801bb8e:	683b      	ldr	r3, [r7, #0]
 801bb90:	332c      	adds	r3, #44	@ 0x2c
 801bb92:	69fa      	ldr	r2, [r7, #28]
 801bb94:	440a      	add	r2, r1
 801bb96:	601a      	str	r2, [r3, #0]
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	3330      	adds	r3, #48	@ 0x30
 801bb9c:	6819      	ldr	r1, [r3, #0]
 801bb9e:	683b      	ldr	r3, [r7, #0]
 801bba0:	3330      	adds	r3, #48	@ 0x30
 801bba2:	69ba      	ldr	r2, [r7, #24]
 801bba4:	440a      	add	r2, r1
 801bba6:	601a      	str	r2, [r3, #0]
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	3334      	adds	r3, #52	@ 0x34
 801bbac:	6819      	ldr	r1, [r3, #0]
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	3334      	adds	r3, #52	@ 0x34
 801bbb2:	697a      	ldr	r2, [r7, #20]
 801bbb4:	440a      	add	r2, r1
 801bbb6:	601a      	str	r2, [r3, #0]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	3338      	adds	r3, #56	@ 0x38
 801bbbc:	6819      	ldr	r1, [r3, #0]
 801bbbe:	683b      	ldr	r3, [r7, #0]
 801bbc0:	3338      	adds	r3, #56	@ 0x38
 801bbc2:	693a      	ldr	r2, [r7, #16]
 801bbc4:	440a      	add	r2, r1
 801bbc6:	601a      	str	r2, [r3, #0]
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	333c      	adds	r3, #60	@ 0x3c
 801bbcc:	6819      	ldr	r1, [r3, #0]
 801bbce:	683b      	ldr	r3, [r7, #0]
 801bbd0:	333c      	adds	r3, #60	@ 0x3c
 801bbd2:	68fa      	ldr	r2, [r7, #12]
 801bbd4:	440a      	add	r2, r1
 801bbd6:	601a      	str	r2, [r3, #0]
}
 801bbd8:	bf00      	nop
 801bbda:	3754      	adds	r7, #84	@ 0x54
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe2:	4770      	bx	lr

0801bbe4 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 801bbe4:	b480      	push	{r7}
 801bbe6:	b089      	sub	sp, #36	@ 0x24
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	60f8      	str	r0, [r7, #12]
 801bbec:	60b9      	str	r1, [r7, #8]
 801bbee:	607a      	str	r2, [r7, #4]
 801bbf0:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801bbf2:	683b      	ldr	r3, [r7, #0]
 801bbf4:	089b      	lsrs	r3, r3, #2
 801bbf6:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	61fb      	str	r3, [r7, #28]
 801bbfc:	e016      	b.n	801bc2c <xor_block+0x48>
 801bbfe:	69fb      	ldr	r3, [r7, #28]
 801bc00:	009b      	lsls	r3, r3, #2
 801bc02:	68ba      	ldr	r2, [r7, #8]
 801bc04:	4413      	add	r3, r2
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	617b      	str	r3, [r7, #20]
 801bc0a:	69fb      	ldr	r3, [r7, #28]
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	687a      	ldr	r2, [r7, #4]
 801bc10:	4413      	add	r3, r2
 801bc12:	681a      	ldr	r2, [r3, #0]
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	4053      	eors	r3, r2
 801bc18:	617b      	str	r3, [r7, #20]
 801bc1a:	69fb      	ldr	r3, [r7, #28]
 801bc1c:	009b      	lsls	r3, r3, #2
 801bc1e:	68fa      	ldr	r2, [r7, #12]
 801bc20:	4413      	add	r3, r2
 801bc22:	697a      	ldr	r2, [r7, #20]
 801bc24:	601a      	str	r2, [r3, #0]
 801bc26:	69fb      	ldr	r3, [r7, #28]
 801bc28:	3301      	adds	r3, #1
 801bc2a:	61fb      	str	r3, [r7, #28]
 801bc2c:	69fa      	ldr	r2, [r7, #28]
 801bc2e:	69bb      	ldr	r3, [r7, #24]
 801bc30:	429a      	cmp	r2, r3
 801bc32:	d3e4      	bcc.n	801bbfe <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 801bc34:	69bb      	ldr	r3, [r7, #24]
 801bc36:	009b      	lsls	r3, r3, #2
 801bc38:	68fa      	ldr	r2, [r7, #12]
 801bc3a:	4413      	add	r3, r2
 801bc3c:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801bc3e:	69bb      	ldr	r3, [r7, #24]
 801bc40:	009b      	lsls	r3, r3, #2
 801bc42:	68ba      	ldr	r2, [r7, #8]
 801bc44:	4413      	add	r3, r2
 801bc46:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 801bc48:	69bb      	ldr	r3, [r7, #24]
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	687a      	ldr	r2, [r7, #4]
 801bc4e:	4413      	add	r3, r2
 801bc50:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	f003 0303 	and.w	r3, r3, #3
 801bc58:	2b03      	cmp	r3, #3
 801bc5a:	d026      	beq.n	801bcaa <xor_block+0xc6>
 801bc5c:	2b03      	cmp	r3, #3
 801bc5e:	d846      	bhi.n	801bcee <xor_block+0x10a>
 801bc60:	2b01      	cmp	r3, #1
 801bc62:	d002      	beq.n	801bc6a <xor_block+0x86>
 801bc64:	2b02      	cmp	r3, #2
 801bc66:	d00a      	beq.n	801bc7e <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 801bc68:	e041      	b.n	801bcee <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	781a      	ldrb	r2, [r3, #0]
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	b2db      	uxtb	r3, r3
 801bc74:	4053      	eors	r3, r2
 801bc76:	b2da      	uxtb	r2, r3
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	701a      	strb	r2, [r3, #0]
      break;
 801bc7c:	e037      	b.n	801bcee <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801bc7e:	68bb      	ldr	r3, [r7, #8]
 801bc80:	781a      	ldrb	r2, [r3, #0]
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	b2db      	uxtb	r3, r3
 801bc88:	4053      	eors	r3, r2
 801bc8a:	b2da      	uxtb	r2, r3
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	3301      	adds	r3, #1
 801bc94:	7819      	ldrb	r1, [r3, #0]
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	0a1b      	lsrs	r3, r3, #8
 801bc9c:	b2da      	uxtb	r2, r3
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	3301      	adds	r3, #1
 801bca2:	404a      	eors	r2, r1
 801bca4:	b2d2      	uxtb	r2, r2
 801bca6:	701a      	strb	r2, [r3, #0]
      break;
 801bca8:	e021      	b.n	801bcee <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801bcaa:	68bb      	ldr	r3, [r7, #8]
 801bcac:	781a      	ldrb	r2, [r3, #0]
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	4053      	eors	r3, r2
 801bcb6:	b2da      	uxtb	r2, r3
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801bcbc:	68bb      	ldr	r3, [r7, #8]
 801bcbe:	3301      	adds	r3, #1
 801bcc0:	7819      	ldrb	r1, [r3, #0]
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	0a1b      	lsrs	r3, r3, #8
 801bcc8:	b2da      	uxtb	r2, r3
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	3301      	adds	r3, #1
 801bcce:	404a      	eors	r2, r1
 801bcd0:	b2d2      	uxtb	r2, r2
 801bcd2:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 801bcd4:	68bb      	ldr	r3, [r7, #8]
 801bcd6:	3302      	adds	r3, #2
 801bcd8:	7819      	ldrb	r1, [r3, #0]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	0c1b      	lsrs	r3, r3, #16
 801bce0:	b2da      	uxtb	r2, r3
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	3302      	adds	r3, #2
 801bce6:	404a      	eors	r2, r1
 801bce8:	b2d2      	uxtb	r2, r2
 801bcea:	701a      	strb	r2, [r3, #0]
      break;
 801bcec:	bf00      	nop
}
 801bcee:	bf00      	nop
 801bcf0:	3724      	adds	r7, #36	@ 0x24
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf8:	4770      	bx	lr

0801bcfa <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 801bcfa:	b580      	push	{r7, lr}
 801bcfc:	b0aa      	sub	sp, #168	@ 0xa8
 801bcfe:	af00      	add	r7, sp, #0
 801bd00:	60f8      	str	r0, [r7, #12]
 801bd02:	60b9      	str	r1, [r7, #8]
 801bd04:	607a      	str	r2, [r7, #4]
 801bd06:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	099b      	lsrs	r3, r3, #6
 801bd0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801bd10:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801bd14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801bd18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801bd1c:	6839      	ldr	r1, [r7, #0]
 801bd1e:	f7ff fca7 	bl	801b670 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801bd22:	2300      	movs	r3, #0
 801bd24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bd28:	e03c      	b.n	801bda4 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 801bd2a:	f107 0218 	add.w	r2, r7, #24
 801bd2e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801bd32:	4611      	mov	r1, r2
 801bd34:	4618      	mov	r0, r3
 801bd36:	f7ff fd03 	bl	801b740 <core_block>
    increment_counter(state);
 801bd3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801bd3e:	3301      	adds	r3, #1
 801bd40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 801bd44:	2300      	movs	r3, #0
 801bd46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801bd4a:	e01c      	b.n	801bd86 <chacha20_xor_stream+0x8c>
 801bd4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bd50:	009b      	lsls	r3, r3, #2
 801bd52:	68ba      	ldr	r2, [r7, #8]
 801bd54:	4413      	add	r3, r2
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	617b      	str	r3, [r7, #20]
 801bd5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bd5e:	009b      	lsls	r3, r3, #2
 801bd60:	f107 0218 	add.w	r2, r7, #24
 801bd64:	4413      	add	r3, r2
 801bd66:	681a      	ldr	r2, [r3, #0]
 801bd68:	697b      	ldr	r3, [r7, #20]
 801bd6a:	4053      	eors	r3, r2
 801bd6c:	617b      	str	r3, [r7, #20]
 801bd6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bd72:	009b      	lsls	r3, r3, #2
 801bd74:	68fa      	ldr	r2, [r7, #12]
 801bd76:	4413      	add	r3, r2
 801bd78:	697a      	ldr	r2, [r7, #20]
 801bd7a:	601a      	str	r2, [r3, #0]
 801bd7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bd80:	3301      	adds	r3, #1
 801bd82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801bd86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bd8a:	2b0f      	cmp	r3, #15
 801bd8c:	d9de      	bls.n	801bd4c <chacha20_xor_stream+0x52>
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	3340      	adds	r3, #64	@ 0x40
 801bd92:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 801bd94:	68bb      	ldr	r3, [r7, #8]
 801bd96:	3340      	adds	r3, #64	@ 0x40
 801bd98:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 801bd9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bd9e:	3301      	adds	r3, #1
 801bda0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bda4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801bda8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801bdac:	429a      	cmp	r2, r3
 801bdae:	d3bc      	bcc.n	801bd2a <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bdb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801bdba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d00f      	beq.n	801bde2 <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801bdc2:	f107 0218 	add.w	r2, r7, #24
 801bdc6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801bdca:	4611      	mov	r1, r2
 801bdcc:	4618      	mov	r0, r3
 801bdce:	f7ff fcb7 	bl	801b740 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801bdd2:	f107 0218 	add.w	r2, r7, #24
 801bdd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801bdda:	68b9      	ldr	r1, [r7, #8]
 801bddc:	68f8      	ldr	r0, [r7, #12]
 801bdde:	f7ff ff01 	bl	801bbe4 <xor_block>
  }
}
 801bde2:	bf00      	nop
 801bde4:	37a8      	adds	r7, #168	@ 0xa8
 801bde6:	46bd      	mov	sp, r7
 801bde8:	bd80      	pop	{r7, pc}

0801bdea <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801bdea:	b580      	push	{r7, lr}
 801bdec:	b0a4      	sub	sp, #144	@ 0x90
 801bdee:	af00      	add	r7, sp, #0
 801bdf0:	60f8      	str	r0, [r7, #12]
 801bdf2:	60b9      	str	r1, [r7, #8]
 801bdf4:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 801bdf6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	687a      	ldr	r2, [r7, #4]
 801bdfe:	68b9      	ldr	r1, [r7, #8]
 801be00:	f7ff fc36 	bl	801b670 <initialize_state>
  core_block(state, result);
 801be04:	f107 0210 	add.w	r2, r7, #16
 801be08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801be0c:	4611      	mov	r1, r2
 801be0e:	4618      	mov	r0, r3
 801be10:	f7ff fc96 	bl	801b740 <core_block>
  serialize(poly_key, result);
 801be14:	f107 0310 	add.w	r3, r7, #16
 801be18:	2220      	movs	r2, #32
 801be1a:	4619      	mov	r1, r3
 801be1c:	68f8      	ldr	r0, [r7, #12]
 801be1e:	f00b fdf0 	bl	8027a02 <memcpy>
  (void) i;
}
 801be22:	bf00      	nop
 801be24:	3790      	adds	r7, #144	@ 0x90
 801be26:	46bd      	mov	sp, r7
 801be28:	bd80      	pop	{r7, pc}

0801be2a <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 801be2a:	b480      	push	{r7}
 801be2c:	b083      	sub	sp, #12
 801be2e:	af00      	add	r7, sp, #0
 801be30:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	781b      	ldrb	r3, [r3, #0]
 801be36:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	3301      	adds	r3, #1
 801be3c:	781b      	ldrb	r3, [r3, #0]
 801be3e:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801be40:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	3302      	adds	r3, #2
 801be46:	781b      	ldrb	r3, [r3, #0]
 801be48:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 801be4a:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	3303      	adds	r3, #3
 801be50:	781b      	ldrb	r3, [r3, #0]
 801be52:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 801be54:	4313      	orrs	r3, r2
}
 801be56:	4618      	mov	r0, r3
 801be58:	370c      	adds	r7, #12
 801be5a:	46bd      	mov	sp, r7
 801be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be60:	4770      	bx	lr

0801be62 <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 801be62:	b480      	push	{r7}
 801be64:	b083      	sub	sp, #12
 801be66:	af00      	add	r7, sp, #0
 801be68:	6078      	str	r0, [r7, #4]
 801be6a:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 801be6c:	683b      	ldr	r3, [r7, #0]
 801be6e:	b2da      	uxtb	r2, r3
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 801be74:	683b      	ldr	r3, [r7, #0]
 801be76:	0a1a      	lsrs	r2, r3, #8
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	3301      	adds	r3, #1
 801be7c:	b2d2      	uxtb	r2, r2
 801be7e:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	0c1a      	lsrs	r2, r3, #16
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	3302      	adds	r3, #2
 801be88:	b2d2      	uxtb	r2, r2
 801be8a:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 801be8c:	683b      	ldr	r3, [r7, #0]
 801be8e:	0e1a      	lsrs	r2, r3, #24
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	3303      	adds	r3, #3
 801be94:	b2d2      	uxtb	r2, r2
 801be96:	701a      	strb	r2, [r3, #0]
}
 801be98:	bf00      	nop
 801be9a:	370c      	adds	r7, #12
 801be9c:	46bd      	mov	sp, r7
 801be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea2:	4770      	bx	lr

0801bea4 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 801bea4:	b580      	push	{r7, lr}
 801bea6:	b084      	sub	sp, #16
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
 801beac:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 801beb2:	6838      	ldr	r0, [r7, #0]
 801beb4:	f7ff ffb9 	bl	801be2a <U8TO32>
 801beb8:	4603      	mov	r3, r0
 801beba:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	3303      	adds	r3, #3
 801bec6:	4618      	mov	r0, r3
 801bec8:	f7ff ffaf 	bl	801be2a <U8TO32>
 801becc:	4603      	mov	r3, r0
 801bece:	089a      	lsrs	r2, r3, #2
 801bed0:	4b2f      	ldr	r3, [pc, #188]	@ (801bf90 <poly1305_init+0xec>)
 801bed2:	4013      	ands	r3, r2
 801bed4:	68fa      	ldr	r2, [r7, #12]
 801bed6:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 801bed8:	683b      	ldr	r3, [r7, #0]
 801beda:	3306      	adds	r3, #6
 801bedc:	4618      	mov	r0, r3
 801bede:	f7ff ffa4 	bl	801be2a <U8TO32>
 801bee2:	4603      	mov	r3, r0
 801bee4:	091a      	lsrs	r2, r3, #4
 801bee6:	4b2b      	ldr	r3, [pc, #172]	@ (801bf94 <poly1305_init+0xf0>)
 801bee8:	4013      	ands	r3, r2
 801beea:	68fa      	ldr	r2, [r7, #12]
 801beec:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801beee:	683b      	ldr	r3, [r7, #0]
 801bef0:	3309      	adds	r3, #9
 801bef2:	4618      	mov	r0, r3
 801bef4:	f7ff ff99 	bl	801be2a <U8TO32>
 801bef8:	4603      	mov	r3, r0
 801befa:	099a      	lsrs	r2, r3, #6
 801befc:	4b26      	ldr	r3, [pc, #152]	@ (801bf98 <poly1305_init+0xf4>)
 801befe:	4013      	ands	r3, r2
 801bf00:	68fa      	ldr	r2, [r7, #12]
 801bf02:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	330c      	adds	r3, #12
 801bf08:	4618      	mov	r0, r3
 801bf0a:	f7ff ff8e 	bl	801be2a <U8TO32>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	0a1b      	lsrs	r3, r3, #8
 801bf12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801bf16:	68fb      	ldr	r3, [r7, #12]
 801bf18:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	2200      	movs	r2, #0
 801bf24:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	2200      	movs	r2, #0
 801bf2a:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	2200      	movs	r2, #0
 801bf30:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	2200      	movs	r2, #0
 801bf36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	3310      	adds	r3, #16
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f7ff ff74 	bl	801be2a <U8TO32>
 801bf42:	4602      	mov	r2, r0
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 801bf48:	683b      	ldr	r3, [r7, #0]
 801bf4a:	3314      	adds	r3, #20
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	f7ff ff6c 	bl	801be2a <U8TO32>
 801bf52:	4602      	mov	r2, r0
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 801bf58:	683b      	ldr	r3, [r7, #0]
 801bf5a:	3318      	adds	r3, #24
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	f7ff ff64 	bl	801be2a <U8TO32>
 801bf62:	4602      	mov	r2, r0
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 801bf68:	683b      	ldr	r3, [r7, #0]
 801bf6a:	331c      	adds	r3, #28
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f7ff ff5c 	bl	801be2a <U8TO32>
 801bf72:	4602      	mov	r2, r0
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	2200      	movs	r2, #0
 801bf7c:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	2200      	movs	r2, #0
 801bf82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 801bf86:	bf00      	nop
 801bf88:	3710      	adds	r7, #16
 801bf8a:	46bd      	mov	sp, r7
 801bf8c:	bd80      	pop	{r7, pc}
 801bf8e:	bf00      	nop
 801bf90:	03ffff03 	.word	0x03ffff03
 801bf94:	03ffc0ff 	.word	0x03ffc0ff
 801bf98:	03f03fff 	.word	0x03f03fff

0801bf9c <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 801bf9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bfa0:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 801bfa4:	af00      	add	r7, sp, #0
 801bfa6:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 801bfaa:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801bfae:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 801bfb2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfb6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d001      	beq.n	801bfc2 <poly1305_blocks+0x26>
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	e001      	b.n	801bfc6 <poly1305_blocks+0x2a>
 801bfc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801bfc6:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 801bfca:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 801bfd4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfd8:	685b      	ldr	r3, [r3, #4]
 801bfda:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801bfde:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfe2:	689b      	ldr	r3, [r3, #8]
 801bfe4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 801bfe8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bfec:	68db      	ldr	r3, [r3, #12]
 801bfee:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801bff2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801bff6:	691b      	ldr	r3, [r3, #16]
 801bff8:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 801bffc:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 801c000:	4613      	mov	r3, r2
 801c002:	009b      	lsls	r3, r3, #2
 801c004:	4413      	add	r3, r2
 801c006:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 801c00a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801c00e:	4613      	mov	r3, r2
 801c010:	009b      	lsls	r3, r3, #2
 801c012:	4413      	add	r3, r2
 801c014:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 801c018:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 801c01c:	4613      	mov	r3, r2
 801c01e:	009b      	lsls	r3, r3, #2
 801c020:	4413      	add	r3, r2
 801c022:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 801c026:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 801c02a:	4613      	mov	r3, r2
 801c02c:	009b      	lsls	r3, r3, #2
 801c02e:	4413      	add	r3, r2
 801c030:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 801c034:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c038:	695b      	ldr	r3, [r3, #20]
 801c03a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801c03e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c042:	699b      	ldr	r3, [r3, #24]
 801c044:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 801c048:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c04c:	69db      	ldr	r3, [r3, #28]
 801c04e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 801c052:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c056:	6a1b      	ldr	r3, [r3, #32]
 801c058:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 801c05c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c062:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 801c066:	f000 be78 	b.w	801cd5a <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 801c06a:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 801c06e:	f7ff fedc 	bl	801be2a <U8TO32>
 801c072:	4603      	mov	r3, r0
 801c074:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801c078:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c07c:	4413      	add	r3, r2
 801c07e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 801c082:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801c086:	3303      	adds	r3, #3
 801c088:	4618      	mov	r0, r3
 801c08a:	f7ff fece 	bl	801be2a <U8TO32>
 801c08e:	4603      	mov	r3, r0
 801c090:	089b      	lsrs	r3, r3, #2
 801c092:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801c096:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c09a:	4413      	add	r3, r2
 801c09c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 801c0a0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801c0a4:	3306      	adds	r3, #6
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7ff febf 	bl	801be2a <U8TO32>
 801c0ac:	4603      	mov	r3, r0
 801c0ae:	091b      	lsrs	r3, r3, #4
 801c0b0:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801c0b4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c0b8:	4413      	add	r3, r2
 801c0ba:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801c0be:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801c0c2:	3309      	adds	r3, #9
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	f7ff feb0 	bl	801be2a <U8TO32>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	099b      	lsrs	r3, r3, #6
 801c0ce:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801c0d2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c0d6:	4413      	add	r3, r2
 801c0d8:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 801c0dc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801c0e0:	330c      	adds	r3, #12
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7ff fea1 	bl	801be2a <U8TO32>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	0a1a      	lsrs	r2, r3, #8
 801c0ec:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801c0f0:	431a      	orrs	r2, r3
 801c0f2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c0f6:	4413      	add	r3, r2
 801c0f8:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801c0fc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c100:	2200      	movs	r2, #0
 801c102:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801c106:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 801c10a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c10e:	2200      	movs	r2, #0
 801c110:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801c114:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 801c118:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 801c11c:	460b      	mov	r3, r1
 801c11e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801c122:	fb02 f203 	mul.w	r2, r2, r3
 801c126:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801c12a:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801c12e:	4601      	mov	r1, r0
 801c130:	fb01 f303 	mul.w	r3, r1, r3
 801c134:	4413      	add	r3, r2
 801c136:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801c13a:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801c13e:	fba2 1201 	umull	r1, r2, r2, r1
 801c142:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 801c146:	460a      	mov	r2, r1
 801c148:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 801c14c:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801c150:	4413      	add	r3, r2
 801c152:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801c156:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c15a:	2200      	movs	r2, #0
 801c15c:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801c160:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 801c164:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c168:	2200      	movs	r2, #0
 801c16a:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 801c16e:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 801c172:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 801c176:	460b      	mov	r3, r1
 801c178:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 801c17c:	fb02 f203 	mul.w	r2, r2, r3
 801c180:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801c184:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 801c188:	4601      	mov	r1, r0
 801c18a:	fb01 f303 	mul.w	r3, r1, r3
 801c18e:	4413      	add	r3, r2
 801c190:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801c194:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 801c198:	fba2 1201 	umull	r1, r2, r2, r1
 801c19c:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801c1a0:	460a      	mov	r2, r1
 801c1a2:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801c1a6:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801c1aa:	4413      	add	r3, r2
 801c1ac:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801c1b0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801c1b4:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 801c1b8:	4602      	mov	r2, r0
 801c1ba:	189b      	adds	r3, r3, r2
 801c1bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801c1c0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801c1c4:	460a      	mov	r2, r1
 801c1c6:	4153      	adcs	r3, r2
 801c1c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801c1cc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801c1d6:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801c1da:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801c1de:	2200      	movs	r2, #0
 801c1e0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 801c1e4:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 801c1e8:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 801c1ec:	460b      	mov	r3, r1
 801c1ee:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801c1f2:	fb02 f203 	mul.w	r2, r2, r3
 801c1f6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801c1fa:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801c1fe:	4601      	mov	r1, r0
 801c200:	fb01 f303 	mul.w	r3, r1, r3
 801c204:	4413      	add	r3, r2
 801c206:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801c20a:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801c20e:	fba2 1201 	umull	r1, r2, r2, r1
 801c212:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801c216:	460a      	mov	r2, r1
 801c218:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 801c21c:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801c220:	4413      	add	r3, r2
 801c222:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801c226:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c22a:	2200      	movs	r2, #0
 801c22c:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 801c230:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 801c234:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801c238:	2200      	movs	r2, #0
 801c23a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801c23e:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 801c242:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 801c246:	460b      	mov	r3, r1
 801c248:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 801c24c:	fb02 f203 	mul.w	r2, r2, r3
 801c250:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 801c254:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 801c258:	4601      	mov	r1, r0
 801c25a:	fb01 f303 	mul.w	r3, r1, r3
 801c25e:	4413      	add	r3, r2
 801c260:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 801c264:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 801c268:	fba2 1201 	umull	r1, r2, r2, r1
 801c26c:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 801c270:	460a      	mov	r2, r1
 801c272:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 801c276:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 801c27a:	4413      	add	r3, r2
 801c27c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801c280:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801c284:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 801c288:	4602      	mov	r2, r0
 801c28a:	189b      	adds	r3, r3, r2
 801c28c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c28e:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801c292:	460a      	mov	r2, r1
 801c294:	4153      	adcs	r3, r2
 801c296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801c29c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801c2a0:	4602      	mov	r2, r0
 801c2a2:	189b      	adds	r3, r3, r2
 801c2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801c2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801c2ac:	460a      	mov	r2, r1
 801c2ae:	4153      	adcs	r3, r2
 801c2b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801c2b4:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c2b8:	2200      	movs	r2, #0
 801c2ba:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 801c2be:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801c2c2:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 801c2cc:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801c2d0:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 801c2d4:	460b      	mov	r3, r1
 801c2d6:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 801c2da:	fb02 f203 	mul.w	r2, r2, r3
 801c2de:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801c2e2:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801c2e6:	4601      	mov	r1, r0
 801c2e8:	fb01 f303 	mul.w	r3, r1, r3
 801c2ec:	4413      	add	r3, r2
 801c2ee:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801c2f2:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801c2f6:	fba2 1201 	umull	r1, r2, r2, r1
 801c2fa:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801c2fe:	460a      	mov	r2, r1
 801c300:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 801c304:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801c308:	4413      	add	r3, r2
 801c30a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801c30e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c312:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801c316:	4602      	mov	r2, r0
 801c318:	189b      	adds	r3, r3, r2
 801c31a:	643b      	str	r3, [r7, #64]	@ 0x40
 801c31c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c320:	460a      	mov	r2, r1
 801c322:	4153      	adcs	r3, r2
 801c324:	647b      	str	r3, [r7, #68]	@ 0x44
 801c326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801c32a:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801c32e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c332:	2200      	movs	r2, #0
 801c334:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 801c338:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 801c33c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c340:	2200      	movs	r2, #0
 801c342:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 801c346:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 801c34a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 801c34e:	460b      	mov	r3, r1
 801c350:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 801c354:	fb02 f203 	mul.w	r2, r2, r3
 801c358:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801c35c:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 801c360:	4601      	mov	r1, r0
 801c362:	fb01 f303 	mul.w	r3, r1, r3
 801c366:	4413      	add	r3, r2
 801c368:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 801c36c:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 801c370:	fba2 1201 	umull	r1, r2, r2, r1
 801c374:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 801c378:	460a      	mov	r2, r1
 801c37a:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 801c37e:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801c382:	4413      	add	r3, r2
 801c384:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801c388:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c38c:	2200      	movs	r2, #0
 801c38e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801c392:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 801c396:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c39a:	2200      	movs	r2, #0
 801c39c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 801c3a0:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 801c3a4:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801c3ae:	fb02 f203 	mul.w	r2, r2, r3
 801c3b2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 801c3b6:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 801c3ba:	4601      	mov	r1, r0
 801c3bc:	fb01 f303 	mul.w	r3, r1, r3
 801c3c0:	4413      	add	r3, r2
 801c3c2:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 801c3c6:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801c3ca:	fba2 1201 	umull	r1, r2, r2, r1
 801c3ce:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801c3d2:	460a      	mov	r2, r1
 801c3d4:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 801c3d8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c3dc:	4413      	add	r3, r2
 801c3de:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801c3e2:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801c3e6:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 801c3ea:	4602      	mov	r2, r0
 801c3ec:	189b      	adds	r3, r3, r2
 801c3ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801c3f2:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801c3f6:	460a      	mov	r2, r1
 801c3f8:	4153      	adcs	r3, r2
 801c3fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801c3fe:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c402:	2200      	movs	r2, #0
 801c404:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 801c408:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 801c40c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801c410:	2200      	movs	r2, #0
 801c412:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 801c416:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 801c41a:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801c41e:	460b      	mov	r3, r1
 801c420:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c424:	fb02 f203 	mul.w	r2, r2, r3
 801c428:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c42c:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 801c430:	4601      	mov	r1, r0
 801c432:	fb01 f303 	mul.w	r3, r1, r3
 801c436:	4413      	add	r3, r2
 801c438:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801c43c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 801c440:	fba2 1201 	umull	r1, r2, r2, r1
 801c444:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 801c448:	460a      	mov	r2, r1
 801c44a:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 801c44e:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 801c452:	4413      	add	r3, r2
 801c454:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801c458:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c45c:	2200      	movs	r2, #0
 801c45e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 801c462:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 801c466:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c46a:	2200      	movs	r2, #0
 801c46c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 801c470:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 801c474:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 801c478:	460b      	mov	r3, r1
 801c47a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801c47e:	fb02 f203 	mul.w	r2, r2, r3
 801c482:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801c486:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801c48a:	4601      	mov	r1, r0
 801c48c:	fb01 f303 	mul.w	r3, r1, r3
 801c490:	4413      	add	r3, r2
 801c492:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c496:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801c49a:	fba2 1201 	umull	r1, r2, r2, r1
 801c49e:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 801c4a2:	460a      	mov	r2, r1
 801c4a4:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801c4a8:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801c4ac:	4413      	add	r3, r2
 801c4ae:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801c4b2:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801c4b6:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801c4ba:	4602      	mov	r2, r0
 801c4bc:	189b      	adds	r3, r3, r2
 801c4be:	663b      	str	r3, [r7, #96]	@ 0x60
 801c4c0:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801c4c4:	460a      	mov	r2, r1
 801c4c6:	4153      	adcs	r3, r2
 801c4c8:	667b      	str	r3, [r7, #100]	@ 0x64
 801c4ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801c4ce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801c4d2:	4602      	mov	r2, r0
 801c4d4:	189b      	adds	r3, r3, r2
 801c4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801c4da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801c4de:	460a      	mov	r2, r1
 801c4e0:	4153      	adcs	r3, r2
 801c4e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801c4e6:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c4ea:	2200      	movs	r2, #0
 801c4ec:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801c4f0:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 801c4f4:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801c4fe:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801c502:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 801c506:	460b      	mov	r3, r1
 801c508:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801c50c:	fb02 f203 	mul.w	r2, r2, r3
 801c510:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801c514:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 801c518:	4601      	mov	r1, r0
 801c51a:	fb01 f303 	mul.w	r3, r1, r3
 801c51e:	4413      	add	r3, r2
 801c520:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801c524:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 801c528:	fba2 1201 	umull	r1, r2, r2, r1
 801c52c:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801c530:	460a      	mov	r2, r1
 801c532:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 801c536:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801c53a:	4413      	add	r3, r2
 801c53c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801c540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801c544:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801c548:	4602      	mov	r2, r0
 801c54a:	189b      	adds	r3, r3, r2
 801c54c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c54e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801c552:	460a      	mov	r2, r1
 801c554:	4153      	adcs	r3, r2
 801c556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801c55c:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801c560:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c564:	2200      	movs	r2, #0
 801c566:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801c56a:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 801c56e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801c572:	2200      	movs	r2, #0
 801c574:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801c578:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 801c57c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801c580:	460b      	mov	r3, r1
 801c582:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801c586:	fb02 f203 	mul.w	r2, r2, r3
 801c58a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801c58e:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 801c592:	4601      	mov	r1, r0
 801c594:	fb01 f303 	mul.w	r3, r1, r3
 801c598:	4413      	add	r3, r2
 801c59a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801c59e:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 801c5a2:	fba2 1201 	umull	r1, r2, r2, r1
 801c5a6:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801c5aa:	460a      	mov	r2, r1
 801c5ac:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801c5b0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801c5b4:	4413      	add	r3, r2
 801c5b6:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801c5ba:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c5be:	2200      	movs	r2, #0
 801c5c0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 801c5c4:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801c5c8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801c5d2:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801c5d6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801c5da:	460b      	mov	r3, r1
 801c5dc:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801c5e0:	fb02 f203 	mul.w	r2, r2, r3
 801c5e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801c5e8:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 801c5ec:	4601      	mov	r1, r0
 801c5ee:	fb01 f303 	mul.w	r3, r1, r3
 801c5f2:	4413      	add	r3, r2
 801c5f4:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801c5f8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 801c5fc:	fba2 1201 	umull	r1, r2, r2, r1
 801c600:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 801c604:	460a      	mov	r2, r1
 801c606:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 801c60a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801c60e:	4413      	add	r3, r2
 801c610:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801c614:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801c618:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 801c61c:	4602      	mov	r2, r0
 801c61e:	189b      	adds	r3, r3, r2
 801c620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801c624:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801c628:	460a      	mov	r2, r1
 801c62a:	4153      	adcs	r3, r2
 801c62c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801c630:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c634:	2200      	movs	r2, #0
 801c636:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801c63a:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 801c63e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c642:	2200      	movs	r2, #0
 801c644:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 801c648:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 801c64c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 801c650:	460b      	mov	r3, r1
 801c652:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801c656:	fb02 f203 	mul.w	r2, r2, r3
 801c65a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801c65e:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 801c662:	4601      	mov	r1, r0
 801c664:	fb01 f303 	mul.w	r3, r1, r3
 801c668:	4413      	add	r3, r2
 801c66a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 801c66e:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 801c672:	fba2 1201 	umull	r1, r2, r2, r1
 801c676:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 801c67a:	460a      	mov	r2, r1
 801c67c:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 801c680:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801c684:	4413      	add	r3, r2
 801c686:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801c68a:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c68e:	2200      	movs	r2, #0
 801c690:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801c694:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801c698:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c69c:	2200      	movs	r2, #0
 801c69e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801c6a2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801c6a6:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801c6aa:	460b      	mov	r3, r1
 801c6ac:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801c6b0:	fb02 f203 	mul.w	r2, r2, r3
 801c6b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c6b8:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 801c6bc:	4601      	mov	r1, r0
 801c6be:	fb01 f303 	mul.w	r3, r1, r3
 801c6c2:	4413      	add	r3, r2
 801c6c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c6c8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801c6cc:	fba2 1201 	umull	r1, r2, r2, r1
 801c6d0:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 801c6d4:	460a      	mov	r2, r1
 801c6d6:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801c6da:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801c6de:	4413      	add	r3, r2
 801c6e0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801c6e4:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801c6e8:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 801c6ec:	4602      	mov	r2, r0
 801c6ee:	189b      	adds	r3, r3, r2
 801c6f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c6f2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801c6f6:	460a      	mov	r2, r1
 801c6f8:	4153      	adcs	r3, r2
 801c6fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c6fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801c700:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801c704:	4602      	mov	r2, r0
 801c706:	189b      	adds	r3, r3, r2
 801c708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801c70c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801c710:	460a      	mov	r2, r1
 801c712:	4153      	adcs	r3, r2
 801c714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801c718:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c71c:	2200      	movs	r2, #0
 801c71e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801c722:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 801c726:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801c72a:	2200      	movs	r2, #0
 801c72c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801c730:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 801c734:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 801c738:	460b      	mov	r3, r1
 801c73a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801c73e:	fb02 f203 	mul.w	r2, r2, r3
 801c742:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801c746:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 801c74a:	4601      	mov	r1, r0
 801c74c:	fb01 f303 	mul.w	r3, r1, r3
 801c750:	4413      	add	r3, r2
 801c752:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801c756:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801c75a:	fba2 1201 	umull	r1, r2, r2, r1
 801c75e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 801c762:	460a      	mov	r2, r1
 801c764:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801c768:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801c76c:	4413      	add	r3, r2
 801c76e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801c772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801c776:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 801c77a:	4602      	mov	r2, r0
 801c77c:	189b      	adds	r3, r3, r2
 801c77e:	633b      	str	r3, [r7, #48]	@ 0x30
 801c780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801c784:	460a      	mov	r2, r1
 801c786:	4153      	adcs	r3, r2
 801c788:	637b      	str	r3, [r7, #52]	@ 0x34
 801c78a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801c78e:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801c792:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c796:	2200      	movs	r2, #0
 801c798:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801c79c:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 801c7a0:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801c7aa:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801c7ae:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801c7b2:	460b      	mov	r3, r1
 801c7b4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801c7b8:	fb02 f203 	mul.w	r2, r2, r3
 801c7bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801c7c0:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 801c7c4:	4601      	mov	r1, r0
 801c7c6:	fb01 f303 	mul.w	r3, r1, r3
 801c7ca:	4413      	add	r3, r2
 801c7cc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801c7d0:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 801c7d4:	fba2 1201 	umull	r1, r2, r2, r1
 801c7d8:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 801c7dc:	460a      	mov	r2, r1
 801c7de:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801c7e2:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801c7e6:	4413      	add	r3, r2
 801c7e8:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801c7ec:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801c7f6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801c7fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801c7fe:	2200      	movs	r2, #0
 801c800:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801c804:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801c808:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801c80c:	460b      	mov	r3, r1
 801c80e:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801c812:	fb02 f203 	mul.w	r2, r2, r3
 801c816:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801c81a:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801c81e:	4601      	mov	r1, r0
 801c820:	fb01 f303 	mul.w	r3, r1, r3
 801c824:	4413      	add	r3, r2
 801c826:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801c82a:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 801c82e:	fba2 1201 	umull	r1, r2, r2, r1
 801c832:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 801c836:	460a      	mov	r2, r1
 801c838:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 801c83c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801c840:	4413      	add	r3, r2
 801c842:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 801c846:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801c84a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801c84e:	4602      	mov	r2, r0
 801c850:	189b      	adds	r3, r3, r2
 801c852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801c856:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801c85a:	460a      	mov	r2, r1
 801c85c:	4153      	adcs	r3, r2
 801c85e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801c862:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801c866:	2200      	movs	r2, #0
 801c868:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801c86c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 801c870:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801c874:	2200      	movs	r2, #0
 801c876:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801c87a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 801c87e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 801c882:	460b      	mov	r3, r1
 801c884:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801c888:	fb02 f203 	mul.w	r2, r2, r3
 801c88c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801c890:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 801c894:	4601      	mov	r1, r0
 801c896:	fb01 f303 	mul.w	r3, r1, r3
 801c89a:	4413      	add	r3, r2
 801c89c:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801c8a0:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 801c8a4:	fba2 ab01 	umull	sl, fp, r2, r1
 801c8a8:	445b      	add	r3, fp
 801c8aa:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801c8ac:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801c8b6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801c8ba:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801c8be:	2200      	movs	r2, #0
 801c8c0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801c8c4:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801c8c8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 801c8cc:	460b      	mov	r3, r1
 801c8ce:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801c8d2:	fb02 f203 	mul.w	r2, r2, r3
 801c8d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801c8da:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801c8de:	4601      	mov	r1, r0
 801c8e0:	fb01 f303 	mul.w	r3, r1, r3
 801c8e4:	4413      	add	r3, r2
 801c8e6:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801c8ea:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801c8ee:	fba2 1201 	umull	r1, r2, r2, r1
 801c8f2:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801c8f6:	460a      	mov	r2, r1
 801c8f8:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 801c8fc:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801c900:	4413      	add	r3, r2
 801c902:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801c906:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801c90a:	460b      	mov	r3, r1
 801c90c:	eb1a 0303 	adds.w	r3, sl, r3
 801c910:	653b      	str	r3, [r7, #80]	@ 0x50
 801c912:	4613      	mov	r3, r2
 801c914:	eb4b 0303 	adc.w	r3, fp, r3
 801c918:	657b      	str	r3, [r7, #84]	@ 0x54
 801c91a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801c91e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801c922:	4602      	mov	r2, r0
 801c924:	189b      	adds	r3, r3, r2
 801c926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801c92a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c92e:	460a      	mov	r2, r1
 801c930:	4153      	adcs	r3, r2
 801c932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801c936:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801c93a:	2200      	movs	r2, #0
 801c93c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801c940:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 801c944:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801c948:	2200      	movs	r2, #0
 801c94a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801c94e:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801c952:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801c956:	460b      	mov	r3, r1
 801c958:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801c95c:	fb02 f203 	mul.w	r2, r2, r3
 801c960:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801c964:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801c968:	4601      	mov	r1, r0
 801c96a:	fb01 f303 	mul.w	r3, r1, r3
 801c96e:	4413      	add	r3, r2
 801c970:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801c974:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801c978:	fba2 1201 	umull	r1, r2, r2, r1
 801c97c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801c980:	460a      	mov	r2, r1
 801c982:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801c986:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801c98a:	4413      	add	r3, r2
 801c98c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801c990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c994:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801c998:	4602      	mov	r2, r0
 801c99a:	189b      	adds	r3, r3, r2
 801c99c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c99e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c9a2:	460a      	mov	r2, r1
 801c9a4:	4153      	adcs	r3, r2
 801c9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c9a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801c9ac:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801c9b0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c9b4:	2200      	movs	r2, #0
 801c9b6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801c9ba:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801c9be:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801c9c2:	2200      	movs	r2, #0
 801c9c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801c9c8:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801c9cc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801c9d0:	460b      	mov	r3, r1
 801c9d2:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801c9d6:	fb02 f203 	mul.w	r2, r2, r3
 801c9da:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801c9de:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801c9e2:	4601      	mov	r1, r0
 801c9e4:	fb01 f303 	mul.w	r3, r1, r3
 801c9e8:	4413      	add	r3, r2
 801c9ea:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801c9ee:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801c9f2:	fba2 8901 	umull	r8, r9, r2, r1
 801c9f6:	444b      	add	r3, r9
 801c9f8:	4699      	mov	r9, r3
 801c9fa:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801c9fe:	2200      	movs	r2, #0
 801ca00:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801ca04:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801ca08:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801ca12:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801ca16:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801ca1a:	460b      	mov	r3, r1
 801ca1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801ca20:	fb02 f203 	mul.w	r2, r2, r3
 801ca24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801ca28:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801ca2c:	4601      	mov	r1, r0
 801ca2e:	fb01 f303 	mul.w	r3, r1, r3
 801ca32:	4413      	add	r3, r2
 801ca34:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801ca38:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801ca3c:	fba2 1201 	umull	r1, r2, r2, r1
 801ca40:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801ca44:	460a      	mov	r2, r1
 801ca46:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801ca4a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801ca4e:	4413      	add	r3, r2
 801ca50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801ca54:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801ca58:	460b      	mov	r3, r1
 801ca5a:	eb18 0303 	adds.w	r3, r8, r3
 801ca5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ca62:	4613      	mov	r3, r2
 801ca64:	eb49 0303 	adc.w	r3, r9, r3
 801ca68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801ca6c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801ca70:	2200      	movs	r2, #0
 801ca72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801ca76:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801ca7a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801ca7e:	2200      	movs	r2, #0
 801ca80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801ca84:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801ca88:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801ca8c:	460b      	mov	r3, r1
 801ca8e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801ca92:	fb02 f203 	mul.w	r2, r2, r3
 801ca96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca9a:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801ca9e:	4601      	mov	r1, r0
 801caa0:	fb01 f303 	mul.w	r3, r1, r3
 801caa4:	4413      	add	r3, r2
 801caa6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801caaa:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801caae:	fba2 4501 	umull	r4, r5, r2, r1
 801cab2:	442b      	add	r3, r5
 801cab4:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801cab6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801caba:	2200      	movs	r2, #0
 801cabc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801cac0:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801cac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801cac8:	2200      	movs	r2, #0
 801caca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801cace:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801cad2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801cad6:	460b      	mov	r3, r1
 801cad8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801cadc:	fb02 f203 	mul.w	r2, r2, r3
 801cae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801cae4:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801cae8:	4601      	mov	r1, r0
 801caea:	fb01 f303 	mul.w	r3, r1, r3
 801caee:	4413      	add	r3, r2
 801caf0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801caf4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801caf8:	fba2 1201 	umull	r1, r2, r2, r1
 801cafc:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801cb00:	460a      	mov	r2, r1
 801cb02:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801cb06:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801cb0a:	4413      	add	r3, r2
 801cb0c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801cb10:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801cb14:	460b      	mov	r3, r1
 801cb16:	18e3      	adds	r3, r4, r3
 801cb18:	64bb      	str	r3, [r7, #72]	@ 0x48
 801cb1a:	4613      	mov	r3, r2
 801cb1c:	eb45 0303 	adc.w	r3, r5, r3
 801cb20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801cb22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cb26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801cb2a:	4602      	mov	r2, r0
 801cb2c:	189b      	adds	r3, r3, r2
 801cb2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801cb32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cb36:	460a      	mov	r2, r1
 801cb38:	4153      	adcs	r3, r2
 801cb3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801cb3e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801cb42:	2200      	movs	r2, #0
 801cb44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801cb48:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801cb4c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801cb50:	2200      	movs	r2, #0
 801cb52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801cb56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801cb5a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801cb5e:	460b      	mov	r3, r1
 801cb60:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801cb64:	fb02 f203 	mul.w	r2, r2, r3
 801cb68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801cb6c:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801cb70:	4601      	mov	r1, r0
 801cb72:	fb01 f303 	mul.w	r3, r1, r3
 801cb76:	4413      	add	r3, r2
 801cb78:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801cb7c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801cb80:	fba2 1201 	umull	r1, r2, r2, r1
 801cb84:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801cb88:	460a      	mov	r2, r1
 801cb8a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801cb8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801cb92:	4413      	add	r3, r2
 801cb94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801cb98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cb9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801cba0:	4602      	mov	r2, r0
 801cba2:	189b      	adds	r3, r3, r2
 801cba4:	623b      	str	r3, [r7, #32]
 801cba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801cbaa:	460a      	mov	r2, r1
 801cbac:	4153      	adcs	r3, r2
 801cbae:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cbb4:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801cbb8:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801cbbc:	f04f 0000 	mov.w	r0, #0
 801cbc0:	f04f 0100 	mov.w	r1, #0
 801cbc4:	0e90      	lsrs	r0, r2, #26
 801cbc6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cbca:	0e99      	lsrs	r1, r3, #26
 801cbcc:	4603      	mov	r3, r0
 801cbce:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801cbd2:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801cbd6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cbda:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801cbde:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801cbe8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801cbec:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801cbf0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801cbf4:	1851      	adds	r1, r2, r1
 801cbf6:	61b9      	str	r1, [r7, #24]
 801cbf8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801cbfc:	414b      	adcs	r3, r1
 801cbfe:	61fb      	str	r3, [r7, #28]
 801cc00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cc04:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801cc08:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801cc0c:	f04f 0000 	mov.w	r0, #0
 801cc10:	f04f 0100 	mov.w	r1, #0
 801cc14:	0e90      	lsrs	r0, r2, #26
 801cc16:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cc1a:	0e99      	lsrs	r1, r3, #26
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801cc22:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801cc26:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cc2a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801cc2e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cc32:	2200      	movs	r2, #0
 801cc34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801cc38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801cc3c:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801cc40:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801cc44:	1851      	adds	r1, r2, r1
 801cc46:	6139      	str	r1, [r7, #16]
 801cc48:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801cc4c:	414b      	adcs	r3, r1
 801cc4e:	617b      	str	r3, [r7, #20]
 801cc50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801cc54:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801cc58:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801cc5c:	f04f 0000 	mov.w	r0, #0
 801cc60:	f04f 0100 	mov.w	r1, #0
 801cc64:	0e90      	lsrs	r0, r2, #26
 801cc66:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801cc6a:	0e99      	lsrs	r1, r3, #26
 801cc6c:	4603      	mov	r3, r0
 801cc6e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801cc72:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801cc76:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cc7a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801cc7e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cc82:	2200      	movs	r2, #0
 801cc84:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cc86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801cc88:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801cc8c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801cc8e:	1851      	adds	r1, r2, r1
 801cc90:	60b9      	str	r1, [r7, #8]
 801cc92:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801cc94:	414b      	adcs	r3, r1
 801cc96:	60fb      	str	r3, [r7, #12]
 801cc98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cc9c:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801cca0:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801cca4:	f04f 0000 	mov.w	r0, #0
 801cca8:	f04f 0100 	mov.w	r1, #0
 801ccac:	0e90      	lsrs	r0, r2, #26
 801ccae:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801ccb2:	0e99      	lsrs	r1, r3, #26
 801ccb4:	4603      	mov	r3, r0
 801ccb6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801ccba:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801ccbe:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ccc2:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801ccc6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801ccca:	2200      	movs	r2, #0
 801cccc:	673b      	str	r3, [r7, #112]	@ 0x70
 801ccce:	677a      	str	r2, [r7, #116]	@ 0x74
 801ccd0:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801ccd4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801ccd6:	1851      	adds	r1, r2, r1
 801ccd8:	6039      	str	r1, [r7, #0]
 801ccda:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801ccdc:	414b      	adcs	r3, r1
 801ccde:	607b      	str	r3, [r7, #4]
 801cce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cce4:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801cce8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801ccec:	f04f 0000 	mov.w	r0, #0
 801ccf0:	f04f 0100 	mov.w	r1, #0
 801ccf4:	0e90      	lsrs	r0, r2, #26
 801ccf6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801ccfa:	0e99      	lsrs	r1, r3, #26
 801ccfc:	4603      	mov	r3, r0
 801ccfe:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801cd02:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801cd06:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cd0a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801cd0e:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801cd12:	4613      	mov	r3, r2
 801cd14:	009b      	lsls	r3, r3, #2
 801cd16:	441a      	add	r2, r3
 801cd18:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801cd1c:	4413      	add	r3, r2
 801cd1e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801cd22:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801cd26:	0e9b      	lsrs	r3, r3, #26
 801cd28:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801cd2c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801cd30:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cd34:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801cd38:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801cd3c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801cd40:	4413      	add	r3, r2
 801cd42:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801cd46:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801cd4a:	3310      	adds	r3, #16
 801cd4c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801cd50:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801cd54:	3b10      	subs	r3, #16
 801cd56:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801cd5a:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801cd5e:	2b0f      	cmp	r3, #15
 801cd60:	f63f a983 	bhi.w	801c06a <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801cd64:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cd68:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801cd6c:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801cd6e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cd72:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801cd76:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801cd78:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cd7c:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801cd80:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801cd82:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cd86:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801cd8a:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801cd8c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cd90:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801cd94:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801cd96:	bf00      	nop
 801cd98:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cda2 <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801cda2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cda6:	b0aa      	sub	sp, #168	@ 0xa8
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6678      	str	r0, [r7, #100]	@ 0x64
 801cdac:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801cdae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cdb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801cdb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d030      	beq.n	801ce20 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801cdbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cdc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cdc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801cdc8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801cdcc:	1c53      	adds	r3, r2, #1
 801cdce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801cdd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cdd6:	441a      	add	r2, r3
 801cdd8:	2301      	movs	r3, #1
 801cdda:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801cdde:	e00d      	b.n	801cdfc <poly1305_finish+0x5a>
 801cde0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801cde4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cde8:	4413      	add	r3, r2
 801cdea:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801cdee:	2300      	movs	r3, #0
 801cdf0:	7013      	strb	r3, [r2, #0]
 801cdf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cdf6:	3301      	adds	r3, #1
 801cdf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801cdfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801ce00:	2b0f      	cmp	r3, #15
 801ce02:	d9ed      	bls.n	801cde0 <poly1305_finish+0x3e>
    st->final = 1;
 801ce04:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801ce08:	2301      	movs	r3, #1
 801ce0a:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801ce0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce12:	333c      	adds	r3, #60	@ 0x3c
 801ce14:	2210      	movs	r2, #16
 801ce16:	4619      	mov	r1, r3
 801ce18:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801ce1c:	f7ff f8be 	bl	801bf9c <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801ce20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce24:	695b      	ldr	r3, [r3, #20]
 801ce26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801ce2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce2e:	699b      	ldr	r3, [r3, #24]
 801ce30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801ce34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce38:	69db      	ldr	r3, [r3, #28]
 801ce3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801ce3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce42:	6a1b      	ldr	r3, [r3, #32]
 801ce44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801ce48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ce4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801ce52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801ce56:	0e9b      	lsrs	r3, r3, #26
 801ce58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801ce5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801ce60:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ce64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801ce68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801ce6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ce70:	4413      	add	r3, r2
 801ce72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801ce76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801ce7a:	0e9b      	lsrs	r3, r3, #26
 801ce7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801ce80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801ce84:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ce88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801ce8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801ce90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ce94:	4413      	add	r3, r2
 801ce96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801ce9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801ce9e:	0e9b      	lsrs	r3, r3, #26
 801cea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801cea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cea8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ceac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801ceb0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801ceb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801ceb8:	4413      	add	r3, r2
 801ceba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801cebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801cec2:	0e9b      	lsrs	r3, r3, #26
 801cec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801cec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801cecc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801ced0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801ced4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801ced8:	4613      	mov	r3, r2
 801ceda:	009b      	lsls	r3, r3, #2
 801cedc:	441a      	add	r2, r3
 801cede:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cee2:	4413      	add	r3, r2
 801cee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801cee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ceec:	0e9b      	lsrs	r3, r3, #26
 801ceee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801cef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cef6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cefa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801cefe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801cf02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cf06:	4413      	add	r3, r2
 801cf08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801cf0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cf10:	3305      	adds	r3, #5
 801cf12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801cf16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801cf1a:	0e9b      	lsrs	r3, r3, #26
 801cf1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801cf20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801cf24:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cf28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801cf2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801cf30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cf34:	4413      	add	r3, r2
 801cf36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801cf3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801cf3e:	0e9b      	lsrs	r3, r3, #26
 801cf40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801cf44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801cf48:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cf4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801cf50:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801cf54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cf58:	4413      	add	r3, r2
 801cf5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801cf5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cf5e:	0e9b      	lsrs	r3, r3, #26
 801cf60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801cf64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cf66:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cf6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801cf6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801cf70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cf74:	4413      	add	r3, r2
 801cf76:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801cf78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf7a:	0e9b      	lsrs	r3, r3, #26
 801cf7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801cf80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf82:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801cf86:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801cf88:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801cf8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cf90:	4413      	add	r3, r2
 801cf92:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801cf96:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801cf98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cf9a:	0fdb      	lsrs	r3, r3, #31
 801cf9c:	3b01      	subs	r3, #1
 801cf9e:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801cfa0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801cfa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfa6:	4013      	ands	r3, r2
 801cfa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801cfac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801cfb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfb2:	4013      	ands	r3, r2
 801cfb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801cfb8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801cfba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfbc:	4013      	ands	r3, r2
 801cfbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801cfc0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801cfc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfc4:	4013      	ands	r3, r2
 801cfc6:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801cfc8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801cfca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfcc:	4013      	ands	r3, r2
 801cfce:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801cfd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfd2:	43db      	mvns	r3, r3
 801cfd4:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801cfd6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801cfda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfdc:	401a      	ands	r2, r3
 801cfde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801cfe2:	4313      	orrs	r3, r2
 801cfe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801cfe8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801cfec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cfee:	401a      	ands	r2, r3
 801cff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801cff4:	4313      	orrs	r3, r2
 801cff6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801cffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801cffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d000:	401a      	ands	r2, r3
 801d002:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d004:	4313      	orrs	r3, r2
 801d006:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801d00a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801d00e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d010:	401a      	ands	r2, r3
 801d012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d014:	4313      	orrs	r3, r2
 801d016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801d01a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801d01e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d020:	401a      	ands	r2, r3
 801d022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d024:	4313      	orrs	r3, r2
 801d026:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801d02a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801d02e:	069a      	lsls	r2, r3, #26
 801d030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801d034:	4313      	orrs	r3, r2
 801d036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801d03a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801d03e:	099a      	lsrs	r2, r3, #6
 801d040:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d044:	051b      	lsls	r3, r3, #20
 801d046:	4313      	orrs	r3, r2
 801d048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801d04c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d050:	0b1a      	lsrs	r2, r3, #12
 801d052:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d056:	039b      	lsls	r3, r3, #14
 801d058:	4313      	orrs	r3, r2
 801d05a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801d05e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d062:	0c9a      	lsrs	r2, r3, #18
 801d064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801d068:	021b      	lsls	r3, r3, #8
 801d06a:	4313      	orrs	r3, r2
 801d06c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801d070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801d074:	2200      	movs	r2, #0
 801d076:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d078:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801d07a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d080:	2200      	movs	r2, #0
 801d082:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d084:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801d086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d088:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801d08c:	4602      	mov	r2, r0
 801d08e:	189b      	adds	r3, r3, r2
 801d090:	61bb      	str	r3, [r7, #24]
 801d092:	460b      	mov	r3, r1
 801d094:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d096:	eb42 0303 	adc.w	r3, r2, r3
 801d09a:	61fb      	str	r3, [r7, #28]
 801d09c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d0a0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801d0a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d0a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801d0aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801d0ae:	2200      	movs	r2, #0
 801d0b0:	653b      	str	r3, [r7, #80]	@ 0x50
 801d0b2:	657a      	str	r2, [r7, #84]	@ 0x54
 801d0b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0be:	647a      	str	r2, [r7, #68]	@ 0x44
 801d0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d0c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801d0c6:	4602      	mov	r2, r0
 801d0c8:	189c      	adds	r4, r3, r2
 801d0ca:	460b      	mov	r3, r1
 801d0cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d0ce:	eb42 0303 	adc.w	r3, r2, r3
 801d0d2:	461d      	mov	r5, r3
 801d0d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801d0d8:	f04f 0000 	mov.w	r0, #0
 801d0dc:	f04f 0100 	mov.w	r1, #0
 801d0e0:	0018      	movs	r0, r3
 801d0e2:	2100      	movs	r1, #0
 801d0e4:	1823      	adds	r3, r4, r0
 801d0e6:	613b      	str	r3, [r7, #16]
 801d0e8:	eb45 0301 	adc.w	r3, r5, r1
 801d0ec:	617b      	str	r3, [r7, #20]
 801d0ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801d0f2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801d0f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d0f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801d0fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d100:	2200      	movs	r2, #0
 801d102:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d104:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801d106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d10c:	2200      	movs	r2, #0
 801d10e:	633b      	str	r3, [r7, #48]	@ 0x30
 801d110:	637a      	str	r2, [r7, #52]	@ 0x34
 801d112:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801d116:	4623      	mov	r3, r4
 801d118:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801d11c:	4602      	mov	r2, r0
 801d11e:	eb13 0a02 	adds.w	sl, r3, r2
 801d122:	462b      	mov	r3, r5
 801d124:	460a      	mov	r2, r1
 801d126:	eb43 0b02 	adc.w	fp, r3, r2
 801d12a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801d12e:	f04f 0200 	mov.w	r2, #0
 801d132:	f04f 0300 	mov.w	r3, #0
 801d136:	000a      	movs	r2, r1
 801d138:	2300      	movs	r3, #0
 801d13a:	eb1a 0102 	adds.w	r1, sl, r2
 801d13e:	60b9      	str	r1, [r7, #8]
 801d140:	eb4b 0303 	adc.w	r3, fp, r3
 801d144:	60fb      	str	r3, [r7, #12]
 801d146:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801d14a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801d14e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801d154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d158:	2200      	movs	r2, #0
 801d15a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d15c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d15e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d164:	2200      	movs	r2, #0
 801d166:	623b      	str	r3, [r7, #32]
 801d168:	627a      	str	r2, [r7, #36]	@ 0x24
 801d16a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801d16e:	4623      	mov	r3, r4
 801d170:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801d174:	4602      	mov	r2, r0
 801d176:	eb13 0802 	adds.w	r8, r3, r2
 801d17a:	462b      	mov	r3, r5
 801d17c:	460a      	mov	r2, r1
 801d17e:	eb43 0902 	adc.w	r9, r3, r2
 801d182:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801d186:	f04f 0200 	mov.w	r2, #0
 801d18a:	f04f 0300 	mov.w	r3, #0
 801d18e:	000a      	movs	r2, r1
 801d190:	2300      	movs	r3, #0
 801d192:	eb18 0102 	adds.w	r1, r8, r2
 801d196:	6039      	str	r1, [r7, #0]
 801d198:	eb49 0303 	adc.w	r3, r9, r3
 801d19c:	607b      	str	r3, [r7, #4]
 801d19e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d1a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801d1a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801d1a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801d1ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801d1b0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801d1b2:	f7fe fe56 	bl	801be62 <U32TO8>
  U32TO8(mac + 4, h1);
 801d1b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d1b8:	3304      	adds	r3, #4
 801d1ba:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f7fe fe4f 	bl	801be62 <U32TO8>
  U32TO8(mac + 8, h2);
 801d1c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d1c6:	3308      	adds	r3, #8
 801d1c8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801d1cc:	4618      	mov	r0, r3
 801d1ce:	f7fe fe48 	bl	801be62 <U32TO8>
  U32TO8(mac + 12, h3);
 801d1d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d1d4:	330c      	adds	r3, #12
 801d1d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f7fe fe41 	bl	801be62 <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801d1e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801d1e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d1ec:	2200      	movs	r2, #0
 801d1ee:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801d1f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801d1f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d1fc:	2200      	movs	r2, #0
 801d1fe:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801d200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d204:	2200      	movs	r2, #0
 801d206:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801d208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d20c:	2200      	movs	r2, #0
 801d20e:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801d210:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d214:	2200      	movs	r2, #0
 801d216:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801d218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d21c:	2200      	movs	r2, #0
 801d21e:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801d220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d224:	2200      	movs	r2, #0
 801d226:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801d228:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d22c:	2200      	movs	r2, #0
 801d22e:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801d230:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d234:	2200      	movs	r2, #0
 801d236:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801d238:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d23c:	2200      	movs	r2, #0
 801d23e:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801d240:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d244:	2200      	movs	r2, #0
 801d246:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801d248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d24c:	2200      	movs	r2, #0
 801d24e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801d250:	bf00      	nop
 801d252:	37a8      	adds	r7, #168	@ 0xa8
 801d254:	46bd      	mov	sp, r7
 801d256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d25a <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801d25a:	b580      	push	{r7, lr}
 801d25c:	b088      	sub	sp, #32
 801d25e:	af00      	add	r7, sp, #0
 801d260:	60f8      	str	r0, [r7, #12]
 801d262:	60b9      	str	r1, [r7, #8]
 801d264:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801d26a:	697b      	ldr	r3, [r7, #20]
 801d26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d03d      	beq.n	801d2ee <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801d272:	697b      	ldr	r3, [r7, #20]
 801d274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d276:	f1c3 0310 	rsb	r3, r3, #16
 801d27a:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801d27c:	69ba      	ldr	r2, [r7, #24]
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	429a      	cmp	r2, r3
 801d282:	d901      	bls.n	801d288 <poly1305_update+0x2e>
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801d288:	2300      	movs	r3, #0
 801d28a:	61fb      	str	r3, [r7, #28]
 801d28c:	e00f      	b.n	801d2ae <poly1305_update+0x54>
 801d28e:	68ba      	ldr	r2, [r7, #8]
 801d290:	69fb      	ldr	r3, [r7, #28]
 801d292:	441a      	add	r2, r3
 801d294:	697b      	ldr	r3, [r7, #20]
 801d296:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801d298:	69fb      	ldr	r3, [r7, #28]
 801d29a:	440b      	add	r3, r1
 801d29c:	7811      	ldrb	r1, [r2, #0]
 801d29e:	697a      	ldr	r2, [r7, #20]
 801d2a0:	4413      	add	r3, r2
 801d2a2:	460a      	mov	r2, r1
 801d2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801d2a8:	69fb      	ldr	r3, [r7, #28]
 801d2aa:	3301      	adds	r3, #1
 801d2ac:	61fb      	str	r3, [r7, #28]
 801d2ae:	69fa      	ldr	r2, [r7, #28]
 801d2b0:	69bb      	ldr	r3, [r7, #24]
 801d2b2:	429a      	cmp	r2, r3
 801d2b4:	d3eb      	bcc.n	801d28e <poly1305_update+0x34>
    bytes -= want;
 801d2b6:	687a      	ldr	r2, [r7, #4]
 801d2b8:	69bb      	ldr	r3, [r7, #24]
 801d2ba:	1ad3      	subs	r3, r2, r3
 801d2bc:	607b      	str	r3, [r7, #4]
    m += want;
 801d2be:	68ba      	ldr	r2, [r7, #8]
 801d2c0:	69bb      	ldr	r3, [r7, #24]
 801d2c2:	4413      	add	r3, r2
 801d2c4:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801d2c6:	697b      	ldr	r3, [r7, #20]
 801d2c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d2ca:	69bb      	ldr	r3, [r7, #24]
 801d2cc:	441a      	add	r2, r3
 801d2ce:	697b      	ldr	r3, [r7, #20]
 801d2d0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801d2d2:	697b      	ldr	r3, [r7, #20]
 801d2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2d6:	2b0f      	cmp	r3, #15
 801d2d8:	d93e      	bls.n	801d358 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	333c      	adds	r3, #60	@ 0x3c
 801d2de:	2210      	movs	r2, #16
 801d2e0:	4619      	mov	r1, r3
 801d2e2:	6978      	ldr	r0, [r7, #20]
 801d2e4:	f7fe fe5a 	bl	801bf9c <poly1305_blocks>
    st->leftover = 0;
 801d2e8:	697b      	ldr	r3, [r7, #20]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	2b0f      	cmp	r3, #15
 801d2f2:	d910      	bls.n	801d316 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f023 030f 	bic.w	r3, r3, #15
 801d2fa:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801d2fc:	693a      	ldr	r2, [r7, #16]
 801d2fe:	68b9      	ldr	r1, [r7, #8]
 801d300:	6978      	ldr	r0, [r7, #20]
 801d302:	f7fe fe4b 	bl	801bf9c <poly1305_blocks>
    m += want;
 801d306:	68ba      	ldr	r2, [r7, #8]
 801d308:	693b      	ldr	r3, [r7, #16]
 801d30a:	4413      	add	r3, r2
 801d30c:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801d30e:	687a      	ldr	r2, [r7, #4]
 801d310:	693b      	ldr	r3, [r7, #16]
 801d312:	1ad3      	subs	r3, r2, r3
 801d314:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d01e      	beq.n	801d35a <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801d31c:	2300      	movs	r3, #0
 801d31e:	61fb      	str	r3, [r7, #28]
 801d320:	e00f      	b.n	801d342 <poly1305_update+0xe8>
 801d322:	68ba      	ldr	r2, [r7, #8]
 801d324:	69fb      	ldr	r3, [r7, #28]
 801d326:	441a      	add	r2, r3
 801d328:	697b      	ldr	r3, [r7, #20]
 801d32a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801d32c:	69fb      	ldr	r3, [r7, #28]
 801d32e:	440b      	add	r3, r1
 801d330:	7811      	ldrb	r1, [r2, #0]
 801d332:	697a      	ldr	r2, [r7, #20]
 801d334:	4413      	add	r3, r2
 801d336:	460a      	mov	r2, r1
 801d338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801d33c:	69fb      	ldr	r3, [r7, #28]
 801d33e:	3301      	adds	r3, #1
 801d340:	61fb      	str	r3, [r7, #28]
 801d342:	69fa      	ldr	r2, [r7, #28]
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	429a      	cmp	r2, r3
 801d348:	d3eb      	bcc.n	801d322 <poly1305_update+0xc8>
    st->leftover += bytes;
 801d34a:	697b      	ldr	r3, [r7, #20]
 801d34c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	441a      	add	r2, r3
 801d352:	697b      	ldr	r3, [r7, #20]
 801d354:	639a      	str	r2, [r3, #56]	@ 0x38
 801d356:	e000      	b.n	801d35a <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801d358:	bf00      	nop
  }
}
 801d35a:	3720      	adds	r7, #32
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}

0801d360 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801d360:	b580      	push	{r7, lr}
 801d362:	b084      	sub	sp, #16
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
 801d368:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	f003 030f 	and.w	r3, r3, #15
 801d370:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	2b00      	cmp	r3, #0
 801d376:	d007      	beq.n	801d388 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	f1c3 0310 	rsb	r3, r3, #16
 801d37e:	461a      	mov	r2, r3
 801d380:	4903      	ldr	r1, [pc, #12]	@ (801d390 <pad_if_needed+0x30>)
 801d382:	6878      	ldr	r0, [r7, #4]
 801d384:	f7ff ff69 	bl	801d25a <poly1305_update>
  }
}
 801d388:	bf00      	nop
 801d38a:	3710      	adds	r7, #16
 801d38c:	46bd      	mov	sp, r7
 801d38e:	bd80      	pop	{r7, pc}
 801d390:	24002390 	.word	0x24002390

0801d394 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801d394:	b580      	push	{r7, lr}
 801d396:	b086      	sub	sp, #24
 801d398:	af00      	add	r7, sp, #0
 801d39a:	60f8      	str	r0, [r7, #12]
 801d39c:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801d3a0:	783b      	ldrb	r3, [r7, #0]
 801d3a2:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801d3a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d3a8:	f04f 0200 	mov.w	r2, #0
 801d3ac:	f04f 0300 	mov.w	r3, #0
 801d3b0:	0a02      	lsrs	r2, r0, #8
 801d3b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801d3b6:	0a0b      	lsrs	r3, r1, #8
 801d3b8:	b2d3      	uxtb	r3, r2
 801d3ba:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801d3bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d3c0:	f04f 0200 	mov.w	r2, #0
 801d3c4:	f04f 0300 	mov.w	r3, #0
 801d3c8:	0c02      	lsrs	r2, r0, #16
 801d3ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801d3ce:	0c0b      	lsrs	r3, r1, #16
 801d3d0:	b2d3      	uxtb	r3, r2
 801d3d2:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801d3d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d3d8:	f04f 0200 	mov.w	r2, #0
 801d3dc:	f04f 0300 	mov.w	r3, #0
 801d3e0:	0e02      	lsrs	r2, r0, #24
 801d3e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801d3e6:	0e0b      	lsrs	r3, r1, #24
 801d3e8:	b2d3      	uxtb	r3, r2
 801d3ea:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801d3ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d3f0:	f04f 0200 	mov.w	r2, #0
 801d3f4:	f04f 0300 	mov.w	r3, #0
 801d3f8:	000a      	movs	r2, r1
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	b2d3      	uxtb	r3, r2
 801d3fe:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801d400:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d404:	f04f 0200 	mov.w	r2, #0
 801d408:	f04f 0300 	mov.w	r3, #0
 801d40c:	0a0a      	lsrs	r2, r1, #8
 801d40e:	2300      	movs	r3, #0
 801d410:	b2d3      	uxtb	r3, r2
 801d412:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801d414:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d418:	f04f 0200 	mov.w	r2, #0
 801d41c:	f04f 0300 	mov.w	r3, #0
 801d420:	0c0a      	lsrs	r2, r1, #16
 801d422:	2300      	movs	r3, #0
 801d424:	b2d3      	uxtb	r3, r2
 801d426:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801d428:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d42c:	f04f 0200 	mov.w	r2, #0
 801d430:	f04f 0300 	mov.w	r3, #0
 801d434:	0e0a      	lsrs	r2, r1, #24
 801d436:	2300      	movs	r3, #0
 801d438:	b2d3      	uxtb	r3, r2
 801d43a:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801d43c:	f107 0310 	add.w	r3, r7, #16
 801d440:	2208      	movs	r2, #8
 801d442:	4619      	mov	r1, r3
 801d444:	68f8      	ldr	r0, [r7, #12]
 801d446:	f7ff ff08 	bl	801d25a <poly1305_update>
}
 801d44a:	bf00      	nop
 801d44c:	3718      	adds	r7, #24
 801d44e:	46bd      	mov	sp, r7
 801d450:	bd80      	pop	{r7, pc}

0801d452 <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801d452:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801d456:	b0b0      	sub	sp, #192	@ 0xc0
 801d458:	af00      	add	r7, sp, #0
 801d45a:	60f8      	str	r0, [r7, #12]
 801d45c:	60b9      	str	r1, [r7, #8]
 801d45e:	607a      	str	r2, [r7, #4]
 801d460:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801d462:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d466:	2220      	movs	r2, #32
 801d468:	2100      	movs	r1, #0
 801d46a:	4618      	mov	r0, r3
 801d46c:	f00a f990 	bl	8027790 <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801d470:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801d474:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801d478:	6839      	ldr	r1, [r7, #0]
 801d47a:	4618      	mov	r0, r3
 801d47c:	f7fe fcb5 	bl	801bdea <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801d480:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801d484:	f107 0314 	add.w	r3, r7, #20
 801d488:	4611      	mov	r1, r2
 801d48a:	4618      	mov	r0, r3
 801d48c:	f7fe fd0a 	bl	801bea4 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801d490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d494:	2b00      	cmp	r3, #0
 801d496:	d013      	beq.n	801d4c0 <poly1305_calculate_mac+0x6e>
 801d498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d00f      	beq.n	801d4c0 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801d4a0:	f107 0314 	add.w	r3, r7, #20
 801d4a4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801d4a8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	f7ff fed4 	bl	801d25a <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801d4b2:	f107 0314 	add.w	r3, r7, #20
 801d4b6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7ff ff50 	bl	801d360 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801d4c0:	f107 0314 	add.w	r3, r7, #20
 801d4c4:	687a      	ldr	r2, [r7, #4]
 801d4c6:	68b9      	ldr	r1, [r7, #8]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7ff fec6 	bl	801d25a <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801d4ce:	f107 0314 	add.w	r3, r7, #20
 801d4d2:	6879      	ldr	r1, [r7, #4]
 801d4d4:	4618      	mov	r0, r3
 801d4d6:	f7ff ff43 	bl	801d360 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801d4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801d4de:	2200      	movs	r2, #0
 801d4e0:	4698      	mov	r8, r3
 801d4e2:	4691      	mov	r9, r2
 801d4e4:	f107 0114 	add.w	r1, r7, #20
 801d4e8:	4642      	mov	r2, r8
 801d4ea:	464b      	mov	r3, r9
 801d4ec:	4608      	mov	r0, r1
 801d4ee:	f7ff ff51 	bl	801d394 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	461c      	mov	r4, r3
 801d4f8:	4615      	mov	r5, r2
 801d4fa:	f107 0114 	add.w	r1, r7, #20
 801d4fe:	4622      	mov	r2, r4
 801d500:	462b      	mov	r3, r5
 801d502:	4608      	mov	r0, r1
 801d504:	f7ff ff46 	bl	801d394 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801d508:	f107 0314 	add.w	r3, r7, #20
 801d50c:	68f9      	ldr	r1, [r7, #12]
 801d50e:	4618      	mov	r0, r3
 801d510:	f7ff fc47 	bl	801cda2 <poly1305_finish>
}
 801d514:	bf00      	nop
 801d516:	37c0      	adds	r7, #192	@ 0xc0
 801d518:	46bd      	mov	sp, r7
 801d51a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801d51e <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801d51e:	b580      	push	{r7, lr}
 801d520:	b08a      	sub	sp, #40	@ 0x28
 801d522:	af04      	add	r7, sp, #16
 801d524:	60f8      	str	r0, [r7, #12]
 801d526:	60b9      	str	r1, [r7, #8]
 801d528:	607a      	str	r2, [r7, #4]
 801d52a:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d52e:	3310      	adds	r3, #16
 801d530:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801d532:	68fa      	ldr	r2, [r7, #12]
 801d534:	697b      	ldr	r3, [r7, #20]
 801d536:	4413      	add	r3, r2
 801d538:	461a      	mov	r2, r3
 801d53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d53c:	429a      	cmp	r2, r3
 801d53e:	d909      	bls.n	801d554 <mg_chacha20_poly1305_encrypt+0x36>
 801d540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d544:	4413      	add	r3, r2
 801d546:	461a      	mov	r2, r3
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d902      	bls.n	801d554 <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801d54e:	f04f 33ff 	mov.w	r3, #4294967295
 801d552:	e018      	b.n	801d586 <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801d554:	2301      	movs	r3, #1
 801d556:	9301      	str	r3, [sp, #4]
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	9300      	str	r3, [sp, #0]
 801d55c:	68bb      	ldr	r3, [r7, #8]
 801d55e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d562:	68f8      	ldr	r0, [r7, #12]
 801d564:	f7fe fbc9 	bl	801bcfa <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801d568:	68fa      	ldr	r2, [r7, #12]
 801d56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d56c:	18d0      	adds	r0, r2, r3
 801d56e:	6a3b      	ldr	r3, [r7, #32]
 801d570:	9302      	str	r3, [sp, #8]
 801d572:	683b      	ldr	r3, [r7, #0]
 801d574:	9301      	str	r3, [sp, #4]
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	9300      	str	r3, [sp, #0]
 801d57a:	68bb      	ldr	r3, [r7, #8]
 801d57c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d57e:	68f9      	ldr	r1, [r7, #12]
 801d580:	f7ff ff67 	bl	801d452 <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801d584:	697b      	ldr	r3, [r7, #20]
}
 801d586:	4618      	mov	r0, r3
 801d588:	3718      	adds	r7, #24
 801d58a:	46bd      	mov	sp, r7
 801d58c:	bd80      	pop	{r7, pc}

0801d58e <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801d58e:	b580      	push	{r7, lr}
 801d590:	b088      	sub	sp, #32
 801d592:	af02      	add	r7, sp, #8
 801d594:	60f8      	str	r0, [r7, #12]
 801d596:	60b9      	str	r1, [r7, #8]
 801d598:	607a      	str	r2, [r7, #4]
 801d59a:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801d59c:	6a3b      	ldr	r3, [r7, #32]
 801d59e:	3b10      	subs	r3, #16
 801d5a0:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801d5a2:	683a      	ldr	r2, [r7, #0]
 801d5a4:	6a3b      	ldr	r3, [r7, #32]
 801d5a6:	4413      	add	r3, r2
 801d5a8:	461a      	mov	r2, r3
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	429a      	cmp	r2, r3
 801d5ae:	d909      	bls.n	801d5c4 <mg_chacha20_poly1305_decrypt+0x36>
 801d5b0:	68fa      	ldr	r2, [r7, #12]
 801d5b2:	697b      	ldr	r3, [r7, #20]
 801d5b4:	4413      	add	r3, r2
 801d5b6:	461a      	mov	r2, r3
 801d5b8:	683b      	ldr	r3, [r7, #0]
 801d5ba:	429a      	cmp	r2, r3
 801d5bc:	d902      	bls.n	801d5c4 <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801d5be:	f04f 33ff 	mov.w	r3, #4294967295
 801d5c2:	e00a      	b.n	801d5da <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	9301      	str	r3, [sp, #4]
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	9300      	str	r3, [sp, #0]
 801d5cc:	68bb      	ldr	r3, [r7, #8]
 801d5ce:	697a      	ldr	r2, [r7, #20]
 801d5d0:	6839      	ldr	r1, [r7, #0]
 801d5d2:	68f8      	ldr	r0, [r7, #12]
 801d5d4:	f7fe fb91 	bl	801bcfa <chacha20_xor_stream>
  return actual_size;
 801d5d8:	697b      	ldr	r3, [r7, #20]
}
 801d5da:	4618      	mov	r0, r3
 801d5dc:	3718      	adds	r7, #24
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	bd80      	pop	{r7, pc}

0801d5e2 <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801d5e2:	b580      	push	{r7, lr}
 801d5e4:	b082      	sub	sp, #8
 801d5e6:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 801d5e8:	2138      	movs	r1, #56	@ 0x38
 801d5ea:	2001      	movs	r0, #1
 801d5ec:	f008 fa22 	bl	8025a34 <calloc>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801d5f4:	2102      	movs	r1, #2
 801d5f6:	6878      	ldr	r0, [r7, #4]
 801d5f8:	f000 fefe 	bl	801e3f8 <alloc>
 801d5fc:	4602      	mov	r2, r0
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	689b      	ldr	r3, [r3, #8]
 801d606:	68db      	ldr	r3, [r3, #12]
 801d608:	2200      	movs	r2, #0
 801d60a:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	689b      	ldr	r3, [r3, #8]
 801d610:	68db      	ldr	r3, [r3, #12]
 801d612:	3304      	adds	r3, #4
 801d614:	2201      	movs	r2, #1
 801d616:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	689b      	ldr	r3, [r3, #8]
 801d61c:	4618      	mov	r0, r3
 801d61e:	f000 f81d 	bl	801d65c <bi_permanent>
  return ctx;
 801d622:	687b      	ldr	r3, [r7, #4]
}
 801d624:	4618      	mov	r0, r3
 801d626:	3708      	adds	r7, #8
 801d628:	46bd      	mov	sp, r7
 801d62a:	bd80      	pop	{r7, pc}

0801d62c <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801d62c:	b480      	push	{r7}
 801d62e:	b083      	sub	sp, #12
 801d630:	af00      	add	r7, sp, #0
 801d632:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	689b      	ldr	r3, [r3, #8]
 801d638:	4a07      	ldr	r2, [pc, #28]	@ (801d658 <bi_copy+0x2c>)
 801d63a:	4293      	cmp	r3, r2
 801d63c:	d004      	beq.n	801d648 <bi_copy+0x1c>
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	689b      	ldr	r3, [r3, #8]
 801d642:	1c5a      	adds	r2, r3, #1
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	609a      	str	r2, [r3, #8]
  return bi;
 801d648:	687b      	ldr	r3, [r7, #4]
}
 801d64a:	4618      	mov	r0, r3
 801d64c:	370c      	adds	r7, #12
 801d64e:	46bd      	mov	sp, r7
 801d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d654:	4770      	bx	lr
 801d656:	bf00      	nop
 801d658:	7fff55aa 	.word	0x7fff55aa

0801d65c <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801d65c:	b580      	push	{r7, lr}
 801d65e:	b082      	sub	sp, #8
 801d660:	af00      	add	r7, sp, #0
 801d662:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	689b      	ldr	r3, [r3, #8]
 801d668:	2b01      	cmp	r3, #1
 801d66a:	d001      	beq.n	801d670 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801d66c:	f008 f9b4 	bl	80259d8 <abort>
  }

  bi->refs = PERMANENT;
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	4a03      	ldr	r2, [pc, #12]	@ (801d680 <bi_permanent+0x24>)
 801d674:	609a      	str	r2, [r3, #8]
}
 801d676:	bf00      	nop
 801d678:	3708      	adds	r7, #8
 801d67a:	46bd      	mov	sp, r7
 801d67c:	bd80      	pop	{r7, pc}
 801d67e:	bf00      	nop
 801d680:	7fff55aa 	.word	0x7fff55aa

0801d684 <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801d684:	b580      	push	{r7, lr}
 801d686:	b082      	sub	sp, #8
 801d688:	af00      	add	r7, sp, #0
 801d68a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	689b      	ldr	r3, [r3, #8]
 801d690:	4a05      	ldr	r2, [pc, #20]	@ (801d6a8 <bi_depermanent+0x24>)
 801d692:	4293      	cmp	r3, r2
 801d694:	d001      	beq.n	801d69a <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801d696:	f008 f99f 	bl	80259d8 <abort>
  }

  bi->refs = 1;
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	2201      	movs	r2, #1
 801d69e:	609a      	str	r2, [r3, #8]
}
 801d6a0:	bf00      	nop
 801d6a2:	3708      	adds	r7, #8
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	bd80      	pop	{r7, pc}
 801d6a8:	7fff55aa 	.word	0x7fff55aa

0801d6ac <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b082      	sub	sp, #8
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	6078      	str	r0, [r7, #4]
 801d6b4:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801d6b6:	683b      	ldr	r3, [r7, #0]
 801d6b8:	689b      	ldr	r3, [r3, #8]
 801d6ba:	4a14      	ldr	r2, [pc, #80]	@ (801d70c <bi_free+0x60>)
 801d6bc:	4293      	cmp	r3, r2
 801d6be:	d01f      	beq.n	801d700 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801d6c0:	683b      	ldr	r3, [r7, #0]
 801d6c2:	689b      	ldr	r3, [r3, #8]
 801d6c4:	1e5a      	subs	r2, r3, #1
 801d6c6:	683b      	ldr	r3, [r7, #0]
 801d6c8:	609a      	str	r2, [r3, #8]
 801d6ca:	683b      	ldr	r3, [r7, #0]
 801d6cc:	689b      	ldr	r3, [r3, #8]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	dc18      	bgt.n	801d704 <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	685a      	ldr	r2, [r3, #4]
 801d6d6:	683b      	ldr	r3, [r7, #0]
 801d6d8:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	683a      	ldr	r2, [r7, #0]
 801d6de:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d6e4:	1c5a      	adds	r2, r3, #1
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6ee:	1e5a      	subs	r2, r3, #1
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	da04      	bge.n	801d706 <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801d6fc:	f008 f96c 	bl	80259d8 <abort>
    return;
 801d700:	bf00      	nop
 801d702:	e000      	b.n	801d706 <bi_free+0x5a>
    return;
 801d704:	bf00      	nop
  }
}
 801d706:	3708      	adds	r7, #8
 801d708:	46bd      	mov	sp, r7
 801d70a:	bd80      	pop	{r7, pc}
 801d70c:	7fff55aa 	.word	0x7fff55aa

0801d710 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801d710:	b580      	push	{r7, lr}
 801d712:	b084      	sub	sp, #16
 801d714:	af00      	add	r7, sp, #0
 801d716:	6078      	str	r0, [r7, #4]
 801d718:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801d71a:	2101      	movs	r1, #1
 801d71c:	6878      	ldr	r0, [r7, #4]
 801d71e:	f000 fe6b 	bl	801e3f8 <alloc>
 801d722:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	68db      	ldr	r3, [r3, #12]
 801d728:	683a      	ldr	r2, [r7, #0]
 801d72a:	601a      	str	r2, [r3, #0]
  return biR;
 801d72c:	68fb      	ldr	r3, [r7, #12]
}
 801d72e:	4618      	mov	r0, r3
 801d730:	3710      	adds	r7, #16
 801d732:	46bd      	mov	sp, r7
 801d734:	bd80      	pop	{r7, pc}

0801d736 <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801d736:	b580      	push	{r7, lr}
 801d738:	b084      	sub	sp, #16
 801d73a:	af00      	add	r7, sp, #0
 801d73c:	6078      	str	r0, [r7, #4]
 801d73e:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801d740:	683b      	ldr	r3, [r7, #0]
 801d742:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d746:	4619      	mov	r1, r3
 801d748:	6878      	ldr	r0, [r7, #4]
 801d74a:	f000 fe55 	bl	801e3f8 <alloc>
 801d74e:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	68d8      	ldr	r0, [r3, #12]
 801d754:	683b      	ldr	r3, [r7, #0]
 801d756:	68d9      	ldr	r1, [r3, #12]
 801d758:	683b      	ldr	r3, [r7, #0]
 801d75a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d75e:	009b      	lsls	r3, r3, #2
 801d760:	461a      	mov	r2, r3
 801d762:	f00a f94e 	bl	8027a02 <memcpy>
  return biR;
 801d766:	68fb      	ldr	r3, [r7, #12]
}
 801d768:	4618      	mov	r0, r3
 801d76a:	3710      	adds	r7, #16
 801d76c:	46bd      	mov	sp, r7
 801d76e:	bd80      	pop	{r7, pc}

0801d770 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801d770:	b580      	push	{r7, lr}
 801d772:	b08c      	sub	sp, #48	@ 0x30
 801d774:	af00      	add	r7, sp, #0
 801d776:	60f8      	str	r0, [r7, #12]
 801d778:	60b9      	str	r1, [r7, #8]
 801d77a:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801d77c:	2300      	movs	r3, #0
 801d77e:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d786:	68bb      	ldr	r3, [r7, #8]
 801d788:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d78c:	4293      	cmp	r3, r2
 801d78e:	bfb8      	it	lt
 801d790:	4613      	movlt	r3, r2
 801d792:	b21b      	sxth	r3, r3
 801d794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801d796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d798:	3301      	adds	r3, #1
 801d79a:	4619      	mov	r1, r3
 801d79c:	68b8      	ldr	r0, [r7, #8]
 801d79e:	f000 fdcf 	bl	801e340 <more_comps>
  more_comps(bib, n);
 801d7a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d7a4:	6878      	ldr	r0, [r7, #4]
 801d7a6:	f000 fdcb 	bl	801e340 <more_comps>
  pa = bia->comps;
 801d7aa:	68bb      	ldr	r3, [r7, #8]
 801d7ac:	68db      	ldr	r3, [r3, #12]
 801d7ae:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	68db      	ldr	r3, [r3, #12]
 801d7b4:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7b8:	681a      	ldr	r2, [r3, #0]
 801d7ba:	6a3b      	ldr	r3, [r7, #32]
 801d7bc:	1d19      	adds	r1, r3, #4
 801d7be:	6239      	str	r1, [r7, #32]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	4413      	add	r3, r2
 801d7c4:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801d7c6:	69fa      	ldr	r2, [r7, #28]
 801d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7ca:	4413      	add	r3, r2
 801d7cc:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	69fa      	ldr	r2, [r7, #28]
 801d7d4:	429a      	cmp	r2, r3
 801d7d6:	bf34      	ite	cc
 801d7d8:	2301      	movcc	r3, #1
 801d7da:	2300      	movcs	r3, #0
 801d7dc:	b2db      	uxtb	r3, r3
 801d7de:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801d7e0:	69ba      	ldr	r2, [r7, #24]
 801d7e2:	69fb      	ldr	r3, [r7, #28]
 801d7e4:	429a      	cmp	r2, r3
 801d7e6:	bf34      	ite	cc
 801d7e8:	2301      	movcc	r3, #1
 801d7ea:	2300      	movcs	r3, #0
 801d7ec:	b2db      	uxtb	r3, r3
 801d7ee:	461a      	mov	r2, r3
 801d7f0:	697b      	ldr	r3, [r7, #20]
 801d7f2:	4313      	orrs	r3, r2
 801d7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7f8:	1d1a      	adds	r2, r3, #4
 801d7fa:	627a      	str	r2, [r7, #36]	@ 0x24
 801d7fc:	69ba      	ldr	r2, [r7, #24]
 801d7fe:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801d800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d802:	3b01      	subs	r3, #1
 801d804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d1d4      	bne.n	801d7b6 <bi_add+0x46>

  *pa = carry; /* do overflow */
 801d80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d80e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d810:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801d812:	6879      	ldr	r1, [r7, #4]
 801d814:	68f8      	ldr	r0, [r7, #12]
 801d816:	f7ff ff49 	bl	801d6ac <bi_free>
  return trim(bia);
 801d81a:	68b8      	ldr	r0, [r7, #8]
 801d81c:	f000 fe9d 	bl	801e55a <trim>
 801d820:	4603      	mov	r3, r0
}
 801d822:	4618      	mov	r0, r3
 801d824:	3730      	adds	r7, #48	@ 0x30
 801d826:	46bd      	mov	sp, r7
 801d828:	bd80      	pop	{r7, pc}

0801d82a <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801d82a:	b580      	push	{r7, lr}
 801d82c:	b08c      	sub	sp, #48	@ 0x30
 801d82e:	af00      	add	r7, sp, #0
 801d830:	60f8      	str	r0, [r7, #12]
 801d832:	60b9      	str	r1, [r7, #8]
 801d834:	607a      	str	r2, [r7, #4]
 801d836:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801d838:	68bb      	ldr	r3, [r7, #8]
 801d83a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801d840:	2300      	movs	r3, #0
 801d842:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801d844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d846:	6878      	ldr	r0, [r7, #4]
 801d848:	f000 fd7a 	bl	801e340 <more_comps>
  pa = bia->comps;
 801d84c:	68bb      	ldr	r3, [r7, #8]
 801d84e:	68db      	ldr	r3, [r3, #12]
 801d850:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	68db      	ldr	r3, [r3, #12]
 801d856:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801d858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d85a:	681a      	ldr	r2, [r3, #0]
 801d85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d85e:	1d19      	adds	r1, r3, #4
 801d860:	6279      	str	r1, [r7, #36]	@ 0x24
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	1ad3      	subs	r3, r2, r3
 801d866:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801d868:	69fa      	ldr	r2, [r7, #28]
 801d86a:	6a3b      	ldr	r3, [r7, #32]
 801d86c:	1ad3      	subs	r3, r2, r3
 801d86e:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801d870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	69fa      	ldr	r2, [r7, #28]
 801d876:	429a      	cmp	r2, r3
 801d878:	bf8c      	ite	hi
 801d87a:	2301      	movhi	r3, #1
 801d87c:	2300      	movls	r3, #0
 801d87e:	b2db      	uxtb	r3, r3
 801d880:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801d882:	69ba      	ldr	r2, [r7, #24]
 801d884:	69fb      	ldr	r3, [r7, #28]
 801d886:	429a      	cmp	r2, r3
 801d888:	bf8c      	ite	hi
 801d88a:	2301      	movhi	r3, #1
 801d88c:	2300      	movls	r3, #0
 801d88e:	b2db      	uxtb	r3, r3
 801d890:	461a      	mov	r2, r3
 801d892:	697b      	ldr	r3, [r7, #20]
 801d894:	4313      	orrs	r3, r2
 801d896:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801d898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d89a:	1d1a      	adds	r2, r3, #4
 801d89c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801d89e:	69ba      	ldr	r2, [r7, #24]
 801d8a0:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801d8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8a4:	3b01      	subs	r3, #1
 801d8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d1d4      	bne.n	801d858 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801d8ae:	683b      	ldr	r3, [r7, #0]
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d002      	beq.n	801d8ba <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801d8b4:	6a3a      	ldr	r2, [r7, #32]
 801d8b6:	683b      	ldr	r3, [r7, #0]
 801d8b8:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801d8ba:	6878      	ldr	r0, [r7, #4]
 801d8bc:	f000 fe4d 	bl	801e55a <trim>
 801d8c0:	4603      	mov	r3, r0
 801d8c2:	4619      	mov	r1, r3
 801d8c4:	68f8      	ldr	r0, [r7, #12]
 801d8c6:	f7ff fef1 	bl	801d6ac <bi_free>
  return trim(bia);
 801d8ca:	68b8      	ldr	r0, [r7, #8]
 801d8cc:	f000 fe45 	bl	801e55a <trim>
 801d8d0:	4603      	mov	r3, r0
}
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	3730      	adds	r7, #48	@ 0x30
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}

0801d8da <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801d8da:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d8de:	b094      	sub	sp, #80	@ 0x50
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801d8e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d8e6:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801d8e8:	2300      	movs	r3, #0
 801d8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8f2:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801d8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d8f6:	3301      	adds	r3, #1
 801d8f8:	4619      	mov	r1, r3
 801d8fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d8fc:	f000 fd7c 	bl	801e3f8 <alloc>
 801d900:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801d902:	2300      	movs	r3, #0
 801d904:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801d906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d908:	68db      	ldr	r3, [r3, #12]
 801d90a:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801d90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d90e:	68db      	ldr	r3, [r3, #12]
 801d910:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801d912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d914:	3301      	adds	r3, #1
 801d916:	009b      	lsls	r3, r3, #2
 801d918:	461a      	mov	r2, r3
 801d91a:	2100      	movs	r1, #0
 801d91c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d91e:	f009 ff37 	bl	8027790 <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801d922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	2200      	movs	r2, #0
 801d928:	61bb      	str	r3, [r7, #24]
 801d92a:	61fa      	str	r2, [r7, #28]
 801d92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d92e:	009a      	lsls	r2, r3, #2
 801d930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d932:	4413      	add	r3, r2
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	2200      	movs	r2, #0
 801d938:	613b      	str	r3, [r7, #16]
 801d93a:	617a      	str	r2, [r7, #20]
 801d93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d93e:	2200      	movs	r2, #0
 801d940:	469a      	mov	sl, r3
 801d942:	4693      	mov	fp, r2
 801d944:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d948:	460b      	mov	r3, r1
 801d94a:	fb0a f203 	mul.w	r2, sl, r3
 801d94e:	4603      	mov	r3, r0
 801d950:	fb03 f30b 	mul.w	r3, r3, fp
 801d954:	4413      	add	r3, r2
 801d956:	4602      	mov	r2, r0
 801d958:	fba2 450a 	umull	r4, r5, r2, sl
 801d95c:	442b      	add	r3, r5
 801d95e:	461d      	mov	r5, r3
 801d960:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d964:	460b      	mov	r3, r1
 801d966:	eb13 0804 	adds.w	r8, r3, r4
 801d96a:	4613      	mov	r3, r2
 801d96c:	eb43 0905 	adc.w	r9, r3, r5
 801d970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d972:	2200      	movs	r2, #0
 801d974:	60bb      	str	r3, [r7, #8]
 801d976:	60fa      	str	r2, [r7, #12]
 801d978:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d97c:	460b      	mov	r3, r1
 801d97e:	eb18 0303 	adds.w	r3, r8, r3
 801d982:	603b      	str	r3, [r7, #0]
 801d984:	4613      	mov	r3, r2
 801d986:	eb49 0303 	adc.w	r3, r9, r3
 801d98a:	607b      	str	r3, [r7, #4]
 801d98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d990:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801d994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d996:	1d13      	adds	r3, r2, #4
 801d998:	647b      	str	r3, [r7, #68]	@ 0x44
 801d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d99c:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801d99e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801d9a2:	f04f 0000 	mov.w	r0, #0
 801d9a6:	f04f 0100 	mov.w	r1, #0
 801d9aa:	0018      	movs	r0, r3
 801d9ac:	2100      	movs	r1, #0
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801d9b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d9b4:	3301      	adds	r3, #1
 801d9b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d9b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d9bc:	429a      	cmp	r2, r3
 801d9be:	dbb0      	blt.n	801d922 <bi_int_multiply+0x48>

  *r = carry;
 801d9c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d9c4:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801d9c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d9c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d9ca:	f7ff fe6f 	bl	801d6ac <bi_free>
  return trim(biR);
 801d9ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801d9d0:	f000 fdc3 	bl	801e55a <trim>
 801d9d4:	4603      	mov	r3, r0
}
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	3750      	adds	r7, #80	@ 0x50
 801d9da:	46bd      	mov	sp, r7
 801d9dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d9e0 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801d9e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d9e4:	b0a0      	sub	sp, #128	@ 0x80
 801d9e6:	af00      	add	r7, sp, #0
 801d9e8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d9ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 801d9ec:	647a      	str	r2, [r7, #68]	@ 0x44
 801d9ee:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801d9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d9f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d9f6:	673b      	str	r3, [r7, #112]	@ 0x70
 801d9f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d9fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d9fe:	461a      	mov	r2, r3
 801da00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801da02:	1ad3      	subs	r3, r2, r3
 801da04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801da06:	2300      	movs	r3, #0
 801da08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801da0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801da0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da10:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801da12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801da14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801da18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801da1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d00c      	beq.n	801da3c <bi_divide+0x5c>
 801da22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801da24:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801da26:	f000 fc36 	bl	801e296 <bi_compare>
 801da2a:	4603      	mov	r3, r0
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	dd05      	ble.n	801da3c <bi_divide+0x5c>
    bi_free(ctx, v);
 801da30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801da32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801da34:	f7ff fe3a 	bl	801d6ac <bi_free>
    return u;
 801da38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801da3a:	e1fe      	b.n	801de3a <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801da3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801da3e:	3301      	adds	r3, #1
 801da40:	4619      	mov	r1, r3
 801da42:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801da44:	f000 fcd8 	bl	801e3f8 <alloc>
 801da48:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801da4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801da4c:	3301      	adds	r3, #1
 801da4e:	4619      	mov	r1, r3
 801da50:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801da52:	f000 fcd1 	bl	801e3f8 <alloc>
 801da56:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801da58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801da5a:	f000 fd7e 	bl	801e55a <trim>
 801da5e:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801da60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da62:	68d9      	ldr	r1, [r3, #12]
 801da64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801da66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801da6a:	461a      	mov	r2, r3
 801da6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801da70:	4413      	add	r3, r2
 801da72:	009b      	lsls	r3, r3, #2
 801da74:	440b      	add	r3, r1
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	3301      	adds	r3, #1
 801da7a:	2200      	movs	r2, #0
 801da7c:	461c      	mov	r4, r3
 801da7e:	4615      	mov	r5, r2
 801da80:	4622      	mov	r2, r4
 801da82:	462b      	mov	r3, r5
 801da84:	f04f 0000 	mov.w	r0, #0
 801da88:	f04f 0101 	mov.w	r1, #1
 801da8c:	f7e2 fe64 	bl	8000758 <__aeabi_uldivmod>
 801da90:	4602      	mov	r2, r0
 801da92:	460b      	mov	r3, r1
 801da94:	4613      	mov	r3, r2
 801da96:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801da98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801da9a:	68d8      	ldr	r0, [r3, #12]
 801da9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801da9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801daa2:	009b      	lsls	r3, r3, #2
 801daa4:	461a      	mov	r2, r3
 801daa6:	2100      	movs	r1, #0
 801daa8:	f009 fe72 	bl	8027790 <memset>

  /* normalise */
  if (d > 1) {
 801daac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801daae:	2b01      	cmp	r3, #1
 801dab0:	d916      	bls.n	801dae0 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801dab2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801dab4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801dab6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dab8:	f7ff ff0f 	bl	801d8da <bi_int_multiply>
 801dabc:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801dabe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d007      	beq.n	801dad4 <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801dac4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801dac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801daca:	3306      	adds	r3, #6
 801dacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dad0:	647b      	str	r3, [r7, #68]	@ 0x44
 801dad2:	e005      	b.n	801dae0 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801dad4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801dad6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801dad8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dada:	f7ff fefe 	bl	801d8da <bi_int_multiply>
 801dade:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801dae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dae2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dae6:	461a      	mov	r2, r3
 801dae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801daea:	4293      	cmp	r3, r2
 801daec:	d105      	bne.n	801dafa <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801daee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801daf0:	3301      	adds	r3, #1
 801daf2:	4619      	mov	r1, r3
 801daf4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801daf6:	f000 fc23 	bl	801e340 <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801dafa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dafc:	68d8      	ldr	r0, [r3, #12]
 801dafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801db00:	68d9      	ldr	r1, [r3, #12]
 801db02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801db04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db08:	461a      	mov	r2, r3
 801db0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801db0c:	1ad3      	subs	r3, r2, r3
 801db0e:	1e5a      	subs	r2, r3, #1
 801db10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801db12:	1ad3      	subs	r3, r2, r3
 801db14:	009b      	lsls	r3, r3, #2
 801db16:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801db18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801db1a:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801db1c:	009b      	lsls	r3, r3, #2
 801db1e:	461a      	mov	r2, r3
 801db20:	f009 ff6f 	bl	8027a02 <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801db24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db26:	68d9      	ldr	r1, [r3, #12]
 801db28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db2e:	461a      	mov	r2, r3
 801db30:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801db34:	4413      	add	r3, r2
 801db36:	009b      	lsls	r3, r3, #2
 801db38:	440b      	add	r3, r1
 801db3a:	6818      	ldr	r0, [r3, #0]
 801db3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db3e:	68d9      	ldr	r1, [r3, #12]
 801db40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801db42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db46:	461a      	mov	r2, r3
 801db48:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801db4c:	4413      	add	r3, r2
 801db4e:	009b      	lsls	r3, r3, #2
 801db50:	440b      	add	r3, r1
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	4298      	cmp	r0, r3
 801db56:	d103      	bne.n	801db60 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801db58:	f04f 33ff 	mov.w	r3, #4294967295
 801db5c:	677b      	str	r3, [r7, #116]	@ 0x74
 801db5e:	e0c2      	b.n	801dce6 <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801db60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db62:	68d9      	ldr	r1, [r3, #12]
 801db64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db6a:	461a      	mov	r2, r3
 801db6c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801db70:	4413      	add	r3, r2
 801db72:	009b      	lsls	r3, r3, #2
 801db74:	440b      	add	r3, r1
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	2200      	movs	r2, #0
 801db7a:	633b      	str	r3, [r7, #48]	@ 0x30
 801db7c:	637a      	str	r2, [r7, #52]	@ 0x34
 801db7e:	f04f 0000 	mov.w	r0, #0
 801db82:	f04f 0100 	mov.w	r1, #0
 801db86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db88:	0019      	movs	r1, r3
 801db8a:	2000      	movs	r0, #0
 801db8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db8e:	68dc      	ldr	r4, [r3, #12]
 801db90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801db92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801db96:	461a      	mov	r2, r3
 801db98:	4baa      	ldr	r3, [pc, #680]	@ (801de44 <bi_divide+0x464>)
 801db9a:	4413      	add	r3, r2
 801db9c:	009b      	lsls	r3, r3, #2
 801db9e:	4423      	add	r3, r4
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	2200      	movs	r2, #0
 801dba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801dba8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801dbac:	4623      	mov	r3, r4
 801dbae:	18c3      	adds	r3, r0, r3
 801dbb0:	623b      	str	r3, [r7, #32]
 801dbb2:	462b      	mov	r3, r5
 801dbb4:	eb41 0303 	adc.w	r3, r1, r3
 801dbb8:	627b      	str	r3, [r7, #36]	@ 0x24
 801dbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbbc:	68d9      	ldr	r1, [r3, #12]
 801dbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dbc4:	461a      	mov	r2, r3
 801dbc6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dbca:	4413      	add	r3, r2
 801dbcc:	009b      	lsls	r3, r3, #2
 801dbce:	440b      	add	r3, r1
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	2200      	movs	r2, #0
 801dbd4:	61bb      	str	r3, [r7, #24]
 801dbd6:	61fa      	str	r2, [r7, #28]
 801dbd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801dbdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801dbe0:	f7e2 fdba 	bl	8000758 <__aeabi_uldivmod>
 801dbe4:	4602      	mov	r2, r0
 801dbe6:	460b      	mov	r3, r1
 801dbe8:	4613      	mov	r3, r2
 801dbea:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801dbec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dbf2:	2b01      	cmp	r3, #1
 801dbf4:	dd77      	ble.n	801dce6 <bi_divide+0x306>
 801dbf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbf8:	68d9      	ldr	r1, [r3, #12]
 801dbfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dc00:	461a      	mov	r2, r3
 801dc02:	4b90      	ldr	r3, [pc, #576]	@ (801de44 <bi_divide+0x464>)
 801dc04:	4413      	add	r3, r2
 801dc06:	009b      	lsls	r3, r3, #2
 801dc08:	440b      	add	r3, r1
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d06a      	beq.n	801dce6 <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801dc10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dc12:	68d9      	ldr	r1, [r3, #12]
 801dc14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dc16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dc1a:	461a      	mov	r2, r3
 801dc1c:	4b89      	ldr	r3, [pc, #548]	@ (801de44 <bi_divide+0x464>)
 801dc1e:	4413      	add	r3, r2
 801dc20:	009b      	lsls	r3, r3, #2
 801dc22:	440b      	add	r3, r1
 801dc24:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801dc26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dc28:	68d9      	ldr	r1, [r3, #12]
 801dc2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dc2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dc30:	461a      	mov	r2, r3
 801dc32:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dc36:	4413      	add	r3, r2
 801dc38:	009b      	lsls	r3, r3, #2
 801dc3a:	440b      	add	r3, r1
 801dc3c:	681a      	ldr	r2, [r3, #0]
 801dc3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dc40:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801dc44:	1ac3      	subs	r3, r0, r3
 801dc46:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801dc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dc4a:	68d9      	ldr	r1, [r3, #12]
 801dc4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dc4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dc52:	461a      	mov	r2, r3
 801dc54:	4b7b      	ldr	r3, [pc, #492]	@ (801de44 <bi_divide+0x464>)
 801dc56:	4413      	add	r3, r2
 801dc58:	009b      	lsls	r3, r3, #2
 801dc5a:	440b      	add	r3, r1
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	2200      	movs	r2, #0
 801dc60:	613b      	str	r3, [r7, #16]
 801dc62:	617a      	str	r2, [r7, #20]
 801dc64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dc66:	2200      	movs	r2, #0
 801dc68:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dc6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801dc6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801dc70:	462b      	mov	r3, r5
 801dc72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801dc76:	4602      	mov	r2, r0
 801dc78:	fb02 f203 	mul.w	r2, r2, r3
 801dc7c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801dc80:	460b      	mov	r3, r1
 801dc82:	4621      	mov	r1, r4
 801dc84:	fb01 f303 	mul.w	r3, r1, r3
 801dc88:	4413      	add	r3, r2
 801dc8a:	4622      	mov	r2, r4
 801dc8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801dc8e:	fba2 8901 	umull	r8, r9, r2, r1
 801dc92:	444b      	add	r3, r9
 801dc94:	4699      	mov	r9, r3
 801dc96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dc98:	2200      	movs	r2, #0
 801dc9a:	60bb      	str	r3, [r7, #8]
 801dc9c:	60fa      	str	r2, [r7, #12]
 801dc9e:	f04f 0000 	mov.w	r0, #0
 801dca2:	f04f 0100 	mov.w	r1, #0
 801dca6:	68bb      	ldr	r3, [r7, #8]
 801dca8:	0019      	movs	r1, r3
 801dcaa:	2000      	movs	r0, #0
 801dcac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dcae:	68dc      	ldr	r4, [r3, #12]
 801dcb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dcb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dcb6:	461a      	mov	r2, r3
 801dcb8:	4b63      	ldr	r3, [pc, #396]	@ (801de48 <bi_divide+0x468>)
 801dcba:	4413      	add	r3, r2
 801dcbc:	009b      	lsls	r3, r3, #2
 801dcbe:	4423      	add	r3, r4
 801dcc0:	681b      	ldr	r3, [r3, #0]
 801dcc2:	2200      	movs	r2, #0
 801dcc4:	603b      	str	r3, [r7, #0]
 801dcc6:	607a      	str	r2, [r7, #4]
 801dcc8:	e9d7 4500 	ldrd	r4, r5, [r7]
 801dccc:	4623      	mov	r3, r4
 801dcce:	eb10 0a03 	adds.w	sl, r0, r3
 801dcd2:	462b      	mov	r3, r5
 801dcd4:	eb41 0b03 	adc.w	fp, r1, r3
 801dcd8:	45c2      	cmp	sl, r8
 801dcda:	eb7b 0309 	sbcs.w	r3, fp, r9
 801dcde:	d202      	bcs.n	801dce6 <bi_divide+0x306>
          q_dash--;
 801dce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dce2:	3b01      	subs	r3, #1
 801dce4:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801dce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d057      	beq.n	801dd9c <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801dcec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801dcee:	f7ff fc9d 	bl	801d62c <bi_copy>
 801dcf2:	4603      	mov	r3, r0
 801dcf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801dcf6:	4619      	mov	r1, r3
 801dcf8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dcfa:	f7ff fdee 	bl	801d8da <bi_int_multiply>
 801dcfe:	4602      	mov	r2, r0
 801dd00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801dd04:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dd06:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd08:	f7ff fd8f 	bl	801d82a <bi_subtract>
 801dd0c:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801dd0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd10:	3301      	adds	r3, #1
 801dd12:	4619      	mov	r1, r3
 801dd14:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801dd16:	f000 fb13 	bl	801e340 <more_comps>

      Q(j) = q_dash;
 801dd1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd1c:	68d9      	ldr	r1, [r3, #12]
 801dd1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dd24:	461a      	mov	r2, r3
 801dd26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd28:	1ad3      	subs	r3, r2, r3
 801dd2a:	461a      	mov	r2, r3
 801dd2c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dd30:	4413      	add	r3, r2
 801dd32:	009b      	lsls	r3, r3, #2
 801dd34:	18ca      	adds	r2, r1, r3
 801dd36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dd38:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801dd3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d03d      	beq.n	801ddbc <bi_divide+0x3dc>
        Q(j)--;
 801dd40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd42:	68d9      	ldr	r1, [r3, #12]
 801dd44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dd4a:	461a      	mov	r2, r3
 801dd4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd4e:	1ad3      	subs	r3, r2, r3
 801dd50:	461a      	mov	r2, r3
 801dd52:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dd56:	4413      	add	r3, r2
 801dd58:	009b      	lsls	r3, r3, #2
 801dd5a:	18ca      	adds	r2, r1, r3
 801dd5c:	6813      	ldr	r3, [r2, #0]
 801dd5e:	3b01      	subs	r3, #1
 801dd60:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801dd62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801dd64:	f7ff fc62 	bl	801d62c <bi_copy>
 801dd68:	4603      	mov	r3, r0
 801dd6a:	461a      	mov	r2, r3
 801dd6c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801dd6e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801dd70:	f7ff fcfe 	bl	801d770 <bi_add>
 801dd74:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801dd76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dd7c:	b29b      	uxth	r3, r3
 801dd7e:	3b01      	subs	r3, #1
 801dd80:	b29b      	uxth	r3, r3
 801dd82:	b21b      	sxth	r3, r3
 801dd84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801dd86:	8093      	strh	r3, [r2, #4]
        v->size--;
 801dd88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dd8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dd8e:	b29b      	uxth	r3, r3
 801dd90:	3b01      	subs	r3, #1
 801dd92:	b29b      	uxth	r3, r3
 801dd94:	b21b      	sxth	r3, r3
 801dd96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801dd98:	8093      	strh	r3, [r2, #4]
 801dd9a:	e00f      	b.n	801ddbc <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801dd9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dd9e:	68d9      	ldr	r1, [r3, #12]
 801dda0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dda2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801dda6:	461a      	mov	r2, r3
 801dda8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ddaa:	1ad3      	subs	r3, r2, r3
 801ddac:	461a      	mov	r2, r3
 801ddae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ddb2:	4413      	add	r3, r2
 801ddb4:	009b      	lsls	r3, r3, #2
 801ddb6:	18ca      	adds	r2, r1, r3
 801ddb8:	2300      	movs	r3, #0
 801ddba:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801ddbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ddbe:	68d9      	ldr	r1, [r3, #12]
 801ddc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ddc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ddc6:	461a      	mov	r2, r3
 801ddc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddca:	1ad3      	subs	r3, r2, r3
 801ddcc:	1e5a      	subs	r2, r3, #1
 801ddce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ddd0:	1ad3      	subs	r3, r2, r3
 801ddd2:	009b      	lsls	r3, r3, #2
 801ddd4:	18c8      	adds	r0, r1, r3
 801ddd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddd8:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801ddda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dddc:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801ddde:	009b      	lsls	r3, r3, #2
 801dde0:	461a      	mov	r2, r3
 801dde2:	f009 fe0e 	bl	8027a02 <memcpy>
  } while (++j <= m);
 801dde6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dde8:	3301      	adds	r3, #1
 801ddea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ddec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801ddee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ddf0:	429a      	cmp	r2, r3
 801ddf2:	f77f ae82 	ble.w	801dafa <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801ddf6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801ddf8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ddfa:	f7ff fc57 	bl	801d6ac <bi_free>
  bi_free(ctx, v);
 801ddfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801de00:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801de02:	f7ff fc53 	bl	801d6ac <bi_free>

  if (is_mod) /* get the remainder */
 801de06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d00e      	beq.n	801de2a <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801de0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801de0e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801de10:	f7ff fc4c 	bl	801d6ac <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801de14:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801de16:	f000 fba0 	bl	801e55a <trim>
 801de1a:	4603      	mov	r3, r0
 801de1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801de1e:	4619      	mov	r1, r3
 801de20:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801de22:	f000 f813 	bl	801de4c <bi_int_divide>
 801de26:	4603      	mov	r3, r0
 801de28:	e007      	b.n	801de3a <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801de2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801de2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801de2e:	f7ff fc3d 	bl	801d6ac <bi_free>
    return trim(quotient);
 801de32:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801de34:	f000 fb91 	bl	801e55a <trim>
 801de38:	4603      	mov	r3, r0
  }
}
 801de3a:	4618      	mov	r0, r3
 801de3c:	3780      	adds	r7, #128	@ 0x80
 801de3e:	46bd      	mov	sp, r7
 801de40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801de44:	3ffffffe 	.word	0x3ffffffe
 801de48:	3ffffffd 	.word	0x3ffffffd

0801de4c <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801de4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801de50:	b08a      	sub	sp, #40	@ 0x28
 801de52:	af00      	add	r7, sp, #0
 801de54:	6178      	str	r0, [r7, #20]
 801de56:	6139      	str	r1, [r7, #16]
 801de58:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801de5a:	693b      	ldr	r3, [r7, #16]
 801de5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801de60:	3b01      	subs	r3, #1
 801de62:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801de64:	f04f 0200 	mov.w	r2, #0
 801de68:	f04f 0300 	mov.w	r3, #0
 801de6c:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801de70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801de74:	f04f 0200 	mov.w	r2, #0
 801de78:	f04f 0300 	mov.w	r3, #0
 801de7c:	0003      	movs	r3, r0
 801de7e:	2200      	movs	r2, #0
 801de80:	6939      	ldr	r1, [r7, #16]
 801de82:	68c8      	ldr	r0, [r1, #12]
 801de84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801de86:	0089      	lsls	r1, r1, #2
 801de88:	4401      	add	r1, r0
 801de8a:	6809      	ldr	r1, [r1, #0]
 801de8c:	2000      	movs	r0, #0
 801de8e:	460c      	mov	r4, r1
 801de90:	4605      	mov	r5, r0
 801de92:	eb12 0804 	adds.w	r8, r2, r4
 801de96:	eb43 0905 	adc.w	r9, r3, r5
 801de9a:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	2200      	movs	r2, #0
 801dea2:	603b      	str	r3, [r7, #0]
 801dea4:	607a      	str	r2, [r7, #4]
 801dea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801deaa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801deae:	f7e2 fc53 	bl	8000758 <__aeabi_uldivmod>
 801deb2:	4602      	mov	r2, r0
 801deb4:	460b      	mov	r3, r1
 801deb6:	4610      	mov	r0, r2
 801deb8:	4619      	mov	r1, r3
 801deba:	693b      	ldr	r3, [r7, #16]
 801debc:	68da      	ldr	r2, [r3, #12]
 801debe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dec0:	009b      	lsls	r3, r3, #2
 801dec2:	4413      	add	r3, r2
 801dec4:	4602      	mov	r2, r0
 801dec6:	601a      	str	r2, [r3, #0]
    r %= denom;
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	2200      	movs	r2, #0
 801decc:	469a      	mov	sl, r3
 801dece:	4693      	mov	fp, r2
 801ded0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ded4:	4652      	mov	r2, sl
 801ded6:	465b      	mov	r3, fp
 801ded8:	f7e2 fc3e 	bl	8000758 <__aeabi_uldivmod>
 801dedc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801dee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dee2:	3b01      	subs	r3, #1
 801dee4:	627b      	str	r3, [r7, #36]	@ 0x24
 801dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dee8:	2b00      	cmp	r3, #0
 801deea:	dac1      	bge.n	801de70 <bi_int_divide+0x24>

  return trim(biR);
 801deec:	6938      	ldr	r0, [r7, #16]
 801deee:	f000 fb34 	bl	801e55a <trim>
 801def2:	4603      	mov	r3, r0
}
 801def4:	4618      	mov	r0, r3
 801def6:	3728      	adds	r7, #40	@ 0x28
 801def8:	46bd      	mov	sp, r7
 801defa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801defe <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801defe:	b580      	push	{r7, lr}
 801df00:	b088      	sub	sp, #32
 801df02:	af00      	add	r7, sp, #0
 801df04:	60f8      	str	r0, [r7, #12]
 801df06:	60b9      	str	r1, [r7, #8]
 801df08:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	3303      	adds	r3, #3
 801df0e:	2b00      	cmp	r3, #0
 801df10:	da00      	bge.n	801df14 <bi_import+0x16>
 801df12:	3303      	adds	r3, #3
 801df14:	109b      	asrs	r3, r3, #2
 801df16:	4619      	mov	r1, r3
 801df18:	68f8      	ldr	r0, [r7, #12]
 801df1a:	f000 fa6d 	bl	801e3f8 <alloc>
 801df1e:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801df20:	2300      	movs	r3, #0
 801df22:	61bb      	str	r3, [r7, #24]
 801df24:	2300      	movs	r3, #0
 801df26:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801df28:	693b      	ldr	r3, [r7, #16]
 801df2a:	68d8      	ldr	r0, [r3, #12]
 801df2c:	693b      	ldr	r3, [r7, #16]
 801df2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801df32:	009b      	lsls	r3, r3, #2
 801df34:	461a      	mov	r2, r3
 801df36:	2100      	movs	r1, #0
 801df38:	f009 fc2a 	bl	8027790 <memset>

  for (i = size - 1; i >= 0; i--) {
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	3b01      	subs	r3, #1
 801df40:	61fb      	str	r3, [r7, #28]
 801df42:	e022      	b.n	801df8a <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801df44:	693b      	ldr	r3, [r7, #16]
 801df46:	68da      	ldr	r2, [r3, #12]
 801df48:	697b      	ldr	r3, [r7, #20]
 801df4a:	009b      	lsls	r3, r3, #2
 801df4c:	4413      	add	r3, r2
 801df4e:	6819      	ldr	r1, [r3, #0]
 801df50:	69fb      	ldr	r3, [r7, #28]
 801df52:	68ba      	ldr	r2, [r7, #8]
 801df54:	4413      	add	r3, r2
 801df56:	781b      	ldrb	r3, [r3, #0]
 801df58:	461a      	mov	r2, r3
 801df5a:	69bb      	ldr	r3, [r7, #24]
 801df5c:	00db      	lsls	r3, r3, #3
 801df5e:	409a      	lsls	r2, r3
 801df60:	693b      	ldr	r3, [r7, #16]
 801df62:	68d8      	ldr	r0, [r3, #12]
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	009b      	lsls	r3, r3, #2
 801df68:	4403      	add	r3, r0
 801df6a:	440a      	add	r2, r1
 801df6c:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801df6e:	69bb      	ldr	r3, [r7, #24]
 801df70:	3301      	adds	r3, #1
 801df72:	61bb      	str	r3, [r7, #24]
 801df74:	69bb      	ldr	r3, [r7, #24]
 801df76:	2b04      	cmp	r3, #4
 801df78:	d104      	bne.n	801df84 <bi_import+0x86>
      j = 0;
 801df7a:	2300      	movs	r3, #0
 801df7c:	61bb      	str	r3, [r7, #24]
      offset++;
 801df7e:	697b      	ldr	r3, [r7, #20]
 801df80:	3301      	adds	r3, #1
 801df82:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801df84:	69fb      	ldr	r3, [r7, #28]
 801df86:	3b01      	subs	r3, #1
 801df88:	61fb      	str	r3, [r7, #28]
 801df8a:	69fb      	ldr	r3, [r7, #28]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	dad9      	bge.n	801df44 <bi_import+0x46>
    }
  }

  return trim(biR);
 801df90:	6938      	ldr	r0, [r7, #16]
 801df92:	f000 fae2 	bl	801e55a <trim>
 801df96:	4603      	mov	r3, r0
}
 801df98:	4618      	mov	r0, r3
 801df9a:	3720      	adds	r7, #32
 801df9c:	46bd      	mov	sp, r7
 801df9e:	bd80      	pop	{r7, pc}

0801dfa0 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b08a      	sub	sp, #40	@ 0x28
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	60f8      	str	r0, [r7, #12]
 801dfa8:	60b9      	str	r1, [r7, #8]
 801dfaa:	607a      	str	r2, [r7, #4]
 801dfac:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801dfae:	683b      	ldr	r3, [r7, #0]
 801dfb0:	3b01      	subs	r3, #1
 801dfb2:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801dfb4:	683b      	ldr	r3, [r7, #0]
 801dfb6:	461a      	mov	r2, r3
 801dfb8:	2100      	movs	r1, #0
 801dfba:	6878      	ldr	r0, [r7, #4]
 801dfbc:	f009 fbe8 	bl	8027790 <memset>

  for (i = 0; i < x->size; i++) {
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	627b      	str	r3, [r7, #36]	@ 0x24
 801dfc4:	e02b      	b.n	801e01e <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	623b      	str	r3, [r7, #32]
 801dfca:	e022      	b.n	801e012 <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801dfcc:	6a3b      	ldr	r3, [r7, #32]
 801dfce:	00db      	lsls	r3, r3, #3
 801dfd0:	22ff      	movs	r2, #255	@ 0xff
 801dfd2:	fa02 f303 	lsl.w	r3, r2, r3
 801dfd6:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801dfd8:	68bb      	ldr	r3, [r7, #8]
 801dfda:	68da      	ldr	r2, [r3, #12]
 801dfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfde:	009b      	lsls	r3, r3, #2
 801dfe0:	4413      	add	r3, r2
 801dfe2:	681a      	ldr	r2, [r3, #0]
 801dfe4:	69bb      	ldr	r3, [r7, #24]
 801dfe6:	4013      	ands	r3, r2
 801dfe8:	461a      	mov	r2, r3
 801dfea:	6a3b      	ldr	r3, [r7, #32]
 801dfec:	00db      	lsls	r3, r3, #3
 801dfee:	fa42 f303 	asr.w	r3, r2, r3
 801dff2:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801dff4:	69fb      	ldr	r3, [r7, #28]
 801dff6:	1e5a      	subs	r2, r3, #1
 801dff8:	61fa      	str	r2, [r7, #28]
 801dffa:	461a      	mov	r2, r3
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	4413      	add	r3, r2
 801e000:	697a      	ldr	r2, [r7, #20]
 801e002:	b2d2      	uxtb	r2, r2
 801e004:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801e006:	69fb      	ldr	r3, [r7, #28]
 801e008:	2b00      	cmp	r3, #0
 801e00a:	db10      	blt.n	801e02e <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801e00c:	6a3b      	ldr	r3, [r7, #32]
 801e00e:	3301      	adds	r3, #1
 801e010:	623b      	str	r3, [r7, #32]
 801e012:	6a3b      	ldr	r3, [r7, #32]
 801e014:	2b03      	cmp	r3, #3
 801e016:	ddd9      	ble.n	801dfcc <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801e018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e01a:	3301      	adds	r3, #1
 801e01c:	627b      	str	r3, [r7, #36]	@ 0x24
 801e01e:	68bb      	ldr	r3, [r7, #8]
 801e020:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e024:	461a      	mov	r2, r3
 801e026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e028:	4293      	cmp	r3, r2
 801e02a:	dbcc      	blt.n	801dfc6 <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801e02c:	e000      	b.n	801e030 <bi_export+0x90>
        goto buf_done;
 801e02e:	bf00      	nop

  bi_free(ctx, x);
 801e030:	68b9      	ldr	r1, [r7, #8]
 801e032:	68f8      	ldr	r0, [r7, #12]
 801e034:	f7ff fb3a 	bl	801d6ac <bi_free>
}
 801e038:	bf00      	nop
 801e03a:	3728      	adds	r7, #40	@ 0x28
 801e03c:	46bd      	mov	sp, r7
 801e03e:	bd80      	pop	{r7, pc}

0801e040 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801e040:	b5b0      	push	{r4, r5, r7, lr}
 801e042:	b086      	sub	sp, #24
 801e044:	af00      	add	r7, sp, #0
 801e046:	60f8      	str	r0, [r7, #12]
 801e048:	60b9      	str	r1, [r7, #8]
 801e04a:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801e04c:	68bb      	ldr	r3, [r7, #8]
 801e04e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e052:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801e054:	68bb      	ldr	r3, [r7, #8]
 801e056:	68da      	ldr	r2, [r3, #12]
 801e058:	6979      	ldr	r1, [r7, #20]
 801e05a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e05e:	440b      	add	r3, r1
 801e060:	009b      	lsls	r3, r3, #2
 801e062:	4413      	add	r3, r2
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	3301      	adds	r3, #1
 801e068:	2200      	movs	r2, #0
 801e06a:	461c      	mov	r4, r3
 801e06c:	4615      	mov	r5, r2
 801e06e:	4622      	mov	r2, r4
 801e070:	462b      	mov	r3, r5
 801e072:	f04f 0000 	mov.w	r0, #0
 801e076:	f04f 0101 	mov.w	r1, #1
 801e07a:	f7e2 fb6d 	bl	8000758 <__aeabi_uldivmod>
 801e07e:	4602      	mov	r2, r0
 801e080:	460b      	mov	r3, r1
 801e082:	4613      	mov	r3, r2
 801e084:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801e086:	68fa      	ldr	r2, [r7, #12]
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	3302      	adds	r3, #2
 801e08c:	009b      	lsls	r3, r3, #2
 801e08e:	4413      	add	r3, r2
 801e090:	68ba      	ldr	r2, [r7, #8]
 801e092:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801e094:	68fa      	ldr	r2, [r7, #12]
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	3302      	adds	r3, #2
 801e09a:	009b      	lsls	r3, r3, #2
 801e09c:	4413      	add	r3, r2
 801e09e:	685b      	ldr	r3, [r3, #4]
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	f7ff fadb 	bl	801d65c <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801e0a6:	693a      	ldr	r2, [r7, #16]
 801e0a8:	68b9      	ldr	r1, [r7, #8]
 801e0aa:	68f8      	ldr	r0, [r7, #12]
 801e0ac:	f7ff fc15 	bl	801d8da <bi_int_multiply>
 801e0b0:	4601      	mov	r1, r0
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	687a      	ldr	r2, [r7, #4]
 801e0b6:	3206      	adds	r2, #6
 801e0b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	687a      	ldr	r2, [r7, #4]
 801e0c0:	3206      	adds	r2, #6
 801e0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f7ff fac8 	bl	801d65c <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801e0cc:	bf00      	nop
 801e0ce:	3718      	adds	r7, #24
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	bdb0      	pop	{r4, r5, r7, pc}

0801e0d4 <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801e0d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e0d8:	b098      	sub	sp, #96	@ 0x60
 801e0da:	af00      	add	r7, sp, #0
 801e0dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e0de:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e0e0:	627a      	str	r2, [r7, #36]	@ 0x24
 801e0e2:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801e0e4:	2300      	movs	r3, #0
 801e0e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801e0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801e0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e0f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801e0f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e0fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e0fc:	4413      	add	r3, r2
 801e0fe:	4619      	mov	r1, r3
 801e100:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e102:	f000 f979 	bl	801e3f8 <alloc>
 801e106:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801e108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e10a:	68db      	ldr	r3, [r3, #12]
 801e10c:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801e10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e110:	68db      	ldr	r3, [r3, #12]
 801e112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801e114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e116:	68db      	ldr	r3, [r3, #12]
 801e118:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801e11a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e11c:	68d8      	ldr	r0, [r3, #12]
 801e11e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e122:	4413      	add	r3, r2
 801e124:	009b      	lsls	r3, r3, #2
 801e126:	461a      	mov	r2, r3
 801e128:	2100      	movs	r1, #0
 801e12a:	f009 fb31 	bl	8027790 <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801e12e:	2300      	movs	r3, #0
 801e130:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801e132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e134:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801e136:	2300      	movs	r3, #0
 801e138:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801e13a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d014      	beq.n	801e16c <regular_multiply+0x98>
 801e142:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e148:	1ad3      	subs	r3, r2, r3
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	dd0e      	ble.n	801e16c <regular_multiply+0x98>
 801e14e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e154:	429a      	cmp	r2, r3
 801e156:	da09      	bge.n	801e16c <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801e158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e15c:	3b01      	subs	r3, #1
 801e15e:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801e160:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801e164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e166:	1ad3      	subs	r3, r2, r3
 801e168:	3b01      	subs	r3, #1
 801e16a:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801e16c:	6a3b      	ldr	r3, [r7, #32]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d003      	beq.n	801e17a <regular_multiply+0xa6>
 801e172:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801e174:	6a3b      	ldr	r3, [r7, #32]
 801e176:	429a      	cmp	r2, r3
 801e178:	da5a      	bge.n	801e230 <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801e17a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e17c:	009a      	lsls	r2, r3, #2
 801e17e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e180:	4413      	add	r3, r2
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	2200      	movs	r2, #0
 801e186:	61bb      	str	r3, [r7, #24]
 801e188:	61fa      	str	r2, [r7, #28]
 801e18a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e18c:	009a      	lsls	r2, r3, #2
 801e18e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e190:	4413      	add	r3, r2
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	2200      	movs	r2, #0
 801e196:	469a      	mov	sl, r3
 801e198:	4693      	mov	fp, r2
 801e19a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e19c:	009a      	lsls	r2, r3, #2
 801e19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e1a0:	4413      	add	r3, r2
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	613b      	str	r3, [r7, #16]
 801e1a8:	617a      	str	r2, [r7, #20]
 801e1aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	fb03 f20b 	mul.w	r2, r3, fp
 801e1b4:	460b      	mov	r3, r1
 801e1b6:	fb0a f303 	mul.w	r3, sl, r3
 801e1ba:	4413      	add	r3, r2
 801e1bc:	4602      	mov	r2, r0
 801e1be:	fbaa 4502 	umull	r4, r5, sl, r2
 801e1c2:	442b      	add	r3, r5
 801e1c4:	461d      	mov	r5, r3
 801e1c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e1ca:	460b      	mov	r3, r1
 801e1cc:	eb13 0804 	adds.w	r8, r3, r4
 801e1d0:	4613      	mov	r3, r2
 801e1d2:	eb43 0905 	adc.w	r9, r3, r5
 801e1d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e1d8:	2200      	movs	r2, #0
 801e1da:	60bb      	str	r3, [r7, #8]
 801e1dc:	60fa      	str	r2, [r7, #12]
 801e1de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e1e2:	460b      	mov	r3, r1
 801e1e4:	eb18 0303 	adds.w	r3, r8, r3
 801e1e8:	603b      	str	r3, [r7, #0]
 801e1ea:	4613      	mov	r3, r2
 801e1ec:	eb49 0303 	adc.w	r3, r9, r3
 801e1f0:	607b      	str	r3, [r7, #4]
 801e1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e1f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801e1fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801e1fc:	1c53      	adds	r3, r2, #1
 801e1fe:	653b      	str	r3, [r7, #80]	@ 0x50
 801e200:	4613      	mov	r3, r2
 801e202:	009a      	lsls	r2, r3, #2
 801e204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e206:	441a      	add	r2, r3
 801e208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e20a:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801e20c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801e210:	f04f 0000 	mov.w	r0, #0
 801e214:	f04f 0100 	mov.w	r1, #0
 801e218:	0018      	movs	r0, r3
 801e21a:	2100      	movs	r1, #0
 801e21c:	4603      	mov	r3, r0
 801e21e:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801e220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e222:	3301      	adds	r3, #1
 801e224:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e226:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801e228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e22a:	429a      	cmp	r2, r3
 801e22c:	db9e      	blt.n	801e16c <regular_multiply+0x98>
 801e22e:	e000      	b.n	801e232 <regular_multiply+0x15e>
        break;
 801e230:	bf00      	nop

    sr[r_index] = carry;
 801e232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e234:	009a      	lsls	r2, r3, #2
 801e236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e238:	441a      	add	r2, r3
 801e23a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e23c:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801e23e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e240:	3301      	adds	r3, #1
 801e242:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e244:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801e246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e248:	429a      	cmp	r2, r3
 801e24a:	f6ff af70 	blt.w	801e12e <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801e24e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e250:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e252:	f7ff fa2b 	bl	801d6ac <bi_free>
  bi_free(ctx, bib);
 801e256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e25a:	f7ff fa27 	bl	801d6ac <bi_free>
  return trim(biR);
 801e25e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e260:	f000 f97b 	bl	801e55a <trim>
 801e264:	4603      	mov	r3, r0
}
 801e266:	4618      	mov	r0, r3
 801e268:	3760      	adds	r7, #96	@ 0x60
 801e26a:	46bd      	mov	sp, r7
 801e26c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e270 <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801e270:	b580      	push	{r7, lr}
 801e272:	b086      	sub	sp, #24
 801e274:	af02      	add	r7, sp, #8
 801e276:	60f8      	str	r0, [r7, #12]
 801e278:	60b9      	str	r1, [r7, #8]
 801e27a:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801e27c:	2300      	movs	r3, #0
 801e27e:	9300      	str	r3, [sp, #0]
 801e280:	2300      	movs	r3, #0
 801e282:	687a      	ldr	r2, [r7, #4]
 801e284:	68b9      	ldr	r1, [r7, #8]
 801e286:	68f8      	ldr	r0, [r7, #12]
 801e288:	f7ff ff24 	bl	801e0d4 <regular_multiply>
 801e28c:	4603      	mov	r3, r0
#endif
}
 801e28e:	4618      	mov	r0, r3
 801e290:	3710      	adds	r7, #16
 801e292:	46bd      	mov	sp, r7
 801e294:	bd80      	pop	{r7, pc}

0801e296 <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801e296:	b480      	push	{r7}
 801e298:	b087      	sub	sp, #28
 801e29a:	af00      	add	r7, sp, #0
 801e29c:	6078      	str	r0, [r7, #4]
 801e29e:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e2a6:	683b      	ldr	r3, [r7, #0]
 801e2a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e2ac:	429a      	cmp	r2, r3
 801e2ae:	dd02      	ble.n	801e2b6 <bi_compare+0x20>
    r = 1;
 801e2b0:	2301      	movs	r3, #1
 801e2b2:	617b      	str	r3, [r7, #20]
 801e2b4:	e03d      	b.n	801e332 <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e2bc:	683b      	ldr	r3, [r7, #0]
 801e2be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e2c2:	429a      	cmp	r2, r3
 801e2c4:	da03      	bge.n	801e2ce <bi_compare+0x38>
    r = -1;
 801e2c6:	f04f 33ff 	mov.w	r3, #4294967295
 801e2ca:	617b      	str	r3, [r7, #20]
 801e2cc:	e031      	b.n	801e332 <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	68db      	ldr	r3, [r3, #12]
 801e2d2:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801e2d4:	683b      	ldr	r3, [r7, #0]
 801e2d6:	68db      	ldr	r3, [r3, #12]
 801e2d8:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801e2da:	2300      	movs	r3, #0
 801e2dc:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e2e4:	3b01      	subs	r3, #1
 801e2e6:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801e2e8:	693b      	ldr	r3, [r7, #16]
 801e2ea:	009b      	lsls	r3, r3, #2
 801e2ec:	68fa      	ldr	r2, [r7, #12]
 801e2ee:	4413      	add	r3, r2
 801e2f0:	681a      	ldr	r2, [r3, #0]
 801e2f2:	693b      	ldr	r3, [r7, #16]
 801e2f4:	009b      	lsls	r3, r3, #2
 801e2f6:	68b9      	ldr	r1, [r7, #8]
 801e2f8:	440b      	add	r3, r1
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	d902      	bls.n	801e306 <bi_compare+0x70>
        r = 1;
 801e300:	2301      	movs	r3, #1
 801e302:	617b      	str	r3, [r7, #20]
        break;
 801e304:	e015      	b.n	801e332 <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801e306:	693b      	ldr	r3, [r7, #16]
 801e308:	009b      	lsls	r3, r3, #2
 801e30a:	68fa      	ldr	r2, [r7, #12]
 801e30c:	4413      	add	r3, r2
 801e30e:	681a      	ldr	r2, [r3, #0]
 801e310:	693b      	ldr	r3, [r7, #16]
 801e312:	009b      	lsls	r3, r3, #2
 801e314:	68b9      	ldr	r1, [r7, #8]
 801e316:	440b      	add	r3, r1
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	429a      	cmp	r2, r3
 801e31c:	d203      	bcs.n	801e326 <bi_compare+0x90>
        r = -1;
 801e31e:	f04f 33ff 	mov.w	r3, #4294967295
 801e322:	617b      	str	r3, [r7, #20]
        break;
 801e324:	e005      	b.n	801e332 <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801e326:	693b      	ldr	r3, [r7, #16]
 801e328:	3b01      	subs	r3, #1
 801e32a:	613b      	str	r3, [r7, #16]
 801e32c:	693b      	ldr	r3, [r7, #16]
 801e32e:	2b00      	cmp	r3, #0
 801e330:	dada      	bge.n	801e2e8 <bi_compare+0x52>
  }

  return r;
 801e332:	697b      	ldr	r3, [r7, #20]
}
 801e334:	4618      	mov	r0, r3
 801e336:	371c      	adds	r7, #28
 801e338:	46bd      	mov	sp, r7
 801e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e33e:	4770      	bx	lr

0801e340 <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801e340:	b580      	push	{r7, lr}
 801e342:	b084      	sub	sp, #16
 801e344:	af00      	add	r7, sp, #0
 801e346:	6078      	str	r0, [r7, #4]
 801e348:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e350:	461a      	mov	r2, r3
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	4293      	cmp	r3, r2
 801e356:	dd2e      	ble.n	801e3b6 <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e35e:	005b      	lsls	r3, r3, #1
 801e360:	683a      	ldr	r2, [r7, #0]
 801e362:	4293      	cmp	r3, r2
 801e364:	bfb8      	it	lt
 801e366:	4613      	movlt	r3, r2
 801e368:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	009b      	lsls	r3, r3, #2
 801e36e:	4619      	mov	r1, r3
 801e370:	2001      	movs	r0, #1
 801e372:	f007 fb5f 	bl	8025a34 <calloc>
 801e376:	4603      	mov	r3, r0
 801e378:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801e37a:	68bb      	ldr	r3, [r7, #8]
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d00e      	beq.n	801e39e <more_comps+0x5e>
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e386:	2b00      	cmp	r3, #0
 801e388:	dd09      	ble.n	801e39e <more_comps+0x5e>
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	68d9      	ldr	r1, [r3, #12]
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e394:	009b      	lsls	r3, r3, #2
 801e396:	461a      	mov	r2, r3
 801e398:	68b8      	ldr	r0, [r7, #8]
 801e39a:	f009 fb32 	bl	8027a02 <memcpy>
    free(bi->comps);
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	68db      	ldr	r3, [r3, #12]
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	f007 fb6a 	bl	8025a7c <free>
    bi->max_comps = (short) max;
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	b21a      	sxth	r2, r3
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	68ba      	ldr	r2, [r7, #8]
 801e3b4:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3bc:	461a      	mov	r2, r3
 801e3be:	683b      	ldr	r3, [r7, #0]
 801e3c0:	4293      	cmp	r3, r2
 801e3c2:	dd11      	ble.n	801e3e8 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	68da      	ldr	r2, [r3, #12]
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3ce:	009b      	lsls	r3, r3, #2
 801e3d0:	18d0      	adds	r0, r2, r3
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e3d8:	461a      	mov	r2, r3
 801e3da:	683b      	ldr	r3, [r7, #0]
 801e3dc:	1a9b      	subs	r3, r3, r2
 801e3de:	009b      	lsls	r3, r3, #2
 801e3e0:	461a      	mov	r2, r3
 801e3e2:	2100      	movs	r1, #0
 801e3e4:	f009 f9d4 	bl	8027790 <memset>
  }

  bi->size = (short) n;
 801e3e8:	683b      	ldr	r3, [r7, #0]
 801e3ea:	b21a      	sxth	r2, r3
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	809a      	strh	r2, [r3, #4]
}
 801e3f0:	bf00      	nop
 801e3f2:	3710      	adds	r7, #16
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd80      	pop	{r7, pc}

0801e3f8 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b084      	sub	sp, #16
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	6078      	str	r0, [r7, #4]
 801e400:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	685b      	ldr	r3, [r3, #4]
 801e406:	2b00      	cmp	r3, #0
 801e408:	d016      	beq.n	801e438 <alloc+0x40>
    biR = ctx->free_list;
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	685b      	ldr	r3, [r3, #4]
 801e40e:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801e410:	68fb      	ldr	r3, [r7, #12]
 801e412:	681a      	ldr	r2, [r3, #0]
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e41c:	1e5a      	subs	r2, r3, #1
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801e422:	68fb      	ldr	r3, [r7, #12]
 801e424:	689b      	ldr	r3, [r3, #8]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d001      	beq.n	801e42e <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801e42a:	f007 fad5 	bl	80259d8 <abort>
    }

    more_comps(biR, size);
 801e42e:	6839      	ldr	r1, [r7, #0]
 801e430:	68f8      	ldr	r0, [r7, #12]
 801e432:	f7ff ff85 	bl	801e340 <more_comps>
 801e436:	e013      	b.n	801e460 <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 801e438:	2110      	movs	r1, #16
 801e43a:	2001      	movs	r0, #1
 801e43c:	f007 fafa 	bl	8025a34 <calloc>
 801e440:	4603      	mov	r3, r0
 801e442:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801e444:	683b      	ldr	r3, [r7, #0]
 801e446:	009b      	lsls	r3, r3, #2
 801e448:	4619      	mov	r1, r3
 801e44a:	2001      	movs	r0, #1
 801e44c:	f007 faf2 	bl	8025a34 <calloc>
 801e450:	4603      	mov	r3, r0
 801e452:	461a      	mov	r2, r3
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801e458:	683b      	ldr	r3, [r7, #0]
 801e45a:	b21a      	sxth	r2, r3
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801e460:	683b      	ldr	r3, [r7, #0]
 801e462:	b21a      	sxth	r2, r3
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	2201      	movs	r2, #1
 801e46c:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	2200      	movs	r2, #0
 801e472:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e478:	1c5a      	adds	r2, r3, #1
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801e47e:	68fb      	ldr	r3, [r7, #12]
}
 801e480:	4618      	mov	r0, r3
 801e482:	3710      	adds	r7, #16
 801e484:	46bd      	mov	sp, r7
 801e486:	bd80      	pop	{r7, pc}

0801e488 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801e488:	b480      	push	{r7}
 801e48a:	b087      	sub	sp, #28
 801e48c:	af00      	add	r7, sp, #0
 801e48e:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801e490:	231f      	movs	r3, #31
 801e492:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801e494:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801e498:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	68da      	ldr	r2, [r3, #12]
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4a4:	4619      	mov	r1, r3
 801e4a6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e4aa:	440b      	add	r3, r1
 801e4ac:	009b      	lsls	r3, r3, #2
 801e4ae:	4413      	add	r3, r2
 801e4b0:	681b      	ldr	r3, [r3, #0]
 801e4b2:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801e4b4:	68fa      	ldr	r2, [r7, #12]
 801e4b6:	693b      	ldr	r3, [r7, #16]
 801e4b8:	4013      	ands	r3, r2
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d007      	beq.n	801e4ce <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e4c4:	3b01      	subs	r3, #1
 801e4c6:	015a      	lsls	r2, r3, #5
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	4413      	add	r3, r2
 801e4cc:	e009      	b.n	801e4e2 <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801e4ce:	693b      	ldr	r3, [r7, #16]
 801e4d0:	085b      	lsrs	r3, r3, #1
 801e4d2:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801e4d4:	697b      	ldr	r3, [r7, #20]
 801e4d6:	1e5a      	subs	r2, r3, #1
 801e4d8:	617a      	str	r2, [r7, #20]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	d1ea      	bne.n	801e4b4 <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801e4de:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e4e2:	4618      	mov	r0, r3
 801e4e4:	371c      	adds	r7, #28
 801e4e6:	46bd      	mov	sp, r7
 801e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ec:	4770      	bx	lr

0801e4ee <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801e4ee:	b480      	push	{r7}
 801e4f0:	b087      	sub	sp, #28
 801e4f2:	af00      	add	r7, sp, #0
 801e4f4:	6078      	str	r0, [r7, #4]
 801e4f6:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	68da      	ldr	r2, [r3, #12]
 801e4fc:	683b      	ldr	r3, [r7, #0]
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	da00      	bge.n	801e504 <exp_bit_is_one+0x16>
 801e502:	331f      	adds	r3, #31
 801e504:	115b      	asrs	r3, r3, #5
 801e506:	009b      	lsls	r3, r3, #2
 801e508:	4413      	add	r3, r2
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801e50e:	683b      	ldr	r3, [r7, #0]
 801e510:	425a      	negs	r2, r3
 801e512:	f003 031f 	and.w	r3, r3, #31
 801e516:	f002 021f 	and.w	r2, r2, #31
 801e51a:	bf58      	it	pl
 801e51c:	4253      	negpl	r3, r2
 801e51e:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801e520:	2301      	movs	r3, #1
 801e522:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801e524:	2300      	movs	r3, #0
 801e526:	613b      	str	r3, [r7, #16]
 801e528:	e005      	b.n	801e536 <exp_bit_is_one+0x48>
    shift <<= 1;
 801e52a:	697b      	ldr	r3, [r7, #20]
 801e52c:	005b      	lsls	r3, r3, #1
 801e52e:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801e530:	693b      	ldr	r3, [r7, #16]
 801e532:	3301      	adds	r3, #1
 801e534:	613b      	str	r3, [r7, #16]
 801e536:	693a      	ldr	r2, [r7, #16]
 801e538:	68bb      	ldr	r3, [r7, #8]
 801e53a:	429a      	cmp	r2, r3
 801e53c:	dbf5      	blt.n	801e52a <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801e53e:	68fa      	ldr	r2, [r7, #12]
 801e540:	697b      	ldr	r3, [r7, #20]
 801e542:	4013      	ands	r3, r2
 801e544:	2b00      	cmp	r3, #0
 801e546:	bf14      	ite	ne
 801e548:	2301      	movne	r3, #1
 801e54a:	2300      	moveq	r3, #0
 801e54c:	b2db      	uxtb	r3, r3
}
 801e54e:	4618      	mov	r0, r3
 801e550:	371c      	adds	r7, #28
 801e552:	46bd      	mov	sp, r7
 801e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e558:	4770      	bx	lr

0801e55a <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801e55a:	b480      	push	{r7}
 801e55c:	b083      	sub	sp, #12
 801e55e:	af00      	add	r7, sp, #0
 801e560:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801e562:	e008      	b.n	801e576 <trim+0x1c>
    bi->size--;
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e56a:	b29b      	uxth	r3, r3
 801e56c:	3b01      	subs	r3, #1
 801e56e:	b29b      	uxth	r3, r3
 801e570:	b21a      	sxth	r2, r3
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	68da      	ldr	r2, [r3, #12]
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e580:	4619      	mov	r1, r3
 801e582:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e586:	440b      	add	r3, r1
 801e588:	009b      	lsls	r3, r3, #2
 801e58a:	4413      	add	r3, r2
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d104      	bne.n	801e59c <trim+0x42>
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e598:	2b01      	cmp	r3, #1
 801e59a:	dce3      	bgt.n	801e564 <trim+0xa>
  }

  return bi;
 801e59c:	687b      	ldr	r3, [r7, #4]
}
 801e59e:	4618      	mov	r0, r3
 801e5a0:	370c      	adds	r7, #12
 801e5a2:	46bd      	mov	sp, r7
 801e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5a8:	4770      	bx	lr

0801e5aa <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801e5aa:	b590      	push	{r4, r7, lr}
 801e5ac:	b08b      	sub	sp, #44	@ 0x2c
 801e5ae:	af00      	add	r7, sp, #0
 801e5b0:	60f8      	str	r0, [r7, #12]
 801e5b2:	60b9      	str	r1, [r7, #8]
 801e5b4:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801e5b6:	6878      	ldr	r0, [r7, #4]
 801e5b8:	f7ff ff66 	bl	801e488 <find_max_exp_index>
 801e5bc:	6278      	str	r0, [r7, #36]	@ 0x24
 801e5be:	2301      	movs	r3, #1
 801e5c0:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801e5c2:	2101      	movs	r1, #1
 801e5c4:	68f8      	ldr	r0, [r7, #12]
 801e5c6:	f7ff f8a3 	bl	801d710 <int_to_bi>
 801e5ca:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 801e5cc:	2104      	movs	r1, #4
 801e5ce:	2001      	movs	r0, #1
 801e5d0:	f007 fa30 	bl	8025a34 <calloc>
 801e5d4:	4603      	mov	r3, r0
 801e5d6:	461a      	mov	r2, r3
 801e5d8:	68fb      	ldr	r3, [r7, #12]
 801e5da:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801e5e0:	68b9      	ldr	r1, [r7, #8]
 801e5e2:	68f8      	ldr	r0, [r7, #12]
 801e5e4:	f7ff f8a7 	bl	801d736 <bi_clone>
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	2201      	movs	r2, #1
 801e5f0:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	4618      	mov	r0, r3
 801e5fa:	f7ff f82f 	bl	801d65c <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801e5fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e600:	6878      	ldr	r0, [r7, #4]
 801e602:	f7ff ff74 	bl	801e4ee <exp_bit_is_one>
 801e606:	4603      	mov	r3, r0
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d06c      	beq.n	801e6e6 <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 801e60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e60e:	693b      	ldr	r3, [r7, #16]
 801e610:	1ad3      	subs	r3, r2, r3
 801e612:	3301      	adds	r3, #1
 801e614:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801e616:	2300      	movs	r3, #0
 801e618:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801e61a:	69bb      	ldr	r3, [r7, #24]
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	da05      	bge.n	801e62c <bi_mod_power+0x82>
        l = 0;
 801e620:	2300      	movs	r3, #0
 801e622:	61bb      	str	r3, [r7, #24]
 801e624:	e009      	b.n	801e63a <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801e626:	69bb      	ldr	r3, [r7, #24]
 801e628:	3301      	adds	r3, #1
 801e62a:	61bb      	str	r3, [r7, #24]
 801e62c:	69b9      	ldr	r1, [r7, #24]
 801e62e:	6878      	ldr	r0, [r7, #4]
 801e630:	f7ff ff5d 	bl	801e4ee <exp_bit_is_one>
 801e634:	4603      	mov	r3, r0
 801e636:	2b00      	cmp	r3, #0
 801e638:	d0f5      	beq.n	801e626 <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801e63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e63c:	623b      	str	r3, [r7, #32]
 801e63e:	e02a      	b.n	801e696 <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801e640:	69f8      	ldr	r0, [r7, #28]
 801e642:	f7fe fff3 	bl	801d62c <bi_copy>
 801e646:	4603      	mov	r3, r0
 801e648:	69fa      	ldr	r2, [r7, #28]
 801e64a:	4619      	mov	r1, r3
 801e64c:	68f8      	ldr	r0, [r7, #12]
 801e64e:	f7ff fe0f 	bl	801e270 <bi_multiply>
 801e652:	4601      	mov	r1, r0
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e65a:	68fa      	ldr	r2, [r7, #12]
 801e65c:	3302      	adds	r3, #2
 801e65e:	009b      	lsls	r3, r3, #2
 801e660:	4413      	add	r3, r2
 801e662:	685a      	ldr	r2, [r3, #4]
 801e664:	2301      	movs	r3, #1
 801e666:	68f8      	ldr	r0, [r7, #12]
 801e668:	f7ff f9ba 	bl	801d9e0 <bi_divide>
 801e66c:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801e66e:	6a39      	ldr	r1, [r7, #32]
 801e670:	6878      	ldr	r0, [r7, #4]
 801e672:	f7ff ff3c 	bl	801e4ee <exp_bit_is_one>
 801e676:	4603      	mov	r3, r0
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d002      	beq.n	801e682 <bi_mod_power+0xd8>
 801e67c:	697b      	ldr	r3, [r7, #20]
 801e67e:	3301      	adds	r3, #1
 801e680:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801e682:	6a3a      	ldr	r2, [r7, #32]
 801e684:	69bb      	ldr	r3, [r7, #24]
 801e686:	429a      	cmp	r2, r3
 801e688:	d002      	beq.n	801e690 <bi_mod_power+0xe6>
 801e68a:	697b      	ldr	r3, [r7, #20]
 801e68c:	005b      	lsls	r3, r3, #1
 801e68e:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801e690:	6a3b      	ldr	r3, [r7, #32]
 801e692:	3b01      	subs	r3, #1
 801e694:	623b      	str	r3, [r7, #32]
 801e696:	6a3a      	ldr	r2, [r7, #32]
 801e698:	69bb      	ldr	r3, [r7, #24]
 801e69a:	429a      	cmp	r2, r3
 801e69c:	dad0      	bge.n	801e640 <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801e69e:	697b      	ldr	r3, [r7, #20]
 801e6a0:	3b01      	subs	r3, #1
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	da00      	bge.n	801e6a8 <bi_mod_power+0xfe>
 801e6a6:	3301      	adds	r3, #1
 801e6a8:	105b      	asrs	r3, r3, #1
 801e6aa:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e6b0:	697b      	ldr	r3, [r7, #20]
 801e6b2:	009b      	lsls	r3, r3, #2
 801e6b4:	4413      	add	r3, r2
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	461a      	mov	r2, r3
 801e6ba:	69f9      	ldr	r1, [r7, #28]
 801e6bc:	68f8      	ldr	r0, [r7, #12]
 801e6be:	f7ff fdd7 	bl	801e270 <bi_multiply>
 801e6c2:	4601      	mov	r1, r0
 801e6c4:	68fb      	ldr	r3, [r7, #12]
 801e6c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e6ca:	68fa      	ldr	r2, [r7, #12]
 801e6cc:	3302      	adds	r3, #2
 801e6ce:	009b      	lsls	r3, r3, #2
 801e6d0:	4413      	add	r3, r2
 801e6d2:	685a      	ldr	r2, [r3, #4]
 801e6d4:	2301      	movs	r3, #1
 801e6d6:	68f8      	ldr	r0, [r7, #12]
 801e6d8:	f7ff f982 	bl	801d9e0 <bi_divide>
 801e6dc:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801e6de:	69bb      	ldr	r3, [r7, #24]
 801e6e0:	3b01      	subs	r3, #1
 801e6e2:	627b      	str	r3, [r7, #36]	@ 0x24
 801e6e4:	e019      	b.n	801e71a <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801e6e6:	69f8      	ldr	r0, [r7, #28]
 801e6e8:	f7fe ffa0 	bl	801d62c <bi_copy>
 801e6ec:	4603      	mov	r3, r0
 801e6ee:	69fa      	ldr	r2, [r7, #28]
 801e6f0:	4619      	mov	r1, r3
 801e6f2:	68f8      	ldr	r0, [r7, #12]
 801e6f4:	f7ff fdbc 	bl	801e270 <bi_multiply>
 801e6f8:	4601      	mov	r1, r0
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e700:	68fa      	ldr	r2, [r7, #12]
 801e702:	3302      	adds	r3, #2
 801e704:	009b      	lsls	r3, r3, #2
 801e706:	4413      	add	r3, r2
 801e708:	685a      	ldr	r2, [r3, #4]
 801e70a:	2301      	movs	r3, #1
 801e70c:	68f8      	ldr	r0, [r7, #12]
 801e70e:	f7ff f967 	bl	801d9e0 <bi_divide>
 801e712:	61f8      	str	r0, [r7, #28]
      i--;
 801e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e716:	3b01      	subs	r3, #1
 801e718:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	f6bf af6e 	bge.w	801e5fe <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801e722:	2300      	movs	r3, #0
 801e724:	627b      	str	r3, [r7, #36]	@ 0x24
 801e726:	e015      	b.n	801e754 <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e72e:	009b      	lsls	r3, r3, #2
 801e730:	4413      	add	r3, r2
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	4618      	mov	r0, r3
 801e736:	f7fe ffa5 	bl	801d684 <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e740:	009b      	lsls	r3, r3, #2
 801e742:	4413      	add	r3, r2
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	4619      	mov	r1, r3
 801e748:	68f8      	ldr	r0, [r7, #12]
 801e74a:	f7fe ffaf 	bl	801d6ac <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801e74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e750:	3301      	adds	r3, #1
 801e752:	627b      	str	r3, [r7, #36]	@ 0x24
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e75a:	429a      	cmp	r2, r3
 801e75c:	dbe4      	blt.n	801e728 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e762:	4618      	mov	r0, r3
 801e764:	f007 f98a 	bl	8025a7c <free>
  bi_free(ctx, bi);
 801e768:	68b9      	ldr	r1, [r7, #8]
 801e76a:	68f8      	ldr	r0, [r7, #12]
 801e76c:	f7fe ff9e 	bl	801d6ac <bi_free>
  bi_free(ctx, biexp);
 801e770:	6879      	ldr	r1, [r7, #4]
 801e772:	68f8      	ldr	r0, [r7, #12]
 801e774:	f7fe ff9a 	bl	801d6ac <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801e778:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801e77a:	4618      	mov	r0, r3
 801e77c:	372c      	adds	r7, #44	@ 0x2c
 801e77e:	46bd      	mov	sp, r7
 801e780:	bd90      	pop	{r4, r7, pc}

0801e782 <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801e782:	b580      	push	{r7, lr}
 801e784:	b08a      	sub	sp, #40	@ 0x28
 801e786:	af00      	add	r7, sp, #0
 801e788:	60f8      	str	r0, [r7, #12]
 801e78a:	60b9      	str	r1, [r7, #8]
 801e78c:	607a      	str	r2, [r7, #4]
 801e78e:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801e790:	f7fe ff27 	bl	801d5e2 <bi_initialize>
 801e794:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801e796:	68bb      	ldr	r3, [r7, #8]
 801e798:	461a      	mov	r2, r3
 801e79a:	68f9      	ldr	r1, [r7, #12]
 801e79c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e79e:	f7ff fbae 	bl	801defe <bi_import>
 801e7a2:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801e7a4:	683b      	ldr	r3, [r7, #0]
 801e7a6:	461a      	mov	r2, r3
 801e7a8:	6879      	ldr	r1, [r7, #4]
 801e7aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7ac:	f7ff fba7 	bl	801defe <bi_import>
 801e7b0:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801e7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e7b4:	461a      	mov	r2, r3
 801e7b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e7b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7ba:	f7ff fba0 	bl	801defe <bi_import>
 801e7be:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801e7c0:	2200      	movs	r2, #0
 801e7c2:	6a39      	ldr	r1, [r7, #32]
 801e7c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7c6:	f7ff fc3b 	bl	801e040 <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 801e7ca:	69fa      	ldr	r2, [r7, #28]
 801e7cc:	69b9      	ldr	r1, [r7, #24]
 801e7ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7d0:	f7ff feeb 	bl	801e5aa <bi_mod_power>
 801e7d4:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 801e7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e7da:	6979      	ldr	r1, [r7, #20]
 801e7dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7de:	f7ff fbdf 	bl	801dfa0 <bi_export>
	bi_free(bi_ctx, n);
 801e7e2:	6a39      	ldr	r1, [r7, #32]
 801e7e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7e6:	f7fe ff61 	bl	801d6ac <bi_free>
	bi_free(bi_ctx, e);
 801e7ea:	69f9      	ldr	r1, [r7, #28]
 801e7ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7ee:	f7fe ff5d 	bl	801d6ac <bi_free>
	bi_free(bi_ctx, h);
 801e7f2:	69b9      	ldr	r1, [r7, #24]
 801e7f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7f6:	f7fe ff59 	bl	801d6ac <bi_free>
	bi_free(bi_ctx, m1);
 801e7fa:	6979      	ldr	r1, [r7, #20]
 801e7fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e7fe:	f7fe ff55 	bl	801d6ac <bi_free>
	return 0;
 801e802:	2300      	movs	r3, #0
}
 801e804:	4618      	mov	r0, r3
 801e806:	3728      	adds	r7, #40	@ 0x28
 801e808:	46bd      	mov	sp, r7
 801e80a:	bd80      	pop	{r7, pc}

0801e80c <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801e80c:	b480      	push	{r7}
 801e80e:	b085      	sub	sp, #20
 801e810:	af00      	add	r7, sp, #0
 801e812:	6078      	str	r0, [r7, #4]
 801e814:	460b      	mov	r3, r1
 801e816:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801e818:	2300      	movs	r3, #0
 801e81a:	73fb      	strb	r3, [r7, #15]
 801e81c:	e00a      	b.n	801e834 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801e81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e822:	009b      	lsls	r3, r3, #2
 801e824:	687a      	ldr	r2, [r7, #4]
 801e826:	4413      	add	r3, r2
 801e828:	2200      	movs	r2, #0
 801e82a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801e82c:	7bfb      	ldrb	r3, [r7, #15]
 801e82e:	3301      	adds	r3, #1
 801e830:	b2db      	uxtb	r3, r3
 801e832:	73fb      	strb	r3, [r7, #15]
 801e834:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801e838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e83c:	429a      	cmp	r2, r3
 801e83e:	dbee      	blt.n	801e81e <mg_uecc_vli_clear+0x12>
  }
}
 801e840:	bf00      	nop
 801e842:	bf00      	nop
 801e844:	3714      	adds	r7, #20
 801e846:	46bd      	mov	sp, r7
 801e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e84c:	4770      	bx	lr

0801e84e <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801e84e:	b480      	push	{r7}
 801e850:	b085      	sub	sp, #20
 801e852:	af00      	add	r7, sp, #0
 801e854:	6078      	str	r0, [r7, #4]
 801e856:	460b      	mov	r3, r1
 801e858:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801e85a:	2300      	movs	r3, #0
 801e85c:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801e85e:	2300      	movs	r3, #0
 801e860:	72fb      	strb	r3, [r7, #11]
 801e862:	e00c      	b.n	801e87e <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801e864:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801e868:	009b      	lsls	r3, r3, #2
 801e86a:	687a      	ldr	r2, [r7, #4]
 801e86c:	4413      	add	r3, r2
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	68fa      	ldr	r2, [r7, #12]
 801e872:	4313      	orrs	r3, r2
 801e874:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801e876:	7afb      	ldrb	r3, [r7, #11]
 801e878:	3301      	adds	r3, #1
 801e87a:	b2db      	uxtb	r3, r3
 801e87c:	72fb      	strb	r3, [r7, #11]
 801e87e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801e882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e886:	429a      	cmp	r2, r3
 801e888:	dbec      	blt.n	801e864 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801e88a:	68fb      	ldr	r3, [r7, #12]
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	bf0c      	ite	eq
 801e890:	2301      	moveq	r3, #1
 801e892:	2300      	movne	r3, #0
 801e894:	b2db      	uxtb	r3, r3
}
 801e896:	4618      	mov	r0, r3
 801e898:	3714      	adds	r7, #20
 801e89a:	46bd      	mov	sp, r7
 801e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a0:	4770      	bx	lr

0801e8a2 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801e8a2:	b480      	push	{r7}
 801e8a4:	b083      	sub	sp, #12
 801e8a6:	af00      	add	r7, sp, #0
 801e8a8:	6078      	str	r0, [r7, #4]
 801e8aa:	460b      	mov	r3, r1
 801e8ac:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801e8ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e8b2:	115b      	asrs	r3, r3, #5
 801e8b4:	b21b      	sxth	r3, r3
 801e8b6:	009b      	lsls	r3, r3, #2
 801e8b8:	687a      	ldr	r2, [r7, #4]
 801e8ba:	4413      	add	r3, r2
 801e8bc:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801e8be:	887b      	ldrh	r3, [r7, #2]
 801e8c0:	f003 031f 	and.w	r3, r3, #31
 801e8c4:	2101      	movs	r1, #1
 801e8c6:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801e8ca:	4013      	ands	r3, r2
}
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	370c      	adds	r7, #12
 801e8d0:	46bd      	mov	sp, r7
 801e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8d6:	4770      	bx	lr

0801e8d8 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801e8d8:	b480      	push	{r7}
 801e8da:	b085      	sub	sp, #20
 801e8dc:	af00      	add	r7, sp, #0
 801e8de:	6078      	str	r0, [r7, #4]
 801e8e0:	460b      	mov	r3, r1
 801e8e2:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801e8e4:	78fb      	ldrb	r3, [r7, #3]
 801e8e6:	3b01      	subs	r3, #1
 801e8e8:	b2db      	uxtb	r3, r3
 801e8ea:	73fb      	strb	r3, [r7, #15]
 801e8ec:	e003      	b.n	801e8f6 <vli_numDigits+0x1e>
 801e8ee:	7bfb      	ldrb	r3, [r7, #15]
 801e8f0:	3b01      	subs	r3, #1
 801e8f2:	b2db      	uxtb	r3, r3
 801e8f4:	73fb      	strb	r3, [r7, #15]
 801e8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	db07      	blt.n	801e90e <vli_numDigits+0x36>
 801e8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e902:	009b      	lsls	r3, r3, #2
 801e904:	687a      	ldr	r2, [r7, #4]
 801e906:	4413      	add	r3, r2
 801e908:	681b      	ldr	r3, [r3, #0]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d0ef      	beq.n	801e8ee <vli_numDigits+0x16>
  }

  return (i + 1);
 801e90e:	7bfb      	ldrb	r3, [r7, #15]
 801e910:	3301      	adds	r3, #1
 801e912:	b2db      	uxtb	r3, r3
 801e914:	b25b      	sxtb	r3, r3
}
 801e916:	4618      	mov	r0, r3
 801e918:	3714      	adds	r7, #20
 801e91a:	46bd      	mov	sp, r7
 801e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e920:	4770      	bx	lr

0801e922 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801e922:	b580      	push	{r7, lr}
 801e924:	b086      	sub	sp, #24
 801e926:	af00      	add	r7, sp, #0
 801e928:	6078      	str	r0, [r7, #4]
 801e92a:	460b      	mov	r3, r1
 801e92c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801e92e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e932:	4619      	mov	r1, r3
 801e934:	6878      	ldr	r0, [r7, #4]
 801e936:	f7ff ffcf 	bl	801e8d8 <vli_numDigits>
 801e93a:	4603      	mov	r3, r0
 801e93c:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801e93e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e942:	2b00      	cmp	r3, #0
 801e944:	d101      	bne.n	801e94a <mg_uecc_vli_numBits+0x28>
    return 0;
 801e946:	2300      	movs	r3, #0
 801e948:	e020      	b.n	801e98c <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801e94a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801e94e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e952:	4413      	add	r3, r2
 801e954:	009b      	lsls	r3, r3, #2
 801e956:	687a      	ldr	r2, [r7, #4]
 801e958:	4413      	add	r3, r2
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801e95e:	2300      	movs	r3, #0
 801e960:	617b      	str	r3, [r7, #20]
 801e962:	e005      	b.n	801e970 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801e964:	693b      	ldr	r3, [r7, #16]
 801e966:	085b      	lsrs	r3, r3, #1
 801e968:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801e96a:	697b      	ldr	r3, [r7, #20]
 801e96c:	3301      	adds	r3, #1
 801e96e:	617b      	str	r3, [r7, #20]
 801e970:	693b      	ldr	r3, [r7, #16]
 801e972:	2b00      	cmp	r3, #0
 801e974:	d1f6      	bne.n	801e964 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801e976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e97a:	3b01      	subs	r3, #1
 801e97c:	b29b      	uxth	r3, r3
 801e97e:	015b      	lsls	r3, r3, #5
 801e980:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801e982:	697b      	ldr	r3, [r7, #20]
 801e984:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801e986:	4413      	add	r3, r2
 801e988:	b29b      	uxth	r3, r3
 801e98a:	b21b      	sxth	r3, r3
}
 801e98c:	4618      	mov	r0, r3
 801e98e:	3718      	adds	r7, #24
 801e990:	46bd      	mov	sp, r7
 801e992:	bd80      	pop	{r7, pc}

0801e994 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801e994:	b480      	push	{r7}
 801e996:	b087      	sub	sp, #28
 801e998:	af00      	add	r7, sp, #0
 801e99a:	60f8      	str	r0, [r7, #12]
 801e99c:	60b9      	str	r1, [r7, #8]
 801e99e:	4613      	mov	r3, r2
 801e9a0:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801e9a2:	2300      	movs	r3, #0
 801e9a4:	75fb      	strb	r3, [r7, #23]
 801e9a6:	e00f      	b.n	801e9c8 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801e9a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e9ac:	009b      	lsls	r3, r3, #2
 801e9ae:	68ba      	ldr	r2, [r7, #8]
 801e9b0:	441a      	add	r2, r3
 801e9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e9b6:	009b      	lsls	r3, r3, #2
 801e9b8:	68f9      	ldr	r1, [r7, #12]
 801e9ba:	440b      	add	r3, r1
 801e9bc:	6812      	ldr	r2, [r2, #0]
 801e9be:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801e9c0:	7dfb      	ldrb	r3, [r7, #23]
 801e9c2:	3301      	adds	r3, #1
 801e9c4:	b2db      	uxtb	r3, r3
 801e9c6:	75fb      	strb	r3, [r7, #23]
 801e9c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e9cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e9d0:	429a      	cmp	r2, r3
 801e9d2:	dbe9      	blt.n	801e9a8 <mg_uecc_vli_set+0x14>
  }
}
 801e9d4:	bf00      	nop
 801e9d6:	bf00      	nop
 801e9d8:	371c      	adds	r7, #28
 801e9da:	46bd      	mov	sp, r7
 801e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e0:	4770      	bx	lr

0801e9e2 <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801e9e2:	b480      	push	{r7}
 801e9e4:	b087      	sub	sp, #28
 801e9e6:	af00      	add	r7, sp, #0
 801e9e8:	60f8      	str	r0, [r7, #12]
 801e9ea:	60b9      	str	r1, [r7, #8]
 801e9ec:	4613      	mov	r3, r2
 801e9ee:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801e9f0:	79fb      	ldrb	r3, [r7, #7]
 801e9f2:	3b01      	subs	r3, #1
 801e9f4:	b2db      	uxtb	r3, r3
 801e9f6:	75fb      	strb	r3, [r7, #23]
 801e9f8:	e024      	b.n	801ea44 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801e9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e9fe:	009b      	lsls	r3, r3, #2
 801ea00:	68fa      	ldr	r2, [r7, #12]
 801ea02:	4413      	add	r3, r2
 801ea04:	681a      	ldr	r2, [r3, #0]
 801ea06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ea0a:	009b      	lsls	r3, r3, #2
 801ea0c:	68b9      	ldr	r1, [r7, #8]
 801ea0e:	440b      	add	r3, r1
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	429a      	cmp	r2, r3
 801ea14:	d901      	bls.n	801ea1a <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801ea16:	2301      	movs	r3, #1
 801ea18:	e019      	b.n	801ea4e <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801ea1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ea1e:	009b      	lsls	r3, r3, #2
 801ea20:	68fa      	ldr	r2, [r7, #12]
 801ea22:	4413      	add	r3, r2
 801ea24:	681a      	ldr	r2, [r3, #0]
 801ea26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ea2a:	009b      	lsls	r3, r3, #2
 801ea2c:	68b9      	ldr	r1, [r7, #8]
 801ea2e:	440b      	add	r3, r1
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	429a      	cmp	r2, r3
 801ea34:	d202      	bcs.n	801ea3c <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801ea36:	f04f 33ff 	mov.w	r3, #4294967295
 801ea3a:	e008      	b.n	801ea4e <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801ea3c:	7dfb      	ldrb	r3, [r7, #23]
 801ea3e:	3b01      	subs	r3, #1
 801ea40:	b2db      	uxtb	r3, r3
 801ea42:	75fb      	strb	r3, [r7, #23]
 801ea44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	dad6      	bge.n	801e9fa <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801ea4c:	2300      	movs	r3, #0
}
 801ea4e:	4618      	mov	r0, r3
 801ea50:	371c      	adds	r7, #28
 801ea52:	46bd      	mov	sp, r7
 801ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea58:	4770      	bx	lr

0801ea5a <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801ea5a:	b480      	push	{r7}
 801ea5c:	b087      	sub	sp, #28
 801ea5e:	af00      	add	r7, sp, #0
 801ea60:	60f8      	str	r0, [r7, #12]
 801ea62:	60b9      	str	r1, [r7, #8]
 801ea64:	4613      	mov	r3, r2
 801ea66:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801ea68:	2300      	movs	r3, #0
 801ea6a:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801ea6c:	79fb      	ldrb	r3, [r7, #7]
 801ea6e:	3b01      	subs	r3, #1
 801ea70:	b2db      	uxtb	r3, r3
 801ea72:	74fb      	strb	r3, [r7, #19]
 801ea74:	e013      	b.n	801ea9e <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801ea76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ea7a:	009b      	lsls	r3, r3, #2
 801ea7c:	68fa      	ldr	r2, [r7, #12]
 801ea7e:	4413      	add	r3, r2
 801ea80:	681a      	ldr	r2, [r3, #0]
 801ea82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ea86:	009b      	lsls	r3, r3, #2
 801ea88:	68b9      	ldr	r1, [r7, #8]
 801ea8a:	440b      	add	r3, r1
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	4053      	eors	r3, r2
 801ea90:	697a      	ldr	r2, [r7, #20]
 801ea92:	4313      	orrs	r3, r2
 801ea94:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801ea96:	7cfb      	ldrb	r3, [r7, #19]
 801ea98:	3b01      	subs	r3, #1
 801ea9a:	b2db      	uxtb	r3, r3
 801ea9c:	74fb      	strb	r3, [r7, #19]
 801ea9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	dae7      	bge.n	801ea76 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801eaa6:	697b      	ldr	r3, [r7, #20]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	bf0c      	ite	eq
 801eaac:	2301      	moveq	r3, #1
 801eaae:	2300      	movne	r3, #0
 801eab0:	b2db      	uxtb	r3, r3
}
 801eab2:	4618      	mov	r0, r3
 801eab4:	371c      	adds	r7, #28
 801eab6:	46bd      	mov	sp, r7
 801eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eabc:	4770      	bx	lr

0801eabe <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801eabe:	b580      	push	{r7, lr}
 801eac0:	b08e      	sub	sp, #56	@ 0x38
 801eac2:	af00      	add	r7, sp, #0
 801eac4:	60f8      	str	r0, [r7, #12]
 801eac6:	60b9      	str	r1, [r7, #8]
 801eac8:	4613      	mov	r3, r2
 801eaca:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801eacc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ead0:	f107 0010 	add.w	r0, r7, #16
 801ead4:	68ba      	ldr	r2, [r7, #8]
 801ead6:	68f9      	ldr	r1, [r7, #12]
 801ead8:	f000 f896 	bl	801ec08 <mg_uecc_vli_sub>
 801eadc:	4603      	mov	r3, r0
 801eade:	2b00      	cmp	r3, #0
 801eae0:	bf14      	ite	ne
 801eae2:	2301      	movne	r3, #1
 801eae4:	2300      	moveq	r3, #0
 801eae6:	b2db      	uxtb	r3, r3
 801eae8:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801eaea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801eaee:	f107 0310 	add.w	r3, r7, #16
 801eaf2:	4611      	mov	r1, r2
 801eaf4:	4618      	mov	r0, r3
 801eaf6:	f7ff feaa 	bl	801e84e <mg_uecc_vli_isZero>
 801eafa:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801eafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	bf0c      	ite	eq
 801eb02:	2301      	moveq	r3, #1
 801eb04:	2300      	movne	r3, #0
 801eb06:	b2db      	uxtb	r3, r3
 801eb08:	461a      	mov	r2, r3
 801eb0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eb0c:	b2db      	uxtb	r3, r3
 801eb0e:	005b      	lsls	r3, r3, #1
 801eb10:	b2db      	uxtb	r3, r3
 801eb12:	1ad3      	subs	r3, r2, r3
 801eb14:	b2db      	uxtb	r3, r3
 801eb16:	b25b      	sxtb	r3, r3
}
 801eb18:	4618      	mov	r0, r3
 801eb1a:	3738      	adds	r7, #56	@ 0x38
 801eb1c:	46bd      	mov	sp, r7
 801eb1e:	bd80      	pop	{r7, pc}

0801eb20 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801eb20:	b480      	push	{r7}
 801eb22:	b087      	sub	sp, #28
 801eb24:	af00      	add	r7, sp, #0
 801eb26:	6078      	str	r0, [r7, #4]
 801eb28:	460b      	mov	r3, r1
 801eb2a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801eb30:	2300      	movs	r3, #0
 801eb32:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801eb34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801eb38:	009b      	lsls	r3, r3, #2
 801eb3a:	687a      	ldr	r2, [r7, #4]
 801eb3c:	4413      	add	r3, r2
 801eb3e:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801eb40:	e00b      	b.n	801eb5a <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	085a      	lsrs	r2, r3, #1
 801eb4c:	697b      	ldr	r3, [r7, #20]
 801eb4e:	431a      	orrs	r2, r3
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	07db      	lsls	r3, r3, #31
 801eb58:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	1f1a      	subs	r2, r3, #4
 801eb5e:	607a      	str	r2, [r7, #4]
 801eb60:	693a      	ldr	r2, [r7, #16]
 801eb62:	429a      	cmp	r2, r3
 801eb64:	d3ed      	bcc.n	801eb42 <mg_uecc_vli_rshift1+0x22>
  }
}
 801eb66:	bf00      	nop
 801eb68:	bf00      	nop
 801eb6a:	371c      	adds	r7, #28
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb72:	4770      	bx	lr

0801eb74 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801eb74:	b480      	push	{r7}
 801eb76:	b089      	sub	sp, #36	@ 0x24
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	60f8      	str	r0, [r7, #12]
 801eb7c:	60b9      	str	r1, [r7, #8]
 801eb7e:	607a      	str	r2, [r7, #4]
 801eb80:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801eb82:	2300      	movs	r3, #0
 801eb84:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801eb86:	2300      	movs	r3, #0
 801eb88:	76fb      	strb	r3, [r7, #27]
 801eb8a:	e030      	b.n	801ebee <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801eb8c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb90:	009b      	lsls	r3, r3, #2
 801eb92:	68ba      	ldr	r2, [r7, #8]
 801eb94:	4413      	add	r3, r2
 801eb96:	681a      	ldr	r2, [r3, #0]
 801eb98:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801eb9c:	009b      	lsls	r3, r3, #2
 801eb9e:	6879      	ldr	r1, [r7, #4]
 801eba0:	440b      	add	r3, r1
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	4413      	add	r3, r2
 801eba6:	69fa      	ldr	r2, [r7, #28]
 801eba8:	4413      	add	r3, r2
 801ebaa:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801ebac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ebb0:	009b      	lsls	r3, r3, #2
 801ebb2:	68ba      	ldr	r2, [r7, #8]
 801ebb4:	4413      	add	r3, r2
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	697a      	ldr	r2, [r7, #20]
 801ebba:	429a      	cmp	r2, r3
 801ebbc:	d00c      	beq.n	801ebd8 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801ebbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ebc2:	009b      	lsls	r3, r3, #2
 801ebc4:	68ba      	ldr	r2, [r7, #8]
 801ebc6:	4413      	add	r3, r2
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	697a      	ldr	r2, [r7, #20]
 801ebcc:	429a      	cmp	r2, r3
 801ebce:	bf34      	ite	cc
 801ebd0:	2301      	movcc	r3, #1
 801ebd2:	2300      	movcs	r3, #0
 801ebd4:	b2db      	uxtb	r3, r3
 801ebd6:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801ebd8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ebdc:	009b      	lsls	r3, r3, #2
 801ebde:	68fa      	ldr	r2, [r7, #12]
 801ebe0:	4413      	add	r3, r2
 801ebe2:	697a      	ldr	r2, [r7, #20]
 801ebe4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801ebe6:	7efb      	ldrb	r3, [r7, #27]
 801ebe8:	3301      	adds	r3, #1
 801ebea:	b2db      	uxtb	r3, r3
 801ebec:	76fb      	strb	r3, [r7, #27]
 801ebee:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801ebf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ebf6:	429a      	cmp	r2, r3
 801ebf8:	dbc8      	blt.n	801eb8c <mg_uecc_vli_add+0x18>
  }
  return carry;
 801ebfa:	69fb      	ldr	r3, [r7, #28]
}
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	3724      	adds	r7, #36	@ 0x24
 801ec00:	46bd      	mov	sp, r7
 801ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec06:	4770      	bx	lr

0801ec08 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801ec08:	b480      	push	{r7}
 801ec0a:	b089      	sub	sp, #36	@ 0x24
 801ec0c:	af00      	add	r7, sp, #0
 801ec0e:	60f8      	str	r0, [r7, #12]
 801ec10:	60b9      	str	r1, [r7, #8]
 801ec12:	607a      	str	r2, [r7, #4]
 801ec14:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801ec16:	2300      	movs	r3, #0
 801ec18:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	76fb      	strb	r3, [r7, #27]
 801ec1e:	e030      	b.n	801ec82 <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801ec20:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ec24:	009b      	lsls	r3, r3, #2
 801ec26:	68ba      	ldr	r2, [r7, #8]
 801ec28:	4413      	add	r3, r2
 801ec2a:	681a      	ldr	r2, [r3, #0]
 801ec2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ec30:	009b      	lsls	r3, r3, #2
 801ec32:	6879      	ldr	r1, [r7, #4]
 801ec34:	440b      	add	r3, r1
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	1ad2      	subs	r2, r2, r3
 801ec3a:	69fb      	ldr	r3, [r7, #28]
 801ec3c:	1ad3      	subs	r3, r2, r3
 801ec3e:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801ec40:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ec44:	009b      	lsls	r3, r3, #2
 801ec46:	68ba      	ldr	r2, [r7, #8]
 801ec48:	4413      	add	r3, r2
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	697a      	ldr	r2, [r7, #20]
 801ec4e:	429a      	cmp	r2, r3
 801ec50:	d00c      	beq.n	801ec6c <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801ec52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ec56:	009b      	lsls	r3, r3, #2
 801ec58:	68ba      	ldr	r2, [r7, #8]
 801ec5a:	4413      	add	r3, r2
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	697a      	ldr	r2, [r7, #20]
 801ec60:	429a      	cmp	r2, r3
 801ec62:	bf8c      	ite	hi
 801ec64:	2301      	movhi	r3, #1
 801ec66:	2300      	movls	r3, #0
 801ec68:	b2db      	uxtb	r3, r3
 801ec6a:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801ec6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ec70:	009b      	lsls	r3, r3, #2
 801ec72:	68fa      	ldr	r2, [r7, #12]
 801ec74:	4413      	add	r3, r2
 801ec76:	697a      	ldr	r2, [r7, #20]
 801ec78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801ec7a:	7efb      	ldrb	r3, [r7, #27]
 801ec7c:	3301      	adds	r3, #1
 801ec7e:	b2db      	uxtb	r3, r3
 801ec80:	76fb      	strb	r3, [r7, #27]
 801ec82:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801ec86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ec8a:	429a      	cmp	r2, r3
 801ec8c:	dbc8      	blt.n	801ec20 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801ec8e:	69fb      	ldr	r3, [r7, #28]
}
 801ec90:	4618      	mov	r0, r3
 801ec92:	3724      	adds	r7, #36	@ 0x24
 801ec94:	46bd      	mov	sp, r7
 801ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec9a:	4770      	bx	lr

0801ec9c <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801ec9c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801eca0:	b091      	sub	sp, #68	@ 0x44
 801eca2:	af00      	add	r7, sp, #0
 801eca4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801eca6:	62b9      	str	r1, [r7, #40]	@ 0x28
 801eca8:	627a      	str	r2, [r7, #36]	@ 0x24
 801ecaa:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801ecac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecae:	2200      	movs	r2, #0
 801ecb0:	4698      	mov	r8, r3
 801ecb2:	4691      	mov	r9, r2
 801ecb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecb6:	2200      	movs	r2, #0
 801ecb8:	469a      	mov	sl, r3
 801ecba:	4693      	mov	fp, r2
 801ecbc:	fb0a f209 	mul.w	r2, sl, r9
 801ecc0:	fb08 f30b 	mul.w	r3, r8, fp
 801ecc4:	4413      	add	r3, r2
 801ecc6:	fba8 450a 	umull	r4, r5, r8, sl
 801ecca:	442b      	add	r3, r5
 801eccc:	461d      	mov	r5, r3
 801ecce:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801ecd2:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801ecd6:	6a3b      	ldr	r3, [r7, #32]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	2200      	movs	r2, #0
 801ecdc:	61bb      	str	r3, [r7, #24]
 801ecde:	61fa      	str	r2, [r7, #28]
 801ece0:	f04f 0200 	mov.w	r2, #0
 801ece4:	f04f 0300 	mov.w	r3, #0
 801ece8:	69b9      	ldr	r1, [r7, #24]
 801ecea:	000b      	movs	r3, r1
 801ecec:	2200      	movs	r2, #0
 801ecee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ecf0:	6809      	ldr	r1, [r1, #0]
 801ecf2:	2000      	movs	r0, #0
 801ecf4:	6139      	str	r1, [r7, #16]
 801ecf6:	6178      	str	r0, [r7, #20]
 801ecf8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801ecfc:	4621      	mov	r1, r4
 801ecfe:	4311      	orrs	r1, r2
 801ed00:	60b9      	str	r1, [r7, #8]
 801ed02:	4629      	mov	r1, r5
 801ed04:	4319      	orrs	r1, r3
 801ed06:	60f9      	str	r1, [r7, #12]
 801ed08:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ed0c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801ed10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ed14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801ed18:	1884      	adds	r4, r0, r2
 801ed1a:	603c      	str	r4, [r7, #0]
 801ed1c:	eb41 0303 	adc.w	r3, r1, r3
 801ed20:	607b      	str	r3, [r7, #4]
 801ed22:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ed26:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801ed2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ed2c:	681c      	ldr	r4, [r3, #0]
 801ed2e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ed32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801ed36:	4290      	cmp	r0, r2
 801ed38:	eb71 0303 	sbcs.w	r3, r1, r3
 801ed3c:	bf34      	ite	cc
 801ed3e:	2301      	movcc	r3, #1
 801ed40:	2300      	movcs	r3, #0
 801ed42:	b2db      	uxtb	r3, r3
 801ed44:	18e2      	adds	r2, r4, r3
 801ed46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ed48:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801ed4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ed4e:	f04f 0200 	mov.w	r2, #0
 801ed52:	f04f 0300 	mov.w	r3, #0
 801ed56:	000a      	movs	r2, r1
 801ed58:	2300      	movs	r3, #0
 801ed5a:	6a3b      	ldr	r3, [r7, #32]
 801ed5c:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801ed5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ed60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed62:	601a      	str	r2, [r3, #0]
#endif
}
 801ed64:	bf00      	nop
 801ed66:	3744      	adds	r7, #68	@ 0x44
 801ed68:	46bd      	mov	sp, r7
 801ed6a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ed6e:	4770      	bx	lr

0801ed70 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801ed70:	b590      	push	{r4, r7, lr}
 801ed72:	b08b      	sub	sp, #44	@ 0x2c
 801ed74:	af02      	add	r7, sp, #8
 801ed76:	60f8      	str	r0, [r7, #12]
 801ed78:	60b9      	str	r1, [r7, #8]
 801ed7a:	607a      	str	r2, [r7, #4]
 801ed7c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801ed7e:	2300      	movs	r3, #0
 801ed80:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801ed82:	2300      	movs	r3, #0
 801ed84:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801ed86:	2300      	movs	r3, #0
 801ed88:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	77bb      	strb	r3, [r7, #30]
 801ed8e:	e036      	b.n	801edfe <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801ed90:	2300      	movs	r3, #0
 801ed92:	77fb      	strb	r3, [r7, #31]
 801ed94:	e01c      	b.n	801edd0 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801ed96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ed9a:	009b      	lsls	r3, r3, #2
 801ed9c:	68ba      	ldr	r2, [r7, #8]
 801ed9e:	4413      	add	r3, r2
 801eda0:	6818      	ldr	r0, [r3, #0]
 801eda2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801eda6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801edaa:	1ad3      	subs	r3, r2, r3
 801edac:	009b      	lsls	r3, r3, #2
 801edae:	687a      	ldr	r2, [r7, #4]
 801edb0:	4413      	add	r3, r2
 801edb2:	6819      	ldr	r1, [r3, #0]
 801edb4:	f107 0414 	add.w	r4, r7, #20
 801edb8:	f107 0218 	add.w	r2, r7, #24
 801edbc:	f107 0310 	add.w	r3, r7, #16
 801edc0:	9300      	str	r3, [sp, #0]
 801edc2:	4623      	mov	r3, r4
 801edc4:	f7ff ff6a 	bl	801ec9c <muladd>
    for (i = 0; i <= k; ++i) {
 801edc8:	7ffb      	ldrb	r3, [r7, #31]
 801edca:	3301      	adds	r3, #1
 801edcc:	b2db      	uxtb	r3, r3
 801edce:	77fb      	strb	r3, [r7, #31]
 801edd0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801edd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801edd8:	429a      	cmp	r2, r3
 801edda:	dddc      	ble.n	801ed96 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801eddc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ede0:	009b      	lsls	r3, r3, #2
 801ede2:	68fa      	ldr	r2, [r7, #12]
 801ede4:	4413      	add	r3, r2
 801ede6:	69ba      	ldr	r2, [r7, #24]
 801ede8:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801edea:	697b      	ldr	r3, [r7, #20]
 801edec:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801edee:	693b      	ldr	r3, [r7, #16]
 801edf0:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801edf2:	2300      	movs	r3, #0
 801edf4:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801edf6:	7fbb      	ldrb	r3, [r7, #30]
 801edf8:	3301      	adds	r3, #1
 801edfa:	b2db      	uxtb	r3, r3
 801edfc:	77bb      	strb	r3, [r7, #30]
 801edfe:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801ee02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ee06:	429a      	cmp	r2, r3
 801ee08:	dbc2      	blt.n	801ed90 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801ee0a:	78fb      	ldrb	r3, [r7, #3]
 801ee0c:	77bb      	strb	r3, [r7, #30]
 801ee0e:	e03b      	b.n	801ee88 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801ee10:	7fba      	ldrb	r2, [r7, #30]
 801ee12:	78fb      	ldrb	r3, [r7, #3]
 801ee14:	1ad3      	subs	r3, r2, r3
 801ee16:	b2db      	uxtb	r3, r3
 801ee18:	3301      	adds	r3, #1
 801ee1a:	b2db      	uxtb	r3, r3
 801ee1c:	77fb      	strb	r3, [r7, #31]
 801ee1e:	e01c      	b.n	801ee5a <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801ee20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ee24:	009b      	lsls	r3, r3, #2
 801ee26:	68ba      	ldr	r2, [r7, #8]
 801ee28:	4413      	add	r3, r2
 801ee2a:	6818      	ldr	r0, [r3, #0]
 801ee2c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801ee30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ee34:	1ad3      	subs	r3, r2, r3
 801ee36:	009b      	lsls	r3, r3, #2
 801ee38:	687a      	ldr	r2, [r7, #4]
 801ee3a:	4413      	add	r3, r2
 801ee3c:	6819      	ldr	r1, [r3, #0]
 801ee3e:	f107 0414 	add.w	r4, r7, #20
 801ee42:	f107 0218 	add.w	r2, r7, #24
 801ee46:	f107 0310 	add.w	r3, r7, #16
 801ee4a:	9300      	str	r3, [sp, #0]
 801ee4c:	4623      	mov	r3, r4
 801ee4e:	f7ff ff25 	bl	801ec9c <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801ee52:	7ffb      	ldrb	r3, [r7, #31]
 801ee54:	3301      	adds	r3, #1
 801ee56:	b2db      	uxtb	r3, r3
 801ee58:	77fb      	strb	r3, [r7, #31]
 801ee5a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801ee5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ee62:	429a      	cmp	r2, r3
 801ee64:	dbdc      	blt.n	801ee20 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801ee66:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ee6a:	009b      	lsls	r3, r3, #2
 801ee6c:	68fa      	ldr	r2, [r7, #12]
 801ee6e:	4413      	add	r3, r2
 801ee70:	69ba      	ldr	r2, [r7, #24]
 801ee72:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801ee78:	693b      	ldr	r3, [r7, #16]
 801ee7a:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801ee80:	7fbb      	ldrb	r3, [r7, #30]
 801ee82:	3301      	adds	r3, #1
 801ee84:	b2db      	uxtb	r3, r3
 801ee86:	77bb      	strb	r3, [r7, #30]
 801ee88:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801ee8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ee90:	005b      	lsls	r3, r3, #1
 801ee92:	3b01      	subs	r3, #1
 801ee94:	429a      	cmp	r2, r3
 801ee96:	dbbb      	blt.n	801ee10 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801ee98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ee9c:	00db      	lsls	r3, r3, #3
 801ee9e:	3b04      	subs	r3, #4
 801eea0:	68fa      	ldr	r2, [r7, #12]
 801eea2:	4413      	add	r3, r2
 801eea4:	69ba      	ldr	r2, [r7, #24]
 801eea6:	601a      	str	r2, [r3, #0]
}
 801eea8:	bf00      	nop
 801eeaa:	3724      	adds	r7, #36	@ 0x24
 801eeac:	46bd      	mov	sp, r7
 801eeae:	bd90      	pop	{r4, r7, pc}

0801eeb0 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801eeb0:	b580      	push	{r7, lr}
 801eeb2:	b086      	sub	sp, #24
 801eeb4:	af00      	add	r7, sp, #0
 801eeb6:	60f8      	str	r0, [r7, #12]
 801eeb8:	60b9      	str	r1, [r7, #8]
 801eeba:	607a      	str	r2, [r7, #4]
 801eebc:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801eebe:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801eec2:	687a      	ldr	r2, [r7, #4]
 801eec4:	68b9      	ldr	r1, [r7, #8]
 801eec6:	68f8      	ldr	r0, [r7, #12]
 801eec8:	f7ff fe54 	bl	801eb74 <mg_uecc_vli_add>
 801eecc:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801eece:	697b      	ldr	r3, [r7, #20]
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d109      	bne.n	801eee8 <mg_uecc_vli_modAdd+0x38>
 801eed4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801eed8:	461a      	mov	r2, r3
 801eeda:	68f9      	ldr	r1, [r7, #12]
 801eedc:	6838      	ldr	r0, [r7, #0]
 801eede:	f7ff fd80 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 801eee2:	4603      	mov	r3, r0
 801eee4:	2b01      	cmp	r3, #1
 801eee6:	d006      	beq.n	801eef6 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801eee8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801eeec:	683a      	ldr	r2, [r7, #0]
 801eeee:	68f9      	ldr	r1, [r7, #12]
 801eef0:	68f8      	ldr	r0, [r7, #12]
 801eef2:	f7ff fe89 	bl	801ec08 <mg_uecc_vli_sub>
  }
}
 801eef6:	bf00      	nop
 801eef8:	3718      	adds	r7, #24
 801eefa:	46bd      	mov	sp, r7
 801eefc:	bd80      	pop	{r7, pc}

0801eefe <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801eefe:	b580      	push	{r7, lr}
 801ef00:	b086      	sub	sp, #24
 801ef02:	af00      	add	r7, sp, #0
 801ef04:	60f8      	str	r0, [r7, #12]
 801ef06:	60b9      	str	r1, [r7, #8]
 801ef08:	607a      	str	r2, [r7, #4]
 801ef0a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801ef0c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801ef10:	687a      	ldr	r2, [r7, #4]
 801ef12:	68b9      	ldr	r1, [r7, #8]
 801ef14:	68f8      	ldr	r0, [r7, #12]
 801ef16:	f7ff fe77 	bl	801ec08 <mg_uecc_vli_sub>
 801ef1a:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801ef1c:	697b      	ldr	r3, [r7, #20]
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d006      	beq.n	801ef30 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801ef22:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801ef26:	683a      	ldr	r2, [r7, #0]
 801ef28:	68f9      	ldr	r1, [r7, #12]
 801ef2a:	68f8      	ldr	r0, [r7, #12]
 801ef2c:	f7ff fe22 	bl	801eb74 <mg_uecc_vli_add>
  }
}
 801ef30:	bf00      	nop
 801ef32:	3718      	adds	r7, #24
 801ef34:	46bd      	mov	sp, r7
 801ef36:	bd80      	pop	{r7, pc}

0801ef38 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801ef38:	b590      	push	{r4, r7, lr}
 801ef3a:	b0ad      	sub	sp, #180	@ 0xb4
 801ef3c:	af00      	add	r7, sp, #0
 801ef3e:	60f8      	str	r0, [r7, #12]
 801ef40:	60b9      	str	r1, [r7, #8]
 801ef42:	607a      	str	r2, [r7, #4]
 801ef44:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801ef46:	f107 0318 	add.w	r3, r7, #24
 801ef4a:	613b      	str	r3, [r7, #16]
 801ef4c:	68bb      	ldr	r3, [r7, #8]
 801ef4e:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801ef50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ef54:	b29b      	uxth	r3, r3
 801ef56:	019b      	lsls	r3, r3, #6
 801ef58:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801ef5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ef5e:	4619      	mov	r1, r3
 801ef60:	6878      	ldr	r0, [r7, #4]
 801ef62:	f7ff fcde 	bl	801e922 <mg_uecc_vli_numBits>
 801ef66:	4603      	mov	r3, r0
 801ef68:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801ef6a:	1ae3      	subs	r3, r4, r3
 801ef6c:	b29b      	uxth	r3, r3
 801ef6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801ef72:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	da00      	bge.n	801ef7c <mg_uecc_vli_mmod+0x44>
 801ef7a:	331f      	adds	r3, #31
 801ef7c:	115b      	asrs	r3, r3, #5
 801ef7e:	b21b      	sxth	r3, r3
 801ef80:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801ef84:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801ef88:	425a      	negs	r2, r3
 801ef8a:	f003 031f 	and.w	r3, r3, #31
 801ef8e:	f002 021f 	and.w	r2, r2, #31
 801ef92:	bf58      	it	pl
 801ef94:	4253      	negpl	r3, r2
 801ef96:	b21b      	sxth	r3, r3
 801ef98:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801efa2:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801efa6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801efaa:	4611      	mov	r1, r2
 801efac:	4618      	mov	r0, r3
 801efae:	f7ff fc2d 	bl	801e80c <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801efb2:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	dd34      	ble.n	801f024 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801efba:	2300      	movs	r3, #0
 801efbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801efc0:	e029      	b.n	801f016 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801efc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801efc6:	009b      	lsls	r3, r3, #2
 801efc8:	687a      	ldr	r2, [r7, #4]
 801efca:	4413      	add	r3, r2
 801efcc:	681a      	ldr	r2, [r3, #0]
 801efce:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801efd2:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801efd6:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801efda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801efde:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801efe0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801efe4:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801efe6:	009b      	lsls	r3, r3, #2
 801efe8:	33b0      	adds	r3, #176	@ 0xb0
 801efea:	443b      	add	r3, r7
 801efec:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801eff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801eff4:	009b      	lsls	r3, r3, #2
 801eff6:	687a      	ldr	r2, [r7, #4]
 801eff8:	4413      	add	r3, r2
 801effa:	681a      	ldr	r2, [r3, #0]
 801effc:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801f000:	f1c3 0320 	rsb	r3, r3, #32
 801f004:	fa22 f303 	lsr.w	r3, r2, r3
 801f008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801f00c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f010:	3301      	adds	r3, #1
 801f012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801f016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f01a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801f01e:	429a      	cmp	r2, r3
 801f020:	d3cf      	bcc.n	801efc2 <mg_uecc_vli_mmod+0x8a>
 801f022:	e00b      	b.n	801f03c <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801f024:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801f028:	009b      	lsls	r3, r3, #2
 801f02a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801f02e:	4413      	add	r3, r2
 801f030:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f034:	6879      	ldr	r1, [r7, #4]
 801f036:	4618      	mov	r0, r3
 801f038:	f7ff fcac 	bl	801e994 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801f03c:	2301      	movs	r3, #1
 801f03e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801f042:	e09f      	b.n	801f184 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801f044:	2300      	movs	r3, #0
 801f046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801f04a:	2300      	movs	r3, #0
 801f04c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801f050:	e053      	b.n	801f0fa <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801f052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f056:	009b      	lsls	r3, r3, #2
 801f058:	33b0      	adds	r3, #176	@ 0xb0
 801f05a:	443b      	add	r3, r7
 801f05c:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801f060:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801f064:	009b      	lsls	r3, r3, #2
 801f066:	4413      	add	r3, r2
 801f068:	681a      	ldr	r2, [r3, #0]
 801f06a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801f06e:	009b      	lsls	r3, r3, #2
 801f070:	33b0      	adds	r3, #176	@ 0xb0
 801f072:	443b      	add	r3, r7
 801f074:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801f078:	1ad2      	subs	r2, r2, r3
 801f07a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f07e:	1ad3      	subs	r3, r2, r3
 801f080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801f084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f088:	009b      	lsls	r3, r3, #2
 801f08a:	33b0      	adds	r3, #176	@ 0xb0
 801f08c:	443b      	add	r3, r7
 801f08e:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801f092:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801f096:	009b      	lsls	r3, r3, #2
 801f098:	4413      	add	r3, r2
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801f0a0:	429a      	cmp	r2, r3
 801f0a2:	d014      	beq.n	801f0ce <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801f0a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f0a8:	009b      	lsls	r3, r3, #2
 801f0aa:	33b0      	adds	r3, #176	@ 0xb0
 801f0ac:	443b      	add	r3, r7
 801f0ae:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801f0b2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801f0b6:	009b      	lsls	r3, r3, #2
 801f0b8:	4413      	add	r3, r2
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801f0c0:	429a      	cmp	r2, r3
 801f0c2:	bf8c      	ite	hi
 801f0c4:	2301      	movhi	r3, #1
 801f0c6:	2300      	movls	r3, #0
 801f0c8:	b2db      	uxtb	r3, r3
 801f0ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801f0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f0d2:	f1c3 0301 	rsb	r3, r3, #1
 801f0d6:	009b      	lsls	r3, r3, #2
 801f0d8:	33b0      	adds	r3, #176	@ 0xb0
 801f0da:	443b      	add	r3, r7
 801f0dc:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801f0e0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801f0e4:	009b      	lsls	r3, r3, #2
 801f0e6:	4413      	add	r3, r2
 801f0e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801f0ec:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801f0ee:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	b2db      	uxtb	r3, r3
 801f0f6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801f0fa:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801f0fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f102:	005b      	lsls	r3, r3, #1
 801f104:	429a      	cmp	r2, r3
 801f106:	dba4      	blt.n	801f052 <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801f108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801f10c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f110:	429a      	cmp	r2, r3
 801f112:	bf0c      	ite	eq
 801f114:	2301      	moveq	r3, #1
 801f116:	2300      	movne	r3, #0
 801f118:	b2db      	uxtb	r3, r3
 801f11a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801f11e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f122:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801f126:	4611      	mov	r1, r2
 801f128:	4618      	mov	r0, r3
 801f12a:	f7ff fcf9 	bl	801eb20 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801f12e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f132:	3b01      	subs	r3, #1
 801f134:	009b      	lsls	r3, r3, #2
 801f136:	33b0      	adds	r3, #176	@ 0xb0
 801f138:	443b      	add	r3, r7
 801f13a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801f13e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f142:	009b      	lsls	r3, r3, #2
 801f144:	33b0      	adds	r3, #176	@ 0xb0
 801f146:	443b      	add	r3, r7
 801f148:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801f14c:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801f14e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f152:	3b01      	subs	r3, #1
 801f154:	430a      	orrs	r2, r1
 801f156:	009b      	lsls	r3, r3, #2
 801f158:	33b0      	adds	r3, #176	@ 0xb0
 801f15a:	443b      	add	r3, r7
 801f15c:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801f160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f164:	009b      	lsls	r3, r3, #2
 801f166:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801f16a:	4413      	add	r3, r2
 801f16c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f170:	4611      	mov	r1, r2
 801f172:	4618      	mov	r0, r3
 801f174:	f7ff fcd4 	bl	801eb20 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801f178:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801f17c:	3b01      	subs	r3, #1
 801f17e:	b29b      	uxth	r3, r3
 801f180:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801f184:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801f188:	2b00      	cmp	r3, #0
 801f18a:	f6bf af5b 	bge.w	801f044 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801f18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f192:	009b      	lsls	r3, r3, #2
 801f194:	33b0      	adds	r3, #176	@ 0xb0
 801f196:	443b      	add	r3, r7
 801f198:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801f19c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f1a0:	4619      	mov	r1, r3
 801f1a2:	68f8      	ldr	r0, [r7, #12]
 801f1a4:	f7ff fbf6 	bl	801e994 <mg_uecc_vli_set>
}
 801f1a8:	bf00      	nop
 801f1aa:	37b4      	adds	r7, #180	@ 0xb4
 801f1ac:	46bd      	mov	sp, r7
 801f1ae:	bd90      	pop	{r4, r7, pc}

0801f1b0 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801f1b0:	b580      	push	{r7, lr}
 801f1b2:	b094      	sub	sp, #80	@ 0x50
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	60f8      	str	r0, [r7, #12]
 801f1b8:	60b9      	str	r1, [r7, #8]
 801f1ba:	607a      	str	r2, [r7, #4]
 801f1bc:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801f1be:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801f1c2:	f107 0010 	add.w	r0, r7, #16
 801f1c6:	687a      	ldr	r2, [r7, #4]
 801f1c8:	68b9      	ldr	r1, [r7, #8]
 801f1ca:	f7ff fdd1 	bl	801ed70 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801f1ce:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801f1d2:	f107 0110 	add.w	r1, r7, #16
 801f1d6:	683a      	ldr	r2, [r7, #0]
 801f1d8:	68f8      	ldr	r0, [r7, #12]
 801f1da:	f7ff fead 	bl	801ef38 <mg_uecc_vli_mmod>
}
 801f1de:	bf00      	nop
 801f1e0:	3750      	adds	r7, #80	@ 0x50
 801f1e2:	46bd      	mov	sp, r7
 801f1e4:	bd80      	pop	{r7, pc}

0801f1e6 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801f1e6:	b580      	push	{r7, lr}
 801f1e8:	b094      	sub	sp, #80	@ 0x50
 801f1ea:	af00      	add	r7, sp, #0
 801f1ec:	60f8      	str	r0, [r7, #12]
 801f1ee:	60b9      	str	r1, [r7, #8]
 801f1f0:	607a      	str	r2, [r7, #4]
 801f1f2:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801f1f4:	683b      	ldr	r3, [r7, #0]
 801f1f6:	f993 3000 	ldrsb.w	r3, [r3]
 801f1fa:	f107 0010 	add.w	r0, r7, #16
 801f1fe:	687a      	ldr	r2, [r7, #4]
 801f200:	68b9      	ldr	r1, [r7, #8]
 801f202:	f7ff fdb5 	bl	801ed70 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801f206:	683b      	ldr	r3, [r7, #0]
 801f208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801f20c:	f107 0210 	add.w	r2, r7, #16
 801f210:	4611      	mov	r1, r2
 801f212:	68f8      	ldr	r0, [r7, #12]
 801f214:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801f216:	bf00      	nop
 801f218:	3750      	adds	r7, #80	@ 0x50
 801f21a:	46bd      	mov	sp, r7
 801f21c:	bd80      	pop	{r7, pc}

0801f21e <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801f21e:	b580      	push	{r7, lr}
 801f220:	b084      	sub	sp, #16
 801f222:	af00      	add	r7, sp, #0
 801f224:	60f8      	str	r0, [r7, #12]
 801f226:	60b9      	str	r1, [r7, #8]
 801f228:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	68ba      	ldr	r2, [r7, #8]
 801f22e:	68b9      	ldr	r1, [r7, #8]
 801f230:	68f8      	ldr	r0, [r7, #12]
 801f232:	f7ff ffd8 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
}
 801f236:	bf00      	nop
 801f238:	3710      	adds	r7, #16
 801f23a:	46bd      	mov	sp, r7
 801f23c:	bd80      	pop	{r7, pc}

0801f23e <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801f23e:	b580      	push	{r7, lr}
 801f240:	b086      	sub	sp, #24
 801f242:	af00      	add	r7, sp, #0
 801f244:	60f8      	str	r0, [r7, #12]
 801f246:	60b9      	str	r1, [r7, #8]
 801f248:	4613      	mov	r3, r2
 801f24a:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 801f24c:	2300      	movs	r3, #0
 801f24e:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	f003 0301 	and.w	r3, r3, #1
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d007      	beq.n	801f26c <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 801f25c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f260:	68ba      	ldr	r2, [r7, #8]
 801f262:	68f9      	ldr	r1, [r7, #12]
 801f264:	68f8      	ldr	r0, [r7, #12]
 801f266:	f7ff fc85 	bl	801eb74 <mg_uecc_vli_add>
 801f26a:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 801f26c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f270:	4619      	mov	r1, r3
 801f272:	68f8      	ldr	r0, [r7, #12]
 801f274:	f7ff fc54 	bl	801eb20 <mg_uecc_vli_rshift1>
  if (carry) {
 801f278:	697b      	ldr	r3, [r7, #20]
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	d013      	beq.n	801f2a6 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801f27e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f282:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f286:	4413      	add	r3, r2
 801f288:	009b      	lsls	r3, r3, #2
 801f28a:	68fa      	ldr	r2, [r7, #12]
 801f28c:	4413      	add	r3, r2
 801f28e:	681a      	ldr	r2, [r3, #0]
 801f290:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801f294:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f298:	440b      	add	r3, r1
 801f29a:	009b      	lsls	r3, r3, #2
 801f29c:	68f9      	ldr	r1, [r7, #12]
 801f29e:	440b      	add	r3, r1
 801f2a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801f2a4:	601a      	str	r2, [r3, #0]
  }
}
 801f2a6:	bf00      	nop
 801f2a8:	3718      	adds	r7, #24
 801f2aa:	46bd      	mov	sp, r7
 801f2ac:	bd80      	pop	{r7, pc}

0801f2ae <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801f2ae:	b580      	push	{r7, lr}
 801f2b0:	b0a6      	sub	sp, #152	@ 0x98
 801f2b2:	af00      	add	r7, sp, #0
 801f2b4:	60f8      	str	r0, [r7, #12]
 801f2b6:	60b9      	str	r1, [r7, #8]
 801f2b8:	607a      	str	r2, [r7, #4]
 801f2ba:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 801f2bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f2c0:	4619      	mov	r1, r3
 801f2c2:	68b8      	ldr	r0, [r7, #8]
 801f2c4:	f7ff fac3 	bl	801e84e <mg_uecc_vli_isZero>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d006      	beq.n	801f2dc <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801f2ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f2d2:	4619      	mov	r1, r3
 801f2d4:	68f8      	ldr	r0, [r7, #12]
 801f2d6:	f7ff fa99 	bl	801e80c <mg_uecc_vli_clear>
 801f2da:	e0de      	b.n	801f49a <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 801f2dc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f2e0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f2e4:	68b9      	ldr	r1, [r7, #8]
 801f2e6:	4618      	mov	r0, r3
 801f2e8:	f7ff fb54 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 801f2ec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f2f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f2f4:	6879      	ldr	r1, [r7, #4]
 801f2f6:	4618      	mov	r0, r3
 801f2f8:	f7ff fb4c 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 801f2fc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f300:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f304:	4611      	mov	r1, r2
 801f306:	4618      	mov	r0, r3
 801f308:	f7ff fa80 	bl	801e80c <mg_uecc_vli_clear>
  u[0] = 1;
 801f30c:	2301      	movs	r3, #1
 801f30e:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801f310:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f314:	f107 0314 	add.w	r3, r7, #20
 801f318:	4611      	mov	r1, r2
 801f31a:	4618      	mov	r0, r3
 801f31c:	f7ff fa76 	bl	801e80c <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801f320:	e0a2      	b.n	801f468 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801f322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801f324:	f003 0301 	and.w	r3, r3, #1
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d110      	bne.n	801f34e <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 801f32c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f330:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f334:	4611      	mov	r1, r2
 801f336:	4618      	mov	r0, r3
 801f338:	f7ff fbf2 	bl	801eb20 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 801f33c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f340:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f344:	6879      	ldr	r1, [r7, #4]
 801f346:	4618      	mov	r0, r3
 801f348:	f7ff ff79 	bl	801f23e <vli_modInv_update>
 801f34c:	e08c      	b.n	801f468 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801f34e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f350:	f003 0301 	and.w	r3, r3, #1
 801f354:	2b00      	cmp	r3, #0
 801f356:	d110      	bne.n	801f37a <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 801f358:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f35c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f360:	4611      	mov	r1, r2
 801f362:	4618      	mov	r0, r3
 801f364:	f7ff fbdc 	bl	801eb20 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 801f368:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f36c:	f107 0314 	add.w	r3, r7, #20
 801f370:	6879      	ldr	r1, [r7, #4]
 801f372:	4618      	mov	r0, r3
 801f374:	f7ff ff63 	bl	801f23e <vli_modInv_update>
 801f378:	e076      	b.n	801f468 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 801f37a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801f37e:	2b00      	cmp	r3, #0
 801f380:	dd39      	ble.n	801f3f6 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801f382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f386:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f38a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801f38e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801f392:	f7ff fc39 	bl	801ec08 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 801f396:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f39a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f39e:	4611      	mov	r1, r2
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	f7ff fbbd 	bl	801eb20 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801f3a6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f3aa:	f107 0114 	add.w	r1, r7, #20
 801f3ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f3b2:	4618      	mov	r0, r3
 801f3b4:	f7ff fb15 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 801f3b8:	4603      	mov	r3, r0
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	da08      	bge.n	801f3d0 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801f3be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f3c2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f3c6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f3ca:	687a      	ldr	r2, [r7, #4]
 801f3cc:	f7ff fbd2 	bl	801eb74 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801f3d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f3d4:	f107 0214 	add.w	r2, r7, #20
 801f3d8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f3dc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f3e0:	f7ff fc12 	bl	801ec08 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 801f3e4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f3e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f3ec:	6879      	ldr	r1, [r7, #4]
 801f3ee:	4618      	mov	r0, r3
 801f3f0:	f7ff ff25 	bl	801f23e <vli_modInv_update>
 801f3f4:	e038      	b.n	801f468 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801f3f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f3fa:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801f3fe:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f402:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801f406:	f7ff fbff 	bl	801ec08 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801f40a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f40e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f412:	4611      	mov	r1, r2
 801f414:	4618      	mov	r0, r3
 801f416:	f7ff fb83 	bl	801eb20 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801f41a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f41e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f422:	f107 0314 	add.w	r3, r7, #20
 801f426:	4618      	mov	r0, r3
 801f428:	f7ff fadb 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 801f42c:	4603      	mov	r3, r0
 801f42e:	2b00      	cmp	r3, #0
 801f430:	da08      	bge.n	801f444 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801f432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f436:	f107 0114 	add.w	r1, r7, #20
 801f43a:	f107 0014 	add.w	r0, r7, #20
 801f43e:	687a      	ldr	r2, [r7, #4]
 801f440:	f7ff fb98 	bl	801eb74 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 801f444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f448:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f44c:	f107 0114 	add.w	r1, r7, #20
 801f450:	f107 0014 	add.w	r0, r7, #20
 801f454:	f7ff fbd8 	bl	801ec08 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 801f458:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f45c:	f107 0314 	add.w	r3, r7, #20
 801f460:	6879      	ldr	r1, [r7, #4]
 801f462:	4618      	mov	r0, r3
 801f464:	f7ff feeb 	bl	801f23e <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801f468:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f46c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f470:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801f474:	4618      	mov	r0, r3
 801f476:	f7ff fab4 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 801f47a:	4603      	mov	r3, r0
 801f47c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801f480:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801f484:	2b00      	cmp	r3, #0
 801f486:	f47f af4c 	bne.w	801f322 <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 801f48a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801f48e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f492:	4619      	mov	r1, r3
 801f494:	68f8      	ldr	r0, [r7, #12]
 801f496:	f7ff fa7d 	bl	801e994 <mg_uecc_vli_set>
}
 801f49a:	3798      	adds	r7, #152	@ 0x98
 801f49c:	46bd      	mov	sp, r7
 801f49e:	bd80      	pop	{r7, pc}

0801f4a0 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 801f4a0:	b580      	push	{r7, lr}
 801f4a2:	b098      	sub	sp, #96	@ 0x60
 801f4a4:	af02      	add	r7, sp, #8
 801f4a6:	60f8      	str	r0, [r7, #12]
 801f4a8:	60b9      	str	r1, [r7, #8]
 801f4aa:	607a      	str	r2, [r7, #4]
 801f4ac:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801f4ae:	683b      	ldr	r3, [r7, #0]
 801f4b0:	781b      	ldrb	r3, [r3, #0]
 801f4b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801f4b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f4ba:	4619      	mov	r1, r3
 801f4bc:	6878      	ldr	r0, [r7, #4]
 801f4be:	f7ff f9c6 	bl	801e84e <mg_uecc_vli_isZero>
 801f4c2:	4603      	mov	r3, r0
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	f040 80e6 	bne.w	801f696 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801f4ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f4ce:	683a      	ldr	r2, [r7, #0]
 801f4d0:	68b9      	ldr	r1, [r7, #8]
 801f4d2:	4618      	mov	r0, r3
 801f4d4:	f7ff fea3 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801f4d8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f4dc:	f107 0010 	add.w	r0, r7, #16
 801f4e0:	683b      	ldr	r3, [r7, #0]
 801f4e2:	68f9      	ldr	r1, [r7, #12]
 801f4e4:	f7ff fe7f 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801f4e8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f4ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f4f0:	683a      	ldr	r2, [r7, #0]
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	f7ff fe93 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801f4f8:	683b      	ldr	r3, [r7, #0]
 801f4fa:	687a      	ldr	r2, [r7, #4]
 801f4fc:	68b9      	ldr	r1, [r7, #8]
 801f4fe:	68b8      	ldr	r0, [r7, #8]
 801f500:	f7ff fe71 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 801f504:	683a      	ldr	r2, [r7, #0]
 801f506:	6879      	ldr	r1, [r7, #4]
 801f508:	6878      	ldr	r0, [r7, #4]
 801f50a:	f7ff fe88 	bl	801f21e <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801f50e:	683b      	ldr	r3, [r7, #0]
 801f510:	1d1a      	adds	r2, r3, #4
 801f512:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f516:	9300      	str	r3, [sp, #0]
 801f518:	4613      	mov	r3, r2
 801f51a:	687a      	ldr	r2, [r7, #4]
 801f51c:	68f9      	ldr	r1, [r7, #12]
 801f51e:	68f8      	ldr	r0, [r7, #12]
 801f520:	f7ff fcc6 	bl	801eeb0 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 801f524:	683b      	ldr	r3, [r7, #0]
 801f526:	1d1a      	adds	r2, r3, #4
 801f528:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f52c:	9300      	str	r3, [sp, #0]
 801f52e:	4613      	mov	r3, r2
 801f530:	687a      	ldr	r2, [r7, #4]
 801f532:	6879      	ldr	r1, [r7, #4]
 801f534:	6878      	ldr	r0, [r7, #4]
 801f536:	f7ff fcbb 	bl	801eeb0 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801f53a:	683b      	ldr	r3, [r7, #0]
 801f53c:	1d1a      	adds	r2, r3, #4
 801f53e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f542:	9300      	str	r3, [sp, #0]
 801f544:	4613      	mov	r3, r2
 801f546:	687a      	ldr	r2, [r7, #4]
 801f548:	68f9      	ldr	r1, [r7, #12]
 801f54a:	6878      	ldr	r0, [r7, #4]
 801f54c:	f7ff fcd7 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801f550:	683b      	ldr	r3, [r7, #0]
 801f552:	687a      	ldr	r2, [r7, #4]
 801f554:	68f9      	ldr	r1, [r7, #12]
 801f556:	68f8      	ldr	r0, [r7, #12]
 801f558:	f7ff fe45 	bl	801f1e6 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	1d1a      	adds	r2, r3, #4
 801f560:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f564:	9300      	str	r3, [sp, #0]
 801f566:	4613      	mov	r3, r2
 801f568:	68fa      	ldr	r2, [r7, #12]
 801f56a:	68f9      	ldr	r1, [r7, #12]
 801f56c:	6878      	ldr	r0, [r7, #4]
 801f56e:	f7ff fc9f 	bl	801eeb0 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801f572:	683b      	ldr	r3, [r7, #0]
 801f574:	1d1a      	adds	r2, r3, #4
 801f576:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f57a:	9300      	str	r3, [sp, #0]
 801f57c:	4613      	mov	r3, r2
 801f57e:	687a      	ldr	r2, [r7, #4]
 801f580:	68f9      	ldr	r1, [r7, #12]
 801f582:	68f8      	ldr	r0, [r7, #12]
 801f584:	f7ff fc94 	bl	801eeb0 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 801f588:	2100      	movs	r1, #0
 801f58a:	68f8      	ldr	r0, [r7, #12]
 801f58c:	f7ff f989 	bl	801e8a2 <mg_uecc_vli_testBit>
 801f590:	4603      	mov	r3, r0
 801f592:	2b00      	cmp	r3, #0
 801f594:	d024      	beq.n	801f5e0 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 801f596:	683b      	ldr	r3, [r7, #0]
 801f598:	1d1a      	adds	r2, r3, #4
 801f59a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f59e:	68f9      	ldr	r1, [r7, #12]
 801f5a0:	68f8      	ldr	r0, [r7, #12]
 801f5a2:	f7ff fae7 	bl	801eb74 <mg_uecc_vli_add>
 801f5a6:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801f5a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	68f8      	ldr	r0, [r7, #12]
 801f5b0:	f7ff fab6 	bl	801eb20 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 801f5b4:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801f5b8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f5bc:	4413      	add	r3, r2
 801f5be:	009b      	lsls	r3, r3, #2
 801f5c0:	68fa      	ldr	r2, [r7, #12]
 801f5c2:	4413      	add	r3, r2
 801f5c4:	6819      	ldr	r1, [r3, #0]
 801f5c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f5c8:	07da      	lsls	r2, r3, #31
 801f5ca:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801f5ce:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f5d2:	4403      	add	r3, r0
 801f5d4:	009b      	lsls	r3, r3, #2
 801f5d6:	68f8      	ldr	r0, [r7, #12]
 801f5d8:	4403      	add	r3, r0
 801f5da:	430a      	orrs	r2, r1
 801f5dc:	601a      	str	r2, [r3, #0]
 801f5de:	e005      	b.n	801f5ec <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801f5e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f5e4:	4619      	mov	r1, r3
 801f5e6:	68f8      	ldr	r0, [r7, #12]
 801f5e8:	f7ff fa9a 	bl	801eb20 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 801f5ec:	683a      	ldr	r2, [r7, #0]
 801f5ee:	68f9      	ldr	r1, [r7, #12]
 801f5f0:	6878      	ldr	r0, [r7, #4]
 801f5f2:	f7ff fe14 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801f5f6:	683b      	ldr	r3, [r7, #0]
 801f5f8:	1d19      	adds	r1, r3, #4
 801f5fa:	f107 0210 	add.w	r2, r7, #16
 801f5fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f602:	9300      	str	r3, [sp, #0]
 801f604:	460b      	mov	r3, r1
 801f606:	6879      	ldr	r1, [r7, #4]
 801f608:	6878      	ldr	r0, [r7, #4]
 801f60a:	f7ff fc78 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801f60e:	683b      	ldr	r3, [r7, #0]
 801f610:	1d19      	adds	r1, r3, #4
 801f612:	f107 0210 	add.w	r2, r7, #16
 801f616:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f61a:	9300      	str	r3, [sp, #0]
 801f61c:	460b      	mov	r3, r1
 801f61e:	6879      	ldr	r1, [r7, #4]
 801f620:	6878      	ldr	r0, [r7, #4]
 801f622:	f7ff fc6c 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801f626:	683b      	ldr	r3, [r7, #0]
 801f628:	1d1a      	adds	r2, r3, #4
 801f62a:	f107 0110 	add.w	r1, r7, #16
 801f62e:	f107 0010 	add.w	r0, r7, #16
 801f632:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f636:	9300      	str	r3, [sp, #0]
 801f638:	4613      	mov	r3, r2
 801f63a:	687a      	ldr	r2, [r7, #4]
 801f63c:	f7ff fc5f 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801f640:	f107 0210 	add.w	r2, r7, #16
 801f644:	683b      	ldr	r3, [r7, #0]
 801f646:	68f9      	ldr	r1, [r7, #12]
 801f648:	68f8      	ldr	r0, [r7, #12]
 801f64a:	f7ff fdcc 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801f64e:	683b      	ldr	r3, [r7, #0]
 801f650:	1d19      	adds	r1, r3, #4
 801f652:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f656:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801f65a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f65e:	9300      	str	r3, [sp, #0]
 801f660:	460b      	mov	r3, r1
 801f662:	68f9      	ldr	r1, [r7, #12]
 801f664:	f7ff fc4b 	bl	801eefe <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 801f668:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f66c:	461a      	mov	r2, r3
 801f66e:	6879      	ldr	r1, [r7, #4]
 801f670:	68f8      	ldr	r0, [r7, #12]
 801f672:	f7ff f98f 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801f676:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801f67a:	461a      	mov	r2, r3
 801f67c:	68b9      	ldr	r1, [r7, #8]
 801f67e:	6878      	ldr	r0, [r7, #4]
 801f680:	f7ff f988 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 801f684:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801f688:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f68c:	4619      	mov	r1, r3
 801f68e:	68b8      	ldr	r0, [r7, #8]
 801f690:	f7ff f980 	bl	801e994 <mg_uecc_vli_set>
 801f694:	e000      	b.n	801f698 <double_jacobian_default+0x1f8>
    return;
 801f696:	bf00      	nop
}
 801f698:	3758      	adds	r7, #88	@ 0x58
 801f69a:	46bd      	mov	sp, r7
 801f69c:	bd80      	pop	{r7, pc}

0801f69e <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 801f69e:	b580      	push	{r7, lr}
 801f6a0:	b090      	sub	sp, #64	@ 0x40
 801f6a2:	af02      	add	r7, sp, #8
 801f6a4:	60f8      	str	r0, [r7, #12]
 801f6a6:	60b9      	str	r1, [r7, #8]
 801f6a8:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801f6aa:	f107 0314 	add.w	r3, r7, #20
 801f6ae:	2220      	movs	r2, #32
 801f6b0:	2100      	movs	r1, #0
 801f6b2:	4618      	mov	r0, r3
 801f6b4:	f008 f86c 	bl	8027790 <memset>
 801f6b8:	2303      	movs	r3, #3
 801f6ba:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	781b      	ldrb	r3, [r3, #0]
 801f6c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 801f6c4:	687a      	ldr	r2, [r7, #4]
 801f6c6:	68b9      	ldr	r1, [r7, #8]
 801f6c8:	68f8      	ldr	r0, [r7, #12]
 801f6ca:	f7ff fda8 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	1d19      	adds	r1, r3, #4
 801f6d2:	f107 0214 	add.w	r2, r7, #20
 801f6d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f6da:	9300      	str	r3, [sp, #0]
 801f6dc:	460b      	mov	r3, r1
 801f6de:	68f9      	ldr	r1, [r7, #12]
 801f6e0:	68f8      	ldr	r0, [r7, #12]
 801f6e2:	f7ff fc0c 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	68ba      	ldr	r2, [r7, #8]
 801f6ea:	68f9      	ldr	r1, [r7, #12]
 801f6ec:	68f8      	ldr	r0, [r7, #12]
 801f6ee:	f7ff fd7a 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	1d19      	adds	r1, r3, #4
 801f6fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f700:	9300      	str	r3, [sp, #0]
 801f702:	460b      	mov	r3, r1
 801f704:	68f9      	ldr	r1, [r7, #12]
 801f706:	68f8      	ldr	r0, [r7, #12]
 801f708:	f7ff fbd2 	bl	801eeb0 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 801f70c:	bf00      	nop
 801f70e:	3738      	adds	r7, #56	@ 0x38
 801f710:	46bd      	mov	sp, r7
 801f712:	bd80      	pop	{r7, pc}

0801f714 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 801f714:	b580      	push	{r7, lr}
 801f716:	b094      	sub	sp, #80	@ 0x50
 801f718:	af00      	add	r7, sp, #0
 801f71a:	6078      	str	r0, [r7, #4]
 801f71c:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801f71e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801f722:	2220      	movs	r2, #32
 801f724:	2100      	movs	r1, #0
 801f726:	4618      	mov	r0, r3
 801f728:	f008 f832 	bl	8027790 <memset>
 801f72c:	2301      	movs	r3, #1
 801f72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801f730:	f107 030c 	add.w	r3, r7, #12
 801f734:	2220      	movs	r2, #32
 801f736:	2100      	movs	r1, #0
 801f738:	4618      	mov	r0, r3
 801f73a:	f008 f829 	bl	8027790 <memset>
 801f73e:	2301      	movs	r3, #1
 801f740:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	1d19      	adds	r1, r3, #4
 801f74e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801f752:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801f756:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801f75a:	f7ff fa0b 	bl	801eb74 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801f75e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801f762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801f766:	4611      	mov	r1, r2
 801f768:	4618      	mov	r0, r3
 801f76a:	f7ff f8da 	bl	801e922 <mg_uecc_vli_numBits>
 801f76e:	4603      	mov	r3, r0
 801f770:	b29b      	uxth	r3, r3
 801f772:	3b01      	subs	r3, #1
 801f774:	b29b      	uxth	r3, r3
 801f776:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801f77a:	e020      	b.n	801f7be <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 801f77c:	f107 010c 	add.w	r1, r7, #12
 801f780:	f107 030c 	add.w	r3, r7, #12
 801f784:	683a      	ldr	r2, [r7, #0]
 801f786:	4618      	mov	r0, r3
 801f788:	f7ff fd49 	bl	801f21e <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 801f78c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 801f790:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801f794:	4611      	mov	r1, r2
 801f796:	4618      	mov	r0, r3
 801f798:	f7ff f883 	bl	801e8a2 <mg_uecc_vli_testBit>
 801f79c:	4603      	mov	r3, r0
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d007      	beq.n	801f7b2 <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 801f7a2:	f107 010c 	add.w	r1, r7, #12
 801f7a6:	f107 000c 	add.w	r0, r7, #12
 801f7aa:	683b      	ldr	r3, [r7, #0]
 801f7ac:	687a      	ldr	r2, [r7, #4]
 801f7ae:	f7ff fd1a 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801f7b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801f7b6:	3b01      	subs	r3, #1
 801f7b8:	b29b      	uxth	r3, r3
 801f7ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801f7be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801f7c2:	2b01      	cmp	r3, #1
 801f7c4:	dcda      	bgt.n	801f77c <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801f7c6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801f7ca:	f107 030c 	add.w	r3, r7, #12
 801f7ce:	4619      	mov	r1, r3
 801f7d0:	6878      	ldr	r0, [r7, #4]
 801f7d2:	f7ff f8df 	bl	801e994 <mg_uecc_vli_set>
}
 801f7d6:	bf00      	nop
 801f7d8:	3750      	adds	r7, #80	@ 0x50
 801f7da:	46bd      	mov	sp, r7
 801f7dc:	bd80      	pop	{r7, pc}
	...

0801f7e0 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801f7e0:	b480      	push	{r7}
 801f7e2:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 801f7e4:	4b02      	ldr	r3, [pc, #8]	@ (801f7f0 <mg_uecc_secp256r1+0x10>)
}
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	46bd      	mov	sp, r7
 801f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ee:	4770      	bx	lr
 801f7f0:	0802d8e0 	.word	0x0802d8e0

0801f7f4 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 801f7f4:	b580      	push	{r7, lr}
 801f7f6:	b08c      	sub	sp, #48	@ 0x30
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	6078      	str	r0, [r7, #4]
 801f7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801f7fe:	2208      	movs	r2, #8
 801f800:	6839      	ldr	r1, [r7, #0]
 801f802:	6878      	ldr	r0, [r7, #4]
 801f804:	f7ff f8c6 	bl	801e994 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801f808:	2300      	movs	r3, #0
 801f80a:	617b      	str	r3, [r7, #20]
 801f80c:	697b      	ldr	r3, [r7, #20]
 801f80e:	613b      	str	r3, [r7, #16]
 801f810:	693b      	ldr	r3, [r7, #16]
 801f812:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 801f814:	683b      	ldr	r3, [r7, #0]
 801f816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f818:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801f81a:	683b      	ldr	r3, [r7, #0]
 801f81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f81e:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801f820:	683b      	ldr	r3, [r7, #0]
 801f822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f824:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801f826:	683b      	ldr	r3, [r7, #0]
 801f828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f82a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801f82c:	683b      	ldr	r3, [r7, #0]
 801f82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f830:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801f832:	f107 020c 	add.w	r2, r7, #12
 801f836:	f107 010c 	add.w	r1, r7, #12
 801f83a:	f107 000c 	add.w	r0, r7, #12
 801f83e:	2308      	movs	r3, #8
 801f840:	f7ff f998 	bl	801eb74 <mg_uecc_vli_add>
 801f844:	4603      	mov	r3, r0
 801f846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f848:	f107 020c 	add.w	r2, r7, #12
 801f84c:	2308      	movs	r3, #8
 801f84e:	6879      	ldr	r1, [r7, #4]
 801f850:	6878      	ldr	r0, [r7, #4]
 801f852:	f7ff f98f 	bl	801eb74 <mg_uecc_vli_add>
 801f856:	4603      	mov	r3, r0
 801f858:	461a      	mov	r2, r3
 801f85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f85c:	4413      	add	r3, r2
 801f85e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 801f860:	683b      	ldr	r3, [r7, #0]
 801f862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f864:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 801f866:	683b      	ldr	r3, [r7, #0]
 801f868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f86a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 801f86c:	683b      	ldr	r3, [r7, #0]
 801f86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f870:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 801f872:	683b      	ldr	r3, [r7, #0]
 801f874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f876:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801f878:	2300      	movs	r3, #0
 801f87a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801f87c:	f107 020c 	add.w	r2, r7, #12
 801f880:	f107 010c 	add.w	r1, r7, #12
 801f884:	f107 000c 	add.w	r0, r7, #12
 801f888:	2308      	movs	r3, #8
 801f88a:	f7ff f973 	bl	801eb74 <mg_uecc_vli_add>
 801f88e:	4603      	mov	r3, r0
 801f890:	461a      	mov	r2, r3
 801f892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f894:	4413      	add	r3, r2
 801f896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f898:	f107 020c 	add.w	r2, r7, #12
 801f89c:	2308      	movs	r3, #8
 801f89e:	6879      	ldr	r1, [r7, #4]
 801f8a0:	6878      	ldr	r0, [r7, #4]
 801f8a2:	f7ff f967 	bl	801eb74 <mg_uecc_vli_add>
 801f8a6:	4603      	mov	r3, r0
 801f8a8:	461a      	mov	r2, r3
 801f8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8ac:	4413      	add	r3, r2
 801f8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801f8b0:	683b      	ldr	r3, [r7, #0]
 801f8b2:	6a1b      	ldr	r3, [r3, #32]
 801f8b4:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801f8b6:	683b      	ldr	r3, [r7, #0]
 801f8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f8ba:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f8c0:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801f8c2:	2300      	movs	r3, #0
 801f8c4:	623b      	str	r3, [r7, #32]
 801f8c6:	6a3b      	ldr	r3, [r7, #32]
 801f8c8:	61fb      	str	r3, [r7, #28]
 801f8ca:	69fb      	ldr	r3, [r7, #28]
 801f8cc:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801f8ce:	683b      	ldr	r3, [r7, #0]
 801f8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f8d2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f8da:	f107 020c 	add.w	r2, r7, #12
 801f8de:	2308      	movs	r3, #8
 801f8e0:	6879      	ldr	r1, [r7, #4]
 801f8e2:	6878      	ldr	r0, [r7, #4]
 801f8e4:	f7ff f946 	bl	801eb74 <mg_uecc_vli_add>
 801f8e8:	4603      	mov	r3, r0
 801f8ea:	461a      	mov	r2, r3
 801f8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8ee:	4413      	add	r3, r2
 801f8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801f8f2:	683b      	ldr	r3, [r7, #0]
 801f8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f8f6:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801f8f8:	683b      	ldr	r3, [r7, #0]
 801f8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f8fc:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801f8fe:	683b      	ldr	r3, [r7, #0]
 801f900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f902:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f908:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801f90a:	683b      	ldr	r3, [r7, #0]
 801f90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f90e:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801f910:	683b      	ldr	r3, [r7, #0]
 801f912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f914:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f91a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 801f91c:	683b      	ldr	r3, [r7, #0]
 801f91e:	6a1b      	ldr	r3, [r3, #32]
 801f920:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801f922:	f107 020c 	add.w	r2, r7, #12
 801f926:	2308      	movs	r3, #8
 801f928:	6879      	ldr	r1, [r7, #4]
 801f92a:	6878      	ldr	r0, [r7, #4]
 801f92c:	f7ff f922 	bl	801eb74 <mg_uecc_vli_add>
 801f930:	4603      	mov	r3, r0
 801f932:	461a      	mov	r2, r3
 801f934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f936:	4413      	add	r3, r2
 801f938:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801f93a:	683b      	ldr	r3, [r7, #0]
 801f93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f93e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801f940:	683b      	ldr	r3, [r7, #0]
 801f942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f944:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 801f946:	683b      	ldr	r3, [r7, #0]
 801f948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f94a:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801f94c:	2300      	movs	r3, #0
 801f94e:	623b      	str	r3, [r7, #32]
 801f950:	6a3b      	ldr	r3, [r7, #32]
 801f952:	61fb      	str	r3, [r7, #28]
 801f954:	69fb      	ldr	r3, [r7, #28]
 801f956:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 801f958:	683b      	ldr	r3, [r7, #0]
 801f95a:	6a1b      	ldr	r3, [r3, #32]
 801f95c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 801f95e:	683b      	ldr	r3, [r7, #0]
 801f960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f962:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f964:	f107 020c 	add.w	r2, r7, #12
 801f968:	2308      	movs	r3, #8
 801f96a:	6879      	ldr	r1, [r7, #4]
 801f96c:	6878      	ldr	r0, [r7, #4]
 801f96e:	f7ff f94b 	bl	801ec08 <mg_uecc_vli_sub>
 801f972:	4603      	mov	r3, r0
 801f974:	461a      	mov	r2, r3
 801f976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f978:	1a9b      	subs	r3, r3, r2
 801f97a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 801f97c:	683b      	ldr	r3, [r7, #0]
 801f97e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f980:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 801f982:	683b      	ldr	r3, [r7, #0]
 801f984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f986:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801f988:	683b      	ldr	r3, [r7, #0]
 801f98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f98c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 801f98e:	683b      	ldr	r3, [r7, #0]
 801f990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f992:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 801f994:	2300      	movs	r3, #0
 801f996:	623b      	str	r3, [r7, #32]
 801f998:	6a3b      	ldr	r3, [r7, #32]
 801f99a:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 801f99c:	683b      	ldr	r3, [r7, #0]
 801f99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f9a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 801f9a2:	683b      	ldr	r3, [r7, #0]
 801f9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f9a8:	f107 020c 	add.w	r2, r7, #12
 801f9ac:	2308      	movs	r3, #8
 801f9ae:	6879      	ldr	r1, [r7, #4]
 801f9b0:	6878      	ldr	r0, [r7, #4]
 801f9b2:	f7ff f929 	bl	801ec08 <mg_uecc_vli_sub>
 801f9b6:	4603      	mov	r3, r0
 801f9b8:	461a      	mov	r2, r3
 801f9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f9bc:	1a9b      	subs	r3, r3, r2
 801f9be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801f9c0:	683b      	ldr	r3, [r7, #0]
 801f9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f9c4:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801f9c6:	683b      	ldr	r3, [r7, #0]
 801f9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f9ca:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 801f9cc:	683b      	ldr	r3, [r7, #0]
 801f9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f9d0:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801f9d2:	683b      	ldr	r3, [r7, #0]
 801f9d4:	6a1b      	ldr	r3, [r3, #32]
 801f9d6:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801f9d8:	683b      	ldr	r3, [r7, #0]
 801f9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f9dc:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801f9de:	683b      	ldr	r3, [r7, #0]
 801f9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f9e2:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801f9e8:	683b      	ldr	r3, [r7, #0]
 801f9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801f9ee:	f107 020c 	add.w	r2, r7, #12
 801f9f2:	2308      	movs	r3, #8
 801f9f4:	6879      	ldr	r1, [r7, #4]
 801f9f6:	6878      	ldr	r0, [r7, #4]
 801f9f8:	f7ff f906 	bl	801ec08 <mg_uecc_vli_sub>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	461a      	mov	r2, r3
 801fa00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa02:	1a9b      	subs	r3, r3, r2
 801fa04:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801fa06:	683b      	ldr	r3, [r7, #0]
 801fa08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fa0a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 801fa0c:	683b      	ldr	r3, [r7, #0]
 801fa0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fa10:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801fa12:	2300      	movs	r3, #0
 801fa14:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801fa16:	683b      	ldr	r3, [r7, #0]
 801fa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fa1a:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 801fa1c:	683b      	ldr	r3, [r7, #0]
 801fa1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa20:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801fa22:	683b      	ldr	r3, [r7, #0]
 801fa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa26:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801fa28:	2300      	movs	r3, #0
 801fa2a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 801fa2c:	683b      	ldr	r3, [r7, #0]
 801fa2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fa30:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801fa32:	f107 020c 	add.w	r2, r7, #12
 801fa36:	2308      	movs	r3, #8
 801fa38:	6879      	ldr	r1, [r7, #4]
 801fa3a:	6878      	ldr	r0, [r7, #4]
 801fa3c:	f7ff f8e4 	bl	801ec08 <mg_uecc_vli_sub>
 801fa40:	4603      	mov	r3, r0
 801fa42:	461a      	mov	r2, r3
 801fa44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa46:	1a9b      	subs	r3, r3, r2
 801fa48:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 801fa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	da19      	bge.n	801fa84 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 801fa50:	2308      	movs	r3, #8
 801fa52:	4a14      	ldr	r2, [pc, #80]	@ (801faa4 <vli_mmod_fast_secp256r1+0x2b0>)
 801fa54:	6879      	ldr	r1, [r7, #4]
 801fa56:	6878      	ldr	r0, [r7, #4]
 801fa58:	f7ff f88c 	bl	801eb74 <mg_uecc_vli_add>
 801fa5c:	4603      	mov	r3, r0
 801fa5e:	461a      	mov	r2, r3
 801fa60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa62:	4413      	add	r3, r2
 801fa64:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 801fa66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	dbf1      	blt.n	801fa50 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 801fa6c:	e015      	b.n	801fa9a <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 801fa6e:	2308      	movs	r3, #8
 801fa70:	4a0c      	ldr	r2, [pc, #48]	@ (801faa4 <vli_mmod_fast_secp256r1+0x2b0>)
 801fa72:	6879      	ldr	r1, [r7, #4]
 801fa74:	6878      	ldr	r0, [r7, #4]
 801fa76:	f7ff f8c7 	bl	801ec08 <mg_uecc_vli_sub>
 801fa7a:	4603      	mov	r3, r0
 801fa7c:	461a      	mov	r2, r3
 801fa7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa80:	1a9b      	subs	r3, r3, r2
 801fa82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 801fa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d1f1      	bne.n	801fa6e <vli_mmod_fast_secp256r1+0x27a>
 801fa8a:	2208      	movs	r2, #8
 801fa8c:	6879      	ldr	r1, [r7, #4]
 801fa8e:	4805      	ldr	r0, [pc, #20]	@ (801faa4 <vli_mmod_fast_secp256r1+0x2b0>)
 801fa90:	f7fe ffa7 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 801fa94:	4603      	mov	r3, r0
 801fa96:	2b01      	cmp	r3, #1
 801fa98:	d1e9      	bne.n	801fa6e <vli_mmod_fast_secp256r1+0x27a>
}
 801fa9a:	bf00      	nop
 801fa9c:	3730      	adds	r7, #48	@ 0x30
 801fa9e:	46bd      	mov	sp, r7
 801faa0:	bd80      	pop	{r7, pc}
 801faa2:	bf00      	nop
 801faa4:	0802d8e4 	.word	0x0802d8e4

0801faa8 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801faa8:	b580      	push	{r7, lr}
 801faaa:	b08c      	sub	sp, #48	@ 0x30
 801faac:	af00      	add	r7, sp, #0
 801faae:	60f8      	str	r0, [r7, #12]
 801fab0:	60b9      	str	r1, [r7, #8]
 801fab2:	607a      	str	r2, [r7, #4]
 801fab4:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801fab6:	f107 0310 	add.w	r3, r7, #16
 801faba:	683a      	ldr	r2, [r7, #0]
 801fabc:	6879      	ldr	r1, [r7, #4]
 801fabe:	4618      	mov	r0, r3
 801fac0:	f7ff fbad 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 801fac4:	f107 0210 	add.w	r2, r7, #16
 801fac8:	683b      	ldr	r3, [r7, #0]
 801faca:	68f9      	ldr	r1, [r7, #12]
 801facc:	68f8      	ldr	r0, [r7, #12]
 801face:	f7ff fb8a 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801fad2:	f107 0110 	add.w	r1, r7, #16
 801fad6:	f107 0010 	add.w	r0, r7, #16
 801fada:	683b      	ldr	r3, [r7, #0]
 801fadc:	687a      	ldr	r2, [r7, #4]
 801fade:	f7ff fb82 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801fae2:	f107 0210 	add.w	r2, r7, #16
 801fae6:	683b      	ldr	r3, [r7, #0]
 801fae8:	68b9      	ldr	r1, [r7, #8]
 801faea:	68b8      	ldr	r0, [r7, #8]
 801faec:	f7ff fb7b 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
}
 801faf0:	bf00      	nop
 801faf2:	3730      	adds	r7, #48	@ 0x30
 801faf4:	46bd      	mov	sp, r7
 801faf6:	bd80      	pop	{r7, pc}

0801faf8 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801faf8:	b590      	push	{r4, r7, lr}
 801fafa:	b08f      	sub	sp, #60	@ 0x3c
 801fafc:	af00      	add	r7, sp, #0
 801fafe:	60f8      	str	r0, [r7, #12]
 801fb00:	60b9      	str	r1, [r7, #8]
 801fb02:	607a      	str	r2, [r7, #4]
 801fb04:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801fb06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fb08:	781b      	ldrb	r3, [r3, #0]
 801fb0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801fb0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d008      	beq.n	801fb26 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 801fb14:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801fb18:	f107 0314 	add.w	r3, r7, #20
 801fb1c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801fb1e:	4618      	mov	r0, r3
 801fb20:	f7fe ff38 	bl	801e994 <mg_uecc_vli_set>
 801fb24:	e009      	b.n	801fb3a <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801fb26:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801fb2a:	f107 0314 	add.w	r3, r7, #20
 801fb2e:	4611      	mov	r1, r2
 801fb30:	4618      	mov	r0, r3
 801fb32:	f7fe fe6b 	bl	801e80c <mg_uecc_vli_clear>
    z[0] = 1;
 801fb36:	2301      	movs	r3, #1
 801fb38:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801fb3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fb3e:	461a      	mov	r2, r3
 801fb40:	68f9      	ldr	r1, [r7, #12]
 801fb42:	6878      	ldr	r0, [r7, #4]
 801fb44:	f7fe ff26 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 801fb48:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fb4c:	461a      	mov	r2, r3
 801fb4e:	68b9      	ldr	r1, [r7, #8]
 801fb50:	6838      	ldr	r0, [r7, #0]
 801fb52:	f7fe ff1f 	bl	801e994 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 801fb56:	f107 0214 	add.w	r2, r7, #20
 801fb5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fb5c:	68b9      	ldr	r1, [r7, #8]
 801fb5e:	68f8      	ldr	r0, [r7, #12]
 801fb60:	f7ff ffa2 	bl	801faa8 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 801fb64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fb66:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801fb6a:	f107 0214 	add.w	r2, r7, #20
 801fb6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fb70:	68b9      	ldr	r1, [r7, #8]
 801fb72:	68f8      	ldr	r0, [r7, #12]
 801fb74:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801fb76:	f107 0214 	add.w	r2, r7, #20
 801fb7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fb7c:	6839      	ldr	r1, [r7, #0]
 801fb7e:	6878      	ldr	r0, [r7, #4]
 801fb80:	f7ff ff92 	bl	801faa8 <apply_z>
}
 801fb84:	bf00      	nop
 801fb86:	373c      	adds	r7, #60	@ 0x3c
 801fb88:	46bd      	mov	sp, r7
 801fb8a:	bd90      	pop	{r4, r7, pc}

0801fb8c <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 801fb8c:	b580      	push	{r7, lr}
 801fb8e:	b090      	sub	sp, #64	@ 0x40
 801fb90:	af02      	add	r7, sp, #8
 801fb92:	60f8      	str	r0, [r7, #12]
 801fb94:	60b9      	str	r1, [r7, #8]
 801fb96:	607a      	str	r2, [r7, #4]
 801fb98:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801fb9a:	f107 0314 	add.w	r3, r7, #20
 801fb9e:	2220      	movs	r2, #32
 801fba0:	2100      	movs	r1, #0
 801fba2:	4618      	mov	r0, r3
 801fba4:	f007 fdf4 	bl	8027790 <memset>
  wordcount_t num_words = curve->num_words;
 801fba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbaa:	781b      	ldrb	r3, [r3, #0]
 801fbac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801fbb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbb2:	1d1a      	adds	r2, r3, #4
 801fbb4:	f107 0014 	add.w	r0, r7, #20
 801fbb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fbbc:	9300      	str	r3, [sp, #0]
 801fbbe:	4613      	mov	r3, r2
 801fbc0:	68fa      	ldr	r2, [r7, #12]
 801fbc2:	6879      	ldr	r1, [r7, #4]
 801fbc4:	f7ff f99b 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801fbc8:	f107 0114 	add.w	r1, r7, #20
 801fbcc:	f107 0314 	add.w	r3, r7, #20
 801fbd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fbd2:	4618      	mov	r0, r3
 801fbd4:	f7ff fb23 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801fbd8:	f107 0214 	add.w	r2, r7, #20
 801fbdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbde:	68f9      	ldr	r1, [r7, #12]
 801fbe0:	68f8      	ldr	r0, [r7, #12]
 801fbe2:	f7ff fb00 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801fbe6:	f107 0214 	add.w	r2, r7, #20
 801fbea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbec:	6879      	ldr	r1, [r7, #4]
 801fbee:	6878      	ldr	r0, [r7, #4]
 801fbf0:	f7ff faf9 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801fbf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fbf6:	1d1a      	adds	r2, r3, #4
 801fbf8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fbfc:	9300      	str	r3, [sp, #0]
 801fbfe:	4613      	mov	r3, r2
 801fc00:	68ba      	ldr	r2, [r7, #8]
 801fc02:	6839      	ldr	r1, [r7, #0]
 801fc04:	6838      	ldr	r0, [r7, #0]
 801fc06:	f7ff f97a 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801fc0a:	f107 0314 	add.w	r3, r7, #20
 801fc0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fc10:	6839      	ldr	r1, [r7, #0]
 801fc12:	4618      	mov	r0, r3
 801fc14:	f7ff fb03 	bl	801f21e <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801fc18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc1a:	1d1a      	adds	r2, r3, #4
 801fc1c:	f107 0114 	add.w	r1, r7, #20
 801fc20:	f107 0014 	add.w	r0, r7, #20
 801fc24:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fc28:	9300      	str	r3, [sp, #0]
 801fc2a:	4613      	mov	r3, r2
 801fc2c:	68fa      	ldr	r2, [r7, #12]
 801fc2e:	f7ff f966 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801fc32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc34:	1d1a      	adds	r2, r3, #4
 801fc36:	f107 0114 	add.w	r1, r7, #20
 801fc3a:	f107 0014 	add.w	r0, r7, #20
 801fc3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fc42:	9300      	str	r3, [sp, #0]
 801fc44:	4613      	mov	r3, r2
 801fc46:	687a      	ldr	r2, [r7, #4]
 801fc48:	f7ff f959 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 801fc4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc4e:	1d1a      	adds	r2, r3, #4
 801fc50:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fc54:	9300      	str	r3, [sp, #0]
 801fc56:	4613      	mov	r3, r2
 801fc58:	68fa      	ldr	r2, [r7, #12]
 801fc5a:	6879      	ldr	r1, [r7, #4]
 801fc5c:	6878      	ldr	r0, [r7, #4]
 801fc5e:	f7ff f94e 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 801fc62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc64:	687a      	ldr	r2, [r7, #4]
 801fc66:	68b9      	ldr	r1, [r7, #8]
 801fc68:	68b8      	ldr	r0, [r7, #8]
 801fc6a:	f7ff fabc 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 801fc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc70:	1d19      	adds	r1, r3, #4
 801fc72:	f107 0214 	add.w	r2, r7, #20
 801fc76:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fc7a:	9300      	str	r3, [sp, #0]
 801fc7c:	460b      	mov	r3, r1
 801fc7e:	68f9      	ldr	r1, [r7, #12]
 801fc80:	6878      	ldr	r0, [r7, #4]
 801fc82:	f7ff f93c 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801fc86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc88:	687a      	ldr	r2, [r7, #4]
 801fc8a:	6839      	ldr	r1, [r7, #0]
 801fc8c:	6838      	ldr	r0, [r7, #0]
 801fc8e:	f7ff faaa 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 801fc92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fc94:	1d1a      	adds	r2, r3, #4
 801fc96:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801fc9a:	9300      	str	r3, [sp, #0]
 801fc9c:	4613      	mov	r3, r2
 801fc9e:	68ba      	ldr	r2, [r7, #8]
 801fca0:	6839      	ldr	r1, [r7, #0]
 801fca2:	6838      	ldr	r0, [r7, #0]
 801fca4:	f7ff f92b 	bl	801eefe <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801fca8:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801fcac:	f107 0314 	add.w	r3, r7, #20
 801fcb0:	4619      	mov	r1, r3
 801fcb2:	6878      	ldr	r0, [r7, #4]
 801fcb4:	f7fe fe6e 	bl	801e994 <mg_uecc_vli_set>
}
 801fcb8:	bf00      	nop
 801fcba:	3738      	adds	r7, #56	@ 0x38
 801fcbc:	46bd      	mov	sp, r7
 801fcbe:	bd80      	pop	{r7, pc}

0801fcc0 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801fcc0:	b590      	push	{r4, r7, lr}
 801fcc2:	b0a1      	sub	sp, #132	@ 0x84
 801fcc4:	af02      	add	r7, sp, #8
 801fcc6:	60f8      	str	r0, [r7, #12]
 801fcc8:	60b9      	str	r1, [r7, #8]
 801fcca:	607a      	str	r2, [r7, #4]
 801fccc:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801fcce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801fcd2:	2220      	movs	r2, #32
 801fcd4:	2100      	movs	r1, #0
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	f007 fd5a 	bl	8027790 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801fcdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fce0:	781b      	ldrb	r3, [r3, #0]
 801fce2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801fce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fcea:	1d1a      	adds	r2, r3, #4
 801fcec:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801fcf0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fcf4:	9300      	str	r3, [sp, #0]
 801fcf6:	4613      	mov	r3, r2
 801fcf8:	68fa      	ldr	r2, [r7, #12]
 801fcfa:	6879      	ldr	r1, [r7, #4]
 801fcfc:	f7ff f8ff 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801fd00:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801fd04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801fd08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	f7ff fa86 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801fd12:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801fd16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd1a:	68f9      	ldr	r1, [r7, #12]
 801fd1c:	68f8      	ldr	r0, [r7, #12]
 801fd1e:	f7ff fa62 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801fd22:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801fd26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd2a:	6879      	ldr	r1, [r7, #4]
 801fd2c:	6878      	ldr	r0, [r7, #4]
 801fd2e:	f7ff fa5a 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801fd32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd36:	1d1a      	adds	r2, r3, #4
 801fd38:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801fd3c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd40:	9300      	str	r3, [sp, #0]
 801fd42:	4613      	mov	r3, r2
 801fd44:	68ba      	ldr	r2, [r7, #8]
 801fd46:	6839      	ldr	r1, [r7, #0]
 801fd48:	f7ff f8b2 	bl	801eeb0 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801fd4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd50:	1d1a      	adds	r2, r3, #4
 801fd52:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd56:	9300      	str	r3, [sp, #0]
 801fd58:	4613      	mov	r3, r2
 801fd5a:	68ba      	ldr	r2, [r7, #8]
 801fd5c:	6839      	ldr	r1, [r7, #0]
 801fd5e:	6838      	ldr	r0, [r7, #0]
 801fd60:	f7ff f8cd 	bl	801eefe <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 801fd64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd68:	1d1a      	adds	r2, r3, #4
 801fd6a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fd6e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd72:	9300      	str	r3, [sp, #0]
 801fd74:	4613      	mov	r3, r2
 801fd76:	68fa      	ldr	r2, [r7, #12]
 801fd78:	6879      	ldr	r1, [r7, #4]
 801fd7a:	f7ff f8c0 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 801fd7e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801fd82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd86:	68b9      	ldr	r1, [r7, #8]
 801fd88:	68b8      	ldr	r0, [r7, #8]
 801fd8a:	f7ff fa2c 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 801fd8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fd92:	1d1a      	adds	r2, r3, #4
 801fd94:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fd98:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fd9c:	9300      	str	r3, [sp, #0]
 801fd9e:	4613      	mov	r3, r2
 801fda0:	687a      	ldr	r2, [r7, #4]
 801fda2:	68f9      	ldr	r1, [r7, #12]
 801fda4:	f7ff f884 	bl	801eeb0 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801fda8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801fdac:	6839      	ldr	r1, [r7, #0]
 801fdae:	6878      	ldr	r0, [r7, #4]
 801fdb0:	f7ff fa35 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 801fdb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fdb8:	1d19      	adds	r1, r3, #4
 801fdba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801fdbe:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fdc2:	9300      	str	r3, [sp, #0]
 801fdc4:	460b      	mov	r3, r1
 801fdc6:	6879      	ldr	r1, [r7, #4]
 801fdc8:	6878      	ldr	r0, [r7, #4]
 801fdca:	f7ff f898 	bl	801eefe <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801fdce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fdd2:	1d1a      	adds	r2, r3, #4
 801fdd4:	f107 0014 	add.w	r0, r7, #20
 801fdd8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fddc:	9300      	str	r3, [sp, #0]
 801fdde:	4613      	mov	r3, r2
 801fde0:	687a      	ldr	r2, [r7, #4]
 801fde2:	68f9      	ldr	r1, [r7, #12]
 801fde4:	f7ff f88b 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801fde8:	f107 0214 	add.w	r2, r7, #20
 801fdec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fdf0:	6839      	ldr	r1, [r7, #0]
 801fdf2:	6838      	ldr	r0, [r7, #0]
 801fdf4:	f7ff f9f7 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801fdf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fdfc:	1d1a      	adds	r2, r3, #4
 801fdfe:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fe02:	9300      	str	r3, [sp, #0]
 801fe04:	4613      	mov	r3, r2
 801fe06:	68ba      	ldr	r2, [r7, #8]
 801fe08:	6839      	ldr	r1, [r7, #0]
 801fe0a:	6838      	ldr	r0, [r7, #0]
 801fe0c:	f7ff f877 	bl	801eefe <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801fe10:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801fe14:	f107 0314 	add.w	r3, r7, #20
 801fe18:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801fe1c:	4618      	mov	r0, r3
 801fe1e:	f7ff f9fe 	bl	801f21e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801fe22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fe26:	1d1c      	adds	r4, r3, #4
 801fe28:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801fe2c:	f107 0114 	add.w	r1, r7, #20
 801fe30:	f107 0014 	add.w	r0, r7, #20
 801fe34:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fe38:	9300      	str	r3, [sp, #0]
 801fe3a:	4623      	mov	r3, r4
 801fe3c:	f7ff f85f 	bl	801eefe <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801fe40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fe44:	1d1a      	adds	r2, r3, #4
 801fe46:	f107 0114 	add.w	r1, r7, #20
 801fe4a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fe4e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fe52:	9300      	str	r3, [sp, #0]
 801fe54:	4613      	mov	r3, r2
 801fe56:	68fa      	ldr	r2, [r7, #12]
 801fe58:	f7ff f851 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 801fe5c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801fe60:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801fe64:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801fe68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fe6c:	f7ff f9bb 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801fe70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801fe74:	1d1a      	adds	r2, r3, #4
 801fe76:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801fe7a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801fe7e:	9300      	str	r3, [sp, #0]
 801fe80:	4613      	mov	r3, r2
 801fe82:	68ba      	ldr	r2, [r7, #8]
 801fe84:	68b8      	ldr	r0, [r7, #8]
 801fe86:	f7ff f83a 	bl	801eefe <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801fe8a:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 801fe8e:	f107 0314 	add.w	r3, r7, #20
 801fe92:	4619      	mov	r1, r3
 801fe94:	68f8      	ldr	r0, [r7, #12]
 801fe96:	f7fe fd7d 	bl	801e994 <mg_uecc_vli_set>
}
 801fe9a:	bf00      	nop
 801fe9c:	377c      	adds	r7, #124	@ 0x7c
 801fe9e:	46bd      	mov	sp, r7
 801fea0:	bd90      	pop	{r4, r7, pc}

0801fea2 <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 801fea2:	b590      	push	{r4, r7, lr}
 801fea4:	b0b1      	sub	sp, #196	@ 0xc4
 801fea6:	af02      	add	r7, sp, #8
 801fea8:	60f8      	str	r0, [r7, #12]
 801feaa:	60b9      	str	r1, [r7, #8]
 801feac:	607a      	str	r2, [r7, #4]
 801feae:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 801feb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801feb4:	781b      	ldrb	r3, [r3, #0]
 801feb6:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801feba:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801febe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801fec2:	3320      	adds	r3, #32
 801fec4:	68b9      	ldr	r1, [r7, #8]
 801fec6:	4618      	mov	r0, r3
 801fec8:	f7fe fd64 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 801fecc:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801fed0:	009b      	lsls	r3, r3, #2
 801fed2:	68ba      	ldr	r2, [r7, #8]
 801fed4:	18d1      	adds	r1, r2, r3
 801fed6:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801feda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801fede:	3320      	adds	r3, #32
 801fee0:	4618      	mov	r0, r3
 801fee2:	f7fe fd57 	bl	801e994 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801fee6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801feea:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801feee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801fef2:	f103 0120 	add.w	r1, r3, #32
 801fef6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801fefa:	f103 0020 	add.w	r0, r3, #32
 801fefe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ff02:	9301      	str	r3, [sp, #4]
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	9300      	str	r3, [sp, #0]
 801ff08:	4623      	mov	r3, r4
 801ff0a:	f7ff fdf5 	bl	801faf8 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801ff0e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801ff12:	3b02      	subs	r3, #2
 801ff14:	b29b      	uxth	r3, r3
 801ff16:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801ff1a:	e059      	b.n	801ffd0 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 801ff1c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801ff20:	4619      	mov	r1, r3
 801ff22:	6878      	ldr	r0, [r7, #4]
 801ff24:	f7fe fcbd 	bl	801e8a2 <mg_uecc_vli_testBit>
 801ff28:	4603      	mov	r3, r0
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	bf0c      	ite	eq
 801ff2e:	2301      	moveq	r3, #1
 801ff30:	2300      	movne	r3, #0
 801ff32:	b2db      	uxtb	r3, r3
 801ff34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801ff38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff3c:	f1c3 0301 	rsb	r3, r3, #1
 801ff40:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ff44:	015b      	lsls	r3, r3, #5
 801ff46:	18d0      	adds	r0, r2, r3
 801ff48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff4c:	f1c3 0301 	rsb	r3, r3, #1
 801ff50:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ff54:	015b      	lsls	r3, r3, #5
 801ff56:	18d1      	adds	r1, r2, r3
 801ff58:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ff5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff60:	015b      	lsls	r3, r3, #5
 801ff62:	18d4      	adds	r4, r2, r3
 801ff64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ff68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff6c:	015b      	lsls	r3, r3, #5
 801ff6e:	441a      	add	r2, r3
 801ff70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ff74:	9300      	str	r3, [sp, #0]
 801ff76:	4613      	mov	r3, r2
 801ff78:	4622      	mov	r2, r4
 801ff7a:	f7ff fea1 	bl	801fcc0 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801ff7e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ff82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff86:	015b      	lsls	r3, r3, #5
 801ff88:	18d0      	adds	r0, r2, r3
 801ff8a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ff8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff92:	015b      	lsls	r3, r3, #5
 801ff94:	18d1      	adds	r1, r2, r3
 801ff96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ff9a:	f1c3 0301 	rsb	r3, r3, #1
 801ff9e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801ffa2:	015b      	lsls	r3, r3, #5
 801ffa4:	18d4      	adds	r4, r2, r3
 801ffa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801ffaa:	f1c3 0301 	rsb	r3, r3, #1
 801ffae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ffb2:	015b      	lsls	r3, r3, #5
 801ffb4:	441a      	add	r2, r3
 801ffb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ffba:	9300      	str	r3, [sp, #0]
 801ffbc:	4613      	mov	r3, r2
 801ffbe:	4622      	mov	r2, r4
 801ffc0:	f7ff fde4 	bl	801fb8c <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 801ffc4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801ffc8:	3b01      	subs	r3, #1
 801ffca:	b29b      	uxth	r3, r3
 801ffcc:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801ffd0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	dca1      	bgt.n	801ff1c <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801ffd8:	2100      	movs	r1, #0
 801ffda:	6878      	ldr	r0, [r7, #4]
 801ffdc:	f7fe fc61 	bl	801e8a2 <mg_uecc_vli_testBit>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	bf0c      	ite	eq
 801ffe6:	2301      	moveq	r3, #1
 801ffe8:	2300      	movne	r3, #0
 801ffea:	b2db      	uxtb	r3, r3
 801ffec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801fff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801fff4:	f1c3 0301 	rsb	r3, r3, #1
 801fff8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801fffc:	015b      	lsls	r3, r3, #5
 801fffe:	18d0      	adds	r0, r2, r3
 8020000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020004:	f1c3 0301 	rsb	r3, r3, #1
 8020008:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 802000c:	015b      	lsls	r3, r3, #5
 802000e:	18d1      	adds	r1, r2, r3
 8020010:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020018:	015b      	lsls	r3, r3, #5
 802001a:	18d4      	adds	r4, r2, r3
 802001c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020024:	015b      	lsls	r3, r3, #5
 8020026:	441a      	add	r2, r3
 8020028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802002c:	9300      	str	r3, [sp, #0]
 802002e:	4613      	mov	r3, r2
 8020030:	4622      	mov	r2, r4
 8020032:	f7ff fe45 	bl	801fcc0 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8020036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802003a:	1d1c      	adds	r4, r3, #4
 802003c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020040:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8020044:	f103 0120 	add.w	r1, r3, #32
 8020048:	f107 0010 	add.w	r0, r7, #16
 802004c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020050:	9300      	str	r3, [sp, #0]
 8020052:	4623      	mov	r3, r4
 8020054:	f7fe ff53 	bl	801eefe <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 8020058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802005c:	f1c3 0301 	rsb	r3, r3, #1
 8020060:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020064:	015b      	lsls	r3, r3, #5
 8020066:	441a      	add	r2, r3
 8020068:	f107 0110 	add.w	r1, r7, #16
 802006c:	f107 0010 	add.w	r0, r7, #16
 8020070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020074:	f7ff f8b7 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8020078:	f107 0110 	add.w	r1, r7, #16
 802007c:	f107 0010 	add.w	r0, r7, #16
 8020080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020084:	68ba      	ldr	r2, [r7, #8]
 8020086:	f7ff f8ae 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 802008a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802008e:	1d1a      	adds	r2, r3, #4
 8020090:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020094:	f107 0110 	add.w	r1, r7, #16
 8020098:	f107 0010 	add.w	r0, r7, #16
 802009c:	f7ff f907 	bl	801f2ae <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 80200a0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 80200a4:	009b      	lsls	r3, r3, #2
 80200a6:	68ba      	ldr	r2, [r7, #8]
 80200a8:	441a      	add	r2, r3
 80200aa:	f107 0110 	add.w	r1, r7, #16
 80200ae:	f107 0010 	add.w	r0, r7, #16
 80200b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80200b6:	f7ff f896 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 80200ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80200be:	f1c3 0301 	rsb	r3, r3, #1
 80200c2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80200c6:	015b      	lsls	r3, r3, #5
 80200c8:	441a      	add	r2, r3
 80200ca:	f107 0110 	add.w	r1, r7, #16
 80200ce:	f107 0010 	add.w	r0, r7, #16
 80200d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80200d6:	f7ff f886 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 80200da:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80200de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80200e2:	015b      	lsls	r3, r3, #5
 80200e4:	18d0      	adds	r0, r2, r3
 80200e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80200ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80200ee:	015b      	lsls	r3, r3, #5
 80200f0:	18d1      	adds	r1, r2, r3
 80200f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80200f6:	f1c3 0301 	rsb	r3, r3, #1
 80200fa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80200fe:	015b      	lsls	r3, r3, #5
 8020100:	18d4      	adds	r4, r2, r3
 8020102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020106:	f1c3 0301 	rsb	r3, r3, #1
 802010a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 802010e:	015b      	lsls	r3, r3, #5
 8020110:	441a      	add	r2, r3
 8020112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020116:	9300      	str	r3, [sp, #0]
 8020118:	4613      	mov	r3, r2
 802011a:	4622      	mov	r2, r4
 802011c:	f7ff fd36 	bl	801fb8c <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8020120:	f107 0210 	add.w	r2, r7, #16
 8020124:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020128:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802012c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020130:	f7ff fcba 	bl	801faa8 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8020134:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020138:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802013c:	4619      	mov	r1, r3
 802013e:	68f8      	ldr	r0, [r7, #12]
 8020140:	f7fe fc28 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8020144:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020148:	009b      	lsls	r3, r3, #2
 802014a:	68fa      	ldr	r2, [r7, #12]
 802014c:	4413      	add	r3, r2
 802014e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020152:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020156:	4618      	mov	r0, r3
 8020158:	f7fe fc1c 	bl	801e994 <mg_uecc_vli_set>
}
 802015c:	bf00      	nop
 802015e:	37bc      	adds	r7, #188	@ 0xbc
 8020160:	46bd      	mov	sp, r7
 8020162:	bd90      	pop	{r4, r7, pc}

08020164 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8020164:	b580      	push	{r7, lr}
 8020166:	b086      	sub	sp, #24
 8020168:	af00      	add	r7, sp, #0
 802016a:	60f8      	str	r0, [r7, #12]
 802016c:	60b9      	str	r1, [r7, #8]
 802016e:	607a      	str	r2, [r7, #4]
 8020170:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8020172:	683b      	ldr	r3, [r7, #0]
 8020174:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020178:	331f      	adds	r3, #31
 802017a:	2b00      	cmp	r3, #0
 802017c:	da00      	bge.n	8020180 <regularize_k+0x1c>
 802017e:	331f      	adds	r3, #31
 8020180:	115b      	asrs	r3, r3, #5
 8020182:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 8020184:	683b      	ldr	r3, [r7, #0]
 8020186:	885b      	ldrh	r3, [r3, #2]
 8020188:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 802018a:	683b      	ldr	r3, [r7, #0]
 802018c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020194:	68f9      	ldr	r1, [r7, #12]
 8020196:	68b8      	ldr	r0, [r7, #8]
 8020198:	f7fe fcec 	bl	801eb74 <mg_uecc_vli_add>
 802019c:	4603      	mov	r3, r0
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d10f      	bne.n	80201c2 <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 80201a2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80201a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80201aa:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80201ac:	429a      	cmp	r2, r3
 80201ae:	da0a      	bge.n	80201c6 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 80201b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80201b4:	4619      	mov	r1, r3
 80201b6:	68b8      	ldr	r0, [r7, #8]
 80201b8:	f7fe fb73 	bl	801e8a2 <mg_uecc_vli_testBit>
 80201bc:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 80201be:	2b00      	cmp	r3, #0
 80201c0:	d001      	beq.n	80201c6 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 80201c2:	2301      	movs	r3, #1
 80201c4:	e000      	b.n	80201c8 <regularize_k+0x64>
 80201c6:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 80201c8:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 80201ca:	683b      	ldr	r3, [r7, #0]
 80201cc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80201d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80201d4:	68b9      	ldr	r1, [r7, #8]
 80201d6:	6878      	ldr	r0, [r7, #4]
 80201d8:	f7fe fccc 	bl	801eb74 <mg_uecc_vli_add>
  return carry;
 80201dc:	693b      	ldr	r3, [r7, #16]
}
 80201de:	4618      	mov	r0, r3
 80201e0:	3718      	adds	r7, #24
 80201e2:	46bd      	mov	sp, r7
 80201e4:	bd80      	pop	{r7, pc}
	...

080201e8 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b088      	sub	sp, #32
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	60f8      	str	r0, [r7, #12]
 80201f0:	60b9      	str	r1, [r7, #8]
 80201f2:	4613      	mov	r3, r2
 80201f4:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 80201f6:	f04f 33ff 	mov.w	r3, #4294967295
 80201fa:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 80201fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020200:	4619      	mov	r1, r3
 8020202:	68b8      	ldr	r0, [r7, #8]
 8020204:	f7fe fb8d 	bl	801e922 <mg_uecc_vli_numBits>
 8020208:	4603      	mov	r3, r0
 802020a:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 802020c:	4b2a      	ldr	r3, [pc, #168]	@ (80202b8 <mg_uecc_generate_random_int+0xd0>)
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	2b00      	cmp	r3, #0
 8020212:	d101      	bne.n	8020218 <mg_uecc_generate_random_int+0x30>
    return 0;
 8020214:	2300      	movs	r3, #0
 8020216:	e04b      	b.n	80202b0 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8020218:	2300      	movs	r3, #0
 802021a:	61fb      	str	r3, [r7, #28]
 802021c:	e044      	b.n	80202a8 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 802021e:	4b26      	ldr	r3, [pc, #152]	@ (80202b8 <mg_uecc_generate_random_int+0xd0>)
 8020220:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 8020222:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8020226:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8020228:	4611      	mov	r1, r2
 802022a:	68f8      	ldr	r0, [r7, #12]
 802022c:	4798      	blx	r3
 802022e:	4603      	mov	r3, r0
 8020230:	2b00      	cmp	r3, #0
 8020232:	d101      	bne.n	8020238 <mg_uecc_generate_random_int+0x50>
      return 0;
 8020234:	2300      	movs	r3, #0
 8020236:	e03b      	b.n	80202b0 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8020238:	f997 2007 	ldrsb.w	r2, [r7, #7]
 802023c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8020240:	4413      	add	r3, r2
 8020242:	009b      	lsls	r3, r3, #2
 8020244:	68fa      	ldr	r2, [r7, #12]
 8020246:	4413      	add	r3, r2
 8020248:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 802024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802024e:	b29b      	uxth	r3, r3
 8020250:	015b      	lsls	r3, r3, #5
 8020252:	b29a      	uxth	r2, r3
 8020254:	8afb      	ldrh	r3, [r7, #22]
 8020256:	1ad3      	subs	r3, r2, r3
 8020258:	b29b      	uxth	r3, r3
 802025a:	b21b      	sxth	r3, r3
 802025c:	461a      	mov	r2, r3
 802025e:	69bb      	ldr	r3, [r7, #24]
 8020260:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 8020264:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8020268:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 802026c:	4403      	add	r3, r0
 802026e:	009b      	lsls	r3, r3, #2
 8020270:	68f8      	ldr	r0, [r7, #12]
 8020272:	4403      	add	r3, r0
 8020274:	400a      	ands	r2, r1
 8020276:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8020278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802027c:	4619      	mov	r1, r3
 802027e:	68f8      	ldr	r0, [r7, #12]
 8020280:	f7fe fae5 	bl	801e84e <mg_uecc_vli_isZero>
 8020284:	4603      	mov	r3, r0
 8020286:	2b00      	cmp	r3, #0
 8020288:	d10b      	bne.n	80202a2 <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 802028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802028e:	461a      	mov	r2, r3
 8020290:	68f9      	ldr	r1, [r7, #12]
 8020292:	68b8      	ldr	r0, [r7, #8]
 8020294:	f7fe fc13 	bl	801eabe <mg_uecc_vli_cmp>
 8020298:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 802029a:	2b01      	cmp	r3, #1
 802029c:	d101      	bne.n	80202a2 <mg_uecc_generate_random_int+0xba>
      return 1;
 802029e:	2301      	movs	r3, #1
 80202a0:	e006      	b.n	80202b0 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 80202a2:	69fb      	ldr	r3, [r7, #28]
 80202a4:	3301      	adds	r3, #1
 80202a6:	61fb      	str	r3, [r7, #28]
 80202a8:	69fb      	ldr	r3, [r7, #28]
 80202aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80202ac:	d9b7      	bls.n	802021e <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 80202ae:	2300      	movs	r3, #0
}
 80202b0:	4618      	mov	r0, r3
 80202b2:	3720      	adds	r7, #32
 80202b4:	46bd      	mov	sp, r7
 80202b6:	bd80      	pop	{r7, pc}
 80202b8:	240023a0 	.word	0x240023a0

080202bc <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 80202bc:	b480      	push	{r7}
 80202be:	b087      	sub	sp, #28
 80202c0:	af00      	add	r7, sp, #0
 80202c2:	60f8      	str	r0, [r7, #12]
 80202c4:	60b9      	str	r1, [r7, #8]
 80202c6:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 80202c8:	2300      	movs	r3, #0
 80202ca:	617b      	str	r3, [r7, #20]
 80202cc:	e018      	b.n	8020300 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 80202ce:	68bb      	ldr	r3, [r7, #8]
 80202d0:	1e5a      	subs	r2, r3, #1
 80202d2:	697b      	ldr	r3, [r7, #20]
 80202d4:	1ad3      	subs	r3, r2, r3
 80202d6:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 80202d8:	693b      	ldr	r3, [r7, #16]
 80202da:	f023 0303 	bic.w	r3, r3, #3
 80202de:	687a      	ldr	r2, [r7, #4]
 80202e0:	4413      	add	r3, r2
 80202e2:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 80202e4:	693b      	ldr	r3, [r7, #16]
 80202e6:	f003 0303 	and.w	r3, r3, #3
 80202ea:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 80202ec:	fa22 f103 	lsr.w	r1, r2, r3
 80202f0:	697b      	ldr	r3, [r7, #20]
 80202f2:	68fa      	ldr	r2, [r7, #12]
 80202f4:	4413      	add	r3, r2
 80202f6:	b2ca      	uxtb	r2, r1
 80202f8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 80202fa:	697b      	ldr	r3, [r7, #20]
 80202fc:	3301      	adds	r3, #1
 80202fe:	617b      	str	r3, [r7, #20]
 8020300:	697a      	ldr	r2, [r7, #20]
 8020302:	68bb      	ldr	r3, [r7, #8]
 8020304:	429a      	cmp	r2, r3
 8020306:	dbe2      	blt.n	80202ce <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8020308:	bf00      	nop
 802030a:	bf00      	nop
 802030c:	371c      	adds	r7, #28
 802030e:	46bd      	mov	sp, r7
 8020310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020314:	4770      	bx	lr

08020316 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 8020316:	b580      	push	{r7, lr}
 8020318:	b086      	sub	sp, #24
 802031a:	af00      	add	r7, sp, #0
 802031c:	60f8      	str	r0, [r7, #12]
 802031e:	60b9      	str	r1, [r7, #8]
 8020320:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	3303      	adds	r3, #3
 8020326:	2b00      	cmp	r3, #0
 8020328:	da00      	bge.n	802032c <mg_uecc_vli_bytesToNative+0x16>
 802032a:	3303      	adds	r3, #3
 802032c:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 802032e:	b25b      	sxtb	r3, r3
 8020330:	4619      	mov	r1, r3
 8020332:	68f8      	ldr	r0, [r7, #12]
 8020334:	f7fe fa6a 	bl	801e80c <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8020338:	2300      	movs	r3, #0
 802033a:	617b      	str	r3, [r7, #20]
 802033c:	e01e      	b.n	802037c <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	1e5a      	subs	r2, r3, #1
 8020342:	697b      	ldr	r3, [r7, #20]
 8020344:	1ad3      	subs	r3, r2, r3
 8020346:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8020348:	693b      	ldr	r3, [r7, #16]
 802034a:	f023 0303 	bic.w	r3, r3, #3
 802034e:	68fa      	ldr	r2, [r7, #12]
 8020350:	4413      	add	r3, r2
 8020352:	6819      	ldr	r1, [r3, #0]
 8020354:	697b      	ldr	r3, [r7, #20]
 8020356:	68ba      	ldr	r2, [r7, #8]
 8020358:	4413      	add	r3, r2
 802035a:	781b      	ldrb	r3, [r3, #0]
 802035c:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 802035e:	693b      	ldr	r3, [r7, #16]
 8020360:	f003 0303 	and.w	r3, r3, #3
 8020364:	00db      	lsls	r3, r3, #3
 8020366:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8020368:	693b      	ldr	r3, [r7, #16]
 802036a:	f023 0303 	bic.w	r3, r3, #3
 802036e:	68f8      	ldr	r0, [r7, #12]
 8020370:	4403      	add	r3, r0
 8020372:	430a      	orrs	r2, r1
 8020374:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8020376:	697b      	ldr	r3, [r7, #20]
 8020378:	3301      	adds	r3, #1
 802037a:	617b      	str	r3, [r7, #20]
 802037c:	697a      	ldr	r2, [r7, #20]
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	429a      	cmp	r2, r3
 8020382:	dbdc      	blt.n	802033e <mg_uecc_vli_bytesToNative+0x28>
  }
}
 8020384:	bf00      	nop
 8020386:	bf00      	nop
 8020388:	3718      	adds	r7, #24
 802038a:	46bd      	mov	sp, r7
 802038c:	bd80      	pop	{r7, pc}

0802038e <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 802038e:	b580      	push	{r7, lr}
 8020390:	b08a      	sub	sp, #40	@ 0x28
 8020392:	af00      	add	r7, sp, #0
 8020394:	60f8      	str	r0, [r7, #12]
 8020396:	60b9      	str	r1, [r7, #8]
 8020398:	607a      	str	r2, [r7, #4]
 802039a:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 802039c:	683b      	ldr	r3, [r7, #0]
 802039e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80203a2:	3307      	adds	r3, #7
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	da00      	bge.n	80203aa <bits2int+0x1c>
 80203a8:	3307      	adds	r3, #7
 80203aa:	10db      	asrs	r3, r3, #3
 80203ac:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 80203ae:	683b      	ldr	r3, [r7, #0]
 80203b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80203b4:	331f      	adds	r3, #31
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	da00      	bge.n	80203bc <bits2int+0x2e>
 80203ba:	331f      	adds	r3, #31
 80203bc:	115b      	asrs	r3, r3, #5
 80203be:	b25b      	sxtb	r3, r3
 80203c0:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 80203c2:	687a      	ldr	r2, [r7, #4]
 80203c4:	69fb      	ldr	r3, [r7, #28]
 80203c6:	429a      	cmp	r2, r3
 80203c8:	d901      	bls.n	80203ce <bits2int+0x40>
    bits_size = num_n_bytes;
 80203ca:	69fb      	ldr	r3, [r7, #28]
 80203cc:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 80203ce:	69bb      	ldr	r3, [r7, #24]
 80203d0:	b25b      	sxtb	r3, r3
 80203d2:	4619      	mov	r1, r3
 80203d4:	68f8      	ldr	r0, [r7, #12]
 80203d6:	f7fe fa19 	bl	801e80c <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	461a      	mov	r2, r3
 80203de:	68b9      	ldr	r1, [r7, #8]
 80203e0:	68f8      	ldr	r0, [r7, #12]
 80203e2:	f7ff ff98 	bl	8020316 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	00db      	lsls	r3, r3, #3
 80203ea:	683a      	ldr	r2, [r7, #0]
 80203ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80203f0:	4293      	cmp	r3, r2
 80203f2:	d93a      	bls.n	802046a <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	00db      	lsls	r3, r3, #3
 80203f8:	683a      	ldr	r2, [r7, #0]
 80203fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80203fe:	1a9b      	subs	r3, r3, r2
 8020400:	617b      	str	r3, [r7, #20]
  carry = 0;
 8020402:	2300      	movs	r3, #0
 8020404:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 8020406:	69bb      	ldr	r3, [r7, #24]
 8020408:	009b      	lsls	r3, r3, #2
 802040a:	68fa      	ldr	r2, [r7, #12]
 802040c:	4413      	add	r3, r2
 802040e:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 8020410:	e010      	b.n	8020434 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 8020412:	6a3b      	ldr	r3, [r7, #32]
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 8020418:	693a      	ldr	r2, [r7, #16]
 802041a:	697b      	ldr	r3, [r7, #20]
 802041c:	40da      	lsrs	r2, r3
 802041e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020420:	431a      	orrs	r2, r3
 8020422:	6a3b      	ldr	r3, [r7, #32]
 8020424:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 8020426:	697b      	ldr	r3, [r7, #20]
 8020428:	f1c3 0320 	rsb	r3, r3, #32
 802042c:	693a      	ldr	r2, [r7, #16]
 802042e:	fa02 f303 	lsl.w	r3, r2, r3
 8020432:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 8020434:	6a3b      	ldr	r3, [r7, #32]
 8020436:	1f1a      	subs	r2, r3, #4
 8020438:	623a      	str	r2, [r7, #32]
 802043a:	68fa      	ldr	r2, [r7, #12]
 802043c:	429a      	cmp	r2, r3
 802043e:	d3e8      	bcc.n	8020412 <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 8020440:	683b      	ldr	r3, [r7, #0]
 8020442:	3324      	adds	r3, #36	@ 0x24
 8020444:	69ba      	ldr	r2, [r7, #24]
 8020446:	b252      	sxtb	r2, r2
 8020448:	68f9      	ldr	r1, [r7, #12]
 802044a:	4618      	mov	r0, r3
 802044c:	f7fe fac9 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 8020450:	4603      	mov	r3, r0
 8020452:	2b01      	cmp	r3, #1
 8020454:	d00a      	beq.n	802046c <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 8020456:	683b      	ldr	r3, [r7, #0]
 8020458:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 802045c:	69bb      	ldr	r3, [r7, #24]
 802045e:	b25b      	sxtb	r3, r3
 8020460:	68f9      	ldr	r1, [r7, #12]
 8020462:	68f8      	ldr	r0, [r7, #12]
 8020464:	f7fe fbd0 	bl	801ec08 <mg_uecc_vli_sub>
 8020468:	e000      	b.n	802046c <bits2int+0xde>
    return;
 802046a:	bf00      	nop
  }
}
 802046c:	3728      	adds	r7, #40	@ 0x28
 802046e:	46bd      	mov	sp, r7
 8020470:	bd80      	pop	{r7, pc}
	...

08020474 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 8020474:	b590      	push	{r4, r7, lr}
 8020476:	b0ad      	sub	sp, #180	@ 0xb4
 8020478:	af02      	add	r7, sp, #8
 802047a:	60f8      	str	r0, [r7, #12]
 802047c:	60b9      	str	r1, [r7, #8]
 802047e:	607a      	str	r2, [r7, #4]
 8020480:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 8020482:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8020486:	657b      	str	r3, [r7, #84]	@ 0x54
 8020488:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802048c:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 802048e:	2300      	movs	r3, #0
 8020490:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 8020494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020498:	781b      	ldrb	r3, [r3, #0]
 802049a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 802049e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80204a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80204a6:	331f      	adds	r3, #31
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	da00      	bge.n	80204ae <mg_uecc_sign_with_k_internal+0x3a>
 80204ac:	331f      	adds	r3, #31
 80204ae:	115b      	asrs	r3, r3, #5
 80204b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 80204b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80204b8:	885b      	ldrh	r3, [r3, #2]
 80204ba:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 80204be:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 80204c2:	4619      	mov	r1, r3
 80204c4:	6838      	ldr	r0, [r7, #0]
 80204c6:	f7fe f9c2 	bl	801e84e <mg_uecc_vli_isZero>
 80204ca:	4603      	mov	r3, r0
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d10b      	bne.n	80204e8 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 80204d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80204d4:	3324      	adds	r3, #36	@ 0x24
 80204d6:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80204da:	6839      	ldr	r1, [r7, #0]
 80204dc:	4618      	mov	r0, r3
 80204de:	f7fe faee 	bl	801eabe <mg_uecc_vli_cmp>
 80204e2:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 80204e4:	2b01      	cmp	r3, #1
 80204e6:	d001      	beq.n	80204ec <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 80204e8:	2300      	movs	r3, #0
 80204ea:	e128      	b.n	802073e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 80204ec:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80204f0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80204f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80204f8:	6838      	ldr	r0, [r7, #0]
 80204fa:	f7ff fe33 	bl	8020164 <regularize_k>
 80204fe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 8020502:	4b91      	ldr	r3, [pc, #580]	@ (8020748 <mg_uecc_sign_with_k_internal+0x2d4>)
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	2b00      	cmp	r3, #0
 8020508:	d01c      	beq.n	8020544 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 802050a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802050e:	009b      	lsls	r3, r3, #2
 8020510:	33a8      	adds	r3, #168	@ 0xa8
 8020512:	443b      	add	r3, r7
 8020514:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8020518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802051c:	3304      	adds	r3, #4
 802051e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8020522:	4619      	mov	r1, r3
 8020524:	f7ff fe60 	bl	80201e8 <mg_uecc_generate_random_int>
 8020528:	4603      	mov	r3, r0
 802052a:	2b00      	cmp	r3, #0
 802052c:	d101      	bne.n	8020532 <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 802052e:	2300      	movs	r3, #0
 8020530:	e105      	b.n	802073e <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 8020532:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8020536:	009b      	lsls	r3, r3, #2
 8020538:	33a8      	adds	r3, #168	@ 0xa8
 802053a:	443b      	add	r3, r7
 802053c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8020540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 8020544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020548:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 802054c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8020550:	2b00      	cmp	r3, #0
 8020552:	bf0c      	ite	eq
 8020554:	2301      	moveq	r3, #1
 8020556:	2300      	movne	r3, #0
 8020558:	b2db      	uxtb	r3, r3
 802055a:	009b      	lsls	r3, r3, #2
 802055c:	33a8      	adds	r3, #168	@ 0xa8
 802055e:	443b      	add	r3, r7
 8020560:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 8020564:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8020568:	3301      	adds	r3, #1
 802056a:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 802056c:	b21b      	sxth	r3, r3
 802056e:	f107 0014 	add.w	r0, r7, #20
 8020572:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8020576:	9201      	str	r2, [sp, #4]
 8020578:	9300      	str	r3, [sp, #0]
 802057a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802057e:	4622      	mov	r2, r4
 8020580:	f7ff fc8f 	bl	801fea2 <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 8020584:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8020588:	f107 0314 	add.w	r3, r7, #20
 802058c:	4611      	mov	r1, r2
 802058e:	4618      	mov	r0, r3
 8020590:	f7fe f95d 	bl	801e84e <mg_uecc_vli_isZero>
 8020594:	4603      	mov	r3, r0
 8020596:	2b00      	cmp	r3, #0
 8020598:	d001      	beq.n	802059e <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 802059a:	2300      	movs	r3, #0
 802059c:	e0cf      	b.n	802073e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 802059e:	4b6a      	ldr	r3, [pc, #424]	@ (8020748 <mg_uecc_sign_with_k_internal+0x2d4>)
 80205a0:	681b      	ldr	r3, [r3, #0]
 80205a2:	2b00      	cmp	r3, #0
 80205a4:	d10a      	bne.n	80205bc <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 80205a6:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80205aa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80205ae:	4611      	mov	r1, r2
 80205b0:	4618      	mov	r0, r3
 80205b2:	f7fe f92b 	bl	801e80c <mg_uecc_vli_clear>
    tmp[0] = 1;
 80205b6:	2301      	movs	r3, #1
 80205b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80205ba:	e00f      	b.n	80205dc <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 80205bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80205c0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80205c4:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80205c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80205cc:	4618      	mov	r0, r3
 80205ce:	f7ff fe0b 	bl	80201e8 <mg_uecc_generate_random_int>
 80205d2:	4603      	mov	r3, r0
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d101      	bne.n	80205dc <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 80205d8:	2300      	movs	r3, #0
 80205da:	e0b0      	b.n	802073e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 80205dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80205e0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80205e4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80205e8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80205ec:	9300      	str	r3, [sp, #0]
 80205ee:	460b      	mov	r3, r1
 80205f0:	6839      	ldr	r1, [r7, #0]
 80205f2:	6838      	ldr	r0, [r7, #0]
 80205f4:	f7fe fddc 	bl	801f1b0 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 80205f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80205fc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020600:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8020604:	6839      	ldr	r1, [r7, #0]
 8020606:	6838      	ldr	r0, [r7, #0]
 8020608:	f7fe fe51 	bl	801f2ae <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 802060c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020610:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8020614:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8020618:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 802061c:	9300      	str	r3, [sp, #0]
 802061e:	460b      	mov	r3, r1
 8020620:	6839      	ldr	r1, [r7, #0]
 8020622:	6838      	ldr	r0, [r7, #0]
 8020624:	f7fe fdc4 	bl	801f1b0 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8020628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802062c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020630:	4619      	mov	r1, r3
 8020632:	f107 0314 	add.w	r3, r7, #20
 8020636:	461a      	mov	r2, r3
 8020638:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 802063c:	f7ff fe3e 	bl	80202bc <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 8020640:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020648:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 802064a:	2b00      	cmp	r3, #0
 802064c:	da00      	bge.n	8020650 <mg_uecc_sign_with_k_internal+0x1dc>
 802064e:	3307      	adds	r3, #7
 8020650:	10db      	asrs	r3, r3, #3
 8020652:	461a      	mov	r2, r3
 8020654:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8020658:	68f9      	ldr	r1, [r7, #12]
 802065a:	4618      	mov	r0, r3
 802065c:	f7ff fe5b 	bl	8020316 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 8020660:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8020664:	3b01      	subs	r3, #1
 8020666:	009b      	lsls	r3, r3, #2
 8020668:	33a8      	adds	r3, #168	@ 0xa8
 802066a:	443b      	add	r3, r7
 802066c:	2200      	movs	r2, #0
 802066e:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 8020672:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8020676:	f107 0114 	add.w	r1, r7, #20
 802067a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802067e:	4618      	mov	r0, r3
 8020680:	f7fe f988 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 8020684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8020688:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 802068c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8020690:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8020694:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8020698:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 802069c:	9300      	str	r3, [sp, #0]
 802069e:	4623      	mov	r3, r4
 80206a0:	f7fe fd86 	bl	801f1b0 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 80206a4:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80206a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80206ac:	687a      	ldr	r2, [r7, #4]
 80206ae:	68b9      	ldr	r1, [r7, #8]
 80206b0:	f7ff fe6d 	bl	802038e <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 80206b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80206b8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80206bc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80206c0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80206c4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80206c8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80206cc:	9300      	str	r3, [sp, #0]
 80206ce:	4623      	mov	r3, r4
 80206d0:	f7fe fbee 	bl	801eeb0 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 80206d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80206d8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80206dc:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80206e0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80206e4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80206e8:	9300      	str	r3, [sp, #0]
 80206ea:	4613      	mov	r3, r2
 80206ec:	683a      	ldr	r2, [r7, #0]
 80206ee:	f7fe fd5f 	bl	801f1b0 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 80206f2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80206f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80206fa:	4611      	mov	r1, r2
 80206fc:	4618      	mov	r0, r3
 80206fe:	f7fe f910 	bl	801e922 <mg_uecc_vli_numBits>
 8020702:	4603      	mov	r3, r0
 8020704:	461a      	mov	r2, r3
 8020706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802070a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 802070e:	00db      	lsls	r3, r3, #3
 8020710:	429a      	cmp	r2, r3
 8020712:	dd01      	ble.n	8020718 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 8020714:	2300      	movs	r3, #0
 8020716:	e012      	b.n	802073e <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 8020718:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802071c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020720:	461a      	mov	r2, r3
 8020722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8020726:	1898      	adds	r0, r3, r2
 8020728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802072c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020730:	4619      	mov	r1, r3
 8020732:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8020736:	461a      	mov	r2, r3
 8020738:	f7ff fdc0 	bl	80202bc <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 802073c:	2301      	movs	r3, #1
}
 802073e:	4618      	mov	r0, r3
 8020740:	37ac      	adds	r7, #172	@ 0xac
 8020742:	46bd      	mov	sp, r7
 8020744:	bd90      	pop	{r4, r7, pc}
 8020746:	bf00      	nop
 8020748:	240023a0 	.word	0x240023a0

0802074c <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 802074c:	b580      	push	{r7, lr}
 802074e:	b084      	sub	sp, #16
 8020750:	af00      	add	r7, sp, #0
 8020752:	6078      	str	r0, [r7, #4]
 8020754:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 8020756:	687b      	ldr	r3, [r7, #4]
 8020758:	695a      	ldr	r2, [r3, #20]
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	691b      	ldr	r3, [r3, #16]
 802075e:	005b      	lsls	r3, r3, #1
 8020760:	4413      	add	r3, r2
 8020762:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 8020764:	2300      	movs	r3, #0
 8020766:	60fb      	str	r3, [r7, #12]
 8020768:	e00d      	b.n	8020786 <HMAC_init+0x3a>
 802076a:	683a      	ldr	r2, [r7, #0]
 802076c:	68fb      	ldr	r3, [r7, #12]
 802076e:	4413      	add	r3, r2
 8020770:	781a      	ldrb	r2, [r3, #0]
 8020772:	68b9      	ldr	r1, [r7, #8]
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	440b      	add	r3, r1
 8020778:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 802077c:	b2d2      	uxtb	r2, r2
 802077e:	701a      	strb	r2, [r3, #0]
 8020780:	68fb      	ldr	r3, [r7, #12]
 8020782:	3301      	adds	r3, #1
 8020784:	60fb      	str	r3, [r7, #12]
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	691b      	ldr	r3, [r3, #16]
 802078a:	68fa      	ldr	r2, [r7, #12]
 802078c:	429a      	cmp	r2, r3
 802078e:	d3ec      	bcc.n	802076a <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 8020790:	e007      	b.n	80207a2 <HMAC_init+0x56>
 8020792:	68ba      	ldr	r2, [r7, #8]
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	4413      	add	r3, r2
 8020798:	2236      	movs	r2, #54	@ 0x36
 802079a:	701a      	strb	r2, [r3, #0]
 802079c:	68fb      	ldr	r3, [r7, #12]
 802079e:	3301      	adds	r3, #1
 80207a0:	60fb      	str	r3, [r7, #12]
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	68db      	ldr	r3, [r3, #12]
 80207a6:	68fa      	ldr	r2, [r7, #12]
 80207a8:	429a      	cmp	r2, r3
 80207aa:	d3f2      	bcc.n	8020792 <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	6878      	ldr	r0, [r7, #4]
 80207b2:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	685b      	ldr	r3, [r3, #4]
 80207b8:	687a      	ldr	r2, [r7, #4]
 80207ba:	68d2      	ldr	r2, [r2, #12]
 80207bc:	68b9      	ldr	r1, [r7, #8]
 80207be:	6878      	ldr	r0, [r7, #4]
 80207c0:	4798      	blx	r3
}
 80207c2:	bf00      	nop
 80207c4:	3710      	adds	r7, #16
 80207c6:	46bd      	mov	sp, r7
 80207c8:	bd80      	pop	{r7, pc}

080207ca <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 80207ca:	b580      	push	{r7, lr}
 80207cc:	b084      	sub	sp, #16
 80207ce:	af00      	add	r7, sp, #0
 80207d0:	60f8      	str	r0, [r7, #12]
 80207d2:	60b9      	str	r1, [r7, #8]
 80207d4:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 80207d6:	68fb      	ldr	r3, [r7, #12]
 80207d8:	685b      	ldr	r3, [r3, #4]
 80207da:	687a      	ldr	r2, [r7, #4]
 80207dc:	68b9      	ldr	r1, [r7, #8]
 80207de:	68f8      	ldr	r0, [r7, #12]
 80207e0:	4798      	blx	r3
}
 80207e2:	bf00      	nop
 80207e4:	3710      	adds	r7, #16
 80207e6:	46bd      	mov	sp, r7
 80207e8:	bd80      	pop	{r7, pc}

080207ea <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 80207ea:	b580      	push	{r7, lr}
 80207ec:	b086      	sub	sp, #24
 80207ee:	af00      	add	r7, sp, #0
 80207f0:	60f8      	str	r0, [r7, #12]
 80207f2:	60b9      	str	r1, [r7, #8]
 80207f4:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80207f6:	68fb      	ldr	r3, [r7, #12]
 80207f8:	695a      	ldr	r2, [r3, #20]
 80207fa:	68fb      	ldr	r3, [r7, #12]
 80207fc:	691b      	ldr	r3, [r3, #16]
 80207fe:	005b      	lsls	r3, r3, #1
 8020800:	4413      	add	r3, r2
 8020802:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 8020804:	2300      	movs	r3, #0
 8020806:	617b      	str	r3, [r7, #20]
 8020808:	e00d      	b.n	8020826 <HMAC_finish+0x3c>
 802080a:	68ba      	ldr	r2, [r7, #8]
 802080c:	697b      	ldr	r3, [r7, #20]
 802080e:	4413      	add	r3, r2
 8020810:	781a      	ldrb	r2, [r3, #0]
 8020812:	6939      	ldr	r1, [r7, #16]
 8020814:	697b      	ldr	r3, [r7, #20]
 8020816:	440b      	add	r3, r1
 8020818:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 802081c:	b2d2      	uxtb	r2, r2
 802081e:	701a      	strb	r2, [r3, #0]
 8020820:	697b      	ldr	r3, [r7, #20]
 8020822:	3301      	adds	r3, #1
 8020824:	617b      	str	r3, [r7, #20]
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	691b      	ldr	r3, [r3, #16]
 802082a:	697a      	ldr	r2, [r7, #20]
 802082c:	429a      	cmp	r2, r3
 802082e:	d3ec      	bcc.n	802080a <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 8020830:	e007      	b.n	8020842 <HMAC_finish+0x58>
 8020832:	693a      	ldr	r2, [r7, #16]
 8020834:	697b      	ldr	r3, [r7, #20]
 8020836:	4413      	add	r3, r2
 8020838:	225c      	movs	r2, #92	@ 0x5c
 802083a:	701a      	strb	r2, [r3, #0]
 802083c:	697b      	ldr	r3, [r7, #20]
 802083e:	3301      	adds	r3, #1
 8020840:	617b      	str	r3, [r7, #20]
 8020842:	68fb      	ldr	r3, [r7, #12]
 8020844:	68db      	ldr	r3, [r3, #12]
 8020846:	697a      	ldr	r2, [r7, #20]
 8020848:	429a      	cmp	r2, r3
 802084a:	d3f2      	bcc.n	8020832 <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 802084c:	68fb      	ldr	r3, [r7, #12]
 802084e:	689b      	ldr	r3, [r3, #8]
 8020850:	6879      	ldr	r1, [r7, #4]
 8020852:	68f8      	ldr	r0, [r7, #12]
 8020854:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 8020856:	68fb      	ldr	r3, [r7, #12]
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	68f8      	ldr	r0, [r7, #12]
 802085c:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	685b      	ldr	r3, [r3, #4]
 8020862:	68fa      	ldr	r2, [r7, #12]
 8020864:	68d2      	ldr	r2, [r2, #12]
 8020866:	6939      	ldr	r1, [r7, #16]
 8020868:	68f8      	ldr	r0, [r7, #12]
 802086a:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	685b      	ldr	r3, [r3, #4]
 8020870:	68fa      	ldr	r2, [r7, #12]
 8020872:	6912      	ldr	r2, [r2, #16]
 8020874:	6879      	ldr	r1, [r7, #4]
 8020876:	68f8      	ldr	r0, [r7, #12]
 8020878:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 802087a:	68fb      	ldr	r3, [r7, #12]
 802087c:	689b      	ldr	r3, [r3, #8]
 802087e:	6879      	ldr	r1, [r7, #4]
 8020880:	68f8      	ldr	r0, [r7, #12]
 8020882:	4798      	blx	r3
}
 8020884:	bf00      	nop
 8020886:	3718      	adds	r7, #24
 8020888:	46bd      	mov	sp, r7
 802088a:	bd80      	pop	{r7, pc}

0802088c <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 802088c:	b580      	push	{r7, lr}
 802088e:	b084      	sub	sp, #16
 8020890:	af00      	add	r7, sp, #0
 8020892:	60f8      	str	r0, [r7, #12]
 8020894:	60b9      	str	r1, [r7, #8]
 8020896:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 8020898:	68b9      	ldr	r1, [r7, #8]
 802089a:	68f8      	ldr	r0, [r7, #12]
 802089c:	f7ff ff56 	bl	802074c <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 80208a0:	68fb      	ldr	r3, [r7, #12]
 80208a2:	691b      	ldr	r3, [r3, #16]
 80208a4:	461a      	mov	r2, r3
 80208a6:	6879      	ldr	r1, [r7, #4]
 80208a8:	68f8      	ldr	r0, [r7, #12]
 80208aa:	f7ff ff8e 	bl	80207ca <HMAC_update>
  HMAC_finish(hash_context, K, V);
 80208ae:	687a      	ldr	r2, [r7, #4]
 80208b0:	68b9      	ldr	r1, [r7, #8]
 80208b2:	68f8      	ldr	r0, [r7, #12]
 80208b4:	f7ff ff99 	bl	80207ea <HMAC_finish>
}
 80208b8:	bf00      	nop
 80208ba:	3710      	adds	r7, #16
 80208bc:	46bd      	mov	sp, r7
 80208be:	bd80      	pop	{r7, pc}

080208c0 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 80208c0:	b580      	push	{r7, lr}
 80208c2:	b096      	sub	sp, #88	@ 0x58
 80208c4:	af02      	add	r7, sp, #8
 80208c6:	60f8      	str	r0, [r7, #12]
 80208c8:	60b9      	str	r1, [r7, #8]
 80208ca:	607a      	str	r2, [r7, #4]
 80208cc:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 80208ce:	683b      	ldr	r3, [r7, #0]
 80208d0:	695b      	ldr	r3, [r3, #20]
 80208d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 80208d4:	683b      	ldr	r3, [r7, #0]
 80208d6:	691b      	ldr	r3, [r3, #16]
 80208d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80208da:	4413      	add	r3, r2
 80208dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 80208de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80208e0:	785b      	ldrb	r3, [r3, #1]
 80208e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80208e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80208e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80208ec:	331f      	adds	r3, #31
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	da00      	bge.n	80208f4 <mg_uecc_sign_deterministic+0x34>
 80208f2:	331f      	adds	r3, #31
 80208f4:	115b      	asrs	r3, r3, #5
 80208f6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 80208fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80208fc:	885b      	ldrh	r3, [r3, #2]
 80208fe:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 8020900:	2300      	movs	r3, #0
 8020902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020904:	e00c      	b.n	8020920 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 8020906:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802090a:	4413      	add	r3, r2
 802090c:	2201      	movs	r2, #1
 802090e:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 8020910:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020914:	4413      	add	r3, r2
 8020916:	2200      	movs	r2, #0
 8020918:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 802091a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802091c:	3301      	adds	r3, #1
 802091e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	691b      	ldr	r3, [r3, #16]
 8020924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020926:	429a      	cmp	r2, r3
 8020928:	d3ed      	bcc.n	8020906 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 802092a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802092c:	6838      	ldr	r0, [r7, #0]
 802092e:	f7ff ff0d 	bl	802074c <HMAC_init>
  V[hash_context->result_size] = 0x00;
 8020932:	683b      	ldr	r3, [r7, #0]
 8020934:	691b      	ldr	r3, [r3, #16]
 8020936:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020938:	4413      	add	r3, r2
 802093a:	2200      	movs	r2, #0
 802093c:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 802093e:	683b      	ldr	r3, [r7, #0]
 8020940:	691b      	ldr	r3, [r3, #16]
 8020942:	3301      	adds	r3, #1
 8020944:	461a      	mov	r2, r3
 8020946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020948:	6838      	ldr	r0, [r7, #0]
 802094a:	f7ff ff3e 	bl	80207ca <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 802094e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8020952:	461a      	mov	r2, r3
 8020954:	68f9      	ldr	r1, [r7, #12]
 8020956:	6838      	ldr	r0, [r7, #0]
 8020958:	f7ff ff37 	bl	80207ca <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 802095c:	687a      	ldr	r2, [r7, #4]
 802095e:	68b9      	ldr	r1, [r7, #8]
 8020960:	6838      	ldr	r0, [r7, #0]
 8020962:	f7ff ff32 	bl	80207ca <HMAC_update>
  HMAC_finish(hash_context, K, K);
 8020966:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802096a:	6838      	ldr	r0, [r7, #0]
 802096c:	f7ff ff3d 	bl	80207ea <HMAC_finish>

  update_V(hash_context, K, V);
 8020970:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020972:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020974:	6838      	ldr	r0, [r7, #0]
 8020976:	f7ff ff89 	bl	802088c <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 802097a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802097c:	6838      	ldr	r0, [r7, #0]
 802097e:	f7ff fee5 	bl	802074c <HMAC_init>
  V[hash_context->result_size] = 0x01;
 8020982:	683b      	ldr	r3, [r7, #0]
 8020984:	691b      	ldr	r3, [r3, #16]
 8020986:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020988:	4413      	add	r3, r2
 802098a:	2201      	movs	r2, #1
 802098c:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 802098e:	683b      	ldr	r3, [r7, #0]
 8020990:	691b      	ldr	r3, [r3, #16]
 8020992:	3301      	adds	r3, #1
 8020994:	461a      	mov	r2, r3
 8020996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020998:	6838      	ldr	r0, [r7, #0]
 802099a:	f7ff ff16 	bl	80207ca <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 802099e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80209a2:	461a      	mov	r2, r3
 80209a4:	68f9      	ldr	r1, [r7, #12]
 80209a6:	6838      	ldr	r0, [r7, #0]
 80209a8:	f7ff ff0f 	bl	80207ca <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 80209ac:	687a      	ldr	r2, [r7, #4]
 80209ae:	68b9      	ldr	r1, [r7, #8]
 80209b0:	6838      	ldr	r0, [r7, #0]
 80209b2:	f7ff ff0a 	bl	80207ca <HMAC_update>
  HMAC_finish(hash_context, K, K);
 80209b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80209b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80209ba:	6838      	ldr	r0, [r7, #0]
 80209bc:	f7ff ff15 	bl	80207ea <HMAC_finish>

  update_V(hash_context, K, V);
 80209c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80209c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80209c4:	6838      	ldr	r0, [r7, #0]
 80209c6:	f7ff ff61 	bl	802088c <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 80209ca:	2300      	movs	r3, #0
 80209cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80209ce:	e084      	b.n	8020ada <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 80209d0:	f107 0310 	add.w	r3, r7, #16
 80209d4:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 80209d6:	2300      	movs	r3, #0
 80209d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 80209dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80209de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80209e0:	6838      	ldr	r0, [r7, #0]
 80209e2:	f7ff ff53 	bl	802088c <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 80209e6:	2300      	movs	r3, #0
 80209e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80209ea:	e017      	b.n	8020a1c <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 80209ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80209ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80209f0:	441a      	add	r2, r3
 80209f2:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 80209f6:	b2cb      	uxtb	r3, r1
 80209f8:	3301      	adds	r3, #1
 80209fa:	b2db      	uxtb	r3, r3
 80209fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8020a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020a02:	440b      	add	r3, r1
 8020a04:	7812      	ldrb	r2, [r2, #0]
 8020a06:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 8020a08:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 8020a0c:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020a10:	009b      	lsls	r3, r3, #2
 8020a12:	429a      	cmp	r2, r3
 8020a14:	da08      	bge.n	8020a28 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 8020a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020a18:	3301      	adds	r3, #1
 8020a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020a1c:	683b      	ldr	r3, [r7, #0]
 8020a1e:	691b      	ldr	r3, [r3, #16]
 8020a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020a22:	429a      	cmp	r2, r3
 8020a24:	d3e2      	bcc.n	80209ec <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 8020a26:	e7d9      	b.n	80209dc <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 8020a28:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 8020a2a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020a2e:	015a      	lsls	r2, r3, #5
 8020a30:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8020a34:	429a      	cmp	r2, r3
 8020a36:	dd20      	ble.n	8020a7a <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8020a38:	f04f 33ff 	mov.w	r3, #4294967295
 8020a3c:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 8020a3e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020a42:	3b01      	subs	r3, #1
 8020a44:	009b      	lsls	r3, r3, #2
 8020a46:	3350      	adds	r3, #80	@ 0x50
 8020a48:	443b      	add	r3, r7
 8020a4a:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 8020a4e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020a52:	b29b      	uxth	r3, r3
 8020a54:	015b      	lsls	r3, r3, #5
 8020a56:	b29a      	uxth	r2, r3
 8020a58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8020a5a:	1ad3      	subs	r3, r2, r3
 8020a5c:	b29b      	uxth	r3, r3
 8020a5e:	b21b      	sxth	r3, r3
 8020a60:	461a      	mov	r2, r3
          mask >>
 8020a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a64:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 8020a68:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8020a6c:	3b01      	subs	r3, #1
 8020a6e:	400a      	ands	r2, r1
 8020a70:	009b      	lsls	r3, r3, #2
 8020a72:	3350      	adds	r3, #80	@ 0x50
 8020a74:	443b      	add	r3, r7
 8020a76:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 8020a7a:	f107 0210 	add.w	r2, r7, #16
 8020a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8020a80:	9301      	str	r3, [sp, #4]
 8020a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8020a84:	9300      	str	r3, [sp, #0]
 8020a86:	4613      	mov	r3, r2
 8020a88:	687a      	ldr	r2, [r7, #4]
 8020a8a:	68b9      	ldr	r1, [r7, #8]
 8020a8c:	68f8      	ldr	r0, [r7, #12]
 8020a8e:	f7ff fcf1 	bl	8020474 <mg_uecc_sign_with_k_internal>
 8020a92:	4603      	mov	r3, r0
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d001      	beq.n	8020a9c <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 8020a98:	2301      	movs	r3, #1
 8020a9a:	e023      	b.n	8020ae4 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 8020a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020a9e:	6838      	ldr	r0, [r7, #0]
 8020aa0:	f7ff fe54 	bl	802074c <HMAC_init>
    V[hash_context->result_size] = 0x00;
 8020aa4:	683b      	ldr	r3, [r7, #0]
 8020aa6:	691b      	ldr	r3, [r3, #16]
 8020aa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020aaa:	4413      	add	r3, r2
 8020aac:	2200      	movs	r2, #0
 8020aae:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8020ab0:	683b      	ldr	r3, [r7, #0]
 8020ab2:	691b      	ldr	r3, [r3, #16]
 8020ab4:	3301      	adds	r3, #1
 8020ab6:	461a      	mov	r2, r3
 8020ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020aba:	6838      	ldr	r0, [r7, #0]
 8020abc:	f7ff fe85 	bl	80207ca <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8020ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020ac2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020ac4:	6838      	ldr	r0, [r7, #0]
 8020ac6:	f7ff fe90 	bl	80207ea <HMAC_finish>

    update_V(hash_context, K, V);
 8020aca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020ace:	6838      	ldr	r0, [r7, #0]
 8020ad0:	f7ff fedc 	bl	802088c <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8020ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ad6:	3301      	adds	r3, #1
 8020ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020adc:	2b3f      	cmp	r3, #63	@ 0x3f
 8020ade:	f67f af77 	bls.w	80209d0 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 8020ae2:	2300      	movs	r3, #0
}
 8020ae4:	4618      	mov	r0, r3
 8020ae6:	3750      	adds	r7, #80	@ 0x50
 8020ae8:	46bd      	mov	sp, r7
 8020aea:	bd80      	pop	{r7, pc}

08020aec <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 8020aec:	b480      	push	{r7}
 8020aee:	b083      	sub	sp, #12
 8020af0:	af00      	add	r7, sp, #0
 8020af2:	4603      	mov	r3, r0
 8020af4:	460a      	mov	r2, r1
 8020af6:	80fb      	strh	r3, [r7, #6]
 8020af8:	4613      	mov	r3, r2
 8020afa:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 8020afc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8020b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020b04:	4293      	cmp	r3, r2
 8020b06:	bfb8      	it	lt
 8020b08:	4613      	movlt	r3, r2
 8020b0a:	b21b      	sxth	r3, r3
}
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	370c      	adds	r7, #12
 8020b10:	46bd      	mov	sp, r7
 8020b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b16:	4770      	bx	lr

08020b18 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 8020b18:	b590      	push	{r4, r7, lr}
 8020b1a:	b0ff      	sub	sp, #508	@ 0x1fc
 8020b1c:	af02      	add	r7, sp, #8
 8020b1e:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 8020b22:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 8020b26:	6020      	str	r0, [r4, #0]
 8020b28:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8020b2c:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 8020b30:	6001      	str	r1, [r0, #0]
 8020b32:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 8020b36:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 8020b3a:	600a      	str	r2, [r1, #0]
 8020b3c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8020b40:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8020b44:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8020b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8020b50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020b54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020b58:	331f      	adds	r3, #31
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	da00      	bge.n	8020b60 <mg_uecc_verify+0x48>
 8020b5e:	331f      	adds	r3, #31
 8020b60:	115b      	asrs	r3, r3, #5
 8020b62:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 8020b66:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020b6a:	3b01      	subs	r3, #1
 8020b6c:	009b      	lsls	r3, r3, #2
 8020b6e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8020b72:	443b      	add	r3, r7
 8020b74:	2200      	movs	r2, #0
 8020b76:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 8020b7a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020b7e:	1e5a      	subs	r2, r3, #1
 8020b80:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020b84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8020b88:	2100      	movs	r1, #0
 8020b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 8020b8e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020b92:	1e5a      	subs	r2, r3, #1
 8020b94:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020b98:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8020b9c:	2100      	movs	r1, #0
 8020b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 8020ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020ba6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020baa:	461a      	mov	r2, r3
 8020bac:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020bb0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020bb4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8020bb8:	6819      	ldr	r1, [r3, #0]
 8020bba:	f7ff fbac 	bl	8020316 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8020bbe:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020bc2:	009b      	lsls	r3, r3, #2
 8020bc4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020bc8:	18d0      	adds	r0, r2, r3
 8020bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020bce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020bd2:	461a      	mov	r2, r3
 8020bd4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020bd8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8020bdc:	681b      	ldr	r3, [r3, #0]
 8020bde:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 8020be0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020be4:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8020be8:	461a      	mov	r2, r3
 8020bea:	f7ff fb94 	bl	8020316 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 8020bee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020bf2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020bf6:	461a      	mov	r2, r3
 8020bf8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020bfc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8020c00:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020c04:	6819      	ldr	r1, [r3, #0]
 8020c06:	f7ff fb86 	bl	8020316 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 8020c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020c12:	461a      	mov	r2, r3
 8020c14:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020c18:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8020c1c:	681b      	ldr	r3, [r3, #0]
 8020c1e:	1899      	adds	r1, r3, r2
 8020c20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020c28:	461a      	mov	r2, r3
 8020c2a:	f107 0310 	add.w	r3, r7, #16
 8020c2e:	4618      	mov	r0, r3
 8020c30:	f7ff fb71 	bl	8020316 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8020c34:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020c38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020c3c:	4611      	mov	r1, r2
 8020c3e:	4618      	mov	r0, r3
 8020c40:	f7fd fe05 	bl	801e84e <mg_uecc_vli_isZero>
 8020c44:	4603      	mov	r3, r0
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d10a      	bne.n	8020c60 <mg_uecc_verify+0x148>
 8020c4a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020c4e:	f107 0310 	add.w	r3, r7, #16
 8020c52:	4611      	mov	r1, r2
 8020c54:	4618      	mov	r0, r3
 8020c56:	f7fd fdfa 	bl	801e84e <mg_uecc_vli_isZero>
 8020c5a:	4603      	mov	r3, r0
 8020c5c:	2b00      	cmp	r3, #0
 8020c5e:	d001      	beq.n	8020c64 <mg_uecc_verify+0x14c>
    return 0;
 8020c60:	2300      	movs	r3, #0
 8020c62:	e220      	b.n	80210a6 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8020c64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c68:	3324      	adds	r3, #36	@ 0x24
 8020c6a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020c6e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020c72:	4618      	mov	r0, r3
 8020c74:	f7fd feb5 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 8020c78:	4603      	mov	r3, r0
 8020c7a:	2b01      	cmp	r3, #1
 8020c7c:	d10c      	bne.n	8020c98 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8020c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020c82:	3324      	adds	r3, #36	@ 0x24
 8020c84:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020c88:	f107 0110 	add.w	r1, r7, #16
 8020c8c:	4618      	mov	r0, r3
 8020c8e:	f7fd fea8 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 8020c92:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8020c94:	2b01      	cmp	r3, #1
 8020c96:	d001      	beq.n	8020c9c <mg_uecc_verify+0x184>
    return 0;
 8020c98:	2300      	movs	r3, #0
 8020c9a:	e204      	b.n	80210a6 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8020c9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020ca0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020ca4:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020ca8:	f107 0110 	add.w	r1, r7, #16
 8020cac:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020cb0:	f7fe fafd 	bl	801f2ae <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8020cb4:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020cb8:	3b01      	subs	r3, #1
 8020cba:	009b      	lsls	r3, r3, #2
 8020cbc:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8020cc0:	443b      	add	r3, r7
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 8020cc8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020ccc:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8020cd0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020cd4:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 8020cd8:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8020cdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020ce0:	6812      	ldr	r2, [r2, #0]
 8020ce2:	6809      	ldr	r1, [r1, #0]
 8020ce4:	f7ff fb53 	bl	802038e <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8020ce8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020cec:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8020cf0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020cf4:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 8020cf8:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8020cfc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020d00:	9300      	str	r3, [sp, #0]
 8020d02:	4623      	mov	r3, r4
 8020d04:	f7fe fa54 	bl	801f1b0 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 8020d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d0c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8020d10:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020d14:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020d18:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8020d1c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020d20:	9300      	str	r3, [sp, #0]
 8020d22:	4623      	mov	r3, r4
 8020d24:	f7fe fa44 	bl	801f1b0 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 8020d28:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020d2c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8020d30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8020d34:	4618      	mov	r0, r3
 8020d36:	f7fd fe2d 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 8020d3a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020d3e:	009b      	lsls	r3, r3, #2
 8020d40:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020d44:	18d0      	adds	r0, r2, r3
 8020d46:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020d4a:	009b      	lsls	r3, r3, #2
 8020d4c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020d50:	4413      	add	r3, r2
 8020d52:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020d56:	4619      	mov	r1, r3
 8020d58:	f7fd fe1c 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8020d5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d60:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8020d64:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020d68:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f7fd fe11 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8020d72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d76:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8020d7a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020d7e:	009b      	lsls	r3, r3, #2
 8020d80:	18d1      	adds	r1, r2, r3
 8020d82:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020d86:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f7fd fe02 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8020d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020d94:	1d1c      	adds	r4, r3, #4
 8020d96:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8020d9a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8020d9e:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020da2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020da6:	9300      	str	r3, [sp, #0]
 8020da8:	4623      	mov	r3, r4
 8020daa:	f7fe f8a8 	bl	801eefe <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8020dae:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020db2:	009b      	lsls	r3, r3, #2
 8020db4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020db8:	18d4      	adds	r4, r2, r3
 8020dba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020dbe:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8020dc2:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8020dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020dca:	9300      	str	r3, [sp, #0]
 8020dcc:	4623      	mov	r3, r4
 8020dce:	f7fe fedd 	bl	801fb8c <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8020dd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020dd6:	1d1a      	adds	r2, r3, #4
 8020dd8:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020ddc:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020de0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020de4:	f7fe fa63 	bl	801f2ae <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 8020de8:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020dec:	009b      	lsls	r3, r3, #2
 8020dee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020df2:	18d1      	adds	r1, r2, r3
 8020df4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020df8:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8020dfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020e00:	f7fe fe52 	bl	801faa8 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8020e04:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020e08:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 8020e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020e14:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8020e18:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020e1c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020e20:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8020e22:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020e26:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020e2a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020e2e:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8020e30:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020e34:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020e38:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020e3c:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 8020e3e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020e42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020e46:	4611      	mov	r1, r2
 8020e48:	4618      	mov	r0, r3
 8020e4a:	f7fd fd6a 	bl	801e922 <mg_uecc_vli_numBits>
 8020e4e:	4603      	mov	r3, r0
 8020e50:	461c      	mov	r4, r3
 8020e52:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020e56:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020e5a:	4611      	mov	r1, r2
 8020e5c:	4618      	mov	r0, r3
 8020e5e:	f7fd fd60 	bl	801e922 <mg_uecc_vli_numBits>
 8020e62:	4603      	mov	r3, r0
 8020e64:	4619      	mov	r1, r3
 8020e66:	4620      	mov	r0, r4
 8020e68:	f7ff fe40 	bl	8020aec <smax>
 8020e6c:	4603      	mov	r3, r0
 8020e6e:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020e72:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020e76:	3b01      	subs	r3, #1
 8020e78:	b29b      	uxth	r3, r3
 8020e7a:	b21a      	sxth	r2, r3
 8020e7c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020e80:	4611      	mov	r1, r2
 8020e82:	4618      	mov	r0, r3
 8020e84:	f7fd fd0d 	bl	801e8a2 <mg_uecc_vli_testBit>
 8020e88:	4603      	mov	r3, r0
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	bf14      	ite	ne
 8020e8e:	2301      	movne	r3, #1
 8020e90:	2300      	moveq	r3, #0
 8020e92:	b2db      	uxtb	r3, r3
 8020e94:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8020e96:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020e9a:	3b01      	subs	r3, #1
 8020e9c:	b29b      	uxth	r3, r3
 8020e9e:	b21a      	sxth	r2, r3
 8020ea0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020ea4:	4611      	mov	r1, r2
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	f7fd fcfb 	bl	801e8a2 <mg_uecc_vli_testBit>
 8020eac:	4603      	mov	r3, r0
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d001      	beq.n	8020eb6 <mg_uecc_verify+0x39e>
 8020eb2:	2302      	movs	r3, #2
 8020eb4:	e000      	b.n	8020eb8 <mg_uecc_verify+0x3a0>
 8020eb6:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020eb8:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8020ebc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020ec0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ec8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8020ecc:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020ed0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8020ed4:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8020ed8:	4618      	mov	r0, r3
 8020eda:	f7fd fd5b 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 8020ede:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020ee2:	009b      	lsls	r3, r3, #2
 8020ee4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8020ee8:	18d1      	adds	r1, r2, r3
 8020eea:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020eee:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8020ef2:	4618      	mov	r0, r3
 8020ef4:	f7fd fd4e 	bl	801e994 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 8020ef8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020efc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8020f00:	4611      	mov	r1, r2
 8020f02:	4618      	mov	r0, r3
 8020f04:	f7fd fc82 	bl	801e80c <mg_uecc_vli_clear>
  z[0] = 1;
 8020f08:	2301      	movs	r3, #1
 8020f0a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 8020f0e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020f12:	3b02      	subs	r3, #2
 8020f14:	b29b      	uxth	r3, r3
 8020f16:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8020f1a:	e087      	b.n	802102c <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8020f1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f20:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8020f24:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020f28:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8020f2c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020f30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020f34:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020f36:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8020f3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020f3e:	4611      	mov	r1, r2
 8020f40:	4618      	mov	r0, r3
 8020f42:	f7fd fcae 	bl	801e8a2 <mg_uecc_vli_testBit>
 8020f46:	4603      	mov	r3, r0
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	bf14      	ite	ne
 8020f4c:	2301      	movne	r3, #1
 8020f4e:	2300      	moveq	r3, #0
 8020f50:	b2db      	uxtb	r3, r3
 8020f52:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8020f54:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8020f58:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020f5c:	4611      	mov	r1, r2
 8020f5e:	4618      	mov	r0, r3
 8020f60:	f7fd fc9f 	bl	801e8a2 <mg_uecc_vli_testBit>
 8020f64:	4603      	mov	r3, r0
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	d001      	beq.n	8020f6e <mg_uecc_verify+0x456>
 8020f6a:	2302      	movs	r3, #2
 8020f6c:	e000      	b.n	8020f70 <mg_uecc_verify+0x458>
 8020f6e:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020f70:	4323      	orrs	r3, r4
 8020f72:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8020f76:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020f7a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020f7e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8020f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020f86:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 8020f8a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8020f8e:	2b00      	cmp	r3, #0
 8020f90:	d046      	beq.n	8021020 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8020f92:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020f96:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8020f9a:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8020f9e:	4618      	mov	r0, r3
 8020fa0:	f7fd fcf8 	bl	801e994 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8020fa4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020fa8:	009b      	lsls	r3, r3, #2
 8020faa:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8020fae:	18d1      	adds	r1, r2, r3
 8020fb0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020fb4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8020fb8:	4618      	mov	r0, r3
 8020fba:	f7fd fceb 	bl	801e994 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 8020fbe:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020fc2:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8020fc6:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8020fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020fce:	f7fe fd6b 	bl	801faa8 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8020fd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020fd6:	1d1c      	adds	r4, r3, #4
 8020fd8:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8020fdc:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8020fe0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8020fe4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020fe8:	9300      	str	r3, [sp, #0]
 8020fea:	4623      	mov	r3, r4
 8020fec:	f7fd ff87 	bl	801eefe <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 8020ff0:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8020ff4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8020ff8:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8020ffc:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8021000:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021004:	9300      	str	r3, [sp, #0]
 8021006:	4623      	mov	r3, r4
 8021008:	f7fe fdc0 	bl	801fb8c <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 802100c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8021010:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8021014:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021018:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802101c:	f7fe f8e3 	bl	801f1e6 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8021020:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8021024:	3b01      	subs	r3, #1
 8021026:	b29b      	uxth	r3, r3
 8021028:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 802102c:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8021030:	2b00      	cmp	r3, #0
 8021032:	f6bf af73 	bge.w	8020f1c <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8021036:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802103a:	1d1a      	adds	r2, r3, #4
 802103c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021040:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8021044:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021048:	f7fe f931 	bl	801f2ae <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 802104c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021050:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8021054:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8021058:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802105c:	f7fe fd24 	bl	801faa8 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8021060:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021064:	3324      	adds	r3, #36	@ 0x24
 8021066:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 802106a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802106e:	4618      	mov	r0, r3
 8021070:	f7fd fcb7 	bl	801e9e2 <mg_uecc_vli_cmp_unsafe>
 8021074:	4603      	mov	r3, r0
 8021076:	2b01      	cmp	r3, #1
 8021078:	d00b      	beq.n	8021092 <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 802107a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802107e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8021082:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021086:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802108a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 802108e:	f7fd fdbb 	bl	801ec08 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8021092:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021096:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802109a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802109e:	4618      	mov	r0, r3
 80210a0:	f7fd fcdb 	bl	801ea5a <mg_uecc_vli_equal>
 80210a4:	4603      	mov	r3, r0
}
 80210a6:	4618      	mov	r0, r3
 80210a8:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 80210ac:	46bd      	mov	sp, r7
 80210ae:	bd90      	pop	{r4, r7, pc}

080210b0 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 80210b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80210b4:	b08f      	sub	sp, #60	@ 0x3c
 80210b6:	af00      	add	r7, sp, #0
 80210b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80210ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80210bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80210be:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 80210c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210c2:	2200      	movs	r2, #0
 80210c4:	469a      	mov	sl, r3
 80210c6:	4693      	mov	fp, r2
 80210c8:	6a3b      	ldr	r3, [r7, #32]
 80210ca:	2200      	movs	r2, #0
 80210cc:	61bb      	str	r3, [r7, #24]
 80210ce:	61fa      	str	r2, [r7, #28]
 80210d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80210d4:	4603      	mov	r3, r0
 80210d6:	fb03 f20b 	mul.w	r2, r3, fp
 80210da:	460b      	mov	r3, r1
 80210dc:	fb0a f303 	mul.w	r3, sl, r3
 80210e0:	4413      	add	r3, r2
 80210e2:	4602      	mov	r2, r0
 80210e4:	fbaa 4502 	umull	r4, r5, sl, r2
 80210e8:	442b      	add	r3, r5
 80210ea:	461d      	mov	r5, r3
 80210ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210ee:	2200      	movs	r2, #0
 80210f0:	613b      	str	r3, [r7, #16]
 80210f2:	617a      	str	r2, [r7, #20]
 80210f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80210f8:	460b      	mov	r3, r1
 80210fa:	eb14 0803 	adds.w	r8, r4, r3
 80210fe:	4613      	mov	r3, r2
 8021100:	eb45 0903 	adc.w	r9, r5, r3
 8021104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	2200      	movs	r2, #0
 802110a:	60bb      	str	r3, [r7, #8]
 802110c:	60fa      	str	r2, [r7, #12]
 802110e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021112:	460b      	mov	r3, r1
 8021114:	eb18 0303 	adds.w	r3, r8, r3
 8021118:	603b      	str	r3, [r7, #0]
 802111a:	4613      	mov	r3, r2
 802111c:	eb49 0303 	adc.w	r3, r9, r3
 8021120:	607b      	str	r3, [r7, #4]
 8021122:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021126:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 802112a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 802112e:	f04f 0200 	mov.w	r2, #0
 8021132:	f04f 0300 	mov.w	r3, #0
 8021136:	000a      	movs	r2, r1
 8021138:	2300      	movs	r3, #0
 802113a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802113c:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 802113e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8021140:	4618      	mov	r0, r3
 8021142:	373c      	adds	r7, #60	@ 0x3c
 8021144:	46bd      	mov	sp, r7
 8021146:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802114a:	4770      	bx	lr

0802114c <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 802114c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021150:	b08b      	sub	sp, #44	@ 0x2c
 8021152:	af00      	add	r7, sp, #0
 8021154:	61f8      	str	r0, [r7, #28]
 8021156:	61b9      	str	r1, [r7, #24]
 8021158:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 802115a:	69fb      	ldr	r3, [r7, #28]
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	2200      	movs	r2, #0
 8021160:	60bb      	str	r3, [r7, #8]
 8021162:	60fa      	str	r2, [r7, #12]
 8021164:	69bb      	ldr	r3, [r7, #24]
 8021166:	2200      	movs	r2, #0
 8021168:	469a      	mov	sl, r3
 802116a:	4693      	mov	fp, r2
 802116c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021170:	460b      	mov	r3, r1
 8021172:	eb13 040a 	adds.w	r4, r3, sl
 8021176:	4613      	mov	r3, r2
 8021178:	eb43 050b 	adc.w	r5, r3, fp
 802117c:	697b      	ldr	r3, [r7, #20]
 802117e:	2200      	movs	r2, #0
 8021180:	4698      	mov	r8, r3
 8021182:	4691      	mov	r9, r2
 8021184:	eb14 0308 	adds.w	r3, r4, r8
 8021188:	603b      	str	r3, [r7, #0]
 802118a:	eb45 0309 	adc.w	r3, r5, r9
 802118e:	607b      	str	r3, [r7, #4]
 8021190:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021194:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8021198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802119c:	f04f 0200 	mov.w	r2, #0
 80211a0:	f04f 0300 	mov.w	r3, #0
 80211a4:	000a      	movs	r2, r1
 80211a6:	2300      	movs	r3, #0
 80211a8:	69fb      	ldr	r3, [r7, #28]
 80211aa:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80211ac:	6a3b      	ldr	r3, [r7, #32]
}
 80211ae:	4618      	mov	r0, r3
 80211b0:	372c      	adds	r7, #44	@ 0x2c
 80211b2:	46bd      	mov	sp, r7
 80211b4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80211b8:	4770      	bx	lr

080211ba <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 80211ba:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80211be:	b085      	sub	sp, #20
 80211c0:	af00      	add	r7, sp, #0
 80211c2:	6078      	str	r0, [r7, #4]
 80211c4:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 80211c6:	6879      	ldr	r1, [r7, #4]
 80211c8:	6809      	ldr	r1, [r1, #0]
 80211ca:	2000      	movs	r0, #0
 80211cc:	460c      	mov	r4, r1
 80211ce:	4605      	mov	r5, r0
 80211d0:	6839      	ldr	r1, [r7, #0]
 80211d2:	2000      	movs	r0, #0
 80211d4:	460a      	mov	r2, r1
 80211d6:	4603      	mov	r3, r0
 80211d8:	eb14 0802 	adds.w	r8, r4, r2
 80211dc:	eb45 0903 	adc.w	r9, r5, r3
 80211e0:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 80211e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80211e8:	f04f 0200 	mov.w	r2, #0
 80211ec:	f04f 0300 	mov.w	r3, #0
 80211f0:	000a      	movs	r2, r1
 80211f2:	2300      	movs	r3, #0
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80211f8:	68bb      	ldr	r3, [r7, #8]
}
 80211fa:	4618      	mov	r0, r3
 80211fc:	3714      	adds	r7, #20
 80211fe:	46bd      	mov	sp, r7
 8021200:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8021204:	4770      	bx	lr

08021206 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 8021206:	b590      	push	{r4, r7, lr}
 8021208:	b085      	sub	sp, #20
 802120a:	af00      	add	r7, sp, #0
 802120c:	6078      	str	r0, [r7, #4]
 802120e:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	331c      	adds	r3, #28
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	0fda      	lsrs	r2, r3, #31
 8021218:	683b      	ldr	r3, [r7, #0]
 802121a:	005b      	lsls	r3, r3, #1
 802121c:	4313      	orrs	r3, r2
 802121e:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	331c      	adds	r3, #28
 8021224:	681a      	ldr	r2, [r3, #0]
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	331c      	adds	r3, #28
 802122a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 802122e:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8021230:	683a      	ldr	r2, [r7, #0]
 8021232:	4613      	mov	r3, r2
 8021234:	00db      	lsls	r3, r3, #3
 8021236:	4413      	add	r3, r2
 8021238:	005b      	lsls	r3, r3, #1
 802123a:	4413      	add	r3, r2
 802123c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 802123e:	2300      	movs	r3, #0
 8021240:	60fb      	str	r3, [r7, #12]
 8021242:	e012      	b.n	802126a <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	009b      	lsls	r3, r3, #2
 8021248:	687a      	ldr	r2, [r7, #4]
 802124a:	4413      	add	r3, r2
 802124c:	6819      	ldr	r1, [r3, #0]
 802124e:	68fb      	ldr	r3, [r7, #12]
 8021250:	009b      	lsls	r3, r3, #2
 8021252:	687a      	ldr	r2, [r7, #4]
 8021254:	18d4      	adds	r4, r2, r3
 8021256:	f107 0308 	add.w	r3, r7, #8
 802125a:	4618      	mov	r0, r3
 802125c:	f7ff ffad 	bl	80211ba <adc0>
 8021260:	4603      	mov	r3, r0
 8021262:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	3301      	adds	r3, #1
 8021268:	60fb      	str	r3, [r7, #12]
 802126a:	68fb      	ldr	r3, [r7, #12]
 802126c:	2b07      	cmp	r3, #7
 802126e:	d9e9      	bls.n	8021244 <propagate+0x3e>
  }
}
 8021270:	bf00      	nop
 8021272:	bf00      	nop
 8021274:	3714      	adds	r7, #20
 8021276:	46bd      	mov	sp, r7
 8021278:	bd90      	pop	{r4, r7, pc}

0802127a <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 802127a:	b590      	push	{r4, r7, lr}
 802127c:	b087      	sub	sp, #28
 802127e:	af00      	add	r7, sp, #0
 8021280:	60f8      	str	r0, [r7, #12]
 8021282:	60b9      	str	r1, [r7, #8]
 8021284:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 8021286:	2300      	movs	r3, #0
 8021288:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 802128a:	2300      	movs	r3, #0
 802128c:	617b      	str	r3, [r7, #20]
 802128e:	e018      	b.n	80212c2 <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8021290:	697b      	ldr	r3, [r7, #20]
 8021292:	009b      	lsls	r3, r3, #2
 8021294:	68ba      	ldr	r2, [r7, #8]
 8021296:	4413      	add	r3, r2
 8021298:	6819      	ldr	r1, [r3, #0]
 802129a:	697b      	ldr	r3, [r7, #20]
 802129c:	009b      	lsls	r3, r3, #2
 802129e:	687a      	ldr	r2, [r7, #4]
 80212a0:	4413      	add	r3, r2
 80212a2:	6818      	ldr	r0, [r3, #0]
 80212a4:	697b      	ldr	r3, [r7, #20]
 80212a6:	009b      	lsls	r3, r3, #2
 80212a8:	68fa      	ldr	r2, [r7, #12]
 80212aa:	18d4      	adds	r4, r2, r3
 80212ac:	f107 0310 	add.w	r3, r7, #16
 80212b0:	4602      	mov	r2, r0
 80212b2:	4618      	mov	r0, r3
 80212b4:	f7ff ff4a 	bl	802114c <adc>
 80212b8:	4603      	mov	r3, r0
 80212ba:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 80212bc:	697b      	ldr	r3, [r7, #20]
 80212be:	3301      	adds	r3, #1
 80212c0:	617b      	str	r3, [r7, #20]
 80212c2:	697b      	ldr	r3, [r7, #20]
 80212c4:	2b07      	cmp	r3, #7
 80212c6:	d9e3      	bls.n	8021290 <add+0x16>
  }
  propagate(out, carry);
 80212c8:	693b      	ldr	r3, [r7, #16]
 80212ca:	4619      	mov	r1, r3
 80212cc:	68f8      	ldr	r0, [r7, #12]
 80212ce:	f7ff ff9a 	bl	8021206 <propagate>
}
 80212d2:	bf00      	nop
 80212d4:	371c      	adds	r7, #28
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd90      	pop	{r4, r7, pc}

080212da <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 80212da:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80212de:	b08a      	sub	sp, #40	@ 0x28
 80212e0:	af00      	add	r7, sp, #0
 80212e2:	6178      	str	r0, [r7, #20]
 80212e4:	6139      	str	r1, [r7, #16]
 80212e6:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 80212e8:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 80212ec:	f04f 33ff 	mov.w	r3, #4294967295
 80212f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80212f4:	2300      	movs	r3, #0
 80212f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80212f8:	e032      	b.n	8021360 <sub+0x86>
    carry = carry + a[i] - b[i];
 80212fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80212fc:	009b      	lsls	r3, r3, #2
 80212fe:	693a      	ldr	r2, [r7, #16]
 8021300:	4413      	add	r3, r2
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	2200      	movs	r2, #0
 8021306:	4698      	mov	r8, r3
 8021308:	4691      	mov	r9, r2
 802130a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802130e:	eb18 0402 	adds.w	r4, r8, r2
 8021312:	eb49 0503 	adc.w	r5, r9, r3
 8021316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021318:	009b      	lsls	r3, r3, #2
 802131a:	68fa      	ldr	r2, [r7, #12]
 802131c:	4413      	add	r3, r2
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	2200      	movs	r2, #0
 8021322:	469a      	mov	sl, r3
 8021324:	4693      	mov	fp, r2
 8021326:	ebb4 030a 	subs.w	r3, r4, sl
 802132a:	603b      	str	r3, [r7, #0]
 802132c:	eb65 030b 	sbc.w	r3, r5, fp
 8021330:	607b      	str	r3, [r7, #4]
 8021332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021336:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 802133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	697a      	ldr	r2, [r7, #20]
 8021340:	4413      	add	r3, r2
 8021342:	69ba      	ldr	r2, [r7, #24]
 8021344:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 8021346:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802134a:	f04f 0200 	mov.w	r2, #0
 802134e:	f04f 0300 	mov.w	r3, #0
 8021352:	000a      	movs	r2, r1
 8021354:	17cb      	asrs	r3, r1, #31
 8021356:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 802135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802135c:	3301      	adds	r3, #1
 802135e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021362:	2b07      	cmp	r3, #7
 8021364:	d9c9      	bls.n	80212fa <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 8021366:	69bb      	ldr	r3, [r7, #24]
 8021368:	3301      	adds	r3, #1
 802136a:	4619      	mov	r1, r3
 802136c:	6978      	ldr	r0, [r7, #20]
 802136e:	f7ff ff4a 	bl	8021206 <propagate>
}
 8021372:	bf00      	nop
 8021374:	3728      	adds	r7, #40	@ 0x28
 8021376:	46bd      	mov	sp, r7
 8021378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0802137c <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 802137c:	b5b0      	push	{r4, r5, r7, lr}
 802137e:	b09a      	sub	sp, #104	@ 0x68
 8021380:	af00      	add	r7, sp, #0
 8021382:	60f8      	str	r0, [r7, #12]
 8021384:	60b9      	str	r1, [r7, #8]
 8021386:	607a      	str	r2, [r7, #4]
 8021388:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 802138a:	f107 031c 	add.w	r3, r7, #28
 802138e:	2240      	movs	r2, #64	@ 0x40
 8021390:	2100      	movs	r1, #0
 8021392:	4618      	mov	r0, r3
 8021394:	f006 f9fc 	bl	8027790 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 8021398:	2300      	movs	r3, #0
 802139a:	667b      	str	r3, [r7, #100]	@ 0x64
 802139c:	e03a      	b.n	8021414 <mul+0x98>
    limb_t mand = b[i];
 802139e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80213a0:	009b      	lsls	r3, r3, #2
 80213a2:	687a      	ldr	r2, [r7, #4]
 80213a4:	4413      	add	r3, r2
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 80213aa:	2300      	movs	r3, #0
 80213ac:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 80213ae:	2300      	movs	r3, #0
 80213b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80213b2:	e020      	b.n	80213f6 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 80213b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80213b6:	009b      	lsls	r3, r3, #2
 80213b8:	68ba      	ldr	r2, [r7, #8]
 80213ba:	4413      	add	r3, r2
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 80213c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80213c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80213c4:	4413      	add	r3, r2
 80213c6:	009b      	lsls	r3, r3, #2
 80213c8:	3368      	adds	r3, #104	@ 0x68
 80213ca:	443b      	add	r3, r7
 80213cc:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 80213d0:	697d      	ldr	r5, [r7, #20]
 80213d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80213d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80213d6:	18d4      	adds	r4, r2, r3
 80213d8:	f107 0018 	add.w	r0, r7, #24
 80213dc:	462b      	mov	r3, r5
 80213de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80213e0:	f7ff fe66 	bl	80210b0 <umaal>
 80213e4:	4602      	mov	r2, r0
 80213e6:	00a3      	lsls	r3, r4, #2
 80213e8:	3368      	adds	r3, #104	@ 0x68
 80213ea:	443b      	add	r3, r7
 80213ec:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 80213f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80213f2:	3301      	adds	r3, #1
 80213f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80213f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80213f8:	2b07      	cmp	r3, #7
 80213fa:	d9db      	bls.n	80213b4 <mul+0x38>
    }
    accum[i + j] = carry2;
 80213fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80213fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021400:	4413      	add	r3, r2
 8021402:	69ba      	ldr	r2, [r7, #24]
 8021404:	009b      	lsls	r3, r3, #2
 8021406:	3368      	adds	r3, #104	@ 0x68
 8021408:	443b      	add	r3, r7
 802140a:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 802140e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021410:	3301      	adds	r3, #1
 8021412:	667b      	str	r3, [r7, #100]	@ 0x64
 8021414:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8021416:	683b      	ldr	r3, [r7, #0]
 8021418:	429a      	cmp	r2, r3
 802141a:	d3c0      	bcc.n	802139e <mul+0x22>
  }

  carry2 = 0;
 802141c:	2300      	movs	r3, #0
 802141e:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 8021420:	2300      	movs	r3, #0
 8021422:	663b      	str	r3, [r7, #96]	@ 0x60
 8021424:	e01b      	b.n	802145e <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 8021426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021428:	009b      	lsls	r3, r3, #2
 802142a:	3368      	adds	r3, #104	@ 0x68
 802142c:	443b      	add	r3, r7
 802142e:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8021432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021434:	3308      	adds	r3, #8
 8021436:	009b      	lsls	r3, r3, #2
 8021438:	3368      	adds	r3, #104	@ 0x68
 802143a:	443b      	add	r3, r7
 802143c:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8021440:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021442:	009b      	lsls	r3, r3, #2
 8021444:	68fa      	ldr	r2, [r7, #12]
 8021446:	18d4      	adds	r4, r2, r3
 8021448:	f107 0018 	add.w	r0, r7, #24
 802144c:	462b      	mov	r3, r5
 802144e:	2226      	movs	r2, #38	@ 0x26
 8021450:	f7ff fe2e 	bl	80210b0 <umaal>
 8021454:	4603      	mov	r3, r0
 8021456:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8021458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802145a:	3301      	adds	r3, #1
 802145c:	663b      	str	r3, [r7, #96]	@ 0x60
 802145e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8021460:	2b07      	cmp	r3, #7
 8021462:	d9e0      	bls.n	8021426 <mul+0xaa>
  }
  propagate(out, carry2);
 8021464:	69bb      	ldr	r3, [r7, #24]
 8021466:	4619      	mov	r1, r3
 8021468:	68f8      	ldr	r0, [r7, #12]
 802146a:	f7ff fecc 	bl	8021206 <propagate>
}
 802146e:	bf00      	nop
 8021470:	3768      	adds	r7, #104	@ 0x68
 8021472:	46bd      	mov	sp, r7
 8021474:	bdb0      	pop	{r4, r5, r7, pc}

08021476 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 8021476:	b580      	push	{r7, lr}
 8021478:	b082      	sub	sp, #8
 802147a:	af00      	add	r7, sp, #0
 802147c:	6078      	str	r0, [r7, #4]
 802147e:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 8021480:	2308      	movs	r3, #8
 8021482:	683a      	ldr	r2, [r7, #0]
 8021484:	6839      	ldr	r1, [r7, #0]
 8021486:	6878      	ldr	r0, [r7, #4]
 8021488:	f7ff ff78 	bl	802137c <mul>
}
 802148c:	bf00      	nop
 802148e:	3708      	adds	r7, #8
 8021490:	46bd      	mov	sp, r7
 8021492:	bd80      	pop	{r7, pc}

08021494 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 8021494:	b580      	push	{r7, lr}
 8021496:	b082      	sub	sp, #8
 8021498:	af00      	add	r7, sp, #0
 802149a:	6078      	str	r0, [r7, #4]
 802149c:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 802149e:	2308      	movs	r3, #8
 80214a0:	687a      	ldr	r2, [r7, #4]
 80214a2:	6839      	ldr	r1, [r7, #0]
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	f7ff ff69 	bl	802137c <mul>
}
 80214aa:	bf00      	nop
 80214ac:	3708      	adds	r7, #8
 80214ae:	46bd      	mov	sp, r7
 80214b0:	bd80      	pop	{r7, pc}

080214b2 <sqr1>:
static void sqr1(mg_fe a) {
 80214b2:	b580      	push	{r7, lr}
 80214b4:	b082      	sub	sp, #8
 80214b6:	af00      	add	r7, sp, #0
 80214b8:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 80214ba:	6879      	ldr	r1, [r7, #4]
 80214bc:	6878      	ldr	r0, [r7, #4]
 80214be:	f7ff ffe9 	bl	8021494 <mul1>
}
 80214c2:	bf00      	nop
 80214c4:	3708      	adds	r7, #8
 80214c6:	46bd      	mov	sp, r7
 80214c8:	bd80      	pop	{r7, pc}

080214ca <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 80214ca:	b480      	push	{r7}
 80214cc:	b087      	sub	sp, #28
 80214ce:	af00      	add	r7, sp, #0
 80214d0:	60f8      	str	r0, [r7, #12]
 80214d2:	60b9      	str	r1, [r7, #8]
 80214d4:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 80214d6:	2300      	movs	r3, #0
 80214d8:	617b      	str	r3, [r7, #20]
 80214da:	e028      	b.n	802152e <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 80214dc:	697b      	ldr	r3, [r7, #20]
 80214de:	009b      	lsls	r3, r3, #2
 80214e0:	68fa      	ldr	r2, [r7, #12]
 80214e2:	4413      	add	r3, r2
 80214e4:	681a      	ldr	r2, [r3, #0]
 80214e6:	697b      	ldr	r3, [r7, #20]
 80214e8:	009b      	lsls	r3, r3, #2
 80214ea:	68b9      	ldr	r1, [r7, #8]
 80214ec:	440b      	add	r3, r1
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	4053      	eors	r3, r2
 80214f2:	687a      	ldr	r2, [r7, #4]
 80214f4:	4013      	ands	r3, r2
 80214f6:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 80214f8:	697b      	ldr	r3, [r7, #20]
 80214fa:	009b      	lsls	r3, r3, #2
 80214fc:	68fa      	ldr	r2, [r7, #12]
 80214fe:	4413      	add	r3, r2
 8021500:	6819      	ldr	r1, [r3, #0]
 8021502:	697b      	ldr	r3, [r7, #20]
 8021504:	009b      	lsls	r3, r3, #2
 8021506:	68fa      	ldr	r2, [r7, #12]
 8021508:	4413      	add	r3, r2
 802150a:	693a      	ldr	r2, [r7, #16]
 802150c:	404a      	eors	r2, r1
 802150e:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 8021510:	697b      	ldr	r3, [r7, #20]
 8021512:	009b      	lsls	r3, r3, #2
 8021514:	68ba      	ldr	r2, [r7, #8]
 8021516:	4413      	add	r3, r2
 8021518:	6819      	ldr	r1, [r3, #0]
 802151a:	697b      	ldr	r3, [r7, #20]
 802151c:	009b      	lsls	r3, r3, #2
 802151e:	68ba      	ldr	r2, [r7, #8]
 8021520:	4413      	add	r3, r2
 8021522:	693a      	ldr	r2, [r7, #16]
 8021524:	404a      	eors	r2, r1
 8021526:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8021528:	697b      	ldr	r3, [r7, #20]
 802152a:	3301      	adds	r3, #1
 802152c:	617b      	str	r3, [r7, #20]
 802152e:	697b      	ldr	r3, [r7, #20]
 8021530:	2b0f      	cmp	r3, #15
 8021532:	d9d3      	bls.n	80214dc <condswap+0x12>
  }
}
 8021534:	bf00      	nop
 8021536:	bf00      	nop
 8021538:	371c      	adds	r7, #28
 802153a:	46bd      	mov	sp, r7
 802153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021540:	4770      	bx	lr

08021542 <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 8021542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021546:	b08b      	sub	sp, #44	@ 0x2c
 8021548:	af00      	add	r7, sp, #0
 802154a:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 802154c:	2313      	movs	r3, #19
 802154e:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8021550:	2300      	movs	r3, #0
 8021552:	627b      	str	r3, [r7, #36]	@ 0x24
 8021554:	e012      	b.n	802157c <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 8021556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021558:	009b      	lsls	r3, r3, #2
 802155a:	68fa      	ldr	r2, [r7, #12]
 802155c:	4413      	add	r3, r2
 802155e:	6819      	ldr	r1, [r3, #0]
 8021560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021562:	009b      	lsls	r3, r3, #2
 8021564:	68fa      	ldr	r2, [r7, #12]
 8021566:	18d6      	adds	r6, r2, r3
 8021568:	f107 0314 	add.w	r3, r7, #20
 802156c:	4618      	mov	r0, r3
 802156e:	f7ff fe24 	bl	80211ba <adc0>
 8021572:	4603      	mov	r3, r0
 8021574:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 8021576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021578:	3301      	adds	r3, #1
 802157a:	627b      	str	r3, [r7, #36]	@ 0x24
 802157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802157e:	2b07      	cmp	r3, #7
 8021580:	d9e9      	bls.n	8021556 <canon+0x14>
  }
  propagate(x, carry0);
 8021582:	697b      	ldr	r3, [r7, #20]
 8021584:	4619      	mov	r1, r3
 8021586:	68f8      	ldr	r0, [r7, #12]
 8021588:	f7ff fe3d 	bl	8021206 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 802158c:	f06f 0212 	mvn.w	r2, #18
 8021590:	f04f 33ff 	mov.w	r3, #4294967295
 8021594:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 8021598:	2300      	movs	r3, #0
 802159a:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 802159c:	2300      	movs	r3, #0
 802159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80215a0:	e02a      	b.n	80215f8 <canon+0xb6>
    carry += x[i];
 80215a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215a4:	009b      	lsls	r3, r3, #2
 80215a6:	68fa      	ldr	r2, [r7, #12]
 80215a8:	4413      	add	r3, r2
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	2200      	movs	r2, #0
 80215ae:	4698      	mov	r8, r3
 80215b0:	4691      	mov	r9, r2
 80215b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80215b6:	eb12 0108 	adds.w	r1, r2, r8
 80215ba:	6039      	str	r1, [r7, #0]
 80215bc:	eb43 0309 	adc.w	r3, r3, r9
 80215c0:	607b      	str	r3, [r7, #4]
 80215c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80215c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 80215ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215cc:	009b      	lsls	r3, r3, #2
 80215ce:	68fa      	ldr	r2, [r7, #12]
 80215d0:	4413      	add	r3, r2
 80215d2:	69ba      	ldr	r2, [r7, #24]
 80215d4:	601a      	str	r2, [r3, #0]
 80215d6:	681b      	ldr	r3, [r3, #0]
 80215d8:	6a3a      	ldr	r2, [r7, #32]
 80215da:	4313      	orrs	r3, r2
 80215dc:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 80215de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80215e2:	f04f 0200 	mov.w	r2, #0
 80215e6:	f04f 0300 	mov.w	r3, #0
 80215ea:	000a      	movs	r2, r1
 80215ec:	17cb      	asrs	r3, r1, #31
 80215ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80215f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215f4:	3301      	adds	r3, #1
 80215f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80215f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215fa:	2b07      	cmp	r3, #7
 80215fc:	d9d1      	bls.n	80215a2 <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 80215fe:	6a3b      	ldr	r3, [r7, #32]
 8021600:	2200      	movs	r2, #0
 8021602:	461c      	mov	r4, r3
 8021604:	4615      	mov	r5, r2
 8021606:	f114 3aff 	adds.w	sl, r4, #4294967295
 802160a:	f145 3bff 	adc.w	fp, r5, #4294967295
 802160e:	f04f 0200 	mov.w	r2, #0
 8021612:	f04f 0300 	mov.w	r3, #0
 8021616:	465a      	mov	r2, fp
 8021618:	2300      	movs	r3, #0
 802161a:	4613      	mov	r3, r2
}
 802161c:	4618      	mov	r0, r3
 802161e:	372c      	adds	r7, #44	@ 0x2c
 8021620:	46bd      	mov	sp, r7
 8021622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021628 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8021628:	b580      	push	{r7, lr}
 802162a:	b088      	sub	sp, #32
 802162c:	af00      	add	r7, sp, #0
 802162e:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	61fb      	str	r3, [r7, #28]
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	3320      	adds	r3, #32
 8021638:	61bb      	str	r3, [r7, #24]
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	3340      	adds	r3, #64	@ 0x40
 802163e:	617b      	str	r3, [r7, #20]
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	3360      	adds	r3, #96	@ 0x60
 8021644:	613b      	str	r3, [r7, #16]
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	3380      	adds	r3, #128	@ 0x80
 802164a:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 802164c:	69ba      	ldr	r2, [r7, #24]
 802164e:	69f9      	ldr	r1, [r7, #28]
 8021650:	68f8      	ldr	r0, [r7, #12]
 8021652:	f7ff fe12 	bl	802127a <add>
  sub(z2, x2, z2);                                 // z2 = B
 8021656:	69ba      	ldr	r2, [r7, #24]
 8021658:	69f9      	ldr	r1, [r7, #28]
 802165a:	69b8      	ldr	r0, [r7, #24]
 802165c:	f7ff fe3d 	bl	80212da <sub>
  add(x2, x3, z3);                                 // x2 = C
 8021660:	693a      	ldr	r2, [r7, #16]
 8021662:	6979      	ldr	r1, [r7, #20]
 8021664:	69f8      	ldr	r0, [r7, #28]
 8021666:	f7ff fe08 	bl	802127a <add>
  sub(z3, x3, z3);                                 // z3 = D
 802166a:	693a      	ldr	r2, [r7, #16]
 802166c:	6979      	ldr	r1, [r7, #20]
 802166e:	6938      	ldr	r0, [r7, #16]
 8021670:	f7ff fe33 	bl	80212da <sub>
  mul1(z3, t1);                                    // z3 = DA
 8021674:	68f9      	ldr	r1, [r7, #12]
 8021676:	6938      	ldr	r0, [r7, #16]
 8021678:	f7ff ff0c 	bl	8021494 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 802167c:	69b9      	ldr	r1, [r7, #24]
 802167e:	69f8      	ldr	r0, [r7, #28]
 8021680:	f7ff ff08 	bl	8021494 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 8021684:	69fa      	ldr	r2, [r7, #28]
 8021686:	6939      	ldr	r1, [r7, #16]
 8021688:	6978      	ldr	r0, [r7, #20]
 802168a:	f7ff fdf6 	bl	802127a <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 802168e:	69fa      	ldr	r2, [r7, #28]
 8021690:	6939      	ldr	r1, [r7, #16]
 8021692:	6938      	ldr	r0, [r7, #16]
 8021694:	f7ff fe21 	bl	80212da <sub>
  sqr1(t1);                                        // t1 = AA
 8021698:	68f8      	ldr	r0, [r7, #12]
 802169a:	f7ff ff0a 	bl	80214b2 <sqr1>
  sqr1(z2);                                        // z2 = BB
 802169e:	69b8      	ldr	r0, [r7, #24]
 80216a0:	f7ff ff07 	bl	80214b2 <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 80216a4:	69ba      	ldr	r2, [r7, #24]
 80216a6:	68f9      	ldr	r1, [r7, #12]
 80216a8:	69f8      	ldr	r0, [r7, #28]
 80216aa:	f7ff fe16 	bl	80212da <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 80216ae:	2301      	movs	r3, #1
 80216b0:	4a06      	ldr	r2, [pc, #24]	@ (80216cc <ladder_part1+0xa4>)
 80216b2:	69f9      	ldr	r1, [r7, #28]
 80216b4:	69b8      	ldr	r0, [r7, #24]
 80216b6:	f7ff fe61 	bl	802137c <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 80216ba:	68fa      	ldr	r2, [r7, #12]
 80216bc:	69b9      	ldr	r1, [r7, #24]
 80216be:	69b8      	ldr	r0, [r7, #24]
 80216c0:	f7ff fddb 	bl	802127a <add>
}
 80216c4:	bf00      	nop
 80216c6:	3720      	adds	r7, #32
 80216c8:	46bd      	mov	sp, r7
 80216ca:	bd80      	pop	{r7, pc}
 80216cc:	0802d9b4 	.word	0x0802d9b4

080216d0 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 80216d0:	b580      	push	{r7, lr}
 80216d2:	b088      	sub	sp, #32
 80216d4:	af00      	add	r7, sp, #0
 80216d6:	6078      	str	r0, [r7, #4]
 80216d8:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	61fb      	str	r3, [r7, #28]
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	3320      	adds	r3, #32
 80216e2:	61bb      	str	r3, [r7, #24]
 80216e4:	687b      	ldr	r3, [r7, #4]
 80216e6:	3340      	adds	r3, #64	@ 0x40
 80216e8:	617b      	str	r3, [r7, #20]
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	3360      	adds	r3, #96	@ 0x60
 80216ee:	613b      	str	r3, [r7, #16]
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	3380      	adds	r3, #128	@ 0x80
 80216f4:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 80216f6:	6938      	ldr	r0, [r7, #16]
 80216f8:	f7ff fedb 	bl	80214b2 <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 80216fc:	6839      	ldr	r1, [r7, #0]
 80216fe:	6938      	ldr	r0, [r7, #16]
 8021700:	f7ff fec8 	bl	8021494 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8021704:	6978      	ldr	r0, [r7, #20]
 8021706:	f7ff fed4 	bl	80214b2 <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 802170a:	69f9      	ldr	r1, [r7, #28]
 802170c:	69b8      	ldr	r0, [r7, #24]
 802170e:	f7ff fec1 	bl	8021494 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 8021712:	69fa      	ldr	r2, [r7, #28]
 8021714:	68f9      	ldr	r1, [r7, #12]
 8021716:	69f8      	ldr	r0, [r7, #28]
 8021718:	f7ff fddf 	bl	80212da <sub>
  mul1(x2, t1);     // x2 = AA*BB
 802171c:	68f9      	ldr	r1, [r7, #12]
 802171e:	69f8      	ldr	r0, [r7, #28]
 8021720:	f7ff feb8 	bl	8021494 <mul1>
}
 8021724:	bf00      	nop
 8021726:	3720      	adds	r7, #32
 8021728:	46bd      	mov	sp, r7
 802172a:	bd80      	pop	{r7, pc}

0802172c <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 802172c:	b580      	push	{r7, lr}
 802172e:	b094      	sub	sp, #80	@ 0x50
 8021730:	af00      	add	r7, sp, #0
 8021732:	60f8      	str	r0, [r7, #12]
 8021734:	60b9      	str	r1, [r7, #8]
 8021736:	607a      	str	r2, [r7, #4]
 8021738:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 802173a:	2300      	movs	r3, #0
 802173c:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 802173e:	68fb      	ldr	r3, [r7, #12]
 8021740:	643b      	str	r3, [r7, #64]	@ 0x40
 8021742:	68fb      	ldr	r3, [r7, #12]
 8021744:	3340      	adds	r3, #64	@ 0x40
 8021746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	3360      	adds	r3, #96	@ 0x60
 802174c:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 802174e:	2280      	movs	r2, #128	@ 0x80
 8021750:	2100      	movs	r1, #0
 8021752:	68f8      	ldr	r0, [r7, #12]
 8021754:	f006 f81c 	bl	8027790 <memset>
  x2[0] = z3[0] = 1;
 8021758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802175a:	2201      	movs	r2, #1
 802175c:	601a      	str	r2, [r3, #0]
 802175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021760:	681a      	ldr	r2, [r3, #0]
 8021762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021764:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8021766:	2300      	movs	r3, #0
 8021768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802176a:	e031      	b.n	80217d0 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 802176c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802176e:	009b      	lsls	r3, r3, #2
 8021770:	3303      	adds	r3, #3
 8021772:	687a      	ldr	r2, [r7, #4]
 8021774:	4413      	add	r3, r2
 8021776:	781b      	ldrb	r3, [r3, #0]
 8021778:	061a      	lsls	r2, r3, #24
 802177a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802177c:	009b      	lsls	r3, r3, #2
 802177e:	3302      	adds	r3, #2
 8021780:	6879      	ldr	r1, [r7, #4]
 8021782:	440b      	add	r3, r1
 8021784:	781b      	ldrb	r3, [r3, #0]
 8021786:	041b      	lsls	r3, r3, #16
 8021788:	431a      	orrs	r2, r3
 802178a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802178c:	009b      	lsls	r3, r3, #2
 802178e:	3301      	adds	r3, #1
 8021790:	6879      	ldr	r1, [r7, #4]
 8021792:	440b      	add	r3, r1
 8021794:	781b      	ldrb	r3, [r3, #0]
 8021796:	021b      	lsls	r3, r3, #8
 8021798:	4313      	orrs	r3, r2
 802179a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802179c:	0092      	lsls	r2, r2, #2
 802179e:	4611      	mov	r1, r2
 80217a0:	687a      	ldr	r2, [r7, #4]
 80217a2:	440a      	add	r2, r1
 80217a4:	7812      	ldrb	r2, [r2, #0]
 80217a6:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 80217a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217aa:	009b      	lsls	r3, r3, #2
 80217ac:	3350      	adds	r3, #80	@ 0x50
 80217ae:	443b      	add	r3, r7
 80217b0:	f843 2c3c 	str.w	r2, [r3, #-60]
 80217b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217b6:	009b      	lsls	r3, r3, #2
 80217b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80217ba:	441a      	add	r2, r3
 80217bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217be:	009b      	lsls	r3, r3, #2
 80217c0:	3350      	adds	r3, #80	@ 0x50
 80217c2:	443b      	add	r3, r7
 80217c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80217c8:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 80217ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217cc:	3301      	adds	r3, #1
 80217ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80217d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217d2:	2b07      	cmp	r3, #7
 80217d4:	ddca      	ble.n	802176c <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 80217d6:	23ff      	movs	r3, #255	@ 0xff
 80217d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80217da:	e049      	b.n	8021870 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 80217dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217de:	2b00      	cmp	r3, #0
 80217e0:	da00      	bge.n	80217e4 <x25519_core+0xb8>
 80217e2:	3307      	adds	r3, #7
 80217e4:	10db      	asrs	r3, r3, #3
 80217e6:	461a      	mov	r2, r3
 80217e8:	68bb      	ldr	r3, [r7, #8]
 80217ea:	4413      	add	r3, r2
 80217ec:	781b      	ldrb	r3, [r3, #0]
 80217ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d01a      	beq.n	802182e <x25519_core+0x102>
      if (i / 8 == 0) {
 80217f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80217fa:	3307      	adds	r3, #7
 80217fc:	2b0e      	cmp	r3, #14
 80217fe:	d806      	bhi.n	802180e <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8021800:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8021804:	f023 0307 	bic.w	r3, r3, #7
 8021808:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 802180c:	e00f      	b.n	802182e <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 802180e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021810:	3bf8      	subs	r3, #248	@ 0xf8
 8021812:	2b07      	cmp	r3, #7
 8021814:	d80b      	bhi.n	802182e <x25519_core+0x102>
        bytei &= 0x7F;
 8021816:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 802181a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802181e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 8021822:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8021826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802182a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 802182e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8021832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021834:	f003 0307 	and.w	r3, r3, #7
 8021838:	fa42 f303 	asr.w	r3, r2, r3
 802183c:	f003 0301 	and.w	r3, r3, #1
 8021840:	425b      	negs	r3, r3
 8021842:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 8021844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021848:	4053      	eors	r3, r2
 802184a:	461a      	mov	r2, r3
 802184c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802184e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8021850:	f7ff fe3b 	bl	80214ca <condswap>
    swap = doswap;
 8021854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021856:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8021858:	68f8      	ldr	r0, [r7, #12]
 802185a:	f7ff fee5 	bl	8021628 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 802185e:	f107 0314 	add.w	r3, r7, #20
 8021862:	4619      	mov	r1, r3
 8021864:	68f8      	ldr	r0, [r7, #12]
 8021866:	f7ff ff33 	bl	80216d0 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 802186a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802186c:	3b01      	subs	r3, #1
 802186e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8021870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021872:	2b00      	cmp	r3, #0
 8021874:	dab2      	bge.n	80217dc <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 8021876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802187a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 802187c:	f7ff fe25 	bl	80214ca <condswap>
}
 8021880:	bf00      	nop
 8021882:	3750      	adds	r7, #80	@ 0x50
 8021884:	46bd      	mov	sp, r7
 8021886:	bd80      	pop	{r7, pc}

08021888 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 8021888:	b580      	push	{r7, lr}
 802188a:	b0be      	sub	sp, #248	@ 0xf8
 802188c:	af00      	add	r7, sp, #0
 802188e:	60f8      	str	r0, [r7, #12]
 8021890:	60b9      	str	r1, [r7, #8]
 8021892:	607a      	str	r2, [r7, #4]
 8021894:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 8021896:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 802189a:	683b      	ldr	r3, [r7, #0]
 802189c:	687a      	ldr	r2, [r7, #4]
 802189e:	68b9      	ldr	r1, [r7, #8]
 80218a0:	f7ff ff44 	bl	802172c <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 80218a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80218a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 80218ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80218b0:	3320      	adds	r3, #32
 80218b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 80218b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80218ba:	3360      	adds	r3, #96	@ 0x60
 80218bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 80218c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80218c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 80218c8:	2300      	movs	r3, #0
 80218ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80218ce:	e043      	b.n	8021958 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 80218d0:	4952      	ldr	r1, [pc, #328]	@ (8021a1c <mg_tls_x25519+0x194>)
 80218d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80218d6:	4613      	mov	r3, r2
 80218d8:	005b      	lsls	r3, r3, #1
 80218da:	4413      	add	r3, r2
 80218dc:	440b      	add	r3, r1
 80218de:	781b      	ldrb	r3, [r3, #0]
 80218e0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80218e4:	015b      	lsls	r3, r3, #5
 80218e6:	4413      	add	r3, r2
 80218e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 80218ec:	494b      	ldr	r1, [pc, #300]	@ (8021a1c <mg_tls_x25519+0x194>)
 80218ee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80218f2:	4613      	mov	r3, r2
 80218f4:	005b      	lsls	r3, r3, #1
 80218f6:	4413      	add	r3, r2
 80218f8:	440b      	add	r3, r1
 80218fa:	3302      	adds	r3, #2
 80218fc:	781b      	ldrb	r3, [r3, #0]
 80218fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8021902:	e00e      	b.n	8021922 <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8021904:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8021908:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 802190c:	f7ff fdb3 	bl	8021476 <sqr>
      prev = a;
 8021910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8021914:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8021918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 802191c:	3b01      	subs	r3, #1
 802191e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8021922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8021926:	2b00      	cmp	r3, #0
 8021928:	dcec      	bgt.n	8021904 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 802192a:	493c      	ldr	r1, [pc, #240]	@ (8021a1c <mg_tls_x25519+0x194>)
 802192c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8021930:	4613      	mov	r3, r2
 8021932:	005b      	lsls	r3, r3, #1
 8021934:	4413      	add	r3, r2
 8021936:	440b      	add	r3, r1
 8021938:	3301      	adds	r3, #1
 802193a:	781b      	ldrb	r3, [r3, #0]
 802193c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8021940:	015b      	lsls	r3, r3, #5
 8021942:	4413      	add	r3, r2
 8021944:	4619      	mov	r1, r3
 8021946:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 802194a:	f7ff fda3 	bl	8021494 <mul1>
  for (i = 0; i < 13; i++) {
 802194e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021952:	3301      	adds	r3, #1
 8021954:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8021958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802195c:	2b0c      	cmp	r3, #12
 802195e:	ddb7      	ble.n	80218d0 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8021960:	f107 0014 	add.w	r0, r7, #20
 8021964:	2308      	movs	r3, #8
 8021966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 802196a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 802196e:	f7ff fd05 	bl	802137c <mul>
  ret = (int) canon(out_limbs);
 8021972:	f107 0314 	add.w	r3, r7, #20
 8021976:	4618      	mov	r0, r3
 8021978:	f7ff fde3 	bl	8021542 <canon>
 802197c:	4603      	mov	r3, r0
 802197e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 8021982:	683b      	ldr	r3, [r7, #0]
 8021984:	2b00      	cmp	r3, #0
 8021986:	d102      	bne.n	802198e <mg_tls_x25519+0x106>
 8021988:	2300      	movs	r3, #0
 802198a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 802198e:	2300      	movs	r3, #0
 8021990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8021994:	e038      	b.n	8021a08 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 8021996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802199a:	009b      	lsls	r3, r3, #2
 802199c:	33f8      	adds	r3, #248	@ 0xf8
 802199e:	443b      	add	r3, r7
 80219a0:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 80219a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 80219a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219ac:	009b      	lsls	r3, r3, #2
 80219ae:	461a      	mov	r2, r3
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	4413      	add	r3, r2
 80219b4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80219b8:	b2d2      	uxtb	r2, r2
 80219ba:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 80219bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80219c0:	0a19      	lsrs	r1, r3, #8
 80219c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219c6:	009b      	lsls	r3, r3, #2
 80219c8:	3301      	adds	r3, #1
 80219ca:	68fa      	ldr	r2, [r7, #12]
 80219cc:	4413      	add	r3, r2
 80219ce:	b2ca      	uxtb	r2, r1
 80219d0:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 80219d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80219d6:	0c19      	lsrs	r1, r3, #16
 80219d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219dc:	009b      	lsls	r3, r3, #2
 80219de:	3302      	adds	r3, #2
 80219e0:	68fa      	ldr	r2, [r7, #12]
 80219e2:	4413      	add	r3, r2
 80219e4:	b2ca      	uxtb	r2, r1
 80219e6:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 80219e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80219ec:	0e19      	lsrs	r1, r3, #24
 80219ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80219f2:	009b      	lsls	r3, r3, #2
 80219f4:	3303      	adds	r3, #3
 80219f6:	68fa      	ldr	r2, [r7, #12]
 80219f8:	4413      	add	r3, r2
 80219fa:	b2ca      	uxtb	r2, r1
 80219fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 80219fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a02:	3301      	adds	r3, #1
 8021a04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8021a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8021a0c:	2b07      	cmp	r3, #7
 8021a0e:	ddc2      	ble.n	8021996 <mg_tls_x25519+0x10e>
  }
  return ret;
 8021a10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8021a14:	4618      	mov	r0, r3
 8021a16:	37f8      	adds	r7, #248	@ 0xf8
 8021a18:	46bd      	mov	sp, r7
 8021a1a:	bd80      	pop	{r7, pc}
 8021a1c:	0802dd28 	.word	0x0802dd28

08021a20 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8021a20:	b580      	push	{r7, lr}
 8021a22:	b082      	sub	sp, #8
 8021a24:	af00      	add	r7, sp, #0
 8021a26:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8021a28:	2204      	movs	r2, #4
 8021a2a:	491b      	ldr	r1, [pc, #108]	@ (8021a98 <mg_url_is_ssl+0x78>)
 8021a2c:	6878      	ldr	r0, [r7, #4]
 8021a2e:	f005 fec4 	bl	80277ba <strncmp>
 8021a32:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d027      	beq.n	8021a88 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8021a38:	2206      	movs	r2, #6
 8021a3a:	4918      	ldr	r1, [pc, #96]	@ (8021a9c <mg_url_is_ssl+0x7c>)
 8021a3c:	6878      	ldr	r0, [r7, #4]
 8021a3e:	f005 febc 	bl	80277ba <strncmp>
 8021a42:	4603      	mov	r3, r0
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d01f      	beq.n	8021a88 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8021a48:	2206      	movs	r2, #6
 8021a4a:	4915      	ldr	r1, [pc, #84]	@ (8021aa0 <mg_url_is_ssl+0x80>)
 8021a4c:	6878      	ldr	r0, [r7, #4]
 8021a4e:	f005 feb4 	bl	80277ba <strncmp>
 8021a52:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8021a54:	2b00      	cmp	r3, #0
 8021a56:	d017      	beq.n	8021a88 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8021a58:	2204      	movs	r2, #4
 8021a5a:	4912      	ldr	r1, [pc, #72]	@ (8021aa4 <mg_url_is_ssl+0x84>)
 8021a5c:	6878      	ldr	r0, [r7, #4]
 8021a5e:	f005 feac 	bl	80277ba <strncmp>
 8021a62:	4603      	mov	r3, r0
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	d00f      	beq.n	8021a88 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8021a68:	2204      	movs	r2, #4
 8021a6a:	490f      	ldr	r1, [pc, #60]	@ (8021aa8 <mg_url_is_ssl+0x88>)
 8021a6c:	6878      	ldr	r0, [r7, #4]
 8021a6e:	f005 fea4 	bl	80277ba <strncmp>
 8021a72:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d007      	beq.n	8021a88 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8021a78:	2205      	movs	r2, #5
 8021a7a:	490c      	ldr	r1, [pc, #48]	@ (8021aac <mg_url_is_ssl+0x8c>)
 8021a7c:	6878      	ldr	r0, [r7, #4]
 8021a7e:	f005 fe9c 	bl	80277ba <strncmp>
 8021a82:	4603      	mov	r3, r0
 8021a84:	2b00      	cmp	r3, #0
 8021a86:	d101      	bne.n	8021a8c <mg_url_is_ssl+0x6c>
 8021a88:	2301      	movs	r3, #1
 8021a8a:	e000      	b.n	8021a8e <mg_url_is_ssl+0x6e>
 8021a8c:	2300      	movs	r3, #0
}
 8021a8e:	4618      	mov	r0, r3
 8021a90:	3708      	adds	r7, #8
 8021a92:	46bd      	mov	sp, r7
 8021a94:	bd80      	pop	{r7, pc}
 8021a96:	bf00      	nop
 8021a98:	0802c584 	.word	0x0802c584
 8021a9c:	0802c58c 	.word	0x0802c58c
 8021aa0:	0802c594 	.word	0x0802c594
 8021aa4:	0802c59c 	.word	0x0802c59c
 8021aa8:	0802c5a4 	.word	0x0802c5a4
 8021aac:	0802c5ac 	.word	0x0802c5ac

08021ab0 <urlparse>:

static struct url urlparse(const char *url) {
 8021ab0:	b5b0      	push	{r4, r5, r7, lr}
 8021ab2:	b08a      	sub	sp, #40	@ 0x28
 8021ab4:	af00      	add	r7, sp, #0
 8021ab6:	6078      	str	r0, [r7, #4]
 8021ab8:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8021aba:	f107 0308 	add.w	r3, r7, #8
 8021abe:	221c      	movs	r2, #28
 8021ac0:	2100      	movs	r1, #0
 8021ac2:	4618      	mov	r0, r3
 8021ac4:	f005 fe64 	bl	8027790 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8021ac8:	2300      	movs	r3, #0
 8021aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8021acc:	e05b      	b.n	8021b86 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8021ace:	683a      	ldr	r2, [r7, #0]
 8021ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ad2:	4413      	add	r3, r2
 8021ad4:	781b      	ldrb	r3, [r3, #0]
 8021ad6:	2b2f      	cmp	r3, #47	@ 0x2f
 8021ad8:	d112      	bne.n	8021b00 <urlparse+0x50>
 8021ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d00f      	beq.n	8021b00 <urlparse+0x50>
 8021ae0:	697b      	ldr	r3, [r7, #20]
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d10c      	bne.n	8021b00 <urlparse+0x50>
 8021ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ae8:	3b01      	subs	r3, #1
 8021aea:	683a      	ldr	r2, [r7, #0]
 8021aec:	4413      	add	r3, r2
 8021aee:	781b      	ldrb	r3, [r3, #0]
 8021af0:	2b2f      	cmp	r3, #47	@ 0x2f
 8021af2:	d105      	bne.n	8021b00 <urlparse+0x50>
      u.host = i + 1;
 8021af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021af6:	3301      	adds	r3, #1
 8021af8:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8021afa:	2300      	movs	r3, #0
 8021afc:	61bb      	str	r3, [r7, #24]
 8021afe:	e03f      	b.n	8021b80 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8021b00:	683a      	ldr	r2, [r7, #0]
 8021b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b04:	4413      	add	r3, r2
 8021b06:	781b      	ldrb	r3, [r3, #0]
 8021b08:	2b5d      	cmp	r3, #93	@ 0x5d
 8021b0a:	d102      	bne.n	8021b12 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8021b0c:	2300      	movs	r3, #0
 8021b0e:	61bb      	str	r3, [r7, #24]
 8021b10:	e036      	b.n	8021b80 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8021b12:	683a      	ldr	r2, [r7, #0]
 8021b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b16:	4413      	add	r3, r2
 8021b18:	781b      	ldrb	r3, [r3, #0]
 8021b1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8021b1c:	d109      	bne.n	8021b32 <urlparse+0x82>
 8021b1e:	69bb      	ldr	r3, [r7, #24]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d106      	bne.n	8021b32 <urlparse+0x82>
 8021b24:	69fb      	ldr	r3, [r7, #28]
 8021b26:	2b00      	cmp	r3, #0
 8021b28:	d103      	bne.n	8021b32 <urlparse+0x82>
      u.port = i + 1;
 8021b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b2c:	3301      	adds	r3, #1
 8021b2e:	61bb      	str	r3, [r7, #24]
 8021b30:	e026      	b.n	8021b80 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8021b32:	683a      	ldr	r2, [r7, #0]
 8021b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b36:	4413      	add	r3, r2
 8021b38:	781b      	ldrb	r3, [r3, #0]
 8021b3a:	2b40      	cmp	r3, #64	@ 0x40
 8021b3c:	d112      	bne.n	8021b64 <urlparse+0xb4>
 8021b3e:	68fb      	ldr	r3, [r7, #12]
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	d10f      	bne.n	8021b64 <urlparse+0xb4>
 8021b44:	693b      	ldr	r3, [r7, #16]
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d10c      	bne.n	8021b64 <urlparse+0xb4>
 8021b4a:	69fb      	ldr	r3, [r7, #28]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d109      	bne.n	8021b64 <urlparse+0xb4>
      u.user = u.host;
 8021b50:	697b      	ldr	r3, [r7, #20]
 8021b52:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8021b54:	69bb      	ldr	r3, [r7, #24]
 8021b56:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8021b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b5a:	3301      	adds	r3, #1
 8021b5c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8021b5e:	2300      	movs	r3, #0
 8021b60:	61bb      	str	r3, [r7, #24]
 8021b62:	e00d      	b.n	8021b80 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8021b64:	683a      	ldr	r2, [r7, #0]
 8021b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b68:	4413      	add	r3, r2
 8021b6a:	781b      	ldrb	r3, [r3, #0]
 8021b6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8021b6e:	d107      	bne.n	8021b80 <urlparse+0xd0>
 8021b70:	697b      	ldr	r3, [r7, #20]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d004      	beq.n	8021b80 <urlparse+0xd0>
 8021b76:	69fb      	ldr	r3, [r7, #28]
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d101      	bne.n	8021b80 <urlparse+0xd0>
      u.uri = i;
 8021b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b7e:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8021b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b82:	3301      	adds	r3, #1
 8021b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8021b86:	683a      	ldr	r2, [r7, #0]
 8021b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b8a:	4413      	add	r3, r2
 8021b8c:	781b      	ldrb	r3, [r3, #0]
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	d19d      	bne.n	8021ace <urlparse+0x1e>
    }
  }
  u.end = i;
 8021b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b94:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	461d      	mov	r5, r3
 8021b9a:	f107 0408 	add.w	r4, r7, #8
 8021b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021ba2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8021ba6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8021baa:	6878      	ldr	r0, [r7, #4]
 8021bac:	3728      	adds	r7, #40	@ 0x28
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	bdb0      	pop	{r4, r5, r7, pc}

08021bb2 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8021bb2:	b580      	push	{r7, lr}
 8021bb4:	b08c      	sub	sp, #48	@ 0x30
 8021bb6:	af00      	add	r7, sp, #0
 8021bb8:	6078      	str	r0, [r7, #4]
 8021bba:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8021bbc:	f107 0310 	add.w	r3, r7, #16
 8021bc0:	6839      	ldr	r1, [r7, #0]
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	f7ff ff74 	bl	8021ab0 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8021bc8:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d004      	beq.n	8021bd8 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8021bce:	6a3a      	ldr	r2, [r7, #32]
 8021bd0:	69fb      	ldr	r3, [r7, #28]
 8021bd2:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8021bd4:	3b01      	subs	r3, #1
 8021bd6:	e009      	b.n	8021bec <mg_url_host+0x3a>
 8021bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d003      	beq.n	8021be6 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8021bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021be0:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8021be2:	1ad3      	subs	r3, r2, r3
 8021be4:	e002      	b.n	8021bec <mg_url_host+0x3a>
 8021be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021be8:	69fb      	ldr	r3, [r7, #28]
 8021bea:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8021bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8021bee:	69fb      	ldr	r3, [r7, #28]
 8021bf0:	683a      	ldr	r2, [r7, #0]
 8021bf2:	18d1      	adds	r1, r2, r3
 8021bf4:	f107 0308 	add.w	r3, r7, #8
 8021bf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021bfa:	4618      	mov	r0, r3
 8021bfc:	f7f4 fed3 	bl	80169a6 <mg_str_n>
  return s;
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	461a      	mov	r2, r3
 8021c04:	f107 0308 	add.w	r3, r7, #8
 8021c08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021c0c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021c10:	6878      	ldr	r0, [r7, #4]
 8021c12:	3730      	adds	r7, #48	@ 0x30
 8021c14:	46bd      	mov	sp, r7
 8021c16:	bd80      	pop	{r7, pc}

08021c18 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	b08a      	sub	sp, #40	@ 0x28
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8021c20:	f107 0308 	add.w	r3, r7, #8
 8021c24:	6879      	ldr	r1, [r7, #4]
 8021c26:	4618      	mov	r0, r3
 8021c28:	f7ff ff42 	bl	8021ab0 <urlparse>
  unsigned short port = 0;
 8021c2c:	2300      	movs	r3, #0
 8021c2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8021c30:	2205      	movs	r2, #5
 8021c32:	4925      	ldr	r1, [pc, #148]	@ (8021cc8 <mg_url_port+0xb0>)
 8021c34:	6878      	ldr	r0, [r7, #4]
 8021c36:	f005 fdc0 	bl	80277ba <strncmp>
 8021c3a:	4603      	mov	r3, r0
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d007      	beq.n	8021c50 <mg_url_port+0x38>
 8021c40:	2203      	movs	r2, #3
 8021c42:	4922      	ldr	r1, [pc, #136]	@ (8021ccc <mg_url_port+0xb4>)
 8021c44:	6878      	ldr	r0, [r7, #4]
 8021c46:	f005 fdb8 	bl	80277ba <strncmp>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d101      	bne.n	8021c54 <mg_url_port+0x3c>
 8021c50:	2350      	movs	r3, #80	@ 0x50
 8021c52:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8021c54:	2204      	movs	r2, #4
 8021c56:	491e      	ldr	r1, [pc, #120]	@ (8021cd0 <mg_url_port+0xb8>)
 8021c58:	6878      	ldr	r0, [r7, #4]
 8021c5a:	f005 fdae 	bl	80277ba <strncmp>
 8021c5e:	4603      	mov	r3, r0
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	d007      	beq.n	8021c74 <mg_url_port+0x5c>
 8021c64:	2206      	movs	r2, #6
 8021c66:	491b      	ldr	r1, [pc, #108]	@ (8021cd4 <mg_url_port+0xbc>)
 8021c68:	6878      	ldr	r0, [r7, #4]
 8021c6a:	f005 fda6 	bl	80277ba <strncmp>
 8021c6e:	4603      	mov	r3, r0
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d102      	bne.n	8021c7a <mg_url_port+0x62>
    port = 443;
 8021c74:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8021c78:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8021c7a:	2205      	movs	r2, #5
 8021c7c:	4916      	ldr	r1, [pc, #88]	@ (8021cd8 <mg_url_port+0xc0>)
 8021c7e:	6878      	ldr	r0, [r7, #4]
 8021c80:	f005 fd9b 	bl	80277ba <strncmp>
 8021c84:	4603      	mov	r3, r0
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d102      	bne.n	8021c90 <mg_url_port+0x78>
 8021c8a:	f240 735b 	movw	r3, #1883	@ 0x75b
 8021c8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8021c90:	2206      	movs	r2, #6
 8021c92:	4912      	ldr	r1, [pc, #72]	@ (8021cdc <mg_url_port+0xc4>)
 8021c94:	6878      	ldr	r0, [r7, #4]
 8021c96:	f005 fd90 	bl	80277ba <strncmp>
 8021c9a:	4603      	mov	r3, r0
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d102      	bne.n	8021ca6 <mg_url_port+0x8e>
 8021ca0:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8021ca4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8021ca6:	69bb      	ldr	r3, [r7, #24]
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d007      	beq.n	8021cbc <mg_url_port+0xa4>
 8021cac:	69bb      	ldr	r3, [r7, #24]
 8021cae:	687a      	ldr	r2, [r7, #4]
 8021cb0:	4413      	add	r3, r2
 8021cb2:	4618      	mov	r0, r3
 8021cb4:	f003 feb9 	bl	8025a2a <atoi>
 8021cb8:	4603      	mov	r3, r0
 8021cba:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8021cbc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8021cbe:	4618      	mov	r0, r3
 8021cc0:	3728      	adds	r7, #40	@ 0x28
 8021cc2:	46bd      	mov	sp, r7
 8021cc4:	bd80      	pop	{r7, pc}
 8021cc6:	bf00      	nop
 8021cc8:	0802c5b4 	.word	0x0802c5b4
 8021ccc:	0802c5bc 	.word	0x0802c5bc
 8021cd0:	0802c584 	.word	0x0802c584
 8021cd4:	0802c58c 	.word	0x0802c58c
 8021cd8:	0802c5c0 	.word	0x0802c5c0
 8021cdc:	0802c594 	.word	0x0802c594

08021ce0 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8021ce0:	b480      	push	{r7}
 8021ce2:	b083      	sub	sp, #12
 8021ce4:	af00      	add	r7, sp, #0
 8021ce6:	6078      	str	r0, [r7, #4]
 8021ce8:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	2b00      	cmp	r3, #0
 8021cee:	d00a      	beq.n	8021d06 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8021cf0:	e004      	b.n	8021cfc <mg_bzero+0x1c>
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	1c5a      	adds	r2, r3, #1
 8021cf6:	607a      	str	r2, [r7, #4]
 8021cf8:	2200      	movs	r2, #0
 8021cfa:	701a      	strb	r2, [r3, #0]
 8021cfc:	683b      	ldr	r3, [r7, #0]
 8021cfe:	1e5a      	subs	r2, r3, #1
 8021d00:	603a      	str	r2, [r7, #0]
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d1f5      	bne.n	8021cf2 <mg_bzero+0x12>
  }
}
 8021d06:	bf00      	nop
 8021d08:	370c      	adds	r7, #12
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d10:	4770      	bx	lr
	...

08021d14 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8021d14:	b580      	push	{r7, lr}
 8021d16:	b084      	sub	sp, #16
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	6078      	str	r0, [r7, #4]
 8021d1c:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8021d1e:	6839      	ldr	r1, [r7, #0]
 8021d20:	6878      	ldr	r0, [r7, #4]
 8021d22:	f7de fee7 	bl	8000af4 <mg_random>
  for (i = 0; i < len; i++) {
 8021d26:	2300      	movs	r3, #0
 8021d28:	60fb      	str	r3, [r7, #12]
 8021d2a:	e02d      	b.n	8021d88 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8021d2c:	687a      	ldr	r2, [r7, #4]
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	4413      	add	r3, r2
 8021d32:	781a      	ldrb	r2, [r3, #0]
 8021d34:	0853      	lsrs	r3, r2, #1
 8021d36:	4919      	ldr	r1, [pc, #100]	@ (8021d9c <mg_random_str+0x88>)
 8021d38:	fba1 1303 	umull	r1, r3, r1, r3
 8021d3c:	0919      	lsrs	r1, r3, #4
 8021d3e:	460b      	mov	r3, r1
 8021d40:	015b      	lsls	r3, r3, #5
 8021d42:	1a5b      	subs	r3, r3, r1
 8021d44:	005b      	lsls	r3, r3, #1
 8021d46:	1ad3      	subs	r3, r2, r3
 8021d48:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8021d4a:	683b      	ldr	r3, [r7, #0]
 8021d4c:	3b01      	subs	r3, #1
 8021d4e:	68fa      	ldr	r2, [r7, #12]
 8021d50:	429a      	cmp	r2, r3
 8021d52:	d011      	beq.n	8021d78 <mg_random_str+0x64>
 8021d54:	7afb      	ldrb	r3, [r7, #11]
 8021d56:	2b19      	cmp	r3, #25
 8021d58:	d803      	bhi.n	8021d62 <mg_random_str+0x4e>
 8021d5a:	7afb      	ldrb	r3, [r7, #11]
 8021d5c:	3361      	adds	r3, #97	@ 0x61
 8021d5e:	b2db      	uxtb	r3, r3
 8021d60:	e00b      	b.n	8021d7a <mg_random_str+0x66>
 8021d62:	7afb      	ldrb	r3, [r7, #11]
 8021d64:	2b33      	cmp	r3, #51	@ 0x33
 8021d66:	d803      	bhi.n	8021d70 <mg_random_str+0x5c>
 8021d68:	7afb      	ldrb	r3, [r7, #11]
 8021d6a:	3327      	adds	r3, #39	@ 0x27
 8021d6c:	b2db      	uxtb	r3, r3
 8021d6e:	e004      	b.n	8021d7a <mg_random_str+0x66>
 8021d70:	7afb      	ldrb	r3, [r7, #11]
 8021d72:	3b04      	subs	r3, #4
 8021d74:	b2db      	uxtb	r3, r3
 8021d76:	e000      	b.n	8021d7a <mg_random_str+0x66>
 8021d78:	2300      	movs	r3, #0
 8021d7a:	6879      	ldr	r1, [r7, #4]
 8021d7c:	68fa      	ldr	r2, [r7, #12]
 8021d7e:	440a      	add	r2, r1
 8021d80:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8021d82:	68fb      	ldr	r3, [r7, #12]
 8021d84:	3301      	adds	r3, #1
 8021d86:	60fb      	str	r3, [r7, #12]
 8021d88:	68fa      	ldr	r2, [r7, #12]
 8021d8a:	683b      	ldr	r3, [r7, #0]
 8021d8c:	429a      	cmp	r2, r3
 8021d8e:	d3cd      	bcc.n	8021d2c <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8021d90:	687b      	ldr	r3, [r7, #4]
}
 8021d92:	4618      	mov	r0, r3
 8021d94:	3710      	adds	r7, #16
 8021d96:	46bd      	mov	sp, r7
 8021d98:	bd80      	pop	{r7, pc}
 8021d9a:	bf00      	nop
 8021d9c:	84210843 	.word	0x84210843

08021da0 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8021da0:	b480      	push	{r7}
 8021da2:	b087      	sub	sp, #28
 8021da4:	af00      	add	r7, sp, #0
 8021da6:	60f8      	str	r0, [r7, #12]
 8021da8:	60b9      	str	r1, [r7, #8]
 8021daa:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8021dac:	68fb      	ldr	r3, [r7, #12]
 8021dae:	43db      	mvns	r3, r3
 8021db0:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021db2:	e01f      	b.n	8021df4 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8021db4:	68bb      	ldr	r3, [r7, #8]
 8021db6:	1c5a      	adds	r2, r3, #1
 8021db8:	60ba      	str	r2, [r7, #8]
 8021dba:	781b      	ldrb	r3, [r3, #0]
 8021dbc:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8021dbe:	7dfa      	ldrb	r2, [r7, #23]
 8021dc0:	68fb      	ldr	r3, [r7, #12]
 8021dc2:	4053      	eors	r3, r2
 8021dc4:	f003 030f 	and.w	r3, r3, #15
 8021dc8:	4a11      	ldr	r2, [pc, #68]	@ (8021e10 <mg_crc32+0x70>)
 8021dca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021dce:	68fb      	ldr	r3, [r7, #12]
 8021dd0:	091b      	lsrs	r3, r3, #4
 8021dd2:	4053      	eors	r3, r2
 8021dd4:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8021dd6:	7dfb      	ldrb	r3, [r7, #23]
 8021dd8:	091b      	lsrs	r3, r3, #4
 8021dda:	b2db      	uxtb	r3, r3
 8021ddc:	461a      	mov	r2, r3
 8021dde:	68fb      	ldr	r3, [r7, #12]
 8021de0:	4053      	eors	r3, r2
 8021de2:	f003 030f 	and.w	r3, r3, #15
 8021de6:	4a0a      	ldr	r2, [pc, #40]	@ (8021e10 <mg_crc32+0x70>)
 8021de8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021dec:	68fb      	ldr	r3, [r7, #12]
 8021dee:	091b      	lsrs	r3, r3, #4
 8021df0:	4053      	eors	r3, r2
 8021df2:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021df4:	687b      	ldr	r3, [r7, #4]
 8021df6:	1e5a      	subs	r2, r3, #1
 8021df8:	607a      	str	r2, [r7, #4]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d1da      	bne.n	8021db4 <mg_crc32+0x14>
  }
  return ~crc;
 8021dfe:	68fb      	ldr	r3, [r7, #12]
 8021e00:	43db      	mvns	r3, r3
}
 8021e02:	4618      	mov	r0, r3
 8021e04:	371c      	adds	r7, #28
 8021e06:	46bd      	mov	sp, r7
 8021e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e0c:	4770      	bx	lr
 8021e0e:	bf00      	nop
 8021e10:	0802dd50 	.word	0x0802dd50

08021e14 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8021e14:	b480      	push	{r7}
 8021e16:	b085      	sub	sp, #20
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	463b      	mov	r3, r7
 8021e1c:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8021e20:	683b      	ldr	r3, [r7, #0]
 8021e22:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 8021e28:	683b      	ldr	r3, [r7, #0]
 8021e2a:	781b      	ldrb	r3, [r3, #0]
 8021e2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8021e2e:	d101      	bne.n	8021e34 <mg_path_is_sane+0x20>
 8021e30:	2300      	movs	r3, #0
 8021e32:	e02f      	b.n	8021e94 <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8021e34:	683b      	ldr	r3, [r7, #0]
 8021e36:	781b      	ldrb	r3, [r3, #0]
 8021e38:	2b2e      	cmp	r3, #46	@ 0x2e
 8021e3a:	d123      	bne.n	8021e84 <mg_path_is_sane+0x70>
 8021e3c:	683b      	ldr	r3, [r7, #0]
 8021e3e:	3301      	adds	r3, #1
 8021e40:	781b      	ldrb	r3, [r3, #0]
 8021e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8021e44:	d11e      	bne.n	8021e84 <mg_path_is_sane+0x70>
 8021e46:	2300      	movs	r3, #0
 8021e48:	e024      	b.n	8021e94 <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8021e4a:	68fb      	ldr	r3, [r7, #12]
 8021e4c:	781b      	ldrb	r3, [r3, #0]
 8021e4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021e50:	d003      	beq.n	8021e5a <mg_path_is_sane+0x46>
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	781b      	ldrb	r3, [r3, #0]
 8021e56:	2b5c      	cmp	r3, #92	@ 0x5c
 8021e58:	d10e      	bne.n	8021e78 <mg_path_is_sane+0x64>
 8021e5a:	68bb      	ldr	r3, [r7, #8]
 8021e5c:	2b01      	cmp	r3, #1
 8021e5e:	d90b      	bls.n	8021e78 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	3301      	adds	r3, #1
 8021e64:	781b      	ldrb	r3, [r3, #0]
 8021e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8021e68:	d106      	bne.n	8021e78 <mg_path_is_sane+0x64>
 8021e6a:	68fb      	ldr	r3, [r7, #12]
 8021e6c:	3302      	adds	r3, #2
 8021e6e:	781b      	ldrb	r3, [r3, #0]
 8021e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8021e72:	d101      	bne.n	8021e78 <mg_path_is_sane+0x64>
 8021e74:	2300      	movs	r3, #0
 8021e76:	e00d      	b.n	8021e94 <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	3301      	adds	r3, #1
 8021e7c:	60fb      	str	r3, [r7, #12]
 8021e7e:	68bb      	ldr	r3, [r7, #8]
 8021e80:	3b01      	subs	r3, #1
 8021e82:	60bb      	str	r3, [r7, #8]
 8021e84:	68fb      	ldr	r3, [r7, #12]
 8021e86:	781b      	ldrb	r3, [r3, #0]
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d002      	beq.n	8021e92 <mg_path_is_sane+0x7e>
 8021e8c:	68bb      	ldr	r3, [r7, #8]
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d1db      	bne.n	8021e4a <mg_path_is_sane+0x36>
    }
  }
  return true;
 8021e92:	2301      	movs	r3, #1
}
 8021e94:	4618      	mov	r0, r3
 8021e96:	3714      	adds	r7, #20
 8021e98:	46bd      	mov	sp, r7
 8021e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e9e:	4770      	bx	lr

08021ea0 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 8021ea0:	b480      	push	{r7}
 8021ea2:	b083      	sub	sp, #12
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	4603      	mov	r3, r0
 8021ea8:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 8021eaa:	1dbb      	adds	r3, r7, #6
 8021eac:	781b      	ldrb	r3, [r3, #0]
 8021eae:	b21b      	sxth	r3, r3
 8021eb0:	021b      	lsls	r3, r3, #8
 8021eb2:	b21a      	sxth	r2, r3
 8021eb4:	1dbb      	adds	r3, r7, #6
 8021eb6:	3301      	adds	r3, #1
 8021eb8:	781b      	ldrb	r3, [r3, #0]
 8021eba:	b21b      	sxth	r3, r3
 8021ebc:	4313      	orrs	r3, r2
 8021ebe:	b21b      	sxth	r3, r3
 8021ec0:	b29b      	uxth	r3, r3
}
 8021ec2:	4618      	mov	r0, r3
 8021ec4:	370c      	adds	r7, #12
 8021ec6:	46bd      	mov	sp, r7
 8021ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ecc:	4770      	bx	lr

08021ece <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8021ece:	b480      	push	{r7}
 8021ed0:	b083      	sub	sp, #12
 8021ed2:	af00      	add	r7, sp, #0
 8021ed4:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 8021ed6:	1d3b      	adds	r3, r7, #4
 8021ed8:	781b      	ldrb	r3, [r3, #0]
 8021eda:	061a      	lsls	r2, r3, #24
 8021edc:	1d3b      	adds	r3, r7, #4
 8021ede:	3301      	adds	r3, #1
 8021ee0:	781b      	ldrb	r3, [r3, #0]
 8021ee2:	041b      	lsls	r3, r3, #16
 8021ee4:	431a      	orrs	r2, r3
 8021ee6:	1d3b      	adds	r3, r7, #4
 8021ee8:	3302      	adds	r3, #2
 8021eea:	781b      	ldrb	r3, [r3, #0]
 8021eec:	021b      	lsls	r3, r3, #8
 8021eee:	431a      	orrs	r2, r3
 8021ef0:	1d3b      	adds	r3, r7, #4
 8021ef2:	3303      	adds	r3, #3
 8021ef4:	781b      	ldrb	r3, [r3, #0]
 8021ef6:	4313      	orrs	r3, r2
}
 8021ef8:	4618      	mov	r0, r3
 8021efa:	370c      	adds	r7, #12
 8021efc:	46bd      	mov	sp, r7
 8021efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f02:	4770      	bx	lr

08021f04 <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 8021f04:	b580      	push	{r7, lr}
 8021f06:	b0aa      	sub	sp, #168	@ 0xa8
 8021f08:	af00      	add	r7, sp, #0
 8021f0a:	60f8      	str	r0, [r7, #12]
 8021f0c:	60b9      	str	r1, [r7, #8]
 8021f0e:	607a      	str	r2, [r7, #4]
 8021f10:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 8021f12:	4b29      	ldr	r3, [pc, #164]	@ (8021fb8 <ws_handshake+0xb4>)
 8021f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 8021f18:	f107 0314 	add.w	r3, r7, #20
 8021f1c:	4618      	mov	r0, r3
 8021f1e:	f7f2 ff57 	bl	8014dd0 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 8021f22:	68bb      	ldr	r3, [r7, #8]
 8021f24:	6819      	ldr	r1, [r3, #0]
 8021f26:	68bb      	ldr	r3, [r7, #8]
 8021f28:	685a      	ldr	r2, [r3, #4]
 8021f2a:	f107 0314 	add.w	r3, r7, #20
 8021f2e:	4618      	mov	r0, r3
 8021f30:	f7f2 ff78 	bl	8014e24 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 8021f34:	f107 0314 	add.w	r3, r7, #20
 8021f38:	2224      	movs	r2, #36	@ 0x24
 8021f3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8021f3e:	4618      	mov	r0, r3
 8021f40:	f7f2 ff70 	bl	8014e24 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 8021f44:	f107 0214 	add.w	r2, r7, #20
 8021f48:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8021f4c:	4611      	mov	r1, r2
 8021f4e:	4618      	mov	r0, r3
 8021f50:	f7f2 ffce 	bl	8014ef0 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 8021f54:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8021f58:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8021f5c:	231e      	movs	r3, #30
 8021f5e:	2114      	movs	r1, #20
 8021f60:	f7e5 ff9e 	bl	8007ea0 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 8021f64:	68fb      	ldr	r3, [r7, #12]
 8021f66:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8021f6a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8021f6e:	4a13      	ldr	r2, [pc, #76]	@ (8021fbc <ws_handshake+0xb8>)
 8021f70:	4813      	ldr	r0, [pc, #76]	@ (8021fc0 <ws_handshake+0xbc>)
 8021f72:	f7e7 fcfa 	bl	800996a <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8021f76:	683b      	ldr	r3, [r7, #0]
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d008      	beq.n	8021f8e <ws_handshake+0x8a>
 8021f7c:	68fb      	ldr	r3, [r7, #12]
 8021f7e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8021f82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8021f86:	683a      	ldr	r2, [r7, #0]
 8021f88:	480d      	ldr	r0, [pc, #52]	@ (8021fc0 <ws_handshake+0xbc>)
 8021f8a:	f7e7 fd09 	bl	80099a0 <mg_vxprintf>
  if (wsproto != NULL) {
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d008      	beq.n	8021fa6 <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	685b      	ldr	r3, [r3, #4]
 8021f98:	461a      	mov	r2, r3
              wsproto->buf);
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8021f9e:	4909      	ldr	r1, [pc, #36]	@ (8021fc4 <ws_handshake+0xc0>)
 8021fa0:	68f8      	ldr	r0, [r7, #12]
 8021fa2:	f7ec fe3f 	bl	800ec24 <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 8021fa6:	2202      	movs	r2, #2
 8021fa8:	4907      	ldr	r1, [pc, #28]	@ (8021fc8 <ws_handshake+0xc4>)
 8021faa:	68f8      	ldr	r0, [r7, #12]
 8021fac:	f7f0 ff76 	bl	8012e9c <mg_send>
}
 8021fb0:	bf00      	nop
 8021fb2:	37a8      	adds	r7, #168	@ 0xa8
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	bd80      	pop	{r7, pc}
 8021fb8:	0802c604 	.word	0x0802c604
 8021fbc:	0802c62c 	.word	0x0802c62c
 8021fc0:	08013175 	.word	0x08013175
 8021fc4:	0802c694 	.word	0x0802c694
 8021fc8:	0802a164 	.word	0x0802a164

08021fcc <be32>:

static uint32_t be32(const uint8_t *p) {
 8021fcc:	b480      	push	{r7}
 8021fce:	b083      	sub	sp, #12
 8021fd0:	af00      	add	r7, sp, #0
 8021fd2:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	3303      	adds	r3, #3
 8021fd8:	781b      	ldrb	r3, [r3, #0]
 8021fda:	461a      	mov	r2, r3
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	3302      	adds	r3, #2
 8021fe0:	781b      	ldrb	r3, [r3, #0]
 8021fe2:	021b      	lsls	r3, r3, #8
 8021fe4:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	3301      	adds	r3, #1
 8021fea:	781b      	ldrb	r3, [r3, #0]
 8021fec:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021fee:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	781b      	ldrb	r3, [r3, #0]
 8021ff4:	061b      	lsls	r3, r3, #24
 8021ff6:	4313      	orrs	r3, r2
}
 8021ff8:	4618      	mov	r0, r3
 8021ffa:	370c      	adds	r7, #12
 8021ffc:	46bd      	mov	sp, r7
 8021ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022002:	4770      	bx	lr

08022004 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 8022004:	b5b0      	push	{r4, r5, r7, lr}
 8022006:	b08a      	sub	sp, #40	@ 0x28
 8022008:	af00      	add	r7, sp, #0
 802200a:	60f8      	str	r0, [r7, #12]
 802200c:	60b9      	str	r1, [r7, #8]
 802200e:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 8022010:	2300      	movs	r3, #0
 8022012:	61fb      	str	r3, [r7, #28]
 8022014:	2300      	movs	r3, #0
 8022016:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 8022018:	220c      	movs	r2, #12
 802201a:	2100      	movs	r1, #0
 802201c:	6878      	ldr	r0, [r7, #4]
 802201e:	f005 fbb7 	bl	8027790 <memset>
  if (len >= 2) {
 8022022:	68bb      	ldr	r3, [r7, #8]
 8022024:	2b01      	cmp	r3, #1
 8022026:	d953      	bls.n	80220d0 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	3301      	adds	r3, #1
 802202c:	781b      	ldrb	r3, [r3, #0]
 802202e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022032:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 8022034:	68fb      	ldr	r3, [r7, #12]
 8022036:	3301      	adds	r3, #1
 8022038:	781b      	ldrb	r3, [r3, #0]
 802203a:	b25b      	sxtb	r3, r3
 802203c:	115b      	asrs	r3, r3, #5
 802203e:	b25b      	sxtb	r3, r3
 8022040:	f003 0304 	and.w	r3, r3, #4
 8022044:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	781a      	ldrb	r2, [r3, #0]
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 802204e:	69fb      	ldr	r3, [r7, #28]
 8022050:	2b7d      	cmp	r3, #125	@ 0x7d
 8022052:	d80b      	bhi.n	802206c <ws_process+0x68>
 8022054:	68ba      	ldr	r2, [r7, #8]
 8022056:	6a3b      	ldr	r3, [r7, #32]
 8022058:	429a      	cmp	r2, r3
 802205a:	d307      	bcc.n	802206c <ws_process+0x68>
      msg->data_len = n;
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	69fa      	ldr	r2, [r7, #28]
 8022060:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 8022062:	6a3b      	ldr	r3, [r7, #32]
 8022064:	1c9a      	adds	r2, r3, #2
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	605a      	str	r2, [r3, #4]
 802206a:	e031      	b.n	80220d0 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 802206c:	69fb      	ldr	r3, [r7, #28]
 802206e:	2b7e      	cmp	r3, #126	@ 0x7e
 8022070:	d113      	bne.n	802209a <ws_process+0x96>
 8022072:	6a3b      	ldr	r3, [r7, #32]
 8022074:	3304      	adds	r3, #4
 8022076:	68ba      	ldr	r2, [r7, #8]
 8022078:	429a      	cmp	r2, r3
 802207a:	d30e      	bcc.n	802209a <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 802207c:	6a3b      	ldr	r3, [r7, #32]
 802207e:	1d1a      	adds	r2, r3, #4
 8022080:	687b      	ldr	r3, [r7, #4]
 8022082:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	3302      	adds	r3, #2
 8022088:	781b      	ldrb	r3, [r3, #0]
 802208a:	021b      	lsls	r3, r3, #8
 802208c:	68fa      	ldr	r2, [r7, #12]
 802208e:	3203      	adds	r2, #3
 8022090:	7812      	ldrb	r2, [r2, #0]
 8022092:	431a      	orrs	r2, r3
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	609a      	str	r2, [r3, #8]
 8022098:	e01a      	b.n	80220d0 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 802209a:	6a3b      	ldr	r3, [r7, #32]
 802209c:	330a      	adds	r3, #10
 802209e:	68ba      	ldr	r2, [r7, #8]
 80220a0:	429a      	cmp	r2, r3
 80220a2:	d315      	bcc.n	80220d0 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 80220a4:	6a3b      	ldr	r3, [r7, #32]
 80220a6:	f103 020a 	add.w	r2, r3, #10
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	3302      	adds	r3, #2
 80220b2:	4618      	mov	r0, r3
 80220b4:	f7ff ff8a 	bl	8021fcc <be32>
 80220b8:	4603      	mov	r3, r0
 80220ba:	2200      	movs	r2, #0
 80220bc:	461c      	mov	r4, r3
 80220be:	4615      	mov	r5, r2
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	3306      	adds	r3, #6
 80220c4:	4618      	mov	r0, r3
 80220c6:	f7ff ff81 	bl	8021fcc <be32>
 80220ca:	4602      	mov	r2, r0
      msg->data_len =
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	689b      	ldr	r3, [r3, #8]
 80220d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80220d8:	d901      	bls.n	80220de <ws_process+0xda>
 80220da:	2300      	movs	r3, #0
 80220dc:	e036      	b.n	802214c <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	685a      	ldr	r2, [r3, #4]
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	689b      	ldr	r3, [r3, #8]
 80220e6:	4413      	add	r3, r2
 80220e8:	68ba      	ldr	r2, [r7, #8]
 80220ea:	429a      	cmp	r2, r3
 80220ec:	d201      	bcs.n	80220f2 <ws_process+0xee>
 80220ee:	2300      	movs	r3, #0
 80220f0:	e02c      	b.n	802214c <ws_process+0x148>
  if (mask_len > 0) {
 80220f2:	6a3b      	ldr	r3, [r7, #32]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d024      	beq.n	8022142 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	685b      	ldr	r3, [r3, #4]
 80220fc:	68fa      	ldr	r2, [r7, #12]
 80220fe:	4413      	add	r3, r2
 8022100:	61bb      	str	r3, [r7, #24]
 8022102:	6a3b      	ldr	r3, [r7, #32]
 8022104:	425b      	negs	r3, r3
 8022106:	69ba      	ldr	r2, [r7, #24]
 8022108:	4413      	add	r3, r2
 802210a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 802210c:	2300      	movs	r3, #0
 802210e:	627b      	str	r3, [r7, #36]	@ 0x24
 8022110:	e012      	b.n	8022138 <ws_process+0x134>
 8022112:	69ba      	ldr	r2, [r7, #24]
 8022114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022116:	4413      	add	r3, r2
 8022118:	7819      	ldrb	r1, [r3, #0]
 802211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802211c:	f003 0303 	and.w	r3, r3, #3
 8022120:	697a      	ldr	r2, [r7, #20]
 8022122:	4413      	add	r3, r2
 8022124:	781a      	ldrb	r2, [r3, #0]
 8022126:	69b8      	ldr	r0, [r7, #24]
 8022128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802212a:	4403      	add	r3, r0
 802212c:	404a      	eors	r2, r1
 802212e:	b2d2      	uxtb	r2, r2
 8022130:	701a      	strb	r2, [r3, #0]
 8022132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022134:	3301      	adds	r3, #1
 8022136:	627b      	str	r3, [r7, #36]	@ 0x24
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	689b      	ldr	r3, [r3, #8]
 802213c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802213e:	429a      	cmp	r2, r3
 8022140:	d3e7      	bcc.n	8022112 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	685a      	ldr	r2, [r3, #4]
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	689b      	ldr	r3, [r3, #8]
 802214a:	4413      	add	r3, r2
}
 802214c:	4618      	mov	r0, r3
 802214e:	3728      	adds	r7, #40	@ 0x28
 8022150:	46bd      	mov	sp, r7
 8022152:	bdb0      	pop	{r4, r5, r7, pc}

08022154 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 8022154:	b5b0      	push	{r4, r5, r7, lr}
 8022156:	b088      	sub	sp, #32
 8022158:	af00      	add	r7, sp, #0
 802215a:	60f8      	str	r0, [r7, #12]
 802215c:	60b9      	str	r1, [r7, #8]
 802215e:	603b      	str	r3, [r7, #0]
 8022160:	4613      	mov	r3, r2
 8022162:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 8022164:	2300      	movs	r3, #0
 8022166:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 8022168:	68bb      	ldr	r3, [r7, #8]
 802216a:	b25b      	sxtb	r3, r3
 802216c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8022170:	b25b      	sxtb	r3, r3
 8022172:	b2da      	uxtb	r2, r3
 8022174:	683b      	ldr	r3, [r7, #0]
 8022176:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 8022178:	68fb      	ldr	r3, [r7, #12]
 802217a:	2b7d      	cmp	r3, #125	@ 0x7d
 802217c:	d807      	bhi.n	802218e <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 802217e:	683b      	ldr	r3, [r7, #0]
 8022180:	3301      	adds	r3, #1
 8022182:	68fa      	ldr	r2, [r7, #12]
 8022184:	b2d2      	uxtb	r2, r2
 8022186:	701a      	strb	r2, [r3, #0]
    n = 2;
 8022188:	2302      	movs	r3, #2
 802218a:	61fb      	str	r3, [r7, #28]
 802218c:	e038      	b.n	8022200 <mkhdr+0xac>
  } else if (len < 65536) {
 802218e:	68fb      	ldr	r3, [r7, #12]
 8022190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022194:	d211      	bcs.n	80221ba <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 8022196:	68fb      	ldr	r3, [r7, #12]
 8022198:	b29b      	uxth	r3, r3
 802219a:	4618      	mov	r0, r3
 802219c:	f7ff fe80 	bl	8021ea0 <mg_ntohs>
 80221a0:	4603      	mov	r3, r0
 80221a2:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 80221a4:	683b      	ldr	r3, [r7, #0]
 80221a6:	3301      	adds	r3, #1
 80221a8:	227e      	movs	r2, #126	@ 0x7e
 80221aa:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 80221ac:	683b      	ldr	r3, [r7, #0]
 80221ae:	3302      	adds	r3, #2
 80221b0:	8b7a      	ldrh	r2, [r7, #26]
 80221b2:	801a      	strh	r2, [r3, #0]
    n = 4;
 80221b4:	2304      	movs	r3, #4
 80221b6:	61fb      	str	r3, [r7, #28]
 80221b8:	e022      	b.n	8022200 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 80221ba:	683b      	ldr	r3, [r7, #0]
 80221bc:	3301      	adds	r3, #1
 80221be:	227f      	movs	r2, #127	@ 0x7f
 80221c0:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 80221c2:	68fb      	ldr	r3, [r7, #12]
 80221c4:	2200      	movs	r2, #0
 80221c6:	461c      	mov	r4, r3
 80221c8:	4615      	mov	r5, r2
 80221ca:	f04f 0200 	mov.w	r2, #0
 80221ce:	f04f 0300 	mov.w	r3, #0
 80221d2:	002a      	movs	r2, r5
 80221d4:	2300      	movs	r3, #0
 80221d6:	4613      	mov	r3, r2
 80221d8:	4618      	mov	r0, r3
 80221da:	f7ff fe78 	bl	8021ece <mg_ntohl>
 80221de:	4603      	mov	r3, r0
 80221e0:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 80221e2:	683b      	ldr	r3, [r7, #0]
 80221e4:	3302      	adds	r3, #2
 80221e6:	697a      	ldr	r2, [r7, #20]
 80221e8:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 80221ea:	68f8      	ldr	r0, [r7, #12]
 80221ec:	f7ff fe6f 	bl	8021ece <mg_ntohl>
 80221f0:	4603      	mov	r3, r0
 80221f2:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 80221f4:	683b      	ldr	r3, [r7, #0]
 80221f6:	3306      	adds	r3, #6
 80221f8:	697a      	ldr	r2, [r7, #20]
 80221fa:	601a      	str	r2, [r3, #0]
    n = 10;
 80221fc:	230a      	movs	r3, #10
 80221fe:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 8022200:	79fb      	ldrb	r3, [r7, #7]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d012      	beq.n	802222c <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 8022206:	683b      	ldr	r3, [r7, #0]
 8022208:	3301      	adds	r3, #1
 802220a:	781a      	ldrb	r2, [r3, #0]
 802220c:	683b      	ldr	r3, [r7, #0]
 802220e:	3301      	adds	r3, #1
 8022210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8022214:	b2d2      	uxtb	r2, r2
 8022216:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 8022218:	683a      	ldr	r2, [r7, #0]
 802221a:	69fb      	ldr	r3, [r7, #28]
 802221c:	4413      	add	r3, r2
 802221e:	2104      	movs	r1, #4
 8022220:	4618      	mov	r0, r3
 8022222:	f7de fc67 	bl	8000af4 <mg_random>
    n += 4;
 8022226:	69fb      	ldr	r3, [r7, #28]
 8022228:	3304      	adds	r3, #4
 802222a:	61fb      	str	r3, [r7, #28]
  }
  return n;
 802222c:	69fb      	ldr	r3, [r7, #28]
}
 802222e:	4618      	mov	r0, r3
 8022230:	3720      	adds	r7, #32
 8022232:	46bd      	mov	sp, r7
 8022234:	bdb0      	pop	{r4, r5, r7, pc}

08022236 <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 8022236:	b480      	push	{r7}
 8022238:	b087      	sub	sp, #28
 802223a:	af00      	add	r7, sp, #0
 802223c:	6078      	str	r0, [r7, #4]
 802223e:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8022246:	f003 0302 	and.w	r3, r3, #2
 802224a:	b2db      	uxtb	r3, r3
 802224c:	2b00      	cmp	r3, #0
 802224e:	d028      	beq.n	80222a2 <mg_ws_mask+0x6c>
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022254:	2b00      	cmp	r3, #0
 8022256:	d024      	beq.n	80222a2 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8022260:	683b      	ldr	r3, [r7, #0]
 8022262:	1acb      	subs	r3, r1, r3
 8022264:	4413      	add	r3, r2
 8022266:	613b      	str	r3, [r7, #16]
 8022268:	693b      	ldr	r3, [r7, #16]
 802226a:	3b04      	subs	r3, #4
 802226c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 802226e:	2300      	movs	r3, #0
 8022270:	617b      	str	r3, [r7, #20]
 8022272:	e012      	b.n	802229a <mg_ws_mask+0x64>
 8022274:	693a      	ldr	r2, [r7, #16]
 8022276:	697b      	ldr	r3, [r7, #20]
 8022278:	4413      	add	r3, r2
 802227a:	7819      	ldrb	r1, [r3, #0]
 802227c:	697b      	ldr	r3, [r7, #20]
 802227e:	f003 0303 	and.w	r3, r3, #3
 8022282:	68fa      	ldr	r2, [r7, #12]
 8022284:	4413      	add	r3, r2
 8022286:	781a      	ldrb	r2, [r3, #0]
 8022288:	6938      	ldr	r0, [r7, #16]
 802228a:	697b      	ldr	r3, [r7, #20]
 802228c:	4403      	add	r3, r0
 802228e:	404a      	eors	r2, r1
 8022290:	b2d2      	uxtb	r2, r2
 8022292:	701a      	strb	r2, [r3, #0]
 8022294:	697b      	ldr	r3, [r7, #20]
 8022296:	3301      	adds	r3, #1
 8022298:	617b      	str	r3, [r7, #20]
 802229a:	697a      	ldr	r2, [r7, #20]
 802229c:	683b      	ldr	r3, [r7, #0]
 802229e:	429a      	cmp	r2, r3
 80222a0:	d3e8      	bcc.n	8022274 <mg_ws_mask+0x3e>
  }
}
 80222a2:	bf00      	nop
 80222a4:	371c      	adds	r7, #28
 80222a6:	46bd      	mov	sp, r7
 80222a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ac:	4770      	bx	lr
	...

080222b0 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b08a      	sub	sp, #40	@ 0x28
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	60f8      	str	r0, [r7, #12]
 80222b8:	60b9      	str	r1, [r7, #8]
 80222ba:	607a      	str	r2, [r7, #4]
 80222bc:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80222c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80222c8:	b2db      	uxtb	r3, r3
 80222ca:	2b00      	cmp	r3, #0
 80222cc:	bf14      	ite	ne
 80222ce:	2301      	movne	r3, #1
 80222d0:	2300      	moveq	r3, #0
 80222d2:	b2da      	uxtb	r2, r3
 80222d4:	f107 0314 	add.w	r3, r7, #20
 80222d8:	6839      	ldr	r1, [r7, #0]
 80222da:	6878      	ldr	r0, [r7, #4]
 80222dc:	f7ff ff3a 	bl	8022154 <mkhdr>
 80222e0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 80222e2:	f107 0314 	add.w	r3, r7, #20
 80222e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80222e8:	4619      	mov	r1, r3
 80222ea:	68f8      	ldr	r0, [r7, #12]
 80222ec:	f7f0 fdd6 	bl	8012e9c <mg_send>
 80222f0:	4603      	mov	r3, r0
 80222f2:	f083 0301 	eor.w	r3, r3, #1
 80222f6:	b2db      	uxtb	r3, r3
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d001      	beq.n	8022300 <mg_ws_send+0x50>
 80222fc:	2300      	movs	r3, #0
 80222fe:	e024      	b.n	802234a <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 8022300:	687a      	ldr	r2, [r7, #4]
 8022302:	68b9      	ldr	r1, [r7, #8]
 8022304:	68f8      	ldr	r0, [r7, #12]
 8022306:	f7f0 fdc9 	bl	8012e9c <mg_send>
 802230a:	4603      	mov	r3, r0
 802230c:	f083 0301 	eor.w	r3, r3, #1
 8022310:	b2db      	uxtb	r3, r3
 8022312:	2b00      	cmp	r3, #0
 8022314:	d001      	beq.n	802231a <mg_ws_send+0x6a>
 8022316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022318:	e017      	b.n	802234a <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 802231a:	4b0e      	ldr	r3, [pc, #56]	@ (8022354 <mg_ws_send+0xa4>)
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	2b03      	cmp	r3, #3
 8022320:	dd0c      	ble.n	802233c <mg_ws_send+0x8c>
 8022322:	4b0d      	ldr	r3, [pc, #52]	@ (8022358 <mg_ws_send+0xa8>)
 8022324:	f644 6268 	movw	r2, #20072	@ 0x4e68
 8022328:	490c      	ldr	r1, [pc, #48]	@ (802235c <mg_ws_send+0xac>)
 802232a:	2004      	movs	r0, #4
 802232c:	f7ec fb1e 	bl	800e96c <mg_log_prefix>
 8022330:	6879      	ldr	r1, [r7, #4]
 8022332:	687a      	ldr	r2, [r7, #4]
 8022334:	68bb      	ldr	r3, [r7, #8]
 8022336:	480a      	ldr	r0, [pc, #40]	@ (8022360 <mg_ws_send+0xb0>)
 8022338:	f7ec fb68 	bl	800ea0c <mg_log>
  mg_ws_mask(c, len);
 802233c:	6879      	ldr	r1, [r7, #4]
 802233e:	68f8      	ldr	r0, [r7, #12]
 8022340:	f7ff ff79 	bl	8022236 <mg_ws_mask>
  return header_len + len;
 8022344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	4413      	add	r3, r2
}
 802234a:	4618      	mov	r0, r3
 802234c:	3728      	adds	r7, #40	@ 0x28
 802234e:	46bd      	mov	sp, r7
 8022350:	bd80      	pop	{r7, pc}
 8022352:	bf00      	nop
 8022354:	24000258 	.word	0x24000258
 8022358:	0802dd90 	.word	0x0802dd90
 802235c:	08029e1c 	.word	0x08029e1c
 8022360:	0802c6b4 	.word	0x0802c6b4

08022364 <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 8022364:	b580      	push	{r7, lr}
 8022366:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 802236a:	af00      	add	r7, sp, #0
 802236c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022370:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022374:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 8022376:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802237a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802237e:	681b      	ldr	r3, [r3, #0]
 8022380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022382:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022386:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802238a:	681b      	ldr	r3, [r3, #0]
 802238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802238e:	4619      	mov	r1, r3
 8022390:	4610      	mov	r0, r2
 8022392:	f7e8 fb2f 	bl	800a9f4 <mg_http_get_request_len>
 8022396:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 802239a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 802239e:	2b00      	cmp	r3, #0
 80223a0:	da08      	bge.n	80223b4 <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 80223a2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80223a6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80223aa:	4936      	ldr	r1, [pc, #216]	@ (8022484 <mg_ws_client_handshake+0x120>)
 80223ac:	6818      	ldr	r0, [r3, #0]
 80223ae:	f7e6 fc65 	bl	8008c7c <mg_error>
 80223b2:	e060      	b.n	8022476 <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 80223b4:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	dd5a      	ble.n	8022472 <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 80223bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80223c0:	2b0e      	cmp	r3, #14
 80223c2:	dd0e      	ble.n	80223e2 <mg_ws_client_handshake+0x7e>
 80223c4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80223c8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80223cc:	681b      	ldr	r3, [r3, #0]
 80223ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80223d0:	3309      	adds	r3, #9
 80223d2:	2203      	movs	r2, #3
 80223d4:	492c      	ldr	r1, [pc, #176]	@ (8022488 <mg_ws_client_handshake+0x124>)
 80223d6:	4618      	mov	r0, r3
 80223d8:	f005 f9b0 	bl	802773c <memcmp>
 80223dc:	4603      	mov	r3, r0
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d008      	beq.n	80223f4 <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 80223e2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80223e6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80223ea:	4928      	ldr	r1, [pc, #160]	@ (802248c <mg_ws_client_handshake+0x128>)
 80223ec:	6818      	ldr	r0, [r3, #0]
 80223ee:	f7e6 fc45 	bl	8008c7c <mg_error>
 80223f2:	e031      	b.n	8022458 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 80223f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80223f8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8022400:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022404:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802240c:	f107 020c 	add.w	r2, r7, #12
 8022410:	4619      	mov	r1, r3
 8022412:	f7e8 fcf9 	bl	800ae08 <mg_http_parse>
 8022416:	4603      	mov	r3, r0
 8022418:	2b00      	cmp	r3, #0
 802241a:	d015      	beq.n	8022448 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 802241c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8022420:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022424:	681a      	ldr	r2, [r3, #0]
 8022426:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802242a:	f043 0302 	orr.w	r3, r3, #2
 802242e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 8022432:	f107 020c 	add.w	r2, r7, #12
 8022436:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802243a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802243e:	210c      	movs	r1, #12
 8022440:	6818      	ldr	r0, [r3, #0]
 8022442:	f7e6 fbfb 	bl	8008c3c <mg_call>
 8022446:	e007      	b.n	8022458 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 8022448:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802244c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022450:	490e      	ldr	r1, [pc, #56]	@ (802248c <mg_ws_client_handshake+0x128>)
 8022452:	6818      	ldr	r0, [r3, #0]
 8022454:	f7e6 fc12 	bl	8008c7c <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 8022458:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802245c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	3338      	adds	r3, #56	@ 0x38
 8022464:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8022468:	2100      	movs	r1, #0
 802246a:	4618      	mov	r0, r3
 802246c:	f7eb fa66 	bl	800d93c <mg_iobuf_del>
 8022470:	e001      	b.n	8022476 <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 8022472:	2301      	movs	r3, #1
 8022474:	e000      	b.n	8022478 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 8022476:	2300      	movs	r3, #0
}
 8022478:	4618      	mov	r0, r3
 802247a:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 802247e:	46bd      	mov	sp, r7
 8022480:	bd80      	pop	{r7, pc}
 8022482:	bf00      	nop
 8022484:	0802c6c8 	.word	0x0802c6c8
 8022488:	0802c6d4 	.word	0x0802c6d4
 802248c:	0802c6d8 	.word	0x0802c6d8

08022490 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 8022490:	b580      	push	{r7, lr}
 8022492:	b090      	sub	sp, #64	@ 0x40
 8022494:	af00      	add	r7, sp, #0
 8022496:	6178      	str	r0, [r7, #20]
 8022498:	6139      	str	r1, [r7, #16]
 802249a:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 802249c:	697b      	ldr	r3, [r7, #20]
 802249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80224a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 80224a4:	693b      	ldr	r3, [r7, #16]
 80224a6:	2b07      	cmp	r3, #7
 80224a8:	f040 813c 	bne.w	8022724 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 80224ac:	697b      	ldr	r3, [r7, #20]
 80224ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80224b2:	f003 0302 	and.w	r3, r3, #2
 80224b6:	b2db      	uxtb	r3, r3
 80224b8:	2b00      	cmp	r3, #0
 80224ba:	f000 8120 	beq.w	80226fe <mg_ws_cb+0x26e>
 80224be:	697b      	ldr	r3, [r7, #20]
 80224c0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80224c4:	f003 0302 	and.w	r3, r3, #2
 80224c8:	b2db      	uxtb	r3, r3
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	f040 8117 	bne.w	80226fe <mg_ws_cb+0x26e>
 80224d0:	6978      	ldr	r0, [r7, #20]
 80224d2:	f7ff ff47 	bl	8022364 <mg_ws_client_handshake>
 80224d6:	4603      	mov	r3, r0
 80224d8:	2b00      	cmp	r3, #0
 80224da:	f040 8122 	bne.w	8022722 <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 80224de:	e10e      	b.n	80226fe <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 80224e0:	697b      	ldr	r3, [r7, #20]
 80224e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80224e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80224e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80224e8:	440b      	add	r3, r1
 80224ea:	4413      	add	r3, r2
 80224ec:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 80224ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80224f0:	61bb      	str	r3, [r7, #24]
 80224f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80224f4:	61fb      	str	r3, [r7, #28]
 80224f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80224fa:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 80224fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022502:	4413      	add	r3, r2
 8022504:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 8022506:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802250a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802250e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8022512:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8022516:	f003 030f 	and.w	r3, r3, #15
 802251a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 802251e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8022522:	2b0a      	cmp	r3, #10
 8022524:	d877      	bhi.n	8022616 <mg_ws_cb+0x186>
 8022526:	a201      	add	r2, pc, #4	@ (adr r2, 802252c <mg_ws_cb+0x9c>)
 8022528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802252c:	08022559 	.word	0x08022559
 8022530:	080225b3 	.word	0x080225b3
 8022534:	080225b3 	.word	0x080225b3
 8022538:	08022617 	.word	0x08022617
 802253c:	08022617 	.word	0x08022617
 8022540:	08022617 	.word	0x08022617
 8022544:	08022617 	.word	0x08022617
 8022548:	08022617 	.word	0x08022617
 802254c:	080225cb 	.word	0x080225cb
 8022550:	08022569 	.word	0x08022569
 8022554:	080225a3 	.word	0x080225a3
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 8022558:	f107 0318 	add.w	r3, r7, #24
 802255c:	461a      	mov	r2, r3
 802255e:	210e      	movs	r1, #14
 8022560:	6978      	ldr	r0, [r7, #20]
 8022562:	f7e6 fb6b 	bl	8008c3c <mg_call>
          break;
 8022566:	e05f      	b.n	8022628 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 8022568:	4b70      	ldr	r3, [pc, #448]	@ (802272c <mg_ws_cb+0x29c>)
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	2b02      	cmp	r3, #2
 802256e:	dd0a      	ble.n	8022586 <mg_ws_cb+0xf6>
 8022570:	4b6f      	ldr	r3, [pc, #444]	@ (8022730 <mg_ws_cb+0x2a0>)
 8022572:	f644 6298 	movw	r2, #20120	@ 0x4e98
 8022576:	496f      	ldr	r1, [pc, #444]	@ (8022734 <mg_ws_cb+0x2a4>)
 8022578:	2003      	movs	r0, #3
 802257a:	f7ec f9f7 	bl	800e96c <mg_log_prefix>
 802257e:	496e      	ldr	r1, [pc, #440]	@ (8022738 <mg_ws_cb+0x2a8>)
 8022580:	486e      	ldr	r0, [pc, #440]	@ (802273c <mg_ws_cb+0x2ac>)
 8022582:	f7ec fa43 	bl	800ea0c <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 8022586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022588:	230a      	movs	r3, #10
 802258a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802258c:	6978      	ldr	r0, [r7, #20]
 802258e:	f7ff fe8f 	bl	80222b0 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 8022592:	f107 0318 	add.w	r3, r7, #24
 8022596:	461a      	mov	r2, r3
 8022598:	210e      	movs	r1, #14
 802259a:	6978      	ldr	r0, [r7, #20]
 802259c:	f7e6 fb4e 	bl	8008c3c <mg_call>
          break;
 80225a0:	e042      	b.n	8022628 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 80225a2:	f107 0318 	add.w	r3, r7, #24
 80225a6:	461a      	mov	r2, r3
 80225a8:	210e      	movs	r1, #14
 80225aa:	6978      	ldr	r0, [r7, #20]
 80225ac:	f7e6 fb46 	bl	8008c3c <mg_call>
          break;
 80225b0:	e03a      	b.n	8022628 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 80225b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d035      	beq.n	8022626 <mg_ws_cb+0x196>
 80225ba:	f107 0318 	add.w	r3, r7, #24
 80225be:	461a      	mov	r2, r3
 80225c0:	210d      	movs	r1, #13
 80225c2:	6978      	ldr	r0, [r7, #20]
 80225c4:	f7e6 fb3a 	bl	8008c3c <mg_call>
          break;
 80225c8:	e02d      	b.n	8022626 <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 80225ca:	4b58      	ldr	r3, [pc, #352]	@ (802272c <mg_ws_cb+0x29c>)
 80225cc:	681b      	ldr	r3, [r3, #0]
 80225ce:	2b02      	cmp	r3, #2
 80225d0:	dd0c      	ble.n	80225ec <mg_ws_cb+0x15c>
 80225d2:	4b57      	ldr	r3, [pc, #348]	@ (8022730 <mg_ws_cb+0x2a0>)
 80225d4:	f644 62a4 	movw	r2, #20132	@ 0x4ea4
 80225d8:	4956      	ldr	r1, [pc, #344]	@ (8022734 <mg_ws_cb+0x2a4>)
 80225da:	2003      	movs	r0, #3
 80225dc:	f7ec f9c6 	bl	800e96c <mg_log_prefix>
 80225e0:	697b      	ldr	r3, [r7, #20]
 80225e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80225e4:	4619      	mov	r1, r3
 80225e6:	4856      	ldr	r0, [pc, #344]	@ (8022740 <mg_ws_cb+0x2b0>)
 80225e8:	f7ec fa10 	bl	800ea0c <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 80225ec:	f107 0318 	add.w	r3, r7, #24
 80225f0:	461a      	mov	r2, r3
 80225f2:	210e      	movs	r1, #14
 80225f4:	6978      	ldr	r0, [r7, #20]
 80225f6:	f7e6 fb21 	bl	8008c3c <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 80225fa:	69b9      	ldr	r1, [r7, #24]
 80225fc:	69fa      	ldr	r2, [r7, #28]
 80225fe:	2308      	movs	r3, #8
 8022600:	6978      	ldr	r0, [r7, #20]
 8022602:	f7ff fe55 	bl	80222b0 <mg_ws_send>
          c->is_draining = 1;
 8022606:	697a      	ldr	r2, [r7, #20]
 8022608:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802260c:	f043 0310 	orr.w	r3, r3, #16
 8022610:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8022614:	e008      	b.n	8022628 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 8022616:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802261a:	461a      	mov	r2, r3
 802261c:	4949      	ldr	r1, [pc, #292]	@ (8022744 <mg_ws_cb+0x2b4>)
 802261e:	6978      	ldr	r0, [r7, #20]
 8022620:	f7e6 fb2c 	bl	8008c7c <mg_error>
          break;
 8022624:	e000      	b.n	8022628 <mg_ws_cb+0x198>
          break;
 8022626:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 8022628:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802262c:	2b00      	cmp	r3, #0
 802262e:	d003      	beq.n	8022638 <mg_ws_cb+0x1a8>
 8022630:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8022634:	2b00      	cmp	r3, #0
 8022636:	d11f      	bne.n	8022678 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 8022638:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802263c:	2b00      	cmp	r3, #0
 802263e:	d008      	beq.n	8022652 <mg_ws_cb+0x1c2>
 8022640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022642:	3301      	adds	r3, #1
 8022644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022648:	3b01      	subs	r3, #1
 802264a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802264e:	3b01      	subs	r3, #1
 8022650:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 8022652:	697b      	ldr	r3, [r7, #20]
 8022654:	3338      	adds	r3, #56	@ 0x38
 8022656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802265a:	4618      	mov	r0, r3
 802265c:	f7eb f96e 	bl	800d93c <mg_iobuf_del>
        len -= msg.header_len;
 8022660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022662:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8022664:	1ad3      	subs	r3, r2, r3
 8022666:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 8022668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802266c:	4413      	add	r3, r2
 802266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 8022670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8022672:	697b      	ldr	r3, [r7, #20]
 8022674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 8022678:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802267c:	2b00      	cmp	r3, #0
 802267e:	d00a      	beq.n	8022696 <mg_ws_cb+0x206>
 8022680:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8022684:	2b00      	cmp	r3, #0
 8022686:	d006      	beq.n	8022696 <mg_ws_cb+0x206>
 8022688:	697b      	ldr	r3, [r7, #20]
 802268a:	3338      	adds	r3, #56	@ 0x38
 802268c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802268e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022690:	4618      	mov	r0, r3
 8022692:	f7eb f953 	bl	800d93c <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 8022696:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802269a:	2b00      	cmp	r3, #0
 802269c:	d02f      	beq.n	80226fe <mg_ws_cb+0x26e>
 802269e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	d12b      	bne.n	80226fe <mg_ws_cb+0x26e>
 80226a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d028      	beq.n	80226fe <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 80226ac:	697b      	ldr	r3, [r7, #20]
 80226ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80226b0:	781b      	ldrb	r3, [r3, #0]
 80226b2:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 80226b6:	697b      	ldr	r3, [r7, #20]
 80226b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80226ba:	1c59      	adds	r1, r3, #1
 80226bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80226be:	1e5a      	subs	r2, r3, #1
 80226c0:	463b      	mov	r3, r7
 80226c2:	4618      	mov	r0, r3
 80226c4:	f7f4 f96f 	bl	80169a6 <mg_str_n>
 80226c8:	f107 0318 	add.w	r3, r7, #24
 80226cc:	463a      	mov	r2, r7
 80226ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80226d2:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 80226d6:	f107 0318 	add.w	r3, r7, #24
 80226da:	461a      	mov	r2, r3
 80226dc:	210d      	movs	r1, #13
 80226de:	6978      	ldr	r0, [r7, #20]
 80226e0:	f7e6 faac 	bl	8008c3c <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 80226e4:	697b      	ldr	r3, [r7, #20]
 80226e6:	3338      	adds	r3, #56	@ 0x38
 80226e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80226ea:	2100      	movs	r1, #0
 80226ec:	4618      	mov	r0, r3
 80226ee:	f7eb f925 	bl	800d93c <mg_iobuf_del>
        ofs = 0;
 80226f2:	2300      	movs	r3, #0
 80226f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 80226f6:	697b      	ldr	r3, [r7, #20]
 80226f8:	2200      	movs	r2, #0
 80226fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 80226fe:	697b      	ldr	r3, [r7, #20]
 8022700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022704:	18d0      	adds	r0, r2, r3
 8022706:	697b      	ldr	r3, [r7, #20]
 8022708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802270a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802270c:	1ad3      	subs	r3, r2, r3
 802270e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8022712:	4619      	mov	r1, r3
 8022714:	f7ff fc76 	bl	8022004 <ws_process>
 8022718:	4603      	mov	r3, r0
 802271a:	2b00      	cmp	r3, #0
 802271c:	f47f aee0 	bne.w	80224e0 <mg_ws_cb+0x50>
 8022720:	e000      	b.n	8022724 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 8022722:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 8022724:	3740      	adds	r7, #64	@ 0x40
 8022726:	46bd      	mov	sp, r7
 8022728:	bd80      	pop	{r7, pc}
 802272a:	bf00      	nop
 802272c:	24000258 	.word	0x24000258
 8022730:	0802dd9c 	.word	0x0802dd9c
 8022734:	08029e1c 	.word	0x08029e1c
 8022738:	0802c6ec 	.word	0x0802c6ec
 802273c:	0802a0e8 	.word	0x0802a0e8
 8022740:	0802c6f4 	.word	0x0802c6f4
 8022744:	0802c704 	.word	0x0802c704

08022748 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 8022748:	b40c      	push	{r2, r3}
 802274a:	b580      	push	{r7, lr}
 802274c:	b088      	sub	sp, #32
 802274e:	af02      	add	r7, sp, #8
 8022750:	6078      	str	r0, [r7, #4]
 8022752:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 8022754:	4924      	ldr	r1, [pc, #144]	@ (80227e8 <mg_ws_upgrade+0xa0>)
 8022756:	6838      	ldr	r0, [r7, #0]
 8022758:	f7e8 f99a 	bl	800aa90 <mg_http_get_header>
 802275c:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	4a22      	ldr	r2, [pc, #136]	@ (80227ec <mg_ws_upgrade+0xa4>)
 8022762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	2200      	movs	r2, #0
 802276a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 802276e:	697b      	ldr	r3, [r7, #20]
 8022770:	2b00      	cmp	r3, #0
 8022772:	d10e      	bne.n	8022792 <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 8022774:	4b1e      	ldr	r3, [pc, #120]	@ (80227f0 <mg_ws_upgrade+0xa8>)
 8022776:	4a1f      	ldr	r2, [pc, #124]	@ (80227f4 <mg_ws_upgrade+0xac>)
 8022778:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 802277c:	6878      	ldr	r0, [r7, #4]
 802277e:	f7e9 f9fd 	bl	800bb7c <mg_http_reply>
    c->is_draining = 1;
 8022782:	687a      	ldr	r2, [r7, #4]
 8022784:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8022788:	f043 0310 	orr.w	r3, r3, #16
 802278c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 8022790:	e023      	b.n	80227da <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 8022792:	4919      	ldr	r1, [pc, #100]	@ (80227f8 <mg_ws_upgrade+0xb0>)
 8022794:	6838      	ldr	r0, [r7, #0]
 8022796:	f7e8 f97b 	bl	800aa90 <mg_http_get_header>
 802279a:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 802279c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80227a0:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 80227a2:	f107 030c 	add.w	r3, r7, #12
 80227a6:	9300      	str	r3, [sp, #0]
 80227a8:	6a3b      	ldr	r3, [r7, #32]
 80227aa:	693a      	ldr	r2, [r7, #16]
 80227ac:	6979      	ldr	r1, [r7, #20]
 80227ae:	6878      	ldr	r0, [r7, #4]
 80227b0:	f7ff fba8 	bl	8021f04 <ws_handshake>
    c->is_websocket = 1;
 80227b4:	687a      	ldr	r2, [r7, #4]
 80227b6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80227ba:	f043 0302 	orr.w	r3, r3, #2
 80227be:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 80227c2:	687a      	ldr	r2, [r7, #4]
 80227c4:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80227c8:	f023 0301 	bic.w	r3, r3, #1
 80227cc:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 80227d0:	683a      	ldr	r2, [r7, #0]
 80227d2:	210c      	movs	r1, #12
 80227d4:	6878      	ldr	r0, [r7, #4]
 80227d6:	f7e6 fa31 	bl	8008c3c <mg_call>
}
 80227da:	bf00      	nop
 80227dc:	3718      	adds	r7, #24
 80227de:	46bd      	mov	sp, r7
 80227e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80227e4:	b002      	add	sp, #8
 80227e6:	4770      	bx	lr
 80227e8:	0802c794 	.word	0x0802c794
 80227ec:	08022491 	.word	0x08022491
 80227f0:	0802c7a8 	.word	0x0802c7a8
 80227f4:	0802a65c 	.word	0x0802a65c
 80227f8:	0802c7c0 	.word	0x0802c7c0

080227fc <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 80227fc:	b480      	push	{r7}
 80227fe:	b083      	sub	sp, #12
 8022800:	af00      	add	r7, sp, #0
 8022802:	4603      	mov	r3, r0
 8022804:	460a      	mov	r2, r1
 8022806:	80fb      	strh	r3, [r7, #6]
 8022808:	4613      	mov	r3, r2
 802280a:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 802280c:	88fb      	ldrh	r3, [r7, #6]
 802280e:	2b22      	cmp	r3, #34	@ 0x22
 8022810:	dc40      	bgt.n	8022894 <mg_phy_id_to_str+0x98>
 8022812:	2b07      	cmp	r3, #7
 8022814:	db63      	blt.n	80228de <mg_phy_id_to_str+0xe2>
 8022816:	3b07      	subs	r3, #7
 8022818:	2b1b      	cmp	r3, #27
 802281a:	d860      	bhi.n	80228de <mg_phy_id_to_str+0xe2>
 802281c:	a201      	add	r2, pc, #4	@ (adr r2, 8022824 <mg_phy_id_to_str+0x28>)
 802281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022822:	bf00      	nop
 8022824:	080228d3 	.word	0x080228d3
 8022828:	080228df 	.word	0x080228df
 802282c:	080228df 	.word	0x080228df
 8022830:	080228df 	.word	0x080228df
 8022834:	080228df 	.word	0x080228df
 8022838:	080228df 	.word	0x080228df
 802283c:	080228df 	.word	0x080228df
 8022840:	080228df 	.word	0x080228df
 8022844:	080228df 	.word	0x080228df
 8022848:	080228df 	.word	0x080228df
 802284c:	080228df 	.word	0x080228df
 8022850:	080228df 	.word	0x080228df
 8022854:	080228df 	.word	0x080228df
 8022858:	080228df 	.word	0x080228df
 802285c:	080228db 	.word	0x080228db
 8022860:	080228df 	.word	0x080228df
 8022864:	080228df 	.word	0x080228df
 8022868:	080228df 	.word	0x080228df
 802286c:	080228df 	.word	0x080228df
 8022870:	080228df 	.word	0x080228df
 8022874:	080228df 	.word	0x080228df
 8022878:	080228d7 	.word	0x080228d7
 802287c:	080228df 	.word	0x080228df
 8022880:	080228df 	.word	0x080228df
 8022884:	080228df 	.word	0x080228df
 8022888:	080228df 	.word	0x080228df
 802288c:	080228df 	.word	0x080228df
 8022890:	080228cf 	.word	0x080228cf
 8022894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022898:	d121      	bne.n	80228de <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 802289a:	88bb      	ldrh	r3, [r7, #4]
 802289c:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80228a0:	4293      	cmp	r3, r2
 80228a2:	d00c      	beq.n	80228be <mg_phy_id_to_str+0xc2>
 80228a4:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80228a8:	4293      	cmp	r3, r2
 80228aa:	dc0e      	bgt.n	80228ca <mg_phy_id_to_str+0xce>
 80228ac:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 80228b0:	4293      	cmp	r3, r2
 80228b2:	d006      	beq.n	80228c2 <mg_phy_id_to_str+0xc6>
 80228b4:	f24a 1240 	movw	r2, #41280	@ 0xa140
 80228b8:	4293      	cmp	r3, r2
 80228ba:	d004      	beq.n	80228c6 <mg_phy_id_to_str+0xca>
 80228bc:	e005      	b.n	80228ca <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 80228be:	4b0b      	ldr	r3, [pc, #44]	@ (80228ec <mg_phy_id_to_str+0xf0>)
 80228c0:	e00e      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 80228c2:	4b0b      	ldr	r3, [pc, #44]	@ (80228f0 <mg_phy_id_to_str+0xf4>)
 80228c4:	e00c      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 80228c6:	4b0b      	ldr	r3, [pc, #44]	@ (80228f4 <mg_phy_id_to_str+0xf8>)
 80228c8:	e00a      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 80228ca:	4b0b      	ldr	r3, [pc, #44]	@ (80228f8 <mg_phy_id_to_str+0xfc>)
 80228cc:	e008      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 80228ce:	4b0b      	ldr	r3, [pc, #44]	@ (80228fc <mg_phy_id_to_str+0x100>)
 80228d0:	e006      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 80228d2:	4b0b      	ldr	r3, [pc, #44]	@ (8022900 <mg_phy_id_to_str+0x104>)
 80228d4:	e004      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 80228d6:	4b0b      	ldr	r3, [pc, #44]	@ (8022904 <mg_phy_id_to_str+0x108>)
 80228d8:	e002      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 80228da:	4b0b      	ldr	r3, [pc, #44]	@ (8022908 <mg_phy_id_to_str+0x10c>)
 80228dc:	e000      	b.n	80228e0 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 80228de:	4b0b      	ldr	r3, [pc, #44]	@ (802290c <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 80228e0:	4618      	mov	r0, r3
 80228e2:	370c      	adds	r7, #12
 80228e4:	46bd      	mov	sp, r7
 80228e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228ea:	4770      	bx	lr
 80228ec:	0802c7d8 	.word	0x0802c7d8
 80228f0:	0802c7e0 	.word	0x0802c7e0
 80228f4:	0802c7e8 	.word	0x0802c7e8
 80228f8:	0802c7f0 	.word	0x0802c7f0
 80228fc:	0802c7f8 	.word	0x0802c7f8
 8022900:	0802c800 	.word	0x0802c800
 8022904:	0802c808 	.word	0x0802c808
 8022908:	0802c810 	.word	0x0802c810
 802290c:	0802c81c 	.word	0x0802c81c

08022910 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8022910:	b5b0      	push	{r4, r5, r7, lr}
 8022912:	b084      	sub	sp, #16
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
 8022918:	460b      	mov	r3, r1
 802291a:	70fb      	strb	r3, [r7, #3]
 802291c:	4613      	mov	r3, r2
 802291e:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	685b      	ldr	r3, [r3, #4]
 8022924:	78f8      	ldrb	r0, [r7, #3]
 8022926:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802292a:	2100      	movs	r1, #0
 802292c:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 802292e:	bf00      	nop
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	681b      	ldr	r3, [r3, #0]
 8022934:	78fa      	ldrb	r2, [r7, #3]
 8022936:	2100      	movs	r1, #0
 8022938:	4610      	mov	r0, r2
 802293a:	4798      	blx	r3
 802293c:	4603      	mov	r3, r0
 802293e:	b21b      	sxth	r3, r3
 8022940:	2b00      	cmp	r3, #0
 8022942:	dbf5      	blt.n	8022930 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	78fa      	ldrb	r2, [r7, #3]
 802294a:	2102      	movs	r1, #2
 802294c:	4610      	mov	r0, r2
 802294e:	4798      	blx	r3
 8022950:	4603      	mov	r3, r0
 8022952:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	681b      	ldr	r3, [r3, #0]
 8022958:	78fa      	ldrb	r2, [r7, #3]
 802295a:	2103      	movs	r1, #3
 802295c:	4610      	mov	r0, r2
 802295e:	4798      	blx	r3
 8022960:	4603      	mov	r3, r0
 8022962:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8022964:	4b42      	ldr	r3, [pc, #264]	@ (8022a70 <mg_phy_init+0x160>)
 8022966:	681b      	ldr	r3, [r3, #0]
 8022968:	2b01      	cmp	r3, #1
 802296a:	dd14      	ble.n	8022996 <mg_phy_init+0x86>
 802296c:	4b41      	ldr	r3, [pc, #260]	@ (8022a74 <mg_phy_init+0x164>)
 802296e:	f245 6224 	movw	r2, #22052	@ 0x5624
 8022972:	4941      	ldr	r1, [pc, #260]	@ (8022a78 <mg_phy_init+0x168>)
 8022974:	2002      	movs	r0, #2
 8022976:	f7eb fff9 	bl	800e96c <mg_log_prefix>
 802297a:	89fc      	ldrh	r4, [r7, #14]
 802297c:	89bd      	ldrh	r5, [r7, #12]
 802297e:	89ba      	ldrh	r2, [r7, #12]
 8022980:	89fb      	ldrh	r3, [r7, #14]
 8022982:	4611      	mov	r1, r2
 8022984:	4618      	mov	r0, r3
 8022986:	f7ff ff39 	bl	80227fc <mg_phy_id_to_str>
 802298a:	4603      	mov	r3, r0
 802298c:	462a      	mov	r2, r5
 802298e:	4621      	mov	r1, r4
 8022990:	483a      	ldr	r0, [pc, #232]	@ (8022a7c <mg_phy_init+0x16c>)
 8022992:	f7ec f83b 	bl	800ea0c <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8022996:	89fb      	ldrh	r3, [r7, #14]
 8022998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802299c:	d11f      	bne.n	80229de <mg_phy_init+0xce>
 802299e:	89bb      	ldrh	r3, [r7, #12]
 80229a0:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80229a4:	4293      	cmp	r3, r2
 80229a6:	d11a      	bne.n	80229de <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	685b      	ldr	r3, [r3, #4]
 80229ac:	78f8      	ldrb	r0, [r7, #3]
 80229ae:	221f      	movs	r2, #31
 80229b0:	210d      	movs	r1, #13
 80229b2:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	685b      	ldr	r3, [r3, #4]
 80229b8:	78f8      	ldrb	r0, [r7, #3]
 80229ba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80229be:	210e      	movs	r1, #14
 80229c0:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	685b      	ldr	r3, [r3, #4]
 80229c6:	78f8      	ldrb	r0, [r7, #3]
 80229c8:	f244 021f 	movw	r2, #16415	@ 0x401f
 80229cc:	210d      	movs	r1, #13
 80229ce:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	685b      	ldr	r3, [r3, #4]
 80229d4:	78f8      	ldrb	r0, [r7, #3]
 80229d6:	f240 120d 	movw	r2, #269	@ 0x10d
 80229da:	210e      	movs	r1, #14
 80229dc:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 80229de:	78bb      	ldrb	r3, [r7, #2]
 80229e0:	f003 0302 	and.w	r3, r3, #2
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d12e      	bne.n	8022a46 <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 80229e8:	89fb      	ldrh	r3, [r7, #14]
 80229ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80229ee:	d110      	bne.n	8022a12 <mg_phy_init+0x102>
 80229f0:	89bb      	ldrh	r3, [r7, #12]
 80229f2:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80229f6:	4293      	cmp	r3, r2
 80229f8:	d00b      	beq.n	8022a12 <mg_phy_init+0x102>
 80229fa:	89bb      	ldrh	r3, [r7, #12]
 80229fc:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8022a00:	4293      	cmp	r3, r2
 8022a02:	d006      	beq.n	8022a12 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	685b      	ldr	r3, [r3, #4]
 8022a08:	78f8      	ldrb	r0, [r7, #3]
 8022a0a:	2281      	movs	r2, #129	@ 0x81
 8022a0c:	2117      	movs	r1, #23
 8022a0e:	4798      	blx	r3
 8022a10:	e019      	b.n	8022a46 <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8022a12:	89fb      	ldrh	r3, [r7, #14]
 8022a14:	2b22      	cmp	r3, #34	@ 0x22
 8022a16:	d116      	bne.n	8022a46 <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	78fa      	ldrb	r2, [r7, #3]
 8022a22:	2100      	movs	r1, #0
 8022a24:	4610      	mov	r0, r2
 8022a26:	4798      	blx	r3
 8022a28:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8022a2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8022a2e:	b29a      	uxth	r2, r3
 8022a30:	78fb      	ldrb	r3, [r7, #3]
 8022a32:	2100      	movs	r1, #0
 8022a34:	4618      	mov	r0, r3
 8022a36:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	685b      	ldr	r3, [r3, #4]
 8022a3c:	78f8      	ldrb	r0, [r7, #3]
 8022a3e:	f248 1280 	movw	r2, #33152	@ 0x8180
 8022a42:	211f      	movs	r1, #31
 8022a44:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8022a46:	78bb      	ldrb	r3, [r7, #2]
 8022a48:	f003 0301 	and.w	r3, r3, #1
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	d00a      	beq.n	8022a66 <mg_phy_init+0x156>
 8022a50:	89fb      	ldrh	r3, [r7, #14]
 8022a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022a56:	d106      	bne.n	8022a66 <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	685b      	ldr	r3, [r3, #4]
 8022a5c:	78f8      	ldrb	r0, [r7, #3]
 8022a5e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022a62:	2118      	movs	r1, #24
 8022a64:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8022a66:	bf00      	nop
 8022a68:	3710      	adds	r7, #16
 8022a6a:	46bd      	mov	sp, r7
 8022a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8022a6e:	bf00      	nop
 8022a70:	24000258 	.word	0x24000258
 8022a74:	0802dda8 	.word	0x0802dda8
 8022a78:	08029e1c 	.word	0x08029e1c
 8022a7c:	0802c824 	.word	0x0802c824

08022a80 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8022a80:	b580      	push	{r7, lr}
 8022a82:	b08a      	sub	sp, #40	@ 0x28
 8022a84:	af00      	add	r7, sp, #0
 8022a86:	60f8      	str	r0, [r7, #12]
 8022a88:	607a      	str	r2, [r7, #4]
 8022a8a:	603b      	str	r3, [r7, #0]
 8022a8c:	460b      	mov	r3, r1
 8022a8e:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8022a90:	2300      	movs	r3, #0
 8022a92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8022a96:	68fb      	ldr	r3, [r7, #12]
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	7afa      	ldrb	r2, [r7, #11]
 8022a9c:	2101      	movs	r1, #1
 8022a9e:	4610      	mov	r0, r2
 8022aa0:	4798      	blx	r3
 8022aa2:	4603      	mov	r3, r0
 8022aa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8022aa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022aa8:	f003 0320 	and.w	r3, r3, #32
 8022aac:	2b00      	cmp	r3, #0
 8022aae:	d00c      	beq.n	8022aca <mg_phy_up+0x4a>
 8022ab0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022ab2:	f003 0304 	and.w	r3, r3, #4
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d107      	bne.n	8022aca <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8022aba:	68fb      	ldr	r3, [r7, #12]
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	7afa      	ldrb	r2, [r7, #11]
 8022ac0:	2101      	movs	r1, #1
 8022ac2:	4610      	mov	r0, r2
 8022ac4:	4798      	blx	r3
 8022ac6:	4603      	mov	r3, r0
 8022ac8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8022aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022acc:	f003 0304 	and.w	r3, r3, #4
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	bf14      	ite	ne
 8022ad4:	2301      	movne	r3, #1
 8022ad6:	2300      	moveq	r3, #0
 8022ad8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8022adc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	f000 80dc 	beq.w	8022c9e <mg_phy_up+0x21e>
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	f000 80d8 	beq.w	8022c9e <mg_phy_up+0x21e>
 8022aee:	683b      	ldr	r3, [r7, #0]
 8022af0:	2b00      	cmp	r3, #0
 8022af2:	f000 80d4 	beq.w	8022c9e <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8022af6:	68fb      	ldr	r3, [r7, #12]
 8022af8:	681b      	ldr	r3, [r3, #0]
 8022afa:	7afa      	ldrb	r2, [r7, #11]
 8022afc:	2102      	movs	r1, #2
 8022afe:	4610      	mov	r0, r2
 8022b00:	4798      	blx	r3
 8022b02:	4603      	mov	r3, r0
 8022b04:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8022b06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022b0c:	d14b      	bne.n	8022ba6 <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8022b0e:	68fb      	ldr	r3, [r7, #12]
 8022b10:	681b      	ldr	r3, [r3, #0]
 8022b12:	7afa      	ldrb	r2, [r7, #11]
 8022b14:	2103      	movs	r1, #3
 8022b16:	4610      	mov	r0, r2
 8022b18:	4798      	blx	r3
 8022b1a:	4603      	mov	r3, r0
 8022b1c:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 8022b1e:	8b3b      	ldrh	r3, [r7, #24]
 8022b20:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8022b24:	4293      	cmp	r3, r2
 8022b26:	d120      	bne.n	8022b6a <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8022b28:	68fb      	ldr	r3, [r7, #12]
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	7afa      	ldrb	r2, [r7, #11]
 8022b2e:	2111      	movs	r1, #17
 8022b30:	4610      	mov	r0, r2
 8022b32:	4798      	blx	r3
 8022b34:	4603      	mov	r3, r0
 8022b36:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 8022b38:	8abb      	ldrh	r3, [r7, #20]
 8022b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	bf14      	ite	ne
 8022b42:	2301      	movne	r3, #1
 8022b44:	2300      	moveq	r3, #0
 8022b46:	b2da      	uxtb	r2, r3
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8022b4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022b50:	2b00      	cmp	r3, #0
 8022b52:	db06      	blt.n	8022b62 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8022b54:	8abb      	ldrh	r3, [r7, #20]
 8022b56:	0b9b      	lsrs	r3, r3, #14
 8022b58:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8022b5a:	f003 0301 	and.w	r3, r3, #1
 8022b5e:	b2da      	uxtb	r2, r3
 8022b60:	e000      	b.n	8022b64 <mg_phy_up+0xe4>
 8022b62:	2202      	movs	r2, #2
 8022b64:	683b      	ldr	r3, [r7, #0]
 8022b66:	701a      	strb	r2, [r3, #0]
 8022b68:	e099      	b.n	8022c9e <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8022b6a:	68fb      	ldr	r3, [r7, #12]
 8022b6c:	681b      	ldr	r3, [r3, #0]
 8022b6e:	7afa      	ldrb	r2, [r7, #11]
 8022b70:	2110      	movs	r1, #16
 8022b72:	4610      	mov	r0, r2
 8022b74:	4798      	blx	r3
 8022b76:	4603      	mov	r3, r0
 8022b78:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 8022b7a:	8afb      	ldrh	r3, [r7, #22]
 8022b7c:	f003 0304 	and.w	r3, r3, #4
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	bf14      	ite	ne
 8022b84:	2301      	movne	r3, #1
 8022b86:	2300      	moveq	r3, #0
 8022b88:	b2da      	uxtb	r2, r3
 8022b8a:	687b      	ldr	r3, [r7, #4]
 8022b8c:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8022b8e:	8afb      	ldrh	r3, [r7, #22]
 8022b90:	f003 0302 	and.w	r3, r3, #2
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	bf0c      	ite	eq
 8022b98:	2301      	moveq	r3, #1
 8022b9a:	2300      	movne	r3, #0
 8022b9c:	b2db      	uxtb	r3, r3
 8022b9e:	461a      	mov	r2, r3
 8022ba0:	683b      	ldr	r3, [r7, #0]
 8022ba2:	701a      	strb	r2, [r3, #0]
 8022ba4:	e07b      	b.n	8022c9e <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8022ba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022ba8:	2b22      	cmp	r3, #34	@ 0x22
 8022baa:	d11d      	bne.n	8022be8 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8022bac:	68fb      	ldr	r3, [r7, #12]
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	7afa      	ldrb	r2, [r7, #11]
 8022bb2:	211e      	movs	r1, #30
 8022bb4:	4610      	mov	r0, r2
 8022bb6:	4798      	blx	r3
 8022bb8:	4603      	mov	r3, r0
 8022bba:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 8022bbc:	8b7b      	ldrh	r3, [r7, #26]
 8022bbe:	f003 0304 	and.w	r3, r3, #4
 8022bc2:	2b00      	cmp	r3, #0
 8022bc4:	bf14      	ite	ne
 8022bc6:	2301      	movne	r3, #1
 8022bc8:	2300      	moveq	r3, #0
 8022bca:	b2da      	uxtb	r2, r3
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8022bd0:	8b7b      	ldrh	r3, [r7, #26]
 8022bd2:	f003 0303 	and.w	r3, r3, #3
 8022bd6:	2b01      	cmp	r3, #1
 8022bd8:	bf14      	ite	ne
 8022bda:	2301      	movne	r3, #1
 8022bdc:	2300      	moveq	r3, #0
 8022bde:	b2db      	uxtb	r3, r3
 8022be0:	461a      	mov	r2, r3
 8022be2:	683b      	ldr	r3, [r7, #0]
 8022be4:	701a      	strb	r2, [r3, #0]
 8022be6:	e05a      	b.n	8022c9e <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 8022be8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022bea:	2b07      	cmp	r3, #7
 8022bec:	d11a      	bne.n	8022c24 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	7afa      	ldrb	r2, [r7, #11]
 8022bf4:	211f      	movs	r1, #31
 8022bf6:	4610      	mov	r0, r2
 8022bf8:	4798      	blx	r3
 8022bfa:	4603      	mov	r3, r0
 8022bfc:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 8022bfe:	8bbb      	ldrh	r3, [r7, #28]
 8022c00:	f003 0310 	and.w	r3, r3, #16
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	bf14      	ite	ne
 8022c08:	2301      	movne	r3, #1
 8022c0a:	2300      	moveq	r3, #0
 8022c0c:	b2da      	uxtb	r2, r3
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022c12:	8bbb      	ldrh	r3, [r7, #28]
 8022c14:	08db      	lsrs	r3, r3, #3
 8022c16:	b2db      	uxtb	r3, r3
 8022c18:	f003 0301 	and.w	r3, r3, #1
 8022c1c:	b2da      	uxtb	r2, r3
 8022c1e:	683b      	ldr	r3, [r7, #0]
 8022c20:	701a      	strb	r2, [r3, #0]
 8022c22:	e03c      	b.n	8022c9e <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 8022c24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022c26:	2b1c      	cmp	r3, #28
 8022c28:	d11a      	bne.n	8022c60 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	681b      	ldr	r3, [r3, #0]
 8022c2e:	7afa      	ldrb	r2, [r7, #11]
 8022c30:	2100      	movs	r1, #0
 8022c32:	4610      	mov	r0, r2
 8022c34:	4798      	blx	r3
 8022c36:	4603      	mov	r3, r0
 8022c38:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 8022c3a:	8bfb      	ldrh	r3, [r7, #30]
 8022c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	bf14      	ite	ne
 8022c44:	2301      	movne	r3, #1
 8022c46:	2300      	moveq	r3, #0
 8022c48:	b2da      	uxtb	r2, r3
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022c4e:	8bfb      	ldrh	r3, [r7, #30]
 8022c50:	0b5b      	lsrs	r3, r3, #13
 8022c52:	b2db      	uxtb	r3, r3
 8022c54:	f003 0301 	and.w	r3, r3, #1
 8022c58:	b2da      	uxtb	r2, r3
 8022c5a:	683b      	ldr	r3, [r7, #0]
 8022c5c:	701a      	strb	r2, [r3, #0]
 8022c5e:	e01e      	b.n	8022c9e <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 8022c60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022c62:	2b15      	cmp	r3, #21
 8022c64:	d11b      	bne.n	8022c9e <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 8022c66:	68fb      	ldr	r3, [r7, #12]
 8022c68:	681b      	ldr	r3, [r3, #0]
 8022c6a:	7afa      	ldrb	r2, [r7, #11]
 8022c6c:	2111      	movs	r1, #17
 8022c6e:	4610      	mov	r0, r2
 8022c70:	4798      	blx	r3
 8022c72:	4603      	mov	r3, r0
 8022c74:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 8022c76:	8c3b      	ldrh	r3, [r7, #32]
 8022c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022c7c:	2b00      	cmp	r3, #0
 8022c7e:	bf14      	ite	ne
 8022c80:	2301      	movne	r3, #1
 8022c82:	2300      	moveq	r3, #0
 8022c84:	b2da      	uxtb	r2, r3
 8022c86:	687b      	ldr	r3, [r7, #4]
 8022c88:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022c8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022c8e:	13db      	asrs	r3, r3, #15
 8022c90:	b21b      	sxth	r3, r3
 8022c92:	b2db      	uxtb	r3, r3
 8022c94:	f003 0301 	and.w	r3, r3, #1
 8022c98:	b2da      	uxtb	r2, r3
 8022c9a:	683b      	ldr	r3, [r7, #0]
 8022c9c:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8022c9e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8022ca2:	4618      	mov	r0, r3
 8022ca4:	3728      	adds	r7, #40	@ 0x28
 8022ca6:	46bd      	mov	sp, r7
 8022ca8:	bd80      	pop	{r7, pc}
	...

08022cac <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8022cac:	b480      	push	{r7}
 8022cae:	b083      	sub	sp, #12
 8022cb0:	af00      	add	r7, sp, #0
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	460a      	mov	r2, r1
 8022cb6:	71fb      	strb	r3, [r7, #7]
 8022cb8:	4613      	mov	r3, r2
 8022cba:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8022cbc:	4b17      	ldr	r3, [pc, #92]	@ (8022d1c <eth_read_phy+0x70>)
 8022cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022cc2:	4a16      	ldr	r2, [pc, #88]	@ (8022d1c <eth_read_phy+0x70>)
 8022cc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022cc8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8022ccc:	4b13      	ldr	r3, [pc, #76]	@ (8022d1c <eth_read_phy+0x70>)
 8022cce:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8022cd2:	79fb      	ldrb	r3, [r7, #7]
 8022cd4:	0559      	lsls	r1, r3, #21
 8022cd6:	79bb      	ldrb	r3, [r7, #6]
 8022cd8:	041b      	lsls	r3, r3, #16
 8022cda:	430b      	orrs	r3, r1
 8022cdc:	4313      	orrs	r3, r2
 8022cde:	4a0f      	ldr	r2, [pc, #60]	@ (8022d1c <eth_read_phy+0x70>)
 8022ce0:	f043 030c 	orr.w	r3, r3, #12
 8022ce4:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8022ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8022d1c <eth_read_phy+0x70>)
 8022cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022cee:	4a0b      	ldr	r2, [pc, #44]	@ (8022d1c <eth_read_phy+0x70>)
 8022cf0:	f043 0301 	orr.w	r3, r3, #1
 8022cf4:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8022cf8:	bf00      	nop
 8022cfa:	4b08      	ldr	r3, [pc, #32]	@ (8022d1c <eth_read_phy+0x70>)
 8022cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022d00:	f003 0301 	and.w	r3, r3, #1
 8022d04:	2b00      	cmp	r3, #0
 8022d06:	d1f8      	bne.n	8022cfa <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8022d08:	4b04      	ldr	r3, [pc, #16]	@ (8022d1c <eth_read_phy+0x70>)
 8022d0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8022d0e:	b29b      	uxth	r3, r3
}
 8022d10:	4618      	mov	r0, r3
 8022d12:	370c      	adds	r7, #12
 8022d14:	46bd      	mov	sp, r7
 8022d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d1a:	4770      	bx	lr
 8022d1c:	40028000 	.word	0x40028000

08022d20 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8022d20:	b480      	push	{r7}
 8022d22:	b083      	sub	sp, #12
 8022d24:	af00      	add	r7, sp, #0
 8022d26:	4603      	mov	r3, r0
 8022d28:	71fb      	strb	r3, [r7, #7]
 8022d2a:	460b      	mov	r3, r1
 8022d2c:	71bb      	strb	r3, [r7, #6]
 8022d2e:	4613      	mov	r3, r2
 8022d30:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8022d32:	4a18      	ldr	r2, [pc, #96]	@ (8022d94 <eth_write_phy+0x74>)
 8022d34:	88bb      	ldrh	r3, [r7, #4]
 8022d36:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 8022d3a:	4b16      	ldr	r3, [pc, #88]	@ (8022d94 <eth_write_phy+0x74>)
 8022d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022d40:	4a14      	ldr	r2, [pc, #80]	@ (8022d94 <eth_write_phy+0x74>)
 8022d42:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022d46:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 8022d4a:	4b12      	ldr	r3, [pc, #72]	@ (8022d94 <eth_write_phy+0x74>)
 8022d4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8022d50:	79fb      	ldrb	r3, [r7, #7]
 8022d52:	0559      	lsls	r1, r3, #21
 8022d54:	79bb      	ldrb	r3, [r7, #6]
 8022d56:	041b      	lsls	r3, r3, #16
 8022d58:	430b      	orrs	r3, r1
 8022d5a:	4313      	orrs	r3, r2
 8022d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8022d94 <eth_write_phy+0x74>)
 8022d5e:	f043 0304 	orr.w	r3, r3, #4
 8022d62:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8022d66:	4b0b      	ldr	r3, [pc, #44]	@ (8022d94 <eth_write_phy+0x74>)
 8022d68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022d6c:	4a09      	ldr	r2, [pc, #36]	@ (8022d94 <eth_write_phy+0x74>)
 8022d6e:	f043 0301 	orr.w	r3, r3, #1
 8022d72:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8022d76:	bf00      	nop
 8022d78:	4b06      	ldr	r3, [pc, #24]	@ (8022d94 <eth_write_phy+0x74>)
 8022d7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022d7e:	f003 0301 	and.w	r3, r3, #1
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d1f8      	bne.n	8022d78 <eth_write_phy+0x58>
}
 8022d86:	bf00      	nop
 8022d88:	bf00      	nop
 8022d8a:	370c      	adds	r7, #12
 8022d8c:	46bd      	mov	sp, r7
 8022d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d92:	4770      	bx	lr
 8022d94:	40028000 	.word	0x40028000

08022d98 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b08a      	sub	sp, #40	@ 0x28
 8022d9c:	af00      	add	r7, sp, #0
 8022d9e:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022da4:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8022da6:	4a90      	ldr	r2, [pc, #576]	@ (8022fe8 <mg_tcpip_driver_stm32h_init+0x250>)
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8022dac:	69bb      	ldr	r3, [r7, #24]
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d002      	beq.n	8022db8 <mg_tcpip_driver_stm32h_init+0x20>
 8022db2:	69bb      	ldr	r3, [r7, #24]
 8022db4:	791b      	ldrb	r3, [r3, #4]
 8022db6:	e000      	b.n	8022dba <mg_tcpip_driver_stm32h_init+0x22>
 8022db8:	2300      	movs	r3, #0
 8022dba:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8022dbc:	69bb      	ldr	r3, [r7, #24]
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	d002      	beq.n	8022dc8 <mg_tcpip_driver_stm32h_init+0x30>
 8022dc2:	69bb      	ldr	r3, [r7, #24]
 8022dc4:	795b      	ldrb	r3, [r3, #5]
 8022dc6:	e000      	b.n	8022dca <mg_tcpip_driver_stm32h_init+0x32>
 8022dc8:	2302      	movs	r3, #2
 8022dca:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022dcc:	2300      	movs	r3, #0
 8022dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8022dd0:	e017      	b.n	8022e02 <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8022dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022dd4:	f240 6204 	movw	r2, #1540	@ 0x604
 8022dd8:	fb02 f303 	mul.w	r3, r2, r3
 8022ddc:	4a83      	ldr	r2, [pc, #524]	@ (8022fec <mg_tcpip_driver_stm32h_init+0x254>)
 8022dde:	4413      	add	r3, r2
 8022de0:	4619      	mov	r1, r3
 8022de2:	4a83      	ldr	r2, [pc, #524]	@ (8022ff0 <mg_tcpip_driver_stm32h_init+0x258>)
 8022de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022de6:	011b      	lsls	r3, r3, #4
 8022de8:	4413      	add	r3, r2
 8022dea:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8022dec:	4a80      	ldr	r2, [pc, #512]	@ (8022ff0 <mg_tcpip_driver_stm32h_init+0x258>)
 8022dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022df0:	011b      	lsls	r3, r3, #4
 8022df2:	4413      	add	r3, r2
 8022df4:	330c      	adds	r3, #12
 8022df6:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8022dfa:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022dfe:	3301      	adds	r3, #1
 8022e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8022e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e04:	2b03      	cmp	r3, #3
 8022e06:	dde4      	ble.n	8022dd2 <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022e08:	2300      	movs	r3, #0
 8022e0a:	623b      	str	r3, [r7, #32]
 8022e0c:	e00f      	b.n	8022e2e <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8022e0e:	6a3b      	ldr	r3, [r7, #32]
 8022e10:	f240 6204 	movw	r2, #1540	@ 0x604
 8022e14:	fb02 f303 	mul.w	r3, r2, r3
 8022e18:	4a76      	ldr	r2, [pc, #472]	@ (8022ff4 <mg_tcpip_driver_stm32h_init+0x25c>)
 8022e1a:	4413      	add	r3, r2
 8022e1c:	4619      	mov	r1, r3
 8022e1e:	4a76      	ldr	r2, [pc, #472]	@ (8022ff8 <mg_tcpip_driver_stm32h_init+0x260>)
 8022e20:	6a3b      	ldr	r3, [r7, #32]
 8022e22:	011b      	lsls	r3, r3, #4
 8022e24:	4413      	add	r3, r2
 8022e26:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8022e28:	6a3b      	ldr	r3, [r7, #32]
 8022e2a:	3301      	adds	r3, #1
 8022e2c:	623b      	str	r3, [r7, #32]
 8022e2e:	6a3b      	ldr	r3, [r7, #32]
 8022e30:	2b03      	cmp	r3, #3
 8022e32:	ddec      	ble.n	8022e0e <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 8022e34:	4b71      	ldr	r3, [pc, #452]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e3a:	681b      	ldr	r3, [r3, #0]
 8022e3c:	4a6f      	ldr	r2, [pc, #444]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022e3e:	f043 0301 	orr.w	r3, r3, #1
 8022e42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022e46:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 8022e48:	2300      	movs	r3, #0
 8022e4a:	61fb      	str	r3, [r7, #28]
 8022e4c:	e002      	b.n	8022e54 <mg_tcpip_driver_stm32h_init+0xbc>
 8022e4e:	69fb      	ldr	r3, [r7, #28]
 8022e50:	3301      	adds	r3, #1
 8022e52:	61fb      	str	r3, [r7, #28]
 8022e54:	69fb      	ldr	r3, [r7, #28]
 8022e56:	2b03      	cmp	r3, #3
 8022e58:	ddf9      	ble.n	8022e4e <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8022e5a:	bf00      	nop
 8022e5c:	4b67      	ldr	r3, [pc, #412]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e62:	681b      	ldr	r3, [r3, #0]
 8022e64:	f003 0301 	and.w	r3, r3, #1
 8022e68:	2b00      	cmp	r3, #0
 8022e6a:	d1f7      	bne.n	8022e5c <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 8022e6c:	69bb      	ldr	r3, [r7, #24]
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d006      	beq.n	8022e80 <mg_tcpip_driver_stm32h_init+0xe8>
 8022e72:	69bb      	ldr	r3, [r7, #24]
 8022e74:	681b      	ldr	r3, [r3, #0]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	db02      	blt.n	8022e80 <mg_tcpip_driver_stm32h_init+0xe8>
 8022e7a:	69bb      	ldr	r3, [r7, #24]
 8022e7c:	681b      	ldr	r3, [r3, #0]
 8022e7e:	e000      	b.n	8022e82 <mg_tcpip_driver_stm32h_init+0xea>
 8022e80:	2307      	movs	r3, #7
 8022e82:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8022e84:	693b      	ldr	r3, [r7, #16]
 8022e86:	021b      	lsls	r3, r3, #8
 8022e88:	4a5c      	ldr	r2, [pc, #368]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022e8a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022e8e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 8022e92:	4b5a      	ldr	r3, [pc, #360]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022e98:	461a      	mov	r2, r3
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8022e9e:	4b57      	ldr	r3, [pc, #348]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022ea4:	685b      	ldr	r3, [r3, #4]
 8022ea6:	4a55      	ldr	r2, [pc, #340]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8022eac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022eb0:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 8022eb2:	4b52      	ldr	r3, [pc, #328]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022eb4:	2200      	movs	r2, #0
 8022eb6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8022eba:	4b50      	ldr	r3, [pc, #320]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022ebc:	2280      	movs	r2, #128	@ 0x80
 8022ebe:	671a      	str	r2, [r3, #112]	@ 0x70
#if !MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(10);  // Perfect filtering
 8022ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022ec2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8022ec6:	609a      	str	r2, [r3, #8]
#endif
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8022ec8:	4a4d      	ldr	r2, [pc, #308]	@ (8023000 <mg_tcpip_driver_stm32h_init+0x268>)
 8022eca:	f107 0308 	add.w	r3, r7, #8
 8022ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022ed2:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 8022ed6:	7dba      	ldrb	r2, [r7, #22]
 8022ed8:	7df9      	ldrb	r1, [r7, #23]
 8022eda:	f107 0308 	add.w	r3, r7, #8
 8022ede:	4618      	mov	r0, r3
 8022ee0:	f7ff fd16 	bl	8022910 <mg_phy_init>
  ETH->DMACRDLAR =
 8022ee4:	4a45      	ldr	r2, [pc, #276]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8022ee6:	4b42      	ldr	r3, [pc, #264]	@ (8022ff0 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACRDLAR =
 8022ee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022eec:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8022ef0:	4b42      	ldr	r3, [pc, #264]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022ef6:	461a      	mov	r2, r3
 8022ef8:	2303      	movs	r3, #3
 8022efa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8022efe:	4a3f      	ldr	r2, [pc, #252]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8022f00:	4b40      	ldr	r3, [pc, #256]	@ (8023004 <mg_tcpip_driver_stm32h_init+0x26c>)
  ETH->DMACRDTPR =
 8022f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022f06:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 8022f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8022f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8022ff8 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDLAR =
 8022f0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022f12:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 8022f16:	4b39      	ldr	r3, [pc, #228]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022f1c:	461a      	mov	r2, r3
 8022f1e:	2303      	movs	r3, #3
 8022f20:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8022f24:	4a35      	ldr	r2, [pc, #212]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 8022f26:	4b34      	ldr	r3, [pc, #208]	@ (8022ff8 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDTPR =
 8022f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022f2c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8022f30:	4b32      	ldr	r3, [pc, #200]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022f36:	461a      	mov	r2, r3
 8022f38:	2300      	movs	r3, #0
 8022f3a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 8022f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022f44:	461a      	mov	r2, r3
 8022f46:	f248 0340 	movw	r3, #32832	@ 0x8040
 8022f4a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 8022f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f50:	f24e 0203 	movw	r2, #57347	@ 0xe003
 8022f54:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 8022f56:	4b29      	ldr	r3, [pc, #164]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f58:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8022f5c:	4a27      	ldr	r2, [pc, #156]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f5e:	f043 0302 	orr.w	r3, r3, #2
 8022f62:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 8022f66:	4b25      	ldr	r3, [pc, #148]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8022f6c:	4a23      	ldr	r2, [pc, #140]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f6e:	f043 0320 	orr.w	r3, r3, #32
 8022f72:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 8022f76:	4b21      	ldr	r3, [pc, #132]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022f7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8022f80:	4a1e      	ldr	r2, [pc, #120]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f82:	f043 0301 	orr.w	r3, r3, #1
 8022f86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022f8a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8022f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022f94:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8022f98:	4a18      	ldr	r2, [pc, #96]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022f9a:	f043 0301 	orr.w	r3, r3, #1
 8022f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022fa2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	795b      	ldrb	r3, [r3, #5]
 8022faa:	021b      	lsls	r3, r3, #8
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	7912      	ldrb	r2, [r2, #4]
 8022fb0:	4611      	mov	r1, r2
 8022fb2:	4a12      	ldr	r2, [pc, #72]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
 8022fb4:	430b      	orrs	r3, r1
 8022fb6:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	78db      	ldrb	r3, [r3, #3]
 8022fbe:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	789b      	ldrb	r3, [r3, #2]
 8022fc4:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022fc6:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	785b      	ldrb	r3, [r3, #1]
 8022fcc:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8022fce:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8022fd0:	687a      	ldr	r2, [r7, #4]
 8022fd2:	7812      	ldrb	r2, [r2, #0]
 8022fd4:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022fd6:	4a09      	ldr	r2, [pc, #36]	@ (8022ffc <mg_tcpip_driver_stm32h_init+0x264>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8022fd8:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8022fda:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8022fde:	2301      	movs	r3, #1
}
 8022fe0:	4618      	mov	r0, r3
 8022fe2:	3728      	adds	r7, #40	@ 0x28
 8022fe4:	46bd      	mov	sp, r7
 8022fe6:	bd80      	pop	{r7, pc}
 8022fe8:	24005444 	.word	0x24005444
 8022fec:	24002424 	.word	0x24002424
 8022ff0:	240023a4 	.word	0x240023a4
 8022ff4:	24003c34 	.word	0x24003c34
 8022ff8:	240023e4 	.word	0x240023e4
 8022ffc:	40028000 	.word	0x40028000
 8023000:	0802c840 	.word	0x0802c840
 8023004:	240023d4 	.word	0x240023d4

08023008 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8023008:	b580      	push	{r7, lr}
 802300a:	b088      	sub	sp, #32
 802300c:	af02      	add	r7, sp, #8
 802300e:	60f8      	str	r0, [r7, #12]
 8023010:	60b9      	str	r1, [r7, #8]
 8023012:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8023014:	68bb      	ldr	r3, [r7, #8]
 8023016:	f240 6204 	movw	r2, #1540	@ 0x604
 802301a:	4293      	cmp	r3, r2
 802301c:	d912      	bls.n	8023044 <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 802301e:	4b5e      	ldr	r3, [pc, #376]	@ (8023198 <mg_tcpip_driver_stm32h_tx+0x190>)
 8023020:	681b      	ldr	r3, [r3, #0]
 8023022:	2b00      	cmp	r3, #0
 8023024:	dd0b      	ble.n	802303e <mg_tcpip_driver_stm32h_tx+0x36>
 8023026:	4b5d      	ldr	r3, [pc, #372]	@ (802319c <mg_tcpip_driver_stm32h_tx+0x194>)
 8023028:	f645 526f 	movw	r2, #23919	@ 0x5d6f
 802302c:	495c      	ldr	r1, [pc, #368]	@ (80231a0 <mg_tcpip_driver_stm32h_tx+0x198>)
 802302e:	2001      	movs	r0, #1
 8023030:	f7eb fc9c 	bl	800e96c <mg_log_prefix>
 8023034:	68bb      	ldr	r3, [r7, #8]
 8023036:	4619      	mov	r1, r3
 8023038:	485a      	ldr	r0, [pc, #360]	@ (80231a4 <mg_tcpip_driver_stm32h_tx+0x19c>)
 802303a:	f7eb fce7 	bl	800ea0c <mg_log>
    len = 0;  // Frame is too big
 802303e:	2300      	movs	r3, #0
 8023040:	60bb      	str	r3, [r7, #8]
 8023042:	e08d      	b.n	8023160 <mg_tcpip_driver_stm32h_tx+0x158>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 8023044:	4b58      	ldr	r3, [pc, #352]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	4a58      	ldr	r2, [pc, #352]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802304a:	011b      	lsls	r3, r3, #4
 802304c:	4413      	add	r3, r2
 802304e:	330c      	adds	r3, #12
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	2b00      	cmp	r3, #0
 8023054:	da4a      	bge.n	80230ec <mg_tcpip_driver_stm32h_tx+0xe4>
    ifp->nerr++;
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802305c:	1c5a      	adds	r2, r3, #1
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8023064:	4b4c      	ldr	r3, [pc, #304]	@ (8023198 <mg_tcpip_driver_stm32h_tx+0x190>)
 8023066:	681b      	ldr	r3, [r3, #0]
 8023068:	2b00      	cmp	r3, #0
 802306a:	dd1e      	ble.n	80230aa <mg_tcpip_driver_stm32h_tx+0xa2>
 802306c:	4b4b      	ldr	r3, [pc, #300]	@ (802319c <mg_tcpip_driver_stm32h_tx+0x194>)
 802306e:	f645 5273 	movw	r2, #23923	@ 0x5d73
 8023072:	494b      	ldr	r1, [pc, #300]	@ (80231a0 <mg_tcpip_driver_stm32h_tx+0x198>)
 8023074:	2001      	movs	r0, #1
 8023076:	f7eb fc79 	bl	800e96c <mg_log_prefix>
 802307a:	4b4b      	ldr	r3, [pc, #300]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802307c:	6819      	ldr	r1, [r3, #0]
 802307e:	4b4a      	ldr	r3, [pc, #296]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	4a4a      	ldr	r2, [pc, #296]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023084:	011b      	lsls	r3, r3, #4
 8023086:	4413      	add	r3, r2
 8023088:	330c      	adds	r3, #12
 802308a:	681a      	ldr	r2, [r3, #0]
 802308c:	4b48      	ldr	r3, [pc, #288]	@ (80231b0 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 802308e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023092:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 8023096:	4b46      	ldr	r3, [pc, #280]	@ (80231b0 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802309c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80230a0:	9300      	str	r3, [sp, #0]
 80230a2:	4603      	mov	r3, r0
 80230a4:	4843      	ldr	r0, [pc, #268]	@ (80231b4 <mg_tcpip_driver_stm32h_tx+0x1ac>)
 80230a6:	f7eb fcb1 	bl	800ea0c <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 80230aa:	2300      	movs	r3, #0
 80230ac:	617b      	str	r3, [r7, #20]
 80230ae:	e017      	b.n	80230e0 <mg_tcpip_driver_stm32h_tx+0xd8>
 80230b0:	4b39      	ldr	r3, [pc, #228]	@ (8023198 <mg_tcpip_driver_stm32h_tx+0x190>)
 80230b2:	681b      	ldr	r3, [r3, #0]
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	dd10      	ble.n	80230da <mg_tcpip_driver_stm32h_tx+0xd2>
 80230b8:	4b38      	ldr	r3, [pc, #224]	@ (802319c <mg_tcpip_driver_stm32h_tx+0x194>)
 80230ba:	f645 5275 	movw	r2, #23925	@ 0x5d75
 80230be:	4938      	ldr	r1, [pc, #224]	@ (80231a0 <mg_tcpip_driver_stm32h_tx+0x198>)
 80230c0:	2001      	movs	r0, #1
 80230c2:	f7eb fc53 	bl	800e96c <mg_log_prefix>
 80230c6:	4a39      	ldr	r2, [pc, #228]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80230c8:	697b      	ldr	r3, [r7, #20]
 80230ca:	011b      	lsls	r3, r3, #4
 80230cc:	4413      	add	r3, r2
 80230ce:	330c      	adds	r3, #12
 80230d0:	681b      	ldr	r3, [r3, #0]
 80230d2:	4619      	mov	r1, r3
 80230d4:	4838      	ldr	r0, [pc, #224]	@ (80231b8 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 80230d6:	f7eb fc99 	bl	800ea0c <mg_log>
 80230da:	697b      	ldr	r3, [r7, #20]
 80230dc:	3301      	adds	r3, #1
 80230de:	617b      	str	r3, [r7, #20]
 80230e0:	697b      	ldr	r3, [r7, #20]
 80230e2:	2b03      	cmp	r3, #3
 80230e4:	dde4      	ble.n	80230b0 <mg_tcpip_driver_stm32h_tx+0xa8>
    len = 0;  // All descriptors are busy, fail
 80230e6:	2300      	movs	r3, #0
 80230e8:	60bb      	str	r3, [r7, #8]
 80230ea:	e039      	b.n	8023160 <mg_tcpip_driver_stm32h_tx+0x158>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 80230ec:	4b2e      	ldr	r3, [pc, #184]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	f240 6204 	movw	r2, #1540	@ 0x604
 80230f4:	fb02 f303 	mul.w	r3, r2, r3
 80230f8:	4a30      	ldr	r2, [pc, #192]	@ (80231bc <mg_tcpip_driver_stm32h_tx+0x1b4>)
 80230fa:	4413      	add	r3, r2
 80230fc:	68ba      	ldr	r2, [r7, #8]
 80230fe:	68f9      	ldr	r1, [r7, #12]
 8023100:	4618      	mov	r0, r3
 8023102:	f004 fc7e 	bl	8027a02 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 8023106:	4b28      	ldr	r3, [pc, #160]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023108:	681b      	ldr	r3, [r3, #0]
 802310a:	4a28      	ldr	r2, [pc, #160]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802310c:	011b      	lsls	r3, r3, #4
 802310e:	4413      	add	r3, r2
 8023110:	3308      	adds	r3, #8
 8023112:	68ba      	ldr	r2, [r7, #8]
 8023114:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 8023116:	4b24      	ldr	r3, [pc, #144]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	4a24      	ldr	r2, [pc, #144]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802311c:	011b      	lsls	r3, r3, #4
 802311e:	4413      	add	r3, r2
 8023120:	330c      	adds	r3, #12
 8023122:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8023126:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8023128:	4b1f      	ldr	r3, [pc, #124]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	4a1f      	ldr	r2, [pc, #124]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802312e:	011b      	lsls	r3, r3, #4
 8023130:	4413      	add	r3, r2
 8023132:	330c      	adds	r3, #12
 8023134:	681a      	ldr	r2, [r3, #0]
 8023136:	4b1c      	ldr	r3, [pc, #112]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 802313e:	491b      	ldr	r1, [pc, #108]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023140:	011b      	lsls	r3, r3, #4
 8023142:	440b      	add	r3, r1
 8023144:	330c      	adds	r3, #12
 8023146:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8023148:	4b17      	ldr	r3, [pc, #92]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	3301      	adds	r3, #1
 802314e:	4a16      	ldr	r2, [pc, #88]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023150:	6013      	str	r3, [r2, #0]
 8023152:	4b15      	ldr	r3, [pc, #84]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	2b03      	cmp	r3, #3
 8023158:	d902      	bls.n	8023160 <mg_tcpip_driver_stm32h_tx+0x158>
 802315a:	4b13      	ldr	r3, [pc, #76]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802315c:	2200      	movs	r2, #0
 802315e:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 8023160:	4b13      	ldr	r3, [pc, #76]	@ (80231b0 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023166:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 802316a:	4a11      	ldr	r2, [pc, #68]	@ (80231b0 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 802316c:	f043 0306 	orr.w	r3, r3, #6
 8023170:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023174:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 8023178:	4b0b      	ldr	r3, [pc, #44]	@ (80231a8 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802317a:	681b      	ldr	r3, [r3, #0]
 802317c:	011b      	lsls	r3, r3, #4
 802317e:	4a0b      	ldr	r2, [pc, #44]	@ (80231ac <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023180:	441a      	add	r2, r3
 8023182:	4b0b      	ldr	r3, [pc, #44]	@ (80231b0 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023188:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 802318c:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 802318e:	4618      	mov	r0, r3
 8023190:	3718      	adds	r7, #24
 8023192:	46bd      	mov	sp, r7
 8023194:	bd80      	pop	{r7, pc}
 8023196:	bf00      	nop
 8023198:	24000258 	.word	0x24000258
 802319c:	0802ddb4 	.word	0x0802ddb4
 80231a0:	08029e1c 	.word	0x08029e1c
 80231a4:	0802c848 	.word	0x0802c848
 80231a8:	24005448 	.word	0x24005448
 80231ac:	240023e4 	.word	0x240023e4
 80231b0:	40028000 	.word	0x40028000
 80231b4:	0802c85c 	.word	0x0802c85c
 80231b8:	0802c884 	.word	0x0802c884
 80231bc:	24003c34 	.word	0x24003c34

080231c0 <mg_tcpip_driver_stm32h_update_hash_table>:

static void mg_tcpip_driver_stm32h_update_hash_table(struct mg_tcpip_if *ifp) {
 80231c0:	b480      	push	{r7}
 80231c2:	b083      	sub	sp, #12
 80231c4:	af00      	add	r7, sp, #0
 80231c6:	6078      	str	r0, [r7, #4]
#if MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(4);  // Pass Multicast (pass all multicast frames)
#else
  // TODO(): read database, rebuild hash table
  // add mDNS / DNS-SD multicast address
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80231c8:	4b14      	ldr	r3, [pc, #80]	@ (802321c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80231ca:	78db      	ldrb	r3, [r3, #3]
 80231cc:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 80231ce:	4b13      	ldr	r3, [pc, #76]	@ (802321c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80231d0:	789b      	ldrb	r3, [r3, #2]
 80231d2:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80231d4:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 80231d6:	4b11      	ldr	r3, [pc, #68]	@ (802321c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80231d8:	785b      	ldrb	r3, [r3, #1]
 80231da:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 80231dc:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 80231de:	4a0f      	ldr	r2, [pc, #60]	@ (802321c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80231e0:	7812      	ldrb	r2, [r2, #0]
 80231e2:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80231e4:	4a0e      	ldr	r2, [pc, #56]	@ (8023220 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 80231e6:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80231e8:	f8c2 330c 	str.w	r3, [r2, #780]	@ 0x30c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 80231ec:	4b0b      	ldr	r3, [pc, #44]	@ (802321c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80231ee:	795b      	ldrb	r3, [r3, #5]
 80231f0:	021b      	lsls	r3, r3, #8
 80231f2:	4a0a      	ldr	r2, [pc, #40]	@ (802321c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80231f4:	7912      	ldrb	r2, [r2, #4]
 80231f6:	4611      	mov	r1, r2
 80231f8:	4a09      	ldr	r2, [pc, #36]	@ (8023220 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 80231fa:	430b      	orrs	r3, r1
 80231fc:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
  ETH->MACA1HR |= MG_BIT(31);  // AE
 8023200:	4b07      	ldr	r3, [pc, #28]	@ (8023220 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023202:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 8023206:	4a06      	ldr	r2, [pc, #24]	@ (8023220 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023208:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802320c:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
#endif
(void) ifp;
}
 8023210:	bf00      	nop
 8023212:	370c      	adds	r7, #12
 8023214:	46bd      	mov	sp, r7
 8023216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802321a:	4770      	bx	lr
 802321c:	24000260 	.word	0x24000260
 8023220:	40028000 	.word	0x40028000

08023224 <mg_tcpip_driver_stm32h_poll>:

static bool mg_tcpip_driver_stm32h_poll(struct mg_tcpip_if *ifp, bool s1) {
 8023224:	b580      	push	{r7, lr}
 8023226:	b088      	sub	sp, #32
 8023228:	af00      	add	r7, sp, #0
 802322a:	6078      	str	r0, [r7, #4]
 802322c:	460b      	mov	r3, r1
 802322e:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 8023230:	687b      	ldr	r3, [r7, #4]
 8023232:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8023236:	2b00      	cmp	r3, #0
 8023238:	d006      	beq.n	8023248 <mg_tcpip_driver_stm32h_poll+0x24>
    mg_tcpip_driver_stm32h_update_hash_table(ifp);
 802323a:	6878      	ldr	r0, [r7, #4]
 802323c:	f7ff ffc0 	bl	80231c0 <mg_tcpip_driver_stm32h_update_hash_table>
    ifp->update_mac_hash_table = false;
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	2200      	movs	r2, #0
 8023244:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 8023248:	78fb      	ldrb	r3, [r7, #3]
 802324a:	f083 0301 	eor.w	r3, r3, #1
 802324e:	b2db      	uxtb	r3, r3
 8023250:	2b00      	cmp	r3, #0
 8023252:	d001      	beq.n	8023258 <mg_tcpip_driver_stm32h_poll+0x34>
 8023254:	2300      	movs	r3, #0
 8023256:	e063      	b.n	8023320 <mg_tcpip_driver_stm32h_poll+0xfc>
  struct mg_tcpip_driver_stm32h_data *d =
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802325c:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 802325e:	69bb      	ldr	r3, [r7, #24]
 8023260:	2b00      	cmp	r3, #0
 8023262:	d002      	beq.n	802326a <mg_tcpip_driver_stm32h_poll+0x46>
 8023264:	69bb      	ldr	r3, [r7, #24]
 8023266:	791b      	ldrb	r3, [r3, #4]
 8023268:	e000      	b.n	802326c <mg_tcpip_driver_stm32h_poll+0x48>
 802326a:	2300      	movs	r3, #0
 802326c:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 802326e:	2300      	movs	r3, #0
 8023270:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 8023272:	2300      	movs	r3, #0
 8023274:	75bb      	strb	r3, [r7, #22]
 8023276:	2300      	movs	r3, #0
 8023278:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 802327a:	4a2b      	ldr	r2, [pc, #172]	@ (8023328 <mg_tcpip_driver_stm32h_poll+0x104>)
 802327c:	f107 030c 	add.w	r3, r7, #12
 8023280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023284:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 8023288:	f107 0315 	add.w	r3, r7, #21
 802328c:	f107 0214 	add.w	r2, r7, #20
 8023290:	7df9      	ldrb	r1, [r7, #23]
 8023292:	f107 000c 	add.w	r0, r7, #12
 8023296:	f7ff fbf3 	bl	8022a80 <mg_phy_up>
 802329a:	4603      	mov	r3, r0
 802329c:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d13a      	bne.n	802331e <mg_tcpip_driver_stm32h_poll+0xfa>
 80232a8:	7dbb      	ldrb	r3, [r7, #22]
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d037      	beq.n	802331e <mg_tcpip_driver_stm32h_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80232ae:	4b1f      	ldr	r3, [pc, #124]	@ (802332c <mg_tcpip_driver_stm32h_poll+0x108>)
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80232b6:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80232b8:	7d7b      	ldrb	r3, [r7, #21]
 80232ba:	2b00      	cmp	r3, #0
 80232bc:	d103      	bne.n	80232c6 <mg_tcpip_driver_stm32h_poll+0xa2>
 80232be:	69fb      	ldr	r3, [r7, #28]
 80232c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80232c4:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 80232c6:	7d3b      	ldrb	r3, [r7, #20]
 80232c8:	f083 0301 	eor.w	r3, r3, #1
 80232cc:	b2db      	uxtb	r3, r3
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	d003      	beq.n	80232da <mg_tcpip_driver_stm32h_poll+0xb6>
 80232d2:	69fb      	ldr	r3, [r7, #28]
 80232d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80232d8:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80232da:	4a14      	ldr	r2, [pc, #80]	@ (802332c <mg_tcpip_driver_stm32h_poll+0x108>)
 80232dc:	69fb      	ldr	r3, [r7, #28]
 80232de:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80232e0:	4b13      	ldr	r3, [pc, #76]	@ (8023330 <mg_tcpip_driver_stm32h_poll+0x10c>)
 80232e2:	681b      	ldr	r3, [r3, #0]
 80232e4:	2b02      	cmp	r3, #2
 80232e6:	dd1a      	ble.n	802331e <mg_tcpip_driver_stm32h_poll+0xfa>
 80232e8:	4b12      	ldr	r3, [pc, #72]	@ (8023334 <mg_tcpip_driver_stm32h_poll+0x110>)
 80232ea:	f645 52a8 	movw	r2, #23976	@ 0x5da8
 80232ee:	4912      	ldr	r1, [pc, #72]	@ (8023338 <mg_tcpip_driver_stm32h_poll+0x114>)
 80232f0:	2003      	movs	r0, #3
 80232f2:	f7eb fb3b 	bl	800e96c <mg_log_prefix>
 80232f6:	69fb      	ldr	r3, [r7, #28]
 80232f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d001      	beq.n	8023304 <mg_tcpip_driver_stm32h_poll+0xe0>
 8023300:	2164      	movs	r1, #100	@ 0x64
 8023302:	e000      	b.n	8023306 <mg_tcpip_driver_stm32h_poll+0xe2>
 8023304:	210a      	movs	r1, #10
 8023306:	69fb      	ldr	r3, [r7, #28]
 8023308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802330c:	2b00      	cmp	r3, #0
 802330e:	d001      	beq.n	8023314 <mg_tcpip_driver_stm32h_poll+0xf0>
 8023310:	4b0a      	ldr	r3, [pc, #40]	@ (802333c <mg_tcpip_driver_stm32h_poll+0x118>)
 8023312:	e000      	b.n	8023316 <mg_tcpip_driver_stm32h_poll+0xf2>
 8023314:	4b0a      	ldr	r3, [pc, #40]	@ (8023340 <mg_tcpip_driver_stm32h_poll+0x11c>)
 8023316:	461a      	mov	r2, r3
 8023318:	480a      	ldr	r0, [pc, #40]	@ (8023344 <mg_tcpip_driver_stm32h_poll+0x120>)
 802331a:	f7eb fb77 	bl	800ea0c <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 802331e:	7dbb      	ldrb	r3, [r7, #22]
}
 8023320:	4618      	mov	r0, r3
 8023322:	3720      	adds	r7, #32
 8023324:	46bd      	mov	sp, r7
 8023326:	bd80      	pop	{r7, pc}
 8023328:	0802c840 	.word	0x0802c840
 802332c:	40028000 	.word	0x40028000
 8023330:	24000258 	.word	0x24000258
 8023334:	0802ddd0 	.word	0x0802ddd0
 8023338:	08029e1c 	.word	0x08029e1c
 802333c:	0802c88c 	.word	0x0802c88c
 8023340:	0802c894 	.word	0x0802c894
 8023344:	0802c89c 	.word	0x0802c89c

08023348 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8023348:	b580      	push	{r7, lr}
 802334a:	b082      	sub	sp, #8
 802334c:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 802334e:	4b40      	ldr	r3, [pc, #256]	@ (8023450 <ETH_IRQHandler+0x108>)
 8023350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023354:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8023358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802335c:	2b00      	cmp	r3, #0
 802335e:	d065      	beq.n	802342c <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8023360:	4b3b      	ldr	r3, [pc, #236]	@ (8023450 <ETH_IRQHandler+0x108>)
 8023362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023366:	461a      	mov	r2, r3
 8023368:	f248 0340 	movw	r3, #32832	@ 0x8040
 802336c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8023370:	2300      	movs	r3, #0
 8023372:	607b      	str	r3, [r7, #4]
 8023374:	e055      	b.n	8023422 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8023376:	4b37      	ldr	r3, [pc, #220]	@ (8023454 <ETH_IRQHandler+0x10c>)
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	4a37      	ldr	r2, [pc, #220]	@ (8023458 <ETH_IRQHandler+0x110>)
 802337c:	011b      	lsls	r3, r3, #4
 802337e:	4413      	add	r3, r2
 8023380:	330c      	adds	r3, #12
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	2b00      	cmp	r3, #0
 8023386:	db50      	blt.n	802342a <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 8023388:	4b32      	ldr	r3, [pc, #200]	@ (8023454 <ETH_IRQHandler+0x10c>)
 802338a:	681b      	ldr	r3, [r3, #0]
 802338c:	4a32      	ldr	r2, [pc, #200]	@ (8023458 <ETH_IRQHandler+0x110>)
 802338e:	011b      	lsls	r3, r3, #4
 8023390:	4413      	add	r3, r2
 8023392:	330c      	adds	r3, #12
 8023394:	681b      	ldr	r3, [r3, #0]
 8023396:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802339a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802339e:	d128      	bne.n	80233f2 <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 80233a0:	4b2c      	ldr	r3, [pc, #176]	@ (8023454 <ETH_IRQHandler+0x10c>)
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	4a2c      	ldr	r2, [pc, #176]	@ (8023458 <ETH_IRQHandler+0x110>)
 80233a6:	011b      	lsls	r3, r3, #4
 80233a8:	4413      	add	r3, r2
 80233aa:	330c      	adds	r3, #12
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d11d      	bne.n	80233f2 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80233b6:	4b27      	ldr	r3, [pc, #156]	@ (8023454 <ETH_IRQHandler+0x10c>)
 80233b8:	681b      	ldr	r3, [r3, #0]
 80233ba:	4a27      	ldr	r2, [pc, #156]	@ (8023458 <ETH_IRQHandler+0x110>)
 80233bc:	011b      	lsls	r3, r3, #4
 80233be:	4413      	add	r3, r2
 80233c0:	330c      	adds	r3, #12
 80233c2:	681b      	ldr	r3, [r3, #0]
 80233c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80233c8:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80233ca:	4b22      	ldr	r3, [pc, #136]	@ (8023454 <ETH_IRQHandler+0x10c>)
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	f240 6204 	movw	r2, #1540	@ 0x604
 80233d2:	fb02 f303 	mul.w	r3, r2, r3
 80233d6:	4a21      	ldr	r2, [pc, #132]	@ (802345c <ETH_IRQHandler+0x114>)
 80233d8:	1898      	adds	r0, r3, r2
 80233da:	683b      	ldr	r3, [r7, #0]
 80233dc:	2b04      	cmp	r3, #4
 80233de:	d902      	bls.n	80233e6 <ETH_IRQHandler+0x9e>
 80233e0:	683b      	ldr	r3, [r7, #0]
 80233e2:	3b04      	subs	r3, #4
 80233e4:	e000      	b.n	80233e8 <ETH_IRQHandler+0xa0>
 80233e6:	683b      	ldr	r3, [r7, #0]
 80233e8:	4a1d      	ldr	r2, [pc, #116]	@ (8023460 <ETH_IRQHandler+0x118>)
 80233ea:	6812      	ldr	r2, [r2, #0]
 80233ec:	4619      	mov	r1, r3
 80233ee:	f7ef f87b 	bl	80124e8 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80233f2:	4b18      	ldr	r3, [pc, #96]	@ (8023454 <ETH_IRQHandler+0x10c>)
 80233f4:	681b      	ldr	r3, [r3, #0]
 80233f6:	4a18      	ldr	r2, [pc, #96]	@ (8023458 <ETH_IRQHandler+0x110>)
 80233f8:	011b      	lsls	r3, r3, #4
 80233fa:	4413      	add	r3, r2
 80233fc:	330c      	adds	r3, #12
 80233fe:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8023402:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8023404:	4b13      	ldr	r3, [pc, #76]	@ (8023454 <ETH_IRQHandler+0x10c>)
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	3301      	adds	r3, #1
 802340a:	4a12      	ldr	r2, [pc, #72]	@ (8023454 <ETH_IRQHandler+0x10c>)
 802340c:	6013      	str	r3, [r2, #0]
 802340e:	4b11      	ldr	r3, [pc, #68]	@ (8023454 <ETH_IRQHandler+0x10c>)
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	2b03      	cmp	r3, #3
 8023414:	d902      	bls.n	802341c <ETH_IRQHandler+0xd4>
 8023416:	4b0f      	ldr	r3, [pc, #60]	@ (8023454 <ETH_IRQHandler+0x10c>)
 8023418:	2200      	movs	r2, #0
 802341a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	3301      	adds	r3, #1
 8023420:	607b      	str	r3, [r7, #4]
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	2b09      	cmp	r3, #9
 8023426:	d9a6      	bls.n	8023376 <ETH_IRQHandler+0x2e>
 8023428:	e000      	b.n	802342c <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 802342a:	bf00      	nop
    }
  }
  ETH->DMACSR =
 802342c:	4b08      	ldr	r3, [pc, #32]	@ (8023450 <ETH_IRQHandler+0x108>)
 802342e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023432:	461a      	mov	r2, r3
 8023434:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8023438:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 802343c:	4a04      	ldr	r2, [pc, #16]	@ (8023450 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 802343e:	4b09      	ldr	r3, [pc, #36]	@ (8023464 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8023440:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023444:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8023448:	bf00      	nop
 802344a:	3708      	adds	r7, #8
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}
 8023450:	40028000 	.word	0x40028000
 8023454:	2400544c 	.word	0x2400544c
 8023458:	240023a4 	.word	0x240023a4
 802345c:	24002424 	.word	0x24002424
 8023460:	24005444 	.word	0x24005444
 8023464:	240023d4 	.word	0x240023d4

08023468 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1749138029},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8023468:	b480      	push	{r7}
 802346a:	b083      	sub	sp, #12
 802346c:	af00      	add	r7, sp, #0
 802346e:	6078      	str	r0, [r7, #4]
 8023470:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 8023472:	e005      	b.n	8023480 <scmp+0x18>
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	3301      	adds	r3, #1
 8023478:	607b      	str	r3, [r7, #4]
 802347a:	683b      	ldr	r3, [r7, #0]
 802347c:	3301      	adds	r3, #1
 802347e:	603b      	str	r3, [r7, #0]
 8023480:	687b      	ldr	r3, [r7, #4]
 8023482:	781b      	ldrb	r3, [r3, #0]
 8023484:	2b00      	cmp	r3, #0
 8023486:	d005      	beq.n	8023494 <scmp+0x2c>
 8023488:	687b      	ldr	r3, [r7, #4]
 802348a:	781a      	ldrb	r2, [r3, #0]
 802348c:	683b      	ldr	r3, [r7, #0]
 802348e:	781b      	ldrb	r3, [r3, #0]
 8023490:	429a      	cmp	r2, r3
 8023492:	d0ef      	beq.n	8023474 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	781b      	ldrb	r3, [r3, #0]
 8023498:	461a      	mov	r2, r3
 802349a:	683b      	ldr	r3, [r7, #0]
 802349c:	781b      	ldrb	r3, [r3, #0]
 802349e:	1ad3      	subs	r3, r2, r3
}
 80234a0:	4618      	mov	r0, r3
 80234a2:	370c      	adds	r7, #12
 80234a4:	46bd      	mov	sp, r7
 80234a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234aa:	4770      	bx	lr

080234ac <mg_unlist>:
const char *mg_unlist(size_t no) {
 80234ac:	b480      	push	{r7}
 80234ae:	b083      	sub	sp, #12
 80234b0:	af00      	add	r7, sp, #0
 80234b2:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 80234b4:	4906      	ldr	r1, [pc, #24]	@ (80234d0 <mg_unlist+0x24>)
 80234b6:	687a      	ldr	r2, [r7, #4]
 80234b8:	4613      	mov	r3, r2
 80234ba:	005b      	lsls	r3, r3, #1
 80234bc:	4413      	add	r3, r2
 80234be:	00db      	lsls	r3, r3, #3
 80234c0:	440b      	add	r3, r1
 80234c2:	681b      	ldr	r3, [r3, #0]
}
 80234c4:	4618      	mov	r0, r3
 80234c6:	370c      	adds	r7, #12
 80234c8:	46bd      	mov	sp, r7
 80234ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234ce:	4770      	bx	lr
 80234d0:	0803aed8 	.word	0x0803aed8

080234d4 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 80234d4:	b580      	push	{r7, lr}
 80234d6:	b086      	sub	sp, #24
 80234d8:	af00      	add	r7, sp, #0
 80234da:	60f8      	str	r0, [r7, #12]
 80234dc:	60b9      	str	r1, [r7, #8]
 80234de:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 80234e0:	4b16      	ldr	r3, [pc, #88]	@ (802353c <mg_unpack+0x68>)
 80234e2:	617b      	str	r3, [r7, #20]
 80234e4:	e020      	b.n	8023528 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 80234e6:	697b      	ldr	r3, [r7, #20]
 80234e8:	681b      	ldr	r3, [r3, #0]
 80234ea:	68f9      	ldr	r1, [r7, #12]
 80234ec:	4618      	mov	r0, r3
 80234ee:	f7ff ffbb 	bl	8023468 <scmp>
 80234f2:	4603      	mov	r3, r0
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d113      	bne.n	8023520 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 80234f8:	68bb      	ldr	r3, [r7, #8]
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d004      	beq.n	8023508 <mg_unpack+0x34>
 80234fe:	697b      	ldr	r3, [r7, #20]
 8023500:	689b      	ldr	r3, [r3, #8]
 8023502:	1e5a      	subs	r2, r3, #1
 8023504:	68bb      	ldr	r3, [r7, #8]
 8023506:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	2b00      	cmp	r3, #0
 802350c:	d005      	beq.n	802351a <mg_unpack+0x46>
 802350e:	697b      	ldr	r3, [r7, #20]
 8023510:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8023514:	6879      	ldr	r1, [r7, #4]
 8023516:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 802351a:	697b      	ldr	r3, [r7, #20]
 802351c:	685b      	ldr	r3, [r3, #4]
 802351e:	e008      	b.n	8023532 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8023520:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8023522:	697b      	ldr	r3, [r7, #20]
 8023524:	3318      	adds	r3, #24
 8023526:	617b      	str	r3, [r7, #20]
 8023528:	697b      	ldr	r3, [r7, #20]
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	2b00      	cmp	r3, #0
 802352e:	d1da      	bne.n	80234e6 <mg_unpack+0x12>
  }
  return NULL;
 8023530:	2300      	movs	r3, #0
}
 8023532:	4618      	mov	r0, r3
 8023534:	3718      	adds	r7, #24
 8023536:	46bd      	mov	sp, r7
 8023538:	bd80      	pop	{r7, pc}
 802353a:	bf00      	nop
 802353c:	0803aed8 	.word	0x0803aed8

08023540 <glue_modbus_read_reg>:

// Read/write registers via Modbus API
// Return true if the register is read/written successfully, false otherwise
// The address is a 16-bit unsigned integer, the value is also a 16-bit unsigned integer
// The address is in the range [s_modbus_base, s_modbus_base + count), where count is the number of registers
bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8023540:	b580      	push	{r7, lr}
 8023542:	b084      	sub	sp, #16
 8023544:	af00      	add	r7, sp, #0
 8023546:	4603      	mov	r3, r0
 8023548:	6039      	str	r1, [r7, #0]
 802354a:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 802354c:	2300      	movs	r3, #0
 802354e:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8023550:	23e1      	movs	r3, #225	@ 0xe1
 8023552:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8023554:	4b19      	ldr	r3, [pc, #100]	@ (80235bc <glue_modbus_read_reg+0x7c>)
 8023556:	881b      	ldrh	r3, [r3, #0]
 8023558:	88fa      	ldrh	r2, [r7, #6]
 802355a:	429a      	cmp	r2, r3
 802355c:	d312      	bcc.n	8023584 <glue_modbus_read_reg+0x44>
 802355e:	88fa      	ldrh	r2, [r7, #6]
 8023560:	4b16      	ldr	r3, [pc, #88]	@ (80235bc <glue_modbus_read_reg+0x7c>)
 8023562:	881b      	ldrh	r3, [r3, #0]
 8023564:	4619      	mov	r1, r3
 8023566:	68bb      	ldr	r3, [r7, #8]
 8023568:	440b      	add	r3, r1
 802356a:	429a      	cmp	r2, r3
 802356c:	d20a      	bcs.n	8023584 <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 802356e:	88fb      	ldrh	r3, [r7, #6]
 8023570:	4a12      	ldr	r2, [pc, #72]	@ (80235bc <glue_modbus_read_reg+0x7c>)
 8023572:	8812      	ldrh	r2, [r2, #0]
 8023574:	1a9b      	subs	r3, r3, r2
 8023576:	4a12      	ldr	r2, [pc, #72]	@ (80235c0 <glue_modbus_read_reg+0x80>)
 8023578:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802357c:	683b      	ldr	r3, [r7, #0]
 802357e:	801a      	strh	r2, [r3, #0]
    success = true;
 8023580:	2301      	movs	r3, #1
 8023582:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Read OK" : "Read FAIL", address, *value));
 8023584:	4b0f      	ldr	r3, [pc, #60]	@ (80235c4 <glue_modbus_read_reg+0x84>)
 8023586:	681b      	ldr	r3, [r3, #0]
 8023588:	2b01      	cmp	r3, #1
 802358a:	dd11      	ble.n	80235b0 <glue_modbus_read_reg+0x70>
 802358c:	4b0e      	ldr	r3, [pc, #56]	@ (80235c8 <glue_modbus_read_reg+0x88>)
 802358e:	221a      	movs	r2, #26
 8023590:	490e      	ldr	r1, [pc, #56]	@ (80235cc <glue_modbus_read_reg+0x8c>)
 8023592:	2002      	movs	r0, #2
 8023594:	f7eb f9ea 	bl	800e96c <mg_log_prefix>
 8023598:	7bfb      	ldrb	r3, [r7, #15]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d001      	beq.n	80235a2 <glue_modbus_read_reg+0x62>
 802359e:	490c      	ldr	r1, [pc, #48]	@ (80235d0 <glue_modbus_read_reg+0x90>)
 80235a0:	e000      	b.n	80235a4 <glue_modbus_read_reg+0x64>
 80235a2:	490c      	ldr	r1, [pc, #48]	@ (80235d4 <glue_modbus_read_reg+0x94>)
 80235a4:	88fa      	ldrh	r2, [r7, #6]
 80235a6:	683b      	ldr	r3, [r7, #0]
 80235a8:	881b      	ldrh	r3, [r3, #0]
 80235aa:	480b      	ldr	r0, [pc, #44]	@ (80235d8 <glue_modbus_read_reg+0x98>)
 80235ac:	f7eb fa2e 	bl	800ea0c <mg_log>
  return success;
 80235b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80235b2:	4618      	mov	r0, r3
 80235b4:	3710      	adds	r7, #16
 80235b6:	46bd      	mov	sp, r7
 80235b8:	bd80      	pop	{r7, pc}
 80235ba:	bf00      	nop
 80235bc:	240002b0 	.word	0x240002b0
 80235c0:	240054e4 	.word	0x240054e4
 80235c4:	24000258 	.word	0x24000258
 80235c8:	0803af08 	.word	0x0803af08
 80235cc:	0802c8cc 	.word	0x0802c8cc
 80235d0:	0802c8e8 	.word	0x0802c8e8
 80235d4:	0802c8f0 	.word	0x0802c8f0
 80235d8:	0802c8fc 	.word	0x0802c8fc

080235dc <glue_modbus_write_reg>:

void ws_voltage(struct mg_connection *c) {
  mg_ws_printf(c, WEBSOCKET_OP_TEXT, "{%m: %u}", MG_ESC("voltage"), glue_get_local_reg(1010));
}

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 80235dc:	b580      	push	{r7, lr}
 80235de:	b084      	sub	sp, #16
 80235e0:	af00      	add	r7, sp, #0
 80235e2:	4603      	mov	r3, r0
 80235e4:	460a      	mov	r2, r1
 80235e6:	80fb      	strh	r3, [r7, #6]
 80235e8:	4613      	mov	r3, r2
 80235ea:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 80235ec:	2300      	movs	r3, #0
 80235ee:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 80235f0:	23e1      	movs	r3, #225	@ 0xe1
 80235f2:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 80235f4:	4b18      	ldr	r3, [pc, #96]	@ (8023658 <glue_modbus_write_reg+0x7c>)
 80235f6:	881b      	ldrh	r3, [r3, #0]
 80235f8:	88fa      	ldrh	r2, [r7, #6]
 80235fa:	429a      	cmp	r2, r3
 80235fc:	d311      	bcc.n	8023622 <glue_modbus_write_reg+0x46>
 80235fe:	88fa      	ldrh	r2, [r7, #6]
 8023600:	4b15      	ldr	r3, [pc, #84]	@ (8023658 <glue_modbus_write_reg+0x7c>)
 8023602:	881b      	ldrh	r3, [r3, #0]
 8023604:	4619      	mov	r1, r3
 8023606:	68bb      	ldr	r3, [r7, #8]
 8023608:	440b      	add	r3, r1
 802360a:	429a      	cmp	r2, r3
 802360c:	d209      	bcs.n	8023622 <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 802360e:	88fb      	ldrh	r3, [r7, #6]
 8023610:	4a11      	ldr	r2, [pc, #68]	@ (8023658 <glue_modbus_write_reg+0x7c>)
 8023612:	8812      	ldrh	r2, [r2, #0]
 8023614:	1a9b      	subs	r3, r3, r2
 8023616:	4911      	ldr	r1, [pc, #68]	@ (802365c <glue_modbus_write_reg+0x80>)
 8023618:	88ba      	ldrh	r2, [r7, #4]
 802361a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 802361e:	2301      	movs	r3, #1
 8023620:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Write OK" : "Write FAIL", address, value));
 8023622:	4b0f      	ldr	r3, [pc, #60]	@ (8023660 <glue_modbus_write_reg+0x84>)
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	2b01      	cmp	r3, #1
 8023628:	dd10      	ble.n	802364c <glue_modbus_write_reg+0x70>
 802362a:	4b0e      	ldr	r3, [pc, #56]	@ (8023664 <glue_modbus_write_reg+0x88>)
 802362c:	2229      	movs	r2, #41	@ 0x29
 802362e:	490e      	ldr	r1, [pc, #56]	@ (8023668 <glue_modbus_write_reg+0x8c>)
 8023630:	2002      	movs	r0, #2
 8023632:	f7eb f99b 	bl	800e96c <mg_log_prefix>
 8023636:	7bfb      	ldrb	r3, [r7, #15]
 8023638:	2b00      	cmp	r3, #0
 802363a:	d001      	beq.n	8023640 <glue_modbus_write_reg+0x64>
 802363c:	490b      	ldr	r1, [pc, #44]	@ (802366c <glue_modbus_write_reg+0x90>)
 802363e:	e000      	b.n	8023642 <glue_modbus_write_reg+0x66>
 8023640:	490b      	ldr	r1, [pc, #44]	@ (8023670 <glue_modbus_write_reg+0x94>)
 8023642:	88fa      	ldrh	r2, [r7, #6]
 8023644:	88bb      	ldrh	r3, [r7, #4]
 8023646:	480b      	ldr	r0, [pc, #44]	@ (8023674 <glue_modbus_write_reg+0x98>)
 8023648:	f7eb f9e0 	bl	800ea0c <mg_log>
  return success;
 802364c:	7bfb      	ldrb	r3, [r7, #15]

}
 802364e:	4618      	mov	r0, r3
 8023650:	3710      	adds	r7, #16
 8023652:	46bd      	mov	sp, r7
 8023654:	bd80      	pop	{r7, pc}
 8023656:	bf00      	nop
 8023658:	240002b0 	.word	0x240002b0
 802365c:	240054e4 	.word	0x240054e4
 8023660:	24000258 	.word	0x24000258
 8023664:	0803af20 	.word	0x0803af20
 8023668:	0802c8cc 	.word	0x0802c8cc
 802366c:	0802c920 	.word	0x0802c920
 8023670:	0802c92c 	.word	0x0802c92c
 8023674:	0802c8fc 	.word	0x0802c8fc

08023678 <glue_get_local_reg>:

uint16_t glue_get_local_reg(uint16_t address) {
 8023678:	b480      	push	{r7}
 802367a:	b085      	sub	sp, #20
 802367c:	af00      	add	r7, sp, #0
 802367e:	4603      	mov	r3, r0
 8023680:	80fb      	strh	r3, [r7, #6]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8023682:	23e1      	movs	r3, #225	@ 0xe1
 8023684:	60fb      	str	r3, [r7, #12]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8023686:	4b0e      	ldr	r3, [pc, #56]	@ (80236c0 <glue_get_local_reg+0x48>)
 8023688:	881b      	ldrh	r3, [r3, #0]
 802368a:	88fa      	ldrh	r2, [r7, #6]
 802368c:	429a      	cmp	r2, r3
 802368e:	d30f      	bcc.n	80236b0 <glue_get_local_reg+0x38>
 8023690:	88fa      	ldrh	r2, [r7, #6]
 8023692:	4b0b      	ldr	r3, [pc, #44]	@ (80236c0 <glue_get_local_reg+0x48>)
 8023694:	881b      	ldrh	r3, [r3, #0]
 8023696:	4619      	mov	r1, r3
 8023698:	68fb      	ldr	r3, [r7, #12]
 802369a:	440b      	add	r3, r1
 802369c:	429a      	cmp	r2, r3
 802369e:	d207      	bcs.n	80236b0 <glue_get_local_reg+0x38>
    return s_modbus_regs[address - s_modbus_base];
 80236a0:	88fb      	ldrh	r3, [r7, #6]
 80236a2:	4a07      	ldr	r2, [pc, #28]	@ (80236c0 <glue_get_local_reg+0x48>)
 80236a4:	8812      	ldrh	r2, [r2, #0]
 80236a6:	1a9b      	subs	r3, r3, r2
 80236a8:	4a06      	ldr	r2, [pc, #24]	@ (80236c4 <glue_get_local_reg+0x4c>)
 80236aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80236ae:	e000      	b.n	80236b2 <glue_get_local_reg+0x3a>
  }
  return 0;
 80236b0:	2300      	movs	r3, #0
}
 80236b2:	4618      	mov	r0, r3
 80236b4:	3714      	adds	r7, #20
 80236b6:	46bd      	mov	sp, r7
 80236b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236bc:	4770      	bx	lr
 80236be:	bf00      	nop
 80236c0:	240002b0 	.word	0x240002b0
 80236c4:	240054e4 	.word	0x240054e4

080236c8 <glue_authenticate>:
  return true;
}
// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 80236c8:	b580      	push	{r7, lr}
 80236ca:	b084      	sub	sp, #16
 80236cc:	af00      	add	r7, sp, #0
 80236ce:	6078      	str	r0, [r7, #4]
 80236d0:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 80236d2:	2300      	movs	r3, #0
 80236d4:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "admin") == 0 && strcmp(pass, "admin") == 0) {
 80236d6:	4913      	ldr	r1, [pc, #76]	@ (8023724 <glue_authenticate+0x5c>)
 80236d8:	6878      	ldr	r0, [r7, #4]
 80236da:	f7dc fe19 	bl	8000310 <strcmp>
 80236de:	4603      	mov	r3, r0
 80236e0:	2b00      	cmp	r3, #0
 80236e2:	d109      	bne.n	80236f8 <glue_authenticate+0x30>
 80236e4:	490f      	ldr	r1, [pc, #60]	@ (8023724 <glue_authenticate+0x5c>)
 80236e6:	6838      	ldr	r0, [r7, #0]
 80236e8:	f7dc fe12 	bl	8000310 <strcmp>
 80236ec:	4603      	mov	r3, r0
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d102      	bne.n	80236f8 <glue_authenticate+0x30>
    level = 7;  // Administrator
 80236f2:	2307      	movs	r3, #7
 80236f4:	60fb      	str	r3, [r7, #12]
 80236f6:	e00f      	b.n	8023718 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 80236f8:	490b      	ldr	r1, [pc, #44]	@ (8023728 <glue_authenticate+0x60>)
 80236fa:	6878      	ldr	r0, [r7, #4]
 80236fc:	f7dc fe08 	bl	8000310 <strcmp>
 8023700:	4603      	mov	r3, r0
 8023702:	2b00      	cmp	r3, #0
 8023704:	d108      	bne.n	8023718 <glue_authenticate+0x50>
 8023706:	4908      	ldr	r1, [pc, #32]	@ (8023728 <glue_authenticate+0x60>)
 8023708:	6838      	ldr	r0, [r7, #0]
 802370a:	f7dc fe01 	bl	8000310 <strcmp>
 802370e:	4603      	mov	r3, r0
 8023710:	2b00      	cmp	r3, #0
 8023712:	d101      	bne.n	8023718 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8023714:	2303      	movs	r3, #3
 8023716:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8023718:	68fb      	ldr	r3, [r7, #12]
}
 802371a:	4618      	mov	r0, r3
 802371c:	3710      	adds	r7, #16
 802371e:	46bd      	mov	sp, r7
 8023720:	bd80      	pop	{r7, pc}
 8023722:	bf00      	nop
 8023724:	0802c938 	.word	0x0802c938
 8023728:	0802c940 	.word	0x0802c940

0802372c <glue_check_reboot>:

static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 802372c:	b580      	push	{r7, lr}
 802372e:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8023730:	f7f3 f8f6 	bl	8016920 <mg_now>
 8023734:	4b05      	ldr	r3, [pc, #20]	@ (802374c <glue_check_reboot+0x20>)
 8023736:	e9d3 2300 	ldrd	r2, r3, [r3]
 802373a:	4290      	cmp	r0, r2
 802373c:	eb71 0303 	sbcs.w	r3, r1, r3
 8023740:	bf34      	ite	cc
 8023742:	2301      	movcc	r3, #1
 8023744:	2300      	movcs	r3, #0
 8023746:	b2db      	uxtb	r3, r3
}
 8023748:	4618      	mov	r0, r3
 802374a:	bd80      	pop	{r7, pc}
 802374c:	240056a8 	.word	0x240056a8

08023750 <glue_start_reboot>:
void glue_start_reboot(struct mg_str params) {
 8023750:	b5b0      	push	{r4, r5, r7, lr}
 8023752:	b082      	sub	sp, #8
 8023754:	af00      	add	r7, sp, #0
 8023756:	463b      	mov	r3, r7
 8023758:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 802375c:	4b0f      	ldr	r3, [pc, #60]	@ (802379c <glue_start_reboot+0x4c>)
 802375e:	681b      	ldr	r3, [r3, #0]
 8023760:	2b02      	cmp	r3, #2
 8023762:	dd0b      	ble.n	802377c <glue_start_reboot+0x2c>
 8023764:	4b0e      	ldr	r3, [pc, #56]	@ (80237a0 <glue_start_reboot+0x50>)
 8023766:	224e      	movs	r2, #78	@ 0x4e
 8023768:	490e      	ldr	r1, [pc, #56]	@ (80237a4 <glue_start_reboot+0x54>)
 802376a:	2003      	movs	r0, #3
 802376c:	f7eb f8fe 	bl	800e96c <mg_log_prefix>
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	683a      	ldr	r2, [r7, #0]
 8023774:	4619      	mov	r1, r3
 8023776:	480c      	ldr	r0, [pc, #48]	@ (80237a8 <glue_start_reboot+0x58>)
 8023778:	f7eb f948 	bl	800ea0c <mg_log>
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 802377c:	f7f3 f8d0 	bl	8016920 <mg_now>
 8023780:	4602      	mov	r2, r0
 8023782:	460b      	mov	r3, r1
 8023784:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8023788:	f143 0500 	adc.w	r5, r3, #0
 802378c:	4b07      	ldr	r3, [pc, #28]	@ (80237ac <glue_start_reboot+0x5c>)
 802378e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8023792:	bf00      	nop
 8023794:	3708      	adds	r7, #8
 8023796:	46bd      	mov	sp, r7
 8023798:	bdb0      	pop	{r4, r5, r7, pc}
 802379a:	bf00      	nop
 802379c:	24000258 	.word	0x24000258
 80237a0:	0803af38 	.word	0x0803af38
 80237a4:	0802c8cc 	.word	0x0802c8cc
 80237a8:	0802c948 	.word	0x0802c948
 80237ac:	240056a8 	.word	0x240056a8

080237b0 <glue_check_reformat>:

static uint64_t s_action_timeout_reformat;  // Time when reformat ends
bool glue_check_reformat(void) {
 80237b0:	b580      	push	{r7, lr}
 80237b2:	af00      	add	r7, sp, #0
  return s_action_timeout_reformat > mg_now(); // Return true if reformat is in progress
 80237b4:	f7f3 f8b4 	bl	8016920 <mg_now>
 80237b8:	4b05      	ldr	r3, [pc, #20]	@ (80237d0 <glue_check_reformat+0x20>)
 80237ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237be:	4290      	cmp	r0, r2
 80237c0:	eb71 0303 	sbcs.w	r3, r1, r3
 80237c4:	bf34      	ite	cc
 80237c6:	2301      	movcc	r3, #1
 80237c8:	2300      	movcs	r3, #0
 80237ca:	b2db      	uxtb	r3, r3
}
 80237cc:	4618      	mov	r0, r3
 80237ce:	bd80      	pop	{r7, pc}
 80237d0:	240056b0 	.word	0x240056b0

080237d4 <glue_start_reformat>:
void glue_start_reformat(struct mg_str params) {
 80237d4:	b5b0      	push	{r4, r5, r7, lr}
 80237d6:	b082      	sub	sp, #8
 80237d8:	af00      	add	r7, sp, #0
 80237da:	463b      	mov	r3, r7
 80237dc:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 80237e0:	4b0f      	ldr	r3, [pc, #60]	@ (8023820 <glue_start_reformat+0x4c>)
 80237e2:	681b      	ldr	r3, [r3, #0]
 80237e4:	2b02      	cmp	r3, #2
 80237e6:	dd0b      	ble.n	8023800 <glue_start_reformat+0x2c>
 80237e8:	4b0e      	ldr	r3, [pc, #56]	@ (8023824 <glue_start_reformat+0x50>)
 80237ea:	2257      	movs	r2, #87	@ 0x57
 80237ec:	490e      	ldr	r1, [pc, #56]	@ (8023828 <glue_start_reformat+0x54>)
 80237ee:	2003      	movs	r0, #3
 80237f0:	f7eb f8bc 	bl	800e96c <mg_log_prefix>
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	683a      	ldr	r2, [r7, #0]
 80237f8:	4619      	mov	r1, r3
 80237fa:	480c      	ldr	r0, [pc, #48]	@ (802382c <glue_start_reformat+0x58>)
 80237fc:	f7eb f906 	bl	800ea0c <mg_log>
  s_action_timeout_reformat = mg_now() + 1000; // Start reformat, finish after 1 second
 8023800:	f7f3 f88e 	bl	8016920 <mg_now>
 8023804:	4602      	mov	r2, r0
 8023806:	460b      	mov	r3, r1
 8023808:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 802380c:	f143 0500 	adc.w	r5, r3, #0
 8023810:	4b07      	ldr	r3, [pc, #28]	@ (8023830 <glue_start_reformat+0x5c>)
 8023812:	e9c3 4500 	strd	r4, r5, [r3]
}
 8023816:	bf00      	nop
 8023818:	3708      	adds	r7, #8
 802381a:	46bd      	mov	sp, r7
 802381c:	bdb0      	pop	{r4, r5, r7, pc}
 802381e:	bf00      	nop
 8023820:	24000258 	.word	0x24000258
 8023824:	0803af4c 	.word	0x0803af4c
 8023828:	0802c8cc 	.word	0x0802c8cc
 802382c:	0802c948 	.word	0x0802c948
 8023830:	240056b0 	.word	0x240056b0

08023834 <glue_ota_begin_firmware_update>:

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8023834:	b580      	push	{r7, lr}
 8023836:	b084      	sub	sp, #16
 8023838:	af00      	add	r7, sp, #0
 802383a:	6078      	str	r0, [r7, #4]
 802383c:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 802383e:	6838      	ldr	r0, [r7, #0]
 8023840:	f7ef fbb8 	bl	8012fb4 <mg_ota_begin>
 8023844:	4603      	mov	r3, r0
 8023846:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8023848:	4b0c      	ldr	r3, [pc, #48]	@ (802387c <glue_ota_begin_firmware_update+0x48>)
 802384a:	681b      	ldr	r3, [r3, #0]
 802384c:	2b02      	cmp	r3, #2
 802384e:	dd0b      	ble.n	8023868 <glue_ota_begin_firmware_update+0x34>
 8023850:	4b0b      	ldr	r3, [pc, #44]	@ (8023880 <glue_ota_begin_firmware_update+0x4c>)
 8023852:	225d      	movs	r2, #93	@ 0x5d
 8023854:	490b      	ldr	r1, [pc, #44]	@ (8023884 <glue_ota_begin_firmware_update+0x50>)
 8023856:	2003      	movs	r0, #3
 8023858:	f7eb f888 	bl	800e96c <mg_log_prefix>
 802385c:	7bfb      	ldrb	r3, [r7, #15]
 802385e:	683a      	ldr	r2, [r7, #0]
 8023860:	6879      	ldr	r1, [r7, #4]
 8023862:	4809      	ldr	r0, [pc, #36]	@ (8023888 <glue_ota_begin_firmware_update+0x54>)
 8023864:	f7eb f8d2 	bl	800ea0c <mg_log>
  return ok ? (void *) 1 : NULL;
 8023868:	7bfb      	ldrb	r3, [r7, #15]
 802386a:	2b00      	cmp	r3, #0
 802386c:	d001      	beq.n	8023872 <glue_ota_begin_firmware_update+0x3e>
 802386e:	2301      	movs	r3, #1
 8023870:	e000      	b.n	8023874 <glue_ota_begin_firmware_update+0x40>
 8023872:	2300      	movs	r3, #0
}
 8023874:	4618      	mov	r0, r3
 8023876:	3710      	adds	r7, #16
 8023878:	46bd      	mov	sp, r7
 802387a:	bd80      	pop	{r7, pc}
 802387c:	24000258 	.word	0x24000258
 8023880:	0803af60 	.word	0x0803af60
 8023884:	0802c8cc 	.word	0x0802c8cc
 8023888:	0802c964 	.word	0x0802c964

0802388c <glue_ota_end_firmware_update>:
bool glue_ota_end_firmware_update(void *context) {
 802388c:	b580      	push	{r7, lr}
 802388e:	b086      	sub	sp, #24
 8023890:	af04      	add	r7, sp, #16
 8023892:	6078      	str	r0, [r7, #4]
  mg_timer_add(&g_mgr, 500, 0, (void (*)(void *)) (void *) mg_ota_end, context);
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	9302      	str	r3, [sp, #8]
 8023898:	4b07      	ldr	r3, [pc, #28]	@ (80238b8 <glue_ota_end_firmware_update+0x2c>)
 802389a:	9301      	str	r3, [sp, #4]
 802389c:	2300      	movs	r3, #0
 802389e:	9300      	str	r3, [sp, #0]
 80238a0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80238a4:	f04f 0300 	mov.w	r3, #0
 80238a8:	4804      	ldr	r0, [pc, #16]	@ (80238bc <glue_ota_end_firmware_update+0x30>)
 80238aa:	f7eb fe21 	bl	800f4f0 <mg_timer_add>
  return true;
 80238ae:	2301      	movs	r3, #1
}
 80238b0:	4618      	mov	r0, r3
 80238b2:	3708      	adds	r7, #8
 80238b4:	46bd      	mov	sp, r7
 80238b6:	bd80      	pop	{r7, pc}
 80238b8:	08013005 	.word	0x08013005
 80238bc:	240056b8 	.word	0x240056b8

080238c0 <glue_ota_write_firmware_update>:
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 80238c0:	b580      	push	{r7, lr}
 80238c2:	b084      	sub	sp, #16
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	60f8      	str	r0, [r7, #12]
 80238c8:	60b9      	str	r1, [r7, #8]
 80238ca:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 80238cc:	4b0c      	ldr	r3, [pc, #48]	@ (8023900 <glue_ota_write_firmware_update+0x40>)
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	2b02      	cmp	r3, #2
 80238d2:	dd0b      	ble.n	80238ec <glue_ota_write_firmware_update+0x2c>
 80238d4:	4b0b      	ldr	r3, [pc, #44]	@ (8023904 <glue_ota_write_firmware_update+0x44>)
 80238d6:	2265      	movs	r2, #101	@ 0x65
 80238d8:	490b      	ldr	r1, [pc, #44]	@ (8023908 <glue_ota_write_firmware_update+0x48>)
 80238da:	2003      	movs	r0, #3
 80238dc:	f7eb f846 	bl	800e96c <mg_log_prefix>
 80238e0:	687b      	ldr	r3, [r7, #4]
 80238e2:	68ba      	ldr	r2, [r7, #8]
 80238e4:	68f9      	ldr	r1, [r7, #12]
 80238e6:	4809      	ldr	r0, [pc, #36]	@ (802390c <glue_ota_write_firmware_update+0x4c>)
 80238e8:	f7eb f890 	bl	800ea0c <mg_log>
  return mg_ota_write(buf, len);
 80238ec:	6879      	ldr	r1, [r7, #4]
 80238ee:	68b8      	ldr	r0, [r7, #8]
 80238f0:	f7ef fb76 	bl	8012fe0 <mg_ota_write>
 80238f4:	4603      	mov	r3, r0
}
 80238f6:	4618      	mov	r0, r3
 80238f8:	3710      	adds	r7, #16
 80238fa:	46bd      	mov	sp, r7
 80238fc:	bd80      	pop	{r7, pc}
 80238fe:	bf00      	nop
 8023900:	24000258 	.word	0x24000258
 8023904:	0803af80 	.word	0x0803af80
 8023908:	0802c8cc 	.word	0x0802c8cc
 802390c:	0802c978 	.word	0x0802c978

08023910 <glue_upload_open_file_upload>:

void *glue_upload_open_file_upload(char *file_name, size_t total_size) {
 8023910:	b580      	push	{r7, lr}
 8023912:	b0a4      	sub	sp, #144	@ 0x90
 8023914:	af00      	add	r7, sp, #0
 8023916:	6078      	str	r0, [r7, #4]
 8023918:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 802391a:	2300      	movs	r3, #0
 802391c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8023920:	2300      	movs	r3, #0
 8023922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 8023926:	212f      	movs	r1, #47	@ 0x2f
 8023928:	6878      	ldr	r0, [r7, #4]
 802392a:	f003 ff6b 	bl	8027804 <strrchr>
 802392e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8023932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023936:	2b00      	cmp	r3, #0
 8023938:	d102      	bne.n	8023940 <glue_upload_open_file_upload+0x30>
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8023940:	f107 0008 	add.w	r0, r7, #8
 8023944:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023948:	4a0d      	ldr	r2, [pc, #52]	@ (8023980 <glue_upload_open_file_upload+0x70>)
 802394a:	2180      	movs	r1, #128	@ 0x80
 802394c:	f7ef fc4a 	bl	80131e4 <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8023950:	4b0c      	ldr	r3, [pc, #48]	@ (8023984 <glue_upload_open_file_upload+0x74>)
 8023952:	681b      	ldr	r3, [r3, #0]
 8023954:	2b02      	cmp	r3, #2
 8023956:	dd0d      	ble.n	8023974 <glue_upload_open_file_upload+0x64>
 8023958:	4b0b      	ldr	r3, [pc, #44]	@ (8023988 <glue_upload_open_file_upload+0x78>)
 802395a:	2271      	movs	r2, #113	@ 0x71
 802395c:	490b      	ldr	r1, [pc, #44]	@ (802398c <glue_upload_open_file_upload+0x7c>)
 802395e:	2003      	movs	r0, #3
 8023960:	f7eb f804 	bl	800e96c <mg_log_prefix>
 8023964:	f107 0108 	add.w	r1, r7, #8
 8023968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802396c:	683a      	ldr	r2, [r7, #0]
 802396e:	4808      	ldr	r0, [pc, #32]	@ (8023990 <glue_upload_open_file_upload+0x80>)
 8023970:	f7eb f84c 	bl	800ea0c <mg_log>
  return fp;
 8023974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8023978:	4618      	mov	r0, r3
 802397a:	3790      	adds	r7, #144	@ 0x90
 802397c:	46bd      	mov	sp, r7
 802397e:	bd80      	pop	{r7, pc}
 8023980:	0802c988 	.word	0x0802c988
 8023984:	24000258 	.word	0x24000258
 8023988:	0803afa0 	.word	0x0803afa0
 802398c:	0802c8cc 	.word	0x0802c8cc
 8023990:	0802c990 	.word	0x0802c990

08023994 <glue_upload_close_file_upload>:
bool glue_upload_close_file_upload(void *fp) {
 8023994:	b580      	push	{r7, lr}
 8023996:	b082      	sub	sp, #8
 8023998:	af00      	add	r7, sp, #0
 802399a:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 802399c:	4b09      	ldr	r3, [pc, #36]	@ (80239c4 <glue_upload_close_file_upload+0x30>)
 802399e:	681b      	ldr	r3, [r3, #0]
 80239a0:	2b02      	cmp	r3, #2
 80239a2:	dd09      	ble.n	80239b8 <glue_upload_close_file_upload+0x24>
 80239a4:	4b08      	ldr	r3, [pc, #32]	@ (80239c8 <glue_upload_close_file_upload+0x34>)
 80239a6:	2275      	movs	r2, #117	@ 0x75
 80239a8:	4908      	ldr	r1, [pc, #32]	@ (80239cc <glue_upload_close_file_upload+0x38>)
 80239aa:	2003      	movs	r0, #3
 80239ac:	f7ea ffde 	bl	800e96c <mg_log_prefix>
 80239b0:	6879      	ldr	r1, [r7, #4]
 80239b2:	4807      	ldr	r0, [pc, #28]	@ (80239d0 <glue_upload_close_file_upload+0x3c>)
 80239b4:	f7eb f82a 	bl	800ea0c <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 80239b8:	2300      	movs	r3, #0
#endif
}
 80239ba:	4618      	mov	r0, r3
 80239bc:	3708      	adds	r7, #8
 80239be:	46bd      	mov	sp, r7
 80239c0:	bd80      	pop	{r7, pc}
 80239c2:	bf00      	nop
 80239c4:	24000258 	.word	0x24000258
 80239c8:	0803afc0 	.word	0x0803afc0
 80239cc:	0802c8cc 	.word	0x0802c8cc
 80239d0:	0802c9b0 	.word	0x0802c9b0

080239d4 <glue_upload_write_file_upload>:
bool glue_upload_write_file_upload(void *fp, void *buf, size_t len) {
 80239d4:	b580      	push	{r7, lr}
 80239d6:	b084      	sub	sp, #16
 80239d8:	af00      	add	r7, sp, #0
 80239da:	60f8      	str	r0, [r7, #12]
 80239dc:	60b9      	str	r1, [r7, #8]
 80239de:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 80239e0:	4b0a      	ldr	r3, [pc, #40]	@ (8023a0c <glue_upload_write_file_upload+0x38>)
 80239e2:	681b      	ldr	r3, [r3, #0]
 80239e4:	2b02      	cmp	r3, #2
 80239e6:	dd0b      	ble.n	8023a00 <glue_upload_write_file_upload+0x2c>
 80239e8:	4b09      	ldr	r3, [pc, #36]	@ (8023a10 <glue_upload_write_file_upload+0x3c>)
 80239ea:	227d      	movs	r2, #125	@ 0x7d
 80239ec:	4909      	ldr	r1, [pc, #36]	@ (8023a14 <glue_upload_write_file_upload+0x40>)
 80239ee:	2003      	movs	r0, #3
 80239f0:	f7ea ffbc 	bl	800e96c <mg_log_prefix>
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	68ba      	ldr	r2, [r7, #8]
 80239f8:	68f9      	ldr	r1, [r7, #12]
 80239fa:	4807      	ldr	r0, [pc, #28]	@ (8023a18 <glue_upload_write_file_upload+0x44>)
 80239fc:	f7eb f806 	bl	800ea0c <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8023a00:	2300      	movs	r3, #0
#endif
}
 8023a02:	4618      	mov	r0, r3
 8023a04:	3710      	adds	r7, #16
 8023a06:	46bd      	mov	sp, r7
 8023a08:	bd80      	pop	{r7, pc}
 8023a0a:	bf00      	nop
 8023a0c:	24000258 	.word	0x24000258
 8023a10:	0803afe0 	.word	0x0803afe0
 8023a14:	0802c8cc 	.word	0x0802c8cc
 8023a18:	0802c9bc 	.word	0x0802c9bc

08023a1c <glue_reply_graph_data>:

void glue_reply_graph_data(struct mg_connection *c, struct mg_http_message *hm) {
 8023a1c:	b580      	push	{r7, lr}
 8023a1e:	b086      	sub	sp, #24
 8023a20:	af02      	add	r7, sp, #8
 8023a22:	6078      	str	r0, [r7, #4]
 8023a24:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8023a26:	4b08      	ldr	r3, [pc, #32]	@ (8023a48 <glue_reply_graph_data+0x2c>)
 8023a28:	60fb      	str	r3, [r7, #12]
  const char *value = "[[1724576787,20.3],[1724576847,27.2],[1724576907,29.7],[1724576967,27.9],[1724577027,25.1],[1724577087,23.8],[1724577147,22.5],[1724577207,22.2],[1724577267,23.3],[1724577327,23.9]]";
 8023a2a:	4b08      	ldr	r3, [pc, #32]	@ (8023a4c <glue_reply_graph_data+0x30>)
 8023a2c:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023a2e:	68bb      	ldr	r3, [r7, #8]
 8023a30:	9300      	str	r3, [sp, #0]
 8023a32:	4b07      	ldr	r3, [pc, #28]	@ (8023a50 <glue_reply_graph_data+0x34>)
 8023a34:	68fa      	ldr	r2, [r7, #12]
 8023a36:	21c8      	movs	r1, #200	@ 0xc8
 8023a38:	6878      	ldr	r0, [r7, #4]
 8023a3a:	f7e8 f89f 	bl	800bb7c <mg_http_reply>
}
 8023a3e:	bf00      	nop
 8023a40:	3710      	adds	r7, #16
 8023a42:	46bd      	mov	sp, r7
 8023a44:	bd80      	pop	{r7, pc}
 8023a46:	bf00      	nop
 8023a48:	0802c9d8 	.word	0x0802c9d8
 8023a4c:	0802ca14 	.word	0x0802ca14
 8023a50:	0802cacc 	.word	0x0802cacc

08023a54 <glue_get_state>:
static struct state s_state = {42, 27, 67, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 8023a54:	b5b0      	push	{r4, r5, r7, lr}
 8023a56:	b082      	sub	sp, #8
 8023a58:	af00      	add	r7, sp, #0
 8023a5a:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	4a17      	ldr	r2, [pc, #92]	@ (8023abc <glue_get_state+0x68>)
 8023a60:	461c      	mov	r4, r3
 8023a62:	4615      	mov	r5, r2
 8023a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8023a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  data->speed = glue_get_local_reg(1005);
 8023a74:	f240 30ed 	movw	r0, #1005	@ 0x3ed
 8023a78:	f7ff fdfe 	bl	8023678 <glue_get_local_reg>
 8023a7c:	4603      	mov	r3, r0
 8023a7e:	461a      	mov	r2, r3
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	601a      	str	r2, [r3, #0]
  data->temperature = glue_get_local_reg(1006);
 8023a84:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 8023a88:	f7ff fdf6 	bl	8023678 <glue_get_local_reg>
 8023a8c:	4603      	mov	r3, r0
 8023a8e:	461a      	mov	r2, r3
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	605a      	str	r2, [r3, #4]
  data->humidity = glue_get_local_reg(1007);
 8023a94:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8023a98:	f7ff fdee 	bl	8023678 <glue_get_local_reg>
 8023a9c:	4603      	mov	r3, r0
 8023a9e:	461a      	mov	r2, r3
 8023aa0:	687b      	ldr	r3, [r7, #4]
 8023aa2:	609a      	str	r2, [r3, #8]
  data->level= glue_get_local_reg(1008);
 8023aa4:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 8023aa8:	f7ff fde6 	bl	8023678 <glue_get_local_reg>
 8023aac:	4603      	mov	r3, r0
 8023aae:	461a      	mov	r2, r3
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8023ab4:	bf00      	nop
 8023ab6:	3708      	adds	r7, #8
 8023ab8:	46bd      	mov	sp, r7
 8023aba:	bdb0      	pop	{r4, r5, r7, pc}
 8023abc:	240002b4 	.word	0x240002b4

08023ac0 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8023ac0:	b580      	push	{r7, lr}
 8023ac2:	b082      	sub	sp, #8
 8023ac4:	af00      	add	r7, sp, #0
 8023ac6:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	4a17      	ldr	r2, [pc, #92]	@ (8023b28 <glue_get_leds+0x68>)
 8023acc:	8811      	ldrh	r1, [r2, #0]
 8023ace:	7892      	ldrb	r2, [r2, #2]
 8023ad0:	8019      	strh	r1, [r3, #0]
 8023ad2:	709a      	strb	r2, [r3, #2]
  data->led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8023ad4:	2101      	movs	r1, #1
 8023ad6:	4815      	ldr	r0, [pc, #84]	@ (8023b2c <glue_get_leds+0x6c>)
 8023ad8:	f7df fa78 	bl	8002fcc <HAL_GPIO_ReadPin>
 8023adc:	4603      	mov	r3, r0
 8023ade:	2b00      	cmp	r3, #0
 8023ae0:	bf14      	ite	ne
 8023ae2:	2301      	movne	r3, #1
 8023ae4:	2300      	moveq	r3, #0
 8023ae6:	b2da      	uxtb	r2, r3
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	701a      	strb	r2, [r3, #0]
  data->led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 8023aec:	2102      	movs	r1, #2
 8023aee:	4810      	ldr	r0, [pc, #64]	@ (8023b30 <glue_get_leds+0x70>)
 8023af0:	f7df fa6c 	bl	8002fcc <HAL_GPIO_ReadPin>
 8023af4:	4603      	mov	r3, r0
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	bf14      	ite	ne
 8023afa:	2301      	movne	r3, #1
 8023afc:	2300      	moveq	r3, #0
 8023afe:	b2da      	uxtb	r2, r3
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	705a      	strb	r2, [r3, #1]
  data->led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8023b04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8023b08:	4808      	ldr	r0, [pc, #32]	@ (8023b2c <glue_get_leds+0x6c>)
 8023b0a:	f7df fa5f 	bl	8002fcc <HAL_GPIO_ReadPin>
 8023b0e:	4603      	mov	r3, r0
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	bf14      	ite	ne
 8023b14:	2301      	movne	r3, #1
 8023b16:	2300      	moveq	r3, #0
 8023b18:	b2da      	uxtb	r2, r3
 8023b1a:	687b      	ldr	r3, [r7, #4]
 8023b1c:	709a      	strb	r2, [r3, #2]
}
 8023b1e:	bf00      	nop
 8023b20:	3708      	adds	r7, #8
 8023b22:	46bd      	mov	sp, r7
 8023b24:	bd80      	pop	{r7, pc}
 8023b26:	bf00      	nop
 8023b28:	240002e0 	.word	0x240002e0
 8023b2c:	58020400 	.word	0x58020400
 8023b30:	58021000 	.word	0x58021000

08023b34 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 8023b34:	b580      	push	{r7, lr}
 8023b36:	b082      	sub	sp, #8
 8023b38:	af00      	add	r7, sp, #0
 8023b3a:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 8023b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8023b7c <glue_set_leds+0x48>)
 8023b3e:	687a      	ldr	r2, [r7, #4]
 8023b40:	8811      	ldrh	r1, [r2, #0]
 8023b42:	7892      	ldrb	r2, [r2, #2]
 8023b44:	8019      	strh	r1, [r3, #0]
 8023b46:	709a      	strb	r2, [r3, #2]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data->led1 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD1
 8023b48:	687b      	ldr	r3, [r7, #4]
 8023b4a:	781b      	ldrb	r3, [r3, #0]
 8023b4c:	461a      	mov	r2, r3
 8023b4e:	2101      	movs	r1, #1
 8023b50:	480b      	ldr	r0, [pc, #44]	@ (8023b80 <glue_set_leds+0x4c>)
 8023b52:	f7df fa53 	bl	8002ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, data->led2 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD2
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	785b      	ldrb	r3, [r3, #1]
 8023b5a:	461a      	mov	r2, r3
 8023b5c:	2102      	movs	r1, #2
 8023b5e:	4809      	ldr	r0, [pc, #36]	@ (8023b84 <glue_set_leds+0x50>)
 8023b60:	f7df fa4c 	bl	8002ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, data->led3 ? GPIO_PIN_SET : GPIO_PIN_RESET); // LD3
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	789b      	ldrb	r3, [r3, #2]
 8023b68:	461a      	mov	r2, r3
 8023b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8023b6e:	4804      	ldr	r0, [pc, #16]	@ (8023b80 <glue_set_leds+0x4c>)
 8023b70:	f7df fa44 	bl	8002ffc <HAL_GPIO_WritePin>
}
 8023b74:	bf00      	nop
 8023b76:	3708      	adds	r7, #8
 8023b78:	46bd      	mov	sp, r7
 8023b7a:	bd80      	pop	{r7, pc}
 8023b7c:	240002e0 	.word	0x240002e0
 8023b80:	58020400 	.word	0x58020400
 8023b84:	58021000 	.word	0x58021000

08023b88 <glue_get_network_settings>:

static struct network_settings s_network_settings = {"192.168.0.42", "192.168.0.1", "255.255.255.0", true};
void glue_get_network_settings(struct network_settings *data) {
 8023b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b8a:	b083      	sub	sp, #12
 8023b8c:	af00      	add	r7, sp, #0
 8023b8e:	6078      	str	r0, [r7, #4]
  *data = s_network_settings;  // Sync with your device
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	4a0e      	ldr	r2, [pc, #56]	@ (8023bcc <glue_get_network_settings+0x44>)
 8023b94:	4614      	mov	r4, r2
 8023b96:	469c      	mov	ip, r3
 8023b98:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8023b9c:	4665      	mov	r5, ip
 8023b9e:	4626      	mov	r6, r4
 8023ba0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8023ba2:	6028      	str	r0, [r5, #0]
 8023ba4:	6069      	str	r1, [r5, #4]
 8023ba6:	60aa      	str	r2, [r5, #8]
 8023ba8:	60eb      	str	r3, [r5, #12]
 8023baa:	3410      	adds	r4, #16
 8023bac:	f10c 0c10 	add.w	ip, ip, #16
 8023bb0:	4574      	cmp	r4, lr
 8023bb2:	d1f3      	bne.n	8023b9c <glue_get_network_settings+0x14>
 8023bb4:	4665      	mov	r5, ip
 8023bb6:	4623      	mov	r3, r4
 8023bb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8023bba:	6028      	str	r0, [r5, #0]
 8023bbc:	6069      	str	r1, [r5, #4]
 8023bbe:	60aa      	str	r2, [r5, #8]
 8023bc0:	781b      	ldrb	r3, [r3, #0]
 8023bc2:	732b      	strb	r3, [r5, #12]
}
 8023bc4:	bf00      	nop
 8023bc6:	370c      	adds	r7, #12
 8023bc8:	46bd      	mov	sp, r7
 8023bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023bcc:	240002e4 	.word	0x240002e4

08023bd0 <glue_set_network_settings>:
void glue_set_network_settings(struct network_settings *data) {
 8023bd0:	b4f0      	push	{r4, r5, r6, r7}
 8023bd2:	b082      	sub	sp, #8
 8023bd4:	af00      	add	r7, sp, #0
 8023bd6:	6078      	str	r0, [r7, #4]
  s_network_settings = *data; // Sync with your device
 8023bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8023c14 <glue_set_network_settings+0x44>)
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	461c      	mov	r4, r3
 8023bde:	4616      	mov	r6, r2
 8023be0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8023be4:	4635      	mov	r5, r6
 8023be6:	4623      	mov	r3, r4
 8023be8:	6818      	ldr	r0, [r3, #0]
 8023bea:	6859      	ldr	r1, [r3, #4]
 8023bec:	689a      	ldr	r2, [r3, #8]
 8023bee:	68db      	ldr	r3, [r3, #12]
 8023bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023bf2:	3410      	adds	r4, #16
 8023bf4:	3610      	adds	r6, #16
 8023bf6:	4564      	cmp	r4, ip
 8023bf8:	d1f4      	bne.n	8023be4 <glue_set_network_settings+0x14>
 8023bfa:	4633      	mov	r3, r6
 8023bfc:	6820      	ldr	r0, [r4, #0]
 8023bfe:	6861      	ldr	r1, [r4, #4]
 8023c00:	68a2      	ldr	r2, [r4, #8]
 8023c02:	c307      	stmia	r3!, {r0, r1, r2}
 8023c04:	7b22      	ldrb	r2, [r4, #12]
 8023c06:	701a      	strb	r2, [r3, #0]
}
 8023c08:	bf00      	nop
 8023c0a:	3708      	adds	r7, #8
 8023c0c:	46bd      	mov	sp, r7
 8023c0e:	bcf0      	pop	{r4, r5, r6, r7}
 8023c10:	4770      	bx	lr
 8023c12:	bf00      	nop
 8023c14:	240002e4 	.word	0x240002e4

08023c18 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", "info", 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	b082      	sub	sp, #8
 8023c1c:	af00      	add	r7, sp, #0
 8023c1e:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	4a05      	ldr	r2, [pc, #20]	@ (8023c38 <glue_get_settings+0x20>)
 8023c24:	4618      	mov	r0, r3
 8023c26:	4611      	mov	r1, r2
 8023c28:	2348      	movs	r3, #72	@ 0x48
 8023c2a:	461a      	mov	r2, r3
 8023c2c:	f003 fee9 	bl	8027a02 <memcpy>
}
 8023c30:	bf00      	nop
 8023c32:	3708      	adds	r7, #8
 8023c34:	46bd      	mov	sp, r7
 8023c36:	bd80      	pop	{r7, pc}
 8023c38:	24000328 	.word	0x24000328

08023c3c <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 8023c3c:	b580      	push	{r7, lr}
 8023c3e:	b082      	sub	sp, #8
 8023c40:	af00      	add	r7, sp, #0
 8023c42:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8023c44:	4a05      	ldr	r2, [pc, #20]	@ (8023c5c <glue_set_settings+0x20>)
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	4610      	mov	r0, r2
 8023c4a:	4619      	mov	r1, r3
 8023c4c:	2348      	movs	r3, #72	@ 0x48
 8023c4e:	461a      	mov	r2, r3
 8023c50:	f003 fed7 	bl	8027a02 <memcpy>
}
 8023c54:	bf00      	nop
 8023c56:	3708      	adds	r7, #8
 8023c58:	46bd      	mov	sp, r7
 8023c5a:	bd80      	pop	{r7, pc}
 8023c5c:	24000328 	.word	0x24000328

08023c60 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8023c60:	b580      	push	{r7, lr}
 8023c62:	b082      	sub	sp, #8
 8023c64:	af00      	add	r7, sp, #0
 8023c66:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	4a05      	ldr	r2, [pc, #20]	@ (8023c80 <glue_get_security+0x20>)
 8023c6c:	4618      	mov	r0, r3
 8023c6e:	4611      	mov	r1, r2
 8023c70:	2350      	movs	r3, #80	@ 0x50
 8023c72:	461a      	mov	r2, r3
 8023c74:	f003 fec5 	bl	8027a02 <memcpy>
}
 8023c78:	bf00      	nop
 8023c7a:	3708      	adds	r7, #8
 8023c7c:	46bd      	mov	sp, r7
 8023c7e:	bd80      	pop	{r7, pc}
 8023c80:	24000370 	.word	0x24000370

08023c84 <glue_set_security>:
void glue_set_security(struct security *data) {
 8023c84:	b580      	push	{r7, lr}
 8023c86:	b082      	sub	sp, #8
 8023c88:	af00      	add	r7, sp, #0
 8023c8a:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 8023c8c:	4a05      	ldr	r2, [pc, #20]	@ (8023ca4 <glue_set_security+0x20>)
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	4610      	mov	r0, r2
 8023c92:	4619      	mov	r1, r3
 8023c94:	2350      	movs	r3, #80	@ 0x50
 8023c96:	461a      	mov	r2, r3
 8023c98:	f003 feb3 	bl	8027a02 <memcpy>
}
 8023c9c:	bf00      	nop
 8023c9e:	3708      	adds	r7, #8
 8023ca0:	46bd      	mov	sp, r7
 8023ca2:	bd80      	pop	{r7, pc}
 8023ca4:	24000370 	.word	0x24000370

08023ca8 <glue_reply_loglevels>:

void glue_reply_loglevels(struct mg_connection *c, struct mg_http_message *hm) {
 8023ca8:	b580      	push	{r7, lr}
 8023caa:	b086      	sub	sp, #24
 8023cac:	af02      	add	r7, sp, #8
 8023cae:	6078      	str	r0, [r7, #4]
 8023cb0:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8023cb2:	4b08      	ldr	r3, [pc, #32]	@ (8023cd4 <glue_reply_loglevels+0x2c>)
 8023cb4:	60fb      	str	r3, [r7, #12]
  const char *value = "[\"disabled\",\"error\",\"info\",\"debug\",\"verbose\"]";
 8023cb6:	4b08      	ldr	r3, [pc, #32]	@ (8023cd8 <glue_reply_loglevels+0x30>)
 8023cb8:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023cba:	68bb      	ldr	r3, [r7, #8]
 8023cbc:	9300      	str	r3, [sp, #0]
 8023cbe:	4b07      	ldr	r3, [pc, #28]	@ (8023cdc <glue_reply_loglevels+0x34>)
 8023cc0:	68fa      	ldr	r2, [r7, #12]
 8023cc2:	21c8      	movs	r1, #200	@ 0xc8
 8023cc4:	6878      	ldr	r0, [r7, #4]
 8023cc6:	f7e7 ff59 	bl	800bb7c <mg_http_reply>
}
 8023cca:	bf00      	nop
 8023ccc:	3710      	adds	r7, #16
 8023cce:	46bd      	mov	sp, r7
 8023cd0:	bd80      	pop	{r7, pc}
 8023cd2:	bf00      	nop
 8023cd4:	0802c9d8 	.word	0x0802c9d8
 8023cd8:	0802cad0 	.word	0x0802cad0
 8023cdc:	0802cacc 	.word	0x0802cacc

08023ce0 <glue_reply_events>:
void glue_reply_events(struct mg_connection *c, struct mg_http_message *hm) {
 8023ce0:	b580      	push	{r7, lr}
 8023ce2:	b086      	sub	sp, #24
 8023ce4:	af02      	add	r7, sp, #8
 8023ce6:	6078      	str	r0, [r7, #4]
 8023ce8:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8023cea:	4b08      	ldr	r3, [pc, #32]	@ (8023d0c <glue_reply_events+0x2c>)
 8023cec:	60fb      	str	r3, [r7, #12]
  const char *value = "[{\"priority\":1,\"timestamp\":1738653279,\"active\":false,\"message\":\"event 1\"},{\"priority\":2,\"timestamp\":1738653390,\"active\":true,\"message\":\"event 2\"}]";
 8023cee:	4b08      	ldr	r3, [pc, #32]	@ (8023d10 <glue_reply_events+0x30>)
 8023cf0:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023cf2:	68bb      	ldr	r3, [r7, #8]
 8023cf4:	9300      	str	r3, [sp, #0]
 8023cf6:	4b07      	ldr	r3, [pc, #28]	@ (8023d14 <glue_reply_events+0x34>)
 8023cf8:	68fa      	ldr	r2, [r7, #12]
 8023cfa:	21c8      	movs	r1, #200	@ 0xc8
 8023cfc:	6878      	ldr	r0, [r7, #4]
 8023cfe:	f7e7 ff3d 	bl	800bb7c <mg_http_reply>
}
 8023d02:	bf00      	nop
 8023d04:	3710      	adds	r7, #16
 8023d06:	46bd      	mov	sp, r7
 8023d08:	bd80      	pop	{r7, pc}
 8023d0a:	bf00      	nop
 8023d0c:	0802c9d8 	.word	0x0802c9d8
 8023d10:	0802cb00 	.word	0x0802cb00
 8023d14:	0802cacc 	.word	0x0802cacc

08023d18 <get_api_handler>:
  (struct apihandler *) &s_apihandler_security,
  (struct apihandler *) &s_apihandler_loglevels,
  (struct apihandler *) &s_apihandler_events
};

static struct apihandler *get_api_handler(struct mg_str name) {
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b086      	sub	sp, #24
 8023d1c:	af00      	add	r7, sp, #0
 8023d1e:	463b      	mov	r3, r7
 8023d20:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 8023d24:	230c      	movs	r3, #12
 8023d26:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	2b00      	cmp	r3, #0
 8023d2c:	d101      	bne.n	8023d32 <get_api_handler+0x1a>
 8023d2e:	2300      	movs	r3, #0
 8023d30:	e039      	b.n	8023da6 <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 8023d32:	693b      	ldr	r3, [r7, #16]
 8023d34:	2b00      	cmp	r3, #0
 8023d36:	d101      	bne.n	8023d3c <get_api_handler+0x24>
 8023d38:	2300      	movs	r3, #0
 8023d3a:	e034      	b.n	8023da6 <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 8023d3c:	2300      	movs	r3, #0
 8023d3e:	617b      	str	r3, [r7, #20]
 8023d40:	e02c      	b.n	8023d9c <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 8023d42:	4a1b      	ldr	r2, [pc, #108]	@ (8023db0 <get_api_handler+0x98>)
 8023d44:	697b      	ldr	r3, [r7, #20]
 8023d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023d4a:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 8023d4c:	68fb      	ldr	r3, [r7, #12]
 8023d4e:	681b      	ldr	r3, [r3, #0]
 8023d50:	4618      	mov	r0, r3
 8023d52:	f7dc fb3d 	bl	80003d0 <strlen>
 8023d56:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	68ba      	ldr	r2, [r7, #8]
 8023d5c:	429a      	cmp	r2, r3
 8023d5e:	d815      	bhi.n	8023d8c <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8023d60:	6838      	ldr	r0, [r7, #0]
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	68ba      	ldr	r2, [r7, #8]
 8023d68:	4619      	mov	r1, r3
 8023d6a:	f003 fd26 	bl	80277ba <strncmp>
 8023d6e:	4603      	mov	r3, r0
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d10d      	bne.n	8023d90 <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	68ba      	ldr	r2, [r7, #8]
 8023d78:	429a      	cmp	r2, r3
 8023d7a:	d205      	bcs.n	8023d88 <get_api_handler+0x70>
 8023d7c:	683a      	ldr	r2, [r7, #0]
 8023d7e:	68bb      	ldr	r3, [r7, #8]
 8023d80:	4413      	add	r3, r2
 8023d82:	781b      	ldrb	r3, [r3, #0]
 8023d84:	2b2f      	cmp	r3, #47	@ 0x2f
 8023d86:	d105      	bne.n	8023d94 <get_api_handler+0x7c>
    return h;
 8023d88:	68fb      	ldr	r3, [r7, #12]
 8023d8a:	e00c      	b.n	8023da6 <get_api_handler+0x8e>
    if (n > name.len) continue;
 8023d8c:	bf00      	nop
 8023d8e:	e002      	b.n	8023d96 <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8023d90:	bf00      	nop
 8023d92:	e000      	b.n	8023d96 <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 8023d94:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 8023d96:	697b      	ldr	r3, [r7, #20]
 8023d98:	3301      	adds	r3, #1
 8023d9a:	617b      	str	r3, [r7, #20]
 8023d9c:	697a      	ldr	r2, [r7, #20]
 8023d9e:	693b      	ldr	r3, [r7, #16]
 8023da0:	429a      	cmp	r2, r3
 8023da2:	d3ce      	bcc.n	8023d42 <get_api_handler+0x2a>
  }
  return NULL;
 8023da4:	2300      	movs	r3, #0
}
 8023da6:	4618      	mov	r0, r3
 8023da8:	3718      	adds	r7, #24
 8023daa:	46bd      	mov	sp, r7
 8023dac:	bd80      	pop	{r7, pc}
 8023dae:	bf00      	nop
 8023db0:	240007ec 	.word	0x240007ec

08023db4 <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8023db4:	b580      	push	{r7, lr}
 8023db6:	b084      	sub	sp, #16
 8023db8:	af00      	add	r7, sp, #0
 8023dba:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	68db      	ldr	r3, [r3, #12]
 8023dc0:	2b05      	cmp	r3, #5
 8023dc2:	d909      	bls.n	8023dd8 <find_handler+0x24>
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	689b      	ldr	r3, [r3, #8]
 8023dc8:	2205      	movs	r2, #5
 8023dca:	490f      	ldr	r1, [pc, #60]	@ (8023e08 <find_handler+0x54>)
 8023dcc:	4618      	mov	r0, r3
 8023dce:	f003 fcf4 	bl	80277ba <strncmp>
 8023dd2:	4603      	mov	r3, r0
 8023dd4:	2b00      	cmp	r3, #0
 8023dd6:	d001      	beq.n	8023ddc <find_handler+0x28>
 8023dd8:	2300      	movs	r3, #0
 8023dda:	e011      	b.n	8023e00 <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 8023ddc:	687b      	ldr	r3, [r7, #4]
 8023dde:	689b      	ldr	r3, [r3, #8]
 8023de0:	1d59      	adds	r1, r3, #5
 8023de2:	687b      	ldr	r3, [r7, #4]
 8023de4:	68db      	ldr	r3, [r3, #12]
 8023de6:	1f5a      	subs	r2, r3, #5
 8023de8:	f107 0308 	add.w	r3, r7, #8
 8023dec:	4618      	mov	r0, r3
 8023dee:	f7f2 fdda 	bl	80169a6 <mg_str_n>
 8023df2:	f107 0308 	add.w	r3, r7, #8
 8023df6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023dfa:	f7ff ff8d 	bl	8023d18 <get_api_handler>
 8023dfe:	4603      	mov	r3, r0
}
 8023e00:	4618      	mov	r0, r3
 8023e02:	3710      	adds	r7, #16
 8023e04:	46bd      	mov	sp, r7
 8023e06:	bd80      	pop	{r7, pc}
 8023e08:	0802cd48 	.word	0x0802cd48

08023e0c <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8023e0c:	b590      	push	{r4, r7, lr}
 8023e0e:	b089      	sub	sp, #36	@ 0x24
 8023e10:	af00      	add	r7, sp, #0
 8023e12:	f107 0408 	add.w	r4, r7, #8
 8023e16:	e884 0003 	stmia.w	r4, {r0, r1}
 8023e1a:	607a      	str	r2, [r7, #4]
 8023e1c:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8023e1e:	f107 0010 	add.w	r0, r7, #16
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	f107 0208 	add.w	r2, r7, #8
 8023e28:	ca06      	ldmia	r2, {r1, r2}
 8023e2a:	f7ea fc3b 	bl	800e6a4 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8023e2e:	697b      	ldr	r3, [r7, #20]
 8023e30:	2b01      	cmp	r3, #1
 8023e32:	d913      	bls.n	8023e5c <mg_json_get_str2+0x50>
 8023e34:	693b      	ldr	r3, [r7, #16]
 8023e36:	781b      	ldrb	r3, [r3, #0]
 8023e38:	2b22      	cmp	r3, #34	@ 0x22
 8023e3a:	d10f      	bne.n	8023e5c <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8023e3c:	693b      	ldr	r3, [r7, #16]
 8023e3e:	1c59      	adds	r1, r3, #1
 8023e40:	697b      	ldr	r3, [r7, #20]
 8023e42:	1e9a      	subs	r2, r3, #2
 8023e44:	f107 0318 	add.w	r3, r7, #24
 8023e48:	4618      	mov	r0, r3
 8023e4a:	f7f2 fdac 	bl	80169a6 <mg_str_n>
 8023e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023e50:	683a      	ldr	r2, [r7, #0]
 8023e52:	f107 0118 	add.w	r1, r7, #24
 8023e56:	c903      	ldmia	r1, {r0, r1}
 8023e58:	f7ea fcca 	bl	800e7f0 <mg_json_unescape>
  }
}
 8023e5c:	bf00      	nop
 8023e5e:	3724      	adds	r7, #36	@ 0x24
 8023e60:	46bd      	mov	sp, r7
 8023e62:	bd90      	pop	{r4, r7, pc}

08023e64 <authenticate>:
void mongoose_set_auth_handler(int (*fn)(const char *, const char *)) {
  s_auth = fn;
}

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8023e64:	b580      	push	{r7, lr}
 8023e66:	b0ba      	sub	sp, #232	@ 0xe8
 8023e68:	af02      	add	r7, sp, #8
 8023e6a:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8023e6c:	2300      	movs	r3, #0
 8023e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8023e72:	f107 030c 	add.w	r3, r7, #12
 8023e76:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8023e7a:	2264      	movs	r2, #100	@ 0x64
 8023e7c:	9200      	str	r2, [sp, #0]
 8023e7e:	2264      	movs	r2, #100	@ 0x64
 8023e80:	6878      	ldr	r0, [r7, #4]
 8023e82:	f7e8 fdf1 	bl	800ca68 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 8023e86:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d06f      	beq.n	8023f6e <authenticate+0x10a>
 8023e8e:	7b3b      	ldrb	r3, [r7, #12]
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	d06c      	beq.n	8023f6e <authenticate+0x10a>
    // Both user and password is set, auth by user/password via glue API
    int level = s_auth(user, pass);
 8023e94:	4b5b      	ldr	r3, [pc, #364]	@ (8024004 <authenticate+0x1a0>)
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	f107 010c 	add.w	r1, r7, #12
 8023e9c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8023ea0:	4610      	mov	r0, r2
 8023ea2:	4798      	blx	r3
 8023ea4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 8023ea8:	4b57      	ldr	r3, [pc, #348]	@ (8024008 <authenticate+0x1a4>)
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	2b02      	cmp	r3, #2
 8023eae:	dd0e      	ble.n	8023ece <authenticate+0x6a>
 8023eb0:	4b56      	ldr	r3, [pc, #344]	@ (802400c <authenticate+0x1a8>)
 8023eb2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8023eb6:	4956      	ldr	r1, [pc, #344]	@ (8024010 <authenticate+0x1ac>)
 8023eb8:	2003      	movs	r0, #3
 8023eba:	f7ea fd57 	bl	800e96c <mg_log_prefix>
 8023ebe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023ec2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8023ec6:	4619      	mov	r1, r3
 8023ec8:	4852      	ldr	r0, [pc, #328]	@ (8024014 <authenticate+0x1b0>)
 8023eca:	f7ea fd9f 	bl	800ea0c <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 8023ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	dd75      	ble.n	8023fc2 <authenticate+0x15e>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023ed6:	4b50      	ldr	r3, [pc, #320]	@ (8024018 <authenticate+0x1b4>)
 8023ed8:	681b      	ldr	r3, [r3, #0]
 8023eda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023ede:	e014      	b.n	8023f0a <authenticate+0xa6>
        if (strcmp(user, u->name) == 0) result = u;
 8023ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023ee4:	1d1a      	adds	r2, r3, #4
 8023ee6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023eea:	4611      	mov	r1, r2
 8023eec:	4618      	mov	r0, r3
 8023eee:	f7dc fa0f 	bl	8000310 <strcmp>
 8023ef2:	4603      	mov	r3, r0
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d103      	bne.n	8023f00 <authenticate+0x9c>
 8023ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d003      	beq.n	8023f1a <authenticate+0xb6>
 8023f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f16:	2b00      	cmp	r3, #0
 8023f18:	d0e2      	beq.n	8023ee0 <authenticate+0x7c>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 8023f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	d14f      	bne.n	8023fc2 <authenticate+0x15e>
        result = (struct user *) calloc(1, sizeof(*result));
 8023f22:	2140      	movs	r1, #64	@ 0x40
 8023f24:	2001      	movs	r0, #1
 8023f26:	f001 fd85 	bl	8025a34 <calloc>
 8023f2a:	4603      	mov	r3, r0
 8023f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8023f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f34:	1d18      	adds	r0, r3, #4
 8023f36:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8023f3a:	4a38      	ldr	r2, [pc, #224]	@ (802401c <authenticate+0x1b8>)
 8023f3c:	2120      	movs	r1, #32
 8023f3e:	f7ef f951 	bl	80131e4 <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8023f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f46:	3324      	adds	r3, #36	@ 0x24
 8023f48:	2114      	movs	r1, #20
 8023f4a:	4618      	mov	r0, r3
 8023f4c:	f7fd fee2 	bl	8021d14 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8023f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f54:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8023f58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8023f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8024018 <authenticate+0x1b4>)
 8023f5c:	681a      	ldr	r2, [r3, #0]
 8023f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f62:	601a      	str	r2, [r3, #0]
 8023f64:	4a2c      	ldr	r2, [pc, #176]	@ (8024018 <authenticate+0x1b4>)
 8023f66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023f6a:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 8023f6c:	e029      	b.n	8023fc2 <authenticate+0x15e>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8023f6e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d126      	bne.n	8023fc4 <authenticate+0x160>
 8023f76:	7b3b      	ldrb	r3, [r7, #12]
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d023      	beq.n	8023fc4 <authenticate+0x160>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023f7c:	4b26      	ldr	r3, [pc, #152]	@ (8024018 <authenticate+0x1b4>)
 8023f7e:	681b      	ldr	r3, [r3, #0]
 8023f80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023f84:	e014      	b.n	8023fb0 <authenticate+0x14c>
      if (strcmp(u->token, pass) == 0) result = u;
 8023f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023f8a:	3324      	adds	r3, #36	@ 0x24
 8023f8c:	f107 020c 	add.w	r2, r7, #12
 8023f90:	4611      	mov	r1, r2
 8023f92:	4618      	mov	r0, r3
 8023f94:	f7dc f9bc 	bl	8000310 <strcmp>
 8023f98:	4603      	mov	r3, r0
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d103      	bne.n	8023fa6 <authenticate+0x142>
 8023f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023faa:	681b      	ldr	r3, [r3, #0]
 8023fac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8023fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	d005      	beq.n	8023fc4 <authenticate+0x160>
 8023fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	d0e2      	beq.n	8023f86 <authenticate+0x122>
 8023fc0:	e000      	b.n	8023fc4 <authenticate+0x160>
  if (user[0] != '\0' && pass[0] != '\0') {
 8023fc2:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 8023fc4:	4b10      	ldr	r3, [pc, #64]	@ (8024008 <authenticate+0x1a4>)
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	2b03      	cmp	r3, #3
 8023fca:	dd14      	ble.n	8023ff6 <authenticate+0x192>
 8023fcc:	4b0f      	ldr	r3, [pc, #60]	@ (802400c <authenticate+0x1a8>)
 8023fce:	f240 122b 	movw	r2, #299	@ 0x12b
 8023fd2:	490f      	ldr	r1, [pc, #60]	@ (8024010 <authenticate+0x1ac>)
 8023fd4:	2004      	movs	r0, #4
 8023fd6:	f7ea fcc9 	bl	800e96c <mg_log_prefix>
 8023fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023fde:	2b00      	cmp	r3, #0
 8023fe0:	d001      	beq.n	8023fe6 <authenticate+0x182>
 8023fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8024020 <authenticate+0x1bc>)
 8023fe4:	e000      	b.n	8023fe8 <authenticate+0x184>
 8023fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8024024 <authenticate+0x1c0>)
 8023fe8:	f107 020c 	add.w	r2, r7, #12
 8023fec:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8023ff0:	480d      	ldr	r0, [pc, #52]	@ (8024028 <authenticate+0x1c4>)
 8023ff2:	f7ea fd0b 	bl	800ea0c <mg_log>
  return result;
 8023ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 8023ffa:	4618      	mov	r0, r3
 8023ffc:	37e0      	adds	r7, #224	@ 0xe0
 8023ffe:	46bd      	mov	sp, r7
 8024000:	bd80      	pop	{r7, pc}
 8024002:	bf00      	nop
 8024004:	2400081c 	.word	0x2400081c
 8024008:	24000258 	.word	0x24000258
 802400c:	0803b000 	.word	0x0803b000
 8024010:	0802cd50 	.word	0x0802cd50
 8024014:	0802cdb4 	.word	0x0802cdb4
 8024018:	24005700 	.word	0x24005700
 802401c:	0802cdc8 	.word	0x0802cdc8
 8024020:	0802cdcc 	.word	0x0802cdcc
 8024024:	0802cdd0 	.word	0x0802cdd0
 8024028:	0802cdd8 	.word	0x0802cdd8

0802402c <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 802402c:	b580      	push	{r7, lr}
 802402e:	b0cc      	sub	sp, #304	@ 0x130
 8024030:	af0a      	add	r7, sp, #40	@ 0x28
 8024032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802403a:	6018      	str	r0, [r3, #0]
 802403c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8024044:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8024046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802404a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 802404e:	681b      	ldr	r3, [r3, #0]
 8024050:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8024054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802405c:	681b      	ldr	r3, [r3, #0]
 802405e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8024062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024066:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8024068:	2b00      	cmp	r3, #0
 802406a:	d001      	beq.n	8024070 <handle_login+0x44>
 802406c:	4b1e      	ldr	r3, [pc, #120]	@ (80240e8 <handle_login+0xbc>)
 802406e:	e000      	b.n	8024072 <handle_login+0x46>
 8024070:	4b1e      	ldr	r3, [pc, #120]	@ (80240ec <handle_login+0xc0>)
 8024072:	f107 0008 	add.w	r0, r7, #8
 8024076:	491e      	ldr	r1, [pc, #120]	@ (80240f0 <handle_login+0xc4>)
 8024078:	9101      	str	r1, [sp, #4]
 802407a:	9300      	str	r3, [sp, #0]
 802407c:	4613      	mov	r3, r2
 802407e:	4a1d      	ldr	r2, [pc, #116]	@ (80240f4 <handle_login+0xc8>)
 8024080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024084:	f7ef f8ae 	bl	80131e4 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
                MG_ESC("user"), MG_ESC(u->name),    //
 8024088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802408c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
 8024094:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8024098:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 802409c:	6812      	ldr	r2, [r2, #0]
 802409e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80240a0:	f107 0108 	add.w	r1, r7, #8
 80240a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80240a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80240ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80240ae:	4a12      	ldr	r2, [pc, #72]	@ (80240f8 <handle_login+0xcc>)
 80240b0:	9208      	str	r2, [sp, #32]
 80240b2:	2200      	movs	r2, #0
 80240b4:	9207      	str	r2, [sp, #28]
 80240b6:	4a11      	ldr	r2, [pc, #68]	@ (80240fc <handle_login+0xd0>)
 80240b8:	9206      	str	r2, [sp, #24]
 80240ba:	9305      	str	r3, [sp, #20]
 80240bc:	2300      	movs	r3, #0
 80240be:	9304      	str	r3, [sp, #16]
 80240c0:	4b0e      	ldr	r3, [pc, #56]	@ (80240fc <handle_login+0xd0>)
 80240c2:	9303      	str	r3, [sp, #12]
 80240c4:	4b0e      	ldr	r3, [pc, #56]	@ (8024100 <handle_login+0xd4>)
 80240c6:	9302      	str	r3, [sp, #8]
 80240c8:	2300      	movs	r3, #0
 80240ca:	9301      	str	r3, [sp, #4]
 80240cc:	4b0b      	ldr	r3, [pc, #44]	@ (80240fc <handle_login+0xd0>)
 80240ce:	9300      	str	r3, [sp, #0]
 80240d0:	4b0c      	ldr	r3, [pc, #48]	@ (8024104 <handle_login+0xd8>)
 80240d2:	460a      	mov	r2, r1
 80240d4:	21c8      	movs	r1, #200	@ 0xc8
 80240d6:	6800      	ldr	r0, [r0, #0]
 80240d8:	f7e7 fd50 	bl	800bb7c <mg_http_reply>
                MG_ESC("level"), u->level);
}
 80240dc:	bf00      	nop
 80240de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80240e2:	46bd      	mov	sp, r7
 80240e4:	bd80      	pop	{r7, pc}
 80240e6:	bf00      	nop
 80240e8:	0802cde8 	.word	0x0802cde8
 80240ec:	0802cdf4 	.word	0x0802cdf4
 80240f0:	00015180 	.word	0x00015180
 80240f4:	0802cdf8 	.word	0x0802cdf8
 80240f8:	0802cbe8 	.word	0x0802cbe8
 80240fc:	08013671 	.word	0x08013671
 8024100:	0802ce54 	.word	0x0802ce54
 8024104:	0802ce44 	.word	0x0802ce44

08024108 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8024108:	b580      	push	{r7, lr}
 802410a:	b0c2      	sub	sp, #264	@ 0x108
 802410c:	af00      	add	r7, sp, #0
 802410e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024116:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8024118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802411c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024120:	681b      	ldr	r3, [r3, #0]
 8024122:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8024126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802412a:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 802412c:	2b00      	cmp	r3, #0
 802412e:	d001      	beq.n	8024134 <handle_logout+0x2c>
 8024130:	4b0d      	ldr	r3, [pc, #52]	@ (8024168 <handle_logout+0x60>)
 8024132:	e000      	b.n	8024136 <handle_logout+0x2e>
 8024134:	4b0d      	ldr	r3, [pc, #52]	@ (802416c <handle_logout+0x64>)
 8024136:	f107 0008 	add.w	r0, r7, #8
 802413a:	4a0d      	ldr	r2, [pc, #52]	@ (8024170 <handle_logout+0x68>)
 802413c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024140:	f7ef f850 	bl	80131e4 <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8024144:	f107 0208 	add.w	r2, r7, #8
 8024148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802414c:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8024150:	4b08      	ldr	r3, [pc, #32]	@ (8024174 <handle_logout+0x6c>)
 8024152:	f240 1191 	movw	r1, #401	@ 0x191
 8024156:	6800      	ldr	r0, [r0, #0]
 8024158:	f7e7 fd10 	bl	800bb7c <mg_http_reply>
}
 802415c:	bf00      	nop
 802415e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8024162:	46bd      	mov	sp, r7
 8024164:	bd80      	pop	{r7, pc}
 8024166:	bf00      	nop
 8024168:	0802cde8 	.word	0x0802cde8
 802416c:	0802cdf4 	.word	0x0802cdf4
 8024170:	0802ce5c 	.word	0x0802ce5c
 8024174:	0802cec0 	.word	0x0802cec0

08024178 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 8024178:	b580      	push	{r7, lr}
 802417a:	b082      	sub	sp, #8
 802417c:	af00      	add	r7, sp, #0
 802417e:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 8024180:	687b      	ldr	r3, [r7, #4]
 8024182:	2200      	movs	r2, #0
 8024184:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 8024186:	687b      	ldr	r3, [r7, #4]
 8024188:	691b      	ldr	r3, [r3, #16]
 802418a:	2b00      	cmp	r3, #0
 802418c:	d00c      	beq.n	80241a8 <close_uploaded_file+0x30>
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	68db      	ldr	r3, [r3, #12]
 8024192:	2b00      	cmp	r3, #0
 8024194:	d008      	beq.n	80241a8 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	691b      	ldr	r3, [r3, #16]
 802419a:	687a      	ldr	r2, [r7, #4]
 802419c:	68d2      	ldr	r2, [r2, #12]
 802419e:	4610      	mov	r0, r2
 80241a0:	4798      	blx	r3
    us->fp = NULL;
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	2200      	movs	r2, #0
 80241a6:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 80241a8:	2218      	movs	r2, #24
 80241aa:	2100      	movs	r1, #0
 80241ac:	6878      	ldr	r0, [r7, #4]
 80241ae:	f003 faef 	bl	8027790 <memset>
}
 80241b2:	bf00      	nop
 80241b4:	3708      	adds	r7, #8
 80241b6:	46bd      	mov	sp, r7
 80241b8:	bd80      	pop	{r7, pc}
	...

080241bc <file_closer>:

static bool file_closer(void *p) {
 80241bc:	b580      	push	{r7, lr}
 80241be:	b082      	sub	sp, #8
 80241c0:	af00      	add	r7, sp, #0
 80241c2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 80241c4:	6878      	ldr	r0, [r7, #4]
 80241c6:	f7e5 ffb7 	bl	800a138 <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 80241ca:	4b0a      	ldr	r3, [pc, #40]	@ (80241f4 <file_closer+0x38>)
 80241cc:	681b      	ldr	r3, [r3, #0]
 80241ce:	2b01      	cmp	r3, #1
 80241d0:	dd0a      	ble.n	80241e8 <file_closer+0x2c>
 80241d2:	4b09      	ldr	r3, [pc, #36]	@ (80241f8 <file_closer+0x3c>)
 80241d4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80241d8:	4908      	ldr	r1, [pc, #32]	@ (80241fc <file_closer+0x40>)
 80241da:	2002      	movs	r0, #2
 80241dc:	f7ea fbc6 	bl	800e96c <mg_log_prefix>
 80241e0:	6879      	ldr	r1, [r7, #4]
 80241e2:	4807      	ldr	r0, [pc, #28]	@ (8024200 <file_closer+0x44>)
 80241e4:	f7ea fc12 	bl	800ea0c <mg_log>
  return true;
 80241e8:	2301      	movs	r3, #1
}
 80241ea:	4618      	mov	r0, r3
 80241ec:	3708      	adds	r7, #8
 80241ee:	46bd      	mov	sp, r7
 80241f0:	bd80      	pop	{r7, pc}
 80241f2:	bf00      	nop
 80241f4:	24000258 	.word	0x24000258
 80241f8:	0803b010 	.word	0x0803b010
 80241fc:	0802cd50 	.word	0x0802cd50
 8024200:	0802ced0 	.word	0x0802ced0

08024204 <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 8024204:	b580      	push	{r7, lr}
 8024206:	b086      	sub	sp, #24
 8024208:	af00      	add	r7, sp, #0
 802420a:	60f8      	str	r0, [r7, #12]
 802420c:	60b9      	str	r1, [r7, #8]
 802420e:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 8024210:	68fb      	ldr	r3, [r7, #12]
 8024212:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 8024214:	697b      	ldr	r3, [r7, #20]
 8024216:	685b      	ldr	r3, [r3, #4]
 8024218:	695b      	ldr	r3, [r3, #20]
 802421a:	697a      	ldr	r2, [r7, #20]
 802421c:	6810      	ldr	r0, [r2, #0]
 802421e:	687a      	ldr	r2, [r7, #4]
 8024220:	68b9      	ldr	r1, [r7, #8]
 8024222:	4798      	blx	r3
 8024224:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 8024226:	4b0d      	ldr	r3, [pc, #52]	@ (802425c <file_writer+0x58>)
 8024228:	681b      	ldr	r3, [r3, #0]
 802422a:	2b01      	cmp	r3, #1
 802422c:	dd0a      	ble.n	8024244 <file_writer+0x40>
 802422e:	4b0c      	ldr	r3, [pc, #48]	@ (8024260 <file_writer+0x5c>)
 8024230:	f240 1265 	movw	r2, #357	@ 0x165
 8024234:	490b      	ldr	r1, [pc, #44]	@ (8024264 <file_writer+0x60>)
 8024236:	2002      	movs	r0, #2
 8024238:	f7ea fb98 	bl	800e96c <mg_log_prefix>
 802423c:	6939      	ldr	r1, [r7, #16]
 802423e:	480a      	ldr	r0, [pc, #40]	@ (8024268 <file_writer+0x64>)
 8024240:	f7ea fbe4 	bl	800ea0c <mg_log>
  return written == len;
 8024244:	693a      	ldr	r2, [r7, #16]
 8024246:	687b      	ldr	r3, [r7, #4]
 8024248:	429a      	cmp	r2, r3
 802424a:	bf0c      	ite	eq
 802424c:	2301      	moveq	r3, #1
 802424e:	2300      	movne	r3, #0
 8024250:	b2db      	uxtb	r3, r3
}
 8024252:	4618      	mov	r0, r3
 8024254:	3718      	adds	r7, #24
 8024256:	46bd      	mov	sp, r7
 8024258:	bd80      	pop	{r7, pc}
 802425a:	bf00      	nop
 802425c:	24000258 	.word	0x24000258
 8024260:	0803b01c 	.word	0x0803b01c
 8024264:	0802cd50 	.word	0x0802cd50
 8024268:	0802cee0 	.word	0x0802cee0

0802426c <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 802426c:	b590      	push	{r4, r7, lr}
 802426e:	b08d      	sub	sp, #52	@ 0x34
 8024270:	af04      	add	r7, sp, #16
 8024272:	60f8      	str	r0, [r7, #12]
 8024274:	60b9      	str	r1, [r7, #8]
 8024276:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8024278:	68fb      	ldr	r3, [r7, #12]
 802427a:	3388      	adds	r3, #136	@ 0x88
 802427c:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 802427e:	69fb      	ldr	r3, [r7, #28]
 8024280:	781b      	ldrb	r3, [r3, #0]
 8024282:	2b55      	cmp	r3, #85	@ 0x55
 8024284:	f040 80ae 	bne.w	80243e4 <upload_handler+0x178>
 8024288:	68bb      	ldr	r3, [r7, #8]
 802428a:	2b07      	cmp	r3, #7
 802428c:	f040 80aa 	bne.w	80243e4 <upload_handler+0x178>
 8024290:	69fb      	ldr	r3, [r7, #28]
 8024292:	685b      	ldr	r3, [r3, #4]
 8024294:	2b00      	cmp	r3, #0
 8024296:	f000 80a5 	beq.w	80243e4 <upload_handler+0x178>
      c->recv.len > 0) {
 802429a:	68fb      	ldr	r3, [r7, #12]
 802429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 802429e:	2b00      	cmp	r3, #0
 80242a0:	f000 80a0 	beq.w	80243e4 <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 80242a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80242a8:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 80242aa:	69fb      	ldr	r3, [r7, #28]
 80242ac:	689a      	ldr	r2, [r3, #8]
 80242ae:	68fb      	ldr	r3, [r7, #12]
 80242b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80242b2:	441a      	add	r2, r3
 80242b4:	69fb      	ldr	r3, [r7, #28]
 80242b6:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 80242b8:	429a      	cmp	r2, r3
 80242ba:	d210      	bcs.n	80242de <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 80242bc:	69bb      	ldr	r3, [r7, #24]
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d102      	bne.n	80242c8 <upload_handler+0x5c>
 80242c2:	68fb      	ldr	r3, [r7, #12]
 80242c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80242c6:	e007      	b.n	80242d8 <upload_handler+0x6c>
 80242c8:	68fb      	ldr	r3, [r7, #12]
 80242ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80242cc:	69bb      	ldr	r3, [r7, #24]
 80242ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80242d2:	69ba      	ldr	r2, [r7, #24]
 80242d4:	fb02 f303 	mul.w	r3, r2, r3
 80242d8:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 80242da:	697b      	ldr	r3, [r7, #20]
 80242dc:	e001      	b.n	80242e2 <upload_handler+0x76>
 80242de:	68fb      	ldr	r3, [r7, #12]
 80242e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 80242e2:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 80242e4:	697b      	ldr	r3, [r7, #20]
 80242e6:	2b00      	cmp	r3, #0
 80242e8:	d00a      	beq.n	8024300 <upload_handler+0x94>
 80242ea:	69fb      	ldr	r3, [r7, #28]
 80242ec:	695b      	ldr	r3, [r3, #20]
 80242ee:	69fa      	ldr	r2, [r7, #28]
 80242f0:	68d0      	ldr	r0, [r2, #12]
 80242f2:	68fa      	ldr	r2, [r7, #12]
 80242f4:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80242f6:	697a      	ldr	r2, [r7, #20]
 80242f8:	4798      	blx	r3
 80242fa:	4603      	mov	r3, r0
 80242fc:	2b00      	cmp	r3, #0
 80242fe:	d001      	beq.n	8024304 <upload_handler+0x98>
 8024300:	2301      	movs	r3, #1
 8024302:	e000      	b.n	8024306 <upload_handler+0x9a>
 8024304:	2300      	movs	r3, #0
 8024306:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8024308:	69fb      	ldr	r3, [r7, #28]
 802430a:	689a      	ldr	r2, [r3, #8]
 802430c:	697b      	ldr	r3, [r7, #20]
 802430e:	441a      	add	r2, r3
 8024310:	69fb      	ldr	r3, [r7, #28]
 8024312:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 8024314:	4b3a      	ldr	r3, [pc, #232]	@ (8024400 <upload_handler+0x194>)
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	2b02      	cmp	r3, #2
 802431a:	dd18      	ble.n	802434e <upload_handler+0xe2>
 802431c:	4b39      	ldr	r3, [pc, #228]	@ (8024404 <upload_handler+0x198>)
 802431e:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 8024322:	4939      	ldr	r1, [pc, #228]	@ (8024408 <upload_handler+0x19c>)
 8024324:	2003      	movs	r0, #3
 8024326:	f7ea fb21 	bl	800e96c <mg_log_prefix>
 802432a:	68fb      	ldr	r3, [r7, #12]
 802432c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 802432e:	68fb      	ldr	r3, [r7, #12]
 8024330:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8024332:	69fb      	ldr	r3, [r7, #28]
 8024334:	689b      	ldr	r3, [r3, #8]
 8024336:	69fa      	ldr	r2, [r7, #28]
 8024338:	6852      	ldr	r2, [r2, #4]
 802433a:	7cf9      	ldrb	r1, [r7, #19]
 802433c:	9102      	str	r1, [sp, #8]
 802433e:	9201      	str	r2, [sp, #4]
 8024340:	9300      	str	r3, [sp, #0]
 8024342:	4623      	mov	r3, r4
 8024344:	697a      	ldr	r2, [r7, #20]
 8024346:	4601      	mov	r1, r0
 8024348:	4830      	ldr	r0, [pc, #192]	@ (802440c <upload_handler+0x1a0>)
 802434a:	f7ea fb5f 	bl	800ea0c <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 802434e:	68fb      	ldr	r3, [r7, #12]
 8024350:	3338      	adds	r3, #56	@ 0x38
 8024352:	697a      	ldr	r2, [r7, #20]
 8024354:	2100      	movs	r1, #0
 8024356:	4618      	mov	r0, r3
 8024358:	f7e9 faf0 	bl	800d93c <mg_iobuf_del>
    if (ok == false) {
 802435c:	7cfb      	ldrb	r3, [r7, #19]
 802435e:	f083 0301 	eor.w	r3, r3, #1
 8024362:	b2db      	uxtb	r3, r3
 8024364:	2b00      	cmp	r3, #0
 8024366:	d011      	beq.n	802438c <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 8024368:	4b29      	ldr	r3, [pc, #164]	@ (8024410 <upload_handler+0x1a4>)
 802436a:	4a2a      	ldr	r2, [pc, #168]	@ (8024414 <upload_handler+0x1a8>)
 802436c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8024370:	68f8      	ldr	r0, [r7, #12]
 8024372:	f7e7 fc03 	bl	800bb7c <mg_http_reply>
      close_uploaded_file(us);
 8024376:	69f8      	ldr	r0, [r7, #28]
 8024378:	f7ff fefe 	bl	8024178 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 802437c:	68fa      	ldr	r2, [r7, #12]
 802437e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8024382:	f043 0310 	orr.w	r3, r3, #16
 8024386:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 802438a:	e02b      	b.n	80243e4 <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 802438c:	69fb      	ldr	r3, [r7, #28]
 802438e:	689a      	ldr	r2, [r3, #8]
 8024390:	69fb      	ldr	r3, [r7, #28]
 8024392:	685b      	ldr	r3, [r3, #4]
 8024394:	429a      	cmp	r2, r3
 8024396:	d325      	bcc.n	80243e4 <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 8024398:	4b19      	ldr	r3, [pc, #100]	@ (8024400 <upload_handler+0x194>)
 802439a:	681b      	ldr	r3, [r3, #0]
 802439c:	2b01      	cmp	r3, #1
 802439e:	dd0e      	ble.n	80243be <upload_handler+0x152>
 80243a0:	4b18      	ldr	r3, [pc, #96]	@ (8024404 <upload_handler+0x198>)
 80243a2:	f240 1283 	movw	r2, #387	@ 0x183
 80243a6:	4918      	ldr	r1, [pc, #96]	@ (8024408 <upload_handler+0x19c>)
 80243a8:	2002      	movs	r0, #2
 80243aa:	f7ea fadf 	bl	800e96c <mg_log_prefix>
 80243ae:	68fb      	ldr	r3, [r7, #12]
 80243b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80243b2:	69fb      	ldr	r3, [r7, #28]
 80243b4:	689b      	ldr	r3, [r3, #8]
 80243b6:	461a      	mov	r2, r3
 80243b8:	4817      	ldr	r0, [pc, #92]	@ (8024418 <upload_handler+0x1ac>)
 80243ba:	f7ea fb27 	bl	800ea0c <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 80243be:	69fb      	ldr	r3, [r7, #28]
 80243c0:	689b      	ldr	r3, [r3, #8]
 80243c2:	9300      	str	r3, [sp, #0]
 80243c4:	4b15      	ldr	r3, [pc, #84]	@ (802441c <upload_handler+0x1b0>)
 80243c6:	2200      	movs	r2, #0
 80243c8:	21c8      	movs	r1, #200	@ 0xc8
 80243ca:	68f8      	ldr	r0, [r7, #12]
 80243cc:	f7e7 fbd6 	bl	800bb7c <mg_http_reply>
      close_uploaded_file(us);
 80243d0:	69f8      	ldr	r0, [r7, #28]
 80243d2:	f7ff fed1 	bl	8024178 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80243d6:	68fa      	ldr	r2, [r7, #12]
 80243d8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80243dc:	f043 0310 	orr.w	r3, r3, #16
 80243e0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 80243e4:	69fb      	ldr	r3, [r7, #28]
 80243e6:	781b      	ldrb	r3, [r3, #0]
 80243e8:	2b55      	cmp	r3, #85	@ 0x55
 80243ea:	d105      	bne.n	80243f8 <upload_handler+0x18c>
 80243ec:	68bb      	ldr	r3, [r7, #8]
 80243ee:	2b09      	cmp	r3, #9
 80243f0:	d102      	bne.n	80243f8 <upload_handler+0x18c>
 80243f2:	69f8      	ldr	r0, [r7, #28]
 80243f4:	f7ff fec0 	bl	8024178 <close_uploaded_file>
  (void) ev_data;
}
 80243f8:	3724      	adds	r7, #36	@ 0x24
 80243fa:	46bd      	mov	sp, r7
 80243fc:	bd90      	pop	{r4, r7, pc}
 80243fe:	bf00      	nop
 8024400:	24000258 	.word	0x24000258
 8024404:	0803b028 	.word	0x0803b028
 8024408:	0802cd50 	.word	0x0802cd50
 802440c:	0802cef0 	.word	0x0802cef0
 8024410:	0802cf14 	.word	0x0802cf14
 8024414:	0802cdf4 	.word	0x0802cdf4
 8024418:	0802cf24 	.word	0x0802cf24
 802441c:	0802cf38 	.word	0x0802cf38

08024420 <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 8024420:	b590      	push	{r4, r7, lr}
 8024422:	b08f      	sub	sp, #60	@ 0x3c
 8024424:	af02      	add	r7, sp, #8
 8024426:	f107 0408 	add.w	r4, r7, #8
 802442a:	e884 0003 	stmia.w	r4, {r0, r1}
 802442e:	607a      	str	r2, [r7, #4]
 8024430:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 8024432:	f107 0310 	add.w	r3, r7, #16
 8024436:	2218      	movs	r2, #24
 8024438:	2100      	movs	r1, #0
 802443a:	4618      	mov	r0, r3
 802443c:	f003 f9a8 	bl	8027790 <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8024440:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8024444:	490d      	ldr	r1, [pc, #52]	@ (802447c <get_file_name_from_uri+0x5c>)
 8024446:	4618      	mov	r0, r3
 8024448:	f7f2 fa90 	bl	801696c <mg_str_s>
 802444c:	f107 0310 	add.w	r3, r7, #16
 8024450:	9300      	str	r3, [sp, #0]
 8024452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8024456:	cb0c      	ldmia	r3, {r2, r3}
 8024458:	f107 0108 	add.w	r1, r7, #8
 802445c:	c903      	ldmia	r1, {r0, r1}
 802445e:	f7f2 fb8f 	bl	8016b80 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 8024462:	69b8      	ldr	r0, [r7, #24]
 8024464:	69f9      	ldr	r1, [r7, #28]
 8024466:	2300      	movs	r3, #0
 8024468:	9300      	str	r3, [sp, #0]
 802446a:	683b      	ldr	r3, [r7, #0]
 802446c:	687a      	ldr	r2, [r7, #4]
 802446e:	f7e6 fa1c 	bl	800a8aa <mg_url_decode>
}
 8024472:	bf00      	nop
 8024474:	3734      	adds	r7, #52	@ 0x34
 8024476:	46bd      	mov	sp, r7
 8024478:	bd90      	pop	{r4, r7, pc}
 802447a:	bf00      	nop
 802447c:	0802cf40 	.word	0x0802cf40

08024480 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8024480:	b580      	push	{r7, lr}
 8024482:	b09e      	sub	sp, #120	@ 0x78
 8024484:	af00      	add	r7, sp, #0
 8024486:	60f8      	str	r0, [r7, #12]
 8024488:	60b9      	str	r1, [r7, #8]
 802448a:	607a      	str	r2, [r7, #4]
 802448c:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 802448e:	68fb      	ldr	r3, [r7, #12]
 8024490:	3388      	adds	r3, #136	@ 0x88
 8024492:	677b      	str	r3, [r7, #116]	@ 0x74
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 8024494:	2218      	movs	r2, #24
 8024496:	2100      	movs	r1, #0
 8024498:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 802449a:	f003 f979 	bl	8027790 <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 802449e:	f107 0210 	add.w	r2, r7, #16
 80244a2:	68b9      	ldr	r1, [r7, #8]
 80244a4:	2364      	movs	r3, #100	@ 0x64
 80244a6:	3108      	adds	r1, #8
 80244a8:	c903      	ldmia	r1, {r0, r1}
 80244aa:	f7ff ffb9 	bl	8024420 <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 80244ae:	68bb      	ldr	r3, [r7, #8]
 80244b0:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 80244b4:	f107 0210 	add.w	r2, r7, #16
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	4610      	mov	r0, r2
 80244bc:	4798      	blx	r3
 80244be:	4602      	mov	r2, r0
 80244c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80244c2:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 80244c4:	4b29      	ldr	r3, [pc, #164]	@ (802456c <prep_upload+0xec>)
 80244c6:	681b      	ldr	r3, [r3, #0]
 80244c8:	2b02      	cmp	r3, #2
 80244ca:	dd10      	ble.n	80244ee <prep_upload+0x6e>
 80244cc:	4b28      	ldr	r3, [pc, #160]	@ (8024570 <prep_upload+0xf0>)
 80244ce:	f240 129f 	movw	r2, #415	@ 0x19f
 80244d2:	4928      	ldr	r1, [pc, #160]	@ (8024574 <prep_upload+0xf4>)
 80244d4:	2003      	movs	r0, #3
 80244d6:	f7ea fa49 	bl	800e96c <mg_log_prefix>
 80244da:	68bb      	ldr	r3, [r7, #8]
 80244dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80244e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80244e2:	68db      	ldr	r3, [r3, #12]
 80244e4:	f107 0110 	add.w	r1, r7, #16
 80244e8:	4823      	ldr	r0, [pc, #140]	@ (8024578 <prep_upload+0xf8>)
 80244ea:	f7ea fa8f 	bl	800ea0c <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 80244ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80244f0:	2255      	movs	r2, #85	@ 0x55
 80244f2:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 80244f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80244f6:	68db      	ldr	r3, [r3, #12]
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d10e      	bne.n	802451a <prep_upload+0x9a>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 80244fc:	4b1f      	ldr	r3, [pc, #124]	@ (802457c <prep_upload+0xfc>)
 80244fe:	4a20      	ldr	r2, [pc, #128]	@ (8024580 <prep_upload+0x100>)
 8024500:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8024504:	68f8      	ldr	r0, [r7, #12]
 8024506:	f7e7 fb39 	bl	800bb7c <mg_http_reply>
    c->is_draining = 1;
 802450a:	68fa      	ldr	r2, [r7, #12]
 802450c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8024510:	f043 0310 	orr.w	r3, r3, #16
 8024514:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8024518:	e023      	b.n	8024562 <prep_upload+0xe2>
    us->expected = hm->body.len;              // Store number of bytes we expect
 802451a:	68bb      	ldr	r3, [r7, #8]
 802451c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8024520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024522:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8024524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024526:	683a      	ldr	r2, [r7, #0]
 8024528:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 802452a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802452c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8024530:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8024532:	68fb      	ldr	r3, [r7, #12]
 8024534:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8024538:	68bb      	ldr	r3, [r7, #8]
 802453a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 802453e:	461a      	mov	r2, r3
 8024540:	2100      	movs	r1, #0
 8024542:	f7e9 f9fb 	bl	800d93c <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8024546:	68fb      	ldr	r3, [r7, #12]
 8024548:	4a0e      	ldr	r2, [pc, #56]	@ (8024584 <prep_upload+0x104>)
 802454a:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 802454c:	68fb      	ldr	r3, [r7, #12]
 802454e:	2200      	movs	r2, #0
 8024550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8024554:	68fb      	ldr	r3, [r7, #12]
 8024556:	3340      	adds	r3, #64	@ 0x40
 8024558:	461a      	mov	r2, r3
 802455a:	2107      	movs	r1, #7
 802455c:	68f8      	ldr	r0, [r7, #12]
 802455e:	f7e4 fb6d 	bl	8008c3c <mg_call>
}
 8024562:	bf00      	nop
 8024564:	3778      	adds	r7, #120	@ 0x78
 8024566:	46bd      	mov	sp, r7
 8024568:	bd80      	pop	{r7, pc}
 802456a:	bf00      	nop
 802456c:	24000258 	.word	0x24000258
 8024570:	0803b038 	.word	0x0803b038
 8024574:	0802cd50 	.word	0x0802cd50
 8024578:	0802cf4c 	.word	0x0802cf4c
 802457c:	0802cf68 	.word	0x0802cf68
 8024580:	0802cf7c 	.word	0x0802cf7c
 8024584:	0802426d 	.word	0x0802426d

08024588 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8024588:	b580      	push	{r7, lr}
 802458a:	b08e      	sub	sp, #56	@ 0x38
 802458c:	af02      	add	r7, sp, #8
 802458e:	60f8      	str	r0, [r7, #12]
 8024590:	60b9      	str	r1, [r7, #8]
 8024592:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8024594:	68fb      	ldr	r3, [r7, #12]
 8024596:	3388      	adds	r3, #136	@ 0x88
 8024598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 802459e:	68bb      	ldr	r3, [r7, #8]
 80245a0:	2b0a      	cmp	r3, #10
 80245a2:	d153      	bne.n	802464c <handle_uploads+0xc4>
 80245a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80245a6:	781b      	ldrb	r3, [r3, #0]
 80245a8:	2b00      	cmp	r3, #0
 80245aa:	d14f      	bne.n	802464c <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 80245ac:	f107 0314 	add.w	r3, r7, #20
 80245b0:	4928      	ldr	r1, [pc, #160]	@ (8024654 <handle_uploads+0xcc>)
 80245b2:	4618      	mov	r0, r3
 80245b4:	f7f2 f9da 	bl	801696c <mg_str_s>
 80245b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80245ba:	f107 0314 	add.w	r3, r7, #20
 80245be:	cb0c      	ldmia	r3, {r2, r3}
 80245c0:	c903      	ldmia	r1, {r0, r1}
 80245c2:	f7f2 fa54 	bl	8016a6e <mg_strcmp>
 80245c6:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 80245c8:	2b00      	cmp	r3, #0
 80245ca:	d13f      	bne.n	802464c <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 80245cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80245ce:	f7ff fbf1 	bl	8023db4 <find_handler>
 80245d2:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 80245d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d021      	beq.n	802461e <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 80245da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80245dc:	685b      	ldr	r3, [r3, #4]
 80245de:	491e      	ldr	r1, [pc, #120]	@ (8024658 <handle_uploads+0xd0>)
 80245e0:	4618      	mov	r0, r3
 80245e2:	f7db fe95 	bl	8000310 <strcmp>
 80245e6:	4603      	mov	r3, r0
    if (h != NULL &&
 80245e8:	2b00      	cmp	r3, #0
 80245ea:	d008      	beq.n	80245fe <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 80245ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80245ee:	685b      	ldr	r3, [r3, #4]
 80245f0:	491a      	ldr	r1, [pc, #104]	@ (802465c <handle_uploads+0xd4>)
 80245f2:	4618      	mov	r0, r3
 80245f4:	f7db fe8c 	bl	8000310 <strcmp>
 80245f8:	4603      	mov	r3, r0
 80245fa:	2b00      	cmp	r3, #0
 80245fc:	d10f      	bne.n	802461e <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 80245fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024600:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 8024602:	6a3b      	ldr	r3, [r7, #32]
 8024604:	699a      	ldr	r2, [r3, #24]
 8024606:	6a3b      	ldr	r3, [r7, #32]
 8024608:	69d9      	ldr	r1, [r3, #28]
 802460a:	6a3b      	ldr	r3, [r7, #32]
 802460c:	6a1b      	ldr	r3, [r3, #32]
 802460e:	9300      	str	r3, [sp, #0]
 8024610:	460b      	mov	r3, r1
 8024612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024614:	68f8      	ldr	r0, [r7, #12]
 8024616:	f7ff ff33 	bl	8024480 <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 802461a:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 802461c:	e016      	b.n	802464c <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 802461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024620:	2b00      	cmp	r3, #0
 8024622:	d013      	beq.n	802464c <handle_uploads+0xc4>
 8024624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024626:	685b      	ldr	r3, [r3, #4]
 8024628:	490d      	ldr	r1, [pc, #52]	@ (8024660 <handle_uploads+0xd8>)
 802462a:	4618      	mov	r0, r3
 802462c:	f7db fe70 	bl	8000310 <strcmp>
 8024630:	4603      	mov	r3, r0
 8024632:	2b00      	cmp	r3, #0
 8024634:	d10a      	bne.n	802464c <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 8024636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024638:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 802463a:	69fb      	ldr	r3, [r7, #28]
 802463c:	699a      	ldr	r2, [r3, #24]
 802463e:	4b09      	ldr	r3, [pc, #36]	@ (8024664 <handle_uploads+0xdc>)
 8024640:	9300      	str	r3, [sp, #0]
 8024642:	4b09      	ldr	r3, [pc, #36]	@ (8024668 <handle_uploads+0xe0>)
 8024644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024646:	68f8      	ldr	r0, [r7, #12]
 8024648:	f7ff ff1a 	bl	8024480 <prep_upload>
}
 802464c:	bf00      	nop
 802464e:	3730      	adds	r7, #48	@ 0x30
 8024650:	46bd      	mov	sp, r7
 8024652:	bd80      	pop	{r7, pc}
 8024654:	0802cfb8 	.word	0x0802cfb8
 8024658:	0802ccd4 	.word	0x0802ccd4
 802465c:	0802ccc4 	.word	0x0802ccc4
 8024660:	0802cd84 	.word	0x0802cd84
 8024664:	08024205 	.word	0x08024205
 8024668:	080241bd 	.word	0x080241bd

0802466c <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 802466c:	b580      	push	{r7, lr}
 802466e:	b088      	sub	sp, #32
 8024670:	af02      	add	r7, sp, #8
 8024672:	60f8      	str	r0, [r7, #12]
 8024674:	60b9      	str	r1, [r7, #8]
 8024676:	607a      	str	r2, [r7, #4]
 8024678:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 802467a:	68bb      	ldr	r3, [r7, #8]
 802467c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8024680:	2b00      	cmp	r3, #0
 8024682:	d01c      	beq.n	80246be <handle_action+0x52>
    start_fn(hm->body);
 8024684:	68ba      	ldr	r2, [r7, #8]
 8024686:	683b      	ldr	r3, [r7, #0]
 8024688:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 802468c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024690:	4798      	blx	r3
    if (check_fn()) {
 8024692:	687b      	ldr	r3, [r7, #4]
 8024694:	4798      	blx	r3
 8024696:	4603      	mov	r3, r0
 8024698:	2b00      	cmp	r3, #0
 802469a:	d009      	beq.n	80246b0 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 802469c:	68fb      	ldr	r3, [r7, #12]
 802469e:	3388      	adds	r3, #136	@ 0x88
 80246a0:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 80246a2:	697b      	ldr	r3, [r7, #20]
 80246a4:	2241      	movs	r2, #65	@ 0x41
 80246a6:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 80246a8:	697b      	ldr	r3, [r7, #20]
 80246aa:	687a      	ldr	r2, [r7, #4]
 80246ac:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 80246ae:	e015      	b.n	80246dc <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 80246b0:	4b0c      	ldr	r3, [pc, #48]	@ (80246e4 <handle_action+0x78>)
 80246b2:	4a0d      	ldr	r2, [pc, #52]	@ (80246e8 <handle_action+0x7c>)
 80246b4:	21c8      	movs	r1, #200	@ 0xc8
 80246b6:	68f8      	ldr	r0, [r7, #12]
 80246b8:	f7e7 fa60 	bl	800bb7c <mg_http_reply>
}
 80246bc:	e00e      	b.n	80246dc <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 80246be:	687b      	ldr	r3, [r7, #4]
 80246c0:	4798      	blx	r3
 80246c2:	4603      	mov	r3, r0
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	d001      	beq.n	80246cc <handle_action+0x60>
 80246c8:	4b08      	ldr	r3, [pc, #32]	@ (80246ec <handle_action+0x80>)
 80246ca:	e000      	b.n	80246ce <handle_action+0x62>
 80246cc:	4b05      	ldr	r3, [pc, #20]	@ (80246e4 <handle_action+0x78>)
 80246ce:	9300      	str	r3, [sp, #0]
 80246d0:	4b07      	ldr	r3, [pc, #28]	@ (80246f0 <handle_action+0x84>)
 80246d2:	4a05      	ldr	r2, [pc, #20]	@ (80246e8 <handle_action+0x7c>)
 80246d4:	21c8      	movs	r1, #200	@ 0xc8
 80246d6:	68f8      	ldr	r0, [r7, #12]
 80246d8:	f7e7 fa50 	bl	800bb7c <mg_http_reply>
}
 80246dc:	bf00      	nop
 80246de:	3718      	adds	r7, #24
 80246e0:	46bd      	mov	sp, r7
 80246e2:	bd80      	pop	{r7, pc}
 80246e4:	0802cfc0 	.word	0x0802cfc0
 80246e8:	0802cf7c 	.word	0x0802cf7c
 80246ec:	0802cfc8 	.word	0x0802cfc8
 80246f0:	0802cdc8 	.word	0x0802cdc8

080246f4 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 80246f4:	b580      	push	{r7, lr}
 80246f6:	b08e      	sub	sp, #56	@ 0x38
 80246f8:	af04      	add	r7, sp, #16
 80246fa:	60f8      	str	r0, [r7, #12]
 80246fc:	60b9      	str	r1, [r7, #8]
 80246fe:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	681b      	ldr	r3, [r3, #0]
 8024704:	1d19      	adds	r1, r3, #4
 8024706:	687a      	ldr	r2, [r7, #4]
 8024708:	6011      	str	r1, [r2, #0]
 802470a:	681b      	ldr	r3, [r3, #0]
 802470c:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	681b      	ldr	r3, [r3, #0]
 8024712:	1d19      	adds	r1, r3, #4
 8024714:	687a      	ldr	r2, [r7, #4]
 8024716:	6011      	str	r1, [r2, #0]
 8024718:	681b      	ldr	r3, [r3, #0]
 802471a:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 802471c:	2300      	movs	r3, #0
 802471e:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8024720:	2300      	movs	r3, #0
 8024722:	627b      	str	r3, [r7, #36]	@ 0x24
 8024724:	e0bf      	b.n	80248a6 <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 8024726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024728:	4613      	mov	r3, r2
 802472a:	005b      	lsls	r3, r3, #1
 802472c:	4413      	add	r3, r2
 802472e:	00db      	lsls	r3, r3, #3
 8024730:	461a      	mov	r2, r3
 8024732:	69bb      	ldr	r3, [r7, #24]
 8024734:	4413      	add	r3, r2
 8024736:	68db      	ldr	r3, [r3, #12]
 8024738:	697a      	ldr	r2, [r7, #20]
 802473a:	4413      	add	r3, r2
 802473c:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 802473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024740:	2b00      	cmp	r3, #0
 8024742:	d101      	bne.n	8024748 <print_struct+0x54>
 8024744:	4960      	ldr	r1, [pc, #384]	@ (80248c8 <print_struct+0x1d4>)
 8024746:	e000      	b.n	802474a <print_struct+0x56>
 8024748:	4960      	ldr	r1, [pc, #384]	@ (80248cc <print_struct+0x1d8>)
 802474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802474c:	4613      	mov	r3, r2
 802474e:	005b      	lsls	r3, r3, #1
 8024750:	4413      	add	r3, r2
 8024752:	00db      	lsls	r3, r3, #3
 8024754:	461a      	mov	r2, r3
 8024756:	69bb      	ldr	r3, [r7, #24]
 8024758:	4413      	add	r3, r2
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	9302      	str	r3, [sp, #8]
 802475e:	2300      	movs	r3, #0
 8024760:	9301      	str	r3, [sp, #4]
 8024762:	4b5b      	ldr	r3, [pc, #364]	@ (80248d0 <print_struct+0x1dc>)
 8024764:	9300      	str	r3, [sp, #0]
 8024766:	460b      	mov	r3, r1
 8024768:	4a5a      	ldr	r2, [pc, #360]	@ (80248d4 <print_struct+0x1e0>)
 802476a:	68b9      	ldr	r1, [r7, #8]
 802476c:	68f8      	ldr	r0, [r7, #12]
 802476e:	f7e5 f8fc 	bl	800996a <mg_xprintf>
 8024772:	4602      	mov	r2, r0
 8024774:	6a3b      	ldr	r3, [r7, #32]
 8024776:	4413      	add	r3, r2
 8024778:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 802477a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802477c:	4613      	mov	r3, r2
 802477e:	005b      	lsls	r3, r3, #1
 8024780:	4413      	add	r3, r2
 8024782:	00db      	lsls	r3, r3, #3
 8024784:	461a      	mov	r2, r3
 8024786:	69bb      	ldr	r3, [r7, #24]
 8024788:	4413      	add	r3, r2
 802478a:	685b      	ldr	r3, [r3, #4]
 802478c:	4952      	ldr	r1, [pc, #328]	@ (80248d8 <print_struct+0x1e4>)
 802478e:	4618      	mov	r0, r3
 8024790:	f7db fdbe 	bl	8000310 <strcmp>
 8024794:	4603      	mov	r3, r0
 8024796:	2b00      	cmp	r3, #0
 8024798:	d10b      	bne.n	80247b2 <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 802479a:	693b      	ldr	r3, [r7, #16]
 802479c:	681b      	ldr	r3, [r3, #0]
 802479e:	4a4f      	ldr	r2, [pc, #316]	@ (80248dc <print_struct+0x1e8>)
 80247a0:	68b9      	ldr	r1, [r7, #8]
 80247a2:	68f8      	ldr	r0, [r7, #12]
 80247a4:	f7e5 f8e1 	bl	800996a <mg_xprintf>
 80247a8:	4602      	mov	r2, r0
 80247aa:	6a3b      	ldr	r3, [r7, #32]
 80247ac:	4413      	add	r3, r2
 80247ae:	623b      	str	r3, [r7, #32]
 80247b0:	e076      	b.n	80248a0 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 80247b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80247b4:	4613      	mov	r3, r2
 80247b6:	005b      	lsls	r3, r3, #1
 80247b8:	4413      	add	r3, r2
 80247ba:	00db      	lsls	r3, r3, #3
 80247bc:	461a      	mov	r2, r3
 80247be:	69bb      	ldr	r3, [r7, #24]
 80247c0:	4413      	add	r3, r2
 80247c2:	685b      	ldr	r3, [r3, #4]
 80247c4:	4946      	ldr	r1, [pc, #280]	@ (80248e0 <print_struct+0x1ec>)
 80247c6:	4618      	mov	r0, r3
 80247c8:	f7db fda2 	bl	8000310 <strcmp>
 80247cc:	4603      	mov	r3, r0
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	d11d      	bne.n	802480e <print_struct+0x11a>
      const char *fmt = a[i].format;
 80247d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80247d4:	4613      	mov	r3, r2
 80247d6:	005b      	lsls	r3, r3, #1
 80247d8:	4413      	add	r3, r2
 80247da:	00db      	lsls	r3, r3, #3
 80247dc:	461a      	mov	r2, r3
 80247de:	69bb      	ldr	r3, [r7, #24]
 80247e0:	4413      	add	r3, r2
 80247e2:	689b      	ldr	r3, [r3, #8]
 80247e4:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 80247e6:	69fb      	ldr	r3, [r7, #28]
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d101      	bne.n	80247f0 <print_struct+0xfc>
 80247ec:	4b3d      	ldr	r3, [pc, #244]	@ (80248e4 <print_struct+0x1f0>)
 80247ee:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 80247f0:	693b      	ldr	r3, [r7, #16]
 80247f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247f6:	e9cd 2300 	strd	r2, r3, [sp]
 80247fa:	69fa      	ldr	r2, [r7, #28]
 80247fc:	68b9      	ldr	r1, [r7, #8]
 80247fe:	68f8      	ldr	r0, [r7, #12]
 8024800:	f7e5 f8b3 	bl	800996a <mg_xprintf>
 8024804:	4602      	mov	r2, r0
 8024806:	6a3b      	ldr	r3, [r7, #32]
 8024808:	4413      	add	r3, r2
 802480a:	623b      	str	r3, [r7, #32]
 802480c:	e048      	b.n	80248a0 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 802480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024810:	4613      	mov	r3, r2
 8024812:	005b      	lsls	r3, r3, #1
 8024814:	4413      	add	r3, r2
 8024816:	00db      	lsls	r3, r3, #3
 8024818:	461a      	mov	r2, r3
 802481a:	69bb      	ldr	r3, [r7, #24]
 802481c:	4413      	add	r3, r2
 802481e:	685b      	ldr	r3, [r3, #4]
 8024820:	4931      	ldr	r1, [pc, #196]	@ (80248e8 <print_struct+0x1f4>)
 8024822:	4618      	mov	r0, r3
 8024824:	f7db fd74 	bl	8000310 <strcmp>
 8024828:	4603      	mov	r3, r0
 802482a:	2b00      	cmp	r3, #0
 802482c:	d110      	bne.n	8024850 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 802482e:	693b      	ldr	r3, [r7, #16]
 8024830:	781b      	ldrb	r3, [r3, #0]
 8024832:	2b00      	cmp	r3, #0
 8024834:	d001      	beq.n	802483a <print_struct+0x146>
 8024836:	4b2d      	ldr	r3, [pc, #180]	@ (80248ec <print_struct+0x1f8>)
 8024838:	e000      	b.n	802483c <print_struct+0x148>
 802483a:	4b2d      	ldr	r3, [pc, #180]	@ (80248f0 <print_struct+0x1fc>)
 802483c:	4a2d      	ldr	r2, [pc, #180]	@ (80248f4 <print_struct+0x200>)
 802483e:	68b9      	ldr	r1, [r7, #8]
 8024840:	68f8      	ldr	r0, [r7, #12]
 8024842:	f7e5 f892 	bl	800996a <mg_xprintf>
 8024846:	4602      	mov	r2, r0
 8024848:	6a3b      	ldr	r3, [r7, #32]
 802484a:	4413      	add	r3, r2
 802484c:	623b      	str	r3, [r7, #32]
 802484e:	e027      	b.n	80248a0 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 8024850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024852:	4613      	mov	r3, r2
 8024854:	005b      	lsls	r3, r3, #1
 8024856:	4413      	add	r3, r2
 8024858:	00db      	lsls	r3, r3, #3
 802485a:	461a      	mov	r2, r3
 802485c:	69bb      	ldr	r3, [r7, #24]
 802485e:	4413      	add	r3, r2
 8024860:	685b      	ldr	r3, [r3, #4]
 8024862:	4925      	ldr	r1, [pc, #148]	@ (80248f8 <print_struct+0x204>)
 8024864:	4618      	mov	r0, r3
 8024866:	f7db fd53 	bl	8000310 <strcmp>
 802486a:	4603      	mov	r3, r0
 802486c:	2b00      	cmp	r3, #0
 802486e:	d10e      	bne.n	802488e <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8024870:	693b      	ldr	r3, [r7, #16]
 8024872:	9301      	str	r3, [sp, #4]
 8024874:	2300      	movs	r3, #0
 8024876:	9300      	str	r3, [sp, #0]
 8024878:	4b15      	ldr	r3, [pc, #84]	@ (80248d0 <print_struct+0x1dc>)
 802487a:	4a20      	ldr	r2, [pc, #128]	@ (80248fc <print_struct+0x208>)
 802487c:	68b9      	ldr	r1, [r7, #8]
 802487e:	68f8      	ldr	r0, [r7, #12]
 8024880:	f7e5 f873 	bl	800996a <mg_xprintf>
 8024884:	4602      	mov	r2, r0
 8024886:	6a3b      	ldr	r3, [r7, #32]
 8024888:	4413      	add	r3, r2
 802488a:	623b      	str	r3, [r7, #32]
 802488c:	e008      	b.n	80248a0 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 802488e:	4a1c      	ldr	r2, [pc, #112]	@ (8024900 <print_struct+0x20c>)
 8024890:	68b9      	ldr	r1, [r7, #8]
 8024892:	68f8      	ldr	r0, [r7, #12]
 8024894:	f7e5 f869 	bl	800996a <mg_xprintf>
 8024898:	4602      	mov	r2, r0
 802489a:	6a3b      	ldr	r3, [r7, #32]
 802489c:	4413      	add	r3, r2
 802489e:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 80248a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80248a2:	3301      	adds	r3, #1
 80248a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80248a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80248a8:	4613      	mov	r3, r2
 80248aa:	005b      	lsls	r3, r3, #1
 80248ac:	4413      	add	r3, r2
 80248ae:	00db      	lsls	r3, r3, #3
 80248b0:	461a      	mov	r2, r3
 80248b2:	69bb      	ldr	r3, [r7, #24]
 80248b4:	4413      	add	r3, r2
 80248b6:	681b      	ldr	r3, [r3, #0]
 80248b8:	2b00      	cmp	r3, #0
 80248ba:	f47f af34 	bne.w	8024726 <print_struct+0x32>
    }
  }
  return len;
 80248be:	6a3b      	ldr	r3, [r7, #32]
}
 80248c0:	4618      	mov	r0, r3
 80248c2:	3728      	adds	r7, #40	@ 0x28
 80248c4:	46bd      	mov	sp, r7
 80248c6:	bd80      	pop	{r7, pc}
 80248c8:	0802cdf4 	.word	0x0802cdf4
 80248cc:	0802cfd0 	.word	0x0802cfd0
 80248d0:	08013671 	.word	0x08013671
 80248d4:	0802cfd4 	.word	0x0802cfd4
 80248d8:	0802cb9c 	.word	0x0802cb9c
 80248dc:	0802cfdc 	.word	0x0802cfdc
 80248e0:	0802cc54 	.word	0x0802cc54
 80248e4:	0802cfe0 	.word	0x0802cfe0
 80248e8:	0802cbd8 	.word	0x0802cbd8
 80248ec:	0802cfc8 	.word	0x0802cfc8
 80248f0:	0802cfc0 	.word	0x0802cfc0
 80248f4:	0802cdc8 	.word	0x0802cdc8
 80248f8:	0802cbc8 	.word	0x0802cbc8
 80248fc:	0802cfe4 	.word	0x0802cfe4
 8024900:	0802cfe8 	.word	0x0802cfe8

08024904 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 8024904:	b580      	push	{r7, lr}
 8024906:	b0a8      	sub	sp, #160	@ 0xa0
 8024908:	af04      	add	r7, sp, #16
 802490a:	60f8      	str	r0, [r7, #12]
 802490c:	60b9      	str	r1, [r7, #8]
 802490e:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	69db      	ldr	r3, [r3, #28]
 8024914:	4619      	mov	r1, r3
 8024916:	2001      	movs	r0, #1
 8024918:	f001 f88c 	bl	8025a34 <calloc>
 802491c:	4603      	mov	r3, r0
 802491e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8024922:	687b      	ldr	r3, [r7, #4]
 8024924:	6a1b      	ldr	r3, [r3, #32]
 8024926:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802492a:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 802492c:	68bb      	ldr	r3, [r7, #8]
 802492e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8024932:	2b00      	cmp	r3, #0
 8024934:	f000 80da 	beq.w	8024aec <handle_object+0x1e8>
 8024938:	687b      	ldr	r3, [r7, #4]
 802493a:	69db      	ldr	r3, [r3, #28]
 802493c:	2b00      	cmp	r3, #0
 802493e:	f000 80d5 	beq.w	8024aec <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 8024942:	687b      	ldr	r3, [r7, #4]
 8024944:	69db      	ldr	r3, [r3, #28]
 8024946:	4619      	mov	r1, r3
 8024948:	2001      	movs	r0, #1
 802494a:	f001 f873 	bl	8025a34 <calloc>
 802494e:	4603      	mov	r3, r0
 8024950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	69db      	ldr	r3, [r3, #28]
 8024958:	461a      	mov	r2, r3
 802495a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 802495e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8024962:	f003 f84e 	bl	8027a02 <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8024966:	2300      	movs	r3, #0
 8024968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802496c:	e08e      	b.n	8024a8c <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	6999      	ldr	r1, [r3, #24]
 8024972:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8024976:	4613      	mov	r3, r2
 8024978:	005b      	lsls	r3, r3, #1
 802497a:	4413      	add	r3, r2
 802497c:	00db      	lsls	r3, r3, #3
 802497e:	440b      	add	r3, r1
 8024980:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8024984:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024988:	681b      	ldr	r3, [r3, #0]
 802498a:	f107 0010 	add.w	r0, r7, #16
 802498e:	4a62      	ldr	r2, [pc, #392]	@ (8024b18 <handle_object+0x214>)
 8024990:	2164      	movs	r1, #100	@ 0x64
 8024992:	f7ee fc27 	bl	80131e4 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 8024996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802499a:	685b      	ldr	r3, [r3, #4]
 802499c:	495f      	ldr	r1, [pc, #380]	@ (8024b1c <handle_object+0x218>)
 802499e:	4618      	mov	r0, r3
 80249a0:	f7db fcb6 	bl	8000310 <strcmp>
 80249a4:	4603      	mov	r3, r0
 80249a6:	2b00      	cmp	r3, #0
 80249a8:	d11c      	bne.n	80249e4 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 80249aa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80249ae:	f107 0210 	add.w	r2, r7, #16
 80249b2:	68b9      	ldr	r1, [r7, #8]
 80249b4:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80249b8:	c903      	ldmia	r1, {r0, r1}
 80249ba:	f7e9 fe98 	bl	800e6ee <mg_json_get_num>
 80249be:	4603      	mov	r3, r0
 80249c0:	2b00      	cmp	r3, #0
 80249c2:	d05e      	beq.n	8024a82 <handle_object+0x17e>
          int v = (int) d;
 80249c4:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80249c8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80249cc:	ee17 3a90 	vmov	r3, s15
 80249d0:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 80249d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80249d6:	68db      	ldr	r3, [r3, #12]
 80249d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80249dc:	4413      	add	r3, r2
 80249de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80249e0:	601a      	str	r2, [r3, #0]
 80249e2:	e04e      	b.n	8024a82 <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 80249e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80249e8:	685b      	ldr	r3, [r3, #4]
 80249ea:	494d      	ldr	r1, [pc, #308]	@ (8024b20 <handle_object+0x21c>)
 80249ec:	4618      	mov	r0, r3
 80249ee:	f7db fc8f 	bl	8000310 <strcmp>
 80249f2:	4603      	mov	r3, r0
 80249f4:	2b00      	cmp	r3, #0
 80249f6:	d10e      	bne.n	8024a16 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 80249f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80249fc:	68db      	ldr	r3, [r3, #12]
 80249fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8024a02:	4413      	add	r3, r2
 8024a04:	f107 0210 	add.w	r2, r7, #16
 8024a08:	68b9      	ldr	r1, [r7, #8]
 8024a0a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8024a0e:	c903      	ldmia	r1, {r0, r1}
 8024a10:	f7e9 feb2 	bl	800e778 <mg_json_get_bool>
 8024a14:	e035      	b.n	8024a82 <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 8024a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024a1a:	685b      	ldr	r3, [r3, #4]
 8024a1c:	4941      	ldr	r1, [pc, #260]	@ (8024b24 <handle_object+0x220>)
 8024a1e:	4618      	mov	r0, r3
 8024a20:	f7db fc76 	bl	8000310 <strcmp>
 8024a24:	4603      	mov	r3, r0
 8024a26:	2b00      	cmp	r3, #0
 8024a28:	d10e      	bne.n	8024a48 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8024a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024a2e:	68db      	ldr	r3, [r3, #12]
 8024a30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8024a34:	4413      	add	r3, r2
 8024a36:	f107 0210 	add.w	r2, r7, #16
 8024a3a:	68b9      	ldr	r1, [r7, #8]
 8024a3c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8024a40:	c903      	ldmia	r1, {r0, r1}
 8024a42:	f7e9 fe54 	bl	800e6ee <mg_json_get_num>
 8024a46:	e01c      	b.n	8024a82 <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8024a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024a4c:	685b      	ldr	r3, [r3, #4]
 8024a4e:	4936      	ldr	r1, [pc, #216]	@ (8024b28 <handle_object+0x224>)
 8024a50:	4618      	mov	r0, r3
 8024a52:	f7db fc5d 	bl	8000310 <strcmp>
 8024a56:	4603      	mov	r3, r0
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	d112      	bne.n	8024a82 <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8024a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024a60:	68db      	ldr	r3, [r3, #12]
 8024a62:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8024a66:	18d0      	adds	r0, r2, r3
 8024a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8024a6c:	691b      	ldr	r3, [r3, #16]
 8024a6e:	f107 0210 	add.w	r2, r7, #16
 8024a72:	68b9      	ldr	r1, [r7, #8]
 8024a74:	9300      	str	r3, [sp, #0]
 8024a76:	4603      	mov	r3, r0
 8024a78:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8024a7c:	c903      	ldmia	r1, {r0, r1}
 8024a7e:	f7ff f9c5 	bl	8023e0c <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8024a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8024a86:	3301      	adds	r3, #1
 8024a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8024a8c:	687b      	ldr	r3, [r7, #4]
 8024a8e:	6999      	ldr	r1, [r3, #24]
 8024a90:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8024a94:	4613      	mov	r3, r2
 8024a96:	005b      	lsls	r3, r3, #1
 8024a98:	4413      	add	r3, r2
 8024a9a:	00db      	lsls	r3, r3, #3
 8024a9c:	440b      	add	r3, r1
 8024a9e:	681b      	ldr	r3, [r3, #0]
 8024aa0:	2b00      	cmp	r3, #0
 8024aa2:	f47f af64 	bne.w	802496e <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 8024aa6:	687b      	ldr	r3, [r7, #4]
 8024aa8:	69db      	ldr	r3, [r3, #28]
 8024aaa:	461a      	mov	r2, r3
 8024aac:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8024ab0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8024ab4:	f002 fe42 	bl	802773c <memcmp>
 8024ab8:	4603      	mov	r3, r0
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d004      	beq.n	8024ac8 <handle_object+0x1c4>
 8024abe:	4b1b      	ldr	r3, [pc, #108]	@ (8024b2c <handle_object+0x228>)
 8024ac0:	681b      	ldr	r3, [r3, #0]
 8024ac2:	3301      	adds	r3, #1
 8024ac4:	4a19      	ldr	r2, [pc, #100]	@ (8024b2c <handle_object+0x228>)
 8024ac6:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 8024ac8:	687b      	ldr	r3, [r7, #4]
 8024aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	d004      	beq.n	8024ada <handle_object+0x1d6>
 8024ad0:	687b      	ldr	r3, [r7, #4]
 8024ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024ad4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8024ad8:	4798      	blx	r3
    free(tmp);
 8024ada:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8024ade:	f000 ffcd 	bl	8025a7c <free>
    h->getter(data);  // Re-sync again after setting
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	6a1b      	ldr	r3, [r3, #32]
 8024ae6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8024aea:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	699b      	ldr	r3, [r3, #24]
 8024af0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8024af4:	9202      	str	r2, [sp, #8]
 8024af6:	9301      	str	r3, [sp, #4]
 8024af8:	4b0d      	ldr	r3, [pc, #52]	@ (8024b30 <handle_object+0x22c>)
 8024afa:	9300      	str	r3, [sp, #0]
 8024afc:	4b0d      	ldr	r3, [pc, #52]	@ (8024b34 <handle_object+0x230>)
 8024afe:	4a0e      	ldr	r2, [pc, #56]	@ (8024b38 <handle_object+0x234>)
 8024b00:	21c8      	movs	r1, #200	@ 0xc8
 8024b02:	68f8      	ldr	r0, [r7, #12]
 8024b04:	f7e7 f83a 	bl	800bb7c <mg_http_reply>
                data);
  free(data);
 8024b08:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8024b0c:	f000 ffb6 	bl	8025a7c <free>
}
 8024b10:	bf00      	nop
 8024b12:	3790      	adds	r7, #144	@ 0x90
 8024b14:	46bd      	mov	sp, r7
 8024b16:	bd80      	pop	{r7, pc}
 8024b18:	0802cff0 	.word	0x0802cff0
 8024b1c:	0802cb9c 	.word	0x0802cb9c
 8024b20:	0802cbd8 	.word	0x0802cbd8
 8024b24:	0802cc54 	.word	0x0802cc54
 8024b28:	0802cbc8 	.word	0x0802cbc8
 8024b2c:	240056fc 	.word	0x240056fc
 8024b30:	080246f5 	.word	0x080246f5
 8024b34:	0802cff8 	.word	0x0802cff8
 8024b38:	0802cf7c 	.word	0x0802cf7c

08024b3c <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 8024b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b40:	b093      	sub	sp, #76	@ 0x4c
 8024b42:	af02      	add	r7, sp, #8
 8024b44:	6178      	str	r0, [r7, #20]
 8024b46:	6139      	str	r1, [r7, #16]
 8024b48:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 8024b4a:	68fb      	ldr	r3, [r7, #12]
 8024b4c:	681b      	ldr	r3, [r3, #0]
 8024b4e:	1d19      	adds	r1, r3, #4
 8024b50:	68fa      	ldr	r2, [r7, #12]
 8024b52:	6011      	str	r1, [r2, #0]
 8024b54:	681b      	ldr	r3, [r3, #0]
 8024b56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 8024b58:	68fb      	ldr	r3, [r7, #12]
 8024b5a:	681b      	ldr	r3, [r3, #0]
 8024b5c:	1d19      	adds	r1, r3, #4
 8024b5e:	68fa      	ldr	r2, [r7, #12]
 8024b60:	6011      	str	r1, [r2, #0]
 8024b62:	681b      	ldr	r3, [r3, #0]
 8024b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b68:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 8024b6c:	68fb      	ldr	r3, [r7, #12]
 8024b6e:	681b      	ldr	r3, [r3, #0]
 8024b70:	1d19      	adds	r1, r3, #4
 8024b72:	68fa      	ldr	r2, [r7, #12]
 8024b74:	6011      	str	r1, [r2, #0]
 8024b76:	681b      	ldr	r3, [r3, #0]
 8024b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 8024b80:	2314      	movs	r3, #20
 8024b82:	61fb      	str	r3, [r7, #28]
 8024b84:	2300      	movs	r3, #0
 8024b86:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 8024b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b8a:	69db      	ldr	r3, [r3, #28]
 8024b8c:	4619      	mov	r1, r3
 8024b8e:	2001      	movs	r0, #1
 8024b90:	f000 ff50 	bl	8025a34 <calloc>
 8024b94:	4603      	mov	r3, r0
 8024b96:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 8024b98:	2300      	movs	r3, #0
 8024b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8024b9c:	e02f      	b.n	8024bfe <print_array+0xc2>
    ha->getter(start + i, data);
 8024b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024ba0:	6a1e      	ldr	r6, [r3, #32]
 8024ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024ba4:	2200      	movs	r2, #0
 8024ba6:	469a      	mov	sl, r3
 8024ba8:	4693      	mov	fp, r2
 8024baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024bae:	eb1a 0102 	adds.w	r1, sl, r2
 8024bb2:	6039      	str	r1, [r7, #0]
 8024bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8024bb8:	607b      	str	r3, [r7, #4]
 8024bba:	69ba      	ldr	r2, [r7, #24]
 8024bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024bc0:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 8024bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	d008      	beq.n	8024bda <print_array+0x9e>
 8024bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8024c38 <print_array+0xfc>)
 8024bca:	6939      	ldr	r1, [r7, #16]
 8024bcc:	6978      	ldr	r0, [r7, #20]
 8024bce:	f7e4 fecc 	bl	800996a <mg_xprintf>
 8024bd2:	4602      	mov	r2, r0
 8024bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024bd6:	4413      	add	r3, r2
 8024bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 8024bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024bdc:	699b      	ldr	r3, [r3, #24]
 8024bde:	69ba      	ldr	r2, [r7, #24]
 8024be0:	9201      	str	r2, [sp, #4]
 8024be2:	9300      	str	r3, [sp, #0]
 8024be4:	4b15      	ldr	r3, [pc, #84]	@ (8024c3c <print_array+0x100>)
 8024be6:	4a16      	ldr	r2, [pc, #88]	@ (8024c40 <print_array+0x104>)
 8024be8:	6939      	ldr	r1, [r7, #16]
 8024bea:	6978      	ldr	r0, [r7, #20]
 8024bec:	f7e4 febd 	bl	800996a <mg_xprintf>
 8024bf0:	4602      	mov	r2, r0
 8024bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024bf4:	4413      	add	r3, r2
 8024bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 8024bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024bfa:	3301      	adds	r3, #1
 8024bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8024bfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024c00:	69fb      	ldr	r3, [r7, #28]
 8024c02:	429a      	cmp	r2, r3
 8024c04:	d20f      	bcs.n	8024c26 <print_array+0xea>
 8024c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024c08:	2200      	movs	r2, #0
 8024c0a:	4698      	mov	r8, r3
 8024c0c:	4691      	mov	r9, r2
 8024c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024c12:	eb18 0402 	adds.w	r4, r8, r2
 8024c16:	eb49 0503 	adc.w	r5, r9, r3
 8024c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8024c1e:	4294      	cmp	r4, r2
 8024c20:	eb75 0303 	sbcs.w	r3, r5, r3
 8024c24:	d3bb      	bcc.n	8024b9e <print_array+0x62>
  }
  free(data);
 8024c26:	69b8      	ldr	r0, [r7, #24]
 8024c28:	f000 ff28 	bl	8025a7c <free>
  return len;
 8024c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8024c2e:	4618      	mov	r0, r3
 8024c30:	3744      	adds	r7, #68	@ 0x44
 8024c32:	46bd      	mov	sp, r7
 8024c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c38:	0802cfd0 	.word	0x0802cfd0
 8024c3c:	080246f5 	.word	0x080246f5
 8024c40:	0802d000 	.word	0x0802d000

08024c44 <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 8024c44:	b590      	push	{r4, r7, lr}
 8024c46:	b0a9      	sub	sp, #164	@ 0xa4
 8024c48:	af14      	add	r7, sp, #80	@ 0x50
 8024c4a:	60f8      	str	r0, [r7, #12]
 8024c4c:	60b9      	str	r1, [r7, #8]
 8024c4e:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 8024c50:	f107 0320 	add.w	r3, r7, #32
 8024c54:	2228      	movs	r2, #40	@ 0x28
 8024c56:	2100      	movs	r1, #0
 8024c58:	4618      	mov	r0, r3
 8024c5a:	f002 fd99 	bl	8027790 <memset>
  uint64_t size = h->sizer();
 8024c5e:	687b      	ldr	r3, [r7, #4]
 8024c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c62:	4798      	blx	r3
 8024c64:	4602      	mov	r2, r0
 8024c66:	460b      	mov	r3, r1
 8024c68:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 8024c6c:	f04f 0200 	mov.w	r2, #0
 8024c70:	f04f 0300 	mov.w	r3, #0
 8024c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 8024c78:	68bb      	ldr	r3, [r7, #8]
 8024c7a:	f103 0010 	add.w	r0, r3, #16
 8024c7e:	f107 0220 	add.w	r2, r7, #32
 8024c82:	2328      	movs	r3, #40	@ 0x28
 8024c84:	4927      	ldr	r1, [pc, #156]	@ (8024d24 <handle_array+0xe0>)
 8024c86:	f7e5 fd9b 	bl	800a7c0 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 8024c8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8024c8e:	f107 0220 	add.w	r2, r7, #32
 8024c92:	4611      	mov	r1, r2
 8024c94:	4618      	mov	r0, r3
 8024c96:	f7f1 fe69 	bl	801696c <mg_str_s>
 8024c9a:	f107 0310 	add.w	r3, r7, #16
 8024c9e:	2208      	movs	r2, #8
 8024ca0:	9200      	str	r2, [sp, #0]
 8024ca2:	220a      	movs	r2, #10
 8024ca4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8024ca8:	c903      	ldmia	r1, {r0, r1}
 8024caa:	f7f2 f8ba 	bl	8016e22 <mg_str_to_num>
 8024cae:	4603      	mov	r3, r0
 8024cb0:	f083 0301 	eor.w	r3, r3, #1
 8024cb4:	b2db      	uxtb	r3, r3
 8024cb6:	2b00      	cmp	r3, #0
 8024cb8:	d005      	beq.n	8024cc6 <handle_array+0x82>
 8024cba:	f04f 0200 	mov.w	r2, #0
 8024cbe:	f04f 0300 	mov.w	r3, #0
 8024cc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 8024cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024cca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024cce:	f107 0410 	add.w	r4, r7, #16
 8024cd2:	9412      	str	r4, [sp, #72]	@ 0x48
 8024cd4:	f107 0418 	add.w	r4, r7, #24
 8024cd8:	9411      	str	r4, [sp, #68]	@ 0x44
 8024cda:	687c      	ldr	r4, [r7, #4]
 8024cdc:	9410      	str	r4, [sp, #64]	@ 0x40
 8024cde:	4c12      	ldr	r4, [pc, #72]	@ (8024d28 <handle_array+0xe4>)
 8024ce0:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024ce2:	4c12      	ldr	r4, [pc, #72]	@ (8024d2c <handle_array+0xe8>)
 8024ce4:	940e      	str	r4, [sp, #56]	@ 0x38
 8024ce6:	2400      	movs	r4, #0
 8024ce8:	940d      	str	r4, [sp, #52]	@ 0x34
 8024cea:	4c11      	ldr	r4, [pc, #68]	@ (8024d30 <handle_array+0xec>)
 8024cec:	940c      	str	r4, [sp, #48]	@ 0x30
 8024cee:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8024cf2:	490c      	ldr	r1, [pc, #48]	@ (8024d24 <handle_array+0xe0>)
 8024cf4:	9108      	str	r1, [sp, #32]
 8024cf6:	2100      	movs	r1, #0
 8024cf8:	9107      	str	r1, [sp, #28]
 8024cfa:	490d      	ldr	r1, [pc, #52]	@ (8024d30 <handle_array+0xec>)
 8024cfc:	9106      	str	r1, [sp, #24]
 8024cfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8024d02:	4b0c      	ldr	r3, [pc, #48]	@ (8024d34 <handle_array+0xf0>)
 8024d04:	9302      	str	r3, [sp, #8]
 8024d06:	2300      	movs	r3, #0
 8024d08:	9301      	str	r3, [sp, #4]
 8024d0a:	4b09      	ldr	r3, [pc, #36]	@ (8024d30 <handle_array+0xec>)
 8024d0c:	9300      	str	r3, [sp, #0]
 8024d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8024d38 <handle_array+0xf4>)
 8024d10:	4a0a      	ldr	r2, [pc, #40]	@ (8024d3c <handle_array+0xf8>)
 8024d12:	21c8      	movs	r1, #200	@ 0xc8
 8024d14:	68f8      	ldr	r0, [r7, #12]
 8024d16:	f7e6 ff31 	bl	800bb7c <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 8024d1a:	bf00      	nop
 8024d1c:	3754      	adds	r7, #84	@ 0x54
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	bd90      	pop	{r4, r7, pc}
 8024d22:	bf00      	nop
 8024d24:	0802d008 	.word	0x0802d008
 8024d28:	08024b3d 	.word	0x08024b3d
 8024d2c:	0802ccf8 	.word	0x0802ccf8
 8024d30:	08013671 	.word	0x08013671
 8024d34:	0802d030 	.word	0x0802d030
 8024d38:	0802d010 	.word	0x0802d010
 8024d3c:	0802cf7c 	.word	0x0802cf7c

08024d40 <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 8024d40:	b580      	push	{r7, lr}
 8024d42:	b09e      	sub	sp, #120	@ 0x78
 8024d44:	af00      	add	r7, sp, #0
 8024d46:	60f8      	str	r0, [r7, #12]
 8024d48:	60b9      	str	r1, [r7, #8]
 8024d4a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8024d4c:	f107 0214 	add.w	r2, r7, #20
 8024d50:	68b9      	ldr	r1, [r7, #8]
 8024d52:	2364      	movs	r3, #100	@ 0x64
 8024d54:	3108      	adds	r1, #8
 8024d56:	c903      	ldmia	r1, {r0, r1}
 8024d58:	f7ff fb62 	bl	8024420 <get_file_name_from_uri>
  hf->server(c, hm, path);
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	69db      	ldr	r3, [r3, #28]
 8024d60:	f107 0214 	add.w	r2, r7, #20
 8024d64:	68b9      	ldr	r1, [r7, #8]
 8024d66:	68f8      	ldr	r0, [r7, #12]
 8024d68:	4798      	blx	r3
}
 8024d6a:	bf00      	nop
 8024d6c:	3778      	adds	r7, #120	@ 0x78
 8024d6e:	46bd      	mov	sp, r7
 8024d70:	bd80      	pop	{r7, pc}
	...

08024d74 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 8024d74:	b580      	push	{r7, lr}
 8024d76:	b088      	sub	sp, #32
 8024d78:	af02      	add	r7, sp, #8
 8024d7a:	60f8      	str	r0, [r7, #12]
 8024d7c:	60b9      	str	r1, [r7, #8]
 8024d7e:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	685b      	ldr	r3, [r3, #4]
 8024d84:	4932      	ldr	r1, [pc, #200]	@ (8024e50 <handle_api_call+0xdc>)
 8024d86:	4618      	mov	r0, r3
 8024d88:	f7db fac2 	bl	8000310 <strcmp>
 8024d8c:	4603      	mov	r3, r0
 8024d8e:	2b00      	cmp	r3, #0
 8024d90:	d008      	beq.n	8024da4 <handle_api_call+0x30>
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	685b      	ldr	r3, [r3, #4]
 8024d96:	492f      	ldr	r1, [pc, #188]	@ (8024e54 <handle_api_call+0xe0>)
 8024d98:	4618      	mov	r0, r3
 8024d9a:	f7db fab9 	bl	8000310 <strcmp>
 8024d9e:	4603      	mov	r3, r0
 8024da0:	2b00      	cmp	r3, #0
 8024da2:	d105      	bne.n	8024db0 <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 8024da4:	687a      	ldr	r2, [r7, #4]
 8024da6:	68b9      	ldr	r1, [r7, #8]
 8024da8:	68f8      	ldr	r0, [r7, #12]
 8024daa:	f7ff fdab 	bl	8024904 <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 8024dae:	e04a      	b.n	8024e46 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	685b      	ldr	r3, [r3, #4]
 8024db4:	4928      	ldr	r1, [pc, #160]	@ (8024e58 <handle_api_call+0xe4>)
 8024db6:	4618      	mov	r0, r3
 8024db8:	f7db faaa 	bl	8000310 <strcmp>
 8024dbc:	4603      	mov	r3, r0
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d105      	bne.n	8024dce <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 8024dc2:	687a      	ldr	r2, [r7, #4]
 8024dc4:	68b9      	ldr	r1, [r7, #8]
 8024dc6:	68f8      	ldr	r0, [r7, #12]
 8024dc8:	f7ff ff3c 	bl	8024c44 <handle_array>
}
 8024dcc:	e03b      	b.n	8024e46 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 8024dce:	687b      	ldr	r3, [r7, #4]
 8024dd0:	685b      	ldr	r3, [r3, #4]
 8024dd2:	4922      	ldr	r1, [pc, #136]	@ (8024e5c <handle_api_call+0xe8>)
 8024dd4:	4618      	mov	r0, r3
 8024dd6:	f7db fa9b 	bl	8000310 <strcmp>
 8024dda:	4603      	mov	r3, r0
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d10a      	bne.n	8024df6 <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 8024de4:	697b      	ldr	r3, [r7, #20]
 8024de6:	699a      	ldr	r2, [r3, #24]
 8024de8:	697b      	ldr	r3, [r7, #20]
 8024dea:	69db      	ldr	r3, [r3, #28]
 8024dec:	68b9      	ldr	r1, [r7, #8]
 8024dee:	68f8      	ldr	r0, [r7, #12]
 8024df0:	f7ff fc3c 	bl	802466c <handle_action>
}
 8024df4:	e027      	b.n	8024e46 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	685b      	ldr	r3, [r3, #4]
 8024dfa:	4919      	ldr	r1, [pc, #100]	@ (8024e60 <handle_api_call+0xec>)
 8024dfc:	4618      	mov	r0, r3
 8024dfe:	f7db fa87 	bl	8000310 <strcmp>
 8024e02:	4603      	mov	r3, r0
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	d105      	bne.n	8024e14 <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 8024e08:	687a      	ldr	r2, [r7, #4]
 8024e0a:	68b9      	ldr	r1, [r7, #8]
 8024e0c:	68f8      	ldr	r0, [r7, #12]
 8024e0e:	f7ff ff97 	bl	8024d40 <handle_file>
}
 8024e12:	e018      	b.n	8024e46 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 8024e14:	687b      	ldr	r3, [r7, #4]
 8024e16:	685b      	ldr	r3, [r3, #4]
 8024e18:	4912      	ldr	r1, [pc, #72]	@ (8024e64 <handle_api_call+0xf0>)
 8024e1a:	4618      	mov	r0, r3
 8024e1c:	f7db fa78 	bl	8000310 <strcmp>
 8024e20:	4603      	mov	r3, r0
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	d105      	bne.n	8024e32 <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 8024e26:	687b      	ldr	r3, [r7, #4]
 8024e28:	699b      	ldr	r3, [r3, #24]
 8024e2a:	68b9      	ldr	r1, [r7, #8]
 8024e2c:	68f8      	ldr	r0, [r7, #12]
 8024e2e:	4798      	blx	r3
}
 8024e30:	e009      	b.n	8024e46 <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 8024e32:	687b      	ldr	r3, [r7, #4]
 8024e34:	685b      	ldr	r3, [r3, #4]
 8024e36:	9300      	str	r3, [sp, #0]
 8024e38:	4b0b      	ldr	r3, [pc, #44]	@ (8024e68 <handle_api_call+0xf4>)
 8024e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8024e6c <handle_api_call+0xf8>)
 8024e3c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8024e40:	68f8      	ldr	r0, [r7, #12]
 8024e42:	f7e6 fe9b 	bl	800bb7c <mg_http_reply>
}
 8024e46:	bf00      	nop
 8024e48:	3718      	adds	r7, #24
 8024e4a:	46bd      	mov	sp, r7
 8024e4c:	bd80      	pop	{r7, pc}
 8024e4e:	bf00      	nop
 8024e50:	0802d044 	.word	0x0802d044
 8024e54:	0802ccf8 	.word	0x0802ccf8
 8024e58:	0802d04c 	.word	0x0802d04c
 8024e5c:	0802cca0 	.word	0x0802cca0
 8024e60:	0802cd84 	.word	0x0802cd84
 8024e64:	0802cce8 	.word	0x0802cce8
 8024e68:	0802d054 	.word	0x0802d054
 8024e6c:	0802cf7c 	.word	0x0802cf7c

08024e70 <glue_update_state>:

void glue_update_state(void) {
 8024e70:	b480      	push	{r7}
 8024e72:	af00      	add	r7, sp, #0
  s_device_change_version++;
 8024e74:	4b04      	ldr	r3, [pc, #16]	@ (8024e88 <glue_update_state+0x18>)
 8024e76:	681b      	ldr	r3, [r3, #0]
 8024e78:	3301      	adds	r3, #1
 8024e7a:	4a03      	ldr	r2, [pc, #12]	@ (8024e88 <glue_update_state+0x18>)
 8024e7c:	6013      	str	r3, [r2, #0]
}
 8024e7e:	bf00      	nop
 8024e80:	46bd      	mov	sp, r7
 8024e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e86:	4770      	bx	lr
 8024e88:	240056fc 	.word	0x240056fc

08024e8c <http_ev_handler>:

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8024e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e8e:	b0b5      	sub	sp, #212	@ 0xd4
 8024e90:	af06      	add	r7, sp, #24
 8024e92:	61f8      	str	r0, [r7, #28]
 8024e94:	61b9      	str	r1, [r7, #24]
 8024e96:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 8024e98:	69bb      	ldr	r3, [r7, #24]
 8024e9a:	2b0a      	cmp	r3, #10
 8024e9c:	d164      	bne.n	8024f68 <http_ev_handler+0xdc>
 8024e9e:	69fb      	ldr	r3, [r7, #28]
 8024ea0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024ea4:	2b00      	cmp	r3, #0
 8024ea6:	d15f      	bne.n	8024f68 <http_ev_handler+0xdc>
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8024ea8:	697b      	ldr	r3, [r7, #20]
 8024eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8024eae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8024eb2:	49b4      	ldr	r1, [pc, #720]	@ (8025184 <http_ev_handler+0x2f8>)
 8024eb4:	4618      	mov	r0, r3
 8024eb6:	f7f1 fd59 	bl	801696c <mg_str_s>
 8024eba:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8024ebe:	2300      	movs	r3, #0
 8024ec0:	9300      	str	r3, [sp, #0]
 8024ec2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8024ec6:	cb0c      	ldmia	r3, {r2, r3}
 8024ec8:	3108      	adds	r1, #8
 8024eca:	c903      	ldmia	r1, {r0, r1}
 8024ecc:	f7f1 fe58 	bl	8016b80 <mg_match>
 8024ed0:	4603      	mov	r3, r0
 8024ed2:	2b00      	cmp	r3, #0
 8024ed4:	d113      	bne.n	8024efe <http_ev_handler+0x72>
        mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8024ed6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8024eda:	49ab      	ldr	r1, [pc, #684]	@ (8025188 <http_ev_handler+0x2fc>)
 8024edc:	4618      	mov	r0, r3
 8024ede:	f7f1 fd45 	bl	801696c <mg_str_s>
 8024ee2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8024ee6:	2300      	movs	r3, #0
 8024ee8:	9300      	str	r3, [sp, #0]
 8024eea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8024eee:	cb0c      	ldmia	r3, {r2, r3}
 8024ef0:	3108      	adds	r1, #8
 8024ef2:	c903      	ldmia	r1, {r0, r1}
 8024ef4:	f7f1 fe44 	bl	8016b80 <mg_match>
 8024ef8:	4603      	mov	r3, r0
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	d034      	beq.n	8024f68 <http_ev_handler+0xdc>
      struct apihandler *h = find_handler(hm);
 8024efe:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8024f02:	f7fe ff57 	bl	8023db4 <find_handler>
 8024f06:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
      struct user *u = authenticate(hm);
 8024f0a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8024f0e:	f7fe ffa9 	bl	8023e64 <authenticate>
 8024f12:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      if ((u == NULL ||
 8024f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d019      	beq.n	8024f52 <http_ev_handler+0xc6>
 8024f1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024f22:	2b00      	cmp	r3, #0
 8024f24:	d020      	beq.n	8024f68 <http_ev_handler+0xdc>
           (h != NULL && (u->level < h->read_level ||
 8024f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024f30:	68db      	ldr	r3, [r3, #12]
 8024f32:	429a      	cmp	r2, r3
 8024f34:	db0d      	blt.n	8024f52 <http_ev_handler+0xc6>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8024f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024f3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
           (h != NULL && (u->level < h->read_level ||
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	d012      	beq.n	8024f68 <http_ev_handler+0xdc>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8024f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024f4c:	691b      	ldr	r3, [r3, #16]
 8024f4e:	429a      	cmp	r2, r3
 8024f50:	da0a      	bge.n	8024f68 <http_ev_handler+0xdc>
        mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8024f52:	4b8e      	ldr	r3, [pc, #568]	@ (802518c <http_ev_handler+0x300>)
 8024f54:	4a8e      	ldr	r2, [pc, #568]	@ (8025190 <http_ev_handler+0x304>)
 8024f56:	f240 1193 	movw	r1, #403	@ 0x193
 8024f5a:	69f8      	ldr	r0, [r7, #28]
 8024f5c:	f7e6 fe0e 	bl	800bb7c <mg_http_reply>
        c->data[0] = 'Z';  // Mark this connection as handled
 8024f60:	69fb      	ldr	r3, [r7, #28]
 8024f62:	225a      	movs	r2, #90	@ 0x5a
 8024f64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 8024f68:	69fb      	ldr	r3, [r7, #28]
 8024f6a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024f6e:	f003 0302 	and.w	r3, r3, #2
 8024f72:	b2db      	uxtb	r3, r3
 8024f74:	2b00      	cmp	r3, #0
 8024f76:	d104      	bne.n	8024f82 <http_ev_handler+0xf6>
 8024f78:	697a      	ldr	r2, [r7, #20]
 8024f7a:	69b9      	ldr	r1, [r7, #24]
 8024f7c:	69f8      	ldr	r0, [r7, #28]
 8024f7e:	f7ff fb03 	bl	8024588 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8024f82:	69bb      	ldr	r3, [r7, #24]
 8024f84:	2b02      	cmp	r3, #2
 8024f86:	d128      	bne.n	8024fda <http_ev_handler+0x14e>
 8024f88:	69fb      	ldr	r3, [r7, #28]
 8024f8a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024f8e:	f003 0302 	and.w	r3, r3, #2
 8024f92:	b2db      	uxtb	r3, r3
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	d120      	bne.n	8024fda <http_ev_handler+0x14e>
 8024f98:	69fb      	ldr	r3, [r7, #28]
 8024f9a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024f9e:	2b41      	cmp	r3, #65	@ 0x41
 8024fa0:	d11b      	bne.n	8024fda <http_ev_handler+0x14e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 8024fa2:	69fb      	ldr	r3, [r7, #28]
 8024fa4:	3388      	adds	r3, #136	@ 0x88
 8024fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (as->fn() == false) {
 8024faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8024fae:	685b      	ldr	r3, [r3, #4]
 8024fb0:	4798      	blx	r3
 8024fb2:	4603      	mov	r3, r0
 8024fb4:	f083 0301 	eor.w	r3, r3, #1
 8024fb8:	b2db      	uxtb	r3, r3
 8024fba:	2b00      	cmp	r3, #0
 8024fbc:	f000 813b 	beq.w	8025236 <http_ev_handler+0x3aa>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8024fc0:	4b74      	ldr	r3, [pc, #464]	@ (8025194 <http_ev_handler+0x308>)
 8024fc2:	4a73      	ldr	r2, [pc, #460]	@ (8025190 <http_ev_handler+0x304>)
 8024fc4:	21c8      	movs	r1, #200	@ 0xc8
 8024fc6:	69f8      	ldr	r0, [r7, #28]
 8024fc8:	f7e6 fdd8 	bl	800bb7c <mg_http_reply>
      memset(as, 0, sizeof(*as));
 8024fcc:	2208      	movs	r2, #8
 8024fce:	2100      	movs	r1, #0
 8024fd0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8024fd4:	f002 fbdc 	bl	8027790 <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8024fd8:	e12d      	b.n	8025236 <http_ev_handler+0x3aa>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024fda:	69bb      	ldr	r3, [r7, #24]
 8024fdc:	2b0b      	cmp	r3, #11
 8024fde:	f040 80f3 	bne.w	80251c8 <http_ev_handler+0x33c>
 8024fe2:	69fb      	ldr	r3, [r7, #28]
 8024fe4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024fe8:	f003 0302 	and.w	r3, r3, #2
 8024fec:	b2db      	uxtb	r3, r3
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	f040 80ea 	bne.w	80251c8 <http_ev_handler+0x33c>
 8024ff4:	69fb      	ldr	r3, [r7, #28]
 8024ff6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	f040 80e4 	bne.w	80251c8 <http_ev_handler+0x33c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8025000:	697b      	ldr	r3, [r7, #20]
 8025002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 8025006:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 802500a:	f7fe fed3 	bl	8023db4 <find_handler>
 802500e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8025012:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8025016:	f7fe ff25 	bl	8023e64 <authenticate>
 802501a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 802501e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8025022:	495d      	ldr	r1, [pc, #372]	@ (8025198 <http_ev_handler+0x30c>)
 8025024:	4618      	mov	r0, r3
 8025026:	f7f1 fca1 	bl	801696c <mg_str_s>
 802502a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802502e:	2300      	movs	r3, #0
 8025030:	9300      	str	r3, [sp, #0]
 8025032:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8025036:	cb0c      	ldmia	r3, {r2, r3}
 8025038:	3108      	adds	r1, #8
 802503a:	c903      	ldmia	r1, {r0, r1}
 802503c:	f7f1 fda0 	bl	8016b80 <mg_match>
 8025040:	4603      	mov	r3, r0
 8025042:	2b00      	cmp	r3, #0
 8025044:	d005      	beq.n	8025052 <http_ev_handler+0x1c6>
      handle_login(c, u);
 8025046:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 802504a:	69f8      	ldr	r0, [r7, #28]
 802504c:	f7fe ffee 	bl	802402c <handle_login>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025050:	e0f3      	b.n	802523a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8025052:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8025056:	4951      	ldr	r1, [pc, #324]	@ (802519c <http_ev_handler+0x310>)
 8025058:	4618      	mov	r0, r3
 802505a:	f7f1 fc87 	bl	801696c <mg_str_s>
 802505e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025062:	2300      	movs	r3, #0
 8025064:	9300      	str	r3, [sp, #0]
 8025066:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 802506a:	cb0c      	ldmia	r3, {r2, r3}
 802506c:	3108      	adds	r1, #8
 802506e:	c903      	ldmia	r1, {r0, r1}
 8025070:	f7f1 fd86 	bl	8016b80 <mg_match>
 8025074:	4603      	mov	r3, r0
 8025076:	2b00      	cmp	r3, #0
 8025078:	d003      	beq.n	8025082 <http_ev_handler+0x1f6>
      handle_logout(c);
 802507a:	69f8      	ldr	r0, [r7, #28]
 802507c:	f7ff f844 	bl	8024108 <handle_logout>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025080:	e0db      	b.n	802523a <http_ev_handler+0x3ae>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 8025082:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8025086:	4946      	ldr	r1, [pc, #280]	@ (80251a0 <http_ev_handler+0x314>)
 8025088:	4618      	mov	r0, r3
 802508a:	f7f1 fc6f 	bl	801696c <mg_str_s>
 802508e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025092:	2300      	movs	r3, #0
 8025094:	9300      	str	r3, [sp, #0]
 8025096:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 802509a:	cb0c      	ldmia	r3, {r2, r3}
 802509c:	3108      	adds	r1, #8
 802509e:	c903      	ldmia	r1, {r0, r1}
 80250a0:	f7f1 fd6e 	bl	8016b80 <mg_match>
 80250a4:	4603      	mov	r3, r0
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	d006      	beq.n	80250b8 <http_ev_handler+0x22c>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 80250aa:	4b3e      	ldr	r3, [pc, #248]	@ (80251a4 <http_ev_handler+0x318>)
 80250ac:	4a38      	ldr	r2, [pc, #224]	@ (8025190 <http_ev_handler+0x304>)
 80250ae:	21c8      	movs	r1, #200	@ 0xc8
 80250b0:	69f8      	ldr	r0, [r7, #28]
 80250b2:	f7e6 fd63 	bl	800bb7c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80250b6:	e0c0      	b.n	802523a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 80250b8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80250bc:	4932      	ldr	r1, [pc, #200]	@ (8025188 <http_ev_handler+0x2fc>)
 80250be:	4618      	mov	r0, r3
 80250c0:	f7f1 fc54 	bl	801696c <mg_str_s>
 80250c4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80250c8:	2300      	movs	r3, #0
 80250ca:	9300      	str	r3, [sp, #0]
 80250cc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80250d0:	cb0c      	ldmia	r3, {r2, r3}
 80250d2:	3108      	adds	r1, #8
 80250d4:	c903      	ldmia	r1, {r0, r1}
 80250d6:	f7f1 fd53 	bl	8016b80 <mg_match>
 80250da:	4603      	mov	r3, r0
 80250dc:	2b00      	cmp	r3, #0
 80250de:	d006      	beq.n	80250ee <http_ev_handler+0x262>
      mg_ws_upgrade(c, hm, NULL);
 80250e0:	2200      	movs	r2, #0
 80250e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80250e6:	69f8      	ldr	r0, [r7, #28]
 80250e8:	f7fd fb2e 	bl	8022748 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80250ec:	e0a5      	b.n	802523a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 80250ee:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80250f2:	492d      	ldr	r1, [pc, #180]	@ (80251a8 <http_ev_handler+0x31c>)
 80250f4:	4618      	mov	r0, r3
 80250f6:	f7f1 fc39 	bl	801696c <mg_str_s>
 80250fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80250fe:	2300      	movs	r3, #0
 8025100:	9300      	str	r3, [sp, #0]
 8025102:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8025106:	cb0c      	ldmia	r3, {r2, r3}
 8025108:	3108      	adds	r1, #8
 802510a:	c903      	ldmia	r1, {r0, r1}
 802510c:	f7f1 fd38 	bl	8016b80 <mg_match>
 8025110:	4603      	mov	r3, r0
 8025112:	2b00      	cmp	r3, #0
 8025114:	d00f      	beq.n	8025136 <http_ev_handler+0x2aa>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 8025116:	4b25      	ldr	r3, [pc, #148]	@ (80251ac <http_ev_handler+0x320>)
 8025118:	681b      	ldr	r3, [r3, #0]
 802511a:	9303      	str	r3, [sp, #12]
 802511c:	4b24      	ldr	r3, [pc, #144]	@ (80251b0 <http_ev_handler+0x324>)
 802511e:	9302      	str	r3, [sp, #8]
 8025120:	2300      	movs	r3, #0
 8025122:	9301      	str	r3, [sp, #4]
 8025124:	4b23      	ldr	r3, [pc, #140]	@ (80251b4 <http_ev_handler+0x328>)
 8025126:	9300      	str	r3, [sp, #0]
 8025128:	4b23      	ldr	r3, [pc, #140]	@ (80251b8 <http_ev_handler+0x32c>)
 802512a:	4a19      	ldr	r2, [pc, #100]	@ (8025190 <http_ev_handler+0x304>)
 802512c:	21c8      	movs	r1, #200	@ 0xc8
 802512e:	69f8      	ldr	r0, [r7, #28]
 8025130:	f7e6 fd24 	bl	800bb7c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025134:	e081      	b.n	802523a <http_ev_handler+0x3ae>
                    s_device_change_version);
    } else if (h != NULL) {
 8025136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802513a:	2b00      	cmp	r3, #0
 802513c:	d007      	beq.n	802514e <http_ev_handler+0x2c2>
      handle_api_call(c, hm, h);
 802513e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8025142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025146:	69f8      	ldr	r0, [r7, #28]
 8025148:	f7ff fe14 	bl	8024d74 <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802514c:	e075      	b.n	802523a <http_ev_handler+0x3ae>
    } else if (c->data[0] == 0)
 802514e:	69fb      	ldr	r3, [r7, #28]
 8025150:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8025154:	2b00      	cmp	r3, #0
 8025156:	d170      	bne.n	802523a <http_ev_handler+0x3ae>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8025158:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802515c:	2218      	movs	r2, #24
 802515e:	2100      	movs	r1, #0
 8025160:	4618      	mov	r0, r3
 8025162:	f002 fb15 	bl	8027790 <memset>
      opts.root_dir = "/web_root/";
 8025166:	4b15      	ldr	r3, [pc, #84]	@ (80251bc <http_ev_handler+0x330>)
 8025168:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 802516a:	4b15      	ldr	r3, [pc, #84]	@ (80251c0 <http_ev_handler+0x334>)
 802516c:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 802516e:	4b15      	ldr	r3, [pc, #84]	@ (80251c4 <http_ev_handler+0x338>)
 8025170:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 8025172:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8025176:	461a      	mov	r2, r3
 8025178:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802517c:	69f8      	ldr	r0, [r7, #28]
 802517e:	f7e7 fc0f 	bl	800c9a0 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025182:	e05a      	b.n	802523a <http_ev_handler+0x3ae>
 8025184:	0802d06c 	.word	0x0802d06c
 8025188:	0802d074 	.word	0x0802d074
 802518c:	0802d080 	.word	0x0802d080
 8025190:	0802cf7c 	.word	0x0802cf7c
 8025194:	0802cfc8 	.word	0x0802cfc8
 8025198:	0802d090 	.word	0x0802d090
 802519c:	0802d09c 	.word	0x0802d09c
 80251a0:	0802d0a8 	.word	0x0802d0a8
 80251a4:	0802d0b0 	.word	0x0802d0b0
 80251a8:	0802d0b8 	.word	0x0802d0b8
 80251ac:	240056fc 	.word	0x240056fc
 80251b0:	0802cbc0 	.word	0x0802cbc0
 80251b4:	08013671 	.word	0x08013671
 80251b8:	0802d0c8 	.word	0x0802d0c8
 80251bc:	0802d0d4 	.word	0x0802d0d4
 80251c0:	24000010 	.word	0x24000010
 80251c4:	0802d0e0 	.word	0x0802d0e0
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 80251c8:	69bb      	ldr	r3, [r7, #24]
 80251ca:	2b0d      	cmp	r3, #13
 80251cc:	d036      	beq.n	802523c <http_ev_handler+0x3b0>
 80251ce:	69bb      	ldr	r3, [r7, #24]
 80251d0:	2b0e      	cmp	r3, #14
 80251d2:	d033      	beq.n	802523c <http_ev_handler+0x3b0>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 80251d4:	69bb      	ldr	r3, [r7, #24]
 80251d6:	2b05      	cmp	r3, #5
 80251d8:	d130      	bne.n	802523c <http_ev_handler+0x3b0>
    if (c->fn_data != NULL) {  // TLS listener
 80251da:	69fb      	ldr	r3, [r7, #28]
 80251dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80251de:	2b00      	cmp	r3, #0
 80251e0:	d02c      	beq.n	802523c <http_ev_handler+0x3b0>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 80251e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80251e6:	2224      	movs	r2, #36	@ 0x24
 80251e8:	2100      	movs	r1, #0
 80251ea:	4618      	mov	r0, r3
 80251ec:	f002 fad0 	bl	8027790 <memset>
      opts.cert = mg_str(TLS_CERT);
 80251f0:	f107 0308 	add.w	r3, r7, #8
 80251f4:	493a      	ldr	r1, [pc, #232]	@ (80252e0 <http_ev_handler+0x454>)
 80251f6:	4618      	mov	r0, r3
 80251f8:	f7f1 fbb8 	bl	801696c <mg_str_s>
 80251fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8025200:	f107 0208 	add.w	r2, r7, #8
 8025204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025208:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 802520c:	f107 0308 	add.w	r3, r7, #8
 8025210:	4934      	ldr	r1, [pc, #208]	@ (80252e4 <http_ev_handler+0x458>)
 8025212:	4618      	mov	r0, r3
 8025214:	f7f1 fbaa 	bl	801696c <mg_str_s>
 8025218:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802521c:	f107 0208 	add.w	r2, r7, #8
 8025220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025224:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 8025228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802522c:	4619      	mov	r1, r3
 802522e:	69f8      	ldr	r0, [r7, #28]
 8025230:	f7f5 ff3c 	bl	801b0ac <mg_tls_init>
 8025234:	e002      	b.n	802523c <http_ev_handler+0x3b0>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8025236:	bf00      	nop
 8025238:	e000      	b.n	802523c <http_ev_handler+0x3b0>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802523a:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 802523c:	69bb      	ldr	r3, [r7, #24]
 802523e:	2b0b      	cmp	r3, #11
 8025240:	d149      	bne.n	80252d6 <http_ev_handler+0x44a>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8025242:	697b      	ldr	r3, [r7, #20]
 8025244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8025248:	4b27      	ldr	r3, [pc, #156]	@ (80252e8 <http_ev_handler+0x45c>)
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	2b02      	cmp	r3, #2
 802524e:	dd32      	ble.n	80252b6 <http_ev_handler+0x42a>
 8025250:	4b26      	ldr	r3, [pc, #152]	@ (80252ec <http_ev_handler+0x460>)
 8025252:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 8025256:	4926      	ldr	r1, [pc, #152]	@ (80252f0 <http_ev_handler+0x464>)
 8025258:	2003      	movs	r0, #3
 802525a:	f7e9 fb87 	bl	800e96c <mg_log_prefix>
 802525e:	69fb      	ldr	r3, [r7, #28]
 8025260:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8025262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8025266:	685b      	ldr	r3, [r3, #4]
 8025268:	607b      	str	r3, [r7, #4]
 802526a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	603b      	str	r3, [r7, #0]
 8025272:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8025276:	68db      	ldr	r3, [r3, #12]
 8025278:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 802527c:	6892      	ldr	r2, [r2, #8]
 802527e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8025282:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 8025286:	69f8      	ldr	r0, [r7, #28]
 8025288:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 802528a:	280f      	cmp	r0, #15
 802528c:	d901      	bls.n	8025292 <http_ev_handler+0x406>
 802528e:	2003      	movs	r0, #3
 8025290:	e000      	b.n	8025294 <http_ev_handler+0x408>
 8025292:	2000      	movs	r0, #0
 8025294:	69fc      	ldr	r4, [r7, #28]
 8025296:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 8025298:	3409      	adds	r4, #9
 802529a:	69fd      	ldr	r5, [r7, #28]
 802529c:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 802529e:	9505      	str	r5, [sp, #20]
 80252a0:	9404      	str	r4, [sp, #16]
 80252a2:	9003      	str	r0, [sp, #12]
 80252a4:	9102      	str	r1, [sp, #8]
 80252a6:	9201      	str	r2, [sp, #4]
 80252a8:	9300      	str	r3, [sp, #0]
 80252aa:	683b      	ldr	r3, [r7, #0]
 80252ac:	687a      	ldr	r2, [r7, #4]
 80252ae:	4631      	mov	r1, r6
 80252b0:	4810      	ldr	r0, [pc, #64]	@ (80252f4 <http_ev_handler+0x468>)
 80252b2:	f7e9 fbab 	bl	800ea0c <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 80252b6:	69fb      	ldr	r3, [r7, #28]
 80252b8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80252bc:	2b5a      	cmp	r3, #90	@ 0x5a
 80252be:	d10a      	bne.n	80252d6 <http_ev_handler+0x44a>
      c->data[0] = 0;
 80252c0:	69fb      	ldr	r3, [r7, #28]
 80252c2:	2200      	movs	r2, #0
 80252c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 80252c8:	69fa      	ldr	r2, [r7, #28]
 80252ca:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80252ce:	f023 0301 	bic.w	r3, r3, #1
 80252d2:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 80252d6:	bf00      	nop
 80252d8:	37bc      	adds	r7, #188	@ 0xbc
 80252da:	46bd      	mov	sp, r7
 80252dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252de:	bf00      	nop
 80252e0:	0802d0fc 	.word	0x0802d0fc
 80252e4:	0802d2d8 	.word	0x0802d2d8
 80252e8:	24000258 	.word	0x24000258
 80252ec:	0803b044 	.word	0x0803b044
 80252f0:	0802cd50 	.word	0x0802cd50
 80252f4:	0802d3bc 	.word	0x0802d3bc

080252f8 <send_websocket_data>:
    s_ws_handlers[s_ws_handlers_count].fn = fn;
    s_ws_handlers_count++;
  }
};

static void send_websocket_data(void) {
 80252f8:	b5b0      	push	{r4, r5, r7, lr}
 80252fa:	b088      	sub	sp, #32
 80252fc:	af02      	add	r7, sp, #8
  struct mg_connection *c;
  uint64_t now = mg_millis();
 80252fe:	f7db fc27 	bl	8000b50 <mg_millis>
 8025302:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for (c = g_mgr.conns; c != NULL; c = c->next) {
 8025306:	4b2a      	ldr	r3, [pc, #168]	@ (80253b0 <send_websocket_data+0xb8>)
 8025308:	681b      	ldr	r3, [r3, #0]
 802530a:	617b      	str	r3, [r7, #20]
 802530c:	e048      	b.n	80253a0 <send_websocket_data+0xa8>
    uint64_t *timers = (uint64_t *) &c->data[0];
 802530e:	697b      	ldr	r3, [r7, #20]
 8025310:	3388      	adds	r3, #136	@ 0x88
 8025312:	607b      	str	r3, [r7, #4]
    size_t i;

    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 8025314:	697b      	ldr	r3, [r7, #20]
 8025316:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802531a:	f003 0302 	and.w	r3, r3, #2
 802531e:	b2db      	uxtb	r3, r3
 8025320:	2b00      	cmp	r3, #0
 8025322:	d037      	beq.n	8025394 <send_websocket_data+0x9c>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8025324:	697b      	ldr	r3, [r7, #20]
 8025326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8025328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802532c:	d834      	bhi.n	8025398 <send_websocket_data+0xa0>

    for (i = 0; i < s_ws_handlers_count; i++) {
 802532e:	2300      	movs	r3, #0
 8025330:	613b      	str	r3, [r7, #16]
 8025332:	e029      	b.n	8025388 <send_websocket_data+0x90>
      if (c->pfn_data == NULL ||
 8025334:	697b      	ldr	r3, [r7, #20]
 8025336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802533a:	2b00      	cmp	r3, #0
 802533c:	d016      	beq.n	802536c <send_websocket_data+0x74>
          mg_timer_expired(&timers[i], s_ws_handlers[i].timeout_ms, now)) {
 802533e:	693b      	ldr	r3, [r7, #16]
 8025340:	00db      	lsls	r3, r3, #3
 8025342:	687a      	ldr	r2, [r7, #4]
 8025344:	18d1      	adds	r1, r2, r3
 8025346:	4a1b      	ldr	r2, [pc, #108]	@ (80253b4 <send_websocket_data+0xbc>)
 8025348:	693b      	ldr	r3, [r7, #16]
 802534a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802534e:	2200      	movs	r2, #0
 8025350:	461c      	mov	r4, r3
 8025352:	4615      	mov	r5, r2
 8025354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025358:	e9cd 2300 	strd	r2, r3, [sp]
 802535c:	4622      	mov	r2, r4
 802535e:	462b      	mov	r3, r5
 8025360:	4608      	mov	r0, r1
 8025362:	f7f1 ffdb 	bl	801731c <mg_timer_expired>
 8025366:	4603      	mov	r3, r0
      if (c->pfn_data == NULL ||
 8025368:	2b00      	cmp	r3, #0
 802536a:	d00a      	beq.n	8025382 <send_websocket_data+0x8a>
        s_ws_handlers[i].fn(c);
 802536c:	4a11      	ldr	r2, [pc, #68]	@ (80253b4 <send_websocket_data+0xbc>)
 802536e:	693b      	ldr	r3, [r7, #16]
 8025370:	00db      	lsls	r3, r3, #3
 8025372:	4413      	add	r3, r2
 8025374:	685b      	ldr	r3, [r3, #4]
 8025376:	6978      	ldr	r0, [r7, #20]
 8025378:	4798      	blx	r3
        c->pfn_data = (void *) 1;
 802537a:	697b      	ldr	r3, [r7, #20]
 802537c:	2201      	movs	r2, #1
 802537e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    for (i = 0; i < s_ws_handlers_count; i++) {
 8025382:	693b      	ldr	r3, [r7, #16]
 8025384:	3301      	adds	r3, #1
 8025386:	613b      	str	r3, [r7, #16]
 8025388:	4b0b      	ldr	r3, [pc, #44]	@ (80253b8 <send_websocket_data+0xc0>)
 802538a:	681b      	ldr	r3, [r3, #0]
 802538c:	693a      	ldr	r2, [r7, #16]
 802538e:	429a      	cmp	r2, r3
 8025390:	d3d0      	bcc.n	8025334 <send_websocket_data+0x3c>
 8025392:	e002      	b.n	802539a <send_websocket_data+0xa2>
    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 8025394:	bf00      	nop
 8025396:	e000      	b.n	802539a <send_websocket_data+0xa2>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8025398:	bf00      	nop
  for (c = g_mgr.conns; c != NULL; c = c->next) {
 802539a:	697b      	ldr	r3, [r7, #20]
 802539c:	681b      	ldr	r3, [r3, #0]
 802539e:	617b      	str	r3, [r7, #20]
 80253a0:	697b      	ldr	r3, [r7, #20]
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	d1b3      	bne.n	802530e <send_websocket_data+0x16>
      }
    }
  }
}
 80253a6:	bf00      	nop
 80253a8:	bf00      	nop
 80253aa:	3718      	adds	r7, #24
 80253ac:	46bd      	mov	sp, r7
 80253ae:	bdb0      	pop	{r4, r5, r7, pc}
 80253b0:	240056b8 	.word	0x240056b8
 80253b4:	24005704 	.word	0x24005704
 80253b8:	24005724 	.word	0x24005724

080253bc <handle_modbus_pdu>:
#if WIZARD_ENABLE_MODBUS
static struct mongoose_modbus_handlers s_modbus_handlers = {
    glue_modbus_read_reg, glue_modbus_write_reg};

static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 80253bc:	b5b0      	push	{r4, r5, r7, lr}
 80253be:	b0d0      	sub	sp, #320	@ 0x140
 80253c0:	af00      	add	r7, sp, #0
 80253c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80253ca:	6018      	str	r0, [r3, #0]
 80253cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80253d4:	6019      	str	r1, [r3, #0]
 80253d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80253de:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 80253e0:	4bb8      	ldr	r3, [pc, #736]	@ (80256c4 <handle_modbus_pdu+0x308>)
 80253e2:	681b      	ldr	r3, [r3, #0]
 80253e4:	2b02      	cmp	r3, #2
 80253e6:	dd13      	ble.n	8025410 <handle_modbus_pdu+0x54>
 80253e8:	4bb7      	ldr	r3, [pc, #732]	@ (80256c8 <handle_modbus_pdu+0x30c>)
 80253ea:	f240 3225 	movw	r2, #805	@ 0x325
 80253ee:	49b7      	ldr	r1, [pc, #732]	@ (80256cc <handle_modbus_pdu+0x310>)
 80253f0:	2003      	movs	r0, #3
 80253f2:	f7e9 fabb 	bl	800e96c <mg_log_prefix>
 80253f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80253fa:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80253fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025402:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025406:	6812      	ldr	r2, [r2, #0]
 8025408:	6819      	ldr	r1, [r3, #0]
 802540a:	48b1      	ldr	r0, [pc, #708]	@ (80256d0 <handle_modbus_pdu+0x314>)
 802540c:	f7e9 fafe 	bl	800ea0c <mg_log>
  mg_hexdump(buf, len);
 8025410:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025414:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8025418:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802541c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025420:	6811      	ldr	r1, [r2, #0]
 8025422:	6818      	ldr	r0, [r3, #0]
 8025424:	f7e9 fb28 	bl	800ea78 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 8025428:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802542c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8025430:	681b      	ldr	r3, [r3, #0]
 8025432:	2b0b      	cmp	r3, #11
 8025434:	d80f      	bhi.n	8025456 <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 8025436:	4ba3      	ldr	r3, [pc, #652]	@ (80256c4 <handle_modbus_pdu+0x308>)
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	2b00      	cmp	r3, #0
 802543c:	f340 81f8 	ble.w	8025830 <handle_modbus_pdu+0x474>
 8025440:	4ba1      	ldr	r3, [pc, #644]	@ (80256c8 <handle_modbus_pdu+0x30c>)
 8025442:	f240 3229 	movw	r2, #809	@ 0x329
 8025446:	49a1      	ldr	r1, [pc, #644]	@ (80256cc <handle_modbus_pdu+0x310>)
 8025448:	2001      	movs	r0, #1
 802544a:	f7e9 fa8f 	bl	800e96c <mg_log_prefix>
 802544e:	48a1      	ldr	r0, [pc, #644]	@ (80256d4 <handle_modbus_pdu+0x318>)
 8025450:	f7e9 fadc 	bl	800ea0c <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 8025454:	e1ec      	b.n	8025830 <handle_modbus_pdu+0x474>
    uint8_t func = buf[7];  // Function
 8025456:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802545a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802545e:	681b      	ldr	r3, [r3, #0]
 8025460:	79db      	ldrb	r3, [r3, #7]
 8025462:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 8025466:	2300      	movs	r3, #0
 8025468:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 802546c:	2300      	movs	r3, #0
 802546e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 8025472:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025476:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802547a:	f107 0014 	add.w	r0, r7, #20
 802547e:	2208      	movs	r2, #8
 8025480:	6819      	ldr	r1, [r3, #0]
 8025482:	f002 fabe 	bl	8027a02 <memcpy>
    if (func == 6) {  // write single holding register
 8025486:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 802548a:	2b06      	cmp	r3, #6
 802548c:	d155      	bne.n	802553a <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 802548e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025492:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025496:	681b      	ldr	r3, [r3, #0]
 8025498:	3308      	adds	r3, #8
 802549a:	881b      	ldrh	r3, [r3, #0]
 802549c:	4618      	mov	r0, r3
 802549e:	f7fc fcff 	bl	8021ea0 <mg_ntohs>
 80254a2:	4603      	mov	r3, r0
 80254a4:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 80254a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80254ac:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80254b0:	681b      	ldr	r3, [r3, #0]
 80254b2:	330a      	adds	r3, #10
 80254b4:	881b      	ldrh	r3, [r3, #0]
 80254b6:	4618      	mov	r0, r3
 80254b8:	f7fc fcf2 	bl	8021ea0 <mg_ntohs>
 80254bc:	4603      	mov	r3, r0
 80254be:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = s_modbus_handlers.write_reg_fn(start, value);
 80254c2:	4b85      	ldr	r3, [pc, #532]	@ (80256d8 <handle_modbus_pdu+0x31c>)
 80254c4:	685b      	ldr	r3, [r3, #4]
 80254c6:	f8b7 111c 	ldrh.w	r1, [r7, #284]	@ 0x11c
 80254ca:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 80254ce:	4610      	mov	r0, r2
 80254d0:	4798      	blx	r3
 80254d2:	4603      	mov	r3, r0
 80254d4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 80254d8:	f107 0314 	add.w	r3, r7, #20
 80254dc:	f103 0408 	add.w	r4, r3, #8
 80254e0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80254e4:	4618      	mov	r0, r3
 80254e6:	f7fc fcdb 	bl	8021ea0 <mg_ntohs>
 80254ea:	4603      	mov	r3, r0
 80254ec:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 80254ee:	f107 0314 	add.w	r3, r7, #20
 80254f2:	f103 040a 	add.w	r4, r3, #10
 80254f6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80254fa:	4618      	mov	r0, r3
 80254fc:	f7fc fcd0 	bl	8021ea0 <mg_ntohs>
 8025500:	4603      	mov	r3, r0
 8025502:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 8025504:	230c      	movs	r3, #12
 8025506:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 802550a:	4b6e      	ldr	r3, [pc, #440]	@ (80256c4 <handle_modbus_pdu+0x308>)
 802550c:	681b      	ldr	r3, [r3, #0]
 802550e:	2b02      	cmp	r3, #2
 8025510:	f340 8142 	ble.w	8025798 <handle_modbus_pdu+0x3dc>
 8025514:	4b6c      	ldr	r3, [pc, #432]	@ (80256c8 <handle_modbus_pdu+0x30c>)
 8025516:	f240 323b 	movw	r2, #827	@ 0x33b
 802551a:	496c      	ldr	r1, [pc, #432]	@ (80256cc <handle_modbus_pdu+0x310>)
 802551c:	2003      	movs	r0, #3
 802551e:	f7e9 fa25 	bl	800e96c <mg_log_prefix>
 8025522:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8025526:	2b00      	cmp	r3, #0
 8025528:	d001      	beq.n	802552e <handle_modbus_pdu+0x172>
 802552a:	4b6c      	ldr	r3, [pc, #432]	@ (80256dc <handle_modbus_pdu+0x320>)
 802552c:	e000      	b.n	8025530 <handle_modbus_pdu+0x174>
 802552e:	4b6c      	ldr	r3, [pc, #432]	@ (80256e0 <handle_modbus_pdu+0x324>)
 8025530:	4619      	mov	r1, r3
 8025532:	486c      	ldr	r0, [pc, #432]	@ (80256e4 <handle_modbus_pdu+0x328>)
 8025534:	f7e9 fa6a 	bl	800ea0c <mg_log>
 8025538:	e12e      	b.n	8025798 <handle_modbus_pdu+0x3dc>
    } else if (func == 16) {  // Write multiple
 802553a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 802553e:	2b10      	cmp	r3, #16
 8025540:	f040 808c 	bne.w	802565c <handle_modbus_pdu+0x2a0>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8025544:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025548:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802554c:	681b      	ldr	r3, [r3, #0]
 802554e:	3308      	adds	r3, #8
 8025550:	881b      	ldrh	r3, [r3, #0]
 8025552:	4618      	mov	r0, r3
 8025554:	f7fc fca4 	bl	8021ea0 <mg_ntohs>
 8025558:	4603      	mov	r3, r0
 802555a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 802555e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025562:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025566:	681b      	ldr	r3, [r3, #0]
 8025568:	330a      	adds	r3, #10
 802556a:	881b      	ldrh	r3, [r3, #0]
 802556c:	4618      	mov	r0, r3
 802556e:	f7fc fc97 	bl	8021ea0 <mg_ntohs>
 8025572:	4603      	mov	r3, r0
 8025574:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 8025578:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802557c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025580:	681b      	ldr	r3, [r3, #0]
 8025582:	330d      	adds	r3, #13
 8025584:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 8025588:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 802558c:	3305      	adds	r3, #5
 802558e:	005b      	lsls	r3, r3, #1
 8025590:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8025594:	f080 8100 	bcs.w	8025798 <handle_modbus_pdu+0x3dc>
        for (i = 0; i < num; i++) {
 8025598:	2300      	movs	r3, #0
 802559a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 802559e:	e024      	b.n	80255ea <handle_modbus_pdu+0x22e>
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 80255a0:	4b4d      	ldr	r3, [pc, #308]	@ (80256d8 <handle_modbus_pdu+0x31c>)
 80255a2:	685c      	ldr	r4, [r3, #4]
 80255a4:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80255a8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80255ac:	4413      	add	r3, r2
 80255ae:	b29d      	uxth	r5, r3
                                                   mg_htons(data[i]));
 80255b0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80255b4:	005b      	lsls	r3, r3, #1
 80255b6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80255ba:	4413      	add	r3, r2
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 80255bc:	881b      	ldrh	r3, [r3, #0]
 80255be:	4618      	mov	r0, r3
 80255c0:	f7fc fc6e 	bl	8021ea0 <mg_ntohs>
 80255c4:	4603      	mov	r3, r0
 80255c6:	4619      	mov	r1, r3
 80255c8:	4628      	mov	r0, r5
 80255ca:	47a0      	blx	r4
 80255cc:	4603      	mov	r3, r0
 80255ce:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 80255d2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80255d6:	f083 0301 	eor.w	r3, r3, #1
 80255da:	b2db      	uxtb	r3, r3
 80255dc:	2b00      	cmp	r3, #0
 80255de:	d10b      	bne.n	80255f8 <handle_modbus_pdu+0x23c>
        for (i = 0; i < num; i++) {
 80255e0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80255e4:	3301      	adds	r3, #1
 80255e6:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80255ea:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80255ee:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80255f2:	429a      	cmp	r2, r3
 80255f4:	d3d4      	bcc.n	80255a0 <handle_modbus_pdu+0x1e4>
 80255f6:	e000      	b.n	80255fa <handle_modbus_pdu+0x23e>
          if (success == false) break;
 80255f8:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 80255fa:	f107 0314 	add.w	r3, r7, #20
 80255fe:	f103 0408 	add.w	r4, r3, #8
 8025602:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8025606:	4618      	mov	r0, r3
 8025608:	f7fc fc4a 	bl	8021ea0 <mg_ntohs>
 802560c:	4603      	mov	r3, r0
 802560e:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 8025610:	f107 0314 	add.w	r3, r7, #20
 8025614:	f103 040a 	add.w	r4, r3, #10
 8025618:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 802561c:	4618      	mov	r0, r3
 802561e:	f7fc fc3f 	bl	8021ea0 <mg_ntohs>
 8025622:	4603      	mov	r3, r0
 8025624:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 8025626:	230c      	movs	r3, #12
 8025628:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 802562c:	4b25      	ldr	r3, [pc, #148]	@ (80256c4 <handle_modbus_pdu+0x308>)
 802562e:	681b      	ldr	r3, [r3, #0]
 8025630:	2b02      	cmp	r3, #2
 8025632:	f340 80b1 	ble.w	8025798 <handle_modbus_pdu+0x3dc>
 8025636:	4b24      	ldr	r3, [pc, #144]	@ (80256c8 <handle_modbus_pdu+0x30c>)
 8025638:	f240 3249 	movw	r2, #841	@ 0x349
 802563c:	4923      	ldr	r1, [pc, #140]	@ (80256cc <handle_modbus_pdu+0x310>)
 802563e:	2003      	movs	r0, #3
 8025640:	f7e9 f994 	bl	800e96c <mg_log_prefix>
 8025644:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8025648:	2b00      	cmp	r3, #0
 802564a:	d001      	beq.n	8025650 <handle_modbus_pdu+0x294>
 802564c:	4b23      	ldr	r3, [pc, #140]	@ (80256dc <handle_modbus_pdu+0x320>)
 802564e:	e000      	b.n	8025652 <handle_modbus_pdu+0x296>
 8025650:	4b23      	ldr	r3, [pc, #140]	@ (80256e0 <handle_modbus_pdu+0x324>)
 8025652:	4619      	mov	r1, r3
 8025654:	4823      	ldr	r0, [pc, #140]	@ (80256e4 <handle_modbus_pdu+0x328>)
 8025656:	f7e9 f9d9 	bl	800ea0c <mg_log>
 802565a:	e09d      	b.n	8025798 <handle_modbus_pdu+0x3dc>
    } else if (func == 3 || func == 4) {  // Read multiple
 802565c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8025660:	2b03      	cmp	r3, #3
 8025662:	d004      	beq.n	802566e <handle_modbus_pdu+0x2b2>
 8025664:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8025668:	2b04      	cmp	r3, #4
 802566a:	f040 8095 	bne.w	8025798 <handle_modbus_pdu+0x3dc>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 802566e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025672:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025676:	681b      	ldr	r3, [r3, #0]
 8025678:	3308      	adds	r3, #8
 802567a:	881b      	ldrh	r3, [r3, #0]
 802567c:	4618      	mov	r0, r3
 802567e:	f7fc fc0f 	bl	8021ea0 <mg_ntohs>
 8025682:	4603      	mov	r3, r0
 8025684:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8025688:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802568c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8025690:	681b      	ldr	r3, [r3, #0]
 8025692:	330a      	adds	r3, #10
 8025694:	881b      	ldrh	r3, [r3, #0]
 8025696:	4618      	mov	r0, r3
 8025698:	f7fc fc02 	bl	8021ea0 <mg_ntohs>
 802569c:	4603      	mov	r3, r0
 802569e:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 80256a2:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80256a6:	005b      	lsls	r3, r3, #1
 80256a8:	3309      	adds	r3, #9
 80256aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80256ae:	d273      	bcs.n	8025798 <handle_modbus_pdu+0x3dc>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 80256b0:	f107 0314 	add.w	r3, r7, #20
 80256b4:	3309      	adds	r3, #9
 80256b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 80256ba:	2300      	movs	r3, #0
 80256bc:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 80256c0:	e03a      	b.n	8025738 <handle_modbus_pdu+0x37c>
 80256c2:	bf00      	nop
 80256c4:	24000258 	.word	0x24000258
 80256c8:	0803b054 	.word	0x0803b054
 80256cc:	0802cd50 	.word	0x0802cd50
 80256d0:	0802d400 	.word	0x0802d400
 80256d4:	0802d424 	.word	0x0802d424
 80256d8:	24000820 	.word	0x24000820
 80256dc:	0802d434 	.word	0x0802d434
 80256e0:	0802d43c 	.word	0x0802d43c
 80256e4:	0802d444 	.word	0x0802d444
          success = s_modbus_handlers.read_reg_fn((uint16_t) (start + i), &val);
 80256e8:	4b54      	ldr	r3, [pc, #336]	@ (802583c <handle_modbus_pdu+0x480>)
 80256ea:	681b      	ldr	r3, [r3, #0]
 80256ec:	f8b7 1130 	ldrh.w	r1, [r7, #304]	@ 0x130
 80256f0:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 80256f4:	440a      	add	r2, r1
 80256f6:	b292      	uxth	r2, r2
 80256f8:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 80256fc:	4610      	mov	r0, r2
 80256fe:	4798      	blx	r3
 8025700:	4603      	mov	r3, r0
 8025702:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8025706:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 802570a:	f083 0301 	eor.w	r3, r3, #1
 802570e:	b2db      	uxtb	r3, r3
 8025710:	2b00      	cmp	r3, #0
 8025712:	d118      	bne.n	8025746 <handle_modbus_pdu+0x38a>
          data[i] = mg_htons(val);
 8025714:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8025718:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 802571c:	005b      	lsls	r3, r3, #1
 802571e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8025722:	18d4      	adds	r4, r2, r3
 8025724:	4608      	mov	r0, r1
 8025726:	f7fc fbbb 	bl	8021ea0 <mg_ntohs>
 802572a:	4603      	mov	r3, r0
 802572c:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 802572e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8025732:	3301      	adds	r3, #1
 8025734:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8025738:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 802573c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8025740:	429a      	cmp	r2, r3
 8025742:	d3d1      	bcc.n	80256e8 <handle_modbus_pdu+0x32c>
 8025744:	e000      	b.n	8025748 <handle_modbus_pdu+0x38c>
          if (success == false) break;
 8025746:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 8025748:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 802574c:	b2db      	uxtb	r3, r3
 802574e:	005b      	lsls	r3, r3, #1
 8025750:	b2da      	uxtb	r2, r3
 8025752:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025756:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802575a:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 802575c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025760:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8025764:	7a1b      	ldrb	r3, [r3, #8]
 8025766:	3309      	adds	r3, #9
 8025768:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 802576c:	4b34      	ldr	r3, [pc, #208]	@ (8025840 <handle_modbus_pdu+0x484>)
 802576e:	681b      	ldr	r3, [r3, #0]
 8025770:	2b02      	cmp	r3, #2
 8025772:	dd11      	ble.n	8025798 <handle_modbus_pdu+0x3dc>
 8025774:	4b33      	ldr	r3, [pc, #204]	@ (8025844 <handle_modbus_pdu+0x488>)
 8025776:	f240 3257 	movw	r2, #855	@ 0x357
 802577a:	4933      	ldr	r1, [pc, #204]	@ (8025848 <handle_modbus_pdu+0x48c>)
 802577c:	2003      	movs	r0, #3
 802577e:	f7e9 f8f5 	bl	800e96c <mg_log_prefix>
 8025782:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8025786:	2b00      	cmp	r3, #0
 8025788:	d001      	beq.n	802578e <handle_modbus_pdu+0x3d2>
 802578a:	4b30      	ldr	r3, [pc, #192]	@ (802584c <handle_modbus_pdu+0x490>)
 802578c:	e000      	b.n	8025790 <handle_modbus_pdu+0x3d4>
 802578e:	4b30      	ldr	r3, [pc, #192]	@ (8025850 <handle_modbus_pdu+0x494>)
 8025790:	4619      	mov	r1, r3
 8025792:	4830      	ldr	r0, [pc, #192]	@ (8025854 <handle_modbus_pdu+0x498>)
 8025794:	f7e9 f93a 	bl	800ea0c <mg_log>
    if (success == false) {
 8025798:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 802579c:	f083 0301 	eor.w	r3, r3, #1
 80257a0:	b2db      	uxtb	r3, r3
 80257a2:	2b00      	cmp	r3, #0
 80257a4:	d015      	beq.n	80257d2 <handle_modbus_pdu+0x416>
      response_len = 9;
 80257a6:	2309      	movs	r3, #9
 80257a8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 80257ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80257b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80257b4:	79db      	ldrb	r3, [r3, #7]
 80257b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80257ba:	b2da      	uxtb	r2, r3
 80257bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80257c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80257c4:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 80257c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80257ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80257ce:	2204      	movs	r2, #4
 80257d0:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 80257d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80257d6:	b29b      	uxth	r3, r3
 80257d8:	3b06      	subs	r3, #6
 80257da:	b29a      	uxth	r2, r3
 80257dc:	f107 0314 	add.w	r3, r7, #20
 80257e0:	1d1c      	adds	r4, r3, #4
 80257e2:	4610      	mov	r0, r2
 80257e4:	f7fc fb5c 	bl	8021ea0 <mg_ntohs>
 80257e8:	4603      	mov	r3, r0
 80257ea:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 80257ec:	4b14      	ldr	r3, [pc, #80]	@ (8025840 <handle_modbus_pdu+0x484>)
 80257ee:	681b      	ldr	r3, [r3, #0]
 80257f0:	2b02      	cmp	r3, #2
 80257f2:	dd0b      	ble.n	802580c <handle_modbus_pdu+0x450>
 80257f4:	4b13      	ldr	r3, [pc, #76]	@ (8025844 <handle_modbus_pdu+0x488>)
 80257f6:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80257fa:	4913      	ldr	r1, [pc, #76]	@ (8025848 <handle_modbus_pdu+0x48c>)
 80257fc:	2003      	movs	r0, #3
 80257fe:	f7e9 f8b5 	bl	800e96c <mg_log_prefix>
 8025802:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8025806:	4814      	ldr	r0, [pc, #80]	@ (8025858 <handle_modbus_pdu+0x49c>)
 8025808:	f7e9 f900 	bl	800ea0c <mg_log>
    mg_hexdump(response, response_len);
 802580c:	f107 0314 	add.w	r3, r7, #20
 8025810:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8025814:	4618      	mov	r0, r3
 8025816:	f7e9 f92f 	bl	800ea78 <mg_hexdump>
    mg_send(c, response, response_len);
 802581a:	f107 0114 	add.w	r1, r7, #20
 802581e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8025822:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8025826:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 802582a:	6818      	ldr	r0, [r3, #0]
 802582c:	f7ed fb36 	bl	8012e9c <mg_send>
}
 8025830:	bf00      	nop
 8025832:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8025836:	46bd      	mov	sp, r7
 8025838:	bdb0      	pop	{r4, r5, r7, pc}
 802583a:	bf00      	nop
 802583c:	24000820 	.word	0x24000820
 8025840:	24000258 	.word	0x24000258
 8025844:	0803b054 	.word	0x0803b054
 8025848:	0802cd50 	.word	0x0802cd50
 802584c:	0802d434 	.word	0x0802d434
 8025850:	0802d43c 	.word	0x0802d43c
 8025854:	0802d444 	.word	0x0802d444
 8025858:	0802d458 	.word	0x0802d458

0802585c <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 802585c:	b580      	push	{r7, lr}
 802585e:	b086      	sub	sp, #24
 8025860:	af00      	add	r7, sp, #0
 8025862:	60f8      	str	r0, [r7, #12]
 8025864:	60b9      	str	r1, [r7, #8]
 8025866:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 8025868:	68bb      	ldr	r3, [r7, #8]
 802586a:	2b07      	cmp	r3, #7
 802586c:	d13a      	bne.n	80258e4 <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 802586e:	68fb      	ldr	r3, [r7, #12]
 8025870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8025872:	2b06      	cmp	r3, #6
 8025874:	d933      	bls.n	80258de <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 8025876:	68fb      	ldr	r3, [r7, #12]
 8025878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802587a:	3304      	adds	r3, #4
 802587c:	881b      	ldrh	r3, [r3, #0]
 802587e:	4618      	mov	r0, r3
 8025880:	f7fc fb0e 	bl	8021ea0 <mg_ntohs>
 8025884:	4603      	mov	r3, r0
 8025886:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 8025888:	4b18      	ldr	r3, [pc, #96]	@ (80258ec <modbus_ev_handler+0x90>)
 802588a:	681b      	ldr	r3, [r3, #0]
 802588c:	2b01      	cmp	r3, #1
 802588e:	dd0e      	ble.n	80258ae <modbus_ev_handler+0x52>
 8025890:	4b17      	ldr	r3, [pc, #92]	@ (80258f0 <modbus_ev_handler+0x94>)
 8025892:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8025896:	4917      	ldr	r1, [pc, #92]	@ (80258f4 <modbus_ev_handler+0x98>)
 8025898:	2002      	movs	r0, #2
 802589a:	f7e9 f867 	bl	800e96c <mg_log_prefix>
 802589e:	68fb      	ldr	r3, [r7, #12]
 80258a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80258a2:	8afb      	ldrh	r3, [r7, #22]
 80258a4:	3306      	adds	r3, #6
 80258a6:	461a      	mov	r2, r3
 80258a8:	4813      	ldr	r0, [pc, #76]	@ (80258f8 <modbus_ev_handler+0x9c>)
 80258aa:	f7e9 f8af 	bl	800ea0c <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80258b2:	8afb      	ldrh	r3, [r7, #22]
 80258b4:	3306      	adds	r3, #6
 80258b6:	429a      	cmp	r2, r3
 80258b8:	d313      	bcc.n	80258e2 <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 80258ba:	68fb      	ldr	r3, [r7, #12]
 80258bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80258be:	8afb      	ldrh	r3, [r7, #22]
 80258c0:	3306      	adds	r3, #6
 80258c2:	461a      	mov	r2, r3
 80258c4:	68f8      	ldr	r0, [r7, #12]
 80258c6:	f7ff fd79 	bl	80253bc <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 80258ca:	68fb      	ldr	r3, [r7, #12]
 80258cc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80258d0:	8afb      	ldrh	r3, [r7, #22]
 80258d2:	3306      	adds	r3, #6
 80258d4:	461a      	mov	r2, r3
 80258d6:	2100      	movs	r1, #0
 80258d8:	f7e8 f830 	bl	800d93c <mg_iobuf_del>
 80258dc:	e002      	b.n	80258e4 <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 80258de:	bf00      	nop
 80258e0:	e000      	b.n	80258e4 <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 80258e2:	bf00      	nop
  }
  (void) ev_data;
}
 80258e4:	3718      	adds	r7, #24
 80258e6:	46bd      	mov	sp, r7
 80258e8:	bd80      	pop	{r7, pc}
 80258ea:	bf00      	nop
 80258ec:	24000258 	.word	0x24000258
 80258f0:	0803b068 	.word	0x0803b068
 80258f4:	0802cd50 	.word	0x0802cd50
 80258f8:	0802d474 	.word	0x0802d474

080258fc <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 80258fc:	b580      	push	{r7, lr}
 80258fe:	b09a      	sub	sp, #104	@ 0x68
 8025900:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 8025902:	4824      	ldr	r0, [pc, #144]	@ (8025994 <mongoose_init+0x98>)
 8025904:	f7e9 fe1a 	bl	800f53c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 8025908:	4b23      	ldr	r3, [pc, #140]	@ (8025998 <mongoose_init+0x9c>)
 802590a:	2203      	movs	r2, #3
 802590c:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 802590e:	4b22      	ldr	r3, [pc, #136]	@ (8025998 <mongoose_init+0x9c>)
 8025910:	681b      	ldr	r3, [r3, #0]
 8025912:	2b01      	cmp	r3, #1
 8025914:	dd09      	ble.n	802592a <mongoose_init+0x2e>
 8025916:	4b21      	ldr	r3, [pc, #132]	@ (802599c <mongoose_init+0xa0>)
 8025918:	f240 32ad 	movw	r2, #941	@ 0x3ad
 802591c:	4920      	ldr	r1, [pc, #128]	@ (80259a0 <mongoose_init+0xa4>)
 802591e:	2002      	movs	r0, #2
 8025920:	f7e9 f824 	bl	800e96c <mg_log_prefix>
 8025924:	481f      	ldr	r0, [pc, #124]	@ (80259a4 <mongoose_init+0xa8>)
 8025926:	f7e9 f871 	bl	800ea0c <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 802592a:	2300      	movs	r3, #0
 802592c:	4a1e      	ldr	r2, [pc, #120]	@ (80259a8 <mongoose_init+0xac>)
 802592e:	491f      	ldr	r1, [pc, #124]	@ (80259ac <mongoose_init+0xb0>)
 8025930:	4818      	ldr	r0, [pc, #96]	@ (8025994 <mongoose_init+0x98>)
 8025932:	f7e7 feef 	bl	800d714 <mg_http_listen>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 8025936:	1d38      	adds	r0, r7, #4
 8025938:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 802593c:	4a1c      	ldr	r2, [pc, #112]	@ (80259b0 <mongoose_init+0xb4>)
 802593e:	2164      	movs	r1, #100	@ 0x64
 8025940:	f7ed fc50 	bl	80131e4 <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 8025944:	4b14      	ldr	r3, [pc, #80]	@ (8025998 <mongoose_init+0x9c>)
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	2b01      	cmp	r3, #1
 802594a:	dd0b      	ble.n	8025964 <mongoose_init+0x68>
 802594c:	4b13      	ldr	r3, [pc, #76]	@ (802599c <mongoose_init+0xa0>)
 802594e:	f240 32c7 	movw	r2, #967	@ 0x3c7
 8025952:	4913      	ldr	r1, [pc, #76]	@ (80259a0 <mongoose_init+0xa4>)
 8025954:	2002      	movs	r0, #2
 8025956:	f7e9 f809 	bl	800e96c <mg_log_prefix>
 802595a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802595e:	4815      	ldr	r0, [pc, #84]	@ (80259b4 <mongoose_init+0xb8>)
 8025960:	f7e9 f854 	bl	800ea0c <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 8025964:	1d39      	adds	r1, r7, #4
 8025966:	2300      	movs	r3, #0
 8025968:	4a13      	ldr	r2, [pc, #76]	@ (80259b8 <mongoose_init+0xbc>)
 802596a:	480a      	ldr	r0, [pc, #40]	@ (8025994 <mongoose_init+0x98>)
 802596c:	f7e9 fd1a 	bl	800f3a4 <mg_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", WIZARD_MDNS_NAME));
  mg_mdns_listen(&g_mgr, WIZARD_MDNS_NAME);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 8025970:	4b09      	ldr	r3, [pc, #36]	@ (8025998 <mongoose_init+0x9c>)
 8025972:	681b      	ldr	r3, [r3, #0]
 8025974:	2b01      	cmp	r3, #1
 8025976:	dd09      	ble.n	802598c <mongoose_init+0x90>
 8025978:	4b08      	ldr	r3, [pc, #32]	@ (802599c <mongoose_init+0xa0>)
 802597a:	f240 32d7 	movw	r2, #983	@ 0x3d7
 802597e:	4908      	ldr	r1, [pc, #32]	@ (80259a0 <mongoose_init+0xa4>)
 8025980:	2002      	movs	r0, #2
 8025982:	f7e8 fff3 	bl	800e96c <mg_log_prefix>
 8025986:	480d      	ldr	r0, [pc, #52]	@ (80259bc <mongoose_init+0xc0>)
 8025988:	f7e9 f840 	bl	800ea0c <mg_log>
}
 802598c:	bf00      	nop
 802598e:	3768      	adds	r7, #104	@ 0x68
 8025990:	46bd      	mov	sp, r7
 8025992:	bd80      	pop	{r7, pc}
 8025994:	240056b8 	.word	0x240056b8
 8025998:	24000258 	.word	0x24000258
 802599c:	0803b07c 	.word	0x0803b07c
 80259a0:	0802cd50 	.word	0x0802cd50
 80259a4:	0802d48c 	.word	0x0802d48c
 80259a8:	08024e8d 	.word	0x08024e8d
 80259ac:	0802d4a4 	.word	0x0802d4a4
 80259b0:	0802d4b8 	.word	0x0802d4b8
 80259b4:	0802d4cc 	.word	0x0802d4cc
 80259b8:	0802585d 	.word	0x0802585d
 80259bc:	0802d4f4 	.word	0x0802d4f4

080259c0 <mongoose_poll>:

void mongoose_poll(void) {
 80259c0:	b580      	push	{r7, lr}
 80259c2:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 80259c4:	210a      	movs	r1, #10
 80259c6:	4803      	ldr	r0, [pc, #12]	@ (80259d4 <mongoose_poll+0x14>)
 80259c8:	f7ed f936 	bl	8012c38 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
 80259cc:	f7ff fc94 	bl	80252f8 <send_websocket_data>
#endif
  glue_unlock();
 80259d0:	bf00      	nop
 80259d2:	bd80      	pop	{r7, pc}
 80259d4:	240056b8 	.word	0x240056b8

080259d8 <abort>:
 80259d8:	b508      	push	{r3, lr}
 80259da:	2006      	movs	r0, #6
 80259dc:	f001 ff66 	bl	80278ac <raise>
 80259e0:	2001      	movs	r0, #1
 80259e2:	f7dc fa08 	bl	8001df6 <_exit>
	...

080259e8 <__assert_func>:
 80259e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80259ea:	4614      	mov	r4, r2
 80259ec:	461a      	mov	r2, r3
 80259ee:	4b09      	ldr	r3, [pc, #36]	@ (8025a14 <__assert_func+0x2c>)
 80259f0:	681b      	ldr	r3, [r3, #0]
 80259f2:	4605      	mov	r5, r0
 80259f4:	68d8      	ldr	r0, [r3, #12]
 80259f6:	b14c      	cbz	r4, 8025a0c <__assert_func+0x24>
 80259f8:	4b07      	ldr	r3, [pc, #28]	@ (8025a18 <__assert_func+0x30>)
 80259fa:	9100      	str	r1, [sp, #0]
 80259fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025a00:	4906      	ldr	r1, [pc, #24]	@ (8025a1c <__assert_func+0x34>)
 8025a02:	462b      	mov	r3, r5
 8025a04:	f001 fce6 	bl	80273d4 <fiprintf>
 8025a08:	f7ff ffe6 	bl	80259d8 <abort>
 8025a0c:	4b04      	ldr	r3, [pc, #16]	@ (8025a20 <__assert_func+0x38>)
 8025a0e:	461c      	mov	r4, r3
 8025a10:	e7f3      	b.n	80259fa <__assert_func+0x12>
 8025a12:	bf00      	nop
 8025a14:	240009a0 	.word	0x240009a0
 8025a18:	0803b08a 	.word	0x0803b08a
 8025a1c:	0803b097 	.word	0x0803b097
 8025a20:	0803b0c5 	.word	0x0803b0c5

08025a24 <atof>:
 8025a24:	2100      	movs	r1, #0
 8025a26:	f000 bec1 	b.w	80267ac <strtod>

08025a2a <atoi>:
 8025a2a:	220a      	movs	r2, #10
 8025a2c:	2100      	movs	r1, #0
 8025a2e:	f000 bf43 	b.w	80268b8 <strtol>
	...

08025a34 <calloc>:
 8025a34:	4b02      	ldr	r3, [pc, #8]	@ (8025a40 <calloc+0xc>)
 8025a36:	460a      	mov	r2, r1
 8025a38:	4601      	mov	r1, r0
 8025a3a:	6818      	ldr	r0, [r3, #0]
 8025a3c:	f000 b802 	b.w	8025a44 <_calloc_r>
 8025a40:	240009a0 	.word	0x240009a0

08025a44 <_calloc_r>:
 8025a44:	b570      	push	{r4, r5, r6, lr}
 8025a46:	fba1 5402 	umull	r5, r4, r1, r2
 8025a4a:	b934      	cbnz	r4, 8025a5a <_calloc_r+0x16>
 8025a4c:	4629      	mov	r1, r5
 8025a4e:	f000 f83f 	bl	8025ad0 <_malloc_r>
 8025a52:	4606      	mov	r6, r0
 8025a54:	b928      	cbnz	r0, 8025a62 <_calloc_r+0x1e>
 8025a56:	4630      	mov	r0, r6
 8025a58:	bd70      	pop	{r4, r5, r6, pc}
 8025a5a:	220c      	movs	r2, #12
 8025a5c:	6002      	str	r2, [r0, #0]
 8025a5e:	2600      	movs	r6, #0
 8025a60:	e7f9      	b.n	8025a56 <_calloc_r+0x12>
 8025a62:	462a      	mov	r2, r5
 8025a64:	4621      	mov	r1, r4
 8025a66:	f001 fe93 	bl	8027790 <memset>
 8025a6a:	e7f4      	b.n	8025a56 <_calloc_r+0x12>

08025a6c <malloc>:
 8025a6c:	4b02      	ldr	r3, [pc, #8]	@ (8025a78 <malloc+0xc>)
 8025a6e:	4601      	mov	r1, r0
 8025a70:	6818      	ldr	r0, [r3, #0]
 8025a72:	f000 b82d 	b.w	8025ad0 <_malloc_r>
 8025a76:	bf00      	nop
 8025a78:	240009a0 	.word	0x240009a0

08025a7c <free>:
 8025a7c:	4b02      	ldr	r3, [pc, #8]	@ (8025a88 <free+0xc>)
 8025a7e:	4601      	mov	r1, r0
 8025a80:	6818      	ldr	r0, [r3, #0]
 8025a82:	f002 bdbb 	b.w	80285fc <_free_r>
 8025a86:	bf00      	nop
 8025a88:	240009a0 	.word	0x240009a0

08025a8c <sbrk_aligned>:
 8025a8c:	b570      	push	{r4, r5, r6, lr}
 8025a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8025acc <sbrk_aligned+0x40>)
 8025a90:	460c      	mov	r4, r1
 8025a92:	6831      	ldr	r1, [r6, #0]
 8025a94:	4605      	mov	r5, r0
 8025a96:	b911      	cbnz	r1, 8025a9e <sbrk_aligned+0x12>
 8025a98:	f001 ff5c 	bl	8027954 <_sbrk_r>
 8025a9c:	6030      	str	r0, [r6, #0]
 8025a9e:	4621      	mov	r1, r4
 8025aa0:	4628      	mov	r0, r5
 8025aa2:	f001 ff57 	bl	8027954 <_sbrk_r>
 8025aa6:	1c43      	adds	r3, r0, #1
 8025aa8:	d103      	bne.n	8025ab2 <sbrk_aligned+0x26>
 8025aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8025aae:	4620      	mov	r0, r4
 8025ab0:	bd70      	pop	{r4, r5, r6, pc}
 8025ab2:	1cc4      	adds	r4, r0, #3
 8025ab4:	f024 0403 	bic.w	r4, r4, #3
 8025ab8:	42a0      	cmp	r0, r4
 8025aba:	d0f8      	beq.n	8025aae <sbrk_aligned+0x22>
 8025abc:	1a21      	subs	r1, r4, r0
 8025abe:	4628      	mov	r0, r5
 8025ac0:	f001 ff48 	bl	8027954 <_sbrk_r>
 8025ac4:	3001      	adds	r0, #1
 8025ac6:	d1f2      	bne.n	8025aae <sbrk_aligned+0x22>
 8025ac8:	e7ef      	b.n	8025aaa <sbrk_aligned+0x1e>
 8025aca:	bf00      	nop
 8025acc:	24005728 	.word	0x24005728

08025ad0 <_malloc_r>:
 8025ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ad4:	1ccd      	adds	r5, r1, #3
 8025ad6:	f025 0503 	bic.w	r5, r5, #3
 8025ada:	3508      	adds	r5, #8
 8025adc:	2d0c      	cmp	r5, #12
 8025ade:	bf38      	it	cc
 8025ae0:	250c      	movcc	r5, #12
 8025ae2:	2d00      	cmp	r5, #0
 8025ae4:	4606      	mov	r6, r0
 8025ae6:	db01      	blt.n	8025aec <_malloc_r+0x1c>
 8025ae8:	42a9      	cmp	r1, r5
 8025aea:	d904      	bls.n	8025af6 <_malloc_r+0x26>
 8025aec:	230c      	movs	r3, #12
 8025aee:	6033      	str	r3, [r6, #0]
 8025af0:	2000      	movs	r0, #0
 8025af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025bcc <_malloc_r+0xfc>
 8025afa:	f000 f869 	bl	8025bd0 <__malloc_lock>
 8025afe:	f8d8 3000 	ldr.w	r3, [r8]
 8025b02:	461c      	mov	r4, r3
 8025b04:	bb44      	cbnz	r4, 8025b58 <_malloc_r+0x88>
 8025b06:	4629      	mov	r1, r5
 8025b08:	4630      	mov	r0, r6
 8025b0a:	f7ff ffbf 	bl	8025a8c <sbrk_aligned>
 8025b0e:	1c43      	adds	r3, r0, #1
 8025b10:	4604      	mov	r4, r0
 8025b12:	d158      	bne.n	8025bc6 <_malloc_r+0xf6>
 8025b14:	f8d8 4000 	ldr.w	r4, [r8]
 8025b18:	4627      	mov	r7, r4
 8025b1a:	2f00      	cmp	r7, #0
 8025b1c:	d143      	bne.n	8025ba6 <_malloc_r+0xd6>
 8025b1e:	2c00      	cmp	r4, #0
 8025b20:	d04b      	beq.n	8025bba <_malloc_r+0xea>
 8025b22:	6823      	ldr	r3, [r4, #0]
 8025b24:	4639      	mov	r1, r7
 8025b26:	4630      	mov	r0, r6
 8025b28:	eb04 0903 	add.w	r9, r4, r3
 8025b2c:	f001 ff12 	bl	8027954 <_sbrk_r>
 8025b30:	4581      	cmp	r9, r0
 8025b32:	d142      	bne.n	8025bba <_malloc_r+0xea>
 8025b34:	6821      	ldr	r1, [r4, #0]
 8025b36:	1a6d      	subs	r5, r5, r1
 8025b38:	4629      	mov	r1, r5
 8025b3a:	4630      	mov	r0, r6
 8025b3c:	f7ff ffa6 	bl	8025a8c <sbrk_aligned>
 8025b40:	3001      	adds	r0, #1
 8025b42:	d03a      	beq.n	8025bba <_malloc_r+0xea>
 8025b44:	6823      	ldr	r3, [r4, #0]
 8025b46:	442b      	add	r3, r5
 8025b48:	6023      	str	r3, [r4, #0]
 8025b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8025b4e:	685a      	ldr	r2, [r3, #4]
 8025b50:	bb62      	cbnz	r2, 8025bac <_malloc_r+0xdc>
 8025b52:	f8c8 7000 	str.w	r7, [r8]
 8025b56:	e00f      	b.n	8025b78 <_malloc_r+0xa8>
 8025b58:	6822      	ldr	r2, [r4, #0]
 8025b5a:	1b52      	subs	r2, r2, r5
 8025b5c:	d420      	bmi.n	8025ba0 <_malloc_r+0xd0>
 8025b5e:	2a0b      	cmp	r2, #11
 8025b60:	d917      	bls.n	8025b92 <_malloc_r+0xc2>
 8025b62:	1961      	adds	r1, r4, r5
 8025b64:	42a3      	cmp	r3, r4
 8025b66:	6025      	str	r5, [r4, #0]
 8025b68:	bf18      	it	ne
 8025b6a:	6059      	strne	r1, [r3, #4]
 8025b6c:	6863      	ldr	r3, [r4, #4]
 8025b6e:	bf08      	it	eq
 8025b70:	f8c8 1000 	streq.w	r1, [r8]
 8025b74:	5162      	str	r2, [r4, r5]
 8025b76:	604b      	str	r3, [r1, #4]
 8025b78:	4630      	mov	r0, r6
 8025b7a:	f000 f82f 	bl	8025bdc <__malloc_unlock>
 8025b7e:	f104 000b 	add.w	r0, r4, #11
 8025b82:	1d23      	adds	r3, r4, #4
 8025b84:	f020 0007 	bic.w	r0, r0, #7
 8025b88:	1ac2      	subs	r2, r0, r3
 8025b8a:	bf1c      	itt	ne
 8025b8c:	1a1b      	subne	r3, r3, r0
 8025b8e:	50a3      	strne	r3, [r4, r2]
 8025b90:	e7af      	b.n	8025af2 <_malloc_r+0x22>
 8025b92:	6862      	ldr	r2, [r4, #4]
 8025b94:	42a3      	cmp	r3, r4
 8025b96:	bf0c      	ite	eq
 8025b98:	f8c8 2000 	streq.w	r2, [r8]
 8025b9c:	605a      	strne	r2, [r3, #4]
 8025b9e:	e7eb      	b.n	8025b78 <_malloc_r+0xa8>
 8025ba0:	4623      	mov	r3, r4
 8025ba2:	6864      	ldr	r4, [r4, #4]
 8025ba4:	e7ae      	b.n	8025b04 <_malloc_r+0x34>
 8025ba6:	463c      	mov	r4, r7
 8025ba8:	687f      	ldr	r7, [r7, #4]
 8025baa:	e7b6      	b.n	8025b1a <_malloc_r+0x4a>
 8025bac:	461a      	mov	r2, r3
 8025bae:	685b      	ldr	r3, [r3, #4]
 8025bb0:	42a3      	cmp	r3, r4
 8025bb2:	d1fb      	bne.n	8025bac <_malloc_r+0xdc>
 8025bb4:	2300      	movs	r3, #0
 8025bb6:	6053      	str	r3, [r2, #4]
 8025bb8:	e7de      	b.n	8025b78 <_malloc_r+0xa8>
 8025bba:	230c      	movs	r3, #12
 8025bbc:	6033      	str	r3, [r6, #0]
 8025bbe:	4630      	mov	r0, r6
 8025bc0:	f000 f80c 	bl	8025bdc <__malloc_unlock>
 8025bc4:	e794      	b.n	8025af0 <_malloc_r+0x20>
 8025bc6:	6005      	str	r5, [r0, #0]
 8025bc8:	e7d6      	b.n	8025b78 <_malloc_r+0xa8>
 8025bca:	bf00      	nop
 8025bcc:	2400572c 	.word	0x2400572c

08025bd0 <__malloc_lock>:
 8025bd0:	4801      	ldr	r0, [pc, #4]	@ (8025bd8 <__malloc_lock+0x8>)
 8025bd2:	f001 bf0c 	b.w	80279ee <__retarget_lock_acquire_recursive>
 8025bd6:	bf00      	nop
 8025bd8:	24005870 	.word	0x24005870

08025bdc <__malloc_unlock>:
 8025bdc:	4801      	ldr	r0, [pc, #4]	@ (8025be4 <__malloc_unlock+0x8>)
 8025bde:	f001 bf07 	b.w	80279f0 <__retarget_lock_release_recursive>
 8025be2:	bf00      	nop
 8025be4:	24005870 	.word	0x24005870

08025be8 <srand>:
 8025be8:	b538      	push	{r3, r4, r5, lr}
 8025bea:	4b10      	ldr	r3, [pc, #64]	@ (8025c2c <srand+0x44>)
 8025bec:	681d      	ldr	r5, [r3, #0]
 8025bee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8025bf0:	4604      	mov	r4, r0
 8025bf2:	b9b3      	cbnz	r3, 8025c22 <srand+0x3a>
 8025bf4:	2018      	movs	r0, #24
 8025bf6:	f7ff ff39 	bl	8025a6c <malloc>
 8025bfa:	4602      	mov	r2, r0
 8025bfc:	6328      	str	r0, [r5, #48]	@ 0x30
 8025bfe:	b920      	cbnz	r0, 8025c0a <srand+0x22>
 8025c00:	4b0b      	ldr	r3, [pc, #44]	@ (8025c30 <srand+0x48>)
 8025c02:	480c      	ldr	r0, [pc, #48]	@ (8025c34 <srand+0x4c>)
 8025c04:	2146      	movs	r1, #70	@ 0x46
 8025c06:	f7ff feef 	bl	80259e8 <__assert_func>
 8025c0a:	490b      	ldr	r1, [pc, #44]	@ (8025c38 <srand+0x50>)
 8025c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8025c3c <srand+0x54>)
 8025c0e:	e9c0 1300 	strd	r1, r3, [r0]
 8025c12:	4b0b      	ldr	r3, [pc, #44]	@ (8025c40 <srand+0x58>)
 8025c14:	6083      	str	r3, [r0, #8]
 8025c16:	230b      	movs	r3, #11
 8025c18:	8183      	strh	r3, [r0, #12]
 8025c1a:	2100      	movs	r1, #0
 8025c1c:	2001      	movs	r0, #1
 8025c1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8025c22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8025c24:	2200      	movs	r2, #0
 8025c26:	611c      	str	r4, [r3, #16]
 8025c28:	615a      	str	r2, [r3, #20]
 8025c2a:	bd38      	pop	{r3, r4, r5, pc}
 8025c2c:	240009a0 	.word	0x240009a0
 8025c30:	0803b0c6 	.word	0x0803b0c6
 8025c34:	0803b0dd 	.word	0x0803b0dd
 8025c38:	abcd330e 	.word	0xabcd330e
 8025c3c:	e66d1234 	.word	0xe66d1234
 8025c40:	0005deec 	.word	0x0005deec

08025c44 <sulp>:
 8025c44:	b570      	push	{r4, r5, r6, lr}
 8025c46:	4604      	mov	r4, r0
 8025c48:	460d      	mov	r5, r1
 8025c4a:	4616      	mov	r6, r2
 8025c4c:	ec45 4b10 	vmov	d0, r4, r5
 8025c50:	f003 fbd6 	bl	8029400 <__ulp>
 8025c54:	b17e      	cbz	r6, 8025c76 <sulp+0x32>
 8025c56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8025c5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8025c5e:	2b00      	cmp	r3, #0
 8025c60:	dd09      	ble.n	8025c76 <sulp+0x32>
 8025c62:	051b      	lsls	r3, r3, #20
 8025c64:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8025c68:	2000      	movs	r0, #0
 8025c6a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8025c6e:	ec41 0b17 	vmov	d7, r0, r1
 8025c72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8025c76:	bd70      	pop	{r4, r5, r6, pc}

08025c78 <_strtod_l>:
 8025c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c7c:	ed2d 8b0a 	vpush	{d8-d12}
 8025c80:	b097      	sub	sp, #92	@ 0x5c
 8025c82:	4688      	mov	r8, r1
 8025c84:	920e      	str	r2, [sp, #56]	@ 0x38
 8025c86:	2200      	movs	r2, #0
 8025c88:	9212      	str	r2, [sp, #72]	@ 0x48
 8025c8a:	9005      	str	r0, [sp, #20]
 8025c8c:	f04f 0a00 	mov.w	sl, #0
 8025c90:	f04f 0b00 	mov.w	fp, #0
 8025c94:	460a      	mov	r2, r1
 8025c96:	9211      	str	r2, [sp, #68]	@ 0x44
 8025c98:	7811      	ldrb	r1, [r2, #0]
 8025c9a:	292b      	cmp	r1, #43	@ 0x2b
 8025c9c:	d04c      	beq.n	8025d38 <_strtod_l+0xc0>
 8025c9e:	d839      	bhi.n	8025d14 <_strtod_l+0x9c>
 8025ca0:	290d      	cmp	r1, #13
 8025ca2:	d833      	bhi.n	8025d0c <_strtod_l+0x94>
 8025ca4:	2908      	cmp	r1, #8
 8025ca6:	d833      	bhi.n	8025d10 <_strtod_l+0x98>
 8025ca8:	2900      	cmp	r1, #0
 8025caa:	d03c      	beq.n	8025d26 <_strtod_l+0xae>
 8025cac:	2200      	movs	r2, #0
 8025cae:	9208      	str	r2, [sp, #32]
 8025cb0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025cb2:	782a      	ldrb	r2, [r5, #0]
 8025cb4:	2a30      	cmp	r2, #48	@ 0x30
 8025cb6:	f040 80b7 	bne.w	8025e28 <_strtod_l+0x1b0>
 8025cba:	786a      	ldrb	r2, [r5, #1]
 8025cbc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8025cc0:	2a58      	cmp	r2, #88	@ 0x58
 8025cc2:	d170      	bne.n	8025da6 <_strtod_l+0x12e>
 8025cc4:	9302      	str	r3, [sp, #8]
 8025cc6:	9b08      	ldr	r3, [sp, #32]
 8025cc8:	9301      	str	r3, [sp, #4]
 8025cca:	ab12      	add	r3, sp, #72	@ 0x48
 8025ccc:	9300      	str	r3, [sp, #0]
 8025cce:	4a90      	ldr	r2, [pc, #576]	@ (8025f10 <_strtod_l+0x298>)
 8025cd0:	9805      	ldr	r0, [sp, #20]
 8025cd2:	ab13      	add	r3, sp, #76	@ 0x4c
 8025cd4:	a911      	add	r1, sp, #68	@ 0x44
 8025cd6:	f002 fd43 	bl	8028760 <__gethex>
 8025cda:	f010 060f 	ands.w	r6, r0, #15
 8025cde:	4604      	mov	r4, r0
 8025ce0:	d005      	beq.n	8025cee <_strtod_l+0x76>
 8025ce2:	2e06      	cmp	r6, #6
 8025ce4:	d12a      	bne.n	8025d3c <_strtod_l+0xc4>
 8025ce6:	3501      	adds	r5, #1
 8025ce8:	2300      	movs	r3, #0
 8025cea:	9511      	str	r5, [sp, #68]	@ 0x44
 8025cec:	9308      	str	r3, [sp, #32]
 8025cee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025cf0:	2b00      	cmp	r3, #0
 8025cf2:	f040 8537 	bne.w	8026764 <_strtod_l+0xaec>
 8025cf6:	9b08      	ldr	r3, [sp, #32]
 8025cf8:	ec4b ab10 	vmov	d0, sl, fp
 8025cfc:	b1cb      	cbz	r3, 8025d32 <_strtod_l+0xba>
 8025cfe:	eeb1 0b40 	vneg.f64	d0, d0
 8025d02:	b017      	add	sp, #92	@ 0x5c
 8025d04:	ecbd 8b0a 	vpop	{d8-d12}
 8025d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d0c:	2920      	cmp	r1, #32
 8025d0e:	d1cd      	bne.n	8025cac <_strtod_l+0x34>
 8025d10:	3201      	adds	r2, #1
 8025d12:	e7c0      	b.n	8025c96 <_strtod_l+0x1e>
 8025d14:	292d      	cmp	r1, #45	@ 0x2d
 8025d16:	d1c9      	bne.n	8025cac <_strtod_l+0x34>
 8025d18:	2101      	movs	r1, #1
 8025d1a:	9108      	str	r1, [sp, #32]
 8025d1c:	1c51      	adds	r1, r2, #1
 8025d1e:	9111      	str	r1, [sp, #68]	@ 0x44
 8025d20:	7852      	ldrb	r2, [r2, #1]
 8025d22:	2a00      	cmp	r2, #0
 8025d24:	d1c4      	bne.n	8025cb0 <_strtod_l+0x38>
 8025d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d28:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8025d2c:	2b00      	cmp	r3, #0
 8025d2e:	f040 8517 	bne.w	8026760 <_strtod_l+0xae8>
 8025d32:	ec4b ab10 	vmov	d0, sl, fp
 8025d36:	e7e4      	b.n	8025d02 <_strtod_l+0x8a>
 8025d38:	2100      	movs	r1, #0
 8025d3a:	e7ee      	b.n	8025d1a <_strtod_l+0xa2>
 8025d3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025d3e:	b13a      	cbz	r2, 8025d50 <_strtod_l+0xd8>
 8025d40:	2135      	movs	r1, #53	@ 0x35
 8025d42:	a814      	add	r0, sp, #80	@ 0x50
 8025d44:	f003 fc53 	bl	80295ee <__copybits>
 8025d48:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8025d4a:	9805      	ldr	r0, [sp, #20]
 8025d4c:	f003 f82c 	bl	8028da8 <_Bfree>
 8025d50:	1e73      	subs	r3, r6, #1
 8025d52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025d54:	2b04      	cmp	r3, #4
 8025d56:	d806      	bhi.n	8025d66 <_strtod_l+0xee>
 8025d58:	e8df f003 	tbb	[pc, r3]
 8025d5c:	201d0314 	.word	0x201d0314
 8025d60:	14          	.byte	0x14
 8025d61:	00          	.byte	0x00
 8025d62:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8025d66:	05e3      	lsls	r3, r4, #23
 8025d68:	bf48      	it	mi
 8025d6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8025d6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025d72:	0d1b      	lsrs	r3, r3, #20
 8025d74:	051b      	lsls	r3, r3, #20
 8025d76:	2b00      	cmp	r3, #0
 8025d78:	d1b9      	bne.n	8025cee <_strtod_l+0x76>
 8025d7a:	f001 fe0d 	bl	8027998 <__errno>
 8025d7e:	2322      	movs	r3, #34	@ 0x22
 8025d80:	6003      	str	r3, [r0, #0]
 8025d82:	e7b4      	b.n	8025cee <_strtod_l+0x76>
 8025d84:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8025d88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8025d8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8025d90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8025d94:	e7e7      	b.n	8025d66 <_strtod_l+0xee>
 8025d96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8025f18 <_strtod_l+0x2a0>
 8025d9a:	e7e4      	b.n	8025d66 <_strtod_l+0xee>
 8025d9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8025da0:	f04f 3aff 	mov.w	sl, #4294967295
 8025da4:	e7df      	b.n	8025d66 <_strtod_l+0xee>
 8025da6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025da8:	1c5a      	adds	r2, r3, #1
 8025daa:	9211      	str	r2, [sp, #68]	@ 0x44
 8025dac:	785b      	ldrb	r3, [r3, #1]
 8025dae:	2b30      	cmp	r3, #48	@ 0x30
 8025db0:	d0f9      	beq.n	8025da6 <_strtod_l+0x12e>
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	d09b      	beq.n	8025cee <_strtod_l+0x76>
 8025db6:	2301      	movs	r3, #1
 8025db8:	9307      	str	r3, [sp, #28]
 8025dba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8025dbe:	2300      	movs	r3, #0
 8025dc0:	9306      	str	r3, [sp, #24]
 8025dc2:	4699      	mov	r9, r3
 8025dc4:	461d      	mov	r5, r3
 8025dc6:	220a      	movs	r2, #10
 8025dc8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025dca:	7804      	ldrb	r4, [r0, #0]
 8025dcc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8025dd0:	b2d9      	uxtb	r1, r3
 8025dd2:	2909      	cmp	r1, #9
 8025dd4:	d92a      	bls.n	8025e2c <_strtod_l+0x1b4>
 8025dd6:	494f      	ldr	r1, [pc, #316]	@ (8025f14 <_strtod_l+0x29c>)
 8025dd8:	2201      	movs	r2, #1
 8025dda:	f001 fcee 	bl	80277ba <strncmp>
 8025dde:	b398      	cbz	r0, 8025e48 <_strtod_l+0x1d0>
 8025de0:	2000      	movs	r0, #0
 8025de2:	4622      	mov	r2, r4
 8025de4:	462b      	mov	r3, r5
 8025de6:	4607      	mov	r7, r0
 8025de8:	4601      	mov	r1, r0
 8025dea:	2a65      	cmp	r2, #101	@ 0x65
 8025dec:	d001      	beq.n	8025df2 <_strtod_l+0x17a>
 8025dee:	2a45      	cmp	r2, #69	@ 0x45
 8025df0:	d118      	bne.n	8025e24 <_strtod_l+0x1ac>
 8025df2:	b91b      	cbnz	r3, 8025dfc <_strtod_l+0x184>
 8025df4:	9b07      	ldr	r3, [sp, #28]
 8025df6:	4303      	orrs	r3, r0
 8025df8:	d095      	beq.n	8025d26 <_strtod_l+0xae>
 8025dfa:	2300      	movs	r3, #0
 8025dfc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8025e00:	f108 0201 	add.w	r2, r8, #1
 8025e04:	9211      	str	r2, [sp, #68]	@ 0x44
 8025e06:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025e0a:	2a2b      	cmp	r2, #43	@ 0x2b
 8025e0c:	d074      	beq.n	8025ef8 <_strtod_l+0x280>
 8025e0e:	2a2d      	cmp	r2, #45	@ 0x2d
 8025e10:	d07a      	beq.n	8025f08 <_strtod_l+0x290>
 8025e12:	f04f 0e00 	mov.w	lr, #0
 8025e16:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8025e1a:	2c09      	cmp	r4, #9
 8025e1c:	f240 8082 	bls.w	8025f24 <_strtod_l+0x2ac>
 8025e20:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8025e24:	2400      	movs	r4, #0
 8025e26:	e09d      	b.n	8025f64 <_strtod_l+0x2ec>
 8025e28:	2300      	movs	r3, #0
 8025e2a:	e7c5      	b.n	8025db8 <_strtod_l+0x140>
 8025e2c:	2d08      	cmp	r5, #8
 8025e2e:	bfc8      	it	gt
 8025e30:	9906      	ldrgt	r1, [sp, #24]
 8025e32:	f100 0001 	add.w	r0, r0, #1
 8025e36:	bfca      	itet	gt
 8025e38:	fb02 3301 	mlagt	r3, r2, r1, r3
 8025e3c:	fb02 3909 	mlale	r9, r2, r9, r3
 8025e40:	9306      	strgt	r3, [sp, #24]
 8025e42:	3501      	adds	r5, #1
 8025e44:	9011      	str	r0, [sp, #68]	@ 0x44
 8025e46:	e7bf      	b.n	8025dc8 <_strtod_l+0x150>
 8025e48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025e4a:	1c5a      	adds	r2, r3, #1
 8025e4c:	9211      	str	r2, [sp, #68]	@ 0x44
 8025e4e:	785a      	ldrb	r2, [r3, #1]
 8025e50:	b3bd      	cbz	r5, 8025ec2 <_strtod_l+0x24a>
 8025e52:	4607      	mov	r7, r0
 8025e54:	462b      	mov	r3, r5
 8025e56:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8025e5a:	2909      	cmp	r1, #9
 8025e5c:	d912      	bls.n	8025e84 <_strtod_l+0x20c>
 8025e5e:	2101      	movs	r1, #1
 8025e60:	e7c3      	b.n	8025dea <_strtod_l+0x172>
 8025e62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025e64:	1c5a      	adds	r2, r3, #1
 8025e66:	9211      	str	r2, [sp, #68]	@ 0x44
 8025e68:	785a      	ldrb	r2, [r3, #1]
 8025e6a:	3001      	adds	r0, #1
 8025e6c:	2a30      	cmp	r2, #48	@ 0x30
 8025e6e:	d0f8      	beq.n	8025e62 <_strtod_l+0x1ea>
 8025e70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8025e74:	2b08      	cmp	r3, #8
 8025e76:	f200 847a 	bhi.w	802676e <_strtod_l+0xaf6>
 8025e7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025e7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8025e7e:	4607      	mov	r7, r0
 8025e80:	2000      	movs	r0, #0
 8025e82:	4603      	mov	r3, r0
 8025e84:	3a30      	subs	r2, #48	@ 0x30
 8025e86:	f100 0101 	add.w	r1, r0, #1
 8025e8a:	d014      	beq.n	8025eb6 <_strtod_l+0x23e>
 8025e8c:	440f      	add	r7, r1
 8025e8e:	469c      	mov	ip, r3
 8025e90:	f04f 0e0a 	mov.w	lr, #10
 8025e94:	f10c 0401 	add.w	r4, ip, #1
 8025e98:	1ae6      	subs	r6, r4, r3
 8025e9a:	42b1      	cmp	r1, r6
 8025e9c:	dc13      	bgt.n	8025ec6 <_strtod_l+0x24e>
 8025e9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8025ea2:	1819      	adds	r1, r3, r0
 8025ea4:	2908      	cmp	r1, #8
 8025ea6:	f103 0301 	add.w	r3, r3, #1
 8025eaa:	4403      	add	r3, r0
 8025eac:	dc19      	bgt.n	8025ee2 <_strtod_l+0x26a>
 8025eae:	210a      	movs	r1, #10
 8025eb0:	fb01 2909 	mla	r9, r1, r9, r2
 8025eb4:	2100      	movs	r1, #0
 8025eb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025eb8:	1c50      	adds	r0, r2, #1
 8025eba:	9011      	str	r0, [sp, #68]	@ 0x44
 8025ebc:	7852      	ldrb	r2, [r2, #1]
 8025ebe:	4608      	mov	r0, r1
 8025ec0:	e7c9      	b.n	8025e56 <_strtod_l+0x1de>
 8025ec2:	4628      	mov	r0, r5
 8025ec4:	e7d2      	b.n	8025e6c <_strtod_l+0x1f4>
 8025ec6:	f1bc 0f08 	cmp.w	ip, #8
 8025eca:	dc03      	bgt.n	8025ed4 <_strtod_l+0x25c>
 8025ecc:	fb0e f909 	mul.w	r9, lr, r9
 8025ed0:	46a4      	mov	ip, r4
 8025ed2:	e7df      	b.n	8025e94 <_strtod_l+0x21c>
 8025ed4:	2c10      	cmp	r4, #16
 8025ed6:	bfde      	ittt	le
 8025ed8:	9e06      	ldrle	r6, [sp, #24]
 8025eda:	fb0e f606 	mulle.w	r6, lr, r6
 8025ede:	9606      	strle	r6, [sp, #24]
 8025ee0:	e7f6      	b.n	8025ed0 <_strtod_l+0x258>
 8025ee2:	290f      	cmp	r1, #15
 8025ee4:	bfdf      	itttt	le
 8025ee6:	9806      	ldrle	r0, [sp, #24]
 8025ee8:	210a      	movle	r1, #10
 8025eea:	fb01 2200 	mlale	r2, r1, r0, r2
 8025eee:	9206      	strle	r2, [sp, #24]
 8025ef0:	e7e0      	b.n	8025eb4 <_strtod_l+0x23c>
 8025ef2:	2700      	movs	r7, #0
 8025ef4:	2101      	movs	r1, #1
 8025ef6:	e77d      	b.n	8025df4 <_strtod_l+0x17c>
 8025ef8:	f04f 0e00 	mov.w	lr, #0
 8025efc:	f108 0202 	add.w	r2, r8, #2
 8025f00:	9211      	str	r2, [sp, #68]	@ 0x44
 8025f02:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025f06:	e786      	b.n	8025e16 <_strtod_l+0x19e>
 8025f08:	f04f 0e01 	mov.w	lr, #1
 8025f0c:	e7f6      	b.n	8025efc <_strtod_l+0x284>
 8025f0e:	bf00      	nop
 8025f10:	0803b2c8 	.word	0x0803b2c8
 8025f14:	0803b135 	.word	0x0803b135
 8025f18:	7ff00000 	.word	0x7ff00000
 8025f1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025f1e:	1c54      	adds	r4, r2, #1
 8025f20:	9411      	str	r4, [sp, #68]	@ 0x44
 8025f22:	7852      	ldrb	r2, [r2, #1]
 8025f24:	2a30      	cmp	r2, #48	@ 0x30
 8025f26:	d0f9      	beq.n	8025f1c <_strtod_l+0x2a4>
 8025f28:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8025f2c:	2c08      	cmp	r4, #8
 8025f2e:	f63f af79 	bhi.w	8025e24 <_strtod_l+0x1ac>
 8025f32:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8025f36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8025f3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025f3c:	1c54      	adds	r4, r2, #1
 8025f3e:	9411      	str	r4, [sp, #68]	@ 0x44
 8025f40:	7852      	ldrb	r2, [r2, #1]
 8025f42:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8025f46:	2e09      	cmp	r6, #9
 8025f48:	d937      	bls.n	8025fba <_strtod_l+0x342>
 8025f4a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8025f4c:	1ba4      	subs	r4, r4, r6
 8025f4e:	2c08      	cmp	r4, #8
 8025f50:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8025f54:	dc02      	bgt.n	8025f5c <_strtod_l+0x2e4>
 8025f56:	4564      	cmp	r4, ip
 8025f58:	bfa8      	it	ge
 8025f5a:	4664      	movge	r4, ip
 8025f5c:	f1be 0f00 	cmp.w	lr, #0
 8025f60:	d000      	beq.n	8025f64 <_strtod_l+0x2ec>
 8025f62:	4264      	negs	r4, r4
 8025f64:	2b00      	cmp	r3, #0
 8025f66:	d14d      	bne.n	8026004 <_strtod_l+0x38c>
 8025f68:	9b07      	ldr	r3, [sp, #28]
 8025f6a:	4318      	orrs	r0, r3
 8025f6c:	f47f aebf 	bne.w	8025cee <_strtod_l+0x76>
 8025f70:	2900      	cmp	r1, #0
 8025f72:	f47f aed8 	bne.w	8025d26 <_strtod_l+0xae>
 8025f76:	2a69      	cmp	r2, #105	@ 0x69
 8025f78:	d027      	beq.n	8025fca <_strtod_l+0x352>
 8025f7a:	dc24      	bgt.n	8025fc6 <_strtod_l+0x34e>
 8025f7c:	2a49      	cmp	r2, #73	@ 0x49
 8025f7e:	d024      	beq.n	8025fca <_strtod_l+0x352>
 8025f80:	2a4e      	cmp	r2, #78	@ 0x4e
 8025f82:	f47f aed0 	bne.w	8025d26 <_strtod_l+0xae>
 8025f86:	4997      	ldr	r1, [pc, #604]	@ (80261e4 <_strtod_l+0x56c>)
 8025f88:	a811      	add	r0, sp, #68	@ 0x44
 8025f8a:	f002 fe0b 	bl	8028ba4 <__match>
 8025f8e:	2800      	cmp	r0, #0
 8025f90:	f43f aec9 	beq.w	8025d26 <_strtod_l+0xae>
 8025f94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025f96:	781b      	ldrb	r3, [r3, #0]
 8025f98:	2b28      	cmp	r3, #40	@ 0x28
 8025f9a:	d12d      	bne.n	8025ff8 <_strtod_l+0x380>
 8025f9c:	4992      	ldr	r1, [pc, #584]	@ (80261e8 <_strtod_l+0x570>)
 8025f9e:	aa14      	add	r2, sp, #80	@ 0x50
 8025fa0:	a811      	add	r0, sp, #68	@ 0x44
 8025fa2:	f002 fe13 	bl	8028bcc <__hexnan>
 8025fa6:	2805      	cmp	r0, #5
 8025fa8:	d126      	bne.n	8025ff8 <_strtod_l+0x380>
 8025faa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025fac:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8025fb0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8025fb4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8025fb8:	e699      	b.n	8025cee <_strtod_l+0x76>
 8025fba:	240a      	movs	r4, #10
 8025fbc:	fb04 2c0c 	mla	ip, r4, ip, r2
 8025fc0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8025fc4:	e7b9      	b.n	8025f3a <_strtod_l+0x2c2>
 8025fc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8025fc8:	e7db      	b.n	8025f82 <_strtod_l+0x30a>
 8025fca:	4988      	ldr	r1, [pc, #544]	@ (80261ec <_strtod_l+0x574>)
 8025fcc:	a811      	add	r0, sp, #68	@ 0x44
 8025fce:	f002 fde9 	bl	8028ba4 <__match>
 8025fd2:	2800      	cmp	r0, #0
 8025fd4:	f43f aea7 	beq.w	8025d26 <_strtod_l+0xae>
 8025fd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025fda:	4985      	ldr	r1, [pc, #532]	@ (80261f0 <_strtod_l+0x578>)
 8025fdc:	3b01      	subs	r3, #1
 8025fde:	a811      	add	r0, sp, #68	@ 0x44
 8025fe0:	9311      	str	r3, [sp, #68]	@ 0x44
 8025fe2:	f002 fddf 	bl	8028ba4 <__match>
 8025fe6:	b910      	cbnz	r0, 8025fee <_strtod_l+0x376>
 8025fe8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025fea:	3301      	adds	r3, #1
 8025fec:	9311      	str	r3, [sp, #68]	@ 0x44
 8025fee:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8026204 <_strtod_l+0x58c>
 8025ff2:	f04f 0a00 	mov.w	sl, #0
 8025ff6:	e67a      	b.n	8025cee <_strtod_l+0x76>
 8025ff8:	487e      	ldr	r0, [pc, #504]	@ (80261f4 <_strtod_l+0x57c>)
 8025ffa:	f001 fd11 	bl	8027a20 <nan>
 8025ffe:	ec5b ab10 	vmov	sl, fp, d0
 8026002:	e674      	b.n	8025cee <_strtod_l+0x76>
 8026004:	ee07 9a90 	vmov	s15, r9
 8026008:	1be2      	subs	r2, r4, r7
 802600a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802600e:	2d00      	cmp	r5, #0
 8026010:	bf08      	it	eq
 8026012:	461d      	moveq	r5, r3
 8026014:	2b10      	cmp	r3, #16
 8026016:	9209      	str	r2, [sp, #36]	@ 0x24
 8026018:	461a      	mov	r2, r3
 802601a:	bfa8      	it	ge
 802601c:	2210      	movge	r2, #16
 802601e:	2b09      	cmp	r3, #9
 8026020:	ec5b ab17 	vmov	sl, fp, d7
 8026024:	dc15      	bgt.n	8026052 <_strtod_l+0x3da>
 8026026:	1be1      	subs	r1, r4, r7
 8026028:	2900      	cmp	r1, #0
 802602a:	f43f ae60 	beq.w	8025cee <_strtod_l+0x76>
 802602e:	eba4 0107 	sub.w	r1, r4, r7
 8026032:	dd72      	ble.n	802611a <_strtod_l+0x4a2>
 8026034:	2916      	cmp	r1, #22
 8026036:	dc59      	bgt.n	80260ec <_strtod_l+0x474>
 8026038:	4b6f      	ldr	r3, [pc, #444]	@ (80261f8 <_strtod_l+0x580>)
 802603a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802603c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026040:	ed93 7b00 	vldr	d7, [r3]
 8026044:	ec4b ab16 	vmov	d6, sl, fp
 8026048:	ee27 7b06 	vmul.f64	d7, d7, d6
 802604c:	ec5b ab17 	vmov	sl, fp, d7
 8026050:	e64d      	b.n	8025cee <_strtod_l+0x76>
 8026052:	4969      	ldr	r1, [pc, #420]	@ (80261f8 <_strtod_l+0x580>)
 8026054:	eddd 6a06 	vldr	s13, [sp, #24]
 8026058:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802605c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8026060:	2b0f      	cmp	r3, #15
 8026062:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8026066:	eea7 6b05 	vfma.f64	d6, d7, d5
 802606a:	ec5b ab16 	vmov	sl, fp, d6
 802606e:	ddda      	ble.n	8026026 <_strtod_l+0x3ae>
 8026070:	1a9a      	subs	r2, r3, r2
 8026072:	1be1      	subs	r1, r4, r7
 8026074:	440a      	add	r2, r1
 8026076:	2a00      	cmp	r2, #0
 8026078:	f340 8094 	ble.w	80261a4 <_strtod_l+0x52c>
 802607c:	f012 000f 	ands.w	r0, r2, #15
 8026080:	d00a      	beq.n	8026098 <_strtod_l+0x420>
 8026082:	495d      	ldr	r1, [pc, #372]	@ (80261f8 <_strtod_l+0x580>)
 8026084:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026088:	ed91 7b00 	vldr	d7, [r1]
 802608c:	ec4b ab16 	vmov	d6, sl, fp
 8026090:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026094:	ec5b ab17 	vmov	sl, fp, d7
 8026098:	f032 020f 	bics.w	r2, r2, #15
 802609c:	d073      	beq.n	8026186 <_strtod_l+0x50e>
 802609e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80260a2:	dd47      	ble.n	8026134 <_strtod_l+0x4bc>
 80260a4:	2400      	movs	r4, #0
 80260a6:	4625      	mov	r5, r4
 80260a8:	9407      	str	r4, [sp, #28]
 80260aa:	4626      	mov	r6, r4
 80260ac:	9a05      	ldr	r2, [sp, #20]
 80260ae:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8026204 <_strtod_l+0x58c>
 80260b2:	2322      	movs	r3, #34	@ 0x22
 80260b4:	6013      	str	r3, [r2, #0]
 80260b6:	f04f 0a00 	mov.w	sl, #0
 80260ba:	9b07      	ldr	r3, [sp, #28]
 80260bc:	2b00      	cmp	r3, #0
 80260be:	f43f ae16 	beq.w	8025cee <_strtod_l+0x76>
 80260c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80260c4:	9805      	ldr	r0, [sp, #20]
 80260c6:	f002 fe6f 	bl	8028da8 <_Bfree>
 80260ca:	9805      	ldr	r0, [sp, #20]
 80260cc:	4631      	mov	r1, r6
 80260ce:	f002 fe6b 	bl	8028da8 <_Bfree>
 80260d2:	9805      	ldr	r0, [sp, #20]
 80260d4:	4629      	mov	r1, r5
 80260d6:	f002 fe67 	bl	8028da8 <_Bfree>
 80260da:	9907      	ldr	r1, [sp, #28]
 80260dc:	9805      	ldr	r0, [sp, #20]
 80260de:	f002 fe63 	bl	8028da8 <_Bfree>
 80260e2:	9805      	ldr	r0, [sp, #20]
 80260e4:	4621      	mov	r1, r4
 80260e6:	f002 fe5f 	bl	8028da8 <_Bfree>
 80260ea:	e600      	b.n	8025cee <_strtod_l+0x76>
 80260ec:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80260f0:	1be0      	subs	r0, r4, r7
 80260f2:	4281      	cmp	r1, r0
 80260f4:	dbbc      	blt.n	8026070 <_strtod_l+0x3f8>
 80260f6:	4a40      	ldr	r2, [pc, #256]	@ (80261f8 <_strtod_l+0x580>)
 80260f8:	f1c3 030f 	rsb	r3, r3, #15
 80260fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8026100:	ed91 7b00 	vldr	d7, [r1]
 8026104:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026106:	ec4b ab16 	vmov	d6, sl, fp
 802610a:	1acb      	subs	r3, r1, r3
 802610c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8026110:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026114:	ed92 6b00 	vldr	d6, [r2]
 8026118:	e796      	b.n	8026048 <_strtod_l+0x3d0>
 802611a:	3116      	adds	r1, #22
 802611c:	dba8      	blt.n	8026070 <_strtod_l+0x3f8>
 802611e:	4b36      	ldr	r3, [pc, #216]	@ (80261f8 <_strtod_l+0x580>)
 8026120:	1b3c      	subs	r4, r7, r4
 8026122:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8026126:	ed94 7b00 	vldr	d7, [r4]
 802612a:	ec4b ab16 	vmov	d6, sl, fp
 802612e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026132:	e78b      	b.n	802604c <_strtod_l+0x3d4>
 8026134:	2000      	movs	r0, #0
 8026136:	ec4b ab17 	vmov	d7, sl, fp
 802613a:	4e30      	ldr	r6, [pc, #192]	@ (80261fc <_strtod_l+0x584>)
 802613c:	1112      	asrs	r2, r2, #4
 802613e:	4601      	mov	r1, r0
 8026140:	2a01      	cmp	r2, #1
 8026142:	dc23      	bgt.n	802618c <_strtod_l+0x514>
 8026144:	b108      	cbz	r0, 802614a <_strtod_l+0x4d2>
 8026146:	ec5b ab17 	vmov	sl, fp, d7
 802614a:	4a2c      	ldr	r2, [pc, #176]	@ (80261fc <_strtod_l+0x584>)
 802614c:	482c      	ldr	r0, [pc, #176]	@ (8026200 <_strtod_l+0x588>)
 802614e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8026152:	ed92 7b00 	vldr	d7, [r2]
 8026156:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802615a:	ec4b ab16 	vmov	d6, sl, fp
 802615e:	4a29      	ldr	r2, [pc, #164]	@ (8026204 <_strtod_l+0x58c>)
 8026160:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026164:	ee17 1a90 	vmov	r1, s15
 8026168:	400a      	ands	r2, r1
 802616a:	4282      	cmp	r2, r0
 802616c:	ec5b ab17 	vmov	sl, fp, d7
 8026170:	d898      	bhi.n	80260a4 <_strtod_l+0x42c>
 8026172:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8026176:	4282      	cmp	r2, r0
 8026178:	bf86      	itte	hi
 802617a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8026208 <_strtod_l+0x590>
 802617e:	f04f 3aff 	movhi.w	sl, #4294967295
 8026182:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8026186:	2200      	movs	r2, #0
 8026188:	9206      	str	r2, [sp, #24]
 802618a:	e076      	b.n	802627a <_strtod_l+0x602>
 802618c:	f012 0f01 	tst.w	r2, #1
 8026190:	d004      	beq.n	802619c <_strtod_l+0x524>
 8026192:	ed96 6b00 	vldr	d6, [r6]
 8026196:	2001      	movs	r0, #1
 8026198:	ee27 7b06 	vmul.f64	d7, d7, d6
 802619c:	3101      	adds	r1, #1
 802619e:	1052      	asrs	r2, r2, #1
 80261a0:	3608      	adds	r6, #8
 80261a2:	e7cd      	b.n	8026140 <_strtod_l+0x4c8>
 80261a4:	d0ef      	beq.n	8026186 <_strtod_l+0x50e>
 80261a6:	4252      	negs	r2, r2
 80261a8:	f012 000f 	ands.w	r0, r2, #15
 80261ac:	d00a      	beq.n	80261c4 <_strtod_l+0x54c>
 80261ae:	4912      	ldr	r1, [pc, #72]	@ (80261f8 <_strtod_l+0x580>)
 80261b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80261b4:	ed91 7b00 	vldr	d7, [r1]
 80261b8:	ec4b ab16 	vmov	d6, sl, fp
 80261bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80261c0:	ec5b ab17 	vmov	sl, fp, d7
 80261c4:	1112      	asrs	r2, r2, #4
 80261c6:	d0de      	beq.n	8026186 <_strtod_l+0x50e>
 80261c8:	2a1f      	cmp	r2, #31
 80261ca:	dd1f      	ble.n	802620c <_strtod_l+0x594>
 80261cc:	2400      	movs	r4, #0
 80261ce:	4625      	mov	r5, r4
 80261d0:	9407      	str	r4, [sp, #28]
 80261d2:	4626      	mov	r6, r4
 80261d4:	9a05      	ldr	r2, [sp, #20]
 80261d6:	2322      	movs	r3, #34	@ 0x22
 80261d8:	f04f 0a00 	mov.w	sl, #0
 80261dc:	f04f 0b00 	mov.w	fp, #0
 80261e0:	6013      	str	r3, [r2, #0]
 80261e2:	e76a      	b.n	80260ba <_strtod_l+0x442>
 80261e4:	0803b144 	.word	0x0803b144
 80261e8:	0803b2b4 	.word	0x0803b2b4
 80261ec:	0803b13c 	.word	0x0803b13c
 80261f0:	0803b176 	.word	0x0803b176
 80261f4:	0803b0c5 	.word	0x0803b0c5
 80261f8:	0803b440 	.word	0x0803b440
 80261fc:	0803b418 	.word	0x0803b418
 8026200:	7ca00000 	.word	0x7ca00000
 8026204:	7ff00000 	.word	0x7ff00000
 8026208:	7fefffff 	.word	0x7fefffff
 802620c:	f012 0110 	ands.w	r1, r2, #16
 8026210:	bf18      	it	ne
 8026212:	216a      	movne	r1, #106	@ 0x6a
 8026214:	9106      	str	r1, [sp, #24]
 8026216:	ec4b ab17 	vmov	d7, sl, fp
 802621a:	49af      	ldr	r1, [pc, #700]	@ (80264d8 <_strtod_l+0x860>)
 802621c:	2000      	movs	r0, #0
 802621e:	07d6      	lsls	r6, r2, #31
 8026220:	d504      	bpl.n	802622c <_strtod_l+0x5b4>
 8026222:	ed91 6b00 	vldr	d6, [r1]
 8026226:	2001      	movs	r0, #1
 8026228:	ee27 7b06 	vmul.f64	d7, d7, d6
 802622c:	1052      	asrs	r2, r2, #1
 802622e:	f101 0108 	add.w	r1, r1, #8
 8026232:	d1f4      	bne.n	802621e <_strtod_l+0x5a6>
 8026234:	b108      	cbz	r0, 802623a <_strtod_l+0x5c2>
 8026236:	ec5b ab17 	vmov	sl, fp, d7
 802623a:	9a06      	ldr	r2, [sp, #24]
 802623c:	b1b2      	cbz	r2, 802626c <_strtod_l+0x5f4>
 802623e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8026242:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8026246:	2a00      	cmp	r2, #0
 8026248:	4658      	mov	r0, fp
 802624a:	dd0f      	ble.n	802626c <_strtod_l+0x5f4>
 802624c:	2a1f      	cmp	r2, #31
 802624e:	dd55      	ble.n	80262fc <_strtod_l+0x684>
 8026250:	2a34      	cmp	r2, #52	@ 0x34
 8026252:	bfde      	ittt	le
 8026254:	f04f 32ff 	movle.w	r2, #4294967295
 8026258:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 802625c:	408a      	lslle	r2, r1
 802625e:	f04f 0a00 	mov.w	sl, #0
 8026262:	bfcc      	ite	gt
 8026264:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8026268:	ea02 0b00 	andle.w	fp, r2, r0
 802626c:	ec4b ab17 	vmov	d7, sl, fp
 8026270:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026278:	d0a8      	beq.n	80261cc <_strtod_l+0x554>
 802627a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802627c:	9805      	ldr	r0, [sp, #20]
 802627e:	f8cd 9000 	str.w	r9, [sp]
 8026282:	462a      	mov	r2, r5
 8026284:	f002 fdf8 	bl	8028e78 <__s2b>
 8026288:	9007      	str	r0, [sp, #28]
 802628a:	2800      	cmp	r0, #0
 802628c:	f43f af0a 	beq.w	80260a4 <_strtod_l+0x42c>
 8026290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026292:	1b3f      	subs	r7, r7, r4
 8026294:	2b00      	cmp	r3, #0
 8026296:	bfb4      	ite	lt
 8026298:	463b      	movlt	r3, r7
 802629a:	2300      	movge	r3, #0
 802629c:	930a      	str	r3, [sp, #40]	@ 0x28
 802629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262a0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80264c8 <_strtod_l+0x850>
 80262a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80262a8:	2400      	movs	r4, #0
 80262aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80262ac:	4625      	mov	r5, r4
 80262ae:	9b07      	ldr	r3, [sp, #28]
 80262b0:	9805      	ldr	r0, [sp, #20]
 80262b2:	6859      	ldr	r1, [r3, #4]
 80262b4:	f002 fd38 	bl	8028d28 <_Balloc>
 80262b8:	4606      	mov	r6, r0
 80262ba:	2800      	cmp	r0, #0
 80262bc:	f43f aef6 	beq.w	80260ac <_strtod_l+0x434>
 80262c0:	9b07      	ldr	r3, [sp, #28]
 80262c2:	691a      	ldr	r2, [r3, #16]
 80262c4:	ec4b ab19 	vmov	d9, sl, fp
 80262c8:	3202      	adds	r2, #2
 80262ca:	f103 010c 	add.w	r1, r3, #12
 80262ce:	0092      	lsls	r2, r2, #2
 80262d0:	300c      	adds	r0, #12
 80262d2:	f001 fb96 	bl	8027a02 <memcpy>
 80262d6:	eeb0 0b49 	vmov.f64	d0, d9
 80262da:	9805      	ldr	r0, [sp, #20]
 80262dc:	aa14      	add	r2, sp, #80	@ 0x50
 80262de:	a913      	add	r1, sp, #76	@ 0x4c
 80262e0:	f003 f8fe 	bl	80294e0 <__d2b>
 80262e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80262e6:	2800      	cmp	r0, #0
 80262e8:	f43f aee0 	beq.w	80260ac <_strtod_l+0x434>
 80262ec:	9805      	ldr	r0, [sp, #20]
 80262ee:	2101      	movs	r1, #1
 80262f0:	f002 fe58 	bl	8028fa4 <__i2b>
 80262f4:	4605      	mov	r5, r0
 80262f6:	b940      	cbnz	r0, 802630a <_strtod_l+0x692>
 80262f8:	2500      	movs	r5, #0
 80262fa:	e6d7      	b.n	80260ac <_strtod_l+0x434>
 80262fc:	f04f 31ff 	mov.w	r1, #4294967295
 8026300:	fa01 f202 	lsl.w	r2, r1, r2
 8026304:	ea02 0a0a 	and.w	sl, r2, sl
 8026308:	e7b0      	b.n	802626c <_strtod_l+0x5f4>
 802630a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 802630c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802630e:	2f00      	cmp	r7, #0
 8026310:	bfab      	itete	ge
 8026312:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8026314:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8026316:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 802631a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 802631e:	bfac      	ite	ge
 8026320:	eb07 0903 	addge.w	r9, r7, r3
 8026324:	eba3 0807 	sublt.w	r8, r3, r7
 8026328:	9b06      	ldr	r3, [sp, #24]
 802632a:	1aff      	subs	r7, r7, r3
 802632c:	4417      	add	r7, r2
 802632e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8026332:	4a6a      	ldr	r2, [pc, #424]	@ (80264dc <_strtod_l+0x864>)
 8026334:	3f01      	subs	r7, #1
 8026336:	4297      	cmp	r7, r2
 8026338:	da51      	bge.n	80263de <_strtod_l+0x766>
 802633a:	1bd1      	subs	r1, r2, r7
 802633c:	291f      	cmp	r1, #31
 802633e:	eba3 0301 	sub.w	r3, r3, r1
 8026342:	f04f 0201 	mov.w	r2, #1
 8026346:	dc3e      	bgt.n	80263c6 <_strtod_l+0x74e>
 8026348:	408a      	lsls	r2, r1
 802634a:	920c      	str	r2, [sp, #48]	@ 0x30
 802634c:	2200      	movs	r2, #0
 802634e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026350:	eb09 0703 	add.w	r7, r9, r3
 8026354:	4498      	add	r8, r3
 8026356:	9b06      	ldr	r3, [sp, #24]
 8026358:	45b9      	cmp	r9, r7
 802635a:	4498      	add	r8, r3
 802635c:	464b      	mov	r3, r9
 802635e:	bfa8      	it	ge
 8026360:	463b      	movge	r3, r7
 8026362:	4543      	cmp	r3, r8
 8026364:	bfa8      	it	ge
 8026366:	4643      	movge	r3, r8
 8026368:	2b00      	cmp	r3, #0
 802636a:	bfc2      	ittt	gt
 802636c:	1aff      	subgt	r7, r7, r3
 802636e:	eba8 0803 	subgt.w	r8, r8, r3
 8026372:	eba9 0903 	subgt.w	r9, r9, r3
 8026376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026378:	2b00      	cmp	r3, #0
 802637a:	dd16      	ble.n	80263aa <_strtod_l+0x732>
 802637c:	4629      	mov	r1, r5
 802637e:	9805      	ldr	r0, [sp, #20]
 8026380:	461a      	mov	r2, r3
 8026382:	f002 fec7 	bl	8029114 <__pow5mult>
 8026386:	4605      	mov	r5, r0
 8026388:	2800      	cmp	r0, #0
 802638a:	d0b5      	beq.n	80262f8 <_strtod_l+0x680>
 802638c:	4601      	mov	r1, r0
 802638e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026390:	9805      	ldr	r0, [sp, #20]
 8026392:	f002 fe1d 	bl	8028fd0 <__multiply>
 8026396:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026398:	2800      	cmp	r0, #0
 802639a:	f43f ae87 	beq.w	80260ac <_strtod_l+0x434>
 802639e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80263a0:	9805      	ldr	r0, [sp, #20]
 80263a2:	f002 fd01 	bl	8028da8 <_Bfree>
 80263a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80263a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80263aa:	2f00      	cmp	r7, #0
 80263ac:	dc1b      	bgt.n	80263e6 <_strtod_l+0x76e>
 80263ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263b0:	2b00      	cmp	r3, #0
 80263b2:	dd21      	ble.n	80263f8 <_strtod_l+0x780>
 80263b4:	4631      	mov	r1, r6
 80263b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80263b8:	9805      	ldr	r0, [sp, #20]
 80263ba:	f002 feab 	bl	8029114 <__pow5mult>
 80263be:	4606      	mov	r6, r0
 80263c0:	b9d0      	cbnz	r0, 80263f8 <_strtod_l+0x780>
 80263c2:	2600      	movs	r6, #0
 80263c4:	e672      	b.n	80260ac <_strtod_l+0x434>
 80263c6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80263ca:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80263ce:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80263d2:	37e2      	adds	r7, #226	@ 0xe2
 80263d4:	fa02 f107 	lsl.w	r1, r2, r7
 80263d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80263da:	920c      	str	r2, [sp, #48]	@ 0x30
 80263dc:	e7b8      	b.n	8026350 <_strtod_l+0x6d8>
 80263de:	2200      	movs	r2, #0
 80263e0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80263e2:	2201      	movs	r2, #1
 80263e4:	e7f9      	b.n	80263da <_strtod_l+0x762>
 80263e6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80263e8:	9805      	ldr	r0, [sp, #20]
 80263ea:	463a      	mov	r2, r7
 80263ec:	f002 feec 	bl	80291c8 <__lshift>
 80263f0:	9012      	str	r0, [sp, #72]	@ 0x48
 80263f2:	2800      	cmp	r0, #0
 80263f4:	d1db      	bne.n	80263ae <_strtod_l+0x736>
 80263f6:	e659      	b.n	80260ac <_strtod_l+0x434>
 80263f8:	f1b8 0f00 	cmp.w	r8, #0
 80263fc:	dd07      	ble.n	802640e <_strtod_l+0x796>
 80263fe:	4631      	mov	r1, r6
 8026400:	9805      	ldr	r0, [sp, #20]
 8026402:	4642      	mov	r2, r8
 8026404:	f002 fee0 	bl	80291c8 <__lshift>
 8026408:	4606      	mov	r6, r0
 802640a:	2800      	cmp	r0, #0
 802640c:	d0d9      	beq.n	80263c2 <_strtod_l+0x74a>
 802640e:	f1b9 0f00 	cmp.w	r9, #0
 8026412:	dd08      	ble.n	8026426 <_strtod_l+0x7ae>
 8026414:	4629      	mov	r1, r5
 8026416:	9805      	ldr	r0, [sp, #20]
 8026418:	464a      	mov	r2, r9
 802641a:	f002 fed5 	bl	80291c8 <__lshift>
 802641e:	4605      	mov	r5, r0
 8026420:	2800      	cmp	r0, #0
 8026422:	f43f ae43 	beq.w	80260ac <_strtod_l+0x434>
 8026426:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026428:	9805      	ldr	r0, [sp, #20]
 802642a:	4632      	mov	r2, r6
 802642c:	f002 ff54 	bl	80292d8 <__mdiff>
 8026430:	4604      	mov	r4, r0
 8026432:	2800      	cmp	r0, #0
 8026434:	f43f ae3a 	beq.w	80260ac <_strtod_l+0x434>
 8026438:	2300      	movs	r3, #0
 802643a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 802643e:	60c3      	str	r3, [r0, #12]
 8026440:	4629      	mov	r1, r5
 8026442:	f002 ff2d 	bl	80292a0 <__mcmp>
 8026446:	2800      	cmp	r0, #0
 8026448:	da4c      	bge.n	80264e4 <_strtod_l+0x86c>
 802644a:	ea58 080a 	orrs.w	r8, r8, sl
 802644e:	d172      	bne.n	8026536 <_strtod_l+0x8be>
 8026450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026454:	2b00      	cmp	r3, #0
 8026456:	d16e      	bne.n	8026536 <_strtod_l+0x8be>
 8026458:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802645c:	0d1b      	lsrs	r3, r3, #20
 802645e:	051b      	lsls	r3, r3, #20
 8026460:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8026464:	d967      	bls.n	8026536 <_strtod_l+0x8be>
 8026466:	6963      	ldr	r3, [r4, #20]
 8026468:	b913      	cbnz	r3, 8026470 <_strtod_l+0x7f8>
 802646a:	6923      	ldr	r3, [r4, #16]
 802646c:	2b01      	cmp	r3, #1
 802646e:	dd62      	ble.n	8026536 <_strtod_l+0x8be>
 8026470:	4621      	mov	r1, r4
 8026472:	2201      	movs	r2, #1
 8026474:	9805      	ldr	r0, [sp, #20]
 8026476:	f002 fea7 	bl	80291c8 <__lshift>
 802647a:	4629      	mov	r1, r5
 802647c:	4604      	mov	r4, r0
 802647e:	f002 ff0f 	bl	80292a0 <__mcmp>
 8026482:	2800      	cmp	r0, #0
 8026484:	dd57      	ble.n	8026536 <_strtod_l+0x8be>
 8026486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802648a:	9a06      	ldr	r2, [sp, #24]
 802648c:	0d1b      	lsrs	r3, r3, #20
 802648e:	051b      	lsls	r3, r3, #20
 8026490:	2a00      	cmp	r2, #0
 8026492:	d06e      	beq.n	8026572 <_strtod_l+0x8fa>
 8026494:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8026498:	d86b      	bhi.n	8026572 <_strtod_l+0x8fa>
 802649a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802649e:	f67f ae99 	bls.w	80261d4 <_strtod_l+0x55c>
 80264a2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80264d0 <_strtod_l+0x858>
 80264a6:	ec4b ab16 	vmov	d6, sl, fp
 80264aa:	4b0d      	ldr	r3, [pc, #52]	@ (80264e0 <_strtod_l+0x868>)
 80264ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80264b0:	ee17 2a90 	vmov	r2, s15
 80264b4:	4013      	ands	r3, r2
 80264b6:	ec5b ab17 	vmov	sl, fp, d7
 80264ba:	2b00      	cmp	r3, #0
 80264bc:	f47f ae01 	bne.w	80260c2 <_strtod_l+0x44a>
 80264c0:	9a05      	ldr	r2, [sp, #20]
 80264c2:	2322      	movs	r3, #34	@ 0x22
 80264c4:	6013      	str	r3, [r2, #0]
 80264c6:	e5fc      	b.n	80260c2 <_strtod_l+0x44a>
 80264c8:	ffc00000 	.word	0xffc00000
 80264cc:	41dfffff 	.word	0x41dfffff
 80264d0:	00000000 	.word	0x00000000
 80264d4:	39500000 	.word	0x39500000
 80264d8:	0803b2e0 	.word	0x0803b2e0
 80264dc:	fffffc02 	.word	0xfffffc02
 80264e0:	7ff00000 	.word	0x7ff00000
 80264e4:	46d9      	mov	r9, fp
 80264e6:	d15d      	bne.n	80265a4 <_strtod_l+0x92c>
 80264e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80264ec:	f1b8 0f00 	cmp.w	r8, #0
 80264f0:	d02a      	beq.n	8026548 <_strtod_l+0x8d0>
 80264f2:	4aa9      	ldr	r2, [pc, #676]	@ (8026798 <_strtod_l+0xb20>)
 80264f4:	4293      	cmp	r3, r2
 80264f6:	d12a      	bne.n	802654e <_strtod_l+0x8d6>
 80264f8:	9b06      	ldr	r3, [sp, #24]
 80264fa:	4652      	mov	r2, sl
 80264fc:	b1fb      	cbz	r3, 802653e <_strtod_l+0x8c6>
 80264fe:	4ba7      	ldr	r3, [pc, #668]	@ (802679c <_strtod_l+0xb24>)
 8026500:	ea0b 0303 	and.w	r3, fp, r3
 8026504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8026508:	f04f 31ff 	mov.w	r1, #4294967295
 802650c:	d81a      	bhi.n	8026544 <_strtod_l+0x8cc>
 802650e:	0d1b      	lsrs	r3, r3, #20
 8026510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026514:	fa01 f303 	lsl.w	r3, r1, r3
 8026518:	429a      	cmp	r2, r3
 802651a:	d118      	bne.n	802654e <_strtod_l+0x8d6>
 802651c:	4ba0      	ldr	r3, [pc, #640]	@ (80267a0 <_strtod_l+0xb28>)
 802651e:	4599      	cmp	r9, r3
 8026520:	d102      	bne.n	8026528 <_strtod_l+0x8b0>
 8026522:	3201      	adds	r2, #1
 8026524:	f43f adc2 	beq.w	80260ac <_strtod_l+0x434>
 8026528:	4b9c      	ldr	r3, [pc, #624]	@ (802679c <_strtod_l+0xb24>)
 802652a:	ea09 0303 	and.w	r3, r9, r3
 802652e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8026532:	f04f 0a00 	mov.w	sl, #0
 8026536:	9b06      	ldr	r3, [sp, #24]
 8026538:	2b00      	cmp	r3, #0
 802653a:	d1b2      	bne.n	80264a2 <_strtod_l+0x82a>
 802653c:	e5c1      	b.n	80260c2 <_strtod_l+0x44a>
 802653e:	f04f 33ff 	mov.w	r3, #4294967295
 8026542:	e7e9      	b.n	8026518 <_strtod_l+0x8a0>
 8026544:	460b      	mov	r3, r1
 8026546:	e7e7      	b.n	8026518 <_strtod_l+0x8a0>
 8026548:	ea53 030a 	orrs.w	r3, r3, sl
 802654c:	d09b      	beq.n	8026486 <_strtod_l+0x80e>
 802654e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026550:	b1c3      	cbz	r3, 8026584 <_strtod_l+0x90c>
 8026552:	ea13 0f09 	tst.w	r3, r9
 8026556:	d0ee      	beq.n	8026536 <_strtod_l+0x8be>
 8026558:	9a06      	ldr	r2, [sp, #24]
 802655a:	4650      	mov	r0, sl
 802655c:	4659      	mov	r1, fp
 802655e:	f1b8 0f00 	cmp.w	r8, #0
 8026562:	d013      	beq.n	802658c <_strtod_l+0x914>
 8026564:	f7ff fb6e 	bl	8025c44 <sulp>
 8026568:	ee39 7b00 	vadd.f64	d7, d9, d0
 802656c:	ec5b ab17 	vmov	sl, fp, d7
 8026570:	e7e1      	b.n	8026536 <_strtod_l+0x8be>
 8026572:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8026576:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802657a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802657e:	f04f 3aff 	mov.w	sl, #4294967295
 8026582:	e7d8      	b.n	8026536 <_strtod_l+0x8be>
 8026584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026586:	ea13 0f0a 	tst.w	r3, sl
 802658a:	e7e4      	b.n	8026556 <_strtod_l+0x8de>
 802658c:	f7ff fb5a 	bl	8025c44 <sulp>
 8026590:	ee39 0b40 	vsub.f64	d0, d9, d0
 8026594:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8026598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802659c:	ec5b ab10 	vmov	sl, fp, d0
 80265a0:	d1c9      	bne.n	8026536 <_strtod_l+0x8be>
 80265a2:	e617      	b.n	80261d4 <_strtod_l+0x55c>
 80265a4:	4629      	mov	r1, r5
 80265a6:	4620      	mov	r0, r4
 80265a8:	f002 fff2 	bl	8029590 <__ratio>
 80265ac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80265b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80265b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265b8:	d85d      	bhi.n	8026676 <_strtod_l+0x9fe>
 80265ba:	f1b8 0f00 	cmp.w	r8, #0
 80265be:	d164      	bne.n	802668a <_strtod_l+0xa12>
 80265c0:	f1ba 0f00 	cmp.w	sl, #0
 80265c4:	d14b      	bne.n	802665e <_strtod_l+0x9e6>
 80265c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80265ca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80265ce:	2b00      	cmp	r3, #0
 80265d0:	d160      	bne.n	8026694 <_strtod_l+0xa1c>
 80265d2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80265d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80265da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265de:	d401      	bmi.n	80265e4 <_strtod_l+0x96c>
 80265e0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80265e4:	eeb1 ab48 	vneg.f64	d10, d8
 80265e8:	486c      	ldr	r0, [pc, #432]	@ (802679c <_strtod_l+0xb24>)
 80265ea:	496e      	ldr	r1, [pc, #440]	@ (80267a4 <_strtod_l+0xb2c>)
 80265ec:	ea09 0700 	and.w	r7, r9, r0
 80265f0:	428f      	cmp	r7, r1
 80265f2:	ec53 2b1a 	vmov	r2, r3, d10
 80265f6:	d17d      	bne.n	80266f4 <_strtod_l+0xa7c>
 80265f8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80265fc:	ec4b ab1c 	vmov	d12, sl, fp
 8026600:	eeb0 0b4c 	vmov.f64	d0, d12
 8026604:	f002 fefc 	bl	8029400 <__ulp>
 8026608:	4864      	ldr	r0, [pc, #400]	@ (802679c <_strtod_l+0xb24>)
 802660a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 802660e:	ee1c 3a90 	vmov	r3, s25
 8026612:	4a65      	ldr	r2, [pc, #404]	@ (80267a8 <_strtod_l+0xb30>)
 8026614:	ea03 0100 	and.w	r1, r3, r0
 8026618:	4291      	cmp	r1, r2
 802661a:	ec5b ab1c 	vmov	sl, fp, d12
 802661e:	d93c      	bls.n	802669a <_strtod_l+0xa22>
 8026620:	ee19 2a90 	vmov	r2, s19
 8026624:	4b5e      	ldr	r3, [pc, #376]	@ (80267a0 <_strtod_l+0xb28>)
 8026626:	429a      	cmp	r2, r3
 8026628:	d104      	bne.n	8026634 <_strtod_l+0x9bc>
 802662a:	ee19 3a10 	vmov	r3, s18
 802662e:	3301      	adds	r3, #1
 8026630:	f43f ad3c 	beq.w	80260ac <_strtod_l+0x434>
 8026634:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80267a0 <_strtod_l+0xb28>
 8026638:	f04f 3aff 	mov.w	sl, #4294967295
 802663c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802663e:	9805      	ldr	r0, [sp, #20]
 8026640:	f002 fbb2 	bl	8028da8 <_Bfree>
 8026644:	9805      	ldr	r0, [sp, #20]
 8026646:	4631      	mov	r1, r6
 8026648:	f002 fbae 	bl	8028da8 <_Bfree>
 802664c:	9805      	ldr	r0, [sp, #20]
 802664e:	4629      	mov	r1, r5
 8026650:	f002 fbaa 	bl	8028da8 <_Bfree>
 8026654:	9805      	ldr	r0, [sp, #20]
 8026656:	4621      	mov	r1, r4
 8026658:	f002 fba6 	bl	8028da8 <_Bfree>
 802665c:	e627      	b.n	80262ae <_strtod_l+0x636>
 802665e:	f1ba 0f01 	cmp.w	sl, #1
 8026662:	d103      	bne.n	802666c <_strtod_l+0x9f4>
 8026664:	f1bb 0f00 	cmp.w	fp, #0
 8026668:	f43f adb4 	beq.w	80261d4 <_strtod_l+0x55c>
 802666c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8026670:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8026674:	e7b8      	b.n	80265e8 <_strtod_l+0x970>
 8026676:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802667a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802667e:	f1b8 0f00 	cmp.w	r8, #0
 8026682:	d0af      	beq.n	80265e4 <_strtod_l+0x96c>
 8026684:	eeb0 ab48 	vmov.f64	d10, d8
 8026688:	e7ae      	b.n	80265e8 <_strtod_l+0x970>
 802668a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 802668e:	eeb0 8b4a 	vmov.f64	d8, d10
 8026692:	e7a9      	b.n	80265e8 <_strtod_l+0x970>
 8026694:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8026698:	e7a6      	b.n	80265e8 <_strtod_l+0x970>
 802669a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802669e:	9b06      	ldr	r3, [sp, #24]
 80266a0:	46d9      	mov	r9, fp
 80266a2:	2b00      	cmp	r3, #0
 80266a4:	d1ca      	bne.n	802663c <_strtod_l+0x9c4>
 80266a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80266aa:	0d1b      	lsrs	r3, r3, #20
 80266ac:	051b      	lsls	r3, r3, #20
 80266ae:	429f      	cmp	r7, r3
 80266b0:	d1c4      	bne.n	802663c <_strtod_l+0x9c4>
 80266b2:	ec51 0b18 	vmov	r0, r1, d8
 80266b6:	f7da f867 	bl	8000788 <__aeabi_d2lz>
 80266ba:	f7da f81f 	bl	80006fc <__aeabi_l2d>
 80266be:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80266c2:	ec41 0b17 	vmov	d7, r0, r1
 80266c6:	ea49 090a 	orr.w	r9, r9, sl
 80266ca:	ea59 0908 	orrs.w	r9, r9, r8
 80266ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 80266d2:	d03c      	beq.n	802674e <_strtod_l+0xad6>
 80266d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8026780 <_strtod_l+0xb08>
 80266d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80266dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266e0:	f53f acef 	bmi.w	80260c2 <_strtod_l+0x44a>
 80266e4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8026788 <_strtod_l+0xb10>
 80266e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80266ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266f0:	dda4      	ble.n	802663c <_strtod_l+0x9c4>
 80266f2:	e4e6      	b.n	80260c2 <_strtod_l+0x44a>
 80266f4:	9906      	ldr	r1, [sp, #24]
 80266f6:	b1e1      	cbz	r1, 8026732 <_strtod_l+0xaba>
 80266f8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80266fc:	d819      	bhi.n	8026732 <_strtod_l+0xaba>
 80266fe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8026702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026706:	d811      	bhi.n	802672c <_strtod_l+0xab4>
 8026708:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 802670c:	ee18 3a10 	vmov	r3, s16
 8026710:	2b01      	cmp	r3, #1
 8026712:	bf38      	it	cc
 8026714:	2301      	movcc	r3, #1
 8026716:	ee08 3a10 	vmov	s16, r3
 802671a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 802671e:	f1b8 0f00 	cmp.w	r8, #0
 8026722:	d111      	bne.n	8026748 <_strtod_l+0xad0>
 8026724:	eeb1 7b48 	vneg.f64	d7, d8
 8026728:	ec53 2b17 	vmov	r2, r3, d7
 802672c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8026730:	1bcb      	subs	r3, r1, r7
 8026732:	eeb0 0b49 	vmov.f64	d0, d9
 8026736:	ec43 2b1a 	vmov	d10, r2, r3
 802673a:	f002 fe61 	bl	8029400 <__ulp>
 802673e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8026742:	ec5b ab19 	vmov	sl, fp, d9
 8026746:	e7aa      	b.n	802669e <_strtod_l+0xa26>
 8026748:	eeb0 7b48 	vmov.f64	d7, d8
 802674c:	e7ec      	b.n	8026728 <_strtod_l+0xab0>
 802674e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8026790 <_strtod_l+0xb18>
 8026752:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802675a:	f57f af6f 	bpl.w	802663c <_strtod_l+0x9c4>
 802675e:	e4b0      	b.n	80260c2 <_strtod_l+0x44a>
 8026760:	2300      	movs	r3, #0
 8026762:	9308      	str	r3, [sp, #32]
 8026764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026766:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026768:	6013      	str	r3, [r2, #0]
 802676a:	f7ff bac4 	b.w	8025cf6 <_strtod_l+0x7e>
 802676e:	2a65      	cmp	r2, #101	@ 0x65
 8026770:	f43f abbf 	beq.w	8025ef2 <_strtod_l+0x27a>
 8026774:	2a45      	cmp	r2, #69	@ 0x45
 8026776:	f43f abbc 	beq.w	8025ef2 <_strtod_l+0x27a>
 802677a:	2101      	movs	r1, #1
 802677c:	f7ff bbf4 	b.w	8025f68 <_strtod_l+0x2f0>
 8026780:	94a03595 	.word	0x94a03595
 8026784:	3fdfffff 	.word	0x3fdfffff
 8026788:	35afe535 	.word	0x35afe535
 802678c:	3fe00000 	.word	0x3fe00000
 8026790:	94a03595 	.word	0x94a03595
 8026794:	3fcfffff 	.word	0x3fcfffff
 8026798:	000fffff 	.word	0x000fffff
 802679c:	7ff00000 	.word	0x7ff00000
 80267a0:	7fefffff 	.word	0x7fefffff
 80267a4:	7fe00000 	.word	0x7fe00000
 80267a8:	7c9fffff 	.word	0x7c9fffff

080267ac <strtod>:
 80267ac:	460a      	mov	r2, r1
 80267ae:	4601      	mov	r1, r0
 80267b0:	4802      	ldr	r0, [pc, #8]	@ (80267bc <strtod+0x10>)
 80267b2:	4b03      	ldr	r3, [pc, #12]	@ (80267c0 <strtod+0x14>)
 80267b4:	6800      	ldr	r0, [r0, #0]
 80267b6:	f7ff ba5f 	b.w	8025c78 <_strtod_l>
 80267ba:	bf00      	nop
 80267bc:	240009a0 	.word	0x240009a0
 80267c0:	24000834 	.word	0x24000834

080267c4 <_strtol_l.isra.0>:
 80267c4:	2b24      	cmp	r3, #36	@ 0x24
 80267c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267ca:	4686      	mov	lr, r0
 80267cc:	4690      	mov	r8, r2
 80267ce:	d801      	bhi.n	80267d4 <_strtol_l.isra.0+0x10>
 80267d0:	2b01      	cmp	r3, #1
 80267d2:	d106      	bne.n	80267e2 <_strtol_l.isra.0+0x1e>
 80267d4:	f001 f8e0 	bl	8027998 <__errno>
 80267d8:	2316      	movs	r3, #22
 80267da:	6003      	str	r3, [r0, #0]
 80267dc:	2000      	movs	r0, #0
 80267de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267e2:	4834      	ldr	r0, [pc, #208]	@ (80268b4 <_strtol_l.isra.0+0xf0>)
 80267e4:	460d      	mov	r5, r1
 80267e6:	462a      	mov	r2, r5
 80267e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80267ec:	5d06      	ldrb	r6, [r0, r4]
 80267ee:	f016 0608 	ands.w	r6, r6, #8
 80267f2:	d1f8      	bne.n	80267e6 <_strtol_l.isra.0+0x22>
 80267f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80267f6:	d110      	bne.n	802681a <_strtol_l.isra.0+0x56>
 80267f8:	782c      	ldrb	r4, [r5, #0]
 80267fa:	2601      	movs	r6, #1
 80267fc:	1c95      	adds	r5, r2, #2
 80267fe:	f033 0210 	bics.w	r2, r3, #16
 8026802:	d115      	bne.n	8026830 <_strtol_l.isra.0+0x6c>
 8026804:	2c30      	cmp	r4, #48	@ 0x30
 8026806:	d10d      	bne.n	8026824 <_strtol_l.isra.0+0x60>
 8026808:	782a      	ldrb	r2, [r5, #0]
 802680a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802680e:	2a58      	cmp	r2, #88	@ 0x58
 8026810:	d108      	bne.n	8026824 <_strtol_l.isra.0+0x60>
 8026812:	786c      	ldrb	r4, [r5, #1]
 8026814:	3502      	adds	r5, #2
 8026816:	2310      	movs	r3, #16
 8026818:	e00a      	b.n	8026830 <_strtol_l.isra.0+0x6c>
 802681a:	2c2b      	cmp	r4, #43	@ 0x2b
 802681c:	bf04      	itt	eq
 802681e:	782c      	ldrbeq	r4, [r5, #0]
 8026820:	1c95      	addeq	r5, r2, #2
 8026822:	e7ec      	b.n	80267fe <_strtol_l.isra.0+0x3a>
 8026824:	2b00      	cmp	r3, #0
 8026826:	d1f6      	bne.n	8026816 <_strtol_l.isra.0+0x52>
 8026828:	2c30      	cmp	r4, #48	@ 0x30
 802682a:	bf14      	ite	ne
 802682c:	230a      	movne	r3, #10
 802682e:	2308      	moveq	r3, #8
 8026830:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8026834:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026838:	2200      	movs	r2, #0
 802683a:	fbbc f9f3 	udiv	r9, ip, r3
 802683e:	4610      	mov	r0, r2
 8026840:	fb03 ca19 	mls	sl, r3, r9, ip
 8026844:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8026848:	2f09      	cmp	r7, #9
 802684a:	d80f      	bhi.n	802686c <_strtol_l.isra.0+0xa8>
 802684c:	463c      	mov	r4, r7
 802684e:	42a3      	cmp	r3, r4
 8026850:	dd1b      	ble.n	802688a <_strtol_l.isra.0+0xc6>
 8026852:	1c57      	adds	r7, r2, #1
 8026854:	d007      	beq.n	8026866 <_strtol_l.isra.0+0xa2>
 8026856:	4581      	cmp	r9, r0
 8026858:	d314      	bcc.n	8026884 <_strtol_l.isra.0+0xc0>
 802685a:	d101      	bne.n	8026860 <_strtol_l.isra.0+0x9c>
 802685c:	45a2      	cmp	sl, r4
 802685e:	db11      	blt.n	8026884 <_strtol_l.isra.0+0xc0>
 8026860:	fb00 4003 	mla	r0, r0, r3, r4
 8026864:	2201      	movs	r2, #1
 8026866:	f815 4b01 	ldrb.w	r4, [r5], #1
 802686a:	e7eb      	b.n	8026844 <_strtol_l.isra.0+0x80>
 802686c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8026870:	2f19      	cmp	r7, #25
 8026872:	d801      	bhi.n	8026878 <_strtol_l.isra.0+0xb4>
 8026874:	3c37      	subs	r4, #55	@ 0x37
 8026876:	e7ea      	b.n	802684e <_strtol_l.isra.0+0x8a>
 8026878:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802687c:	2f19      	cmp	r7, #25
 802687e:	d804      	bhi.n	802688a <_strtol_l.isra.0+0xc6>
 8026880:	3c57      	subs	r4, #87	@ 0x57
 8026882:	e7e4      	b.n	802684e <_strtol_l.isra.0+0x8a>
 8026884:	f04f 32ff 	mov.w	r2, #4294967295
 8026888:	e7ed      	b.n	8026866 <_strtol_l.isra.0+0xa2>
 802688a:	1c53      	adds	r3, r2, #1
 802688c:	d108      	bne.n	80268a0 <_strtol_l.isra.0+0xdc>
 802688e:	2322      	movs	r3, #34	@ 0x22
 8026890:	f8ce 3000 	str.w	r3, [lr]
 8026894:	4660      	mov	r0, ip
 8026896:	f1b8 0f00 	cmp.w	r8, #0
 802689a:	d0a0      	beq.n	80267de <_strtol_l.isra.0+0x1a>
 802689c:	1e69      	subs	r1, r5, #1
 802689e:	e006      	b.n	80268ae <_strtol_l.isra.0+0xea>
 80268a0:	b106      	cbz	r6, 80268a4 <_strtol_l.isra.0+0xe0>
 80268a2:	4240      	negs	r0, r0
 80268a4:	f1b8 0f00 	cmp.w	r8, #0
 80268a8:	d099      	beq.n	80267de <_strtol_l.isra.0+0x1a>
 80268aa:	2a00      	cmp	r2, #0
 80268ac:	d1f6      	bne.n	802689c <_strtol_l.isra.0+0xd8>
 80268ae:	f8c8 1000 	str.w	r1, [r8]
 80268b2:	e794      	b.n	80267de <_strtol_l.isra.0+0x1a>
 80268b4:	0803b309 	.word	0x0803b309

080268b8 <strtol>:
 80268b8:	4613      	mov	r3, r2
 80268ba:	460a      	mov	r2, r1
 80268bc:	4601      	mov	r1, r0
 80268be:	4802      	ldr	r0, [pc, #8]	@ (80268c8 <strtol+0x10>)
 80268c0:	6800      	ldr	r0, [r0, #0]
 80268c2:	f7ff bf7f 	b.w	80267c4 <_strtol_l.isra.0>
 80268c6:	bf00      	nop
 80268c8:	240009a0 	.word	0x240009a0

080268cc <__cvt>:
 80268cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80268ce:	ed2d 8b02 	vpush	{d8}
 80268d2:	eeb0 8b40 	vmov.f64	d8, d0
 80268d6:	b085      	sub	sp, #20
 80268d8:	4617      	mov	r7, r2
 80268da:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80268dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80268de:	ee18 2a90 	vmov	r2, s17
 80268e2:	f025 0520 	bic.w	r5, r5, #32
 80268e6:	2a00      	cmp	r2, #0
 80268e8:	bfb6      	itet	lt
 80268ea:	222d      	movlt	r2, #45	@ 0x2d
 80268ec:	2200      	movge	r2, #0
 80268ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80268f2:	2d46      	cmp	r5, #70	@ 0x46
 80268f4:	460c      	mov	r4, r1
 80268f6:	701a      	strb	r2, [r3, #0]
 80268f8:	d004      	beq.n	8026904 <__cvt+0x38>
 80268fa:	2d45      	cmp	r5, #69	@ 0x45
 80268fc:	d100      	bne.n	8026900 <__cvt+0x34>
 80268fe:	3401      	adds	r4, #1
 8026900:	2102      	movs	r1, #2
 8026902:	e000      	b.n	8026906 <__cvt+0x3a>
 8026904:	2103      	movs	r1, #3
 8026906:	ab03      	add	r3, sp, #12
 8026908:	9301      	str	r3, [sp, #4]
 802690a:	ab02      	add	r3, sp, #8
 802690c:	9300      	str	r3, [sp, #0]
 802690e:	4622      	mov	r2, r4
 8026910:	4633      	mov	r3, r6
 8026912:	eeb0 0b48 	vmov.f64	d0, d8
 8026916:	f001 f913 	bl	8027b40 <_dtoa_r>
 802691a:	2d47      	cmp	r5, #71	@ 0x47
 802691c:	d114      	bne.n	8026948 <__cvt+0x7c>
 802691e:	07fb      	lsls	r3, r7, #31
 8026920:	d50a      	bpl.n	8026938 <__cvt+0x6c>
 8026922:	1902      	adds	r2, r0, r4
 8026924:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802692c:	bf08      	it	eq
 802692e:	9203      	streq	r2, [sp, #12]
 8026930:	2130      	movs	r1, #48	@ 0x30
 8026932:	9b03      	ldr	r3, [sp, #12]
 8026934:	4293      	cmp	r3, r2
 8026936:	d319      	bcc.n	802696c <__cvt+0xa0>
 8026938:	9b03      	ldr	r3, [sp, #12]
 802693a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802693c:	1a1b      	subs	r3, r3, r0
 802693e:	6013      	str	r3, [r2, #0]
 8026940:	b005      	add	sp, #20
 8026942:	ecbd 8b02 	vpop	{d8}
 8026946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026948:	2d46      	cmp	r5, #70	@ 0x46
 802694a:	eb00 0204 	add.w	r2, r0, r4
 802694e:	d1e9      	bne.n	8026924 <__cvt+0x58>
 8026950:	7803      	ldrb	r3, [r0, #0]
 8026952:	2b30      	cmp	r3, #48	@ 0x30
 8026954:	d107      	bne.n	8026966 <__cvt+0x9a>
 8026956:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802695a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802695e:	bf1c      	itt	ne
 8026960:	f1c4 0401 	rsbne	r4, r4, #1
 8026964:	6034      	strne	r4, [r6, #0]
 8026966:	6833      	ldr	r3, [r6, #0]
 8026968:	441a      	add	r2, r3
 802696a:	e7db      	b.n	8026924 <__cvt+0x58>
 802696c:	1c5c      	adds	r4, r3, #1
 802696e:	9403      	str	r4, [sp, #12]
 8026970:	7019      	strb	r1, [r3, #0]
 8026972:	e7de      	b.n	8026932 <__cvt+0x66>

08026974 <__exponent>:
 8026974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026976:	2900      	cmp	r1, #0
 8026978:	bfba      	itte	lt
 802697a:	4249      	neglt	r1, r1
 802697c:	232d      	movlt	r3, #45	@ 0x2d
 802697e:	232b      	movge	r3, #43	@ 0x2b
 8026980:	2909      	cmp	r1, #9
 8026982:	7002      	strb	r2, [r0, #0]
 8026984:	7043      	strb	r3, [r0, #1]
 8026986:	dd29      	ble.n	80269dc <__exponent+0x68>
 8026988:	f10d 0307 	add.w	r3, sp, #7
 802698c:	461d      	mov	r5, r3
 802698e:	270a      	movs	r7, #10
 8026990:	461a      	mov	r2, r3
 8026992:	fbb1 f6f7 	udiv	r6, r1, r7
 8026996:	fb07 1416 	mls	r4, r7, r6, r1
 802699a:	3430      	adds	r4, #48	@ 0x30
 802699c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80269a0:	460c      	mov	r4, r1
 80269a2:	2c63      	cmp	r4, #99	@ 0x63
 80269a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80269a8:	4631      	mov	r1, r6
 80269aa:	dcf1      	bgt.n	8026990 <__exponent+0x1c>
 80269ac:	3130      	adds	r1, #48	@ 0x30
 80269ae:	1e94      	subs	r4, r2, #2
 80269b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80269b4:	1c41      	adds	r1, r0, #1
 80269b6:	4623      	mov	r3, r4
 80269b8:	42ab      	cmp	r3, r5
 80269ba:	d30a      	bcc.n	80269d2 <__exponent+0x5e>
 80269bc:	f10d 0309 	add.w	r3, sp, #9
 80269c0:	1a9b      	subs	r3, r3, r2
 80269c2:	42ac      	cmp	r4, r5
 80269c4:	bf88      	it	hi
 80269c6:	2300      	movhi	r3, #0
 80269c8:	3302      	adds	r3, #2
 80269ca:	4403      	add	r3, r0
 80269cc:	1a18      	subs	r0, r3, r0
 80269ce:	b003      	add	sp, #12
 80269d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80269d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80269d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80269da:	e7ed      	b.n	80269b8 <__exponent+0x44>
 80269dc:	2330      	movs	r3, #48	@ 0x30
 80269de:	3130      	adds	r1, #48	@ 0x30
 80269e0:	7083      	strb	r3, [r0, #2]
 80269e2:	70c1      	strb	r1, [r0, #3]
 80269e4:	1d03      	adds	r3, r0, #4
 80269e6:	e7f1      	b.n	80269cc <__exponent+0x58>

080269e8 <_printf_float>:
 80269e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269ec:	b08d      	sub	sp, #52	@ 0x34
 80269ee:	460c      	mov	r4, r1
 80269f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80269f4:	4616      	mov	r6, r2
 80269f6:	461f      	mov	r7, r3
 80269f8:	4605      	mov	r5, r0
 80269fa:	f000 ff5f 	bl	80278bc <_localeconv_r>
 80269fe:	f8d0 b000 	ldr.w	fp, [r0]
 8026a02:	4658      	mov	r0, fp
 8026a04:	f7d9 fce4 	bl	80003d0 <strlen>
 8026a08:	2300      	movs	r3, #0
 8026a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8026a10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8026a14:	6822      	ldr	r2, [r4, #0]
 8026a16:	9005      	str	r0, [sp, #20]
 8026a18:	3307      	adds	r3, #7
 8026a1a:	f023 0307 	bic.w	r3, r3, #7
 8026a1e:	f103 0108 	add.w	r1, r3, #8
 8026a22:	f8c8 1000 	str.w	r1, [r8]
 8026a26:	ed93 0b00 	vldr	d0, [r3]
 8026a2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8026c88 <_printf_float+0x2a0>
 8026a2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8026a32:	eeb4 7b46 	vcmp.f64	d7, d6
 8026a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8026a3e:	dd24      	ble.n	8026a8a <_printf_float+0xa2>
 8026a40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a48:	d502      	bpl.n	8026a50 <_printf_float+0x68>
 8026a4a:	232d      	movs	r3, #45	@ 0x2d
 8026a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026a50:	498f      	ldr	r1, [pc, #572]	@ (8026c90 <_printf_float+0x2a8>)
 8026a52:	4b90      	ldr	r3, [pc, #576]	@ (8026c94 <_printf_float+0x2ac>)
 8026a54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8026a58:	bf8c      	ite	hi
 8026a5a:	4688      	movhi	r8, r1
 8026a5c:	4698      	movls	r8, r3
 8026a5e:	f022 0204 	bic.w	r2, r2, #4
 8026a62:	2303      	movs	r3, #3
 8026a64:	6123      	str	r3, [r4, #16]
 8026a66:	6022      	str	r2, [r4, #0]
 8026a68:	f04f 0a00 	mov.w	sl, #0
 8026a6c:	9700      	str	r7, [sp, #0]
 8026a6e:	4633      	mov	r3, r6
 8026a70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8026a72:	4621      	mov	r1, r4
 8026a74:	4628      	mov	r0, r5
 8026a76:	f000 f9d1 	bl	8026e1c <_printf_common>
 8026a7a:	3001      	adds	r0, #1
 8026a7c:	f040 8089 	bne.w	8026b92 <_printf_float+0x1aa>
 8026a80:	f04f 30ff 	mov.w	r0, #4294967295
 8026a84:	b00d      	add	sp, #52	@ 0x34
 8026a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8026a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a92:	d709      	bvc.n	8026aa8 <_printf_float+0xc0>
 8026a94:	ee10 3a90 	vmov	r3, s1
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	bfbc      	itt	lt
 8026a9c:	232d      	movlt	r3, #45	@ 0x2d
 8026a9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8026aa2:	497d      	ldr	r1, [pc, #500]	@ (8026c98 <_printf_float+0x2b0>)
 8026aa4:	4b7d      	ldr	r3, [pc, #500]	@ (8026c9c <_printf_float+0x2b4>)
 8026aa6:	e7d5      	b.n	8026a54 <_printf_float+0x6c>
 8026aa8:	6863      	ldr	r3, [r4, #4]
 8026aaa:	1c59      	adds	r1, r3, #1
 8026aac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8026ab0:	d139      	bne.n	8026b26 <_printf_float+0x13e>
 8026ab2:	2306      	movs	r3, #6
 8026ab4:	6063      	str	r3, [r4, #4]
 8026ab6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8026aba:	2300      	movs	r3, #0
 8026abc:	6022      	str	r2, [r4, #0]
 8026abe:	9303      	str	r3, [sp, #12]
 8026ac0:	ab0a      	add	r3, sp, #40	@ 0x28
 8026ac2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8026ac6:	ab09      	add	r3, sp, #36	@ 0x24
 8026ac8:	9300      	str	r3, [sp, #0]
 8026aca:	6861      	ldr	r1, [r4, #4]
 8026acc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8026ad0:	4628      	mov	r0, r5
 8026ad2:	f7ff fefb 	bl	80268cc <__cvt>
 8026ad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8026ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026adc:	4680      	mov	r8, r0
 8026ade:	d129      	bne.n	8026b34 <_printf_float+0x14c>
 8026ae0:	1cc8      	adds	r0, r1, #3
 8026ae2:	db02      	blt.n	8026aea <_printf_float+0x102>
 8026ae4:	6863      	ldr	r3, [r4, #4]
 8026ae6:	4299      	cmp	r1, r3
 8026ae8:	dd41      	ble.n	8026b6e <_printf_float+0x186>
 8026aea:	f1a9 0902 	sub.w	r9, r9, #2
 8026aee:	fa5f f989 	uxtb.w	r9, r9
 8026af2:	3901      	subs	r1, #1
 8026af4:	464a      	mov	r2, r9
 8026af6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8026afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8026afc:	f7ff ff3a 	bl	8026974 <__exponent>
 8026b00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026b02:	1813      	adds	r3, r2, r0
 8026b04:	2a01      	cmp	r2, #1
 8026b06:	4682      	mov	sl, r0
 8026b08:	6123      	str	r3, [r4, #16]
 8026b0a:	dc02      	bgt.n	8026b12 <_printf_float+0x12a>
 8026b0c:	6822      	ldr	r2, [r4, #0]
 8026b0e:	07d2      	lsls	r2, r2, #31
 8026b10:	d501      	bpl.n	8026b16 <_printf_float+0x12e>
 8026b12:	3301      	adds	r3, #1
 8026b14:	6123      	str	r3, [r4, #16]
 8026b16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d0a6      	beq.n	8026a6c <_printf_float+0x84>
 8026b1e:	232d      	movs	r3, #45	@ 0x2d
 8026b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026b24:	e7a2      	b.n	8026a6c <_printf_float+0x84>
 8026b26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8026b2a:	d1c4      	bne.n	8026ab6 <_printf_float+0xce>
 8026b2c:	2b00      	cmp	r3, #0
 8026b2e:	d1c2      	bne.n	8026ab6 <_printf_float+0xce>
 8026b30:	2301      	movs	r3, #1
 8026b32:	e7bf      	b.n	8026ab4 <_printf_float+0xcc>
 8026b34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8026b38:	d9db      	bls.n	8026af2 <_printf_float+0x10a>
 8026b3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8026b3e:	d118      	bne.n	8026b72 <_printf_float+0x18a>
 8026b40:	2900      	cmp	r1, #0
 8026b42:	6863      	ldr	r3, [r4, #4]
 8026b44:	dd0b      	ble.n	8026b5e <_printf_float+0x176>
 8026b46:	6121      	str	r1, [r4, #16]
 8026b48:	b913      	cbnz	r3, 8026b50 <_printf_float+0x168>
 8026b4a:	6822      	ldr	r2, [r4, #0]
 8026b4c:	07d0      	lsls	r0, r2, #31
 8026b4e:	d502      	bpl.n	8026b56 <_printf_float+0x16e>
 8026b50:	3301      	adds	r3, #1
 8026b52:	440b      	add	r3, r1
 8026b54:	6123      	str	r3, [r4, #16]
 8026b56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8026b58:	f04f 0a00 	mov.w	sl, #0
 8026b5c:	e7db      	b.n	8026b16 <_printf_float+0x12e>
 8026b5e:	b913      	cbnz	r3, 8026b66 <_printf_float+0x17e>
 8026b60:	6822      	ldr	r2, [r4, #0]
 8026b62:	07d2      	lsls	r2, r2, #31
 8026b64:	d501      	bpl.n	8026b6a <_printf_float+0x182>
 8026b66:	3302      	adds	r3, #2
 8026b68:	e7f4      	b.n	8026b54 <_printf_float+0x16c>
 8026b6a:	2301      	movs	r3, #1
 8026b6c:	e7f2      	b.n	8026b54 <_printf_float+0x16c>
 8026b6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8026b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026b74:	4299      	cmp	r1, r3
 8026b76:	db05      	blt.n	8026b84 <_printf_float+0x19c>
 8026b78:	6823      	ldr	r3, [r4, #0]
 8026b7a:	6121      	str	r1, [r4, #16]
 8026b7c:	07d8      	lsls	r0, r3, #31
 8026b7e:	d5ea      	bpl.n	8026b56 <_printf_float+0x16e>
 8026b80:	1c4b      	adds	r3, r1, #1
 8026b82:	e7e7      	b.n	8026b54 <_printf_float+0x16c>
 8026b84:	2900      	cmp	r1, #0
 8026b86:	bfd4      	ite	le
 8026b88:	f1c1 0202 	rsble	r2, r1, #2
 8026b8c:	2201      	movgt	r2, #1
 8026b8e:	4413      	add	r3, r2
 8026b90:	e7e0      	b.n	8026b54 <_printf_float+0x16c>
 8026b92:	6823      	ldr	r3, [r4, #0]
 8026b94:	055a      	lsls	r2, r3, #21
 8026b96:	d407      	bmi.n	8026ba8 <_printf_float+0x1c0>
 8026b98:	6923      	ldr	r3, [r4, #16]
 8026b9a:	4642      	mov	r2, r8
 8026b9c:	4631      	mov	r1, r6
 8026b9e:	4628      	mov	r0, r5
 8026ba0:	47b8      	blx	r7
 8026ba2:	3001      	adds	r0, #1
 8026ba4:	d12a      	bne.n	8026bfc <_printf_float+0x214>
 8026ba6:	e76b      	b.n	8026a80 <_printf_float+0x98>
 8026ba8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8026bac:	f240 80e0 	bls.w	8026d70 <_printf_float+0x388>
 8026bb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8026bb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bbc:	d133      	bne.n	8026c26 <_printf_float+0x23e>
 8026bbe:	4a38      	ldr	r2, [pc, #224]	@ (8026ca0 <_printf_float+0x2b8>)
 8026bc0:	2301      	movs	r3, #1
 8026bc2:	4631      	mov	r1, r6
 8026bc4:	4628      	mov	r0, r5
 8026bc6:	47b8      	blx	r7
 8026bc8:	3001      	adds	r0, #1
 8026bca:	f43f af59 	beq.w	8026a80 <_printf_float+0x98>
 8026bce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8026bd2:	4543      	cmp	r3, r8
 8026bd4:	db02      	blt.n	8026bdc <_printf_float+0x1f4>
 8026bd6:	6823      	ldr	r3, [r4, #0]
 8026bd8:	07d8      	lsls	r0, r3, #31
 8026bda:	d50f      	bpl.n	8026bfc <_printf_float+0x214>
 8026bdc:	9b05      	ldr	r3, [sp, #20]
 8026bde:	465a      	mov	r2, fp
 8026be0:	4631      	mov	r1, r6
 8026be2:	4628      	mov	r0, r5
 8026be4:	47b8      	blx	r7
 8026be6:	3001      	adds	r0, #1
 8026be8:	f43f af4a 	beq.w	8026a80 <_printf_float+0x98>
 8026bec:	f04f 0900 	mov.w	r9, #0
 8026bf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8026bf4:	f104 0a1a 	add.w	sl, r4, #26
 8026bf8:	45c8      	cmp	r8, r9
 8026bfa:	dc09      	bgt.n	8026c10 <_printf_float+0x228>
 8026bfc:	6823      	ldr	r3, [r4, #0]
 8026bfe:	079b      	lsls	r3, r3, #30
 8026c00:	f100 8107 	bmi.w	8026e12 <_printf_float+0x42a>
 8026c04:	68e0      	ldr	r0, [r4, #12]
 8026c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026c08:	4298      	cmp	r0, r3
 8026c0a:	bfb8      	it	lt
 8026c0c:	4618      	movlt	r0, r3
 8026c0e:	e739      	b.n	8026a84 <_printf_float+0x9c>
 8026c10:	2301      	movs	r3, #1
 8026c12:	4652      	mov	r2, sl
 8026c14:	4631      	mov	r1, r6
 8026c16:	4628      	mov	r0, r5
 8026c18:	47b8      	blx	r7
 8026c1a:	3001      	adds	r0, #1
 8026c1c:	f43f af30 	beq.w	8026a80 <_printf_float+0x98>
 8026c20:	f109 0901 	add.w	r9, r9, #1
 8026c24:	e7e8      	b.n	8026bf8 <_printf_float+0x210>
 8026c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c28:	2b00      	cmp	r3, #0
 8026c2a:	dc3b      	bgt.n	8026ca4 <_printf_float+0x2bc>
 8026c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8026ca0 <_printf_float+0x2b8>)
 8026c2e:	2301      	movs	r3, #1
 8026c30:	4631      	mov	r1, r6
 8026c32:	4628      	mov	r0, r5
 8026c34:	47b8      	blx	r7
 8026c36:	3001      	adds	r0, #1
 8026c38:	f43f af22 	beq.w	8026a80 <_printf_float+0x98>
 8026c3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8026c40:	ea59 0303 	orrs.w	r3, r9, r3
 8026c44:	d102      	bne.n	8026c4c <_printf_float+0x264>
 8026c46:	6823      	ldr	r3, [r4, #0]
 8026c48:	07d9      	lsls	r1, r3, #31
 8026c4a:	d5d7      	bpl.n	8026bfc <_printf_float+0x214>
 8026c4c:	9b05      	ldr	r3, [sp, #20]
 8026c4e:	465a      	mov	r2, fp
 8026c50:	4631      	mov	r1, r6
 8026c52:	4628      	mov	r0, r5
 8026c54:	47b8      	blx	r7
 8026c56:	3001      	adds	r0, #1
 8026c58:	f43f af12 	beq.w	8026a80 <_printf_float+0x98>
 8026c5c:	f04f 0a00 	mov.w	sl, #0
 8026c60:	f104 0b1a 	add.w	fp, r4, #26
 8026c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c66:	425b      	negs	r3, r3
 8026c68:	4553      	cmp	r3, sl
 8026c6a:	dc01      	bgt.n	8026c70 <_printf_float+0x288>
 8026c6c:	464b      	mov	r3, r9
 8026c6e:	e794      	b.n	8026b9a <_printf_float+0x1b2>
 8026c70:	2301      	movs	r3, #1
 8026c72:	465a      	mov	r2, fp
 8026c74:	4631      	mov	r1, r6
 8026c76:	4628      	mov	r0, r5
 8026c78:	47b8      	blx	r7
 8026c7a:	3001      	adds	r0, #1
 8026c7c:	f43f af00 	beq.w	8026a80 <_printf_float+0x98>
 8026c80:	f10a 0a01 	add.w	sl, sl, #1
 8026c84:	e7ee      	b.n	8026c64 <_printf_float+0x27c>
 8026c86:	bf00      	nop
 8026c88:	ffffffff 	.word	0xffffffff
 8026c8c:	7fefffff 	.word	0x7fefffff
 8026c90:	0803b13b 	.word	0x0803b13b
 8026c94:	0803b137 	.word	0x0803b137
 8026c98:	0803b143 	.word	0x0803b143
 8026c9c:	0803b13f 	.word	0x0803b13f
 8026ca0:	0803b147 	.word	0x0803b147
 8026ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026caa:	4553      	cmp	r3, sl
 8026cac:	bfa8      	it	ge
 8026cae:	4653      	movge	r3, sl
 8026cb0:	2b00      	cmp	r3, #0
 8026cb2:	4699      	mov	r9, r3
 8026cb4:	dc37      	bgt.n	8026d26 <_printf_float+0x33e>
 8026cb6:	2300      	movs	r3, #0
 8026cb8:	9307      	str	r3, [sp, #28]
 8026cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026cbe:	f104 021a 	add.w	r2, r4, #26
 8026cc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8026cc4:	9907      	ldr	r1, [sp, #28]
 8026cc6:	9306      	str	r3, [sp, #24]
 8026cc8:	eba3 0309 	sub.w	r3, r3, r9
 8026ccc:	428b      	cmp	r3, r1
 8026cce:	dc31      	bgt.n	8026d34 <_printf_float+0x34c>
 8026cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cd2:	459a      	cmp	sl, r3
 8026cd4:	dc3b      	bgt.n	8026d4e <_printf_float+0x366>
 8026cd6:	6823      	ldr	r3, [r4, #0]
 8026cd8:	07da      	lsls	r2, r3, #31
 8026cda:	d438      	bmi.n	8026d4e <_printf_float+0x366>
 8026cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026cde:	ebaa 0903 	sub.w	r9, sl, r3
 8026ce2:	9b06      	ldr	r3, [sp, #24]
 8026ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8026ce8:	4599      	cmp	r9, r3
 8026cea:	bfa8      	it	ge
 8026cec:	4699      	movge	r9, r3
 8026cee:	f1b9 0f00 	cmp.w	r9, #0
 8026cf2:	dc34      	bgt.n	8026d5e <_printf_float+0x376>
 8026cf4:	f04f 0800 	mov.w	r8, #0
 8026cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026cfc:	f104 0b1a 	add.w	fp, r4, #26
 8026d00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d02:	ebaa 0303 	sub.w	r3, sl, r3
 8026d06:	eba3 0309 	sub.w	r3, r3, r9
 8026d0a:	4543      	cmp	r3, r8
 8026d0c:	f77f af76 	ble.w	8026bfc <_printf_float+0x214>
 8026d10:	2301      	movs	r3, #1
 8026d12:	465a      	mov	r2, fp
 8026d14:	4631      	mov	r1, r6
 8026d16:	4628      	mov	r0, r5
 8026d18:	47b8      	blx	r7
 8026d1a:	3001      	adds	r0, #1
 8026d1c:	f43f aeb0 	beq.w	8026a80 <_printf_float+0x98>
 8026d20:	f108 0801 	add.w	r8, r8, #1
 8026d24:	e7ec      	b.n	8026d00 <_printf_float+0x318>
 8026d26:	4642      	mov	r2, r8
 8026d28:	4631      	mov	r1, r6
 8026d2a:	4628      	mov	r0, r5
 8026d2c:	47b8      	blx	r7
 8026d2e:	3001      	adds	r0, #1
 8026d30:	d1c1      	bne.n	8026cb6 <_printf_float+0x2ce>
 8026d32:	e6a5      	b.n	8026a80 <_printf_float+0x98>
 8026d34:	2301      	movs	r3, #1
 8026d36:	4631      	mov	r1, r6
 8026d38:	4628      	mov	r0, r5
 8026d3a:	9206      	str	r2, [sp, #24]
 8026d3c:	47b8      	blx	r7
 8026d3e:	3001      	adds	r0, #1
 8026d40:	f43f ae9e 	beq.w	8026a80 <_printf_float+0x98>
 8026d44:	9b07      	ldr	r3, [sp, #28]
 8026d46:	9a06      	ldr	r2, [sp, #24]
 8026d48:	3301      	adds	r3, #1
 8026d4a:	9307      	str	r3, [sp, #28]
 8026d4c:	e7b9      	b.n	8026cc2 <_printf_float+0x2da>
 8026d4e:	9b05      	ldr	r3, [sp, #20]
 8026d50:	465a      	mov	r2, fp
 8026d52:	4631      	mov	r1, r6
 8026d54:	4628      	mov	r0, r5
 8026d56:	47b8      	blx	r7
 8026d58:	3001      	adds	r0, #1
 8026d5a:	d1bf      	bne.n	8026cdc <_printf_float+0x2f4>
 8026d5c:	e690      	b.n	8026a80 <_printf_float+0x98>
 8026d5e:	9a06      	ldr	r2, [sp, #24]
 8026d60:	464b      	mov	r3, r9
 8026d62:	4442      	add	r2, r8
 8026d64:	4631      	mov	r1, r6
 8026d66:	4628      	mov	r0, r5
 8026d68:	47b8      	blx	r7
 8026d6a:	3001      	adds	r0, #1
 8026d6c:	d1c2      	bne.n	8026cf4 <_printf_float+0x30c>
 8026d6e:	e687      	b.n	8026a80 <_printf_float+0x98>
 8026d70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026d74:	f1b9 0f01 	cmp.w	r9, #1
 8026d78:	dc01      	bgt.n	8026d7e <_printf_float+0x396>
 8026d7a:	07db      	lsls	r3, r3, #31
 8026d7c:	d536      	bpl.n	8026dec <_printf_float+0x404>
 8026d7e:	2301      	movs	r3, #1
 8026d80:	4642      	mov	r2, r8
 8026d82:	4631      	mov	r1, r6
 8026d84:	4628      	mov	r0, r5
 8026d86:	47b8      	blx	r7
 8026d88:	3001      	adds	r0, #1
 8026d8a:	f43f ae79 	beq.w	8026a80 <_printf_float+0x98>
 8026d8e:	9b05      	ldr	r3, [sp, #20]
 8026d90:	465a      	mov	r2, fp
 8026d92:	4631      	mov	r1, r6
 8026d94:	4628      	mov	r0, r5
 8026d96:	47b8      	blx	r7
 8026d98:	3001      	adds	r0, #1
 8026d9a:	f43f ae71 	beq.w	8026a80 <_printf_float+0x98>
 8026d9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8026da2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026daa:	f109 39ff 	add.w	r9, r9, #4294967295
 8026dae:	d018      	beq.n	8026de2 <_printf_float+0x3fa>
 8026db0:	464b      	mov	r3, r9
 8026db2:	f108 0201 	add.w	r2, r8, #1
 8026db6:	4631      	mov	r1, r6
 8026db8:	4628      	mov	r0, r5
 8026dba:	47b8      	blx	r7
 8026dbc:	3001      	adds	r0, #1
 8026dbe:	d10c      	bne.n	8026dda <_printf_float+0x3f2>
 8026dc0:	e65e      	b.n	8026a80 <_printf_float+0x98>
 8026dc2:	2301      	movs	r3, #1
 8026dc4:	465a      	mov	r2, fp
 8026dc6:	4631      	mov	r1, r6
 8026dc8:	4628      	mov	r0, r5
 8026dca:	47b8      	blx	r7
 8026dcc:	3001      	adds	r0, #1
 8026dce:	f43f ae57 	beq.w	8026a80 <_printf_float+0x98>
 8026dd2:	f108 0801 	add.w	r8, r8, #1
 8026dd6:	45c8      	cmp	r8, r9
 8026dd8:	dbf3      	blt.n	8026dc2 <_printf_float+0x3da>
 8026dda:	4653      	mov	r3, sl
 8026ddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8026de0:	e6dc      	b.n	8026b9c <_printf_float+0x1b4>
 8026de2:	f04f 0800 	mov.w	r8, #0
 8026de6:	f104 0b1a 	add.w	fp, r4, #26
 8026dea:	e7f4      	b.n	8026dd6 <_printf_float+0x3ee>
 8026dec:	2301      	movs	r3, #1
 8026dee:	4642      	mov	r2, r8
 8026df0:	e7e1      	b.n	8026db6 <_printf_float+0x3ce>
 8026df2:	2301      	movs	r3, #1
 8026df4:	464a      	mov	r2, r9
 8026df6:	4631      	mov	r1, r6
 8026df8:	4628      	mov	r0, r5
 8026dfa:	47b8      	blx	r7
 8026dfc:	3001      	adds	r0, #1
 8026dfe:	f43f ae3f 	beq.w	8026a80 <_printf_float+0x98>
 8026e02:	f108 0801 	add.w	r8, r8, #1
 8026e06:	68e3      	ldr	r3, [r4, #12]
 8026e08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026e0a:	1a5b      	subs	r3, r3, r1
 8026e0c:	4543      	cmp	r3, r8
 8026e0e:	dcf0      	bgt.n	8026df2 <_printf_float+0x40a>
 8026e10:	e6f8      	b.n	8026c04 <_printf_float+0x21c>
 8026e12:	f04f 0800 	mov.w	r8, #0
 8026e16:	f104 0919 	add.w	r9, r4, #25
 8026e1a:	e7f4      	b.n	8026e06 <_printf_float+0x41e>

08026e1c <_printf_common>:
 8026e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e20:	4616      	mov	r6, r2
 8026e22:	4698      	mov	r8, r3
 8026e24:	688a      	ldr	r2, [r1, #8]
 8026e26:	690b      	ldr	r3, [r1, #16]
 8026e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026e2c:	4293      	cmp	r3, r2
 8026e2e:	bfb8      	it	lt
 8026e30:	4613      	movlt	r3, r2
 8026e32:	6033      	str	r3, [r6, #0]
 8026e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026e38:	4607      	mov	r7, r0
 8026e3a:	460c      	mov	r4, r1
 8026e3c:	b10a      	cbz	r2, 8026e42 <_printf_common+0x26>
 8026e3e:	3301      	adds	r3, #1
 8026e40:	6033      	str	r3, [r6, #0]
 8026e42:	6823      	ldr	r3, [r4, #0]
 8026e44:	0699      	lsls	r1, r3, #26
 8026e46:	bf42      	ittt	mi
 8026e48:	6833      	ldrmi	r3, [r6, #0]
 8026e4a:	3302      	addmi	r3, #2
 8026e4c:	6033      	strmi	r3, [r6, #0]
 8026e4e:	6825      	ldr	r5, [r4, #0]
 8026e50:	f015 0506 	ands.w	r5, r5, #6
 8026e54:	d106      	bne.n	8026e64 <_printf_common+0x48>
 8026e56:	f104 0a19 	add.w	sl, r4, #25
 8026e5a:	68e3      	ldr	r3, [r4, #12]
 8026e5c:	6832      	ldr	r2, [r6, #0]
 8026e5e:	1a9b      	subs	r3, r3, r2
 8026e60:	42ab      	cmp	r3, r5
 8026e62:	dc26      	bgt.n	8026eb2 <_printf_common+0x96>
 8026e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8026e68:	6822      	ldr	r2, [r4, #0]
 8026e6a:	3b00      	subs	r3, #0
 8026e6c:	bf18      	it	ne
 8026e6e:	2301      	movne	r3, #1
 8026e70:	0692      	lsls	r2, r2, #26
 8026e72:	d42b      	bmi.n	8026ecc <_printf_common+0xb0>
 8026e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8026e78:	4641      	mov	r1, r8
 8026e7a:	4638      	mov	r0, r7
 8026e7c:	47c8      	blx	r9
 8026e7e:	3001      	adds	r0, #1
 8026e80:	d01e      	beq.n	8026ec0 <_printf_common+0xa4>
 8026e82:	6823      	ldr	r3, [r4, #0]
 8026e84:	6922      	ldr	r2, [r4, #16]
 8026e86:	f003 0306 	and.w	r3, r3, #6
 8026e8a:	2b04      	cmp	r3, #4
 8026e8c:	bf02      	ittt	eq
 8026e8e:	68e5      	ldreq	r5, [r4, #12]
 8026e90:	6833      	ldreq	r3, [r6, #0]
 8026e92:	1aed      	subeq	r5, r5, r3
 8026e94:	68a3      	ldr	r3, [r4, #8]
 8026e96:	bf0c      	ite	eq
 8026e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026e9c:	2500      	movne	r5, #0
 8026e9e:	4293      	cmp	r3, r2
 8026ea0:	bfc4      	itt	gt
 8026ea2:	1a9b      	subgt	r3, r3, r2
 8026ea4:	18ed      	addgt	r5, r5, r3
 8026ea6:	2600      	movs	r6, #0
 8026ea8:	341a      	adds	r4, #26
 8026eaa:	42b5      	cmp	r5, r6
 8026eac:	d11a      	bne.n	8026ee4 <_printf_common+0xc8>
 8026eae:	2000      	movs	r0, #0
 8026eb0:	e008      	b.n	8026ec4 <_printf_common+0xa8>
 8026eb2:	2301      	movs	r3, #1
 8026eb4:	4652      	mov	r2, sl
 8026eb6:	4641      	mov	r1, r8
 8026eb8:	4638      	mov	r0, r7
 8026eba:	47c8      	blx	r9
 8026ebc:	3001      	adds	r0, #1
 8026ebe:	d103      	bne.n	8026ec8 <_printf_common+0xac>
 8026ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8026ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ec8:	3501      	adds	r5, #1
 8026eca:	e7c6      	b.n	8026e5a <_printf_common+0x3e>
 8026ecc:	18e1      	adds	r1, r4, r3
 8026ece:	1c5a      	adds	r2, r3, #1
 8026ed0:	2030      	movs	r0, #48	@ 0x30
 8026ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8026ed6:	4422      	add	r2, r4
 8026ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8026edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026ee0:	3302      	adds	r3, #2
 8026ee2:	e7c7      	b.n	8026e74 <_printf_common+0x58>
 8026ee4:	2301      	movs	r3, #1
 8026ee6:	4622      	mov	r2, r4
 8026ee8:	4641      	mov	r1, r8
 8026eea:	4638      	mov	r0, r7
 8026eec:	47c8      	blx	r9
 8026eee:	3001      	adds	r0, #1
 8026ef0:	d0e6      	beq.n	8026ec0 <_printf_common+0xa4>
 8026ef2:	3601      	adds	r6, #1
 8026ef4:	e7d9      	b.n	8026eaa <_printf_common+0x8e>
	...

08026ef8 <_printf_i>:
 8026ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026efc:	7e0f      	ldrb	r7, [r1, #24]
 8026efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8026f00:	2f78      	cmp	r7, #120	@ 0x78
 8026f02:	4691      	mov	r9, r2
 8026f04:	4680      	mov	r8, r0
 8026f06:	460c      	mov	r4, r1
 8026f08:	469a      	mov	sl, r3
 8026f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8026f0e:	d807      	bhi.n	8026f20 <_printf_i+0x28>
 8026f10:	2f62      	cmp	r7, #98	@ 0x62
 8026f12:	d80a      	bhi.n	8026f2a <_printf_i+0x32>
 8026f14:	2f00      	cmp	r7, #0
 8026f16:	f000 80d1 	beq.w	80270bc <_printf_i+0x1c4>
 8026f1a:	2f58      	cmp	r7, #88	@ 0x58
 8026f1c:	f000 80b8 	beq.w	8027090 <_printf_i+0x198>
 8026f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8026f28:	e03a      	b.n	8026fa0 <_printf_i+0xa8>
 8026f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8026f2e:	2b15      	cmp	r3, #21
 8026f30:	d8f6      	bhi.n	8026f20 <_printf_i+0x28>
 8026f32:	a101      	add	r1, pc, #4	@ (adr r1, 8026f38 <_printf_i+0x40>)
 8026f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026f38:	08026f91 	.word	0x08026f91
 8026f3c:	08026fa5 	.word	0x08026fa5
 8026f40:	08026f21 	.word	0x08026f21
 8026f44:	08026f21 	.word	0x08026f21
 8026f48:	08026f21 	.word	0x08026f21
 8026f4c:	08026f21 	.word	0x08026f21
 8026f50:	08026fa5 	.word	0x08026fa5
 8026f54:	08026f21 	.word	0x08026f21
 8026f58:	08026f21 	.word	0x08026f21
 8026f5c:	08026f21 	.word	0x08026f21
 8026f60:	08026f21 	.word	0x08026f21
 8026f64:	080270a3 	.word	0x080270a3
 8026f68:	08026fcf 	.word	0x08026fcf
 8026f6c:	0802705d 	.word	0x0802705d
 8026f70:	08026f21 	.word	0x08026f21
 8026f74:	08026f21 	.word	0x08026f21
 8026f78:	080270c5 	.word	0x080270c5
 8026f7c:	08026f21 	.word	0x08026f21
 8026f80:	08026fcf 	.word	0x08026fcf
 8026f84:	08026f21 	.word	0x08026f21
 8026f88:	08026f21 	.word	0x08026f21
 8026f8c:	08027065 	.word	0x08027065
 8026f90:	6833      	ldr	r3, [r6, #0]
 8026f92:	1d1a      	adds	r2, r3, #4
 8026f94:	681b      	ldr	r3, [r3, #0]
 8026f96:	6032      	str	r2, [r6, #0]
 8026f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8026fa0:	2301      	movs	r3, #1
 8026fa2:	e09c      	b.n	80270de <_printf_i+0x1e6>
 8026fa4:	6833      	ldr	r3, [r6, #0]
 8026fa6:	6820      	ldr	r0, [r4, #0]
 8026fa8:	1d19      	adds	r1, r3, #4
 8026faa:	6031      	str	r1, [r6, #0]
 8026fac:	0606      	lsls	r6, r0, #24
 8026fae:	d501      	bpl.n	8026fb4 <_printf_i+0xbc>
 8026fb0:	681d      	ldr	r5, [r3, #0]
 8026fb2:	e003      	b.n	8026fbc <_printf_i+0xc4>
 8026fb4:	0645      	lsls	r5, r0, #25
 8026fb6:	d5fb      	bpl.n	8026fb0 <_printf_i+0xb8>
 8026fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026fbc:	2d00      	cmp	r5, #0
 8026fbe:	da03      	bge.n	8026fc8 <_printf_i+0xd0>
 8026fc0:	232d      	movs	r3, #45	@ 0x2d
 8026fc2:	426d      	negs	r5, r5
 8026fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026fc8:	4858      	ldr	r0, [pc, #352]	@ (802712c <_printf_i+0x234>)
 8026fca:	230a      	movs	r3, #10
 8026fcc:	e011      	b.n	8026ff2 <_printf_i+0xfa>
 8026fce:	6821      	ldr	r1, [r4, #0]
 8026fd0:	6833      	ldr	r3, [r6, #0]
 8026fd2:	0608      	lsls	r0, r1, #24
 8026fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8026fd8:	d402      	bmi.n	8026fe0 <_printf_i+0xe8>
 8026fda:	0649      	lsls	r1, r1, #25
 8026fdc:	bf48      	it	mi
 8026fde:	b2ad      	uxthmi	r5, r5
 8026fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8026fe2:	4852      	ldr	r0, [pc, #328]	@ (802712c <_printf_i+0x234>)
 8026fe4:	6033      	str	r3, [r6, #0]
 8026fe6:	bf14      	ite	ne
 8026fe8:	230a      	movne	r3, #10
 8026fea:	2308      	moveq	r3, #8
 8026fec:	2100      	movs	r1, #0
 8026fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8026ff2:	6866      	ldr	r6, [r4, #4]
 8026ff4:	60a6      	str	r6, [r4, #8]
 8026ff6:	2e00      	cmp	r6, #0
 8026ff8:	db05      	blt.n	8027006 <_printf_i+0x10e>
 8026ffa:	6821      	ldr	r1, [r4, #0]
 8026ffc:	432e      	orrs	r6, r5
 8026ffe:	f021 0104 	bic.w	r1, r1, #4
 8027002:	6021      	str	r1, [r4, #0]
 8027004:	d04b      	beq.n	802709e <_printf_i+0x1a6>
 8027006:	4616      	mov	r6, r2
 8027008:	fbb5 f1f3 	udiv	r1, r5, r3
 802700c:	fb03 5711 	mls	r7, r3, r1, r5
 8027010:	5dc7      	ldrb	r7, [r0, r7]
 8027012:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027016:	462f      	mov	r7, r5
 8027018:	42bb      	cmp	r3, r7
 802701a:	460d      	mov	r5, r1
 802701c:	d9f4      	bls.n	8027008 <_printf_i+0x110>
 802701e:	2b08      	cmp	r3, #8
 8027020:	d10b      	bne.n	802703a <_printf_i+0x142>
 8027022:	6823      	ldr	r3, [r4, #0]
 8027024:	07df      	lsls	r7, r3, #31
 8027026:	d508      	bpl.n	802703a <_printf_i+0x142>
 8027028:	6923      	ldr	r3, [r4, #16]
 802702a:	6861      	ldr	r1, [r4, #4]
 802702c:	4299      	cmp	r1, r3
 802702e:	bfde      	ittt	le
 8027030:	2330      	movle	r3, #48	@ 0x30
 8027032:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027036:	f106 36ff 	addle.w	r6, r6, #4294967295
 802703a:	1b92      	subs	r2, r2, r6
 802703c:	6122      	str	r2, [r4, #16]
 802703e:	f8cd a000 	str.w	sl, [sp]
 8027042:	464b      	mov	r3, r9
 8027044:	aa03      	add	r2, sp, #12
 8027046:	4621      	mov	r1, r4
 8027048:	4640      	mov	r0, r8
 802704a:	f7ff fee7 	bl	8026e1c <_printf_common>
 802704e:	3001      	adds	r0, #1
 8027050:	d14a      	bne.n	80270e8 <_printf_i+0x1f0>
 8027052:	f04f 30ff 	mov.w	r0, #4294967295
 8027056:	b004      	add	sp, #16
 8027058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802705c:	6823      	ldr	r3, [r4, #0]
 802705e:	f043 0320 	orr.w	r3, r3, #32
 8027062:	6023      	str	r3, [r4, #0]
 8027064:	4832      	ldr	r0, [pc, #200]	@ (8027130 <_printf_i+0x238>)
 8027066:	2778      	movs	r7, #120	@ 0x78
 8027068:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802706c:	6823      	ldr	r3, [r4, #0]
 802706e:	6831      	ldr	r1, [r6, #0]
 8027070:	061f      	lsls	r7, r3, #24
 8027072:	f851 5b04 	ldr.w	r5, [r1], #4
 8027076:	d402      	bmi.n	802707e <_printf_i+0x186>
 8027078:	065f      	lsls	r7, r3, #25
 802707a:	bf48      	it	mi
 802707c:	b2ad      	uxthmi	r5, r5
 802707e:	6031      	str	r1, [r6, #0]
 8027080:	07d9      	lsls	r1, r3, #31
 8027082:	bf44      	itt	mi
 8027084:	f043 0320 	orrmi.w	r3, r3, #32
 8027088:	6023      	strmi	r3, [r4, #0]
 802708a:	b11d      	cbz	r5, 8027094 <_printf_i+0x19c>
 802708c:	2310      	movs	r3, #16
 802708e:	e7ad      	b.n	8026fec <_printf_i+0xf4>
 8027090:	4826      	ldr	r0, [pc, #152]	@ (802712c <_printf_i+0x234>)
 8027092:	e7e9      	b.n	8027068 <_printf_i+0x170>
 8027094:	6823      	ldr	r3, [r4, #0]
 8027096:	f023 0320 	bic.w	r3, r3, #32
 802709a:	6023      	str	r3, [r4, #0]
 802709c:	e7f6      	b.n	802708c <_printf_i+0x194>
 802709e:	4616      	mov	r6, r2
 80270a0:	e7bd      	b.n	802701e <_printf_i+0x126>
 80270a2:	6833      	ldr	r3, [r6, #0]
 80270a4:	6825      	ldr	r5, [r4, #0]
 80270a6:	6961      	ldr	r1, [r4, #20]
 80270a8:	1d18      	adds	r0, r3, #4
 80270aa:	6030      	str	r0, [r6, #0]
 80270ac:	062e      	lsls	r6, r5, #24
 80270ae:	681b      	ldr	r3, [r3, #0]
 80270b0:	d501      	bpl.n	80270b6 <_printf_i+0x1be>
 80270b2:	6019      	str	r1, [r3, #0]
 80270b4:	e002      	b.n	80270bc <_printf_i+0x1c4>
 80270b6:	0668      	lsls	r0, r5, #25
 80270b8:	d5fb      	bpl.n	80270b2 <_printf_i+0x1ba>
 80270ba:	8019      	strh	r1, [r3, #0]
 80270bc:	2300      	movs	r3, #0
 80270be:	6123      	str	r3, [r4, #16]
 80270c0:	4616      	mov	r6, r2
 80270c2:	e7bc      	b.n	802703e <_printf_i+0x146>
 80270c4:	6833      	ldr	r3, [r6, #0]
 80270c6:	1d1a      	adds	r2, r3, #4
 80270c8:	6032      	str	r2, [r6, #0]
 80270ca:	681e      	ldr	r6, [r3, #0]
 80270cc:	6862      	ldr	r2, [r4, #4]
 80270ce:	2100      	movs	r1, #0
 80270d0:	4630      	mov	r0, r6
 80270d2:	f7d9 f92d 	bl	8000330 <memchr>
 80270d6:	b108      	cbz	r0, 80270dc <_printf_i+0x1e4>
 80270d8:	1b80      	subs	r0, r0, r6
 80270da:	6060      	str	r0, [r4, #4]
 80270dc:	6863      	ldr	r3, [r4, #4]
 80270de:	6123      	str	r3, [r4, #16]
 80270e0:	2300      	movs	r3, #0
 80270e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80270e6:	e7aa      	b.n	802703e <_printf_i+0x146>
 80270e8:	6923      	ldr	r3, [r4, #16]
 80270ea:	4632      	mov	r2, r6
 80270ec:	4649      	mov	r1, r9
 80270ee:	4640      	mov	r0, r8
 80270f0:	47d0      	blx	sl
 80270f2:	3001      	adds	r0, #1
 80270f4:	d0ad      	beq.n	8027052 <_printf_i+0x15a>
 80270f6:	6823      	ldr	r3, [r4, #0]
 80270f8:	079b      	lsls	r3, r3, #30
 80270fa:	d413      	bmi.n	8027124 <_printf_i+0x22c>
 80270fc:	68e0      	ldr	r0, [r4, #12]
 80270fe:	9b03      	ldr	r3, [sp, #12]
 8027100:	4298      	cmp	r0, r3
 8027102:	bfb8      	it	lt
 8027104:	4618      	movlt	r0, r3
 8027106:	e7a6      	b.n	8027056 <_printf_i+0x15e>
 8027108:	2301      	movs	r3, #1
 802710a:	4632      	mov	r2, r6
 802710c:	4649      	mov	r1, r9
 802710e:	4640      	mov	r0, r8
 8027110:	47d0      	blx	sl
 8027112:	3001      	adds	r0, #1
 8027114:	d09d      	beq.n	8027052 <_printf_i+0x15a>
 8027116:	3501      	adds	r5, #1
 8027118:	68e3      	ldr	r3, [r4, #12]
 802711a:	9903      	ldr	r1, [sp, #12]
 802711c:	1a5b      	subs	r3, r3, r1
 802711e:	42ab      	cmp	r3, r5
 8027120:	dcf2      	bgt.n	8027108 <_printf_i+0x210>
 8027122:	e7eb      	b.n	80270fc <_printf_i+0x204>
 8027124:	2500      	movs	r5, #0
 8027126:	f104 0619 	add.w	r6, r4, #25
 802712a:	e7f5      	b.n	8027118 <_printf_i+0x220>
 802712c:	0803b149 	.word	0x0803b149
 8027130:	0803b15a 	.word	0x0803b15a

08027134 <__sflush_r>:
 8027134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8027138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802713c:	0716      	lsls	r6, r2, #28
 802713e:	4605      	mov	r5, r0
 8027140:	460c      	mov	r4, r1
 8027142:	d454      	bmi.n	80271ee <__sflush_r+0xba>
 8027144:	684b      	ldr	r3, [r1, #4]
 8027146:	2b00      	cmp	r3, #0
 8027148:	dc02      	bgt.n	8027150 <__sflush_r+0x1c>
 802714a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802714c:	2b00      	cmp	r3, #0
 802714e:	dd48      	ble.n	80271e2 <__sflush_r+0xae>
 8027150:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027152:	2e00      	cmp	r6, #0
 8027154:	d045      	beq.n	80271e2 <__sflush_r+0xae>
 8027156:	2300      	movs	r3, #0
 8027158:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802715c:	682f      	ldr	r7, [r5, #0]
 802715e:	6a21      	ldr	r1, [r4, #32]
 8027160:	602b      	str	r3, [r5, #0]
 8027162:	d030      	beq.n	80271c6 <__sflush_r+0x92>
 8027164:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027166:	89a3      	ldrh	r3, [r4, #12]
 8027168:	0759      	lsls	r1, r3, #29
 802716a:	d505      	bpl.n	8027178 <__sflush_r+0x44>
 802716c:	6863      	ldr	r3, [r4, #4]
 802716e:	1ad2      	subs	r2, r2, r3
 8027170:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027172:	b10b      	cbz	r3, 8027178 <__sflush_r+0x44>
 8027174:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027176:	1ad2      	subs	r2, r2, r3
 8027178:	2300      	movs	r3, #0
 802717a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802717c:	6a21      	ldr	r1, [r4, #32]
 802717e:	4628      	mov	r0, r5
 8027180:	47b0      	blx	r6
 8027182:	1c43      	adds	r3, r0, #1
 8027184:	89a3      	ldrh	r3, [r4, #12]
 8027186:	d106      	bne.n	8027196 <__sflush_r+0x62>
 8027188:	6829      	ldr	r1, [r5, #0]
 802718a:	291d      	cmp	r1, #29
 802718c:	d82b      	bhi.n	80271e6 <__sflush_r+0xb2>
 802718e:	4a2a      	ldr	r2, [pc, #168]	@ (8027238 <__sflush_r+0x104>)
 8027190:	40ca      	lsrs	r2, r1
 8027192:	07d6      	lsls	r6, r2, #31
 8027194:	d527      	bpl.n	80271e6 <__sflush_r+0xb2>
 8027196:	2200      	movs	r2, #0
 8027198:	6062      	str	r2, [r4, #4]
 802719a:	04d9      	lsls	r1, r3, #19
 802719c:	6922      	ldr	r2, [r4, #16]
 802719e:	6022      	str	r2, [r4, #0]
 80271a0:	d504      	bpl.n	80271ac <__sflush_r+0x78>
 80271a2:	1c42      	adds	r2, r0, #1
 80271a4:	d101      	bne.n	80271aa <__sflush_r+0x76>
 80271a6:	682b      	ldr	r3, [r5, #0]
 80271a8:	b903      	cbnz	r3, 80271ac <__sflush_r+0x78>
 80271aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80271ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80271ae:	602f      	str	r7, [r5, #0]
 80271b0:	b1b9      	cbz	r1, 80271e2 <__sflush_r+0xae>
 80271b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80271b6:	4299      	cmp	r1, r3
 80271b8:	d002      	beq.n	80271c0 <__sflush_r+0x8c>
 80271ba:	4628      	mov	r0, r5
 80271bc:	f001 fa1e 	bl	80285fc <_free_r>
 80271c0:	2300      	movs	r3, #0
 80271c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80271c4:	e00d      	b.n	80271e2 <__sflush_r+0xae>
 80271c6:	2301      	movs	r3, #1
 80271c8:	4628      	mov	r0, r5
 80271ca:	47b0      	blx	r6
 80271cc:	4602      	mov	r2, r0
 80271ce:	1c50      	adds	r0, r2, #1
 80271d0:	d1c9      	bne.n	8027166 <__sflush_r+0x32>
 80271d2:	682b      	ldr	r3, [r5, #0]
 80271d4:	2b00      	cmp	r3, #0
 80271d6:	d0c6      	beq.n	8027166 <__sflush_r+0x32>
 80271d8:	2b1d      	cmp	r3, #29
 80271da:	d001      	beq.n	80271e0 <__sflush_r+0xac>
 80271dc:	2b16      	cmp	r3, #22
 80271de:	d11e      	bne.n	802721e <__sflush_r+0xea>
 80271e0:	602f      	str	r7, [r5, #0]
 80271e2:	2000      	movs	r0, #0
 80271e4:	e022      	b.n	802722c <__sflush_r+0xf8>
 80271e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80271ea:	b21b      	sxth	r3, r3
 80271ec:	e01b      	b.n	8027226 <__sflush_r+0xf2>
 80271ee:	690f      	ldr	r7, [r1, #16]
 80271f0:	2f00      	cmp	r7, #0
 80271f2:	d0f6      	beq.n	80271e2 <__sflush_r+0xae>
 80271f4:	0793      	lsls	r3, r2, #30
 80271f6:	680e      	ldr	r6, [r1, #0]
 80271f8:	bf08      	it	eq
 80271fa:	694b      	ldreq	r3, [r1, #20]
 80271fc:	600f      	str	r7, [r1, #0]
 80271fe:	bf18      	it	ne
 8027200:	2300      	movne	r3, #0
 8027202:	eba6 0807 	sub.w	r8, r6, r7
 8027206:	608b      	str	r3, [r1, #8]
 8027208:	f1b8 0f00 	cmp.w	r8, #0
 802720c:	dde9      	ble.n	80271e2 <__sflush_r+0xae>
 802720e:	6a21      	ldr	r1, [r4, #32]
 8027210:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8027212:	4643      	mov	r3, r8
 8027214:	463a      	mov	r2, r7
 8027216:	4628      	mov	r0, r5
 8027218:	47b0      	blx	r6
 802721a:	2800      	cmp	r0, #0
 802721c:	dc08      	bgt.n	8027230 <__sflush_r+0xfc>
 802721e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027226:	81a3      	strh	r3, [r4, #12]
 8027228:	f04f 30ff 	mov.w	r0, #4294967295
 802722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027230:	4407      	add	r7, r0
 8027232:	eba8 0800 	sub.w	r8, r8, r0
 8027236:	e7e7      	b.n	8027208 <__sflush_r+0xd4>
 8027238:	20400001 	.word	0x20400001

0802723c <_fflush_r>:
 802723c:	b538      	push	{r3, r4, r5, lr}
 802723e:	690b      	ldr	r3, [r1, #16]
 8027240:	4605      	mov	r5, r0
 8027242:	460c      	mov	r4, r1
 8027244:	b913      	cbnz	r3, 802724c <_fflush_r+0x10>
 8027246:	2500      	movs	r5, #0
 8027248:	4628      	mov	r0, r5
 802724a:	bd38      	pop	{r3, r4, r5, pc}
 802724c:	b118      	cbz	r0, 8027256 <_fflush_r+0x1a>
 802724e:	6a03      	ldr	r3, [r0, #32]
 8027250:	b90b      	cbnz	r3, 8027256 <_fflush_r+0x1a>
 8027252:	f000 f8a7 	bl	80273a4 <__sinit>
 8027256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802725a:	2b00      	cmp	r3, #0
 802725c:	d0f3      	beq.n	8027246 <_fflush_r+0xa>
 802725e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027260:	07d0      	lsls	r0, r2, #31
 8027262:	d404      	bmi.n	802726e <_fflush_r+0x32>
 8027264:	0599      	lsls	r1, r3, #22
 8027266:	d402      	bmi.n	802726e <_fflush_r+0x32>
 8027268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802726a:	f000 fbc0 	bl	80279ee <__retarget_lock_acquire_recursive>
 802726e:	4628      	mov	r0, r5
 8027270:	4621      	mov	r1, r4
 8027272:	f7ff ff5f 	bl	8027134 <__sflush_r>
 8027276:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027278:	07da      	lsls	r2, r3, #31
 802727a:	4605      	mov	r5, r0
 802727c:	d4e4      	bmi.n	8027248 <_fflush_r+0xc>
 802727e:	89a3      	ldrh	r3, [r4, #12]
 8027280:	059b      	lsls	r3, r3, #22
 8027282:	d4e1      	bmi.n	8027248 <_fflush_r+0xc>
 8027284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027286:	f000 fbb3 	bl	80279f0 <__retarget_lock_release_recursive>
 802728a:	e7dd      	b.n	8027248 <_fflush_r+0xc>

0802728c <std>:
 802728c:	2300      	movs	r3, #0
 802728e:	b510      	push	{r4, lr}
 8027290:	4604      	mov	r4, r0
 8027292:	e9c0 3300 	strd	r3, r3, [r0]
 8027296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802729a:	6083      	str	r3, [r0, #8]
 802729c:	8181      	strh	r1, [r0, #12]
 802729e:	6643      	str	r3, [r0, #100]	@ 0x64
 80272a0:	81c2      	strh	r2, [r0, #14]
 80272a2:	6183      	str	r3, [r0, #24]
 80272a4:	4619      	mov	r1, r3
 80272a6:	2208      	movs	r2, #8
 80272a8:	305c      	adds	r0, #92	@ 0x5c
 80272aa:	f000 fa71 	bl	8027790 <memset>
 80272ae:	4b0d      	ldr	r3, [pc, #52]	@ (80272e4 <std+0x58>)
 80272b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80272b2:	4b0d      	ldr	r3, [pc, #52]	@ (80272e8 <std+0x5c>)
 80272b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80272b6:	4b0d      	ldr	r3, [pc, #52]	@ (80272ec <std+0x60>)
 80272b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80272ba:	4b0d      	ldr	r3, [pc, #52]	@ (80272f0 <std+0x64>)
 80272bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80272be:	4b0d      	ldr	r3, [pc, #52]	@ (80272f4 <std+0x68>)
 80272c0:	6224      	str	r4, [r4, #32]
 80272c2:	429c      	cmp	r4, r3
 80272c4:	d006      	beq.n	80272d4 <std+0x48>
 80272c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80272ca:	4294      	cmp	r4, r2
 80272cc:	d002      	beq.n	80272d4 <std+0x48>
 80272ce:	33d0      	adds	r3, #208	@ 0xd0
 80272d0:	429c      	cmp	r4, r3
 80272d2:	d105      	bne.n	80272e0 <std+0x54>
 80272d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80272d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80272dc:	f000 bb86 	b.w	80279ec <__retarget_lock_init_recursive>
 80272e0:	bd10      	pop	{r4, pc}
 80272e2:	bf00      	nop
 80272e4:	0802758d 	.word	0x0802758d
 80272e8:	080275af 	.word	0x080275af
 80272ec:	080275e7 	.word	0x080275e7
 80272f0:	0802760b 	.word	0x0802760b
 80272f4:	24005730 	.word	0x24005730

080272f8 <stdio_exit_handler>:
 80272f8:	4a02      	ldr	r2, [pc, #8]	@ (8027304 <stdio_exit_handler+0xc>)
 80272fa:	4903      	ldr	r1, [pc, #12]	@ (8027308 <stdio_exit_handler+0x10>)
 80272fc:	4803      	ldr	r0, [pc, #12]	@ (802730c <stdio_exit_handler+0x14>)
 80272fe:	f000 b87b 	b.w	80273f8 <_fwalk_sglue>
 8027302:	bf00      	nop
 8027304:	24000828 	.word	0x24000828
 8027308:	0802723d 	.word	0x0802723d
 802730c:	240009a4 	.word	0x240009a4

08027310 <cleanup_stdio>:
 8027310:	6841      	ldr	r1, [r0, #4]
 8027312:	4b0c      	ldr	r3, [pc, #48]	@ (8027344 <cleanup_stdio+0x34>)
 8027314:	4299      	cmp	r1, r3
 8027316:	b510      	push	{r4, lr}
 8027318:	4604      	mov	r4, r0
 802731a:	d001      	beq.n	8027320 <cleanup_stdio+0x10>
 802731c:	f7ff ff8e 	bl	802723c <_fflush_r>
 8027320:	68a1      	ldr	r1, [r4, #8]
 8027322:	4b09      	ldr	r3, [pc, #36]	@ (8027348 <cleanup_stdio+0x38>)
 8027324:	4299      	cmp	r1, r3
 8027326:	d002      	beq.n	802732e <cleanup_stdio+0x1e>
 8027328:	4620      	mov	r0, r4
 802732a:	f7ff ff87 	bl	802723c <_fflush_r>
 802732e:	68e1      	ldr	r1, [r4, #12]
 8027330:	4b06      	ldr	r3, [pc, #24]	@ (802734c <cleanup_stdio+0x3c>)
 8027332:	4299      	cmp	r1, r3
 8027334:	d004      	beq.n	8027340 <cleanup_stdio+0x30>
 8027336:	4620      	mov	r0, r4
 8027338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802733c:	f7ff bf7e 	b.w	802723c <_fflush_r>
 8027340:	bd10      	pop	{r4, pc}
 8027342:	bf00      	nop
 8027344:	24005730 	.word	0x24005730
 8027348:	24005798 	.word	0x24005798
 802734c:	24005800 	.word	0x24005800

08027350 <global_stdio_init.part.0>:
 8027350:	b510      	push	{r4, lr}
 8027352:	4b0b      	ldr	r3, [pc, #44]	@ (8027380 <global_stdio_init.part.0+0x30>)
 8027354:	4c0b      	ldr	r4, [pc, #44]	@ (8027384 <global_stdio_init.part.0+0x34>)
 8027356:	4a0c      	ldr	r2, [pc, #48]	@ (8027388 <global_stdio_init.part.0+0x38>)
 8027358:	601a      	str	r2, [r3, #0]
 802735a:	4620      	mov	r0, r4
 802735c:	2200      	movs	r2, #0
 802735e:	2104      	movs	r1, #4
 8027360:	f7ff ff94 	bl	802728c <std>
 8027364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8027368:	2201      	movs	r2, #1
 802736a:	2109      	movs	r1, #9
 802736c:	f7ff ff8e 	bl	802728c <std>
 8027370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8027374:	2202      	movs	r2, #2
 8027376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802737a:	2112      	movs	r1, #18
 802737c:	f7ff bf86 	b.w	802728c <std>
 8027380:	24005868 	.word	0x24005868
 8027384:	24005730 	.word	0x24005730
 8027388:	080272f9 	.word	0x080272f9

0802738c <__sfp_lock_acquire>:
 802738c:	4801      	ldr	r0, [pc, #4]	@ (8027394 <__sfp_lock_acquire+0x8>)
 802738e:	f000 bb2e 	b.w	80279ee <__retarget_lock_acquire_recursive>
 8027392:	bf00      	nop
 8027394:	24005871 	.word	0x24005871

08027398 <__sfp_lock_release>:
 8027398:	4801      	ldr	r0, [pc, #4]	@ (80273a0 <__sfp_lock_release+0x8>)
 802739a:	f000 bb29 	b.w	80279f0 <__retarget_lock_release_recursive>
 802739e:	bf00      	nop
 80273a0:	24005871 	.word	0x24005871

080273a4 <__sinit>:
 80273a4:	b510      	push	{r4, lr}
 80273a6:	4604      	mov	r4, r0
 80273a8:	f7ff fff0 	bl	802738c <__sfp_lock_acquire>
 80273ac:	6a23      	ldr	r3, [r4, #32]
 80273ae:	b11b      	cbz	r3, 80273b8 <__sinit+0x14>
 80273b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80273b4:	f7ff bff0 	b.w	8027398 <__sfp_lock_release>
 80273b8:	4b04      	ldr	r3, [pc, #16]	@ (80273cc <__sinit+0x28>)
 80273ba:	6223      	str	r3, [r4, #32]
 80273bc:	4b04      	ldr	r3, [pc, #16]	@ (80273d0 <__sinit+0x2c>)
 80273be:	681b      	ldr	r3, [r3, #0]
 80273c0:	2b00      	cmp	r3, #0
 80273c2:	d1f5      	bne.n	80273b0 <__sinit+0xc>
 80273c4:	f7ff ffc4 	bl	8027350 <global_stdio_init.part.0>
 80273c8:	e7f2      	b.n	80273b0 <__sinit+0xc>
 80273ca:	bf00      	nop
 80273cc:	08027311 	.word	0x08027311
 80273d0:	24005868 	.word	0x24005868

080273d4 <fiprintf>:
 80273d4:	b40e      	push	{r1, r2, r3}
 80273d6:	b503      	push	{r0, r1, lr}
 80273d8:	4601      	mov	r1, r0
 80273da:	ab03      	add	r3, sp, #12
 80273dc:	4805      	ldr	r0, [pc, #20]	@ (80273f4 <fiprintf+0x20>)
 80273de:	f853 2b04 	ldr.w	r2, [r3], #4
 80273e2:	6800      	ldr	r0, [r0, #0]
 80273e4:	9301      	str	r3, [sp, #4]
 80273e6:	f002 f97d 	bl	80296e4 <_vfiprintf_r>
 80273ea:	b002      	add	sp, #8
 80273ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80273f0:	b003      	add	sp, #12
 80273f2:	4770      	bx	lr
 80273f4:	240009a0 	.word	0x240009a0

080273f8 <_fwalk_sglue>:
 80273f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80273fc:	4607      	mov	r7, r0
 80273fe:	4688      	mov	r8, r1
 8027400:	4614      	mov	r4, r2
 8027402:	2600      	movs	r6, #0
 8027404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027408:	f1b9 0901 	subs.w	r9, r9, #1
 802740c:	d505      	bpl.n	802741a <_fwalk_sglue+0x22>
 802740e:	6824      	ldr	r4, [r4, #0]
 8027410:	2c00      	cmp	r4, #0
 8027412:	d1f7      	bne.n	8027404 <_fwalk_sglue+0xc>
 8027414:	4630      	mov	r0, r6
 8027416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802741a:	89ab      	ldrh	r3, [r5, #12]
 802741c:	2b01      	cmp	r3, #1
 802741e:	d907      	bls.n	8027430 <_fwalk_sglue+0x38>
 8027420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027424:	3301      	adds	r3, #1
 8027426:	d003      	beq.n	8027430 <_fwalk_sglue+0x38>
 8027428:	4629      	mov	r1, r5
 802742a:	4638      	mov	r0, r7
 802742c:	47c0      	blx	r8
 802742e:	4306      	orrs	r6, r0
 8027430:	3568      	adds	r5, #104	@ 0x68
 8027432:	e7e9      	b.n	8027408 <_fwalk_sglue+0x10>

08027434 <iprintf>:
 8027434:	b40f      	push	{r0, r1, r2, r3}
 8027436:	b507      	push	{r0, r1, r2, lr}
 8027438:	4906      	ldr	r1, [pc, #24]	@ (8027454 <iprintf+0x20>)
 802743a:	ab04      	add	r3, sp, #16
 802743c:	6808      	ldr	r0, [r1, #0]
 802743e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027442:	6881      	ldr	r1, [r0, #8]
 8027444:	9301      	str	r3, [sp, #4]
 8027446:	f002 f94d 	bl	80296e4 <_vfiprintf_r>
 802744a:	b003      	add	sp, #12
 802744c:	f85d eb04 	ldr.w	lr, [sp], #4
 8027450:	b004      	add	sp, #16
 8027452:	4770      	bx	lr
 8027454:	240009a0 	.word	0x240009a0

08027458 <_putc_r>:
 8027458:	b570      	push	{r4, r5, r6, lr}
 802745a:	460d      	mov	r5, r1
 802745c:	4614      	mov	r4, r2
 802745e:	4606      	mov	r6, r0
 8027460:	b118      	cbz	r0, 802746a <_putc_r+0x12>
 8027462:	6a03      	ldr	r3, [r0, #32]
 8027464:	b90b      	cbnz	r3, 802746a <_putc_r+0x12>
 8027466:	f7ff ff9d 	bl	80273a4 <__sinit>
 802746a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802746c:	07d8      	lsls	r0, r3, #31
 802746e:	d405      	bmi.n	802747c <_putc_r+0x24>
 8027470:	89a3      	ldrh	r3, [r4, #12]
 8027472:	0599      	lsls	r1, r3, #22
 8027474:	d402      	bmi.n	802747c <_putc_r+0x24>
 8027476:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027478:	f000 fab9 	bl	80279ee <__retarget_lock_acquire_recursive>
 802747c:	68a3      	ldr	r3, [r4, #8]
 802747e:	3b01      	subs	r3, #1
 8027480:	2b00      	cmp	r3, #0
 8027482:	60a3      	str	r3, [r4, #8]
 8027484:	da05      	bge.n	8027492 <_putc_r+0x3a>
 8027486:	69a2      	ldr	r2, [r4, #24]
 8027488:	4293      	cmp	r3, r2
 802748a:	db12      	blt.n	80274b2 <_putc_r+0x5a>
 802748c:	b2eb      	uxtb	r3, r5
 802748e:	2b0a      	cmp	r3, #10
 8027490:	d00f      	beq.n	80274b2 <_putc_r+0x5a>
 8027492:	6823      	ldr	r3, [r4, #0]
 8027494:	1c5a      	adds	r2, r3, #1
 8027496:	6022      	str	r2, [r4, #0]
 8027498:	701d      	strb	r5, [r3, #0]
 802749a:	b2ed      	uxtb	r5, r5
 802749c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802749e:	07da      	lsls	r2, r3, #31
 80274a0:	d405      	bmi.n	80274ae <_putc_r+0x56>
 80274a2:	89a3      	ldrh	r3, [r4, #12]
 80274a4:	059b      	lsls	r3, r3, #22
 80274a6:	d402      	bmi.n	80274ae <_putc_r+0x56>
 80274a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80274aa:	f000 faa1 	bl	80279f0 <__retarget_lock_release_recursive>
 80274ae:	4628      	mov	r0, r5
 80274b0:	bd70      	pop	{r4, r5, r6, pc}
 80274b2:	4629      	mov	r1, r5
 80274b4:	4622      	mov	r2, r4
 80274b6:	4630      	mov	r0, r6
 80274b8:	f000 f8ab 	bl	8027612 <__swbuf_r>
 80274bc:	4605      	mov	r5, r0
 80274be:	e7ed      	b.n	802749c <_putc_r+0x44>

080274c0 <putchar>:
 80274c0:	4b02      	ldr	r3, [pc, #8]	@ (80274cc <putchar+0xc>)
 80274c2:	4601      	mov	r1, r0
 80274c4:	6818      	ldr	r0, [r3, #0]
 80274c6:	6882      	ldr	r2, [r0, #8]
 80274c8:	f7ff bfc6 	b.w	8027458 <_putc_r>
 80274cc:	240009a0 	.word	0x240009a0

080274d0 <_puts_r>:
 80274d0:	6a03      	ldr	r3, [r0, #32]
 80274d2:	b570      	push	{r4, r5, r6, lr}
 80274d4:	6884      	ldr	r4, [r0, #8]
 80274d6:	4605      	mov	r5, r0
 80274d8:	460e      	mov	r6, r1
 80274da:	b90b      	cbnz	r3, 80274e0 <_puts_r+0x10>
 80274dc:	f7ff ff62 	bl	80273a4 <__sinit>
 80274e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80274e2:	07db      	lsls	r3, r3, #31
 80274e4:	d405      	bmi.n	80274f2 <_puts_r+0x22>
 80274e6:	89a3      	ldrh	r3, [r4, #12]
 80274e8:	0598      	lsls	r0, r3, #22
 80274ea:	d402      	bmi.n	80274f2 <_puts_r+0x22>
 80274ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80274ee:	f000 fa7e 	bl	80279ee <__retarget_lock_acquire_recursive>
 80274f2:	89a3      	ldrh	r3, [r4, #12]
 80274f4:	0719      	lsls	r1, r3, #28
 80274f6:	d502      	bpl.n	80274fe <_puts_r+0x2e>
 80274f8:	6923      	ldr	r3, [r4, #16]
 80274fa:	2b00      	cmp	r3, #0
 80274fc:	d135      	bne.n	802756a <_puts_r+0x9a>
 80274fe:	4621      	mov	r1, r4
 8027500:	4628      	mov	r0, r5
 8027502:	f000 f8c5 	bl	8027690 <__swsetup_r>
 8027506:	b380      	cbz	r0, 802756a <_puts_r+0x9a>
 8027508:	f04f 35ff 	mov.w	r5, #4294967295
 802750c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802750e:	07da      	lsls	r2, r3, #31
 8027510:	d405      	bmi.n	802751e <_puts_r+0x4e>
 8027512:	89a3      	ldrh	r3, [r4, #12]
 8027514:	059b      	lsls	r3, r3, #22
 8027516:	d402      	bmi.n	802751e <_puts_r+0x4e>
 8027518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802751a:	f000 fa69 	bl	80279f0 <__retarget_lock_release_recursive>
 802751e:	4628      	mov	r0, r5
 8027520:	bd70      	pop	{r4, r5, r6, pc}
 8027522:	2b00      	cmp	r3, #0
 8027524:	da04      	bge.n	8027530 <_puts_r+0x60>
 8027526:	69a2      	ldr	r2, [r4, #24]
 8027528:	429a      	cmp	r2, r3
 802752a:	dc17      	bgt.n	802755c <_puts_r+0x8c>
 802752c:	290a      	cmp	r1, #10
 802752e:	d015      	beq.n	802755c <_puts_r+0x8c>
 8027530:	6823      	ldr	r3, [r4, #0]
 8027532:	1c5a      	adds	r2, r3, #1
 8027534:	6022      	str	r2, [r4, #0]
 8027536:	7019      	strb	r1, [r3, #0]
 8027538:	68a3      	ldr	r3, [r4, #8]
 802753a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802753e:	3b01      	subs	r3, #1
 8027540:	60a3      	str	r3, [r4, #8]
 8027542:	2900      	cmp	r1, #0
 8027544:	d1ed      	bne.n	8027522 <_puts_r+0x52>
 8027546:	2b00      	cmp	r3, #0
 8027548:	da11      	bge.n	802756e <_puts_r+0x9e>
 802754a:	4622      	mov	r2, r4
 802754c:	210a      	movs	r1, #10
 802754e:	4628      	mov	r0, r5
 8027550:	f000 f85f 	bl	8027612 <__swbuf_r>
 8027554:	3001      	adds	r0, #1
 8027556:	d0d7      	beq.n	8027508 <_puts_r+0x38>
 8027558:	250a      	movs	r5, #10
 802755a:	e7d7      	b.n	802750c <_puts_r+0x3c>
 802755c:	4622      	mov	r2, r4
 802755e:	4628      	mov	r0, r5
 8027560:	f000 f857 	bl	8027612 <__swbuf_r>
 8027564:	3001      	adds	r0, #1
 8027566:	d1e7      	bne.n	8027538 <_puts_r+0x68>
 8027568:	e7ce      	b.n	8027508 <_puts_r+0x38>
 802756a:	3e01      	subs	r6, #1
 802756c:	e7e4      	b.n	8027538 <_puts_r+0x68>
 802756e:	6823      	ldr	r3, [r4, #0]
 8027570:	1c5a      	adds	r2, r3, #1
 8027572:	6022      	str	r2, [r4, #0]
 8027574:	220a      	movs	r2, #10
 8027576:	701a      	strb	r2, [r3, #0]
 8027578:	e7ee      	b.n	8027558 <_puts_r+0x88>
	...

0802757c <puts>:
 802757c:	4b02      	ldr	r3, [pc, #8]	@ (8027588 <puts+0xc>)
 802757e:	4601      	mov	r1, r0
 8027580:	6818      	ldr	r0, [r3, #0]
 8027582:	f7ff bfa5 	b.w	80274d0 <_puts_r>
 8027586:	bf00      	nop
 8027588:	240009a0 	.word	0x240009a0

0802758c <__sread>:
 802758c:	b510      	push	{r4, lr}
 802758e:	460c      	mov	r4, r1
 8027590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027594:	f000 f9b8 	bl	8027908 <_read_r>
 8027598:	2800      	cmp	r0, #0
 802759a:	bfab      	itete	ge
 802759c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802759e:	89a3      	ldrhlt	r3, [r4, #12]
 80275a0:	181b      	addge	r3, r3, r0
 80275a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80275a6:	bfac      	ite	ge
 80275a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80275aa:	81a3      	strhlt	r3, [r4, #12]
 80275ac:	bd10      	pop	{r4, pc}

080275ae <__swrite>:
 80275ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80275b2:	461f      	mov	r7, r3
 80275b4:	898b      	ldrh	r3, [r1, #12]
 80275b6:	05db      	lsls	r3, r3, #23
 80275b8:	4605      	mov	r5, r0
 80275ba:	460c      	mov	r4, r1
 80275bc:	4616      	mov	r6, r2
 80275be:	d505      	bpl.n	80275cc <__swrite+0x1e>
 80275c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80275c4:	2302      	movs	r3, #2
 80275c6:	2200      	movs	r2, #0
 80275c8:	f000 f98c 	bl	80278e4 <_lseek_r>
 80275cc:	89a3      	ldrh	r3, [r4, #12]
 80275ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80275d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80275d6:	81a3      	strh	r3, [r4, #12]
 80275d8:	4632      	mov	r2, r6
 80275da:	463b      	mov	r3, r7
 80275dc:	4628      	mov	r0, r5
 80275de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80275e2:	f000 b9c7 	b.w	8027974 <_write_r>

080275e6 <__sseek>:
 80275e6:	b510      	push	{r4, lr}
 80275e8:	460c      	mov	r4, r1
 80275ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80275ee:	f000 f979 	bl	80278e4 <_lseek_r>
 80275f2:	1c43      	adds	r3, r0, #1
 80275f4:	89a3      	ldrh	r3, [r4, #12]
 80275f6:	bf15      	itete	ne
 80275f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80275fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80275fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8027602:	81a3      	strheq	r3, [r4, #12]
 8027604:	bf18      	it	ne
 8027606:	81a3      	strhne	r3, [r4, #12]
 8027608:	bd10      	pop	{r4, pc}

0802760a <__sclose>:
 802760a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802760e:	f000 b959 	b.w	80278c4 <_close_r>

08027612 <__swbuf_r>:
 8027612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027614:	460e      	mov	r6, r1
 8027616:	4614      	mov	r4, r2
 8027618:	4605      	mov	r5, r0
 802761a:	b118      	cbz	r0, 8027624 <__swbuf_r+0x12>
 802761c:	6a03      	ldr	r3, [r0, #32]
 802761e:	b90b      	cbnz	r3, 8027624 <__swbuf_r+0x12>
 8027620:	f7ff fec0 	bl	80273a4 <__sinit>
 8027624:	69a3      	ldr	r3, [r4, #24]
 8027626:	60a3      	str	r3, [r4, #8]
 8027628:	89a3      	ldrh	r3, [r4, #12]
 802762a:	071a      	lsls	r2, r3, #28
 802762c:	d501      	bpl.n	8027632 <__swbuf_r+0x20>
 802762e:	6923      	ldr	r3, [r4, #16]
 8027630:	b943      	cbnz	r3, 8027644 <__swbuf_r+0x32>
 8027632:	4621      	mov	r1, r4
 8027634:	4628      	mov	r0, r5
 8027636:	f000 f82b 	bl	8027690 <__swsetup_r>
 802763a:	b118      	cbz	r0, 8027644 <__swbuf_r+0x32>
 802763c:	f04f 37ff 	mov.w	r7, #4294967295
 8027640:	4638      	mov	r0, r7
 8027642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027644:	6823      	ldr	r3, [r4, #0]
 8027646:	6922      	ldr	r2, [r4, #16]
 8027648:	1a98      	subs	r0, r3, r2
 802764a:	6963      	ldr	r3, [r4, #20]
 802764c:	b2f6      	uxtb	r6, r6
 802764e:	4283      	cmp	r3, r0
 8027650:	4637      	mov	r7, r6
 8027652:	dc05      	bgt.n	8027660 <__swbuf_r+0x4e>
 8027654:	4621      	mov	r1, r4
 8027656:	4628      	mov	r0, r5
 8027658:	f7ff fdf0 	bl	802723c <_fflush_r>
 802765c:	2800      	cmp	r0, #0
 802765e:	d1ed      	bne.n	802763c <__swbuf_r+0x2a>
 8027660:	68a3      	ldr	r3, [r4, #8]
 8027662:	3b01      	subs	r3, #1
 8027664:	60a3      	str	r3, [r4, #8]
 8027666:	6823      	ldr	r3, [r4, #0]
 8027668:	1c5a      	adds	r2, r3, #1
 802766a:	6022      	str	r2, [r4, #0]
 802766c:	701e      	strb	r6, [r3, #0]
 802766e:	6962      	ldr	r2, [r4, #20]
 8027670:	1c43      	adds	r3, r0, #1
 8027672:	429a      	cmp	r2, r3
 8027674:	d004      	beq.n	8027680 <__swbuf_r+0x6e>
 8027676:	89a3      	ldrh	r3, [r4, #12]
 8027678:	07db      	lsls	r3, r3, #31
 802767a:	d5e1      	bpl.n	8027640 <__swbuf_r+0x2e>
 802767c:	2e0a      	cmp	r6, #10
 802767e:	d1df      	bne.n	8027640 <__swbuf_r+0x2e>
 8027680:	4621      	mov	r1, r4
 8027682:	4628      	mov	r0, r5
 8027684:	f7ff fdda 	bl	802723c <_fflush_r>
 8027688:	2800      	cmp	r0, #0
 802768a:	d0d9      	beq.n	8027640 <__swbuf_r+0x2e>
 802768c:	e7d6      	b.n	802763c <__swbuf_r+0x2a>
	...

08027690 <__swsetup_r>:
 8027690:	b538      	push	{r3, r4, r5, lr}
 8027692:	4b29      	ldr	r3, [pc, #164]	@ (8027738 <__swsetup_r+0xa8>)
 8027694:	4605      	mov	r5, r0
 8027696:	6818      	ldr	r0, [r3, #0]
 8027698:	460c      	mov	r4, r1
 802769a:	b118      	cbz	r0, 80276a4 <__swsetup_r+0x14>
 802769c:	6a03      	ldr	r3, [r0, #32]
 802769e:	b90b      	cbnz	r3, 80276a4 <__swsetup_r+0x14>
 80276a0:	f7ff fe80 	bl	80273a4 <__sinit>
 80276a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80276a8:	0719      	lsls	r1, r3, #28
 80276aa:	d422      	bmi.n	80276f2 <__swsetup_r+0x62>
 80276ac:	06da      	lsls	r2, r3, #27
 80276ae:	d407      	bmi.n	80276c0 <__swsetup_r+0x30>
 80276b0:	2209      	movs	r2, #9
 80276b2:	602a      	str	r2, [r5, #0]
 80276b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80276b8:	81a3      	strh	r3, [r4, #12]
 80276ba:	f04f 30ff 	mov.w	r0, #4294967295
 80276be:	e033      	b.n	8027728 <__swsetup_r+0x98>
 80276c0:	0758      	lsls	r0, r3, #29
 80276c2:	d512      	bpl.n	80276ea <__swsetup_r+0x5a>
 80276c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80276c6:	b141      	cbz	r1, 80276da <__swsetup_r+0x4a>
 80276c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80276cc:	4299      	cmp	r1, r3
 80276ce:	d002      	beq.n	80276d6 <__swsetup_r+0x46>
 80276d0:	4628      	mov	r0, r5
 80276d2:	f000 ff93 	bl	80285fc <_free_r>
 80276d6:	2300      	movs	r3, #0
 80276d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80276da:	89a3      	ldrh	r3, [r4, #12]
 80276dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80276e0:	81a3      	strh	r3, [r4, #12]
 80276e2:	2300      	movs	r3, #0
 80276e4:	6063      	str	r3, [r4, #4]
 80276e6:	6923      	ldr	r3, [r4, #16]
 80276e8:	6023      	str	r3, [r4, #0]
 80276ea:	89a3      	ldrh	r3, [r4, #12]
 80276ec:	f043 0308 	orr.w	r3, r3, #8
 80276f0:	81a3      	strh	r3, [r4, #12]
 80276f2:	6923      	ldr	r3, [r4, #16]
 80276f4:	b94b      	cbnz	r3, 802770a <__swsetup_r+0x7a>
 80276f6:	89a3      	ldrh	r3, [r4, #12]
 80276f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80276fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027700:	d003      	beq.n	802770a <__swsetup_r+0x7a>
 8027702:	4621      	mov	r1, r4
 8027704:	4628      	mov	r0, r5
 8027706:	f002 f92b 	bl	8029960 <__smakebuf_r>
 802770a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802770e:	f013 0201 	ands.w	r2, r3, #1
 8027712:	d00a      	beq.n	802772a <__swsetup_r+0x9a>
 8027714:	2200      	movs	r2, #0
 8027716:	60a2      	str	r2, [r4, #8]
 8027718:	6962      	ldr	r2, [r4, #20]
 802771a:	4252      	negs	r2, r2
 802771c:	61a2      	str	r2, [r4, #24]
 802771e:	6922      	ldr	r2, [r4, #16]
 8027720:	b942      	cbnz	r2, 8027734 <__swsetup_r+0xa4>
 8027722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8027726:	d1c5      	bne.n	80276b4 <__swsetup_r+0x24>
 8027728:	bd38      	pop	{r3, r4, r5, pc}
 802772a:	0799      	lsls	r1, r3, #30
 802772c:	bf58      	it	pl
 802772e:	6962      	ldrpl	r2, [r4, #20]
 8027730:	60a2      	str	r2, [r4, #8]
 8027732:	e7f4      	b.n	802771e <__swsetup_r+0x8e>
 8027734:	2000      	movs	r0, #0
 8027736:	e7f7      	b.n	8027728 <__swsetup_r+0x98>
 8027738:	240009a0 	.word	0x240009a0

0802773c <memcmp>:
 802773c:	b510      	push	{r4, lr}
 802773e:	3901      	subs	r1, #1
 8027740:	4402      	add	r2, r0
 8027742:	4290      	cmp	r0, r2
 8027744:	d101      	bne.n	802774a <memcmp+0xe>
 8027746:	2000      	movs	r0, #0
 8027748:	e005      	b.n	8027756 <memcmp+0x1a>
 802774a:	7803      	ldrb	r3, [r0, #0]
 802774c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027750:	42a3      	cmp	r3, r4
 8027752:	d001      	beq.n	8027758 <memcmp+0x1c>
 8027754:	1b18      	subs	r0, r3, r4
 8027756:	bd10      	pop	{r4, pc}
 8027758:	3001      	adds	r0, #1
 802775a:	e7f2      	b.n	8027742 <memcmp+0x6>

0802775c <memmove>:
 802775c:	4288      	cmp	r0, r1
 802775e:	b510      	push	{r4, lr}
 8027760:	eb01 0402 	add.w	r4, r1, r2
 8027764:	d902      	bls.n	802776c <memmove+0x10>
 8027766:	4284      	cmp	r4, r0
 8027768:	4623      	mov	r3, r4
 802776a:	d807      	bhi.n	802777c <memmove+0x20>
 802776c:	1e43      	subs	r3, r0, #1
 802776e:	42a1      	cmp	r1, r4
 8027770:	d008      	beq.n	8027784 <memmove+0x28>
 8027772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027776:	f803 2f01 	strb.w	r2, [r3, #1]!
 802777a:	e7f8      	b.n	802776e <memmove+0x12>
 802777c:	4402      	add	r2, r0
 802777e:	4601      	mov	r1, r0
 8027780:	428a      	cmp	r2, r1
 8027782:	d100      	bne.n	8027786 <memmove+0x2a>
 8027784:	bd10      	pop	{r4, pc}
 8027786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802778a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802778e:	e7f7      	b.n	8027780 <memmove+0x24>

08027790 <memset>:
 8027790:	4402      	add	r2, r0
 8027792:	4603      	mov	r3, r0
 8027794:	4293      	cmp	r3, r2
 8027796:	d100      	bne.n	802779a <memset+0xa>
 8027798:	4770      	bx	lr
 802779a:	f803 1b01 	strb.w	r1, [r3], #1
 802779e:	e7f9      	b.n	8027794 <memset+0x4>

080277a0 <strchr>:
 80277a0:	b2c9      	uxtb	r1, r1
 80277a2:	4603      	mov	r3, r0
 80277a4:	4618      	mov	r0, r3
 80277a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80277aa:	b112      	cbz	r2, 80277b2 <strchr+0x12>
 80277ac:	428a      	cmp	r2, r1
 80277ae:	d1f9      	bne.n	80277a4 <strchr+0x4>
 80277b0:	4770      	bx	lr
 80277b2:	2900      	cmp	r1, #0
 80277b4:	bf18      	it	ne
 80277b6:	2000      	movne	r0, #0
 80277b8:	4770      	bx	lr

080277ba <strncmp>:
 80277ba:	b510      	push	{r4, lr}
 80277bc:	b16a      	cbz	r2, 80277da <strncmp+0x20>
 80277be:	3901      	subs	r1, #1
 80277c0:	1884      	adds	r4, r0, r2
 80277c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80277c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80277ca:	429a      	cmp	r2, r3
 80277cc:	d103      	bne.n	80277d6 <strncmp+0x1c>
 80277ce:	42a0      	cmp	r0, r4
 80277d0:	d001      	beq.n	80277d6 <strncmp+0x1c>
 80277d2:	2a00      	cmp	r2, #0
 80277d4:	d1f5      	bne.n	80277c2 <strncmp+0x8>
 80277d6:	1ad0      	subs	r0, r2, r3
 80277d8:	bd10      	pop	{r4, pc}
 80277da:	4610      	mov	r0, r2
 80277dc:	e7fc      	b.n	80277d8 <strncmp+0x1e>

080277de <strncpy>:
 80277de:	b510      	push	{r4, lr}
 80277e0:	3901      	subs	r1, #1
 80277e2:	4603      	mov	r3, r0
 80277e4:	b132      	cbz	r2, 80277f4 <strncpy+0x16>
 80277e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80277ea:	f803 4b01 	strb.w	r4, [r3], #1
 80277ee:	3a01      	subs	r2, #1
 80277f0:	2c00      	cmp	r4, #0
 80277f2:	d1f7      	bne.n	80277e4 <strncpy+0x6>
 80277f4:	441a      	add	r2, r3
 80277f6:	2100      	movs	r1, #0
 80277f8:	4293      	cmp	r3, r2
 80277fa:	d100      	bne.n	80277fe <strncpy+0x20>
 80277fc:	bd10      	pop	{r4, pc}
 80277fe:	f803 1b01 	strb.w	r1, [r3], #1
 8027802:	e7f9      	b.n	80277f8 <strncpy+0x1a>

08027804 <strrchr>:
 8027804:	b538      	push	{r3, r4, r5, lr}
 8027806:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802780a:	4603      	mov	r3, r0
 802780c:	d10e      	bne.n	802782c <strrchr+0x28>
 802780e:	4621      	mov	r1, r4
 8027810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027814:	f7ff bfc4 	b.w	80277a0 <strchr>
 8027818:	1c43      	adds	r3, r0, #1
 802781a:	4605      	mov	r5, r0
 802781c:	4621      	mov	r1, r4
 802781e:	4618      	mov	r0, r3
 8027820:	f7ff ffbe 	bl	80277a0 <strchr>
 8027824:	2800      	cmp	r0, #0
 8027826:	d1f7      	bne.n	8027818 <strrchr+0x14>
 8027828:	4628      	mov	r0, r5
 802782a:	bd38      	pop	{r3, r4, r5, pc}
 802782c:	2500      	movs	r5, #0
 802782e:	e7f5      	b.n	802781c <strrchr+0x18>

08027830 <strstr>:
 8027830:	780a      	ldrb	r2, [r1, #0]
 8027832:	b570      	push	{r4, r5, r6, lr}
 8027834:	b96a      	cbnz	r2, 8027852 <strstr+0x22>
 8027836:	bd70      	pop	{r4, r5, r6, pc}
 8027838:	429a      	cmp	r2, r3
 802783a:	d109      	bne.n	8027850 <strstr+0x20>
 802783c:	460c      	mov	r4, r1
 802783e:	4605      	mov	r5, r0
 8027840:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8027844:	2b00      	cmp	r3, #0
 8027846:	d0f6      	beq.n	8027836 <strstr+0x6>
 8027848:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802784c:	429e      	cmp	r6, r3
 802784e:	d0f7      	beq.n	8027840 <strstr+0x10>
 8027850:	3001      	adds	r0, #1
 8027852:	7803      	ldrb	r3, [r0, #0]
 8027854:	2b00      	cmp	r3, #0
 8027856:	d1ef      	bne.n	8027838 <strstr+0x8>
 8027858:	4618      	mov	r0, r3
 802785a:	e7ec      	b.n	8027836 <strstr+0x6>

0802785c <_raise_r>:
 802785c:	291f      	cmp	r1, #31
 802785e:	b538      	push	{r3, r4, r5, lr}
 8027860:	4605      	mov	r5, r0
 8027862:	460c      	mov	r4, r1
 8027864:	d904      	bls.n	8027870 <_raise_r+0x14>
 8027866:	2316      	movs	r3, #22
 8027868:	6003      	str	r3, [r0, #0]
 802786a:	f04f 30ff 	mov.w	r0, #4294967295
 802786e:	bd38      	pop	{r3, r4, r5, pc}
 8027870:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8027872:	b112      	cbz	r2, 802787a <_raise_r+0x1e>
 8027874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027878:	b94b      	cbnz	r3, 802788e <_raise_r+0x32>
 802787a:	4628      	mov	r0, r5
 802787c:	f000 f868 	bl	8027950 <_getpid_r>
 8027880:	4622      	mov	r2, r4
 8027882:	4601      	mov	r1, r0
 8027884:	4628      	mov	r0, r5
 8027886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802788a:	f000 b84f 	b.w	802792c <_kill_r>
 802788e:	2b01      	cmp	r3, #1
 8027890:	d00a      	beq.n	80278a8 <_raise_r+0x4c>
 8027892:	1c59      	adds	r1, r3, #1
 8027894:	d103      	bne.n	802789e <_raise_r+0x42>
 8027896:	2316      	movs	r3, #22
 8027898:	6003      	str	r3, [r0, #0]
 802789a:	2001      	movs	r0, #1
 802789c:	e7e7      	b.n	802786e <_raise_r+0x12>
 802789e:	2100      	movs	r1, #0
 80278a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80278a4:	4620      	mov	r0, r4
 80278a6:	4798      	blx	r3
 80278a8:	2000      	movs	r0, #0
 80278aa:	e7e0      	b.n	802786e <_raise_r+0x12>

080278ac <raise>:
 80278ac:	4b02      	ldr	r3, [pc, #8]	@ (80278b8 <raise+0xc>)
 80278ae:	4601      	mov	r1, r0
 80278b0:	6818      	ldr	r0, [r3, #0]
 80278b2:	f7ff bfd3 	b.w	802785c <_raise_r>
 80278b6:	bf00      	nop
 80278b8:	240009a0 	.word	0x240009a0

080278bc <_localeconv_r>:
 80278bc:	4800      	ldr	r0, [pc, #0]	@ (80278c0 <_localeconv_r+0x4>)
 80278be:	4770      	bx	lr
 80278c0:	24000924 	.word	0x24000924

080278c4 <_close_r>:
 80278c4:	b538      	push	{r3, r4, r5, lr}
 80278c6:	4d06      	ldr	r5, [pc, #24]	@ (80278e0 <_close_r+0x1c>)
 80278c8:	2300      	movs	r3, #0
 80278ca:	4604      	mov	r4, r0
 80278cc:	4608      	mov	r0, r1
 80278ce:	602b      	str	r3, [r5, #0]
 80278d0:	f7da fab9 	bl	8001e46 <_close>
 80278d4:	1c43      	adds	r3, r0, #1
 80278d6:	d102      	bne.n	80278de <_close_r+0x1a>
 80278d8:	682b      	ldr	r3, [r5, #0]
 80278da:	b103      	cbz	r3, 80278de <_close_r+0x1a>
 80278dc:	6023      	str	r3, [r4, #0]
 80278de:	bd38      	pop	{r3, r4, r5, pc}
 80278e0:	2400586c 	.word	0x2400586c

080278e4 <_lseek_r>:
 80278e4:	b538      	push	{r3, r4, r5, lr}
 80278e6:	4d07      	ldr	r5, [pc, #28]	@ (8027904 <_lseek_r+0x20>)
 80278e8:	4604      	mov	r4, r0
 80278ea:	4608      	mov	r0, r1
 80278ec:	4611      	mov	r1, r2
 80278ee:	2200      	movs	r2, #0
 80278f0:	602a      	str	r2, [r5, #0]
 80278f2:	461a      	mov	r2, r3
 80278f4:	f7da face 	bl	8001e94 <_lseek>
 80278f8:	1c43      	adds	r3, r0, #1
 80278fa:	d102      	bne.n	8027902 <_lseek_r+0x1e>
 80278fc:	682b      	ldr	r3, [r5, #0]
 80278fe:	b103      	cbz	r3, 8027902 <_lseek_r+0x1e>
 8027900:	6023      	str	r3, [r4, #0]
 8027902:	bd38      	pop	{r3, r4, r5, pc}
 8027904:	2400586c 	.word	0x2400586c

08027908 <_read_r>:
 8027908:	b538      	push	{r3, r4, r5, lr}
 802790a:	4d07      	ldr	r5, [pc, #28]	@ (8027928 <_read_r+0x20>)
 802790c:	4604      	mov	r4, r0
 802790e:	4608      	mov	r0, r1
 8027910:	4611      	mov	r1, r2
 8027912:	2200      	movs	r2, #0
 8027914:	602a      	str	r2, [r5, #0]
 8027916:	461a      	mov	r2, r3
 8027918:	f7da fa78 	bl	8001e0c <_read>
 802791c:	1c43      	adds	r3, r0, #1
 802791e:	d102      	bne.n	8027926 <_read_r+0x1e>
 8027920:	682b      	ldr	r3, [r5, #0]
 8027922:	b103      	cbz	r3, 8027926 <_read_r+0x1e>
 8027924:	6023      	str	r3, [r4, #0]
 8027926:	bd38      	pop	{r3, r4, r5, pc}
 8027928:	2400586c 	.word	0x2400586c

0802792c <_kill_r>:
 802792c:	b538      	push	{r3, r4, r5, lr}
 802792e:	4d07      	ldr	r5, [pc, #28]	@ (802794c <_kill_r+0x20>)
 8027930:	2300      	movs	r3, #0
 8027932:	4604      	mov	r4, r0
 8027934:	4608      	mov	r0, r1
 8027936:	4611      	mov	r1, r2
 8027938:	602b      	str	r3, [r5, #0]
 802793a:	f7da fa4c 	bl	8001dd6 <_kill>
 802793e:	1c43      	adds	r3, r0, #1
 8027940:	d102      	bne.n	8027948 <_kill_r+0x1c>
 8027942:	682b      	ldr	r3, [r5, #0]
 8027944:	b103      	cbz	r3, 8027948 <_kill_r+0x1c>
 8027946:	6023      	str	r3, [r4, #0]
 8027948:	bd38      	pop	{r3, r4, r5, pc}
 802794a:	bf00      	nop
 802794c:	2400586c 	.word	0x2400586c

08027950 <_getpid_r>:
 8027950:	f7da ba39 	b.w	8001dc6 <_getpid>

08027954 <_sbrk_r>:
 8027954:	b538      	push	{r3, r4, r5, lr}
 8027956:	4d06      	ldr	r5, [pc, #24]	@ (8027970 <_sbrk_r+0x1c>)
 8027958:	2300      	movs	r3, #0
 802795a:	4604      	mov	r4, r0
 802795c:	4608      	mov	r0, r1
 802795e:	602b      	str	r3, [r5, #0]
 8027960:	f7da faa6 	bl	8001eb0 <_sbrk>
 8027964:	1c43      	adds	r3, r0, #1
 8027966:	d102      	bne.n	802796e <_sbrk_r+0x1a>
 8027968:	682b      	ldr	r3, [r5, #0]
 802796a:	b103      	cbz	r3, 802796e <_sbrk_r+0x1a>
 802796c:	6023      	str	r3, [r4, #0]
 802796e:	bd38      	pop	{r3, r4, r5, pc}
 8027970:	2400586c 	.word	0x2400586c

08027974 <_write_r>:
 8027974:	b538      	push	{r3, r4, r5, lr}
 8027976:	4d07      	ldr	r5, [pc, #28]	@ (8027994 <_write_r+0x20>)
 8027978:	4604      	mov	r4, r0
 802797a:	4608      	mov	r0, r1
 802797c:	4611      	mov	r1, r2
 802797e:	2200      	movs	r2, #0
 8027980:	602a      	str	r2, [r5, #0]
 8027982:	461a      	mov	r2, r3
 8027984:	f7d9 f8f2 	bl	8000b6c <_write>
 8027988:	1c43      	adds	r3, r0, #1
 802798a:	d102      	bne.n	8027992 <_write_r+0x1e>
 802798c:	682b      	ldr	r3, [r5, #0]
 802798e:	b103      	cbz	r3, 8027992 <_write_r+0x1e>
 8027990:	6023      	str	r3, [r4, #0]
 8027992:	bd38      	pop	{r3, r4, r5, pc}
 8027994:	2400586c 	.word	0x2400586c

08027998 <__errno>:
 8027998:	4b01      	ldr	r3, [pc, #4]	@ (80279a0 <__errno+0x8>)
 802799a:	6818      	ldr	r0, [r3, #0]
 802799c:	4770      	bx	lr
 802799e:	bf00      	nop
 80279a0:	240009a0 	.word	0x240009a0

080279a4 <__libc_init_array>:
 80279a4:	b570      	push	{r4, r5, r6, lr}
 80279a6:	4d0d      	ldr	r5, [pc, #52]	@ (80279dc <__libc_init_array+0x38>)
 80279a8:	4c0d      	ldr	r4, [pc, #52]	@ (80279e0 <__libc_init_array+0x3c>)
 80279aa:	1b64      	subs	r4, r4, r5
 80279ac:	10a4      	asrs	r4, r4, #2
 80279ae:	2600      	movs	r6, #0
 80279b0:	42a6      	cmp	r6, r4
 80279b2:	d109      	bne.n	80279c8 <__libc_init_array+0x24>
 80279b4:	4d0b      	ldr	r5, [pc, #44]	@ (80279e4 <__libc_init_array+0x40>)
 80279b6:	4c0c      	ldr	r4, [pc, #48]	@ (80279e8 <__libc_init_array+0x44>)
 80279b8:	f002 f830 	bl	8029a1c <_init>
 80279bc:	1b64      	subs	r4, r4, r5
 80279be:	10a4      	asrs	r4, r4, #2
 80279c0:	2600      	movs	r6, #0
 80279c2:	42a6      	cmp	r6, r4
 80279c4:	d105      	bne.n	80279d2 <__libc_init_array+0x2e>
 80279c6:	bd70      	pop	{r4, r5, r6, pc}
 80279c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80279cc:	4798      	blx	r3
 80279ce:	3601      	adds	r6, #1
 80279d0:	e7ee      	b.n	80279b0 <__libc_init_array+0xc>
 80279d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80279d6:	4798      	blx	r3
 80279d8:	3601      	adds	r6, #1
 80279da:	e7f2      	b.n	80279c2 <__libc_init_array+0x1e>
 80279dc:	0803b510 	.word	0x0803b510
 80279e0:	0803b510 	.word	0x0803b510
 80279e4:	0803b510 	.word	0x0803b510
 80279e8:	0803b514 	.word	0x0803b514

080279ec <__retarget_lock_init_recursive>:
 80279ec:	4770      	bx	lr

080279ee <__retarget_lock_acquire_recursive>:
 80279ee:	4770      	bx	lr

080279f0 <__retarget_lock_release_recursive>:
 80279f0:	4770      	bx	lr

080279f2 <strcpy>:
 80279f2:	4603      	mov	r3, r0
 80279f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80279f8:	f803 2b01 	strb.w	r2, [r3], #1
 80279fc:	2a00      	cmp	r2, #0
 80279fe:	d1f9      	bne.n	80279f4 <strcpy+0x2>
 8027a00:	4770      	bx	lr

08027a02 <memcpy>:
 8027a02:	440a      	add	r2, r1
 8027a04:	4291      	cmp	r1, r2
 8027a06:	f100 33ff 	add.w	r3, r0, #4294967295
 8027a0a:	d100      	bne.n	8027a0e <memcpy+0xc>
 8027a0c:	4770      	bx	lr
 8027a0e:	b510      	push	{r4, lr}
 8027a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027a18:	4291      	cmp	r1, r2
 8027a1a:	d1f9      	bne.n	8027a10 <memcpy+0xe>
 8027a1c:	bd10      	pop	{r4, pc}
	...

08027a20 <nan>:
 8027a20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8027a28 <nan+0x8>
 8027a24:	4770      	bx	lr
 8027a26:	bf00      	nop
 8027a28:	00000000 	.word	0x00000000
 8027a2c:	7ff80000 	.word	0x7ff80000

08027a30 <quorem>:
 8027a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a34:	6903      	ldr	r3, [r0, #16]
 8027a36:	690c      	ldr	r4, [r1, #16]
 8027a38:	42a3      	cmp	r3, r4
 8027a3a:	4607      	mov	r7, r0
 8027a3c:	db7e      	blt.n	8027b3c <quorem+0x10c>
 8027a3e:	3c01      	subs	r4, #1
 8027a40:	f101 0814 	add.w	r8, r1, #20
 8027a44:	00a3      	lsls	r3, r4, #2
 8027a46:	f100 0514 	add.w	r5, r0, #20
 8027a4a:	9300      	str	r3, [sp, #0]
 8027a4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027a50:	9301      	str	r3, [sp, #4]
 8027a52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027a5a:	3301      	adds	r3, #1
 8027a5c:	429a      	cmp	r2, r3
 8027a5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027a62:	fbb2 f6f3 	udiv	r6, r2, r3
 8027a66:	d32e      	bcc.n	8027ac6 <quorem+0x96>
 8027a68:	f04f 0a00 	mov.w	sl, #0
 8027a6c:	46c4      	mov	ip, r8
 8027a6e:	46ae      	mov	lr, r5
 8027a70:	46d3      	mov	fp, sl
 8027a72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8027a76:	b298      	uxth	r0, r3
 8027a78:	fb06 a000 	mla	r0, r6, r0, sl
 8027a7c:	0c02      	lsrs	r2, r0, #16
 8027a7e:	0c1b      	lsrs	r3, r3, #16
 8027a80:	fb06 2303 	mla	r3, r6, r3, r2
 8027a84:	f8de 2000 	ldr.w	r2, [lr]
 8027a88:	b280      	uxth	r0, r0
 8027a8a:	b292      	uxth	r2, r2
 8027a8c:	1a12      	subs	r2, r2, r0
 8027a8e:	445a      	add	r2, fp
 8027a90:	f8de 0000 	ldr.w	r0, [lr]
 8027a94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027a98:	b29b      	uxth	r3, r3
 8027a9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8027a9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8027aa2:	b292      	uxth	r2, r2
 8027aa4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8027aa8:	45e1      	cmp	r9, ip
 8027aaa:	f84e 2b04 	str.w	r2, [lr], #4
 8027aae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8027ab2:	d2de      	bcs.n	8027a72 <quorem+0x42>
 8027ab4:	9b00      	ldr	r3, [sp, #0]
 8027ab6:	58eb      	ldr	r3, [r5, r3]
 8027ab8:	b92b      	cbnz	r3, 8027ac6 <quorem+0x96>
 8027aba:	9b01      	ldr	r3, [sp, #4]
 8027abc:	3b04      	subs	r3, #4
 8027abe:	429d      	cmp	r5, r3
 8027ac0:	461a      	mov	r2, r3
 8027ac2:	d32f      	bcc.n	8027b24 <quorem+0xf4>
 8027ac4:	613c      	str	r4, [r7, #16]
 8027ac6:	4638      	mov	r0, r7
 8027ac8:	f001 fbea 	bl	80292a0 <__mcmp>
 8027acc:	2800      	cmp	r0, #0
 8027ace:	db25      	blt.n	8027b1c <quorem+0xec>
 8027ad0:	4629      	mov	r1, r5
 8027ad2:	2000      	movs	r0, #0
 8027ad4:	f858 2b04 	ldr.w	r2, [r8], #4
 8027ad8:	f8d1 c000 	ldr.w	ip, [r1]
 8027adc:	fa1f fe82 	uxth.w	lr, r2
 8027ae0:	fa1f f38c 	uxth.w	r3, ip
 8027ae4:	eba3 030e 	sub.w	r3, r3, lr
 8027ae8:	4403      	add	r3, r0
 8027aea:	0c12      	lsrs	r2, r2, #16
 8027aec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8027af0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8027af4:	b29b      	uxth	r3, r3
 8027af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027afa:	45c1      	cmp	r9, r8
 8027afc:	f841 3b04 	str.w	r3, [r1], #4
 8027b00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8027b04:	d2e6      	bcs.n	8027ad4 <quorem+0xa4>
 8027b06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027b0e:	b922      	cbnz	r2, 8027b1a <quorem+0xea>
 8027b10:	3b04      	subs	r3, #4
 8027b12:	429d      	cmp	r5, r3
 8027b14:	461a      	mov	r2, r3
 8027b16:	d30b      	bcc.n	8027b30 <quorem+0x100>
 8027b18:	613c      	str	r4, [r7, #16]
 8027b1a:	3601      	adds	r6, #1
 8027b1c:	4630      	mov	r0, r6
 8027b1e:	b003      	add	sp, #12
 8027b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b24:	6812      	ldr	r2, [r2, #0]
 8027b26:	3b04      	subs	r3, #4
 8027b28:	2a00      	cmp	r2, #0
 8027b2a:	d1cb      	bne.n	8027ac4 <quorem+0x94>
 8027b2c:	3c01      	subs	r4, #1
 8027b2e:	e7c6      	b.n	8027abe <quorem+0x8e>
 8027b30:	6812      	ldr	r2, [r2, #0]
 8027b32:	3b04      	subs	r3, #4
 8027b34:	2a00      	cmp	r2, #0
 8027b36:	d1ef      	bne.n	8027b18 <quorem+0xe8>
 8027b38:	3c01      	subs	r4, #1
 8027b3a:	e7ea      	b.n	8027b12 <quorem+0xe2>
 8027b3c:	2000      	movs	r0, #0
 8027b3e:	e7ee      	b.n	8027b1e <quorem+0xee>

08027b40 <_dtoa_r>:
 8027b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b44:	ed2d 8b02 	vpush	{d8}
 8027b48:	69c7      	ldr	r7, [r0, #28]
 8027b4a:	b091      	sub	sp, #68	@ 0x44
 8027b4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8027b50:	ec55 4b10 	vmov	r4, r5, d0
 8027b54:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8027b56:	9107      	str	r1, [sp, #28]
 8027b58:	4681      	mov	r9, r0
 8027b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8027b5c:	930d      	str	r3, [sp, #52]	@ 0x34
 8027b5e:	b97f      	cbnz	r7, 8027b80 <_dtoa_r+0x40>
 8027b60:	2010      	movs	r0, #16
 8027b62:	f7fd ff83 	bl	8025a6c <malloc>
 8027b66:	4602      	mov	r2, r0
 8027b68:	f8c9 001c 	str.w	r0, [r9, #28]
 8027b6c:	b920      	cbnz	r0, 8027b78 <_dtoa_r+0x38>
 8027b6e:	4ba0      	ldr	r3, [pc, #640]	@ (8027df0 <_dtoa_r+0x2b0>)
 8027b70:	21ef      	movs	r1, #239	@ 0xef
 8027b72:	48a0      	ldr	r0, [pc, #640]	@ (8027df4 <_dtoa_r+0x2b4>)
 8027b74:	f7fd ff38 	bl	80259e8 <__assert_func>
 8027b78:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8027b7c:	6007      	str	r7, [r0, #0]
 8027b7e:	60c7      	str	r7, [r0, #12]
 8027b80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8027b84:	6819      	ldr	r1, [r3, #0]
 8027b86:	b159      	cbz	r1, 8027ba0 <_dtoa_r+0x60>
 8027b88:	685a      	ldr	r2, [r3, #4]
 8027b8a:	604a      	str	r2, [r1, #4]
 8027b8c:	2301      	movs	r3, #1
 8027b8e:	4093      	lsls	r3, r2
 8027b90:	608b      	str	r3, [r1, #8]
 8027b92:	4648      	mov	r0, r9
 8027b94:	f001 f908 	bl	8028da8 <_Bfree>
 8027b98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8027b9c:	2200      	movs	r2, #0
 8027b9e:	601a      	str	r2, [r3, #0]
 8027ba0:	1e2b      	subs	r3, r5, #0
 8027ba2:	bfbb      	ittet	lt
 8027ba4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8027ba8:	9303      	strlt	r3, [sp, #12]
 8027baa:	2300      	movge	r3, #0
 8027bac:	2201      	movlt	r2, #1
 8027bae:	bfac      	ite	ge
 8027bb0:	6033      	strge	r3, [r6, #0]
 8027bb2:	6032      	strlt	r2, [r6, #0]
 8027bb4:	4b90      	ldr	r3, [pc, #576]	@ (8027df8 <_dtoa_r+0x2b8>)
 8027bb6:	9e03      	ldr	r6, [sp, #12]
 8027bb8:	43b3      	bics	r3, r6
 8027bba:	d110      	bne.n	8027bde <_dtoa_r+0x9e>
 8027bbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027bbe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8027bc2:	6013      	str	r3, [r2, #0]
 8027bc4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8027bc8:	4323      	orrs	r3, r4
 8027bca:	f000 84e6 	beq.w	802859a <_dtoa_r+0xa5a>
 8027bce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027bd0:	4f8a      	ldr	r7, [pc, #552]	@ (8027dfc <_dtoa_r+0x2bc>)
 8027bd2:	2b00      	cmp	r3, #0
 8027bd4:	f000 84e8 	beq.w	80285a8 <_dtoa_r+0xa68>
 8027bd8:	1cfb      	adds	r3, r7, #3
 8027bda:	f000 bce3 	b.w	80285a4 <_dtoa_r+0xa64>
 8027bde:	ed9d 8b02 	vldr	d8, [sp, #8]
 8027be2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8027be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027bea:	d10a      	bne.n	8027c02 <_dtoa_r+0xc2>
 8027bec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027bee:	2301      	movs	r3, #1
 8027bf0:	6013      	str	r3, [r2, #0]
 8027bf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8027bf4:	b113      	cbz	r3, 8027bfc <_dtoa_r+0xbc>
 8027bf6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8027bf8:	4b81      	ldr	r3, [pc, #516]	@ (8027e00 <_dtoa_r+0x2c0>)
 8027bfa:	6013      	str	r3, [r2, #0]
 8027bfc:	4f81      	ldr	r7, [pc, #516]	@ (8027e04 <_dtoa_r+0x2c4>)
 8027bfe:	f000 bcd3 	b.w	80285a8 <_dtoa_r+0xa68>
 8027c02:	aa0e      	add	r2, sp, #56	@ 0x38
 8027c04:	a90f      	add	r1, sp, #60	@ 0x3c
 8027c06:	4648      	mov	r0, r9
 8027c08:	eeb0 0b48 	vmov.f64	d0, d8
 8027c0c:	f001 fc68 	bl	80294e0 <__d2b>
 8027c10:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8027c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027c16:	9001      	str	r0, [sp, #4]
 8027c18:	2b00      	cmp	r3, #0
 8027c1a:	d045      	beq.n	8027ca8 <_dtoa_r+0x168>
 8027c1c:	eeb0 7b48 	vmov.f64	d7, d8
 8027c20:	ee18 1a90 	vmov	r1, s17
 8027c24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8027c28:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8027c2c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8027c30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8027c34:	2500      	movs	r5, #0
 8027c36:	ee07 1a90 	vmov	s15, r1
 8027c3a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8027c3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8027dd8 <_dtoa_r+0x298>
 8027c42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8027c46:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8027de0 <_dtoa_r+0x2a0>
 8027c4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027c4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8027de8 <_dtoa_r+0x2a8>
 8027c52:	ee07 3a90 	vmov	s15, r3
 8027c56:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8027c5a:	eeb0 7b46 	vmov.f64	d7, d6
 8027c5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8027c62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8027c66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8027c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c6e:	ee16 8a90 	vmov	r8, s13
 8027c72:	d508      	bpl.n	8027c86 <_dtoa_r+0x146>
 8027c74:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8027c78:	eeb4 6b47 	vcmp.f64	d6, d7
 8027c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c80:	bf18      	it	ne
 8027c82:	f108 38ff 	addne.w	r8, r8, #4294967295
 8027c86:	f1b8 0f16 	cmp.w	r8, #22
 8027c8a:	d82b      	bhi.n	8027ce4 <_dtoa_r+0x1a4>
 8027c8c:	495e      	ldr	r1, [pc, #376]	@ (8027e08 <_dtoa_r+0x2c8>)
 8027c8e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8027c92:	ed91 7b00 	vldr	d7, [r1]
 8027c96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c9e:	d501      	bpl.n	8027ca4 <_dtoa_r+0x164>
 8027ca0:	f108 38ff 	add.w	r8, r8, #4294967295
 8027ca4:	2100      	movs	r1, #0
 8027ca6:	e01e      	b.n	8027ce6 <_dtoa_r+0x1a6>
 8027ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027caa:	4413      	add	r3, r2
 8027cac:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8027cb0:	2920      	cmp	r1, #32
 8027cb2:	bfc1      	itttt	gt
 8027cb4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8027cb8:	408e      	lslgt	r6, r1
 8027cba:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8027cbe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8027cc2:	bfd6      	itet	le
 8027cc4:	f1c1 0120 	rsble	r1, r1, #32
 8027cc8:	4331      	orrgt	r1, r6
 8027cca:	fa04 f101 	lslle.w	r1, r4, r1
 8027cce:	ee07 1a90 	vmov	s15, r1
 8027cd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027cd6:	3b01      	subs	r3, #1
 8027cd8:	ee17 1a90 	vmov	r1, s15
 8027cdc:	2501      	movs	r5, #1
 8027cde:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8027ce2:	e7a8      	b.n	8027c36 <_dtoa_r+0xf6>
 8027ce4:	2101      	movs	r1, #1
 8027ce6:	1ad2      	subs	r2, r2, r3
 8027ce8:	1e53      	subs	r3, r2, #1
 8027cea:	9306      	str	r3, [sp, #24]
 8027cec:	bf45      	ittet	mi
 8027cee:	f1c2 0301 	rsbmi	r3, r2, #1
 8027cf2:	9304      	strmi	r3, [sp, #16]
 8027cf4:	2300      	movpl	r3, #0
 8027cf6:	2300      	movmi	r3, #0
 8027cf8:	bf4c      	ite	mi
 8027cfa:	9306      	strmi	r3, [sp, #24]
 8027cfc:	9304      	strpl	r3, [sp, #16]
 8027cfe:	f1b8 0f00 	cmp.w	r8, #0
 8027d02:	910c      	str	r1, [sp, #48]	@ 0x30
 8027d04:	db18      	blt.n	8027d38 <_dtoa_r+0x1f8>
 8027d06:	9b06      	ldr	r3, [sp, #24]
 8027d08:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8027d0c:	4443      	add	r3, r8
 8027d0e:	9306      	str	r3, [sp, #24]
 8027d10:	2300      	movs	r3, #0
 8027d12:	9a07      	ldr	r2, [sp, #28]
 8027d14:	2a09      	cmp	r2, #9
 8027d16:	d845      	bhi.n	8027da4 <_dtoa_r+0x264>
 8027d18:	2a05      	cmp	r2, #5
 8027d1a:	bfc4      	itt	gt
 8027d1c:	3a04      	subgt	r2, #4
 8027d1e:	9207      	strgt	r2, [sp, #28]
 8027d20:	9a07      	ldr	r2, [sp, #28]
 8027d22:	f1a2 0202 	sub.w	r2, r2, #2
 8027d26:	bfcc      	ite	gt
 8027d28:	2400      	movgt	r4, #0
 8027d2a:	2401      	movle	r4, #1
 8027d2c:	2a03      	cmp	r2, #3
 8027d2e:	d844      	bhi.n	8027dba <_dtoa_r+0x27a>
 8027d30:	e8df f002 	tbb	[pc, r2]
 8027d34:	0b173634 	.word	0x0b173634
 8027d38:	9b04      	ldr	r3, [sp, #16]
 8027d3a:	2200      	movs	r2, #0
 8027d3c:	eba3 0308 	sub.w	r3, r3, r8
 8027d40:	9304      	str	r3, [sp, #16]
 8027d42:	920a      	str	r2, [sp, #40]	@ 0x28
 8027d44:	f1c8 0300 	rsb	r3, r8, #0
 8027d48:	e7e3      	b.n	8027d12 <_dtoa_r+0x1d2>
 8027d4a:	2201      	movs	r2, #1
 8027d4c:	9208      	str	r2, [sp, #32]
 8027d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027d50:	eb08 0b02 	add.w	fp, r8, r2
 8027d54:	f10b 0a01 	add.w	sl, fp, #1
 8027d58:	4652      	mov	r2, sl
 8027d5a:	2a01      	cmp	r2, #1
 8027d5c:	bfb8      	it	lt
 8027d5e:	2201      	movlt	r2, #1
 8027d60:	e006      	b.n	8027d70 <_dtoa_r+0x230>
 8027d62:	2201      	movs	r2, #1
 8027d64:	9208      	str	r2, [sp, #32]
 8027d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027d68:	2a00      	cmp	r2, #0
 8027d6a:	dd29      	ble.n	8027dc0 <_dtoa_r+0x280>
 8027d6c:	4693      	mov	fp, r2
 8027d6e:	4692      	mov	sl, r2
 8027d70:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8027d74:	2100      	movs	r1, #0
 8027d76:	2004      	movs	r0, #4
 8027d78:	f100 0614 	add.w	r6, r0, #20
 8027d7c:	4296      	cmp	r6, r2
 8027d7e:	d926      	bls.n	8027dce <_dtoa_r+0x28e>
 8027d80:	6079      	str	r1, [r7, #4]
 8027d82:	4648      	mov	r0, r9
 8027d84:	9305      	str	r3, [sp, #20]
 8027d86:	f000 ffcf 	bl	8028d28 <_Balloc>
 8027d8a:	9b05      	ldr	r3, [sp, #20]
 8027d8c:	4607      	mov	r7, r0
 8027d8e:	2800      	cmp	r0, #0
 8027d90:	d13e      	bne.n	8027e10 <_dtoa_r+0x2d0>
 8027d92:	4b1e      	ldr	r3, [pc, #120]	@ (8027e0c <_dtoa_r+0x2cc>)
 8027d94:	4602      	mov	r2, r0
 8027d96:	f240 11af 	movw	r1, #431	@ 0x1af
 8027d9a:	e6ea      	b.n	8027b72 <_dtoa_r+0x32>
 8027d9c:	2200      	movs	r2, #0
 8027d9e:	e7e1      	b.n	8027d64 <_dtoa_r+0x224>
 8027da0:	2200      	movs	r2, #0
 8027da2:	e7d3      	b.n	8027d4c <_dtoa_r+0x20c>
 8027da4:	2401      	movs	r4, #1
 8027da6:	2200      	movs	r2, #0
 8027da8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8027dac:	f04f 3bff 	mov.w	fp, #4294967295
 8027db0:	2100      	movs	r1, #0
 8027db2:	46da      	mov	sl, fp
 8027db4:	2212      	movs	r2, #18
 8027db6:	9109      	str	r1, [sp, #36]	@ 0x24
 8027db8:	e7da      	b.n	8027d70 <_dtoa_r+0x230>
 8027dba:	2201      	movs	r2, #1
 8027dbc:	9208      	str	r2, [sp, #32]
 8027dbe:	e7f5      	b.n	8027dac <_dtoa_r+0x26c>
 8027dc0:	f04f 0b01 	mov.w	fp, #1
 8027dc4:	46da      	mov	sl, fp
 8027dc6:	465a      	mov	r2, fp
 8027dc8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8027dcc:	e7d0      	b.n	8027d70 <_dtoa_r+0x230>
 8027dce:	3101      	adds	r1, #1
 8027dd0:	0040      	lsls	r0, r0, #1
 8027dd2:	e7d1      	b.n	8027d78 <_dtoa_r+0x238>
 8027dd4:	f3af 8000 	nop.w
 8027dd8:	636f4361 	.word	0x636f4361
 8027ddc:	3fd287a7 	.word	0x3fd287a7
 8027de0:	8b60c8b3 	.word	0x8b60c8b3
 8027de4:	3fc68a28 	.word	0x3fc68a28
 8027de8:	509f79fb 	.word	0x509f79fb
 8027dec:	3fd34413 	.word	0x3fd34413
 8027df0:	0803b0c6 	.word	0x0803b0c6
 8027df4:	0803b180 	.word	0x0803b180
 8027df8:	7ff00000 	.word	0x7ff00000
 8027dfc:	0803b17c 	.word	0x0803b17c
 8027e00:	0803b148 	.word	0x0803b148
 8027e04:	0803b147 	.word	0x0803b147
 8027e08:	0803b440 	.word	0x0803b440
 8027e0c:	0803b1d8 	.word	0x0803b1d8
 8027e10:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8027e14:	f1ba 0f0e 	cmp.w	sl, #14
 8027e18:	6010      	str	r0, [r2, #0]
 8027e1a:	d86e      	bhi.n	8027efa <_dtoa_r+0x3ba>
 8027e1c:	2c00      	cmp	r4, #0
 8027e1e:	d06c      	beq.n	8027efa <_dtoa_r+0x3ba>
 8027e20:	f1b8 0f00 	cmp.w	r8, #0
 8027e24:	f340 80b4 	ble.w	8027f90 <_dtoa_r+0x450>
 8027e28:	4ac8      	ldr	r2, [pc, #800]	@ (802814c <_dtoa_r+0x60c>)
 8027e2a:	f008 010f 	and.w	r1, r8, #15
 8027e2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8027e32:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8027e36:	ed92 7b00 	vldr	d7, [r2]
 8027e3a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8027e3e:	f000 809b 	beq.w	8027f78 <_dtoa_r+0x438>
 8027e42:	4ac3      	ldr	r2, [pc, #780]	@ (8028150 <_dtoa_r+0x610>)
 8027e44:	ed92 6b08 	vldr	d6, [r2, #32]
 8027e48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8027e4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8027e50:	f001 010f 	and.w	r1, r1, #15
 8027e54:	2203      	movs	r2, #3
 8027e56:	48be      	ldr	r0, [pc, #760]	@ (8028150 <_dtoa_r+0x610>)
 8027e58:	2900      	cmp	r1, #0
 8027e5a:	f040 808f 	bne.w	8027f7c <_dtoa_r+0x43c>
 8027e5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027e62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027e66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027e6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027e6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027e70:	2900      	cmp	r1, #0
 8027e72:	f000 80b3 	beq.w	8027fdc <_dtoa_r+0x49c>
 8027e76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8027e7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e82:	f140 80ab 	bpl.w	8027fdc <_dtoa_r+0x49c>
 8027e86:	f1ba 0f00 	cmp.w	sl, #0
 8027e8a:	f000 80a7 	beq.w	8027fdc <_dtoa_r+0x49c>
 8027e8e:	f1bb 0f00 	cmp.w	fp, #0
 8027e92:	dd30      	ble.n	8027ef6 <_dtoa_r+0x3b6>
 8027e94:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8027e98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027e9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027ea0:	f108 31ff 	add.w	r1, r8, #4294967295
 8027ea4:	9105      	str	r1, [sp, #20]
 8027ea6:	3201      	adds	r2, #1
 8027ea8:	465c      	mov	r4, fp
 8027eaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027eae:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8027eb2:	ee07 2a90 	vmov	s15, r2
 8027eb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027eba:	eea7 5b06 	vfma.f64	d5, d7, d6
 8027ebe:	ee15 2a90 	vmov	r2, s11
 8027ec2:	ec51 0b15 	vmov	r0, r1, d5
 8027ec6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8027eca:	2c00      	cmp	r4, #0
 8027ecc:	f040 808a 	bne.w	8027fe4 <_dtoa_r+0x4a4>
 8027ed0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8027ed4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8027ed8:	ec41 0b17 	vmov	d7, r0, r1
 8027edc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ee4:	f300 826a 	bgt.w	80283bc <_dtoa_r+0x87c>
 8027ee8:	eeb1 7b47 	vneg.f64	d7, d7
 8027eec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027ef4:	d423      	bmi.n	8027f3e <_dtoa_r+0x3fe>
 8027ef6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8027efa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027efc:	2a00      	cmp	r2, #0
 8027efe:	f2c0 8129 	blt.w	8028154 <_dtoa_r+0x614>
 8027f02:	f1b8 0f0e 	cmp.w	r8, #14
 8027f06:	f300 8125 	bgt.w	8028154 <_dtoa_r+0x614>
 8027f0a:	4b90      	ldr	r3, [pc, #576]	@ (802814c <_dtoa_r+0x60c>)
 8027f0c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8027f10:	ed93 6b00 	vldr	d6, [r3]
 8027f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	f280 80c8 	bge.w	80280ac <_dtoa_r+0x56c>
 8027f1c:	f1ba 0f00 	cmp.w	sl, #0
 8027f20:	f300 80c4 	bgt.w	80280ac <_dtoa_r+0x56c>
 8027f24:	d10b      	bne.n	8027f3e <_dtoa_r+0x3fe>
 8027f26:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8027f2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8027f2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027f32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f3a:	f2c0 823c 	blt.w	80283b6 <_dtoa_r+0x876>
 8027f3e:	2400      	movs	r4, #0
 8027f40:	4625      	mov	r5, r4
 8027f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f44:	43db      	mvns	r3, r3
 8027f46:	9305      	str	r3, [sp, #20]
 8027f48:	463e      	mov	r6, r7
 8027f4a:	f04f 0800 	mov.w	r8, #0
 8027f4e:	4621      	mov	r1, r4
 8027f50:	4648      	mov	r0, r9
 8027f52:	f000 ff29 	bl	8028da8 <_Bfree>
 8027f56:	2d00      	cmp	r5, #0
 8027f58:	f000 80a2 	beq.w	80280a0 <_dtoa_r+0x560>
 8027f5c:	f1b8 0f00 	cmp.w	r8, #0
 8027f60:	d005      	beq.n	8027f6e <_dtoa_r+0x42e>
 8027f62:	45a8      	cmp	r8, r5
 8027f64:	d003      	beq.n	8027f6e <_dtoa_r+0x42e>
 8027f66:	4641      	mov	r1, r8
 8027f68:	4648      	mov	r0, r9
 8027f6a:	f000 ff1d 	bl	8028da8 <_Bfree>
 8027f6e:	4629      	mov	r1, r5
 8027f70:	4648      	mov	r0, r9
 8027f72:	f000 ff19 	bl	8028da8 <_Bfree>
 8027f76:	e093      	b.n	80280a0 <_dtoa_r+0x560>
 8027f78:	2202      	movs	r2, #2
 8027f7a:	e76c      	b.n	8027e56 <_dtoa_r+0x316>
 8027f7c:	07cc      	lsls	r4, r1, #31
 8027f7e:	d504      	bpl.n	8027f8a <_dtoa_r+0x44a>
 8027f80:	ed90 6b00 	vldr	d6, [r0]
 8027f84:	3201      	adds	r2, #1
 8027f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027f8a:	1049      	asrs	r1, r1, #1
 8027f8c:	3008      	adds	r0, #8
 8027f8e:	e763      	b.n	8027e58 <_dtoa_r+0x318>
 8027f90:	d022      	beq.n	8027fd8 <_dtoa_r+0x498>
 8027f92:	f1c8 0100 	rsb	r1, r8, #0
 8027f96:	4a6d      	ldr	r2, [pc, #436]	@ (802814c <_dtoa_r+0x60c>)
 8027f98:	f001 000f 	and.w	r0, r1, #15
 8027f9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8027fa0:	ed92 7b00 	vldr	d7, [r2]
 8027fa4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8027fa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027fac:	4868      	ldr	r0, [pc, #416]	@ (8028150 <_dtoa_r+0x610>)
 8027fae:	1109      	asrs	r1, r1, #4
 8027fb0:	2400      	movs	r4, #0
 8027fb2:	2202      	movs	r2, #2
 8027fb4:	b929      	cbnz	r1, 8027fc2 <_dtoa_r+0x482>
 8027fb6:	2c00      	cmp	r4, #0
 8027fb8:	f43f af57 	beq.w	8027e6a <_dtoa_r+0x32a>
 8027fbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027fc0:	e753      	b.n	8027e6a <_dtoa_r+0x32a>
 8027fc2:	07ce      	lsls	r6, r1, #31
 8027fc4:	d505      	bpl.n	8027fd2 <_dtoa_r+0x492>
 8027fc6:	ed90 6b00 	vldr	d6, [r0]
 8027fca:	3201      	adds	r2, #1
 8027fcc:	2401      	movs	r4, #1
 8027fce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027fd2:	1049      	asrs	r1, r1, #1
 8027fd4:	3008      	adds	r0, #8
 8027fd6:	e7ed      	b.n	8027fb4 <_dtoa_r+0x474>
 8027fd8:	2202      	movs	r2, #2
 8027fda:	e746      	b.n	8027e6a <_dtoa_r+0x32a>
 8027fdc:	f8cd 8014 	str.w	r8, [sp, #20]
 8027fe0:	4654      	mov	r4, sl
 8027fe2:	e762      	b.n	8027eaa <_dtoa_r+0x36a>
 8027fe4:	4a59      	ldr	r2, [pc, #356]	@ (802814c <_dtoa_r+0x60c>)
 8027fe6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8027fea:	ed12 4b02 	vldr	d4, [r2, #-8]
 8027fee:	9a08      	ldr	r2, [sp, #32]
 8027ff0:	ec41 0b17 	vmov	d7, r0, r1
 8027ff4:	443c      	add	r4, r7
 8027ff6:	b34a      	cbz	r2, 802804c <_dtoa_r+0x50c>
 8027ff8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8027ffc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8028000:	463e      	mov	r6, r7
 8028002:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8028006:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802800a:	ee35 7b47 	vsub.f64	d7, d5, d7
 802800e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8028012:	ee14 2a90 	vmov	r2, s9
 8028016:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802801a:	3230      	adds	r2, #48	@ 0x30
 802801c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8028024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028028:	f806 2b01 	strb.w	r2, [r6], #1
 802802c:	d438      	bmi.n	80280a0 <_dtoa_r+0x560>
 802802e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8028032:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8028036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802803a:	d46e      	bmi.n	802811a <_dtoa_r+0x5da>
 802803c:	42a6      	cmp	r6, r4
 802803e:	f43f af5a 	beq.w	8027ef6 <_dtoa_r+0x3b6>
 8028042:	ee27 7b03 	vmul.f64	d7, d7, d3
 8028046:	ee26 6b03 	vmul.f64	d6, d6, d3
 802804a:	e7e0      	b.n	802800e <_dtoa_r+0x4ce>
 802804c:	4621      	mov	r1, r4
 802804e:	463e      	mov	r6, r7
 8028050:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028054:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8028058:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802805c:	ee14 2a90 	vmov	r2, s9
 8028060:	3230      	adds	r2, #48	@ 0x30
 8028062:	f806 2b01 	strb.w	r2, [r6], #1
 8028066:	42a6      	cmp	r6, r4
 8028068:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802806c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8028070:	d119      	bne.n	80280a6 <_dtoa_r+0x566>
 8028072:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8028076:	ee37 4b05 	vadd.f64	d4, d7, d5
 802807a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028082:	dc4a      	bgt.n	802811a <_dtoa_r+0x5da>
 8028084:	ee35 5b47 	vsub.f64	d5, d5, d7
 8028088:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802808c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028090:	f57f af31 	bpl.w	8027ef6 <_dtoa_r+0x3b6>
 8028094:	460e      	mov	r6, r1
 8028096:	3901      	subs	r1, #1
 8028098:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802809c:	2b30      	cmp	r3, #48	@ 0x30
 802809e:	d0f9      	beq.n	8028094 <_dtoa_r+0x554>
 80280a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80280a4:	e027      	b.n	80280f6 <_dtoa_r+0x5b6>
 80280a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80280aa:	e7d5      	b.n	8028058 <_dtoa_r+0x518>
 80280ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80280b0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80280b4:	463e      	mov	r6, r7
 80280b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80280ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80280be:	ee15 3a10 	vmov	r3, s10
 80280c2:	3330      	adds	r3, #48	@ 0x30
 80280c4:	f806 3b01 	strb.w	r3, [r6], #1
 80280c8:	1bf3      	subs	r3, r6, r7
 80280ca:	459a      	cmp	sl, r3
 80280cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80280d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80280d4:	d132      	bne.n	802813c <_dtoa_r+0x5fc>
 80280d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80280da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80280de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280e2:	dc18      	bgt.n	8028116 <_dtoa_r+0x5d6>
 80280e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80280e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280ec:	d103      	bne.n	80280f6 <_dtoa_r+0x5b6>
 80280ee:	ee15 3a10 	vmov	r3, s10
 80280f2:	07db      	lsls	r3, r3, #31
 80280f4:	d40f      	bmi.n	8028116 <_dtoa_r+0x5d6>
 80280f6:	9901      	ldr	r1, [sp, #4]
 80280f8:	4648      	mov	r0, r9
 80280fa:	f000 fe55 	bl	8028da8 <_Bfree>
 80280fe:	2300      	movs	r3, #0
 8028100:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028102:	7033      	strb	r3, [r6, #0]
 8028104:	f108 0301 	add.w	r3, r8, #1
 8028108:	6013      	str	r3, [r2, #0]
 802810a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802810c:	2b00      	cmp	r3, #0
 802810e:	f000 824b 	beq.w	80285a8 <_dtoa_r+0xa68>
 8028112:	601e      	str	r6, [r3, #0]
 8028114:	e248      	b.n	80285a8 <_dtoa_r+0xa68>
 8028116:	f8cd 8014 	str.w	r8, [sp, #20]
 802811a:	4633      	mov	r3, r6
 802811c:	461e      	mov	r6, r3
 802811e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028122:	2a39      	cmp	r2, #57	@ 0x39
 8028124:	d106      	bne.n	8028134 <_dtoa_r+0x5f4>
 8028126:	429f      	cmp	r7, r3
 8028128:	d1f8      	bne.n	802811c <_dtoa_r+0x5dc>
 802812a:	9a05      	ldr	r2, [sp, #20]
 802812c:	3201      	adds	r2, #1
 802812e:	9205      	str	r2, [sp, #20]
 8028130:	2230      	movs	r2, #48	@ 0x30
 8028132:	703a      	strb	r2, [r7, #0]
 8028134:	781a      	ldrb	r2, [r3, #0]
 8028136:	3201      	adds	r2, #1
 8028138:	701a      	strb	r2, [r3, #0]
 802813a:	e7b1      	b.n	80280a0 <_dtoa_r+0x560>
 802813c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028140:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028148:	d1b5      	bne.n	80280b6 <_dtoa_r+0x576>
 802814a:	e7d4      	b.n	80280f6 <_dtoa_r+0x5b6>
 802814c:	0803b440 	.word	0x0803b440
 8028150:	0803b418 	.word	0x0803b418
 8028154:	9908      	ldr	r1, [sp, #32]
 8028156:	2900      	cmp	r1, #0
 8028158:	f000 80e9 	beq.w	802832e <_dtoa_r+0x7ee>
 802815c:	9907      	ldr	r1, [sp, #28]
 802815e:	2901      	cmp	r1, #1
 8028160:	f300 80cb 	bgt.w	80282fa <_dtoa_r+0x7ba>
 8028164:	2d00      	cmp	r5, #0
 8028166:	f000 80c4 	beq.w	80282f2 <_dtoa_r+0x7b2>
 802816a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802816e:	9e04      	ldr	r6, [sp, #16]
 8028170:	461c      	mov	r4, r3
 8028172:	9305      	str	r3, [sp, #20]
 8028174:	9b04      	ldr	r3, [sp, #16]
 8028176:	4413      	add	r3, r2
 8028178:	9304      	str	r3, [sp, #16]
 802817a:	9b06      	ldr	r3, [sp, #24]
 802817c:	2101      	movs	r1, #1
 802817e:	4413      	add	r3, r2
 8028180:	4648      	mov	r0, r9
 8028182:	9306      	str	r3, [sp, #24]
 8028184:	f000 ff0e 	bl	8028fa4 <__i2b>
 8028188:	9b05      	ldr	r3, [sp, #20]
 802818a:	4605      	mov	r5, r0
 802818c:	b166      	cbz	r6, 80281a8 <_dtoa_r+0x668>
 802818e:	9a06      	ldr	r2, [sp, #24]
 8028190:	2a00      	cmp	r2, #0
 8028192:	dd09      	ble.n	80281a8 <_dtoa_r+0x668>
 8028194:	42b2      	cmp	r2, r6
 8028196:	9904      	ldr	r1, [sp, #16]
 8028198:	bfa8      	it	ge
 802819a:	4632      	movge	r2, r6
 802819c:	1a89      	subs	r1, r1, r2
 802819e:	9104      	str	r1, [sp, #16]
 80281a0:	9906      	ldr	r1, [sp, #24]
 80281a2:	1ab6      	subs	r6, r6, r2
 80281a4:	1a8a      	subs	r2, r1, r2
 80281a6:	9206      	str	r2, [sp, #24]
 80281a8:	b30b      	cbz	r3, 80281ee <_dtoa_r+0x6ae>
 80281aa:	9a08      	ldr	r2, [sp, #32]
 80281ac:	2a00      	cmp	r2, #0
 80281ae:	f000 80c5 	beq.w	802833c <_dtoa_r+0x7fc>
 80281b2:	2c00      	cmp	r4, #0
 80281b4:	f000 80bf 	beq.w	8028336 <_dtoa_r+0x7f6>
 80281b8:	4629      	mov	r1, r5
 80281ba:	4622      	mov	r2, r4
 80281bc:	4648      	mov	r0, r9
 80281be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80281c0:	f000 ffa8 	bl	8029114 <__pow5mult>
 80281c4:	9a01      	ldr	r2, [sp, #4]
 80281c6:	4601      	mov	r1, r0
 80281c8:	4605      	mov	r5, r0
 80281ca:	4648      	mov	r0, r9
 80281cc:	f000 ff00 	bl	8028fd0 <__multiply>
 80281d0:	9901      	ldr	r1, [sp, #4]
 80281d2:	9005      	str	r0, [sp, #20]
 80281d4:	4648      	mov	r0, r9
 80281d6:	f000 fde7 	bl	8028da8 <_Bfree>
 80281da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80281dc:	1b1b      	subs	r3, r3, r4
 80281de:	f000 80b0 	beq.w	8028342 <_dtoa_r+0x802>
 80281e2:	9905      	ldr	r1, [sp, #20]
 80281e4:	461a      	mov	r2, r3
 80281e6:	4648      	mov	r0, r9
 80281e8:	f000 ff94 	bl	8029114 <__pow5mult>
 80281ec:	9001      	str	r0, [sp, #4]
 80281ee:	2101      	movs	r1, #1
 80281f0:	4648      	mov	r0, r9
 80281f2:	f000 fed7 	bl	8028fa4 <__i2b>
 80281f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80281f8:	4604      	mov	r4, r0
 80281fa:	2b00      	cmp	r3, #0
 80281fc:	f000 81da 	beq.w	80285b4 <_dtoa_r+0xa74>
 8028200:	461a      	mov	r2, r3
 8028202:	4601      	mov	r1, r0
 8028204:	4648      	mov	r0, r9
 8028206:	f000 ff85 	bl	8029114 <__pow5mult>
 802820a:	9b07      	ldr	r3, [sp, #28]
 802820c:	2b01      	cmp	r3, #1
 802820e:	4604      	mov	r4, r0
 8028210:	f300 80a0 	bgt.w	8028354 <_dtoa_r+0x814>
 8028214:	9b02      	ldr	r3, [sp, #8]
 8028216:	2b00      	cmp	r3, #0
 8028218:	f040 8096 	bne.w	8028348 <_dtoa_r+0x808>
 802821c:	9b03      	ldr	r3, [sp, #12]
 802821e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8028222:	2a00      	cmp	r2, #0
 8028224:	f040 8092 	bne.w	802834c <_dtoa_r+0x80c>
 8028228:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802822c:	0d12      	lsrs	r2, r2, #20
 802822e:	0512      	lsls	r2, r2, #20
 8028230:	2a00      	cmp	r2, #0
 8028232:	f000 808d 	beq.w	8028350 <_dtoa_r+0x810>
 8028236:	9b04      	ldr	r3, [sp, #16]
 8028238:	3301      	adds	r3, #1
 802823a:	9304      	str	r3, [sp, #16]
 802823c:	9b06      	ldr	r3, [sp, #24]
 802823e:	3301      	adds	r3, #1
 8028240:	9306      	str	r3, [sp, #24]
 8028242:	2301      	movs	r3, #1
 8028244:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028248:	2b00      	cmp	r3, #0
 802824a:	f000 81b9 	beq.w	80285c0 <_dtoa_r+0xa80>
 802824e:	6922      	ldr	r2, [r4, #16]
 8028250:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8028254:	6910      	ldr	r0, [r2, #16]
 8028256:	f000 fe59 	bl	8028f0c <__hi0bits>
 802825a:	f1c0 0020 	rsb	r0, r0, #32
 802825e:	9b06      	ldr	r3, [sp, #24]
 8028260:	4418      	add	r0, r3
 8028262:	f010 001f 	ands.w	r0, r0, #31
 8028266:	f000 8081 	beq.w	802836c <_dtoa_r+0x82c>
 802826a:	f1c0 0220 	rsb	r2, r0, #32
 802826e:	2a04      	cmp	r2, #4
 8028270:	dd73      	ble.n	802835a <_dtoa_r+0x81a>
 8028272:	9b04      	ldr	r3, [sp, #16]
 8028274:	f1c0 001c 	rsb	r0, r0, #28
 8028278:	4403      	add	r3, r0
 802827a:	9304      	str	r3, [sp, #16]
 802827c:	9b06      	ldr	r3, [sp, #24]
 802827e:	4406      	add	r6, r0
 8028280:	4403      	add	r3, r0
 8028282:	9306      	str	r3, [sp, #24]
 8028284:	9b04      	ldr	r3, [sp, #16]
 8028286:	2b00      	cmp	r3, #0
 8028288:	dd05      	ble.n	8028296 <_dtoa_r+0x756>
 802828a:	9901      	ldr	r1, [sp, #4]
 802828c:	461a      	mov	r2, r3
 802828e:	4648      	mov	r0, r9
 8028290:	f000 ff9a 	bl	80291c8 <__lshift>
 8028294:	9001      	str	r0, [sp, #4]
 8028296:	9b06      	ldr	r3, [sp, #24]
 8028298:	2b00      	cmp	r3, #0
 802829a:	dd05      	ble.n	80282a8 <_dtoa_r+0x768>
 802829c:	4621      	mov	r1, r4
 802829e:	461a      	mov	r2, r3
 80282a0:	4648      	mov	r0, r9
 80282a2:	f000 ff91 	bl	80291c8 <__lshift>
 80282a6:	4604      	mov	r4, r0
 80282a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	d060      	beq.n	8028370 <_dtoa_r+0x830>
 80282ae:	9801      	ldr	r0, [sp, #4]
 80282b0:	4621      	mov	r1, r4
 80282b2:	f000 fff5 	bl	80292a0 <__mcmp>
 80282b6:	2800      	cmp	r0, #0
 80282b8:	da5a      	bge.n	8028370 <_dtoa_r+0x830>
 80282ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80282be:	9305      	str	r3, [sp, #20]
 80282c0:	9901      	ldr	r1, [sp, #4]
 80282c2:	2300      	movs	r3, #0
 80282c4:	220a      	movs	r2, #10
 80282c6:	4648      	mov	r0, r9
 80282c8:	f000 fd90 	bl	8028dec <__multadd>
 80282cc:	9b08      	ldr	r3, [sp, #32]
 80282ce:	9001      	str	r0, [sp, #4]
 80282d0:	2b00      	cmp	r3, #0
 80282d2:	f000 8177 	beq.w	80285c4 <_dtoa_r+0xa84>
 80282d6:	4629      	mov	r1, r5
 80282d8:	2300      	movs	r3, #0
 80282da:	220a      	movs	r2, #10
 80282dc:	4648      	mov	r0, r9
 80282de:	f000 fd85 	bl	8028dec <__multadd>
 80282e2:	f1bb 0f00 	cmp.w	fp, #0
 80282e6:	4605      	mov	r5, r0
 80282e8:	dc6e      	bgt.n	80283c8 <_dtoa_r+0x888>
 80282ea:	9b07      	ldr	r3, [sp, #28]
 80282ec:	2b02      	cmp	r3, #2
 80282ee:	dc48      	bgt.n	8028382 <_dtoa_r+0x842>
 80282f0:	e06a      	b.n	80283c8 <_dtoa_r+0x888>
 80282f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80282f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80282f8:	e739      	b.n	802816e <_dtoa_r+0x62e>
 80282fa:	f10a 34ff 	add.w	r4, sl, #4294967295
 80282fe:	42a3      	cmp	r3, r4
 8028300:	db07      	blt.n	8028312 <_dtoa_r+0x7d2>
 8028302:	f1ba 0f00 	cmp.w	sl, #0
 8028306:	eba3 0404 	sub.w	r4, r3, r4
 802830a:	db0b      	blt.n	8028324 <_dtoa_r+0x7e4>
 802830c:	9e04      	ldr	r6, [sp, #16]
 802830e:	4652      	mov	r2, sl
 8028310:	e72f      	b.n	8028172 <_dtoa_r+0x632>
 8028312:	1ae2      	subs	r2, r4, r3
 8028314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028316:	9e04      	ldr	r6, [sp, #16]
 8028318:	4413      	add	r3, r2
 802831a:	930a      	str	r3, [sp, #40]	@ 0x28
 802831c:	4652      	mov	r2, sl
 802831e:	4623      	mov	r3, r4
 8028320:	2400      	movs	r4, #0
 8028322:	e726      	b.n	8028172 <_dtoa_r+0x632>
 8028324:	9a04      	ldr	r2, [sp, #16]
 8028326:	eba2 060a 	sub.w	r6, r2, sl
 802832a:	2200      	movs	r2, #0
 802832c:	e721      	b.n	8028172 <_dtoa_r+0x632>
 802832e:	9e04      	ldr	r6, [sp, #16]
 8028330:	9d08      	ldr	r5, [sp, #32]
 8028332:	461c      	mov	r4, r3
 8028334:	e72a      	b.n	802818c <_dtoa_r+0x64c>
 8028336:	9a01      	ldr	r2, [sp, #4]
 8028338:	9205      	str	r2, [sp, #20]
 802833a:	e752      	b.n	80281e2 <_dtoa_r+0x6a2>
 802833c:	9901      	ldr	r1, [sp, #4]
 802833e:	461a      	mov	r2, r3
 8028340:	e751      	b.n	80281e6 <_dtoa_r+0x6a6>
 8028342:	9b05      	ldr	r3, [sp, #20]
 8028344:	9301      	str	r3, [sp, #4]
 8028346:	e752      	b.n	80281ee <_dtoa_r+0x6ae>
 8028348:	2300      	movs	r3, #0
 802834a:	e77b      	b.n	8028244 <_dtoa_r+0x704>
 802834c:	9b02      	ldr	r3, [sp, #8]
 802834e:	e779      	b.n	8028244 <_dtoa_r+0x704>
 8028350:	920b      	str	r2, [sp, #44]	@ 0x2c
 8028352:	e778      	b.n	8028246 <_dtoa_r+0x706>
 8028354:	2300      	movs	r3, #0
 8028356:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028358:	e779      	b.n	802824e <_dtoa_r+0x70e>
 802835a:	d093      	beq.n	8028284 <_dtoa_r+0x744>
 802835c:	9b04      	ldr	r3, [sp, #16]
 802835e:	321c      	adds	r2, #28
 8028360:	4413      	add	r3, r2
 8028362:	9304      	str	r3, [sp, #16]
 8028364:	9b06      	ldr	r3, [sp, #24]
 8028366:	4416      	add	r6, r2
 8028368:	4413      	add	r3, r2
 802836a:	e78a      	b.n	8028282 <_dtoa_r+0x742>
 802836c:	4602      	mov	r2, r0
 802836e:	e7f5      	b.n	802835c <_dtoa_r+0x81c>
 8028370:	f1ba 0f00 	cmp.w	sl, #0
 8028374:	f8cd 8014 	str.w	r8, [sp, #20]
 8028378:	46d3      	mov	fp, sl
 802837a:	dc21      	bgt.n	80283c0 <_dtoa_r+0x880>
 802837c:	9b07      	ldr	r3, [sp, #28]
 802837e:	2b02      	cmp	r3, #2
 8028380:	dd1e      	ble.n	80283c0 <_dtoa_r+0x880>
 8028382:	f1bb 0f00 	cmp.w	fp, #0
 8028386:	f47f addc 	bne.w	8027f42 <_dtoa_r+0x402>
 802838a:	4621      	mov	r1, r4
 802838c:	465b      	mov	r3, fp
 802838e:	2205      	movs	r2, #5
 8028390:	4648      	mov	r0, r9
 8028392:	f000 fd2b 	bl	8028dec <__multadd>
 8028396:	4601      	mov	r1, r0
 8028398:	4604      	mov	r4, r0
 802839a:	9801      	ldr	r0, [sp, #4]
 802839c:	f000 ff80 	bl	80292a0 <__mcmp>
 80283a0:	2800      	cmp	r0, #0
 80283a2:	f77f adce 	ble.w	8027f42 <_dtoa_r+0x402>
 80283a6:	463e      	mov	r6, r7
 80283a8:	2331      	movs	r3, #49	@ 0x31
 80283aa:	f806 3b01 	strb.w	r3, [r6], #1
 80283ae:	9b05      	ldr	r3, [sp, #20]
 80283b0:	3301      	adds	r3, #1
 80283b2:	9305      	str	r3, [sp, #20]
 80283b4:	e5c9      	b.n	8027f4a <_dtoa_r+0x40a>
 80283b6:	f8cd 8014 	str.w	r8, [sp, #20]
 80283ba:	4654      	mov	r4, sl
 80283bc:	4625      	mov	r5, r4
 80283be:	e7f2      	b.n	80283a6 <_dtoa_r+0x866>
 80283c0:	9b08      	ldr	r3, [sp, #32]
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	f000 8102 	beq.w	80285cc <_dtoa_r+0xa8c>
 80283c8:	2e00      	cmp	r6, #0
 80283ca:	dd05      	ble.n	80283d8 <_dtoa_r+0x898>
 80283cc:	4629      	mov	r1, r5
 80283ce:	4632      	mov	r2, r6
 80283d0:	4648      	mov	r0, r9
 80283d2:	f000 fef9 	bl	80291c8 <__lshift>
 80283d6:	4605      	mov	r5, r0
 80283d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80283da:	2b00      	cmp	r3, #0
 80283dc:	d058      	beq.n	8028490 <_dtoa_r+0x950>
 80283de:	6869      	ldr	r1, [r5, #4]
 80283e0:	4648      	mov	r0, r9
 80283e2:	f000 fca1 	bl	8028d28 <_Balloc>
 80283e6:	4606      	mov	r6, r0
 80283e8:	b928      	cbnz	r0, 80283f6 <_dtoa_r+0x8b6>
 80283ea:	4b82      	ldr	r3, [pc, #520]	@ (80285f4 <_dtoa_r+0xab4>)
 80283ec:	4602      	mov	r2, r0
 80283ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80283f2:	f7ff bbbe 	b.w	8027b72 <_dtoa_r+0x32>
 80283f6:	692a      	ldr	r2, [r5, #16]
 80283f8:	3202      	adds	r2, #2
 80283fa:	0092      	lsls	r2, r2, #2
 80283fc:	f105 010c 	add.w	r1, r5, #12
 8028400:	300c      	adds	r0, #12
 8028402:	f7ff fafe 	bl	8027a02 <memcpy>
 8028406:	2201      	movs	r2, #1
 8028408:	4631      	mov	r1, r6
 802840a:	4648      	mov	r0, r9
 802840c:	f000 fedc 	bl	80291c8 <__lshift>
 8028410:	1c7b      	adds	r3, r7, #1
 8028412:	9304      	str	r3, [sp, #16]
 8028414:	eb07 030b 	add.w	r3, r7, fp
 8028418:	9309      	str	r3, [sp, #36]	@ 0x24
 802841a:	9b02      	ldr	r3, [sp, #8]
 802841c:	f003 0301 	and.w	r3, r3, #1
 8028420:	46a8      	mov	r8, r5
 8028422:	9308      	str	r3, [sp, #32]
 8028424:	4605      	mov	r5, r0
 8028426:	9b04      	ldr	r3, [sp, #16]
 8028428:	9801      	ldr	r0, [sp, #4]
 802842a:	4621      	mov	r1, r4
 802842c:	f103 3bff 	add.w	fp, r3, #4294967295
 8028430:	f7ff fafe 	bl	8027a30 <quorem>
 8028434:	4641      	mov	r1, r8
 8028436:	9002      	str	r0, [sp, #8]
 8028438:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802843c:	9801      	ldr	r0, [sp, #4]
 802843e:	f000 ff2f 	bl	80292a0 <__mcmp>
 8028442:	462a      	mov	r2, r5
 8028444:	9006      	str	r0, [sp, #24]
 8028446:	4621      	mov	r1, r4
 8028448:	4648      	mov	r0, r9
 802844a:	f000 ff45 	bl	80292d8 <__mdiff>
 802844e:	68c2      	ldr	r2, [r0, #12]
 8028450:	4606      	mov	r6, r0
 8028452:	b9fa      	cbnz	r2, 8028494 <_dtoa_r+0x954>
 8028454:	4601      	mov	r1, r0
 8028456:	9801      	ldr	r0, [sp, #4]
 8028458:	f000 ff22 	bl	80292a0 <__mcmp>
 802845c:	4602      	mov	r2, r0
 802845e:	4631      	mov	r1, r6
 8028460:	4648      	mov	r0, r9
 8028462:	920a      	str	r2, [sp, #40]	@ 0x28
 8028464:	f000 fca0 	bl	8028da8 <_Bfree>
 8028468:	9b07      	ldr	r3, [sp, #28]
 802846a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802846c:	9e04      	ldr	r6, [sp, #16]
 802846e:	ea42 0103 	orr.w	r1, r2, r3
 8028472:	9b08      	ldr	r3, [sp, #32]
 8028474:	4319      	orrs	r1, r3
 8028476:	d10f      	bne.n	8028498 <_dtoa_r+0x958>
 8028478:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802847c:	d028      	beq.n	80284d0 <_dtoa_r+0x990>
 802847e:	9b06      	ldr	r3, [sp, #24]
 8028480:	2b00      	cmp	r3, #0
 8028482:	dd02      	ble.n	802848a <_dtoa_r+0x94a>
 8028484:	9b02      	ldr	r3, [sp, #8]
 8028486:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802848a:	f88b a000 	strb.w	sl, [fp]
 802848e:	e55e      	b.n	8027f4e <_dtoa_r+0x40e>
 8028490:	4628      	mov	r0, r5
 8028492:	e7bd      	b.n	8028410 <_dtoa_r+0x8d0>
 8028494:	2201      	movs	r2, #1
 8028496:	e7e2      	b.n	802845e <_dtoa_r+0x91e>
 8028498:	9b06      	ldr	r3, [sp, #24]
 802849a:	2b00      	cmp	r3, #0
 802849c:	db04      	blt.n	80284a8 <_dtoa_r+0x968>
 802849e:	9907      	ldr	r1, [sp, #28]
 80284a0:	430b      	orrs	r3, r1
 80284a2:	9908      	ldr	r1, [sp, #32]
 80284a4:	430b      	orrs	r3, r1
 80284a6:	d120      	bne.n	80284ea <_dtoa_r+0x9aa>
 80284a8:	2a00      	cmp	r2, #0
 80284aa:	ddee      	ble.n	802848a <_dtoa_r+0x94a>
 80284ac:	9901      	ldr	r1, [sp, #4]
 80284ae:	2201      	movs	r2, #1
 80284b0:	4648      	mov	r0, r9
 80284b2:	f000 fe89 	bl	80291c8 <__lshift>
 80284b6:	4621      	mov	r1, r4
 80284b8:	9001      	str	r0, [sp, #4]
 80284ba:	f000 fef1 	bl	80292a0 <__mcmp>
 80284be:	2800      	cmp	r0, #0
 80284c0:	dc03      	bgt.n	80284ca <_dtoa_r+0x98a>
 80284c2:	d1e2      	bne.n	802848a <_dtoa_r+0x94a>
 80284c4:	f01a 0f01 	tst.w	sl, #1
 80284c8:	d0df      	beq.n	802848a <_dtoa_r+0x94a>
 80284ca:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80284ce:	d1d9      	bne.n	8028484 <_dtoa_r+0x944>
 80284d0:	2339      	movs	r3, #57	@ 0x39
 80284d2:	f88b 3000 	strb.w	r3, [fp]
 80284d6:	4633      	mov	r3, r6
 80284d8:	461e      	mov	r6, r3
 80284da:	3b01      	subs	r3, #1
 80284dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80284e0:	2a39      	cmp	r2, #57	@ 0x39
 80284e2:	d052      	beq.n	802858a <_dtoa_r+0xa4a>
 80284e4:	3201      	adds	r2, #1
 80284e6:	701a      	strb	r2, [r3, #0]
 80284e8:	e531      	b.n	8027f4e <_dtoa_r+0x40e>
 80284ea:	2a00      	cmp	r2, #0
 80284ec:	dd07      	ble.n	80284fe <_dtoa_r+0x9be>
 80284ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80284f2:	d0ed      	beq.n	80284d0 <_dtoa_r+0x990>
 80284f4:	f10a 0301 	add.w	r3, sl, #1
 80284f8:	f88b 3000 	strb.w	r3, [fp]
 80284fc:	e527      	b.n	8027f4e <_dtoa_r+0x40e>
 80284fe:	9b04      	ldr	r3, [sp, #16]
 8028500:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028502:	f803 ac01 	strb.w	sl, [r3, #-1]
 8028506:	4293      	cmp	r3, r2
 8028508:	d029      	beq.n	802855e <_dtoa_r+0xa1e>
 802850a:	9901      	ldr	r1, [sp, #4]
 802850c:	2300      	movs	r3, #0
 802850e:	220a      	movs	r2, #10
 8028510:	4648      	mov	r0, r9
 8028512:	f000 fc6b 	bl	8028dec <__multadd>
 8028516:	45a8      	cmp	r8, r5
 8028518:	9001      	str	r0, [sp, #4]
 802851a:	f04f 0300 	mov.w	r3, #0
 802851e:	f04f 020a 	mov.w	r2, #10
 8028522:	4641      	mov	r1, r8
 8028524:	4648      	mov	r0, r9
 8028526:	d107      	bne.n	8028538 <_dtoa_r+0x9f8>
 8028528:	f000 fc60 	bl	8028dec <__multadd>
 802852c:	4680      	mov	r8, r0
 802852e:	4605      	mov	r5, r0
 8028530:	9b04      	ldr	r3, [sp, #16]
 8028532:	3301      	adds	r3, #1
 8028534:	9304      	str	r3, [sp, #16]
 8028536:	e776      	b.n	8028426 <_dtoa_r+0x8e6>
 8028538:	f000 fc58 	bl	8028dec <__multadd>
 802853c:	4629      	mov	r1, r5
 802853e:	4680      	mov	r8, r0
 8028540:	2300      	movs	r3, #0
 8028542:	220a      	movs	r2, #10
 8028544:	4648      	mov	r0, r9
 8028546:	f000 fc51 	bl	8028dec <__multadd>
 802854a:	4605      	mov	r5, r0
 802854c:	e7f0      	b.n	8028530 <_dtoa_r+0x9f0>
 802854e:	f1bb 0f00 	cmp.w	fp, #0
 8028552:	bfcc      	ite	gt
 8028554:	465e      	movgt	r6, fp
 8028556:	2601      	movle	r6, #1
 8028558:	443e      	add	r6, r7
 802855a:	f04f 0800 	mov.w	r8, #0
 802855e:	9901      	ldr	r1, [sp, #4]
 8028560:	2201      	movs	r2, #1
 8028562:	4648      	mov	r0, r9
 8028564:	f000 fe30 	bl	80291c8 <__lshift>
 8028568:	4621      	mov	r1, r4
 802856a:	9001      	str	r0, [sp, #4]
 802856c:	f000 fe98 	bl	80292a0 <__mcmp>
 8028570:	2800      	cmp	r0, #0
 8028572:	dcb0      	bgt.n	80284d6 <_dtoa_r+0x996>
 8028574:	d102      	bne.n	802857c <_dtoa_r+0xa3c>
 8028576:	f01a 0f01 	tst.w	sl, #1
 802857a:	d1ac      	bne.n	80284d6 <_dtoa_r+0x996>
 802857c:	4633      	mov	r3, r6
 802857e:	461e      	mov	r6, r3
 8028580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028584:	2a30      	cmp	r2, #48	@ 0x30
 8028586:	d0fa      	beq.n	802857e <_dtoa_r+0xa3e>
 8028588:	e4e1      	b.n	8027f4e <_dtoa_r+0x40e>
 802858a:	429f      	cmp	r7, r3
 802858c:	d1a4      	bne.n	80284d8 <_dtoa_r+0x998>
 802858e:	9b05      	ldr	r3, [sp, #20]
 8028590:	3301      	adds	r3, #1
 8028592:	9305      	str	r3, [sp, #20]
 8028594:	2331      	movs	r3, #49	@ 0x31
 8028596:	703b      	strb	r3, [r7, #0]
 8028598:	e4d9      	b.n	8027f4e <_dtoa_r+0x40e>
 802859a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802859c:	4f16      	ldr	r7, [pc, #88]	@ (80285f8 <_dtoa_r+0xab8>)
 802859e:	b11b      	cbz	r3, 80285a8 <_dtoa_r+0xa68>
 80285a0:	f107 0308 	add.w	r3, r7, #8
 80285a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80285a6:	6013      	str	r3, [r2, #0]
 80285a8:	4638      	mov	r0, r7
 80285aa:	b011      	add	sp, #68	@ 0x44
 80285ac:	ecbd 8b02 	vpop	{d8}
 80285b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285b4:	9b07      	ldr	r3, [sp, #28]
 80285b6:	2b01      	cmp	r3, #1
 80285b8:	f77f ae2c 	ble.w	8028214 <_dtoa_r+0x6d4>
 80285bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80285be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80285c0:	2001      	movs	r0, #1
 80285c2:	e64c      	b.n	802825e <_dtoa_r+0x71e>
 80285c4:	f1bb 0f00 	cmp.w	fp, #0
 80285c8:	f77f aed8 	ble.w	802837c <_dtoa_r+0x83c>
 80285cc:	463e      	mov	r6, r7
 80285ce:	9801      	ldr	r0, [sp, #4]
 80285d0:	4621      	mov	r1, r4
 80285d2:	f7ff fa2d 	bl	8027a30 <quorem>
 80285d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80285da:	f806 ab01 	strb.w	sl, [r6], #1
 80285de:	1bf2      	subs	r2, r6, r7
 80285e0:	4593      	cmp	fp, r2
 80285e2:	ddb4      	ble.n	802854e <_dtoa_r+0xa0e>
 80285e4:	9901      	ldr	r1, [sp, #4]
 80285e6:	2300      	movs	r3, #0
 80285e8:	220a      	movs	r2, #10
 80285ea:	4648      	mov	r0, r9
 80285ec:	f000 fbfe 	bl	8028dec <__multadd>
 80285f0:	9001      	str	r0, [sp, #4]
 80285f2:	e7ec      	b.n	80285ce <_dtoa_r+0xa8e>
 80285f4:	0803b1d8 	.word	0x0803b1d8
 80285f8:	0803b173 	.word	0x0803b173

080285fc <_free_r>:
 80285fc:	b538      	push	{r3, r4, r5, lr}
 80285fe:	4605      	mov	r5, r0
 8028600:	2900      	cmp	r1, #0
 8028602:	d041      	beq.n	8028688 <_free_r+0x8c>
 8028604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028608:	1f0c      	subs	r4, r1, #4
 802860a:	2b00      	cmp	r3, #0
 802860c:	bfb8      	it	lt
 802860e:	18e4      	addlt	r4, r4, r3
 8028610:	f7fd fade 	bl	8025bd0 <__malloc_lock>
 8028614:	4a1d      	ldr	r2, [pc, #116]	@ (802868c <_free_r+0x90>)
 8028616:	6813      	ldr	r3, [r2, #0]
 8028618:	b933      	cbnz	r3, 8028628 <_free_r+0x2c>
 802861a:	6063      	str	r3, [r4, #4]
 802861c:	6014      	str	r4, [r2, #0]
 802861e:	4628      	mov	r0, r5
 8028620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028624:	f7fd bada 	b.w	8025bdc <__malloc_unlock>
 8028628:	42a3      	cmp	r3, r4
 802862a:	d908      	bls.n	802863e <_free_r+0x42>
 802862c:	6820      	ldr	r0, [r4, #0]
 802862e:	1821      	adds	r1, r4, r0
 8028630:	428b      	cmp	r3, r1
 8028632:	bf01      	itttt	eq
 8028634:	6819      	ldreq	r1, [r3, #0]
 8028636:	685b      	ldreq	r3, [r3, #4]
 8028638:	1809      	addeq	r1, r1, r0
 802863a:	6021      	streq	r1, [r4, #0]
 802863c:	e7ed      	b.n	802861a <_free_r+0x1e>
 802863e:	461a      	mov	r2, r3
 8028640:	685b      	ldr	r3, [r3, #4]
 8028642:	b10b      	cbz	r3, 8028648 <_free_r+0x4c>
 8028644:	42a3      	cmp	r3, r4
 8028646:	d9fa      	bls.n	802863e <_free_r+0x42>
 8028648:	6811      	ldr	r1, [r2, #0]
 802864a:	1850      	adds	r0, r2, r1
 802864c:	42a0      	cmp	r0, r4
 802864e:	d10b      	bne.n	8028668 <_free_r+0x6c>
 8028650:	6820      	ldr	r0, [r4, #0]
 8028652:	4401      	add	r1, r0
 8028654:	1850      	adds	r0, r2, r1
 8028656:	4283      	cmp	r3, r0
 8028658:	6011      	str	r1, [r2, #0]
 802865a:	d1e0      	bne.n	802861e <_free_r+0x22>
 802865c:	6818      	ldr	r0, [r3, #0]
 802865e:	685b      	ldr	r3, [r3, #4]
 8028660:	6053      	str	r3, [r2, #4]
 8028662:	4408      	add	r0, r1
 8028664:	6010      	str	r0, [r2, #0]
 8028666:	e7da      	b.n	802861e <_free_r+0x22>
 8028668:	d902      	bls.n	8028670 <_free_r+0x74>
 802866a:	230c      	movs	r3, #12
 802866c:	602b      	str	r3, [r5, #0]
 802866e:	e7d6      	b.n	802861e <_free_r+0x22>
 8028670:	6820      	ldr	r0, [r4, #0]
 8028672:	1821      	adds	r1, r4, r0
 8028674:	428b      	cmp	r3, r1
 8028676:	bf04      	itt	eq
 8028678:	6819      	ldreq	r1, [r3, #0]
 802867a:	685b      	ldreq	r3, [r3, #4]
 802867c:	6063      	str	r3, [r4, #4]
 802867e:	bf04      	itt	eq
 8028680:	1809      	addeq	r1, r1, r0
 8028682:	6021      	streq	r1, [r4, #0]
 8028684:	6054      	str	r4, [r2, #4]
 8028686:	e7ca      	b.n	802861e <_free_r+0x22>
 8028688:	bd38      	pop	{r3, r4, r5, pc}
 802868a:	bf00      	nop
 802868c:	2400572c 	.word	0x2400572c

08028690 <rshift>:
 8028690:	6903      	ldr	r3, [r0, #16]
 8028692:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8028696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802869a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802869e:	f100 0414 	add.w	r4, r0, #20
 80286a2:	dd45      	ble.n	8028730 <rshift+0xa0>
 80286a4:	f011 011f 	ands.w	r1, r1, #31
 80286a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80286ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80286b0:	d10c      	bne.n	80286cc <rshift+0x3c>
 80286b2:	f100 0710 	add.w	r7, r0, #16
 80286b6:	4629      	mov	r1, r5
 80286b8:	42b1      	cmp	r1, r6
 80286ba:	d334      	bcc.n	8028726 <rshift+0x96>
 80286bc:	1a9b      	subs	r3, r3, r2
 80286be:	009b      	lsls	r3, r3, #2
 80286c0:	1eea      	subs	r2, r5, #3
 80286c2:	4296      	cmp	r6, r2
 80286c4:	bf38      	it	cc
 80286c6:	2300      	movcc	r3, #0
 80286c8:	4423      	add	r3, r4
 80286ca:	e015      	b.n	80286f8 <rshift+0x68>
 80286cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80286d0:	f1c1 0820 	rsb	r8, r1, #32
 80286d4:	40cf      	lsrs	r7, r1
 80286d6:	f105 0e04 	add.w	lr, r5, #4
 80286da:	46a1      	mov	r9, r4
 80286dc:	4576      	cmp	r6, lr
 80286de:	46f4      	mov	ip, lr
 80286e0:	d815      	bhi.n	802870e <rshift+0x7e>
 80286e2:	1a9a      	subs	r2, r3, r2
 80286e4:	0092      	lsls	r2, r2, #2
 80286e6:	3a04      	subs	r2, #4
 80286e8:	3501      	adds	r5, #1
 80286ea:	42ae      	cmp	r6, r5
 80286ec:	bf38      	it	cc
 80286ee:	2200      	movcc	r2, #0
 80286f0:	18a3      	adds	r3, r4, r2
 80286f2:	50a7      	str	r7, [r4, r2]
 80286f4:	b107      	cbz	r7, 80286f8 <rshift+0x68>
 80286f6:	3304      	adds	r3, #4
 80286f8:	1b1a      	subs	r2, r3, r4
 80286fa:	42a3      	cmp	r3, r4
 80286fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8028700:	bf08      	it	eq
 8028702:	2300      	moveq	r3, #0
 8028704:	6102      	str	r2, [r0, #16]
 8028706:	bf08      	it	eq
 8028708:	6143      	streq	r3, [r0, #20]
 802870a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802870e:	f8dc c000 	ldr.w	ip, [ip]
 8028712:	fa0c fc08 	lsl.w	ip, ip, r8
 8028716:	ea4c 0707 	orr.w	r7, ip, r7
 802871a:	f849 7b04 	str.w	r7, [r9], #4
 802871e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8028722:	40cf      	lsrs	r7, r1
 8028724:	e7da      	b.n	80286dc <rshift+0x4c>
 8028726:	f851 cb04 	ldr.w	ip, [r1], #4
 802872a:	f847 cf04 	str.w	ip, [r7, #4]!
 802872e:	e7c3      	b.n	80286b8 <rshift+0x28>
 8028730:	4623      	mov	r3, r4
 8028732:	e7e1      	b.n	80286f8 <rshift+0x68>

08028734 <__hexdig_fun>:
 8028734:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8028738:	2b09      	cmp	r3, #9
 802873a:	d802      	bhi.n	8028742 <__hexdig_fun+0xe>
 802873c:	3820      	subs	r0, #32
 802873e:	b2c0      	uxtb	r0, r0
 8028740:	4770      	bx	lr
 8028742:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8028746:	2b05      	cmp	r3, #5
 8028748:	d801      	bhi.n	802874e <__hexdig_fun+0x1a>
 802874a:	3847      	subs	r0, #71	@ 0x47
 802874c:	e7f7      	b.n	802873e <__hexdig_fun+0xa>
 802874e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8028752:	2b05      	cmp	r3, #5
 8028754:	d801      	bhi.n	802875a <__hexdig_fun+0x26>
 8028756:	3827      	subs	r0, #39	@ 0x27
 8028758:	e7f1      	b.n	802873e <__hexdig_fun+0xa>
 802875a:	2000      	movs	r0, #0
 802875c:	4770      	bx	lr
	...

08028760 <__gethex>:
 8028760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028764:	b085      	sub	sp, #20
 8028766:	468a      	mov	sl, r1
 8028768:	9302      	str	r3, [sp, #8]
 802876a:	680b      	ldr	r3, [r1, #0]
 802876c:	9001      	str	r0, [sp, #4]
 802876e:	4690      	mov	r8, r2
 8028770:	1c9c      	adds	r4, r3, #2
 8028772:	46a1      	mov	r9, r4
 8028774:	f814 0b01 	ldrb.w	r0, [r4], #1
 8028778:	2830      	cmp	r0, #48	@ 0x30
 802877a:	d0fa      	beq.n	8028772 <__gethex+0x12>
 802877c:	eba9 0303 	sub.w	r3, r9, r3
 8028780:	f1a3 0b02 	sub.w	fp, r3, #2
 8028784:	f7ff ffd6 	bl	8028734 <__hexdig_fun>
 8028788:	4605      	mov	r5, r0
 802878a:	2800      	cmp	r0, #0
 802878c:	d168      	bne.n	8028860 <__gethex+0x100>
 802878e:	49a0      	ldr	r1, [pc, #640]	@ (8028a10 <__gethex+0x2b0>)
 8028790:	2201      	movs	r2, #1
 8028792:	4648      	mov	r0, r9
 8028794:	f7ff f811 	bl	80277ba <strncmp>
 8028798:	4607      	mov	r7, r0
 802879a:	2800      	cmp	r0, #0
 802879c:	d167      	bne.n	802886e <__gethex+0x10e>
 802879e:	f899 0001 	ldrb.w	r0, [r9, #1]
 80287a2:	4626      	mov	r6, r4
 80287a4:	f7ff ffc6 	bl	8028734 <__hexdig_fun>
 80287a8:	2800      	cmp	r0, #0
 80287aa:	d062      	beq.n	8028872 <__gethex+0x112>
 80287ac:	4623      	mov	r3, r4
 80287ae:	7818      	ldrb	r0, [r3, #0]
 80287b0:	2830      	cmp	r0, #48	@ 0x30
 80287b2:	4699      	mov	r9, r3
 80287b4:	f103 0301 	add.w	r3, r3, #1
 80287b8:	d0f9      	beq.n	80287ae <__gethex+0x4e>
 80287ba:	f7ff ffbb 	bl	8028734 <__hexdig_fun>
 80287be:	fab0 f580 	clz	r5, r0
 80287c2:	096d      	lsrs	r5, r5, #5
 80287c4:	f04f 0b01 	mov.w	fp, #1
 80287c8:	464a      	mov	r2, r9
 80287ca:	4616      	mov	r6, r2
 80287cc:	3201      	adds	r2, #1
 80287ce:	7830      	ldrb	r0, [r6, #0]
 80287d0:	f7ff ffb0 	bl	8028734 <__hexdig_fun>
 80287d4:	2800      	cmp	r0, #0
 80287d6:	d1f8      	bne.n	80287ca <__gethex+0x6a>
 80287d8:	498d      	ldr	r1, [pc, #564]	@ (8028a10 <__gethex+0x2b0>)
 80287da:	2201      	movs	r2, #1
 80287dc:	4630      	mov	r0, r6
 80287de:	f7fe ffec 	bl	80277ba <strncmp>
 80287e2:	2800      	cmp	r0, #0
 80287e4:	d13f      	bne.n	8028866 <__gethex+0x106>
 80287e6:	b944      	cbnz	r4, 80287fa <__gethex+0x9a>
 80287e8:	1c74      	adds	r4, r6, #1
 80287ea:	4622      	mov	r2, r4
 80287ec:	4616      	mov	r6, r2
 80287ee:	3201      	adds	r2, #1
 80287f0:	7830      	ldrb	r0, [r6, #0]
 80287f2:	f7ff ff9f 	bl	8028734 <__hexdig_fun>
 80287f6:	2800      	cmp	r0, #0
 80287f8:	d1f8      	bne.n	80287ec <__gethex+0x8c>
 80287fa:	1ba4      	subs	r4, r4, r6
 80287fc:	00a7      	lsls	r7, r4, #2
 80287fe:	7833      	ldrb	r3, [r6, #0]
 8028800:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8028804:	2b50      	cmp	r3, #80	@ 0x50
 8028806:	d13e      	bne.n	8028886 <__gethex+0x126>
 8028808:	7873      	ldrb	r3, [r6, #1]
 802880a:	2b2b      	cmp	r3, #43	@ 0x2b
 802880c:	d033      	beq.n	8028876 <__gethex+0x116>
 802880e:	2b2d      	cmp	r3, #45	@ 0x2d
 8028810:	d034      	beq.n	802887c <__gethex+0x11c>
 8028812:	1c71      	adds	r1, r6, #1
 8028814:	2400      	movs	r4, #0
 8028816:	7808      	ldrb	r0, [r1, #0]
 8028818:	f7ff ff8c 	bl	8028734 <__hexdig_fun>
 802881c:	1e43      	subs	r3, r0, #1
 802881e:	b2db      	uxtb	r3, r3
 8028820:	2b18      	cmp	r3, #24
 8028822:	d830      	bhi.n	8028886 <__gethex+0x126>
 8028824:	f1a0 0210 	sub.w	r2, r0, #16
 8028828:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802882c:	f7ff ff82 	bl	8028734 <__hexdig_fun>
 8028830:	f100 3cff 	add.w	ip, r0, #4294967295
 8028834:	fa5f fc8c 	uxtb.w	ip, ip
 8028838:	f1bc 0f18 	cmp.w	ip, #24
 802883c:	f04f 030a 	mov.w	r3, #10
 8028840:	d91e      	bls.n	8028880 <__gethex+0x120>
 8028842:	b104      	cbz	r4, 8028846 <__gethex+0xe6>
 8028844:	4252      	negs	r2, r2
 8028846:	4417      	add	r7, r2
 8028848:	f8ca 1000 	str.w	r1, [sl]
 802884c:	b1ed      	cbz	r5, 802888a <__gethex+0x12a>
 802884e:	f1bb 0f00 	cmp.w	fp, #0
 8028852:	bf0c      	ite	eq
 8028854:	2506      	moveq	r5, #6
 8028856:	2500      	movne	r5, #0
 8028858:	4628      	mov	r0, r5
 802885a:	b005      	add	sp, #20
 802885c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028860:	2500      	movs	r5, #0
 8028862:	462c      	mov	r4, r5
 8028864:	e7b0      	b.n	80287c8 <__gethex+0x68>
 8028866:	2c00      	cmp	r4, #0
 8028868:	d1c7      	bne.n	80287fa <__gethex+0x9a>
 802886a:	4627      	mov	r7, r4
 802886c:	e7c7      	b.n	80287fe <__gethex+0x9e>
 802886e:	464e      	mov	r6, r9
 8028870:	462f      	mov	r7, r5
 8028872:	2501      	movs	r5, #1
 8028874:	e7c3      	b.n	80287fe <__gethex+0x9e>
 8028876:	2400      	movs	r4, #0
 8028878:	1cb1      	adds	r1, r6, #2
 802887a:	e7cc      	b.n	8028816 <__gethex+0xb6>
 802887c:	2401      	movs	r4, #1
 802887e:	e7fb      	b.n	8028878 <__gethex+0x118>
 8028880:	fb03 0002 	mla	r0, r3, r2, r0
 8028884:	e7ce      	b.n	8028824 <__gethex+0xc4>
 8028886:	4631      	mov	r1, r6
 8028888:	e7de      	b.n	8028848 <__gethex+0xe8>
 802888a:	eba6 0309 	sub.w	r3, r6, r9
 802888e:	3b01      	subs	r3, #1
 8028890:	4629      	mov	r1, r5
 8028892:	2b07      	cmp	r3, #7
 8028894:	dc0a      	bgt.n	80288ac <__gethex+0x14c>
 8028896:	9801      	ldr	r0, [sp, #4]
 8028898:	f000 fa46 	bl	8028d28 <_Balloc>
 802889c:	4604      	mov	r4, r0
 802889e:	b940      	cbnz	r0, 80288b2 <__gethex+0x152>
 80288a0:	4b5c      	ldr	r3, [pc, #368]	@ (8028a14 <__gethex+0x2b4>)
 80288a2:	4602      	mov	r2, r0
 80288a4:	21e4      	movs	r1, #228	@ 0xe4
 80288a6:	485c      	ldr	r0, [pc, #368]	@ (8028a18 <__gethex+0x2b8>)
 80288a8:	f7fd f89e 	bl	80259e8 <__assert_func>
 80288ac:	3101      	adds	r1, #1
 80288ae:	105b      	asrs	r3, r3, #1
 80288b0:	e7ef      	b.n	8028892 <__gethex+0x132>
 80288b2:	f100 0a14 	add.w	sl, r0, #20
 80288b6:	2300      	movs	r3, #0
 80288b8:	4655      	mov	r5, sl
 80288ba:	469b      	mov	fp, r3
 80288bc:	45b1      	cmp	r9, r6
 80288be:	d337      	bcc.n	8028930 <__gethex+0x1d0>
 80288c0:	f845 bb04 	str.w	fp, [r5], #4
 80288c4:	eba5 050a 	sub.w	r5, r5, sl
 80288c8:	10ad      	asrs	r5, r5, #2
 80288ca:	6125      	str	r5, [r4, #16]
 80288cc:	4658      	mov	r0, fp
 80288ce:	f000 fb1d 	bl	8028f0c <__hi0bits>
 80288d2:	016d      	lsls	r5, r5, #5
 80288d4:	f8d8 6000 	ldr.w	r6, [r8]
 80288d8:	1a2d      	subs	r5, r5, r0
 80288da:	42b5      	cmp	r5, r6
 80288dc:	dd54      	ble.n	8028988 <__gethex+0x228>
 80288de:	1bad      	subs	r5, r5, r6
 80288e0:	4629      	mov	r1, r5
 80288e2:	4620      	mov	r0, r4
 80288e4:	f000 fea6 	bl	8029634 <__any_on>
 80288e8:	4681      	mov	r9, r0
 80288ea:	b178      	cbz	r0, 802890c <__gethex+0x1ac>
 80288ec:	1e6b      	subs	r3, r5, #1
 80288ee:	1159      	asrs	r1, r3, #5
 80288f0:	f003 021f 	and.w	r2, r3, #31
 80288f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80288f8:	f04f 0901 	mov.w	r9, #1
 80288fc:	fa09 f202 	lsl.w	r2, r9, r2
 8028900:	420a      	tst	r2, r1
 8028902:	d003      	beq.n	802890c <__gethex+0x1ac>
 8028904:	454b      	cmp	r3, r9
 8028906:	dc36      	bgt.n	8028976 <__gethex+0x216>
 8028908:	f04f 0902 	mov.w	r9, #2
 802890c:	4629      	mov	r1, r5
 802890e:	4620      	mov	r0, r4
 8028910:	f7ff febe 	bl	8028690 <rshift>
 8028914:	442f      	add	r7, r5
 8028916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802891a:	42bb      	cmp	r3, r7
 802891c:	da42      	bge.n	80289a4 <__gethex+0x244>
 802891e:	9801      	ldr	r0, [sp, #4]
 8028920:	4621      	mov	r1, r4
 8028922:	f000 fa41 	bl	8028da8 <_Bfree>
 8028926:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028928:	2300      	movs	r3, #0
 802892a:	6013      	str	r3, [r2, #0]
 802892c:	25a3      	movs	r5, #163	@ 0xa3
 802892e:	e793      	b.n	8028858 <__gethex+0xf8>
 8028930:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8028934:	2a2e      	cmp	r2, #46	@ 0x2e
 8028936:	d012      	beq.n	802895e <__gethex+0x1fe>
 8028938:	2b20      	cmp	r3, #32
 802893a:	d104      	bne.n	8028946 <__gethex+0x1e6>
 802893c:	f845 bb04 	str.w	fp, [r5], #4
 8028940:	f04f 0b00 	mov.w	fp, #0
 8028944:	465b      	mov	r3, fp
 8028946:	7830      	ldrb	r0, [r6, #0]
 8028948:	9303      	str	r3, [sp, #12]
 802894a:	f7ff fef3 	bl	8028734 <__hexdig_fun>
 802894e:	9b03      	ldr	r3, [sp, #12]
 8028950:	f000 000f 	and.w	r0, r0, #15
 8028954:	4098      	lsls	r0, r3
 8028956:	ea4b 0b00 	orr.w	fp, fp, r0
 802895a:	3304      	adds	r3, #4
 802895c:	e7ae      	b.n	80288bc <__gethex+0x15c>
 802895e:	45b1      	cmp	r9, r6
 8028960:	d8ea      	bhi.n	8028938 <__gethex+0x1d8>
 8028962:	492b      	ldr	r1, [pc, #172]	@ (8028a10 <__gethex+0x2b0>)
 8028964:	9303      	str	r3, [sp, #12]
 8028966:	2201      	movs	r2, #1
 8028968:	4630      	mov	r0, r6
 802896a:	f7fe ff26 	bl	80277ba <strncmp>
 802896e:	9b03      	ldr	r3, [sp, #12]
 8028970:	2800      	cmp	r0, #0
 8028972:	d1e1      	bne.n	8028938 <__gethex+0x1d8>
 8028974:	e7a2      	b.n	80288bc <__gethex+0x15c>
 8028976:	1ea9      	subs	r1, r5, #2
 8028978:	4620      	mov	r0, r4
 802897a:	f000 fe5b 	bl	8029634 <__any_on>
 802897e:	2800      	cmp	r0, #0
 8028980:	d0c2      	beq.n	8028908 <__gethex+0x1a8>
 8028982:	f04f 0903 	mov.w	r9, #3
 8028986:	e7c1      	b.n	802890c <__gethex+0x1ac>
 8028988:	da09      	bge.n	802899e <__gethex+0x23e>
 802898a:	1b75      	subs	r5, r6, r5
 802898c:	4621      	mov	r1, r4
 802898e:	9801      	ldr	r0, [sp, #4]
 8028990:	462a      	mov	r2, r5
 8028992:	f000 fc19 	bl	80291c8 <__lshift>
 8028996:	1b7f      	subs	r7, r7, r5
 8028998:	4604      	mov	r4, r0
 802899a:	f100 0a14 	add.w	sl, r0, #20
 802899e:	f04f 0900 	mov.w	r9, #0
 80289a2:	e7b8      	b.n	8028916 <__gethex+0x1b6>
 80289a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80289a8:	42bd      	cmp	r5, r7
 80289aa:	dd6f      	ble.n	8028a8c <__gethex+0x32c>
 80289ac:	1bed      	subs	r5, r5, r7
 80289ae:	42ae      	cmp	r6, r5
 80289b0:	dc34      	bgt.n	8028a1c <__gethex+0x2bc>
 80289b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80289b6:	2b02      	cmp	r3, #2
 80289b8:	d022      	beq.n	8028a00 <__gethex+0x2a0>
 80289ba:	2b03      	cmp	r3, #3
 80289bc:	d024      	beq.n	8028a08 <__gethex+0x2a8>
 80289be:	2b01      	cmp	r3, #1
 80289c0:	d115      	bne.n	80289ee <__gethex+0x28e>
 80289c2:	42ae      	cmp	r6, r5
 80289c4:	d113      	bne.n	80289ee <__gethex+0x28e>
 80289c6:	2e01      	cmp	r6, #1
 80289c8:	d10b      	bne.n	80289e2 <__gethex+0x282>
 80289ca:	9a02      	ldr	r2, [sp, #8]
 80289cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80289d0:	6013      	str	r3, [r2, #0]
 80289d2:	2301      	movs	r3, #1
 80289d4:	6123      	str	r3, [r4, #16]
 80289d6:	f8ca 3000 	str.w	r3, [sl]
 80289da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80289dc:	2562      	movs	r5, #98	@ 0x62
 80289de:	601c      	str	r4, [r3, #0]
 80289e0:	e73a      	b.n	8028858 <__gethex+0xf8>
 80289e2:	1e71      	subs	r1, r6, #1
 80289e4:	4620      	mov	r0, r4
 80289e6:	f000 fe25 	bl	8029634 <__any_on>
 80289ea:	2800      	cmp	r0, #0
 80289ec:	d1ed      	bne.n	80289ca <__gethex+0x26a>
 80289ee:	9801      	ldr	r0, [sp, #4]
 80289f0:	4621      	mov	r1, r4
 80289f2:	f000 f9d9 	bl	8028da8 <_Bfree>
 80289f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80289f8:	2300      	movs	r3, #0
 80289fa:	6013      	str	r3, [r2, #0]
 80289fc:	2550      	movs	r5, #80	@ 0x50
 80289fe:	e72b      	b.n	8028858 <__gethex+0xf8>
 8028a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a02:	2b00      	cmp	r3, #0
 8028a04:	d1f3      	bne.n	80289ee <__gethex+0x28e>
 8028a06:	e7e0      	b.n	80289ca <__gethex+0x26a>
 8028a08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a0a:	2b00      	cmp	r3, #0
 8028a0c:	d1dd      	bne.n	80289ca <__gethex+0x26a>
 8028a0e:	e7ee      	b.n	80289ee <__gethex+0x28e>
 8028a10:	0803b135 	.word	0x0803b135
 8028a14:	0803b1d8 	.word	0x0803b1d8
 8028a18:	0803b1e9 	.word	0x0803b1e9
 8028a1c:	1e6f      	subs	r7, r5, #1
 8028a1e:	f1b9 0f00 	cmp.w	r9, #0
 8028a22:	d130      	bne.n	8028a86 <__gethex+0x326>
 8028a24:	b127      	cbz	r7, 8028a30 <__gethex+0x2d0>
 8028a26:	4639      	mov	r1, r7
 8028a28:	4620      	mov	r0, r4
 8028a2a:	f000 fe03 	bl	8029634 <__any_on>
 8028a2e:	4681      	mov	r9, r0
 8028a30:	117a      	asrs	r2, r7, #5
 8028a32:	2301      	movs	r3, #1
 8028a34:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028a38:	f007 071f 	and.w	r7, r7, #31
 8028a3c:	40bb      	lsls	r3, r7
 8028a3e:	4213      	tst	r3, r2
 8028a40:	4629      	mov	r1, r5
 8028a42:	4620      	mov	r0, r4
 8028a44:	bf18      	it	ne
 8028a46:	f049 0902 	orrne.w	r9, r9, #2
 8028a4a:	f7ff fe21 	bl	8028690 <rshift>
 8028a4e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8028a52:	1b76      	subs	r6, r6, r5
 8028a54:	2502      	movs	r5, #2
 8028a56:	f1b9 0f00 	cmp.w	r9, #0
 8028a5a:	d047      	beq.n	8028aec <__gethex+0x38c>
 8028a5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028a60:	2b02      	cmp	r3, #2
 8028a62:	d015      	beq.n	8028a90 <__gethex+0x330>
 8028a64:	2b03      	cmp	r3, #3
 8028a66:	d017      	beq.n	8028a98 <__gethex+0x338>
 8028a68:	2b01      	cmp	r3, #1
 8028a6a:	d109      	bne.n	8028a80 <__gethex+0x320>
 8028a6c:	f019 0f02 	tst.w	r9, #2
 8028a70:	d006      	beq.n	8028a80 <__gethex+0x320>
 8028a72:	f8da 3000 	ldr.w	r3, [sl]
 8028a76:	ea49 0903 	orr.w	r9, r9, r3
 8028a7a:	f019 0f01 	tst.w	r9, #1
 8028a7e:	d10e      	bne.n	8028a9e <__gethex+0x33e>
 8028a80:	f045 0510 	orr.w	r5, r5, #16
 8028a84:	e032      	b.n	8028aec <__gethex+0x38c>
 8028a86:	f04f 0901 	mov.w	r9, #1
 8028a8a:	e7d1      	b.n	8028a30 <__gethex+0x2d0>
 8028a8c:	2501      	movs	r5, #1
 8028a8e:	e7e2      	b.n	8028a56 <__gethex+0x2f6>
 8028a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a92:	f1c3 0301 	rsb	r3, r3, #1
 8028a96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a9a:	2b00      	cmp	r3, #0
 8028a9c:	d0f0      	beq.n	8028a80 <__gethex+0x320>
 8028a9e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8028aa2:	f104 0314 	add.w	r3, r4, #20
 8028aa6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8028aaa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8028aae:	f04f 0c00 	mov.w	ip, #0
 8028ab2:	4618      	mov	r0, r3
 8028ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8028ab8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8028abc:	d01b      	beq.n	8028af6 <__gethex+0x396>
 8028abe:	3201      	adds	r2, #1
 8028ac0:	6002      	str	r2, [r0, #0]
 8028ac2:	2d02      	cmp	r5, #2
 8028ac4:	f104 0314 	add.w	r3, r4, #20
 8028ac8:	d13c      	bne.n	8028b44 <__gethex+0x3e4>
 8028aca:	f8d8 2000 	ldr.w	r2, [r8]
 8028ace:	3a01      	subs	r2, #1
 8028ad0:	42b2      	cmp	r2, r6
 8028ad2:	d109      	bne.n	8028ae8 <__gethex+0x388>
 8028ad4:	1171      	asrs	r1, r6, #5
 8028ad6:	2201      	movs	r2, #1
 8028ad8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8028adc:	f006 061f 	and.w	r6, r6, #31
 8028ae0:	fa02 f606 	lsl.w	r6, r2, r6
 8028ae4:	421e      	tst	r6, r3
 8028ae6:	d13a      	bne.n	8028b5e <__gethex+0x3fe>
 8028ae8:	f045 0520 	orr.w	r5, r5, #32
 8028aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028aee:	601c      	str	r4, [r3, #0]
 8028af0:	9b02      	ldr	r3, [sp, #8]
 8028af2:	601f      	str	r7, [r3, #0]
 8028af4:	e6b0      	b.n	8028858 <__gethex+0xf8>
 8028af6:	4299      	cmp	r1, r3
 8028af8:	f843 cc04 	str.w	ip, [r3, #-4]
 8028afc:	d8d9      	bhi.n	8028ab2 <__gethex+0x352>
 8028afe:	68a3      	ldr	r3, [r4, #8]
 8028b00:	459b      	cmp	fp, r3
 8028b02:	db17      	blt.n	8028b34 <__gethex+0x3d4>
 8028b04:	6861      	ldr	r1, [r4, #4]
 8028b06:	9801      	ldr	r0, [sp, #4]
 8028b08:	3101      	adds	r1, #1
 8028b0a:	f000 f90d 	bl	8028d28 <_Balloc>
 8028b0e:	4681      	mov	r9, r0
 8028b10:	b918      	cbnz	r0, 8028b1a <__gethex+0x3ba>
 8028b12:	4b1a      	ldr	r3, [pc, #104]	@ (8028b7c <__gethex+0x41c>)
 8028b14:	4602      	mov	r2, r0
 8028b16:	2184      	movs	r1, #132	@ 0x84
 8028b18:	e6c5      	b.n	80288a6 <__gethex+0x146>
 8028b1a:	6922      	ldr	r2, [r4, #16]
 8028b1c:	3202      	adds	r2, #2
 8028b1e:	f104 010c 	add.w	r1, r4, #12
 8028b22:	0092      	lsls	r2, r2, #2
 8028b24:	300c      	adds	r0, #12
 8028b26:	f7fe ff6c 	bl	8027a02 <memcpy>
 8028b2a:	4621      	mov	r1, r4
 8028b2c:	9801      	ldr	r0, [sp, #4]
 8028b2e:	f000 f93b 	bl	8028da8 <_Bfree>
 8028b32:	464c      	mov	r4, r9
 8028b34:	6923      	ldr	r3, [r4, #16]
 8028b36:	1c5a      	adds	r2, r3, #1
 8028b38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8028b3c:	6122      	str	r2, [r4, #16]
 8028b3e:	2201      	movs	r2, #1
 8028b40:	615a      	str	r2, [r3, #20]
 8028b42:	e7be      	b.n	8028ac2 <__gethex+0x362>
 8028b44:	6922      	ldr	r2, [r4, #16]
 8028b46:	455a      	cmp	r2, fp
 8028b48:	dd0b      	ble.n	8028b62 <__gethex+0x402>
 8028b4a:	2101      	movs	r1, #1
 8028b4c:	4620      	mov	r0, r4
 8028b4e:	f7ff fd9f 	bl	8028690 <rshift>
 8028b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028b56:	3701      	adds	r7, #1
 8028b58:	42bb      	cmp	r3, r7
 8028b5a:	f6ff aee0 	blt.w	802891e <__gethex+0x1be>
 8028b5e:	2501      	movs	r5, #1
 8028b60:	e7c2      	b.n	8028ae8 <__gethex+0x388>
 8028b62:	f016 061f 	ands.w	r6, r6, #31
 8028b66:	d0fa      	beq.n	8028b5e <__gethex+0x3fe>
 8028b68:	4453      	add	r3, sl
 8028b6a:	f1c6 0620 	rsb	r6, r6, #32
 8028b6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8028b72:	f000 f9cb 	bl	8028f0c <__hi0bits>
 8028b76:	42b0      	cmp	r0, r6
 8028b78:	dbe7      	blt.n	8028b4a <__gethex+0x3ea>
 8028b7a:	e7f0      	b.n	8028b5e <__gethex+0x3fe>
 8028b7c:	0803b1d8 	.word	0x0803b1d8

08028b80 <L_shift>:
 8028b80:	f1c2 0208 	rsb	r2, r2, #8
 8028b84:	0092      	lsls	r2, r2, #2
 8028b86:	b570      	push	{r4, r5, r6, lr}
 8028b88:	f1c2 0620 	rsb	r6, r2, #32
 8028b8c:	6843      	ldr	r3, [r0, #4]
 8028b8e:	6804      	ldr	r4, [r0, #0]
 8028b90:	fa03 f506 	lsl.w	r5, r3, r6
 8028b94:	432c      	orrs	r4, r5
 8028b96:	40d3      	lsrs	r3, r2
 8028b98:	6004      	str	r4, [r0, #0]
 8028b9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8028b9e:	4288      	cmp	r0, r1
 8028ba0:	d3f4      	bcc.n	8028b8c <L_shift+0xc>
 8028ba2:	bd70      	pop	{r4, r5, r6, pc}

08028ba4 <__match>:
 8028ba4:	b530      	push	{r4, r5, lr}
 8028ba6:	6803      	ldr	r3, [r0, #0]
 8028ba8:	3301      	adds	r3, #1
 8028baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028bae:	b914      	cbnz	r4, 8028bb6 <__match+0x12>
 8028bb0:	6003      	str	r3, [r0, #0]
 8028bb2:	2001      	movs	r0, #1
 8028bb4:	bd30      	pop	{r4, r5, pc}
 8028bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028bba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8028bbe:	2d19      	cmp	r5, #25
 8028bc0:	bf98      	it	ls
 8028bc2:	3220      	addls	r2, #32
 8028bc4:	42a2      	cmp	r2, r4
 8028bc6:	d0f0      	beq.n	8028baa <__match+0x6>
 8028bc8:	2000      	movs	r0, #0
 8028bca:	e7f3      	b.n	8028bb4 <__match+0x10>

08028bcc <__hexnan>:
 8028bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bd0:	680b      	ldr	r3, [r1, #0]
 8028bd2:	6801      	ldr	r1, [r0, #0]
 8028bd4:	115e      	asrs	r6, r3, #5
 8028bd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8028bda:	f013 031f 	ands.w	r3, r3, #31
 8028bde:	b087      	sub	sp, #28
 8028be0:	bf18      	it	ne
 8028be2:	3604      	addne	r6, #4
 8028be4:	2500      	movs	r5, #0
 8028be6:	1f37      	subs	r7, r6, #4
 8028be8:	4682      	mov	sl, r0
 8028bea:	4690      	mov	r8, r2
 8028bec:	9301      	str	r3, [sp, #4]
 8028bee:	f846 5c04 	str.w	r5, [r6, #-4]
 8028bf2:	46b9      	mov	r9, r7
 8028bf4:	463c      	mov	r4, r7
 8028bf6:	9502      	str	r5, [sp, #8]
 8028bf8:	46ab      	mov	fp, r5
 8028bfa:	784a      	ldrb	r2, [r1, #1]
 8028bfc:	1c4b      	adds	r3, r1, #1
 8028bfe:	9303      	str	r3, [sp, #12]
 8028c00:	b342      	cbz	r2, 8028c54 <__hexnan+0x88>
 8028c02:	4610      	mov	r0, r2
 8028c04:	9105      	str	r1, [sp, #20]
 8028c06:	9204      	str	r2, [sp, #16]
 8028c08:	f7ff fd94 	bl	8028734 <__hexdig_fun>
 8028c0c:	2800      	cmp	r0, #0
 8028c0e:	d151      	bne.n	8028cb4 <__hexnan+0xe8>
 8028c10:	9a04      	ldr	r2, [sp, #16]
 8028c12:	9905      	ldr	r1, [sp, #20]
 8028c14:	2a20      	cmp	r2, #32
 8028c16:	d818      	bhi.n	8028c4a <__hexnan+0x7e>
 8028c18:	9b02      	ldr	r3, [sp, #8]
 8028c1a:	459b      	cmp	fp, r3
 8028c1c:	dd13      	ble.n	8028c46 <__hexnan+0x7a>
 8028c1e:	454c      	cmp	r4, r9
 8028c20:	d206      	bcs.n	8028c30 <__hexnan+0x64>
 8028c22:	2d07      	cmp	r5, #7
 8028c24:	dc04      	bgt.n	8028c30 <__hexnan+0x64>
 8028c26:	462a      	mov	r2, r5
 8028c28:	4649      	mov	r1, r9
 8028c2a:	4620      	mov	r0, r4
 8028c2c:	f7ff ffa8 	bl	8028b80 <L_shift>
 8028c30:	4544      	cmp	r4, r8
 8028c32:	d952      	bls.n	8028cda <__hexnan+0x10e>
 8028c34:	2300      	movs	r3, #0
 8028c36:	f1a4 0904 	sub.w	r9, r4, #4
 8028c3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8028c3e:	f8cd b008 	str.w	fp, [sp, #8]
 8028c42:	464c      	mov	r4, r9
 8028c44:	461d      	mov	r5, r3
 8028c46:	9903      	ldr	r1, [sp, #12]
 8028c48:	e7d7      	b.n	8028bfa <__hexnan+0x2e>
 8028c4a:	2a29      	cmp	r2, #41	@ 0x29
 8028c4c:	d157      	bne.n	8028cfe <__hexnan+0x132>
 8028c4e:	3102      	adds	r1, #2
 8028c50:	f8ca 1000 	str.w	r1, [sl]
 8028c54:	f1bb 0f00 	cmp.w	fp, #0
 8028c58:	d051      	beq.n	8028cfe <__hexnan+0x132>
 8028c5a:	454c      	cmp	r4, r9
 8028c5c:	d206      	bcs.n	8028c6c <__hexnan+0xa0>
 8028c5e:	2d07      	cmp	r5, #7
 8028c60:	dc04      	bgt.n	8028c6c <__hexnan+0xa0>
 8028c62:	462a      	mov	r2, r5
 8028c64:	4649      	mov	r1, r9
 8028c66:	4620      	mov	r0, r4
 8028c68:	f7ff ff8a 	bl	8028b80 <L_shift>
 8028c6c:	4544      	cmp	r4, r8
 8028c6e:	d936      	bls.n	8028cde <__hexnan+0x112>
 8028c70:	f1a8 0204 	sub.w	r2, r8, #4
 8028c74:	4623      	mov	r3, r4
 8028c76:	f853 1b04 	ldr.w	r1, [r3], #4
 8028c7a:	f842 1f04 	str.w	r1, [r2, #4]!
 8028c7e:	429f      	cmp	r7, r3
 8028c80:	d2f9      	bcs.n	8028c76 <__hexnan+0xaa>
 8028c82:	1b3b      	subs	r3, r7, r4
 8028c84:	f023 0303 	bic.w	r3, r3, #3
 8028c88:	3304      	adds	r3, #4
 8028c8a:	3401      	adds	r4, #1
 8028c8c:	3e03      	subs	r6, #3
 8028c8e:	42b4      	cmp	r4, r6
 8028c90:	bf88      	it	hi
 8028c92:	2304      	movhi	r3, #4
 8028c94:	4443      	add	r3, r8
 8028c96:	2200      	movs	r2, #0
 8028c98:	f843 2b04 	str.w	r2, [r3], #4
 8028c9c:	429f      	cmp	r7, r3
 8028c9e:	d2fb      	bcs.n	8028c98 <__hexnan+0xcc>
 8028ca0:	683b      	ldr	r3, [r7, #0]
 8028ca2:	b91b      	cbnz	r3, 8028cac <__hexnan+0xe0>
 8028ca4:	4547      	cmp	r7, r8
 8028ca6:	d128      	bne.n	8028cfa <__hexnan+0x12e>
 8028ca8:	2301      	movs	r3, #1
 8028caa:	603b      	str	r3, [r7, #0]
 8028cac:	2005      	movs	r0, #5
 8028cae:	b007      	add	sp, #28
 8028cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cb4:	3501      	adds	r5, #1
 8028cb6:	2d08      	cmp	r5, #8
 8028cb8:	f10b 0b01 	add.w	fp, fp, #1
 8028cbc:	dd06      	ble.n	8028ccc <__hexnan+0x100>
 8028cbe:	4544      	cmp	r4, r8
 8028cc0:	d9c1      	bls.n	8028c46 <__hexnan+0x7a>
 8028cc2:	2300      	movs	r3, #0
 8028cc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8028cc8:	2501      	movs	r5, #1
 8028cca:	3c04      	subs	r4, #4
 8028ccc:	6822      	ldr	r2, [r4, #0]
 8028cce:	f000 000f 	and.w	r0, r0, #15
 8028cd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8028cd6:	6020      	str	r0, [r4, #0]
 8028cd8:	e7b5      	b.n	8028c46 <__hexnan+0x7a>
 8028cda:	2508      	movs	r5, #8
 8028cdc:	e7b3      	b.n	8028c46 <__hexnan+0x7a>
 8028cde:	9b01      	ldr	r3, [sp, #4]
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d0dd      	beq.n	8028ca0 <__hexnan+0xd4>
 8028ce4:	f1c3 0320 	rsb	r3, r3, #32
 8028ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8028cec:	40da      	lsrs	r2, r3
 8028cee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8028cf2:	4013      	ands	r3, r2
 8028cf4:	f846 3c04 	str.w	r3, [r6, #-4]
 8028cf8:	e7d2      	b.n	8028ca0 <__hexnan+0xd4>
 8028cfa:	3f04      	subs	r7, #4
 8028cfc:	e7d0      	b.n	8028ca0 <__hexnan+0xd4>
 8028cfe:	2004      	movs	r0, #4
 8028d00:	e7d5      	b.n	8028cae <__hexnan+0xe2>

08028d02 <__ascii_mbtowc>:
 8028d02:	b082      	sub	sp, #8
 8028d04:	b901      	cbnz	r1, 8028d08 <__ascii_mbtowc+0x6>
 8028d06:	a901      	add	r1, sp, #4
 8028d08:	b142      	cbz	r2, 8028d1c <__ascii_mbtowc+0x1a>
 8028d0a:	b14b      	cbz	r3, 8028d20 <__ascii_mbtowc+0x1e>
 8028d0c:	7813      	ldrb	r3, [r2, #0]
 8028d0e:	600b      	str	r3, [r1, #0]
 8028d10:	7812      	ldrb	r2, [r2, #0]
 8028d12:	1e10      	subs	r0, r2, #0
 8028d14:	bf18      	it	ne
 8028d16:	2001      	movne	r0, #1
 8028d18:	b002      	add	sp, #8
 8028d1a:	4770      	bx	lr
 8028d1c:	4610      	mov	r0, r2
 8028d1e:	e7fb      	b.n	8028d18 <__ascii_mbtowc+0x16>
 8028d20:	f06f 0001 	mvn.w	r0, #1
 8028d24:	e7f8      	b.n	8028d18 <__ascii_mbtowc+0x16>
	...

08028d28 <_Balloc>:
 8028d28:	b570      	push	{r4, r5, r6, lr}
 8028d2a:	69c6      	ldr	r6, [r0, #28]
 8028d2c:	4604      	mov	r4, r0
 8028d2e:	460d      	mov	r5, r1
 8028d30:	b976      	cbnz	r6, 8028d50 <_Balloc+0x28>
 8028d32:	2010      	movs	r0, #16
 8028d34:	f7fc fe9a 	bl	8025a6c <malloc>
 8028d38:	4602      	mov	r2, r0
 8028d3a:	61e0      	str	r0, [r4, #28]
 8028d3c:	b920      	cbnz	r0, 8028d48 <_Balloc+0x20>
 8028d3e:	4b18      	ldr	r3, [pc, #96]	@ (8028da0 <_Balloc+0x78>)
 8028d40:	4818      	ldr	r0, [pc, #96]	@ (8028da4 <_Balloc+0x7c>)
 8028d42:	216b      	movs	r1, #107	@ 0x6b
 8028d44:	f7fc fe50 	bl	80259e8 <__assert_func>
 8028d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028d4c:	6006      	str	r6, [r0, #0]
 8028d4e:	60c6      	str	r6, [r0, #12]
 8028d50:	69e6      	ldr	r6, [r4, #28]
 8028d52:	68f3      	ldr	r3, [r6, #12]
 8028d54:	b183      	cbz	r3, 8028d78 <_Balloc+0x50>
 8028d56:	69e3      	ldr	r3, [r4, #28]
 8028d58:	68db      	ldr	r3, [r3, #12]
 8028d5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8028d5e:	b9b8      	cbnz	r0, 8028d90 <_Balloc+0x68>
 8028d60:	2101      	movs	r1, #1
 8028d62:	fa01 f605 	lsl.w	r6, r1, r5
 8028d66:	1d72      	adds	r2, r6, #5
 8028d68:	0092      	lsls	r2, r2, #2
 8028d6a:	4620      	mov	r0, r4
 8028d6c:	f7fc fe6a 	bl	8025a44 <_calloc_r>
 8028d70:	b160      	cbz	r0, 8028d8c <_Balloc+0x64>
 8028d72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8028d76:	e00e      	b.n	8028d96 <_Balloc+0x6e>
 8028d78:	2221      	movs	r2, #33	@ 0x21
 8028d7a:	2104      	movs	r1, #4
 8028d7c:	4620      	mov	r0, r4
 8028d7e:	f7fc fe61 	bl	8025a44 <_calloc_r>
 8028d82:	69e3      	ldr	r3, [r4, #28]
 8028d84:	60f0      	str	r0, [r6, #12]
 8028d86:	68db      	ldr	r3, [r3, #12]
 8028d88:	2b00      	cmp	r3, #0
 8028d8a:	d1e4      	bne.n	8028d56 <_Balloc+0x2e>
 8028d8c:	2000      	movs	r0, #0
 8028d8e:	bd70      	pop	{r4, r5, r6, pc}
 8028d90:	6802      	ldr	r2, [r0, #0]
 8028d92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8028d96:	2300      	movs	r3, #0
 8028d98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028d9c:	e7f7      	b.n	8028d8e <_Balloc+0x66>
 8028d9e:	bf00      	nop
 8028da0:	0803b0c6 	.word	0x0803b0c6
 8028da4:	0803b249 	.word	0x0803b249

08028da8 <_Bfree>:
 8028da8:	b570      	push	{r4, r5, r6, lr}
 8028daa:	69c6      	ldr	r6, [r0, #28]
 8028dac:	4605      	mov	r5, r0
 8028dae:	460c      	mov	r4, r1
 8028db0:	b976      	cbnz	r6, 8028dd0 <_Bfree+0x28>
 8028db2:	2010      	movs	r0, #16
 8028db4:	f7fc fe5a 	bl	8025a6c <malloc>
 8028db8:	4602      	mov	r2, r0
 8028dba:	61e8      	str	r0, [r5, #28]
 8028dbc:	b920      	cbnz	r0, 8028dc8 <_Bfree+0x20>
 8028dbe:	4b09      	ldr	r3, [pc, #36]	@ (8028de4 <_Bfree+0x3c>)
 8028dc0:	4809      	ldr	r0, [pc, #36]	@ (8028de8 <_Bfree+0x40>)
 8028dc2:	218f      	movs	r1, #143	@ 0x8f
 8028dc4:	f7fc fe10 	bl	80259e8 <__assert_func>
 8028dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028dcc:	6006      	str	r6, [r0, #0]
 8028dce:	60c6      	str	r6, [r0, #12]
 8028dd0:	b13c      	cbz	r4, 8028de2 <_Bfree+0x3a>
 8028dd2:	69eb      	ldr	r3, [r5, #28]
 8028dd4:	6862      	ldr	r2, [r4, #4]
 8028dd6:	68db      	ldr	r3, [r3, #12]
 8028dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028ddc:	6021      	str	r1, [r4, #0]
 8028dde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8028de2:	bd70      	pop	{r4, r5, r6, pc}
 8028de4:	0803b0c6 	.word	0x0803b0c6
 8028de8:	0803b249 	.word	0x0803b249

08028dec <__multadd>:
 8028dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028df0:	690d      	ldr	r5, [r1, #16]
 8028df2:	4607      	mov	r7, r0
 8028df4:	460c      	mov	r4, r1
 8028df6:	461e      	mov	r6, r3
 8028df8:	f101 0c14 	add.w	ip, r1, #20
 8028dfc:	2000      	movs	r0, #0
 8028dfe:	f8dc 3000 	ldr.w	r3, [ip]
 8028e02:	b299      	uxth	r1, r3
 8028e04:	fb02 6101 	mla	r1, r2, r1, r6
 8028e08:	0c1e      	lsrs	r6, r3, #16
 8028e0a:	0c0b      	lsrs	r3, r1, #16
 8028e0c:	fb02 3306 	mla	r3, r2, r6, r3
 8028e10:	b289      	uxth	r1, r1
 8028e12:	3001      	adds	r0, #1
 8028e14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028e18:	4285      	cmp	r5, r0
 8028e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8028e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8028e22:	dcec      	bgt.n	8028dfe <__multadd+0x12>
 8028e24:	b30e      	cbz	r6, 8028e6a <__multadd+0x7e>
 8028e26:	68a3      	ldr	r3, [r4, #8]
 8028e28:	42ab      	cmp	r3, r5
 8028e2a:	dc19      	bgt.n	8028e60 <__multadd+0x74>
 8028e2c:	6861      	ldr	r1, [r4, #4]
 8028e2e:	4638      	mov	r0, r7
 8028e30:	3101      	adds	r1, #1
 8028e32:	f7ff ff79 	bl	8028d28 <_Balloc>
 8028e36:	4680      	mov	r8, r0
 8028e38:	b928      	cbnz	r0, 8028e46 <__multadd+0x5a>
 8028e3a:	4602      	mov	r2, r0
 8028e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8028e70 <__multadd+0x84>)
 8028e3e:	480d      	ldr	r0, [pc, #52]	@ (8028e74 <__multadd+0x88>)
 8028e40:	21ba      	movs	r1, #186	@ 0xba
 8028e42:	f7fc fdd1 	bl	80259e8 <__assert_func>
 8028e46:	6922      	ldr	r2, [r4, #16]
 8028e48:	3202      	adds	r2, #2
 8028e4a:	f104 010c 	add.w	r1, r4, #12
 8028e4e:	0092      	lsls	r2, r2, #2
 8028e50:	300c      	adds	r0, #12
 8028e52:	f7fe fdd6 	bl	8027a02 <memcpy>
 8028e56:	4621      	mov	r1, r4
 8028e58:	4638      	mov	r0, r7
 8028e5a:	f7ff ffa5 	bl	8028da8 <_Bfree>
 8028e5e:	4644      	mov	r4, r8
 8028e60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8028e64:	3501      	adds	r5, #1
 8028e66:	615e      	str	r6, [r3, #20]
 8028e68:	6125      	str	r5, [r4, #16]
 8028e6a:	4620      	mov	r0, r4
 8028e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e70:	0803b1d8 	.word	0x0803b1d8
 8028e74:	0803b249 	.word	0x0803b249

08028e78 <__s2b>:
 8028e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028e7c:	460c      	mov	r4, r1
 8028e7e:	4615      	mov	r5, r2
 8028e80:	461f      	mov	r7, r3
 8028e82:	2209      	movs	r2, #9
 8028e84:	3308      	adds	r3, #8
 8028e86:	4606      	mov	r6, r0
 8028e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8028e8c:	2100      	movs	r1, #0
 8028e8e:	2201      	movs	r2, #1
 8028e90:	429a      	cmp	r2, r3
 8028e92:	db09      	blt.n	8028ea8 <__s2b+0x30>
 8028e94:	4630      	mov	r0, r6
 8028e96:	f7ff ff47 	bl	8028d28 <_Balloc>
 8028e9a:	b940      	cbnz	r0, 8028eae <__s2b+0x36>
 8028e9c:	4602      	mov	r2, r0
 8028e9e:	4b19      	ldr	r3, [pc, #100]	@ (8028f04 <__s2b+0x8c>)
 8028ea0:	4819      	ldr	r0, [pc, #100]	@ (8028f08 <__s2b+0x90>)
 8028ea2:	21d3      	movs	r1, #211	@ 0xd3
 8028ea4:	f7fc fda0 	bl	80259e8 <__assert_func>
 8028ea8:	0052      	lsls	r2, r2, #1
 8028eaa:	3101      	adds	r1, #1
 8028eac:	e7f0      	b.n	8028e90 <__s2b+0x18>
 8028eae:	9b08      	ldr	r3, [sp, #32]
 8028eb0:	6143      	str	r3, [r0, #20]
 8028eb2:	2d09      	cmp	r5, #9
 8028eb4:	f04f 0301 	mov.w	r3, #1
 8028eb8:	6103      	str	r3, [r0, #16]
 8028eba:	dd16      	ble.n	8028eea <__s2b+0x72>
 8028ebc:	f104 0909 	add.w	r9, r4, #9
 8028ec0:	46c8      	mov	r8, r9
 8028ec2:	442c      	add	r4, r5
 8028ec4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028ec8:	4601      	mov	r1, r0
 8028eca:	3b30      	subs	r3, #48	@ 0x30
 8028ecc:	220a      	movs	r2, #10
 8028ece:	4630      	mov	r0, r6
 8028ed0:	f7ff ff8c 	bl	8028dec <__multadd>
 8028ed4:	45a0      	cmp	r8, r4
 8028ed6:	d1f5      	bne.n	8028ec4 <__s2b+0x4c>
 8028ed8:	f1a5 0408 	sub.w	r4, r5, #8
 8028edc:	444c      	add	r4, r9
 8028ede:	1b2d      	subs	r5, r5, r4
 8028ee0:	1963      	adds	r3, r4, r5
 8028ee2:	42bb      	cmp	r3, r7
 8028ee4:	db04      	blt.n	8028ef0 <__s2b+0x78>
 8028ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028eea:	340a      	adds	r4, #10
 8028eec:	2509      	movs	r5, #9
 8028eee:	e7f6      	b.n	8028ede <__s2b+0x66>
 8028ef0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8028ef4:	4601      	mov	r1, r0
 8028ef6:	3b30      	subs	r3, #48	@ 0x30
 8028ef8:	220a      	movs	r2, #10
 8028efa:	4630      	mov	r0, r6
 8028efc:	f7ff ff76 	bl	8028dec <__multadd>
 8028f00:	e7ee      	b.n	8028ee0 <__s2b+0x68>
 8028f02:	bf00      	nop
 8028f04:	0803b1d8 	.word	0x0803b1d8
 8028f08:	0803b249 	.word	0x0803b249

08028f0c <__hi0bits>:
 8028f0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8028f10:	4603      	mov	r3, r0
 8028f12:	bf36      	itet	cc
 8028f14:	0403      	lslcc	r3, r0, #16
 8028f16:	2000      	movcs	r0, #0
 8028f18:	2010      	movcc	r0, #16
 8028f1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8028f1e:	bf3c      	itt	cc
 8028f20:	021b      	lslcc	r3, r3, #8
 8028f22:	3008      	addcc	r0, #8
 8028f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8028f28:	bf3c      	itt	cc
 8028f2a:	011b      	lslcc	r3, r3, #4
 8028f2c:	3004      	addcc	r0, #4
 8028f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8028f32:	bf3c      	itt	cc
 8028f34:	009b      	lslcc	r3, r3, #2
 8028f36:	3002      	addcc	r0, #2
 8028f38:	2b00      	cmp	r3, #0
 8028f3a:	db05      	blt.n	8028f48 <__hi0bits+0x3c>
 8028f3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8028f40:	f100 0001 	add.w	r0, r0, #1
 8028f44:	bf08      	it	eq
 8028f46:	2020      	moveq	r0, #32
 8028f48:	4770      	bx	lr

08028f4a <__lo0bits>:
 8028f4a:	6803      	ldr	r3, [r0, #0]
 8028f4c:	4602      	mov	r2, r0
 8028f4e:	f013 0007 	ands.w	r0, r3, #7
 8028f52:	d00b      	beq.n	8028f6c <__lo0bits+0x22>
 8028f54:	07d9      	lsls	r1, r3, #31
 8028f56:	d421      	bmi.n	8028f9c <__lo0bits+0x52>
 8028f58:	0798      	lsls	r0, r3, #30
 8028f5a:	bf49      	itett	mi
 8028f5c:	085b      	lsrmi	r3, r3, #1
 8028f5e:	089b      	lsrpl	r3, r3, #2
 8028f60:	2001      	movmi	r0, #1
 8028f62:	6013      	strmi	r3, [r2, #0]
 8028f64:	bf5c      	itt	pl
 8028f66:	6013      	strpl	r3, [r2, #0]
 8028f68:	2002      	movpl	r0, #2
 8028f6a:	4770      	bx	lr
 8028f6c:	b299      	uxth	r1, r3
 8028f6e:	b909      	cbnz	r1, 8028f74 <__lo0bits+0x2a>
 8028f70:	0c1b      	lsrs	r3, r3, #16
 8028f72:	2010      	movs	r0, #16
 8028f74:	b2d9      	uxtb	r1, r3
 8028f76:	b909      	cbnz	r1, 8028f7c <__lo0bits+0x32>
 8028f78:	3008      	adds	r0, #8
 8028f7a:	0a1b      	lsrs	r3, r3, #8
 8028f7c:	0719      	lsls	r1, r3, #28
 8028f7e:	bf04      	itt	eq
 8028f80:	091b      	lsreq	r3, r3, #4
 8028f82:	3004      	addeq	r0, #4
 8028f84:	0799      	lsls	r1, r3, #30
 8028f86:	bf04      	itt	eq
 8028f88:	089b      	lsreq	r3, r3, #2
 8028f8a:	3002      	addeq	r0, #2
 8028f8c:	07d9      	lsls	r1, r3, #31
 8028f8e:	d403      	bmi.n	8028f98 <__lo0bits+0x4e>
 8028f90:	085b      	lsrs	r3, r3, #1
 8028f92:	f100 0001 	add.w	r0, r0, #1
 8028f96:	d003      	beq.n	8028fa0 <__lo0bits+0x56>
 8028f98:	6013      	str	r3, [r2, #0]
 8028f9a:	4770      	bx	lr
 8028f9c:	2000      	movs	r0, #0
 8028f9e:	4770      	bx	lr
 8028fa0:	2020      	movs	r0, #32
 8028fa2:	4770      	bx	lr

08028fa4 <__i2b>:
 8028fa4:	b510      	push	{r4, lr}
 8028fa6:	460c      	mov	r4, r1
 8028fa8:	2101      	movs	r1, #1
 8028faa:	f7ff febd 	bl	8028d28 <_Balloc>
 8028fae:	4602      	mov	r2, r0
 8028fb0:	b928      	cbnz	r0, 8028fbe <__i2b+0x1a>
 8028fb2:	4b05      	ldr	r3, [pc, #20]	@ (8028fc8 <__i2b+0x24>)
 8028fb4:	4805      	ldr	r0, [pc, #20]	@ (8028fcc <__i2b+0x28>)
 8028fb6:	f240 1145 	movw	r1, #325	@ 0x145
 8028fba:	f7fc fd15 	bl	80259e8 <__assert_func>
 8028fbe:	2301      	movs	r3, #1
 8028fc0:	6144      	str	r4, [r0, #20]
 8028fc2:	6103      	str	r3, [r0, #16]
 8028fc4:	bd10      	pop	{r4, pc}
 8028fc6:	bf00      	nop
 8028fc8:	0803b1d8 	.word	0x0803b1d8
 8028fcc:	0803b249 	.word	0x0803b249

08028fd0 <__multiply>:
 8028fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fd4:	4617      	mov	r7, r2
 8028fd6:	690a      	ldr	r2, [r1, #16]
 8028fd8:	693b      	ldr	r3, [r7, #16]
 8028fda:	429a      	cmp	r2, r3
 8028fdc:	bfa8      	it	ge
 8028fde:	463b      	movge	r3, r7
 8028fe0:	4689      	mov	r9, r1
 8028fe2:	bfa4      	itt	ge
 8028fe4:	460f      	movge	r7, r1
 8028fe6:	4699      	movge	r9, r3
 8028fe8:	693d      	ldr	r5, [r7, #16]
 8028fea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8028fee:	68bb      	ldr	r3, [r7, #8]
 8028ff0:	6879      	ldr	r1, [r7, #4]
 8028ff2:	eb05 060a 	add.w	r6, r5, sl
 8028ff6:	42b3      	cmp	r3, r6
 8028ff8:	b085      	sub	sp, #20
 8028ffa:	bfb8      	it	lt
 8028ffc:	3101      	addlt	r1, #1
 8028ffe:	f7ff fe93 	bl	8028d28 <_Balloc>
 8029002:	b930      	cbnz	r0, 8029012 <__multiply+0x42>
 8029004:	4602      	mov	r2, r0
 8029006:	4b41      	ldr	r3, [pc, #260]	@ (802910c <__multiply+0x13c>)
 8029008:	4841      	ldr	r0, [pc, #260]	@ (8029110 <__multiply+0x140>)
 802900a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802900e:	f7fc fceb 	bl	80259e8 <__assert_func>
 8029012:	f100 0414 	add.w	r4, r0, #20
 8029016:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 802901a:	4623      	mov	r3, r4
 802901c:	2200      	movs	r2, #0
 802901e:	4573      	cmp	r3, lr
 8029020:	d320      	bcc.n	8029064 <__multiply+0x94>
 8029022:	f107 0814 	add.w	r8, r7, #20
 8029026:	f109 0114 	add.w	r1, r9, #20
 802902a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 802902e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8029032:	9302      	str	r3, [sp, #8]
 8029034:	1beb      	subs	r3, r5, r7
 8029036:	3b15      	subs	r3, #21
 8029038:	f023 0303 	bic.w	r3, r3, #3
 802903c:	3304      	adds	r3, #4
 802903e:	3715      	adds	r7, #21
 8029040:	42bd      	cmp	r5, r7
 8029042:	bf38      	it	cc
 8029044:	2304      	movcc	r3, #4
 8029046:	9301      	str	r3, [sp, #4]
 8029048:	9b02      	ldr	r3, [sp, #8]
 802904a:	9103      	str	r1, [sp, #12]
 802904c:	428b      	cmp	r3, r1
 802904e:	d80c      	bhi.n	802906a <__multiply+0x9a>
 8029050:	2e00      	cmp	r6, #0
 8029052:	dd03      	ble.n	802905c <__multiply+0x8c>
 8029054:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8029058:	2b00      	cmp	r3, #0
 802905a:	d055      	beq.n	8029108 <__multiply+0x138>
 802905c:	6106      	str	r6, [r0, #16]
 802905e:	b005      	add	sp, #20
 8029060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029064:	f843 2b04 	str.w	r2, [r3], #4
 8029068:	e7d9      	b.n	802901e <__multiply+0x4e>
 802906a:	f8b1 a000 	ldrh.w	sl, [r1]
 802906e:	f1ba 0f00 	cmp.w	sl, #0
 8029072:	d01f      	beq.n	80290b4 <__multiply+0xe4>
 8029074:	46c4      	mov	ip, r8
 8029076:	46a1      	mov	r9, r4
 8029078:	2700      	movs	r7, #0
 802907a:	f85c 2b04 	ldr.w	r2, [ip], #4
 802907e:	f8d9 3000 	ldr.w	r3, [r9]
 8029082:	fa1f fb82 	uxth.w	fp, r2
 8029086:	b29b      	uxth	r3, r3
 8029088:	fb0a 330b 	mla	r3, sl, fp, r3
 802908c:	443b      	add	r3, r7
 802908e:	f8d9 7000 	ldr.w	r7, [r9]
 8029092:	0c12      	lsrs	r2, r2, #16
 8029094:	0c3f      	lsrs	r7, r7, #16
 8029096:	fb0a 7202 	mla	r2, sl, r2, r7
 802909a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 802909e:	b29b      	uxth	r3, r3
 80290a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80290a4:	4565      	cmp	r5, ip
 80290a6:	f849 3b04 	str.w	r3, [r9], #4
 80290aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80290ae:	d8e4      	bhi.n	802907a <__multiply+0xaa>
 80290b0:	9b01      	ldr	r3, [sp, #4]
 80290b2:	50e7      	str	r7, [r4, r3]
 80290b4:	9b03      	ldr	r3, [sp, #12]
 80290b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80290ba:	3104      	adds	r1, #4
 80290bc:	f1b9 0f00 	cmp.w	r9, #0
 80290c0:	d020      	beq.n	8029104 <__multiply+0x134>
 80290c2:	6823      	ldr	r3, [r4, #0]
 80290c4:	4647      	mov	r7, r8
 80290c6:	46a4      	mov	ip, r4
 80290c8:	f04f 0a00 	mov.w	sl, #0
 80290cc:	f8b7 b000 	ldrh.w	fp, [r7]
 80290d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80290d4:	fb09 220b 	mla	r2, r9, fp, r2
 80290d8:	4452      	add	r2, sl
 80290da:	b29b      	uxth	r3, r3
 80290dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80290e0:	f84c 3b04 	str.w	r3, [ip], #4
 80290e4:	f857 3b04 	ldr.w	r3, [r7], #4
 80290e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80290ec:	f8bc 3000 	ldrh.w	r3, [ip]
 80290f0:	fb09 330a 	mla	r3, r9, sl, r3
 80290f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80290f8:	42bd      	cmp	r5, r7
 80290fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80290fe:	d8e5      	bhi.n	80290cc <__multiply+0xfc>
 8029100:	9a01      	ldr	r2, [sp, #4]
 8029102:	50a3      	str	r3, [r4, r2]
 8029104:	3404      	adds	r4, #4
 8029106:	e79f      	b.n	8029048 <__multiply+0x78>
 8029108:	3e01      	subs	r6, #1
 802910a:	e7a1      	b.n	8029050 <__multiply+0x80>
 802910c:	0803b1d8 	.word	0x0803b1d8
 8029110:	0803b249 	.word	0x0803b249

08029114 <__pow5mult>:
 8029114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029118:	4615      	mov	r5, r2
 802911a:	f012 0203 	ands.w	r2, r2, #3
 802911e:	4607      	mov	r7, r0
 8029120:	460e      	mov	r6, r1
 8029122:	d007      	beq.n	8029134 <__pow5mult+0x20>
 8029124:	4c25      	ldr	r4, [pc, #148]	@ (80291bc <__pow5mult+0xa8>)
 8029126:	3a01      	subs	r2, #1
 8029128:	2300      	movs	r3, #0
 802912a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802912e:	f7ff fe5d 	bl	8028dec <__multadd>
 8029132:	4606      	mov	r6, r0
 8029134:	10ad      	asrs	r5, r5, #2
 8029136:	d03d      	beq.n	80291b4 <__pow5mult+0xa0>
 8029138:	69fc      	ldr	r4, [r7, #28]
 802913a:	b97c      	cbnz	r4, 802915c <__pow5mult+0x48>
 802913c:	2010      	movs	r0, #16
 802913e:	f7fc fc95 	bl	8025a6c <malloc>
 8029142:	4602      	mov	r2, r0
 8029144:	61f8      	str	r0, [r7, #28]
 8029146:	b928      	cbnz	r0, 8029154 <__pow5mult+0x40>
 8029148:	4b1d      	ldr	r3, [pc, #116]	@ (80291c0 <__pow5mult+0xac>)
 802914a:	481e      	ldr	r0, [pc, #120]	@ (80291c4 <__pow5mult+0xb0>)
 802914c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8029150:	f7fc fc4a 	bl	80259e8 <__assert_func>
 8029154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8029158:	6004      	str	r4, [r0, #0]
 802915a:	60c4      	str	r4, [r0, #12]
 802915c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8029160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029164:	b94c      	cbnz	r4, 802917a <__pow5mult+0x66>
 8029166:	f240 2171 	movw	r1, #625	@ 0x271
 802916a:	4638      	mov	r0, r7
 802916c:	f7ff ff1a 	bl	8028fa4 <__i2b>
 8029170:	2300      	movs	r3, #0
 8029172:	f8c8 0008 	str.w	r0, [r8, #8]
 8029176:	4604      	mov	r4, r0
 8029178:	6003      	str	r3, [r0, #0]
 802917a:	f04f 0900 	mov.w	r9, #0
 802917e:	07eb      	lsls	r3, r5, #31
 8029180:	d50a      	bpl.n	8029198 <__pow5mult+0x84>
 8029182:	4631      	mov	r1, r6
 8029184:	4622      	mov	r2, r4
 8029186:	4638      	mov	r0, r7
 8029188:	f7ff ff22 	bl	8028fd0 <__multiply>
 802918c:	4631      	mov	r1, r6
 802918e:	4680      	mov	r8, r0
 8029190:	4638      	mov	r0, r7
 8029192:	f7ff fe09 	bl	8028da8 <_Bfree>
 8029196:	4646      	mov	r6, r8
 8029198:	106d      	asrs	r5, r5, #1
 802919a:	d00b      	beq.n	80291b4 <__pow5mult+0xa0>
 802919c:	6820      	ldr	r0, [r4, #0]
 802919e:	b938      	cbnz	r0, 80291b0 <__pow5mult+0x9c>
 80291a0:	4622      	mov	r2, r4
 80291a2:	4621      	mov	r1, r4
 80291a4:	4638      	mov	r0, r7
 80291a6:	f7ff ff13 	bl	8028fd0 <__multiply>
 80291aa:	6020      	str	r0, [r4, #0]
 80291ac:	f8c0 9000 	str.w	r9, [r0]
 80291b0:	4604      	mov	r4, r0
 80291b2:	e7e4      	b.n	802917e <__pow5mult+0x6a>
 80291b4:	4630      	mov	r0, r6
 80291b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80291ba:	bf00      	nop
 80291bc:	0803b40c 	.word	0x0803b40c
 80291c0:	0803b0c6 	.word	0x0803b0c6
 80291c4:	0803b249 	.word	0x0803b249

080291c8 <__lshift>:
 80291c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80291cc:	460c      	mov	r4, r1
 80291ce:	6849      	ldr	r1, [r1, #4]
 80291d0:	6923      	ldr	r3, [r4, #16]
 80291d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80291d6:	68a3      	ldr	r3, [r4, #8]
 80291d8:	4607      	mov	r7, r0
 80291da:	4691      	mov	r9, r2
 80291dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80291e0:	f108 0601 	add.w	r6, r8, #1
 80291e4:	42b3      	cmp	r3, r6
 80291e6:	db0b      	blt.n	8029200 <__lshift+0x38>
 80291e8:	4638      	mov	r0, r7
 80291ea:	f7ff fd9d 	bl	8028d28 <_Balloc>
 80291ee:	4605      	mov	r5, r0
 80291f0:	b948      	cbnz	r0, 8029206 <__lshift+0x3e>
 80291f2:	4602      	mov	r2, r0
 80291f4:	4b28      	ldr	r3, [pc, #160]	@ (8029298 <__lshift+0xd0>)
 80291f6:	4829      	ldr	r0, [pc, #164]	@ (802929c <__lshift+0xd4>)
 80291f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80291fc:	f7fc fbf4 	bl	80259e8 <__assert_func>
 8029200:	3101      	adds	r1, #1
 8029202:	005b      	lsls	r3, r3, #1
 8029204:	e7ee      	b.n	80291e4 <__lshift+0x1c>
 8029206:	2300      	movs	r3, #0
 8029208:	f100 0114 	add.w	r1, r0, #20
 802920c:	f100 0210 	add.w	r2, r0, #16
 8029210:	4618      	mov	r0, r3
 8029212:	4553      	cmp	r3, sl
 8029214:	db33      	blt.n	802927e <__lshift+0xb6>
 8029216:	6920      	ldr	r0, [r4, #16]
 8029218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802921c:	f104 0314 	add.w	r3, r4, #20
 8029220:	f019 091f 	ands.w	r9, r9, #31
 8029224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8029228:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802922c:	d02b      	beq.n	8029286 <__lshift+0xbe>
 802922e:	f1c9 0e20 	rsb	lr, r9, #32
 8029232:	468a      	mov	sl, r1
 8029234:	2200      	movs	r2, #0
 8029236:	6818      	ldr	r0, [r3, #0]
 8029238:	fa00 f009 	lsl.w	r0, r0, r9
 802923c:	4310      	orrs	r0, r2
 802923e:	f84a 0b04 	str.w	r0, [sl], #4
 8029242:	f853 2b04 	ldr.w	r2, [r3], #4
 8029246:	459c      	cmp	ip, r3
 8029248:	fa22 f20e 	lsr.w	r2, r2, lr
 802924c:	d8f3      	bhi.n	8029236 <__lshift+0x6e>
 802924e:	ebac 0304 	sub.w	r3, ip, r4
 8029252:	3b15      	subs	r3, #21
 8029254:	f023 0303 	bic.w	r3, r3, #3
 8029258:	3304      	adds	r3, #4
 802925a:	f104 0015 	add.w	r0, r4, #21
 802925e:	4560      	cmp	r0, ip
 8029260:	bf88      	it	hi
 8029262:	2304      	movhi	r3, #4
 8029264:	50ca      	str	r2, [r1, r3]
 8029266:	b10a      	cbz	r2, 802926c <__lshift+0xa4>
 8029268:	f108 0602 	add.w	r6, r8, #2
 802926c:	3e01      	subs	r6, #1
 802926e:	4638      	mov	r0, r7
 8029270:	612e      	str	r6, [r5, #16]
 8029272:	4621      	mov	r1, r4
 8029274:	f7ff fd98 	bl	8028da8 <_Bfree>
 8029278:	4628      	mov	r0, r5
 802927a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802927e:	f842 0f04 	str.w	r0, [r2, #4]!
 8029282:	3301      	adds	r3, #1
 8029284:	e7c5      	b.n	8029212 <__lshift+0x4a>
 8029286:	3904      	subs	r1, #4
 8029288:	f853 2b04 	ldr.w	r2, [r3], #4
 802928c:	f841 2f04 	str.w	r2, [r1, #4]!
 8029290:	459c      	cmp	ip, r3
 8029292:	d8f9      	bhi.n	8029288 <__lshift+0xc0>
 8029294:	e7ea      	b.n	802926c <__lshift+0xa4>
 8029296:	bf00      	nop
 8029298:	0803b1d8 	.word	0x0803b1d8
 802929c:	0803b249 	.word	0x0803b249

080292a0 <__mcmp>:
 80292a0:	690a      	ldr	r2, [r1, #16]
 80292a2:	4603      	mov	r3, r0
 80292a4:	6900      	ldr	r0, [r0, #16]
 80292a6:	1a80      	subs	r0, r0, r2
 80292a8:	b530      	push	{r4, r5, lr}
 80292aa:	d10e      	bne.n	80292ca <__mcmp+0x2a>
 80292ac:	3314      	adds	r3, #20
 80292ae:	3114      	adds	r1, #20
 80292b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80292b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80292b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80292bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80292c0:	4295      	cmp	r5, r2
 80292c2:	d003      	beq.n	80292cc <__mcmp+0x2c>
 80292c4:	d205      	bcs.n	80292d2 <__mcmp+0x32>
 80292c6:	f04f 30ff 	mov.w	r0, #4294967295
 80292ca:	bd30      	pop	{r4, r5, pc}
 80292cc:	42a3      	cmp	r3, r4
 80292ce:	d3f3      	bcc.n	80292b8 <__mcmp+0x18>
 80292d0:	e7fb      	b.n	80292ca <__mcmp+0x2a>
 80292d2:	2001      	movs	r0, #1
 80292d4:	e7f9      	b.n	80292ca <__mcmp+0x2a>
	...

080292d8 <__mdiff>:
 80292d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292dc:	4689      	mov	r9, r1
 80292de:	4606      	mov	r6, r0
 80292e0:	4611      	mov	r1, r2
 80292e2:	4648      	mov	r0, r9
 80292e4:	4614      	mov	r4, r2
 80292e6:	f7ff ffdb 	bl	80292a0 <__mcmp>
 80292ea:	1e05      	subs	r5, r0, #0
 80292ec:	d112      	bne.n	8029314 <__mdiff+0x3c>
 80292ee:	4629      	mov	r1, r5
 80292f0:	4630      	mov	r0, r6
 80292f2:	f7ff fd19 	bl	8028d28 <_Balloc>
 80292f6:	4602      	mov	r2, r0
 80292f8:	b928      	cbnz	r0, 8029306 <__mdiff+0x2e>
 80292fa:	4b3f      	ldr	r3, [pc, #252]	@ (80293f8 <__mdiff+0x120>)
 80292fc:	f240 2137 	movw	r1, #567	@ 0x237
 8029300:	483e      	ldr	r0, [pc, #248]	@ (80293fc <__mdiff+0x124>)
 8029302:	f7fc fb71 	bl	80259e8 <__assert_func>
 8029306:	2301      	movs	r3, #1
 8029308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802930c:	4610      	mov	r0, r2
 802930e:	b003      	add	sp, #12
 8029310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029314:	bfbc      	itt	lt
 8029316:	464b      	movlt	r3, r9
 8029318:	46a1      	movlt	r9, r4
 802931a:	4630      	mov	r0, r6
 802931c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8029320:	bfba      	itte	lt
 8029322:	461c      	movlt	r4, r3
 8029324:	2501      	movlt	r5, #1
 8029326:	2500      	movge	r5, #0
 8029328:	f7ff fcfe 	bl	8028d28 <_Balloc>
 802932c:	4602      	mov	r2, r0
 802932e:	b918      	cbnz	r0, 8029338 <__mdiff+0x60>
 8029330:	4b31      	ldr	r3, [pc, #196]	@ (80293f8 <__mdiff+0x120>)
 8029332:	f240 2145 	movw	r1, #581	@ 0x245
 8029336:	e7e3      	b.n	8029300 <__mdiff+0x28>
 8029338:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802933c:	6926      	ldr	r6, [r4, #16]
 802933e:	60c5      	str	r5, [r0, #12]
 8029340:	f109 0310 	add.w	r3, r9, #16
 8029344:	f109 0514 	add.w	r5, r9, #20
 8029348:	f104 0e14 	add.w	lr, r4, #20
 802934c:	f100 0b14 	add.w	fp, r0, #20
 8029350:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8029354:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8029358:	9301      	str	r3, [sp, #4]
 802935a:	46d9      	mov	r9, fp
 802935c:	f04f 0c00 	mov.w	ip, #0
 8029360:	9b01      	ldr	r3, [sp, #4]
 8029362:	f85e 0b04 	ldr.w	r0, [lr], #4
 8029366:	f853 af04 	ldr.w	sl, [r3, #4]!
 802936a:	9301      	str	r3, [sp, #4]
 802936c:	fa1f f38a 	uxth.w	r3, sl
 8029370:	4619      	mov	r1, r3
 8029372:	b283      	uxth	r3, r0
 8029374:	1acb      	subs	r3, r1, r3
 8029376:	0c00      	lsrs	r0, r0, #16
 8029378:	4463      	add	r3, ip
 802937a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802937e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8029382:	b29b      	uxth	r3, r3
 8029384:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8029388:	4576      	cmp	r6, lr
 802938a:	f849 3b04 	str.w	r3, [r9], #4
 802938e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8029392:	d8e5      	bhi.n	8029360 <__mdiff+0x88>
 8029394:	1b33      	subs	r3, r6, r4
 8029396:	3b15      	subs	r3, #21
 8029398:	f023 0303 	bic.w	r3, r3, #3
 802939c:	3415      	adds	r4, #21
 802939e:	3304      	adds	r3, #4
 80293a0:	42a6      	cmp	r6, r4
 80293a2:	bf38      	it	cc
 80293a4:	2304      	movcc	r3, #4
 80293a6:	441d      	add	r5, r3
 80293a8:	445b      	add	r3, fp
 80293aa:	461e      	mov	r6, r3
 80293ac:	462c      	mov	r4, r5
 80293ae:	4544      	cmp	r4, r8
 80293b0:	d30e      	bcc.n	80293d0 <__mdiff+0xf8>
 80293b2:	f108 0103 	add.w	r1, r8, #3
 80293b6:	1b49      	subs	r1, r1, r5
 80293b8:	f021 0103 	bic.w	r1, r1, #3
 80293bc:	3d03      	subs	r5, #3
 80293be:	45a8      	cmp	r8, r5
 80293c0:	bf38      	it	cc
 80293c2:	2100      	movcc	r1, #0
 80293c4:	440b      	add	r3, r1
 80293c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80293ca:	b191      	cbz	r1, 80293f2 <__mdiff+0x11a>
 80293cc:	6117      	str	r7, [r2, #16]
 80293ce:	e79d      	b.n	802930c <__mdiff+0x34>
 80293d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80293d4:	46e6      	mov	lr, ip
 80293d6:	0c08      	lsrs	r0, r1, #16
 80293d8:	fa1c fc81 	uxtah	ip, ip, r1
 80293dc:	4471      	add	r1, lr
 80293de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80293e2:	b289      	uxth	r1, r1
 80293e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80293e8:	f846 1b04 	str.w	r1, [r6], #4
 80293ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80293f0:	e7dd      	b.n	80293ae <__mdiff+0xd6>
 80293f2:	3f01      	subs	r7, #1
 80293f4:	e7e7      	b.n	80293c6 <__mdiff+0xee>
 80293f6:	bf00      	nop
 80293f8:	0803b1d8 	.word	0x0803b1d8
 80293fc:	0803b249 	.word	0x0803b249

08029400 <__ulp>:
 8029400:	b082      	sub	sp, #8
 8029402:	ed8d 0b00 	vstr	d0, [sp]
 8029406:	9a01      	ldr	r2, [sp, #4]
 8029408:	4b0f      	ldr	r3, [pc, #60]	@ (8029448 <__ulp+0x48>)
 802940a:	4013      	ands	r3, r2
 802940c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8029410:	2b00      	cmp	r3, #0
 8029412:	dc08      	bgt.n	8029426 <__ulp+0x26>
 8029414:	425b      	negs	r3, r3
 8029416:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802941a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802941e:	da04      	bge.n	802942a <__ulp+0x2a>
 8029420:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8029424:	4113      	asrs	r3, r2
 8029426:	2200      	movs	r2, #0
 8029428:	e008      	b.n	802943c <__ulp+0x3c>
 802942a:	f1a2 0314 	sub.w	r3, r2, #20
 802942e:	2b1e      	cmp	r3, #30
 8029430:	bfda      	itte	le
 8029432:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8029436:	40da      	lsrle	r2, r3
 8029438:	2201      	movgt	r2, #1
 802943a:	2300      	movs	r3, #0
 802943c:	4619      	mov	r1, r3
 802943e:	4610      	mov	r0, r2
 8029440:	ec41 0b10 	vmov	d0, r0, r1
 8029444:	b002      	add	sp, #8
 8029446:	4770      	bx	lr
 8029448:	7ff00000 	.word	0x7ff00000

0802944c <__b2d>:
 802944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029450:	6906      	ldr	r6, [r0, #16]
 8029452:	f100 0814 	add.w	r8, r0, #20
 8029456:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802945a:	1f37      	subs	r7, r6, #4
 802945c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029460:	4610      	mov	r0, r2
 8029462:	f7ff fd53 	bl	8028f0c <__hi0bits>
 8029466:	f1c0 0320 	rsb	r3, r0, #32
 802946a:	280a      	cmp	r0, #10
 802946c:	600b      	str	r3, [r1, #0]
 802946e:	491b      	ldr	r1, [pc, #108]	@ (80294dc <__b2d+0x90>)
 8029470:	dc15      	bgt.n	802949e <__b2d+0x52>
 8029472:	f1c0 0c0b 	rsb	ip, r0, #11
 8029476:	fa22 f30c 	lsr.w	r3, r2, ip
 802947a:	45b8      	cmp	r8, r7
 802947c:	ea43 0501 	orr.w	r5, r3, r1
 8029480:	bf34      	ite	cc
 8029482:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8029486:	2300      	movcs	r3, #0
 8029488:	3015      	adds	r0, #21
 802948a:	fa02 f000 	lsl.w	r0, r2, r0
 802948e:	fa23 f30c 	lsr.w	r3, r3, ip
 8029492:	4303      	orrs	r3, r0
 8029494:	461c      	mov	r4, r3
 8029496:	ec45 4b10 	vmov	d0, r4, r5
 802949a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802949e:	45b8      	cmp	r8, r7
 80294a0:	bf3a      	itte	cc
 80294a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80294a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80294aa:	2300      	movcs	r3, #0
 80294ac:	380b      	subs	r0, #11
 80294ae:	d012      	beq.n	80294d6 <__b2d+0x8a>
 80294b0:	f1c0 0120 	rsb	r1, r0, #32
 80294b4:	fa23 f401 	lsr.w	r4, r3, r1
 80294b8:	4082      	lsls	r2, r0
 80294ba:	4322      	orrs	r2, r4
 80294bc:	4547      	cmp	r7, r8
 80294be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80294c2:	bf8c      	ite	hi
 80294c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80294c8:	2200      	movls	r2, #0
 80294ca:	4083      	lsls	r3, r0
 80294cc:	40ca      	lsrs	r2, r1
 80294ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80294d2:	4313      	orrs	r3, r2
 80294d4:	e7de      	b.n	8029494 <__b2d+0x48>
 80294d6:	ea42 0501 	orr.w	r5, r2, r1
 80294da:	e7db      	b.n	8029494 <__b2d+0x48>
 80294dc:	3ff00000 	.word	0x3ff00000

080294e0 <__d2b>:
 80294e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80294e4:	460f      	mov	r7, r1
 80294e6:	2101      	movs	r1, #1
 80294e8:	ec59 8b10 	vmov	r8, r9, d0
 80294ec:	4616      	mov	r6, r2
 80294ee:	f7ff fc1b 	bl	8028d28 <_Balloc>
 80294f2:	4604      	mov	r4, r0
 80294f4:	b930      	cbnz	r0, 8029504 <__d2b+0x24>
 80294f6:	4602      	mov	r2, r0
 80294f8:	4b23      	ldr	r3, [pc, #140]	@ (8029588 <__d2b+0xa8>)
 80294fa:	4824      	ldr	r0, [pc, #144]	@ (802958c <__d2b+0xac>)
 80294fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8029500:	f7fc fa72 	bl	80259e8 <__assert_func>
 8029504:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8029508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802950c:	b10d      	cbz	r5, 8029512 <__d2b+0x32>
 802950e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8029512:	9301      	str	r3, [sp, #4]
 8029514:	f1b8 0300 	subs.w	r3, r8, #0
 8029518:	d023      	beq.n	8029562 <__d2b+0x82>
 802951a:	4668      	mov	r0, sp
 802951c:	9300      	str	r3, [sp, #0]
 802951e:	f7ff fd14 	bl	8028f4a <__lo0bits>
 8029522:	e9dd 1200 	ldrd	r1, r2, [sp]
 8029526:	b1d0      	cbz	r0, 802955e <__d2b+0x7e>
 8029528:	f1c0 0320 	rsb	r3, r0, #32
 802952c:	fa02 f303 	lsl.w	r3, r2, r3
 8029530:	430b      	orrs	r3, r1
 8029532:	40c2      	lsrs	r2, r0
 8029534:	6163      	str	r3, [r4, #20]
 8029536:	9201      	str	r2, [sp, #4]
 8029538:	9b01      	ldr	r3, [sp, #4]
 802953a:	61a3      	str	r3, [r4, #24]
 802953c:	2b00      	cmp	r3, #0
 802953e:	bf0c      	ite	eq
 8029540:	2201      	moveq	r2, #1
 8029542:	2202      	movne	r2, #2
 8029544:	6122      	str	r2, [r4, #16]
 8029546:	b1a5      	cbz	r5, 8029572 <__d2b+0x92>
 8029548:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802954c:	4405      	add	r5, r0
 802954e:	603d      	str	r5, [r7, #0]
 8029550:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8029554:	6030      	str	r0, [r6, #0]
 8029556:	4620      	mov	r0, r4
 8029558:	b003      	add	sp, #12
 802955a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802955e:	6161      	str	r1, [r4, #20]
 8029560:	e7ea      	b.n	8029538 <__d2b+0x58>
 8029562:	a801      	add	r0, sp, #4
 8029564:	f7ff fcf1 	bl	8028f4a <__lo0bits>
 8029568:	9b01      	ldr	r3, [sp, #4]
 802956a:	6163      	str	r3, [r4, #20]
 802956c:	3020      	adds	r0, #32
 802956e:	2201      	movs	r2, #1
 8029570:	e7e8      	b.n	8029544 <__d2b+0x64>
 8029572:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8029576:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802957a:	6038      	str	r0, [r7, #0]
 802957c:	6918      	ldr	r0, [r3, #16]
 802957e:	f7ff fcc5 	bl	8028f0c <__hi0bits>
 8029582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8029586:	e7e5      	b.n	8029554 <__d2b+0x74>
 8029588:	0803b1d8 	.word	0x0803b1d8
 802958c:	0803b249 	.word	0x0803b249

08029590 <__ratio>:
 8029590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029594:	4688      	mov	r8, r1
 8029596:	4669      	mov	r1, sp
 8029598:	4681      	mov	r9, r0
 802959a:	f7ff ff57 	bl	802944c <__b2d>
 802959e:	a901      	add	r1, sp, #4
 80295a0:	4640      	mov	r0, r8
 80295a2:	ec55 4b10 	vmov	r4, r5, d0
 80295a6:	f7ff ff51 	bl	802944c <__b2d>
 80295aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80295ae:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80295b2:	1ad2      	subs	r2, r2, r3
 80295b4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80295b8:	1a5b      	subs	r3, r3, r1
 80295ba:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80295be:	ec57 6b10 	vmov	r6, r7, d0
 80295c2:	2b00      	cmp	r3, #0
 80295c4:	bfd6      	itet	le
 80295c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80295ca:	462a      	movgt	r2, r5
 80295cc:	463a      	movle	r2, r7
 80295ce:	46ab      	mov	fp, r5
 80295d0:	46a2      	mov	sl, r4
 80295d2:	bfce      	itee	gt
 80295d4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80295d8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80295dc:	ee00 3a90 	vmovle	s1, r3
 80295e0:	ec4b ab17 	vmov	d7, sl, fp
 80295e4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80295e8:	b003      	add	sp, #12
 80295ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080295ee <__copybits>:
 80295ee:	3901      	subs	r1, #1
 80295f0:	b570      	push	{r4, r5, r6, lr}
 80295f2:	1149      	asrs	r1, r1, #5
 80295f4:	6914      	ldr	r4, [r2, #16]
 80295f6:	3101      	adds	r1, #1
 80295f8:	f102 0314 	add.w	r3, r2, #20
 80295fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8029600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8029604:	1f05      	subs	r5, r0, #4
 8029606:	42a3      	cmp	r3, r4
 8029608:	d30c      	bcc.n	8029624 <__copybits+0x36>
 802960a:	1aa3      	subs	r3, r4, r2
 802960c:	3b11      	subs	r3, #17
 802960e:	f023 0303 	bic.w	r3, r3, #3
 8029612:	3211      	adds	r2, #17
 8029614:	42a2      	cmp	r2, r4
 8029616:	bf88      	it	hi
 8029618:	2300      	movhi	r3, #0
 802961a:	4418      	add	r0, r3
 802961c:	2300      	movs	r3, #0
 802961e:	4288      	cmp	r0, r1
 8029620:	d305      	bcc.n	802962e <__copybits+0x40>
 8029622:	bd70      	pop	{r4, r5, r6, pc}
 8029624:	f853 6b04 	ldr.w	r6, [r3], #4
 8029628:	f845 6f04 	str.w	r6, [r5, #4]!
 802962c:	e7eb      	b.n	8029606 <__copybits+0x18>
 802962e:	f840 3b04 	str.w	r3, [r0], #4
 8029632:	e7f4      	b.n	802961e <__copybits+0x30>

08029634 <__any_on>:
 8029634:	f100 0214 	add.w	r2, r0, #20
 8029638:	6900      	ldr	r0, [r0, #16]
 802963a:	114b      	asrs	r3, r1, #5
 802963c:	4298      	cmp	r0, r3
 802963e:	b510      	push	{r4, lr}
 8029640:	db11      	blt.n	8029666 <__any_on+0x32>
 8029642:	dd0a      	ble.n	802965a <__any_on+0x26>
 8029644:	f011 011f 	ands.w	r1, r1, #31
 8029648:	d007      	beq.n	802965a <__any_on+0x26>
 802964a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802964e:	fa24 f001 	lsr.w	r0, r4, r1
 8029652:	fa00 f101 	lsl.w	r1, r0, r1
 8029656:	428c      	cmp	r4, r1
 8029658:	d10b      	bne.n	8029672 <__any_on+0x3e>
 802965a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802965e:	4293      	cmp	r3, r2
 8029660:	d803      	bhi.n	802966a <__any_on+0x36>
 8029662:	2000      	movs	r0, #0
 8029664:	bd10      	pop	{r4, pc}
 8029666:	4603      	mov	r3, r0
 8029668:	e7f7      	b.n	802965a <__any_on+0x26>
 802966a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802966e:	2900      	cmp	r1, #0
 8029670:	d0f5      	beq.n	802965e <__any_on+0x2a>
 8029672:	2001      	movs	r0, #1
 8029674:	e7f6      	b.n	8029664 <__any_on+0x30>

08029676 <__ascii_wctomb>:
 8029676:	4603      	mov	r3, r0
 8029678:	4608      	mov	r0, r1
 802967a:	b141      	cbz	r1, 802968e <__ascii_wctomb+0x18>
 802967c:	2aff      	cmp	r2, #255	@ 0xff
 802967e:	d904      	bls.n	802968a <__ascii_wctomb+0x14>
 8029680:	228a      	movs	r2, #138	@ 0x8a
 8029682:	601a      	str	r2, [r3, #0]
 8029684:	f04f 30ff 	mov.w	r0, #4294967295
 8029688:	4770      	bx	lr
 802968a:	700a      	strb	r2, [r1, #0]
 802968c:	2001      	movs	r0, #1
 802968e:	4770      	bx	lr

08029690 <__sfputc_r>:
 8029690:	6893      	ldr	r3, [r2, #8]
 8029692:	3b01      	subs	r3, #1
 8029694:	2b00      	cmp	r3, #0
 8029696:	b410      	push	{r4}
 8029698:	6093      	str	r3, [r2, #8]
 802969a:	da08      	bge.n	80296ae <__sfputc_r+0x1e>
 802969c:	6994      	ldr	r4, [r2, #24]
 802969e:	42a3      	cmp	r3, r4
 80296a0:	db01      	blt.n	80296a6 <__sfputc_r+0x16>
 80296a2:	290a      	cmp	r1, #10
 80296a4:	d103      	bne.n	80296ae <__sfputc_r+0x1e>
 80296a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80296aa:	f7fd bfb2 	b.w	8027612 <__swbuf_r>
 80296ae:	6813      	ldr	r3, [r2, #0]
 80296b0:	1c58      	adds	r0, r3, #1
 80296b2:	6010      	str	r0, [r2, #0]
 80296b4:	7019      	strb	r1, [r3, #0]
 80296b6:	4608      	mov	r0, r1
 80296b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80296bc:	4770      	bx	lr

080296be <__sfputs_r>:
 80296be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80296c0:	4606      	mov	r6, r0
 80296c2:	460f      	mov	r7, r1
 80296c4:	4614      	mov	r4, r2
 80296c6:	18d5      	adds	r5, r2, r3
 80296c8:	42ac      	cmp	r4, r5
 80296ca:	d101      	bne.n	80296d0 <__sfputs_r+0x12>
 80296cc:	2000      	movs	r0, #0
 80296ce:	e007      	b.n	80296e0 <__sfputs_r+0x22>
 80296d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80296d4:	463a      	mov	r2, r7
 80296d6:	4630      	mov	r0, r6
 80296d8:	f7ff ffda 	bl	8029690 <__sfputc_r>
 80296dc:	1c43      	adds	r3, r0, #1
 80296de:	d1f3      	bne.n	80296c8 <__sfputs_r+0xa>
 80296e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080296e4 <_vfiprintf_r>:
 80296e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296e8:	460d      	mov	r5, r1
 80296ea:	b09d      	sub	sp, #116	@ 0x74
 80296ec:	4614      	mov	r4, r2
 80296ee:	4698      	mov	r8, r3
 80296f0:	4606      	mov	r6, r0
 80296f2:	b118      	cbz	r0, 80296fc <_vfiprintf_r+0x18>
 80296f4:	6a03      	ldr	r3, [r0, #32]
 80296f6:	b90b      	cbnz	r3, 80296fc <_vfiprintf_r+0x18>
 80296f8:	f7fd fe54 	bl	80273a4 <__sinit>
 80296fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80296fe:	07d9      	lsls	r1, r3, #31
 8029700:	d405      	bmi.n	802970e <_vfiprintf_r+0x2a>
 8029702:	89ab      	ldrh	r3, [r5, #12]
 8029704:	059a      	lsls	r2, r3, #22
 8029706:	d402      	bmi.n	802970e <_vfiprintf_r+0x2a>
 8029708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802970a:	f7fe f970 	bl	80279ee <__retarget_lock_acquire_recursive>
 802970e:	89ab      	ldrh	r3, [r5, #12]
 8029710:	071b      	lsls	r3, r3, #28
 8029712:	d501      	bpl.n	8029718 <_vfiprintf_r+0x34>
 8029714:	692b      	ldr	r3, [r5, #16]
 8029716:	b99b      	cbnz	r3, 8029740 <_vfiprintf_r+0x5c>
 8029718:	4629      	mov	r1, r5
 802971a:	4630      	mov	r0, r6
 802971c:	f7fd ffb8 	bl	8027690 <__swsetup_r>
 8029720:	b170      	cbz	r0, 8029740 <_vfiprintf_r+0x5c>
 8029722:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029724:	07dc      	lsls	r4, r3, #31
 8029726:	d504      	bpl.n	8029732 <_vfiprintf_r+0x4e>
 8029728:	f04f 30ff 	mov.w	r0, #4294967295
 802972c:	b01d      	add	sp, #116	@ 0x74
 802972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029732:	89ab      	ldrh	r3, [r5, #12]
 8029734:	0598      	lsls	r0, r3, #22
 8029736:	d4f7      	bmi.n	8029728 <_vfiprintf_r+0x44>
 8029738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802973a:	f7fe f959 	bl	80279f0 <__retarget_lock_release_recursive>
 802973e:	e7f3      	b.n	8029728 <_vfiprintf_r+0x44>
 8029740:	2300      	movs	r3, #0
 8029742:	9309      	str	r3, [sp, #36]	@ 0x24
 8029744:	2320      	movs	r3, #32
 8029746:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802974a:	f8cd 800c 	str.w	r8, [sp, #12]
 802974e:	2330      	movs	r3, #48	@ 0x30
 8029750:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029900 <_vfiprintf_r+0x21c>
 8029754:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029758:	f04f 0901 	mov.w	r9, #1
 802975c:	4623      	mov	r3, r4
 802975e:	469a      	mov	sl, r3
 8029760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029764:	b10a      	cbz	r2, 802976a <_vfiprintf_r+0x86>
 8029766:	2a25      	cmp	r2, #37	@ 0x25
 8029768:	d1f9      	bne.n	802975e <_vfiprintf_r+0x7a>
 802976a:	ebba 0b04 	subs.w	fp, sl, r4
 802976e:	d00b      	beq.n	8029788 <_vfiprintf_r+0xa4>
 8029770:	465b      	mov	r3, fp
 8029772:	4622      	mov	r2, r4
 8029774:	4629      	mov	r1, r5
 8029776:	4630      	mov	r0, r6
 8029778:	f7ff ffa1 	bl	80296be <__sfputs_r>
 802977c:	3001      	adds	r0, #1
 802977e:	f000 80a7 	beq.w	80298d0 <_vfiprintf_r+0x1ec>
 8029782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029784:	445a      	add	r2, fp
 8029786:	9209      	str	r2, [sp, #36]	@ 0x24
 8029788:	f89a 3000 	ldrb.w	r3, [sl]
 802978c:	2b00      	cmp	r3, #0
 802978e:	f000 809f 	beq.w	80298d0 <_vfiprintf_r+0x1ec>
 8029792:	2300      	movs	r3, #0
 8029794:	f04f 32ff 	mov.w	r2, #4294967295
 8029798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802979c:	f10a 0a01 	add.w	sl, sl, #1
 80297a0:	9304      	str	r3, [sp, #16]
 80297a2:	9307      	str	r3, [sp, #28]
 80297a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80297a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80297aa:	4654      	mov	r4, sl
 80297ac:	2205      	movs	r2, #5
 80297ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80297b2:	4853      	ldr	r0, [pc, #332]	@ (8029900 <_vfiprintf_r+0x21c>)
 80297b4:	f7d6 fdbc 	bl	8000330 <memchr>
 80297b8:	9a04      	ldr	r2, [sp, #16]
 80297ba:	b9d8      	cbnz	r0, 80297f4 <_vfiprintf_r+0x110>
 80297bc:	06d1      	lsls	r1, r2, #27
 80297be:	bf44      	itt	mi
 80297c0:	2320      	movmi	r3, #32
 80297c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80297c6:	0713      	lsls	r3, r2, #28
 80297c8:	bf44      	itt	mi
 80297ca:	232b      	movmi	r3, #43	@ 0x2b
 80297cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80297d0:	f89a 3000 	ldrb.w	r3, [sl]
 80297d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80297d6:	d015      	beq.n	8029804 <_vfiprintf_r+0x120>
 80297d8:	9a07      	ldr	r2, [sp, #28]
 80297da:	4654      	mov	r4, sl
 80297dc:	2000      	movs	r0, #0
 80297de:	f04f 0c0a 	mov.w	ip, #10
 80297e2:	4621      	mov	r1, r4
 80297e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80297e8:	3b30      	subs	r3, #48	@ 0x30
 80297ea:	2b09      	cmp	r3, #9
 80297ec:	d94b      	bls.n	8029886 <_vfiprintf_r+0x1a2>
 80297ee:	b1b0      	cbz	r0, 802981e <_vfiprintf_r+0x13a>
 80297f0:	9207      	str	r2, [sp, #28]
 80297f2:	e014      	b.n	802981e <_vfiprintf_r+0x13a>
 80297f4:	eba0 0308 	sub.w	r3, r0, r8
 80297f8:	fa09 f303 	lsl.w	r3, r9, r3
 80297fc:	4313      	orrs	r3, r2
 80297fe:	9304      	str	r3, [sp, #16]
 8029800:	46a2      	mov	sl, r4
 8029802:	e7d2      	b.n	80297aa <_vfiprintf_r+0xc6>
 8029804:	9b03      	ldr	r3, [sp, #12]
 8029806:	1d19      	adds	r1, r3, #4
 8029808:	681b      	ldr	r3, [r3, #0]
 802980a:	9103      	str	r1, [sp, #12]
 802980c:	2b00      	cmp	r3, #0
 802980e:	bfbb      	ittet	lt
 8029810:	425b      	neglt	r3, r3
 8029812:	f042 0202 	orrlt.w	r2, r2, #2
 8029816:	9307      	strge	r3, [sp, #28]
 8029818:	9307      	strlt	r3, [sp, #28]
 802981a:	bfb8      	it	lt
 802981c:	9204      	strlt	r2, [sp, #16]
 802981e:	7823      	ldrb	r3, [r4, #0]
 8029820:	2b2e      	cmp	r3, #46	@ 0x2e
 8029822:	d10a      	bne.n	802983a <_vfiprintf_r+0x156>
 8029824:	7863      	ldrb	r3, [r4, #1]
 8029826:	2b2a      	cmp	r3, #42	@ 0x2a
 8029828:	d132      	bne.n	8029890 <_vfiprintf_r+0x1ac>
 802982a:	9b03      	ldr	r3, [sp, #12]
 802982c:	1d1a      	adds	r2, r3, #4
 802982e:	681b      	ldr	r3, [r3, #0]
 8029830:	9203      	str	r2, [sp, #12]
 8029832:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8029836:	3402      	adds	r4, #2
 8029838:	9305      	str	r3, [sp, #20]
 802983a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029910 <_vfiprintf_r+0x22c>
 802983e:	7821      	ldrb	r1, [r4, #0]
 8029840:	2203      	movs	r2, #3
 8029842:	4650      	mov	r0, sl
 8029844:	f7d6 fd74 	bl	8000330 <memchr>
 8029848:	b138      	cbz	r0, 802985a <_vfiprintf_r+0x176>
 802984a:	9b04      	ldr	r3, [sp, #16]
 802984c:	eba0 000a 	sub.w	r0, r0, sl
 8029850:	2240      	movs	r2, #64	@ 0x40
 8029852:	4082      	lsls	r2, r0
 8029854:	4313      	orrs	r3, r2
 8029856:	3401      	adds	r4, #1
 8029858:	9304      	str	r3, [sp, #16]
 802985a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802985e:	4829      	ldr	r0, [pc, #164]	@ (8029904 <_vfiprintf_r+0x220>)
 8029860:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029864:	2206      	movs	r2, #6
 8029866:	f7d6 fd63 	bl	8000330 <memchr>
 802986a:	2800      	cmp	r0, #0
 802986c:	d03f      	beq.n	80298ee <_vfiprintf_r+0x20a>
 802986e:	4b26      	ldr	r3, [pc, #152]	@ (8029908 <_vfiprintf_r+0x224>)
 8029870:	bb1b      	cbnz	r3, 80298ba <_vfiprintf_r+0x1d6>
 8029872:	9b03      	ldr	r3, [sp, #12]
 8029874:	3307      	adds	r3, #7
 8029876:	f023 0307 	bic.w	r3, r3, #7
 802987a:	3308      	adds	r3, #8
 802987c:	9303      	str	r3, [sp, #12]
 802987e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029880:	443b      	add	r3, r7
 8029882:	9309      	str	r3, [sp, #36]	@ 0x24
 8029884:	e76a      	b.n	802975c <_vfiprintf_r+0x78>
 8029886:	fb0c 3202 	mla	r2, ip, r2, r3
 802988a:	460c      	mov	r4, r1
 802988c:	2001      	movs	r0, #1
 802988e:	e7a8      	b.n	80297e2 <_vfiprintf_r+0xfe>
 8029890:	2300      	movs	r3, #0
 8029892:	3401      	adds	r4, #1
 8029894:	9305      	str	r3, [sp, #20]
 8029896:	4619      	mov	r1, r3
 8029898:	f04f 0c0a 	mov.w	ip, #10
 802989c:	4620      	mov	r0, r4
 802989e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80298a2:	3a30      	subs	r2, #48	@ 0x30
 80298a4:	2a09      	cmp	r2, #9
 80298a6:	d903      	bls.n	80298b0 <_vfiprintf_r+0x1cc>
 80298a8:	2b00      	cmp	r3, #0
 80298aa:	d0c6      	beq.n	802983a <_vfiprintf_r+0x156>
 80298ac:	9105      	str	r1, [sp, #20]
 80298ae:	e7c4      	b.n	802983a <_vfiprintf_r+0x156>
 80298b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80298b4:	4604      	mov	r4, r0
 80298b6:	2301      	movs	r3, #1
 80298b8:	e7f0      	b.n	802989c <_vfiprintf_r+0x1b8>
 80298ba:	ab03      	add	r3, sp, #12
 80298bc:	9300      	str	r3, [sp, #0]
 80298be:	462a      	mov	r2, r5
 80298c0:	4b12      	ldr	r3, [pc, #72]	@ (802990c <_vfiprintf_r+0x228>)
 80298c2:	a904      	add	r1, sp, #16
 80298c4:	4630      	mov	r0, r6
 80298c6:	f7fd f88f 	bl	80269e8 <_printf_float>
 80298ca:	4607      	mov	r7, r0
 80298cc:	1c78      	adds	r0, r7, #1
 80298ce:	d1d6      	bne.n	802987e <_vfiprintf_r+0x19a>
 80298d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80298d2:	07d9      	lsls	r1, r3, #31
 80298d4:	d405      	bmi.n	80298e2 <_vfiprintf_r+0x1fe>
 80298d6:	89ab      	ldrh	r3, [r5, #12]
 80298d8:	059a      	lsls	r2, r3, #22
 80298da:	d402      	bmi.n	80298e2 <_vfiprintf_r+0x1fe>
 80298dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80298de:	f7fe f887 	bl	80279f0 <__retarget_lock_release_recursive>
 80298e2:	89ab      	ldrh	r3, [r5, #12]
 80298e4:	065b      	lsls	r3, r3, #25
 80298e6:	f53f af1f 	bmi.w	8029728 <_vfiprintf_r+0x44>
 80298ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80298ec:	e71e      	b.n	802972c <_vfiprintf_r+0x48>
 80298ee:	ab03      	add	r3, sp, #12
 80298f0:	9300      	str	r3, [sp, #0]
 80298f2:	462a      	mov	r2, r5
 80298f4:	4b05      	ldr	r3, [pc, #20]	@ (802990c <_vfiprintf_r+0x228>)
 80298f6:	a904      	add	r1, sp, #16
 80298f8:	4630      	mov	r0, r6
 80298fa:	f7fd fafd 	bl	8026ef8 <_printf_i>
 80298fe:	e7e4      	b.n	80298ca <_vfiprintf_r+0x1e6>
 8029900:	0803b2a2 	.word	0x0803b2a2
 8029904:	0803b2ac 	.word	0x0803b2ac
 8029908:	080269e9 	.word	0x080269e9
 802990c:	080296bf 	.word	0x080296bf
 8029910:	0803b2a8 	.word	0x0803b2a8

08029914 <__swhatbuf_r>:
 8029914:	b570      	push	{r4, r5, r6, lr}
 8029916:	460c      	mov	r4, r1
 8029918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802991c:	2900      	cmp	r1, #0
 802991e:	b096      	sub	sp, #88	@ 0x58
 8029920:	4615      	mov	r5, r2
 8029922:	461e      	mov	r6, r3
 8029924:	da0d      	bge.n	8029942 <__swhatbuf_r+0x2e>
 8029926:	89a3      	ldrh	r3, [r4, #12]
 8029928:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802992c:	f04f 0100 	mov.w	r1, #0
 8029930:	bf14      	ite	ne
 8029932:	2340      	movne	r3, #64	@ 0x40
 8029934:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029938:	2000      	movs	r0, #0
 802993a:	6031      	str	r1, [r6, #0]
 802993c:	602b      	str	r3, [r5, #0]
 802993e:	b016      	add	sp, #88	@ 0x58
 8029940:	bd70      	pop	{r4, r5, r6, pc}
 8029942:	466a      	mov	r2, sp
 8029944:	f000 f848 	bl	80299d8 <_fstat_r>
 8029948:	2800      	cmp	r0, #0
 802994a:	dbec      	blt.n	8029926 <__swhatbuf_r+0x12>
 802994c:	9901      	ldr	r1, [sp, #4]
 802994e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8029952:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8029956:	4259      	negs	r1, r3
 8029958:	4159      	adcs	r1, r3
 802995a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802995e:	e7eb      	b.n	8029938 <__swhatbuf_r+0x24>

08029960 <__smakebuf_r>:
 8029960:	898b      	ldrh	r3, [r1, #12]
 8029962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029964:	079d      	lsls	r5, r3, #30
 8029966:	4606      	mov	r6, r0
 8029968:	460c      	mov	r4, r1
 802996a:	d507      	bpl.n	802997c <__smakebuf_r+0x1c>
 802996c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8029970:	6023      	str	r3, [r4, #0]
 8029972:	6123      	str	r3, [r4, #16]
 8029974:	2301      	movs	r3, #1
 8029976:	6163      	str	r3, [r4, #20]
 8029978:	b003      	add	sp, #12
 802997a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802997c:	ab01      	add	r3, sp, #4
 802997e:	466a      	mov	r2, sp
 8029980:	f7ff ffc8 	bl	8029914 <__swhatbuf_r>
 8029984:	9f00      	ldr	r7, [sp, #0]
 8029986:	4605      	mov	r5, r0
 8029988:	4639      	mov	r1, r7
 802998a:	4630      	mov	r0, r6
 802998c:	f7fc f8a0 	bl	8025ad0 <_malloc_r>
 8029990:	b948      	cbnz	r0, 80299a6 <__smakebuf_r+0x46>
 8029992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029996:	059a      	lsls	r2, r3, #22
 8029998:	d4ee      	bmi.n	8029978 <__smakebuf_r+0x18>
 802999a:	f023 0303 	bic.w	r3, r3, #3
 802999e:	f043 0302 	orr.w	r3, r3, #2
 80299a2:	81a3      	strh	r3, [r4, #12]
 80299a4:	e7e2      	b.n	802996c <__smakebuf_r+0xc>
 80299a6:	89a3      	ldrh	r3, [r4, #12]
 80299a8:	6020      	str	r0, [r4, #0]
 80299aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80299ae:	81a3      	strh	r3, [r4, #12]
 80299b0:	9b01      	ldr	r3, [sp, #4]
 80299b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80299b6:	b15b      	cbz	r3, 80299d0 <__smakebuf_r+0x70>
 80299b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80299bc:	4630      	mov	r0, r6
 80299be:	f000 f81d 	bl	80299fc <_isatty_r>
 80299c2:	b128      	cbz	r0, 80299d0 <__smakebuf_r+0x70>
 80299c4:	89a3      	ldrh	r3, [r4, #12]
 80299c6:	f023 0303 	bic.w	r3, r3, #3
 80299ca:	f043 0301 	orr.w	r3, r3, #1
 80299ce:	81a3      	strh	r3, [r4, #12]
 80299d0:	89a3      	ldrh	r3, [r4, #12]
 80299d2:	431d      	orrs	r5, r3
 80299d4:	81a5      	strh	r5, [r4, #12]
 80299d6:	e7cf      	b.n	8029978 <__smakebuf_r+0x18>

080299d8 <_fstat_r>:
 80299d8:	b538      	push	{r3, r4, r5, lr}
 80299da:	4d07      	ldr	r5, [pc, #28]	@ (80299f8 <_fstat_r+0x20>)
 80299dc:	2300      	movs	r3, #0
 80299de:	4604      	mov	r4, r0
 80299e0:	4608      	mov	r0, r1
 80299e2:	4611      	mov	r1, r2
 80299e4:	602b      	str	r3, [r5, #0]
 80299e6:	f7d8 fa3a 	bl	8001e5e <_fstat>
 80299ea:	1c43      	adds	r3, r0, #1
 80299ec:	d102      	bne.n	80299f4 <_fstat_r+0x1c>
 80299ee:	682b      	ldr	r3, [r5, #0]
 80299f0:	b103      	cbz	r3, 80299f4 <_fstat_r+0x1c>
 80299f2:	6023      	str	r3, [r4, #0]
 80299f4:	bd38      	pop	{r3, r4, r5, pc}
 80299f6:	bf00      	nop
 80299f8:	2400586c 	.word	0x2400586c

080299fc <_isatty_r>:
 80299fc:	b538      	push	{r3, r4, r5, lr}
 80299fe:	4d06      	ldr	r5, [pc, #24]	@ (8029a18 <_isatty_r+0x1c>)
 8029a00:	2300      	movs	r3, #0
 8029a02:	4604      	mov	r4, r0
 8029a04:	4608      	mov	r0, r1
 8029a06:	602b      	str	r3, [r5, #0]
 8029a08:	f7d8 fa39 	bl	8001e7e <_isatty>
 8029a0c:	1c43      	adds	r3, r0, #1
 8029a0e:	d102      	bne.n	8029a16 <_isatty_r+0x1a>
 8029a10:	682b      	ldr	r3, [r5, #0]
 8029a12:	b103      	cbz	r3, 8029a16 <_isatty_r+0x1a>
 8029a14:	6023      	str	r3, [r4, #0]
 8029a16:	bd38      	pop	{r3, r4, r5, pc}
 8029a18:	2400586c 	.word	0x2400586c

08029a1c <_init>:
 8029a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a1e:	bf00      	nop
 8029a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a22:	bc08      	pop	{r3}
 8029a24:	469e      	mov	lr, r3
 8029a26:	4770      	bx	lr

08029a28 <_fini>:
 8029a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a2a:	bf00      	nop
 8029a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a2e:	bc08      	pop	{r3}
 8029a30:	469e      	mov	lr, r3
 8029a32:	4770      	bx	lr
 8029a34:	0000      	movs	r0, r0
	...

08029a38 <__is_dualbank_veneer>:
 8029a38:	f85f f000 	ldr.w	pc, [pc]	@ 8029a3c <__is_dualbank_veneer+0x4>
 8029a3c:	240009f1 	.word	0x240009f1

08029a40 <__single_bank_swap_veneer>:
 8029a40:	f85f f000 	ldr.w	pc, [pc]	@ 8029a44 <__single_bank_swap_veneer+0x4>
 8029a44:	24000f15 	.word	0x24000f15

Disassembly of section .data:

24000000 <SystemCoreClock>:
24000000:	03d09000                                ....

24000004 <SystemD2Clock>:
24000004:	03d09000                                ....

24000008 <uwTickPrio>:
24000008:	00000010                                ....

2400000c <uwTickFreq>:
2400000c:	00000001                                ....

24000010 <mg_fs_packed>:
24000010:	0800a1bb 0800a21d 0800a319 0800a37b     ............{...
24000020:	0800a397 0800a3ed 0800a407 0800a43f     ............?...
24000030:	0800a457 0800a46d                       W...m...

24000038 <mg_fs_posix>:
24000038:	0800a483 0800a49d 0800a4b5 0800a4cd     ................
24000048:	0800a4e1 0800a4fb 0800a515 0800a52f     ............/...
24000058:	0800a547 0800a55d                       G...]...

24000060 <s_known_types>:
24000060:	0802a6a8 00000004 0802a6b0 00000018     ................
24000070:	0802a6cc 00000003 0802a6b0 00000018     ................
24000080:	0802a6d0 00000003 0802a6d4 00000017     ................
24000090:	0802a6ec 00000002 0802a6f0 0000001e     ................
240000a0:	0802a710 00000003 0802a6f0 0000001e     ................
240000b0:	0802a714 00000003 0802a718 00000009     ................
240000c0:	0802a724 00000003 0802a728 00000009     $.......(.......
240000d0:	0802a734 00000003 0802a738 0000000a     4.......8.......
240000e0:	0802a744 00000004 0802a738 0000000a     D.......8.......
240000f0:	0802a74c 00000004 0802a754 00000009     L.......T.......
24000100:	0802a760 00000003 0802a764 00000008     `.......d.......
24000110:	0802a770 00000003 0802a774 0000000d     p.......t.......
24000120:	0802a784 00000003 0802a788 00000019     ................
24000130:	0802a7a4 00000003 0802a7a8 0000000f     ................
24000140:	0802a7b8 00000003 0802a7bc 00000008     ................
24000150:	0802a7c8 00000003 0802a7cc 00000012     ................
24000160:	0802a7e0 00000003 0802a7e4 00000018     ................
24000170:	0802a800 00000002 0802a804 00000010     ................
24000180:	0802a818 00000003 0802a81c 0000000c     ................
24000190:	0802a82c 00000004 0802a834 00000010     ,.......4.......
240001a0:	0802a848 00000003 0802a84c 0000000f     H.......L.......
240001b0:	0802a85c 00000003 0802a860 0000000a     \.......`.......
240001c0:	0802a86c 00000003 0802a870 00000009     l.......p.......
240001d0:	0802a87c 00000004 0802a884 0000000a     |...............
240001e0:	0802a890 00000003 0802a894 0000000f     ................
240001f0:	0802a8a4 00000005 0802a6b0 00000018     ................
24000200:	0802a8ac 00000003 0802a8b0 00000012     ................
24000210:	0802a8c4 00000003 0802a8c8 00000009     ................
24000220:	0802a8d4 00000004 0802a8dc 0000000a     ................
24000230:	0802a8e8 00000003 0802a8ec 0000000f     ................
24000240:	0802a8fc 00000003 0802a900 0000000a     ................
	...

24000258 <mg_log_level>:
24000258:	00000002                                ....

2400025c <s_log_func>:
2400025c:	0801327b                                {2..

24000260 <mcast_addr>:
24000260:	005e0001 0000fb00                       ..^.....

24000268 <s_mg_flash_stm32h7>:
24000268:	08000000 00000000 00020000 00000020     ............ ...
24000278:	24000da5 24000d21                       ...$!..$

24000280 <zeros_sha256_digest>:
24000280:	42c4b0e3 141cfc98 c8f4fb9a 24b96f99     ...B.........o.$
24000290:	e441ae27 4c939b64 1b9995a4 55b85278     '.A.d..L....xR.U

240002a0 <mg_tcpip_driver_stm32h>:
240002a0:	08022d99 08023009 00000000 08023225     .-...0......%2..

240002b0 <s_modbus_base>:
240002b0:	000003e8                                ....

240002b4 <s_state>:
240002b4:	0000002a 0000001b 00000043 0000000a     *.......C.......
240002c4:	2e302e31 00000030 00000000 00000000     1.0.0...........
240002d4:	00000000 00000001 00000053              ........S...

240002e0 <s_leds>:
240002e0:	00000100                                ....

240002e4 <s_network_settings>:
240002e4:	2e323931 2e383631 32342e30 00000000     192.168.0.42....
240002f4:	00000000 2e323931 2e383631 00312e30     ....192.168.0.1.
	...
2400030c:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
2400031c:	00000000 00000001 00000000              ............

24000328 <s_settings>:
24000328:	74696465 73202620 20657661 0000656d     edit & save me..
	...
24000350:	6f666e69 00000000 00000000 00000000     info............
24000360:	9ad42c3d 405ec7e6 00000011 00000001     =,....^@........

24000370 <s_security>:
24000370:	696d6461 0000006e 00000000 00000000     admin...........
	...
24000398:	72657375 00000000 00000000 00000000     user............
	...

240003c0 <s_state_attributes>:
240003c0:	0802cb94 0802cb9c 00000000 00000000     ................
	...
240003d8:	0802cba0 0802cb9c 00000000 00000004     ................
	...
240003f0:	0802cbac 0802cb9c 00000000 00000008     ................
	...
24000408:	0802cbb8 0802cb9c 00000000 0000000c     ................
	...
24000420:	0802cbc0 0802cbc8 00000000 00000010     ................
24000430:	00000014 00000000 0802cbd0 0802cbd8     ................
24000440:	00000000 00000024 00000000 00000000     ....$...........
24000450:	0802cbe0 0802cbd8 00000000 00000025     ............%...
	...
24000468:	0802cbe8 0802cb9c 00000000 00000028     ............(...
	...

24000498 <s_leds_attributes>:
24000498:	0802cbf0 0802cbd8 00000000 00000000     ................
	...
240004b0:	0802cbf8 0802cbd8 00000000 00000001     ................
	...
240004c8:	0802cc00 0802cbd8 00000000 00000002     ................
	...

240004f8 <s_network_settings_attributes>:
240004f8:	0802cc08 0802cbc8 00000000 00000000     ................
24000508:	00000014 00000000 0802cc14 0802cbc8     ................
24000518:	00000000 00000014 00000014 00000000     ................
24000528:	0802cc20 0802cbc8 00000000 00000028      ...........(...
24000538:	00000014 00000000 0802cc28 0802cbd8     ........(.......
24000548:	00000000 0000003c 00000000 00000000     ....<...........
	...

24000570 <s_settings_attributes>:
24000570:	0802cc30 0802cbc8 00000000 00000000     0...............
24000580:	00000028 00000000 0802cc3c 0802cbc8     (.......<.......
24000590:	00000000 00000028 0000000a 00000000     ....(...........
240005a0:	0802cc48 0802cc54 0802cc5c 00000038     H...T...\...8...
	...
240005b8:	0802cc64 0802cb9c 00000000 00000040     d...........@...
	...
240005d0:	0802cc6c 0802cbd8 00000000 00000044     l...........D...
	...

24000600 <s_security_attributes>:
24000600:	0802cc78 0802cbc8 00000000 00000000     x...............
24000610:	00000028 00000000 0802cc88 0802cbc8     (...............
24000620:	00000000 00000028 00000028 00000000     ....(...(.......
	...

24000648 <s_apihandler_reboot>:
24000648:	0802cc98 0802cca0 00000000 00000003     ................
24000658:	00000007 00000000 0802372d 08023751     ........-7..Q7..

24000668 <s_apihandler_reformat>:
24000668:	0802cca8 0802cca0 00000000 00000003     ................
24000678:	00000007 00000000 080237b1 080237d5     .........7...7..

24000688 <s_apihandler_firmware_update>:
24000688:	0802ccb4 0802ccc4 00000000 00000003     ................
24000698:	00000007 00000000 08023835 0802388d     ........58...8..
240006a8:	080238c1                                .8..

240006ac <s_apihandler_file_upload>:
240006ac:	0802ccc8 0802ccd4 00000000 00000003     ................
240006bc:	00000007 00000000 08023911 08023995     .........9...9..
240006cc:	080239d5                                .9..

240006d0 <s_apihandler_graph_data>:
240006d0:	0802ccdc 0802cce8 00000000 00000003     ................
240006e0:	00000003 00000000 08023a1d              .........:..

240006ec <s_apihandler_state>:
240006ec:	0802ccf0 0802ccf8 00000001 00000000     ................
	...
24000704:	240003c0 0000002c 08023a55 00000000     ...$,...U:......

24000714 <s_apihandler_leds>:
24000714:	0802cd00 0802ccf8 00000000 00000003     ................
24000724:	00000003 00000000 24000498 00000003     ...........$....
24000734:	08023ac1 08023b35                       .:..5;..

2400073c <s_apihandler_network_settings>:
2400073c:	0802cd08 0802ccf8 00000000 00000003     ................
2400074c:	00000007 00000000 240004f8 0000003d     ...........$=...
2400075c:	08023b89 08023bd1                       .;...;..

24000764 <s_apihandler_settings>:
24000764:	0802cd1c 0802ccf8 00000000 00000003     ................
24000774:	00000007 00000000 24000570 00000048     ........p..$H...
24000784:	08023c19 08023c3d                       .<..=<..

2400078c <s_apihandler_security>:
2400078c:	0802cd28 0802ccf8 00000000 00000007     (...............
2400079c:	00000007 00000000 24000600 00000050     ...........$P...
240007ac:	08023c61 08023c85                       a<...<..

240007b4 <s_apihandler_loglevels>:
240007b4:	0802cd34 0802cce8 00000000 00000000     4...............
	...
240007cc:	08023ca9                                .<..

240007d0 <s_apihandler_events>:
240007d0:	0802cd40 0802cce8 00000000 00000000     @...............
	...
240007e8:	08023ce1                                .<..

240007ec <s_apihandlers>:
240007ec:	24000648 24000668 24000688 240006ac     H..$h..$...$...$
240007fc:	240006d0 240006ec 24000714 2400073c     ...$...$...$<..$
2400080c:	24000764 2400078c 240007b4 240007d0     d..$...$...$...$

2400081c <s_auth>:
2400081c:	080236c9                                .6..

24000820 <s_modbus_handlers>:
24000820:	08023541 080235dd                       A5...5..

24000828 <__sglue>:
24000828:	00000000 00000003 24005730              ........0W.$

24000834 <__global_locale>:
24000834:	00000043 00000000 00000000 00000000     C...............
	...
24000854:	00000043 00000000 00000000 00000000     C...............
	...
24000874:	00000043 00000000 00000000 00000000     C...............
	...
24000894:	00000043 00000000 00000000 00000000     C...............
	...
240008b4:	00000043 00000000 00000000 00000000     C...............
	...
240008d4:	00000043 00000000 00000000 00000000     C...............
	...
240008f4:	00000043 00000000 00000000 00000000     C...............
	...
24000914:	08029677 08028d03 00000000 0803b308     w...............
24000924:	0803b135 0803b0c5 0803b0c5 0803b0c5     5...............
24000934:	0803b0c5 0803b0c5 0803b0c5 0803b0c5     ................
24000944:	0803b0c5 0803b0c5 ffffffff ffffffff     ................
24000954:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2400097c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

240009a0 <_impure_ptr>:
240009a0:	240009a4                                ...$

240009a4 <_impure_data>:
240009a4:	00000000 24005730 24005798 24005800     ....0W.$.W.$.X.$
	...

240009f0 <is_dualbank>:
MG_IRAM static bool is_dualbank(void) {
240009f0:	b480      	push	{r7}
240009f2:	af00      	add	r7, sp, #0
  return (s_mg_flash_stm32h7.size < 2 * 1024 * 1024) ? false : true;
240009f4:	4b06      	ldr	r3, [pc, #24]	@ (24000a10 <is_dualbank+0x20>)
240009f6:	685b      	ldr	r3, [r3, #4]
240009f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
240009fc:	bf2c      	ite	cs
240009fe:	2301      	movcs	r3, #1
24000a00:	2300      	movcc	r3, #0
24000a02:	b2db      	uxtb	r3, r3
}
24000a04:	4618      	mov	r0, r3
24000a06:	46bd      	mov	sp, r7
24000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a0c:	4770      	bx	lr
24000a0e:	bf00      	nop
24000a10:	24000268 	.word	0x24000268

24000a14 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
24000a14:	b580      	push	{r7, lr}
24000a16:	af00      	add	r7, sp, #0
  if (unlocked == false) {
24000a18:	4b11      	ldr	r3, [pc, #68]	@ (24000a60 <flash_unlock+0x4c>)
24000a1a:	781b      	ldrb	r3, [r3, #0]
24000a1c:	f083 0301 	eor.w	r3, r3, #1
24000a20:	b2db      	uxtb	r3, r3
24000a22:	2b00      	cmp	r3, #0
24000a24:	d019      	beq.n	24000a5a <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
24000a26:	4b0f      	ldr	r3, [pc, #60]	@ (24000a64 <flash_unlock+0x50>)
24000a28:	4a0f      	ldr	r2, [pc, #60]	@ (24000a68 <flash_unlock+0x54>)
24000a2a:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
24000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (24000a64 <flash_unlock+0x50>)
24000a2e:	4a0f      	ldr	r2, [pc, #60]	@ (24000a6c <flash_unlock+0x58>)
24000a30:	601a      	str	r2, [r3, #0]
    if (is_dualbank()) {
24000a32:	f7ff ffdd 	bl	240009f0 <is_dualbank>
24000a36:	4603      	mov	r3, r0
24000a38:	2b00      	cmp	r3, #0
24000a3a:	d005      	beq.n	24000a48 <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
24000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (24000a70 <flash_unlock+0x5c>)
24000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (24000a68 <flash_unlock+0x54>)
24000a40:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
24000a42:	4b0b      	ldr	r3, [pc, #44]	@ (24000a70 <flash_unlock+0x5c>)
24000a44:	4a09      	ldr	r2, [pc, #36]	@ (24000a6c <flash_unlock+0x58>)
24000a46:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
24000a48:	4b0a      	ldr	r3, [pc, #40]	@ (24000a74 <flash_unlock+0x60>)
24000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (24000a78 <flash_unlock+0x64>)
24000a4c:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
24000a4e:	4b09      	ldr	r3, [pc, #36]	@ (24000a74 <flash_unlock+0x60>)
24000a50:	4a0a      	ldr	r2, [pc, #40]	@ (24000a7c <flash_unlock+0x68>)
24000a52:	601a      	str	r2, [r3, #0]
    unlocked = true;
24000a54:	4b02      	ldr	r3, [pc, #8]	@ (24000a60 <flash_unlock+0x4c>)
24000a56:	2201      	movs	r2, #1
24000a58:	701a      	strb	r2, [r3, #0]
}
24000a5a:	bf00      	nop
24000a5c:	bd80      	pop	{r7, pc}
24000a5e:	bf00      	nop
24000a60:	240054e0 	.word	0x240054e0
24000a64:	52002004 	.word	0x52002004
24000a68:	45670123 	.word	0x45670123
24000a6c:	cdef89ab 	.word	0xcdef89ab
24000a70:	52002104 	.word	0x52002104
24000a74:	52002008 	.word	0x52002008
24000a78:	08192a3b 	.word	0x08192a3b
24000a7c:	4c5d6e7f 	.word	0x4c5d6e7f

24000a80 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
24000a80:	b480      	push	{r7}
24000a82:	b087      	sub	sp, #28
24000a84:	af00      	add	r7, sp, #0
24000a86:	6078      	str	r0, [r7, #4]
  char *base = (char *) s_mg_flash_stm32h7.start,
24000a88:	4b15      	ldr	r3, [pc, #84]	@ (24000ae0 <flash_page_start+0x60>)
24000a8a:	681b      	ldr	r3, [r3, #0]
24000a8c:	617b      	str	r3, [r7, #20]
       *end = base + s_mg_flash_stm32h7.size;
24000a8e:	4b14      	ldr	r3, [pc, #80]	@ (24000ae0 <flash_page_start+0x60>)
24000a90:	685b      	ldr	r3, [r3, #4]
24000a92:	697a      	ldr	r2, [r7, #20]
24000a94:	4413      	add	r3, r2
24000a96:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
24000a98:	687b      	ldr	r3, [r7, #4]
24000a9a:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % s_mg_flash_stm32h7.secsz) == 0;
24000a9c:	68fa      	ldr	r2, [r7, #12]
24000a9e:	697b      	ldr	r3, [r7, #20]
24000aa0:	429a      	cmp	r2, r3
24000aa2:	d312      	bcc.n	24000aca <flash_page_start+0x4a>
24000aa4:	68fa      	ldr	r2, [r7, #12]
24000aa6:	693b      	ldr	r3, [r7, #16]
24000aa8:	429a      	cmp	r2, r3
24000aaa:	d20e      	bcs.n	24000aca <flash_page_start+0x4a>
24000aac:	68fa      	ldr	r2, [r7, #12]
24000aae:	697b      	ldr	r3, [r7, #20]
24000ab0:	1ad3      	subs	r3, r2, r3
24000ab2:	461a      	mov	r2, r3
24000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (24000ae0 <flash_page_start+0x60>)
24000ab6:	689b      	ldr	r3, [r3, #8]
24000ab8:	fbb2 f1f3 	udiv	r1, r2, r3
24000abc:	fb01 f303 	mul.w	r3, r1, r3
24000ac0:	1ad3      	subs	r3, r2, r3
24000ac2:	2b00      	cmp	r3, #0
24000ac4:	d101      	bne.n	24000aca <flash_page_start+0x4a>
24000ac6:	2301      	movs	r3, #1
24000ac8:	e000      	b.n	24000acc <flash_page_start+0x4c>
24000aca:	2300      	movs	r3, #0
24000acc:	f003 0301 	and.w	r3, r3, #1
24000ad0:	b2db      	uxtb	r3, r3
}
24000ad2:	4618      	mov	r0, r3
24000ad4:	371c      	adds	r7, #28
24000ad6:	46bd      	mov	sp, r7
24000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
24000adc:	4770      	bx	lr
24000ade:	bf00      	nop
24000ae0:	24000268 	.word	0x24000268

24000ae4 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
24000ae4:	b480      	push	{r7}
24000ae6:	b083      	sub	sp, #12
24000ae8:	af00      	add	r7, sp, #0
24000aea:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
24000aec:	687b      	ldr	r3, [r7, #4]
24000aee:	3310      	adds	r3, #16
24000af0:	681a      	ldr	r2, [r3, #0]
24000af2:	4b06      	ldr	r3, [pc, #24]	@ (24000b0c <flash_is_err+0x28>)
24000af4:	4013      	ands	r3, r2
24000af6:	2b00      	cmp	r3, #0
24000af8:	bf14      	ite	ne
24000afa:	2301      	movne	r3, #1
24000afc:	2300      	moveq	r3, #0
24000afe:	b2db      	uxtb	r3, r3
}
24000b00:	4618      	mov	r0, r3
24000b02:	370c      	adds	r7, #12
24000b04:	46bd      	mov	sp, r7
24000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b0a:	4770      	bx	lr
24000b0c:	0ffe0000 	.word	0x0ffe0000

24000b10 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
24000b10:	b480      	push	{r7}
24000b12:	b083      	sub	sp, #12
24000b14:	af00      	add	r7, sp, #0
24000b16:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
24000b18:	bf00      	nop
24000b1a:	687b      	ldr	r3, [r7, #4]
24000b1c:	3310      	adds	r3, #16
24000b1e:	681b      	ldr	r3, [r3, #0]
24000b20:	f003 0305 	and.w	r3, r3, #5
24000b24:	2b00      	cmp	r3, #0
24000b26:	d1f8      	bne.n	24000b1a <flash_wait+0xa>
}
24000b28:	bf00      	nop
24000b2a:	bf00      	nop
24000b2c:	370c      	adds	r7, #12
24000b2e:	46bd      	mov	sp, r7
24000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b34:	4770      	bx	lr

24000b36 <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
24000b36:	b580      	push	{r7, lr}
24000b38:	b082      	sub	sp, #8
24000b3a:	af00      	add	r7, sp, #0
24000b3c:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
24000b3e:	6878      	ldr	r0, [r7, #4]
24000b40:	f7ff ffe6 	bl	24000b10 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
24000b44:	687b      	ldr	r3, [r7, #4]
24000b46:	3314      	adds	r3, #20
24000b48:	461a      	mov	r2, r3
24000b4a:	4b03      	ldr	r3, [pc, #12]	@ (24000b58 <flash_clear_err+0x22>)
24000b4c:	6013      	str	r3, [r2, #0]
}
24000b4e:	bf00      	nop
24000b50:	3708      	adds	r7, #8
24000b52:	46bd      	mov	sp, r7
24000b54:	bd80      	pop	{r7, pc}
24000b56:	bf00      	nop
24000b58:	07ff0000 	.word	0x07ff0000

24000b5c <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
24000b5c:	b480      	push	{r7}
24000b5e:	b083      	sub	sp, #12
24000b60:	af00      	add	r7, sp, #0
24000b62:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
24000b64:	687b      	ldr	r3, [r7, #4]
24000b66:	3318      	adds	r3, #24
24000b68:	681b      	ldr	r3, [r3, #0]
24000b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000b6e:	2b00      	cmp	r3, #0
24000b70:	bf14      	ite	ne
24000b72:	2301      	movne	r3, #1
24000b74:	2300      	moveq	r3, #0
24000b76:	b2db      	uxtb	r3, r3
}
24000b78:	4618      	mov	r0, r3
24000b7a:	370c      	adds	r7, #12
24000b7c:	46bd      	mov	sp, r7
24000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b82:	4770      	bx	lr

24000b84 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
24000b84:	b580      	push	{r7, lr}
24000b86:	b084      	sub	sp, #16
24000b88:	af00      	add	r7, sp, #0
24000b8a:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (24000bc4 <flash_bank+0x40>)
24000b8e:	681b      	ldr	r3, [r3, #0]
24000b90:	687a      	ldr	r2, [r7, #4]
24000b92:	1ad3      	subs	r3, r2, r3
24000b94:	60fb      	str	r3, [r7, #12]
  if (!is_dualbank()) return FLASH_BASE1;
24000b96:	f7ff ff2b 	bl	240009f0 <is_dualbank>
24000b9a:	4603      	mov	r3, r0
24000b9c:	f083 0301 	eor.w	r3, r3, #1
24000ba0:	b2db      	uxtb	r3, r3
24000ba2:	2b00      	cmp	r3, #0
24000ba4:	d001      	beq.n	24000baa <flash_bank+0x26>
24000ba6:	4b08      	ldr	r3, [pc, #32]	@ (24000bc8 <flash_bank+0x44>)
24000ba8:	e008      	b.n	24000bbc <flash_bank+0x38>
  return ofs < s_mg_flash_stm32h7.size / 2 ? FLASH_BASE1 : FLASH_BASE2;
24000baa:	4b06      	ldr	r3, [pc, #24]	@ (24000bc4 <flash_bank+0x40>)
24000bac:	685b      	ldr	r3, [r3, #4]
24000bae:	085b      	lsrs	r3, r3, #1
24000bb0:	68fa      	ldr	r2, [r7, #12]
24000bb2:	429a      	cmp	r2, r3
24000bb4:	d201      	bcs.n	24000bba <flash_bank+0x36>
24000bb6:	4b04      	ldr	r3, [pc, #16]	@ (24000bc8 <flash_bank+0x44>)
24000bb8:	e000      	b.n	24000bbc <flash_bank+0x38>
24000bba:	4b04      	ldr	r3, [pc, #16]	@ (24000bcc <flash_bank+0x48>)
}
24000bbc:	4618      	mov	r0, r3
24000bbe:	3710      	adds	r7, #16
24000bc0:	46bd      	mov	sp, r7
24000bc2:	bd80      	pop	{r7, pc}
24000bc4:	24000268 	.word	0x24000268
24000bc8:	52002000 	.word	0x52002000
24000bcc:	52002100 	.word	0x52002100

24000bd0 <mg_stm32h7_erase>:
MG_IRAM static bool mg_stm32h7_erase(void *addr) {
24000bd0:	b580      	push	{r7, lr}
24000bd2:	b08a      	sub	sp, #40	@ 0x28
24000bd4:	af02      	add	r7, sp, #8
24000bd6:	6078      	str	r0, [r7, #4]
  bool ok = false;
24000bd8:	2300      	movs	r3, #0
24000bda:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
24000bdc:	6878      	ldr	r0, [r7, #4]
24000bde:	f7ff ff4f 	bl	24000a80 <flash_page_start>
24000be2:	4603      	mov	r3, r0
24000be4:	f083 0301 	eor.w	r3, r3, #1
24000be8:	b2db      	uxtb	r3, r3
24000bea:	2b00      	cmp	r3, #0
24000bec:	d00f      	beq.n	24000c0e <mg_stm32h7_erase+0x3e>
    MG_ERROR(("%p is not on a sector boundary", addr));
24000bee:	4b44      	ldr	r3, [pc, #272]	@ (24000d00 <mg_stm32h7_erase+0x130>)
24000bf0:	681b      	ldr	r3, [r3, #0]
24000bf2:	2b00      	cmp	r3, #0
24000bf4:	dd7e      	ble.n	24000cf4 <mg_stm32h7_erase+0x124>
24000bf6:	4b43      	ldr	r3, [pc, #268]	@ (24000d04 <mg_stm32h7_erase+0x134>)
24000bf8:	f641 5228 	movw	r2, #7464	@ 0x1d28
24000bfc:	4942      	ldr	r1, [pc, #264]	@ (24000d08 <mg_stm32h7_erase+0x138>)
24000bfe:	2001      	movs	r0, #1
24000c00:	f000 f9b6 	bl	24000f70 <__mg_log_prefix_veneer>
24000c04:	6879      	ldr	r1, [r7, #4]
24000c06:	4841      	ldr	r0, [pc, #260]	@ (24000d0c <mg_stm32h7_erase+0x13c>)
24000c08:	f000 f9ae 	bl	24000f68 <__mg_log_veneer>
24000c0c:	e072      	b.n	24000cf4 <mg_stm32h7_erase+0x124>
    uintptr_t diff = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000c0e:	4b40      	ldr	r3, [pc, #256]	@ (24000d10 <mg_stm32h7_erase+0x140>)
24000c10:	681b      	ldr	r3, [r3, #0]
24000c12:	687a      	ldr	r2, [r7, #4]
24000c14:	1ad3      	subs	r3, r2, r3
24000c16:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / s_mg_flash_stm32h7.secsz;
24000c18:	4b3d      	ldr	r3, [pc, #244]	@ (24000d10 <mg_stm32h7_erase+0x140>)
24000c1a:	689b      	ldr	r3, [r3, #8]
24000c1c:	697a      	ldr	r2, [r7, #20]
24000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
24000c22:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
24000c24:	6878      	ldr	r0, [r7, #4]
24000c26:	f7ff ffad 	bl	24000b84 <flash_bank>
24000c2a:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
24000c2c:	693b      	ldr	r3, [r7, #16]
24000c2e:	330c      	adds	r3, #12
24000c30:	681b      	ldr	r3, [r3, #0]
24000c32:	60fb      	str	r3, [r7, #12]
    flash_unlock();
24000c34:	f7ff feee 	bl	24000a14 <flash_unlock>
    if (sector > 7) sector -= 8;
24000c38:	69bb      	ldr	r3, [r7, #24]
24000c3a:	2b07      	cmp	r3, #7
24000c3c:	d902      	bls.n	24000c44 <mg_stm32h7_erase+0x74>
24000c3e:	69bb      	ldr	r3, [r7, #24]
24000c40:	3b08      	subs	r3, #8
24000c42:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
24000c44:	6938      	ldr	r0, [r7, #16]
24000c46:	f7ff ff76 	bl	24000b36 <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
24000c4a:	693b      	ldr	r3, [r7, #16]
24000c4c:	330c      	adds	r3, #12
24000c4e:	461a      	mov	r2, r3
24000c50:	2320      	movs	r3, #32
24000c52:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
24000c54:	693b      	ldr	r3, [r7, #16]
24000c56:	330c      	adds	r3, #12
24000c58:	681a      	ldr	r2, [r3, #0]
24000c5a:	69bb      	ldr	r3, [r7, #24]
24000c5c:	021b      	lsls	r3, r3, #8
24000c5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24000c62:	6939      	ldr	r1, [r7, #16]
24000c64:	310c      	adds	r1, #12
24000c66:	4313      	orrs	r3, r2
24000c68:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
24000c6a:	693b      	ldr	r3, [r7, #16]
24000c6c:	330c      	adds	r3, #12
24000c6e:	681b      	ldr	r3, [r3, #0]
24000c70:	693a      	ldr	r2, [r7, #16]
24000c72:	320c      	adds	r2, #12
24000c74:	f043 0304 	orr.w	r3, r3, #4
24000c78:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
24000c7a:	693b      	ldr	r3, [r7, #16]
24000c7c:	330c      	adds	r3, #12
24000c7e:	681b      	ldr	r3, [r3, #0]
24000c80:	693a      	ldr	r2, [r7, #16]
24000c82:	320c      	adds	r2, #12
24000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24000c88:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
24000c8a:	6938      	ldr	r0, [r7, #16]
24000c8c:	f7ff ff2a 	bl	24000ae4 <flash_is_err>
24000c90:	4603      	mov	r3, r0
24000c92:	2b00      	cmp	r3, #0
24000c94:	bf14      	ite	ne
24000c96:	2301      	movne	r3, #1
24000c98:	2300      	moveq	r3, #0
24000c9a:	b2db      	uxtb	r3, r3
24000c9c:	f083 0301 	eor.w	r3, r3, #1
24000ca0:	b2db      	uxtb	r3, r3
24000ca2:	77fb      	strb	r3, [r7, #31]
24000ca4:	7ffb      	ldrb	r3, [r7, #31]
24000ca6:	f003 0301 	and.w	r3, r3, #1
24000caa:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
24000cac:	4b14      	ldr	r3, [pc, #80]	@ (24000d00 <mg_stm32h7_erase+0x130>)
24000cae:	681b      	ldr	r3, [r3, #0]
24000cb0:	2b02      	cmp	r3, #2
24000cb2:	dd1a      	ble.n	24000cea <mg_stm32h7_erase+0x11a>
24000cb4:	4b13      	ldr	r3, [pc, #76]	@ (24000d04 <mg_stm32h7_erase+0x134>)
24000cb6:	f641 5238 	movw	r2, #7480	@ 0x1d38
24000cba:	4913      	ldr	r1, [pc, #76]	@ (24000d08 <mg_stm32h7_erase+0x138>)
24000cbc:	2003      	movs	r0, #3
24000cbe:	f000 f957 	bl	24000f70 <__mg_log_prefix_veneer>
24000cc2:	7ffb      	ldrb	r3, [r7, #31]
24000cc4:	2b00      	cmp	r3, #0
24000cc6:	d001      	beq.n	24000ccc <mg_stm32h7_erase+0xfc>
24000cc8:	4912      	ldr	r1, [pc, #72]	@ (24000d14 <mg_stm32h7_erase+0x144>)
24000cca:	e000      	b.n	24000cce <mg_stm32h7_erase+0xfe>
24000ccc:	4912      	ldr	r1, [pc, #72]	@ (24000d18 <mg_stm32h7_erase+0x148>)
24000cce:	693b      	ldr	r3, [r7, #16]
24000cd0:	330c      	adds	r3, #12
24000cd2:	681b      	ldr	r3, [r3, #0]
24000cd4:	693a      	ldr	r2, [r7, #16]
24000cd6:	3210      	adds	r2, #16
24000cd8:	6812      	ldr	r2, [r2, #0]
24000cda:	9201      	str	r2, [sp, #4]
24000cdc:	9300      	str	r3, [sp, #0]
24000cde:	460b      	mov	r3, r1
24000ce0:	687a      	ldr	r2, [r7, #4]
24000ce2:	69b9      	ldr	r1, [r7, #24]
24000ce4:	480d      	ldr	r0, [pc, #52]	@ (24000d1c <mg_stm32h7_erase+0x14c>)
24000ce6:	f000 f93f 	bl	24000f68 <__mg_log_veneer>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
24000cea:	693b      	ldr	r3, [r7, #16]
24000cec:	330c      	adds	r3, #12
24000cee:	461a      	mov	r2, r3
24000cf0:	68fb      	ldr	r3, [r7, #12]
24000cf2:	6013      	str	r3, [r2, #0]
  return ok;
24000cf4:	7ffb      	ldrb	r3, [r7, #31]
}
24000cf6:	4618      	mov	r0, r3
24000cf8:	3720      	adds	r7, #32
24000cfa:	46bd      	mov	sp, r7
24000cfc:	bd80      	pop	{r7, pc}
24000cfe:	bf00      	nop
24000d00:	24000258 	.word	0x24000258
24000d04:	0802db9c 	.word	0x0802db9c
24000d08:	08029e1c 	.word	0x08029e1c
24000d0c:	0802b45c 	.word	0x0802b45c
24000d10:	24000268 	.word	0x24000268
24000d14:	0802a09c 	.word	0x0802a09c
24000d18:	0802a0a0 	.word	0x0802a0a0
24000d1c:	0802b47c 	.word	0x0802b47c

24000d20 <mg_stm32h7_swap>:
MG_IRAM static bool mg_stm32h7_swap(void) {
24000d20:	b580      	push	{r7, lr}
24000d22:	b082      	sub	sp, #8
24000d24:	af00      	add	r7, sp, #0
  if (!is_dualbank()) return true;
24000d26:	f7ff fe63 	bl	240009f0 <is_dualbank>
24000d2a:	4603      	mov	r3, r0
24000d2c:	f083 0301 	eor.w	r3, r3, #1
24000d30:	b2db      	uxtb	r3, r3
24000d32:	2b00      	cmp	r3, #0
24000d34:	d001      	beq.n	24000d3a <mg_stm32h7_swap+0x1a>
24000d36:	2301      	movs	r3, #1
24000d38:	e02e      	b.n	24000d98 <mg_stm32h7_swap+0x78>
  uint32_t bank = FLASH_BASE1;
24000d3a:	4b19      	ldr	r3, [pc, #100]	@ (24000da0 <mg_stm32h7_swap+0x80>)
24000d3c:	607b      	str	r3, [r7, #4]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
24000d3e:	6878      	ldr	r0, [r7, #4]
24000d40:	f7ff ff0c 	bl	24000b5c <flash_bank_is_swapped>
24000d44:	4603      	mov	r3, r0
24000d46:	2b00      	cmp	r3, #0
24000d48:	d001      	beq.n	24000d4e <mg_stm32h7_swap+0x2e>
24000d4a:	2300      	movs	r3, #0
24000d4c:	e001      	b.n	24000d52 <mg_stm32h7_swap+0x32>
24000d4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24000d52:	603b      	str	r3, [r7, #0]
  flash_unlock();
24000d54:	f7ff fe5e 	bl	24000a14 <flash_unlock>
  flash_clear_err(bank);
24000d58:	6878      	ldr	r0, [r7, #4]
24000d5a:	f7ff feec 	bl	24000b36 <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
24000d5e:	687b      	ldr	r3, [r7, #4]
24000d60:	3320      	adds	r3, #32
24000d62:	681b      	ldr	r3, [r3, #0]
24000d64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24000d68:	687b      	ldr	r3, [r7, #4]
24000d6a:	3320      	adds	r3, #32
24000d6c:	4619      	mov	r1, r3
24000d6e:	683b      	ldr	r3, [r7, #0]
24000d70:	4313      	orrs	r3, r2
24000d72:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
24000d74:	687b      	ldr	r3, [r7, #4]
24000d76:	3318      	adds	r3, #24
24000d78:	681b      	ldr	r3, [r3, #0]
24000d7a:	687a      	ldr	r2, [r7, #4]
24000d7c:	3218      	adds	r2, #24
24000d7e:	f043 0302 	orr.w	r3, r3, #2
24000d82:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
24000d84:	bf00      	nop
24000d86:	687b      	ldr	r3, [r7, #4]
24000d88:	331c      	adds	r3, #28
24000d8a:	681b      	ldr	r3, [r3, #0]
24000d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000d90:	683a      	ldr	r2, [r7, #0]
24000d92:	429a      	cmp	r2, r3
24000d94:	d1f7      	bne.n	24000d86 <mg_stm32h7_swap+0x66>
  return true;
24000d96:	2301      	movs	r3, #1
}
24000d98:	4618      	mov	r0, r3
24000d9a:	3708      	adds	r7, #8
24000d9c:	46bd      	mov	sp, r7
24000d9e:	bd80      	pop	{r7, pc}
24000da0:	52002000 	.word	0x52002000

24000da4 <mg_stm32h7_write>:
MG_IRAM static bool mg_stm32h7_write(void *addr, const void *buf, size_t len) {
24000da4:	b580      	push	{r7, lr}
24000da6:	b08c      	sub	sp, #48	@ 0x30
24000da8:	af02      	add	r7, sp, #8
24000daa:	60f8      	str	r0, [r7, #12]
24000dac:	60b9      	str	r1, [r7, #8]
24000dae:	607a      	str	r2, [r7, #4]
  if ((len % s_mg_flash_stm32h7.align) != 0) {
24000db0:	4b4f      	ldr	r3, [pc, #316]	@ (24000ef0 <mg_stm32h7_write+0x14c>)
24000db2:	68da      	ldr	r2, [r3, #12]
24000db4:	687b      	ldr	r3, [r7, #4]
24000db6:	fbb3 f1f2 	udiv	r1, r3, r2
24000dba:	fb01 f202 	mul.w	r2, r1, r2
24000dbe:	1a9b      	subs	r3, r3, r2
24000dc0:	2b00      	cmp	r3, #0
24000dc2:	d013      	beq.n	24000dec <mg_stm32h7_write+0x48>
    MG_ERROR(("%lu is not aligned to %lu", len, s_mg_flash_stm32h7.align));
24000dc4:	4b4b      	ldr	r3, [pc, #300]	@ (24000ef4 <mg_stm32h7_write+0x150>)
24000dc6:	681b      	ldr	r3, [r3, #0]
24000dc8:	2b00      	cmp	r3, #0
24000dca:	dd0d      	ble.n	24000de8 <mg_stm32h7_write+0x44>
24000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (24000ef8 <mg_stm32h7_write+0x154>)
24000dce:	f641 5252 	movw	r2, #7506	@ 0x1d52
24000dd2:	494a      	ldr	r1, [pc, #296]	@ (24000efc <mg_stm32h7_write+0x158>)
24000dd4:	2001      	movs	r0, #1
24000dd6:	f000 f8cb 	bl	24000f70 <__mg_log_prefix_veneer>
24000dda:	4b45      	ldr	r3, [pc, #276]	@ (24000ef0 <mg_stm32h7_write+0x14c>)
24000ddc:	68db      	ldr	r3, [r3, #12]
24000dde:	461a      	mov	r2, r3
24000de0:	6879      	ldr	r1, [r7, #4]
24000de2:	4847      	ldr	r0, [pc, #284]	@ (24000f00 <mg_stm32h7_write+0x15c>)
24000de4:	f000 f8c0 	bl	24000f68 <__mg_log_veneer>
    return false;
24000de8:	2300      	movs	r3, #0
24000dea:	e07d      	b.n	24000ee8 <mg_stm32h7_write+0x144>
  uint32_t bank = flash_bank(addr);
24000dec:	68f8      	ldr	r0, [r7, #12]
24000dee:	f7ff fec9 	bl	24000b84 <flash_bank>
24000df2:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
24000df4:	68fb      	ldr	r3, [r7, #12]
24000df6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
24000df8:	68bb      	ldr	r3, [r7, #8]
24000dfa:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
24000dfc:	68ba      	ldr	r2, [r7, #8]
24000dfe:	687b      	ldr	r3, [r7, #4]
24000e00:	4413      	add	r3, r2
24000e02:	617b      	str	r3, [r7, #20]
  bool ok = true;
24000e04:	2301      	movs	r3, #1
24000e06:	77fb      	strb	r3, [r7, #31]
  MG_ARM_DISABLE_IRQ();
24000e08:	b672      	cpsid	i
  flash_unlock();
24000e0a:	f7ff fe03 	bl	24000a14 <flash_unlock>
  flash_clear_err(bank);
24000e0e:	69b8      	ldr	r0, [r7, #24]
24000e10:	f7ff fe91 	bl	24000b36 <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
24000e14:	69bb      	ldr	r3, [r7, #24]
24000e16:	330c      	adds	r3, #12
24000e18:	461a      	mov	r2, r3
24000e1a:	2302      	movs	r3, #2
24000e1c:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
24000e1e:	69bb      	ldr	r3, [r7, #24]
24000e20:	330c      	adds	r3, #12
24000e22:	681b      	ldr	r3, [r3, #0]
24000e24:	69ba      	ldr	r2, [r7, #24]
24000e26:	320c      	adds	r2, #12
24000e28:	f043 0320 	orr.w	r3, r3, #32
24000e2c:	6013      	str	r3, [r2, #0]
  while (ok && src < end) {
24000e2e:	e024      	b.n	24000e7a <mg_stm32h7_write+0xd6>
    if (flash_page_start(dst) && mg_stm32h7_erase(dst) == false) {
24000e30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000e32:	f7ff fe25 	bl	24000a80 <flash_page_start>
24000e36:	4603      	mov	r3, r0
24000e38:	2b00      	cmp	r3, #0
24000e3a:	d00b      	beq.n	24000e54 <mg_stm32h7_write+0xb0>
24000e3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000e3e:	f7ff fec7 	bl	24000bd0 <mg_stm32h7_erase>
24000e42:	4603      	mov	r3, r0
24000e44:	f083 0301 	eor.w	r3, r3, #1
24000e48:	b2db      	uxtb	r3, r3
24000e4a:	2b00      	cmp	r3, #0
24000e4c:	d002      	beq.n	24000e54 <mg_stm32h7_write+0xb0>
      ok = false;
24000e4e:	2300      	movs	r3, #0
24000e50:	77fb      	strb	r3, [r7, #31]
      break;
24000e52:	e019      	b.n	24000e88 <mg_stm32h7_write+0xe4>
    *(volatile uint32_t *) dst++ = *src++;
24000e54:	6a3a      	ldr	r2, [r7, #32]
24000e56:	1d13      	adds	r3, r2, #4
24000e58:	623b      	str	r3, [r7, #32]
24000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24000e5c:	1d19      	adds	r1, r3, #4
24000e5e:	6279      	str	r1, [r7, #36]	@ 0x24
24000e60:	6812      	ldr	r2, [r2, #0]
24000e62:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
24000e64:	69b8      	ldr	r0, [r7, #24]
24000e66:	f7ff fe53 	bl	24000b10 <flash_wait>
    if (flash_is_err(bank)) ok = false;
24000e6a:	69b8      	ldr	r0, [r7, #24]
24000e6c:	f7ff fe3a 	bl	24000ae4 <flash_is_err>
24000e70:	4603      	mov	r3, r0
24000e72:	2b00      	cmp	r3, #0
24000e74:	d001      	beq.n	24000e7a <mg_stm32h7_write+0xd6>
24000e76:	2300      	movs	r3, #0
24000e78:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
24000e7a:	7ffb      	ldrb	r3, [r7, #31]
24000e7c:	2b00      	cmp	r3, #0
24000e7e:	d003      	beq.n	24000e88 <mg_stm32h7_write+0xe4>
24000e80:	6a3a      	ldr	r2, [r7, #32]
24000e82:	697b      	ldr	r3, [r7, #20]
24000e84:	429a      	cmp	r2, r3
24000e86:	d3d3      	bcc.n	24000e30 <mg_stm32h7_write+0x8c>
  if (!s_flash_irq_disabled) MG_ARM_ENABLE_IRQ();
24000e88:	4b1e      	ldr	r3, [pc, #120]	@ (24000f04 <mg_stm32h7_write+0x160>)
24000e8a:	781b      	ldrb	r3, [r3, #0]
24000e8c:	f083 0301 	eor.w	r3, r3, #1
24000e90:	b2db      	uxtb	r3, r3
24000e92:	2b00      	cmp	r3, #0
24000e94:	d000      	beq.n	24000e98 <mg_stm32h7_write+0xf4>
24000e96:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
24000e98:	4b16      	ldr	r3, [pc, #88]	@ (24000ef4 <mg_stm32h7_write+0x150>)
24000e9a:	681b      	ldr	r3, [r3, #0]
24000e9c:	2b02      	cmp	r3, #2
24000e9e:	dd1a      	ble.n	24000ed6 <mg_stm32h7_write+0x132>
24000ea0:	4b15      	ldr	r3, [pc, #84]	@ (24000ef8 <mg_stm32h7_write+0x154>)
24000ea2:	f641 5269 	movw	r2, #7529	@ 0x1d69
24000ea6:	4915      	ldr	r1, [pc, #84]	@ (24000efc <mg_stm32h7_write+0x158>)
24000ea8:	2003      	movs	r0, #3
24000eaa:	f000 f861 	bl	24000f70 <__mg_log_prefix_veneer>
24000eae:	7ffb      	ldrb	r3, [r7, #31]
24000eb0:	2b00      	cmp	r3, #0
24000eb2:	d001      	beq.n	24000eb8 <mg_stm32h7_write+0x114>
24000eb4:	4914      	ldr	r1, [pc, #80]	@ (24000f08 <mg_stm32h7_write+0x164>)
24000eb6:	e000      	b.n	24000eba <mg_stm32h7_write+0x116>
24000eb8:	4914      	ldr	r1, [pc, #80]	@ (24000f0c <mg_stm32h7_write+0x168>)
24000eba:	69bb      	ldr	r3, [r7, #24]
24000ebc:	330c      	adds	r3, #12
24000ebe:	681b      	ldr	r3, [r3, #0]
24000ec0:	69ba      	ldr	r2, [r7, #24]
24000ec2:	3210      	adds	r2, #16
24000ec4:	6812      	ldr	r2, [r2, #0]
24000ec6:	9201      	str	r2, [sp, #4]
24000ec8:	9300      	str	r3, [sp, #0]
24000eca:	460b      	mov	r3, r1
24000ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24000ece:	6879      	ldr	r1, [r7, #4]
24000ed0:	480f      	ldr	r0, [pc, #60]	@ (24000f10 <mg_stm32h7_write+0x16c>)
24000ed2:	f000 f849 	bl	24000f68 <__mg_log_veneer>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
24000ed6:	69bb      	ldr	r3, [r7, #24]
24000ed8:	330c      	adds	r3, #12
24000eda:	681b      	ldr	r3, [r3, #0]
24000edc:	69ba      	ldr	r2, [r7, #24]
24000ede:	320c      	adds	r2, #12
24000ee0:	f023 0302 	bic.w	r3, r3, #2
24000ee4:	6013      	str	r3, [r2, #0]
  return ok;
24000ee6:	7ffb      	ldrb	r3, [r7, #31]
}
24000ee8:	4618      	mov	r0, r3
24000eea:	3728      	adds	r7, #40	@ 0x28
24000eec:	46bd      	mov	sp, r7
24000eee:	bd80      	pop	{r7, pc}
24000ef0:	24000268 	.word	0x24000268
24000ef4:	24000258 	.word	0x24000258
24000ef8:	0802dbb0 	.word	0x0802dbb0
24000efc:	08029e1c 	.word	0x08029e1c
24000f00:	0802b4a8 	.word	0x0802b4a8
24000f04:	24002364 	.word	0x24002364
24000f08:	0802a09c 	.word	0x0802a09c
24000f0c:	0802a0a0 	.word	0x0802a0a0
24000f10:	0802b4c4 	.word	0x0802b4c4

24000f14 <single_bank_swap>:
MG_IRAM static void single_bank_swap(char *p1, char *p2, size_t s, size_t ss) {
24000f14:	b580      	push	{r7, lr}
24000f16:	b086      	sub	sp, #24
24000f18:	af00      	add	r7, sp, #0
24000f1a:	60f8      	str	r0, [r7, #12]
24000f1c:	60b9      	str	r1, [r7, #8]
24000f1e:	607a      	str	r2, [r7, #4]
24000f20:	603b      	str	r3, [r7, #0]
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000f22:	2300      	movs	r3, #0
24000f24:	617b      	str	r3, [r7, #20]
24000f26:	e00d      	b.n	24000f44 <single_bank_swap+0x30>
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
24000f28:	68fa      	ldr	r2, [r7, #12]
24000f2a:	697b      	ldr	r3, [r7, #20]
24000f2c:	18d0      	adds	r0, r2, r3
24000f2e:	68ba      	ldr	r2, [r7, #8]
24000f30:	697b      	ldr	r3, [r7, #20]
24000f32:	4413      	add	r3, r2
24000f34:	683a      	ldr	r2, [r7, #0]
24000f36:	4619      	mov	r1, r3
24000f38:	f7ff ff34 	bl	24000da4 <mg_stm32h7_write>
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000f3c:	697a      	ldr	r2, [r7, #20]
24000f3e:	683b      	ldr	r3, [r7, #0]
24000f40:	4413      	add	r3, r2
24000f42:	617b      	str	r3, [r7, #20]
24000f44:	697a      	ldr	r2, [r7, #20]
24000f46:	687b      	ldr	r3, [r7, #4]
24000f48:	429a      	cmp	r2, r3
24000f4a:	d3ed      	bcc.n	24000f28 <single_bank_swap+0x14>
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
24000f4c:	4b03      	ldr	r3, [pc, #12]	@ (24000f5c <single_bank_swap+0x48>)
24000f4e:	4a04      	ldr	r2, [pc, #16]	@ (24000f60 <single_bank_swap+0x4c>)
24000f50:	601a      	str	r2, [r3, #0]
}
24000f52:	bf00      	nop
24000f54:	3718      	adds	r7, #24
24000f56:	46bd      	mov	sp, r7
24000f58:	bd80      	pop	{r7, pc}
24000f5a:	bf00      	nop
24000f5c:	e000ed0c 	.word	0xe000ed0c
24000f60:	05fa0004 	.word	0x05fa0004
24000f64:	00000000 	.word	0x00000000

24000f68 <__mg_log_veneer>:
24000f68:	f85f f000 	ldr.w	pc, [pc]	@ 24000f6c <__mg_log_veneer+0x4>
24000f6c:	0800ea0d 	.word	0x0800ea0d

24000f70 <__mg_log_prefix_veneer>:
24000f70:	f85f f000 	ldr.w	pc, [pc]	@ 24000f74 <__mg_log_prefix_veneer+0x4>
24000f74:	0800e96d 	.word	0x0800e96d
