
HTTP_Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c8b8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012458  0802cb88  0802cb88  0002db88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803efe0  0803efe0  0003ffe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803efe8  0803efe8  0003ffe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0803efec  0803efec  0003ffec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000fd8  24000000  0803eff0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RxDescripSection 00000060  24000fd8  0803ffc8  00040fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  24001038  08040028  00041038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c200  24001098  08040088  00041098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2401d298  08040088  00041298  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00041098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000307cf  00000000  00000000  000410c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003976  00000000  00000000  00071895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  00075210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e3b  00000000  00000000  00077660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034f29  00000000  00000000  0007949b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b285  00000000  00000000  000ae3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015675f  00000000  00000000  000d9649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022fda8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c23c  00000000  00000000  0022fdec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0023c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24001098 	.word	0x24001098
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802cb60 	.word	0x0802cb60

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400109c 	.word	0x2400109c
 800030c:	0802cb60 	.word	0x0802cb60

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295
 8000776:	f000 ba0b 	b.w	8000b90 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f885 	bl	8000898 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f878 	bl	8000898 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f867 	bl	8000898 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f859 	bl	8000898 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b9c0 	b.w	8000b90 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f83e 	bl	8000898 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2lz>:
 8000828:	b508      	push	{r3, lr}
 800082a:	4602      	mov	r2, r0
 800082c:	460b      	mov	r3, r1
 800082e:	ec43 2b17 	vmov	d7, r2, r3
 8000832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d403      	bmi.n	8000844 <__aeabi_d2lz+0x1c>
 800083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000840:	f000 b80a 	b.w	8000858 <__aeabi_d2ulz>
 8000844:	eeb1 7b47 	vneg.f64	d7, d7
 8000848:	ec51 0b17 	vmov	r0, r1, d7
 800084c:	f000 f804 	bl	8000858 <__aeabi_d2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_d2ulz>:
 8000858:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000888 <__aeabi_d2ulz+0x30>
 800085c:	ec41 0b17 	vmov	d7, r0, r1
 8000860:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000890 <__aeabi_d2ulz+0x38>
 8000864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000868:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800086c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000870:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000878:	ee16 1a10 	vmov	r1, s12
 800087c:	ee17 0a90 	vmov	r0, s15
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	3df00000 	.word	0x3df00000
 8000890:	00000000 	.word	0x00000000
 8000894:	41f00000 	.word	0x41f00000

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9d08      	ldr	r5, [sp, #32]
 800089e:	468e      	mov	lr, r1
 80008a0:	4604      	mov	r4, r0
 80008a2:	4688      	mov	r8, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14a      	bne.n	800093e <__udivmoddi4+0xa6>
 80008a8:	428a      	cmp	r2, r1
 80008aa:	4617      	mov	r7, r2
 80008ac:	d962      	bls.n	8000974 <__udivmoddi4+0xdc>
 80008ae:	fab2 f682 	clz	r6, r2
 80008b2:	b14e      	cbz	r6, 80008c8 <__udivmoddi4+0x30>
 80008b4:	f1c6 0320 	rsb	r3, r6, #32
 80008b8:	fa01 f806 	lsl.w	r8, r1, r6
 80008bc:	fa20 f303 	lsr.w	r3, r0, r3
 80008c0:	40b7      	lsls	r7, r6
 80008c2:	ea43 0808 	orr.w	r8, r3, r8
 80008c6:	40b4      	lsls	r4, r6
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f fc87 	uxth.w	ip, r7
 80008d0:	fbb8 f1fe 	udiv	r1, r8, lr
 80008d4:	0c23      	lsrs	r3, r4, #16
 80008d6:	fb0e 8811 	mls	r8, lr, r1, r8
 80008da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008de:	fb01 f20c 	mul.w	r2, r1, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d909      	bls.n	80008fa <__udivmoddi4+0x62>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f101 30ff 	add.w	r0, r1, #4294967295
 80008ec:	f080 80ea 	bcs.w	8000ac4 <__udivmoddi4+0x22c>
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f240 80e7 	bls.w	8000ac4 <__udivmoddi4+0x22c>
 80008f6:	3902      	subs	r1, #2
 80008f8:	443b      	add	r3, r7
 80008fa:	1a9a      	subs	r2, r3, r2
 80008fc:	b2a3      	uxth	r3, r4
 80008fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000902:	fb0e 2210 	mls	r2, lr, r0, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb00 fc0c 	mul.w	ip, r0, ip
 800090e:	459c      	cmp	ip, r3
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0x8e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f100 32ff 	add.w	r2, r0, #4294967295
 8000918:	f080 80d6 	bcs.w	8000ac8 <__udivmoddi4+0x230>
 800091c:	459c      	cmp	ip, r3
 800091e:	f240 80d3 	bls.w	8000ac8 <__udivmoddi4+0x230>
 8000922:	443b      	add	r3, r7
 8000924:	3802      	subs	r0, #2
 8000926:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800092a:	eba3 030c 	sub.w	r3, r3, ip
 800092e:	2100      	movs	r1, #0
 8000930:	b11d      	cbz	r5, 800093a <__udivmoddi4+0xa2>
 8000932:	40f3      	lsrs	r3, r6
 8000934:	2200      	movs	r2, #0
 8000936:	e9c5 3200 	strd	r3, r2, [r5]
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	428b      	cmp	r3, r1
 8000940:	d905      	bls.n	800094e <__udivmoddi4+0xb6>
 8000942:	b10d      	cbz	r5, 8000948 <__udivmoddi4+0xb0>
 8000944:	e9c5 0100 	strd	r0, r1, [r5]
 8000948:	2100      	movs	r1, #0
 800094a:	4608      	mov	r0, r1
 800094c:	e7f5      	b.n	800093a <__udivmoddi4+0xa2>
 800094e:	fab3 f183 	clz	r1, r3
 8000952:	2900      	cmp	r1, #0
 8000954:	d146      	bne.n	80009e4 <__udivmoddi4+0x14c>
 8000956:	4573      	cmp	r3, lr
 8000958:	d302      	bcc.n	8000960 <__udivmoddi4+0xc8>
 800095a:	4282      	cmp	r2, r0
 800095c:	f200 8105 	bhi.w	8000b6a <__udivmoddi4+0x2d2>
 8000960:	1a84      	subs	r4, r0, r2
 8000962:	eb6e 0203 	sbc.w	r2, lr, r3
 8000966:	2001      	movs	r0, #1
 8000968:	4690      	mov	r8, r2
 800096a:	2d00      	cmp	r5, #0
 800096c:	d0e5      	beq.n	800093a <__udivmoddi4+0xa2>
 800096e:	e9c5 4800 	strd	r4, r8, [r5]
 8000972:	e7e2      	b.n	800093a <__udivmoddi4+0xa2>
 8000974:	2a00      	cmp	r2, #0
 8000976:	f000 8090 	beq.w	8000a9a <__udivmoddi4+0x202>
 800097a:	fab2 f682 	clz	r6, r2
 800097e:	2e00      	cmp	r6, #0
 8000980:	f040 80a4 	bne.w	8000acc <__udivmoddi4+0x234>
 8000984:	1a8a      	subs	r2, r1, r2
 8000986:	0c03      	lsrs	r3, r0, #16
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	b280      	uxth	r0, r0
 800098e:	b2bc      	uxth	r4, r7
 8000990:	2101      	movs	r1, #1
 8000992:	fbb2 fcfe 	udiv	ip, r2, lr
 8000996:	fb0e 221c 	mls	r2, lr, ip, r2
 800099a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800099e:	fb04 f20c 	mul.w	r2, r4, ip
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d907      	bls.n	80009b6 <__udivmoddi4+0x11e>
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009ac:	d202      	bcs.n	80009b4 <__udivmoddi4+0x11c>
 80009ae:	429a      	cmp	r2, r3
 80009b0:	f200 80e0 	bhi.w	8000b74 <__udivmoddi4+0x2dc>
 80009b4:	46c4      	mov	ip, r8
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	fbb3 f2fe 	udiv	r2, r3, lr
 80009bc:	fb0e 3312 	mls	r3, lr, r2, r3
 80009c0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009c4:	fb02 f404 	mul.w	r4, r2, r4
 80009c8:	429c      	cmp	r4, r3
 80009ca:	d907      	bls.n	80009dc <__udivmoddi4+0x144>
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	f102 30ff 	add.w	r0, r2, #4294967295
 80009d2:	d202      	bcs.n	80009da <__udivmoddi4+0x142>
 80009d4:	429c      	cmp	r4, r3
 80009d6:	f200 80ca 	bhi.w	8000b6e <__udivmoddi4+0x2d6>
 80009da:	4602      	mov	r2, r0
 80009dc:	1b1b      	subs	r3, r3, r4
 80009de:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009e2:	e7a5      	b.n	8000930 <__udivmoddi4+0x98>
 80009e4:	f1c1 0620 	rsb	r6, r1, #32
 80009e8:	408b      	lsls	r3, r1
 80009ea:	fa22 f706 	lsr.w	r7, r2, r6
 80009ee:	431f      	orrs	r7, r3
 80009f0:	fa0e f401 	lsl.w	r4, lr, r1
 80009f4:	fa20 f306 	lsr.w	r3, r0, r6
 80009f8:	fa2e fe06 	lsr.w	lr, lr, r6
 80009fc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a00:	4323      	orrs	r3, r4
 8000a02:	fa00 f801 	lsl.w	r8, r0, r1
 8000a06:	fa1f fc87 	uxth.w	ip, r7
 8000a0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000a0e:	0c1c      	lsrs	r4, r3, #16
 8000a10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a22:	d909      	bls.n	8000a38 <__udivmoddi4+0x1a0>
 8000a24:	193c      	adds	r4, r7, r4
 8000a26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a2a:	f080 809c 	bcs.w	8000b66 <__udivmoddi4+0x2ce>
 8000a2e:	45a6      	cmp	lr, r4
 8000a30:	f240 8099 	bls.w	8000b66 <__udivmoddi4+0x2ce>
 8000a34:	3802      	subs	r0, #2
 8000a36:	443c      	add	r4, r7
 8000a38:	eba4 040e 	sub.w	r4, r4, lr
 8000a3c:	fa1f fe83 	uxth.w	lr, r3
 8000a40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a44:	fb09 4413 	mls	r4, r9, r3, r4
 8000a48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a50:	45a4      	cmp	ip, r4
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1ce>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a5a:	f080 8082 	bcs.w	8000b62 <__udivmoddi4+0x2ca>
 8000a5e:	45a4      	cmp	ip, r4
 8000a60:	d97f      	bls.n	8000b62 <__udivmoddi4+0x2ca>
 8000a62:	3b02      	subs	r3, #2
 8000a64:	443c      	add	r4, r7
 8000a66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a6a:	eba4 040c 	sub.w	r4, r4, ip
 8000a6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a72:	4564      	cmp	r4, ip
 8000a74:	4673      	mov	r3, lr
 8000a76:	46e1      	mov	r9, ip
 8000a78:	d362      	bcc.n	8000b40 <__udivmoddi4+0x2a8>
 8000a7a:	d05f      	beq.n	8000b3c <__udivmoddi4+0x2a4>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x1fe>
 8000a7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000a82:	eb64 0409 	sbc.w	r4, r4, r9
 8000a86:	fa04 f606 	lsl.w	r6, r4, r6
 8000a8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000a8e:	431e      	orrs	r6, r3
 8000a90:	40cc      	lsrs	r4, r1
 8000a92:	e9c5 6400 	strd	r6, r4, [r5]
 8000a96:	2100      	movs	r1, #0
 8000a98:	e74f      	b.n	800093a <__udivmoddi4+0xa2>
 8000a9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a9e:	0c01      	lsrs	r1, r0, #16
 8000aa0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000aa4:	b280      	uxth	r0, r0
 8000aa6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4638      	mov	r0, r7
 8000aae:	463c      	mov	r4, r7
 8000ab0:	46b8      	mov	r8, r7
 8000ab2:	46be      	mov	lr, r7
 8000ab4:	2620      	movs	r6, #32
 8000ab6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aba:	eba2 0208 	sub.w	r2, r2, r8
 8000abe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ac2:	e766      	b.n	8000992 <__udivmoddi4+0xfa>
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	e718      	b.n	80008fa <__udivmoddi4+0x62>
 8000ac8:	4610      	mov	r0, r2
 8000aca:	e72c      	b.n	8000926 <__udivmoddi4+0x8e>
 8000acc:	f1c6 0220 	rsb	r2, r6, #32
 8000ad0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	40b1      	lsls	r1, r6
 8000ad8:	fa20 f202 	lsr.w	r2, r0, r2
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ae6:	b2bc      	uxth	r4, r7
 8000ae8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000aec:	0c11      	lsrs	r1, r2, #16
 8000aee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af2:	fb08 f904 	mul.w	r9, r8, r4
 8000af6:	40b0      	lsls	r0, r6
 8000af8:	4589      	cmp	r9, r1
 8000afa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000afe:	b280      	uxth	r0, r0
 8000b00:	d93e      	bls.n	8000b80 <__udivmoddi4+0x2e8>
 8000b02:	1879      	adds	r1, r7, r1
 8000b04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b08:	d201      	bcs.n	8000b0e <__udivmoddi4+0x276>
 8000b0a:	4589      	cmp	r9, r1
 8000b0c:	d81f      	bhi.n	8000b4e <__udivmoddi4+0x2b6>
 8000b0e:	eba1 0109 	sub.w	r1, r1, r9
 8000b12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b16:	fb09 f804 	mul.w	r8, r9, r4
 8000b1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b1e:	b292      	uxth	r2, r2
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	4542      	cmp	r2, r8
 8000b26:	d229      	bcs.n	8000b7c <__udivmoddi4+0x2e4>
 8000b28:	18ba      	adds	r2, r7, r2
 8000b2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b2e:	d2c4      	bcs.n	8000aba <__udivmoddi4+0x222>
 8000b30:	4542      	cmp	r2, r8
 8000b32:	d2c2      	bcs.n	8000aba <__udivmoddi4+0x222>
 8000b34:	f1a9 0102 	sub.w	r1, r9, #2
 8000b38:	443a      	add	r2, r7
 8000b3a:	e7be      	b.n	8000aba <__udivmoddi4+0x222>
 8000b3c:	45f0      	cmp	r8, lr
 8000b3e:	d29d      	bcs.n	8000a7c <__udivmoddi4+0x1e4>
 8000b40:	ebbe 0302 	subs.w	r3, lr, r2
 8000b44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b48:	3801      	subs	r0, #1
 8000b4a:	46e1      	mov	r9, ip
 8000b4c:	e796      	b.n	8000a7c <__udivmoddi4+0x1e4>
 8000b4e:	eba7 0909 	sub.w	r9, r7, r9
 8000b52:	4449      	add	r1, r9
 8000b54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5c:	fb09 f804 	mul.w	r8, r9, r4
 8000b60:	e7db      	b.n	8000b1a <__udivmoddi4+0x282>
 8000b62:	4673      	mov	r3, lr
 8000b64:	e77f      	b.n	8000a66 <__udivmoddi4+0x1ce>
 8000b66:	4650      	mov	r0, sl
 8000b68:	e766      	b.n	8000a38 <__udivmoddi4+0x1a0>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e6fd      	b.n	800096a <__udivmoddi4+0xd2>
 8000b6e:	443b      	add	r3, r7
 8000b70:	3a02      	subs	r2, #2
 8000b72:	e733      	b.n	80009dc <__udivmoddi4+0x144>
 8000b74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b78:	443b      	add	r3, r7
 8000b7a:	e71c      	b.n	80009b6 <__udivmoddi4+0x11e>
 8000b7c:	4649      	mov	r1, r9
 8000b7e:	e79c      	b.n	8000aba <__udivmoddi4+0x222>
 8000b80:	eba1 0109 	sub.w	r1, r1, r9
 8000b84:	46c4      	mov	ip, r8
 8000b86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b8a:	fb09 f804 	mul.w	r8, r9, r4
 8000b8e:	e7c4      	b.n	8000b1a <__udivmoddi4+0x282>

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e01a      	b.n	8000bda <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4810      	ldr	r0, [pc, #64]	@ (8000bec <mg_random+0x58>)
 8000bac:	f006 fb6a 	bl	8007284 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	18d0      	adds	r0, r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d203      	bcs.n	8000bc8 <mg_random+0x34>
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	e000      	b.n	8000bca <mg_random+0x36>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	f107 0108 	add.w	r1, r7, #8
 8000bce:	461a      	mov	r2, r3
 8000bd0:	f029 f815 	bl	8029bfe <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d3e0      	bcc.n	8000ba4 <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	240011f0 	.word	0x240011f0

08000bf0 <mg_millis>:

uint64_t mg_millis(void) {
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000bf4:	f001 ffba 	bl	8002b6c <HAL_GetTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	461c      	mov	r4, r3
 8000bfe:	4615      	mov	r5, r2
 8000c00:	4622      	mov	r2, r4
 8000c02:	462b      	mov	r3, r5
}
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c0c <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d002      	beq.n	8000c24 <_write+0x18>
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d107      	bne.n	8000c34 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <_write+0x34>)
 8000c30:	f006 fc7d 	bl	800752e <HAL_UART_Transmit>
  }
  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	24001204 	.word	0x24001204

08000c44 <http_event_handler>:

static void http_event_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_HTTP_MSG) {
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	2b0b      	cmp	r3, #11
 8000c56:	d149      	bne.n	8000cec <http_event_handler+0xa8>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]

    // Fix: use pointer for header
    const struct mg_str *cl_hdr = mg_http_get_header(hm, "Content-Length");
 8000c5c:	492c      	ldr	r1, [pc, #176]	@ (8000d10 <http_event_handler+0xcc>)
 8000c5e:	69b8      	ldr	r0, [r7, #24]
 8000c60:	f00a fd86 	bl	800b770 <mg_http_get_header>
 8000c64:	6178      	str	r0, [r7, #20]
    size_t expected_len = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    if (cl_hdr != NULL && cl_hdr->len > 0) {
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00a      	beq.n	8000c86 <http_event_handler+0x42>
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <http_event_handler+0x42>
      expected_len = (size_t) atoi(cl_hdr->buf);
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f025 fdc0 	bl	8026802 <atoi>
 8000c82:	4603      	mov	r3, r0
 8000c84:	61fb      	str	r3, [r7, #28]
    }

    printf("Received body length: %d\r\n", (int) hm->body.len);
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <http_event_handler+0xd0>)
 8000c90:	f027 fb74 	bl	802837c <iprintf>
    if (expected_len > 0 && hm->body.len < expected_len) {
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <http_event_handler+0x62>
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d830      	bhi.n	8000d08 <http_event_handler+0xc4>
      // Incomplete body, wait for more
      return;
    }

    size_t copy_len = hm->body.len < MAX_RESPONSE_SIZE - 1 ? hm->body.len : MAX_RESPONSE_SIZE - 1;
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <http_event_handler+0xd4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	bf28      	it	cs
 8000cb2:	4613      	movcs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
    memcpy(response_buf, hm->body.buf, copy_len);
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4816      	ldr	r0, [pc, #88]	@ (8000d1c <http_event_handler+0xd8>)
 8000cc2:	f028 ff9c 	bl	8029bfe <memcpy>
    response_buf[copy_len] = '\0';
 8000cc6:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <http_event_handler+0xd8>)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4413      	add	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
    response_len = copy_len;
 8000cd0:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <http_event_handler+0xdc>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6013      	str	r3, [r2, #0]

    printf("HTTP Response: %.*s\r\n", (int) response_len, response_buf);
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <http_event_handler+0xdc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a10      	ldr	r2, [pc, #64]	@ (8000d1c <http_event_handler+0xd8>)
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <http_event_handler+0xe0>)
 8000ce0:	f027 fb4c 	bl	802837c <iprintf>

    request_done = true;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <http_event_handler+0xe4>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e00e      	b.n	8000d0a <http_event_handler+0xc6>
  }
  else if (ev == MG_EV_CLOSE && !request_done) {
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b09      	cmp	r3, #9
 8000cf0:	d10b      	bne.n	8000d0a <http_event_handler+0xc6>
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <http_event_handler+0xe4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <http_event_handler+0xc6>
    printf("HTTP request failed or connection closed early\r\n");
 8000d00:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <http_event_handler+0xe8>)
 8000d02:	f027 fbdf 	bl	80284c4 <puts>
 8000d06:	e000      	b.n	8000d0a <http_event_handler+0xc6>
      return;
 8000d08:	bf00      	nop
  }
}
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	0802cb88 	.word	0x0802cb88
 8000d14:	0802cb98 	.word	0x0802cb98
 8000d18:	0001869f 	.word	0x0001869f
 8000d1c:	24001298 	.word	0x24001298
 8000d20:	24019938 	.word	0x24019938
 8000d24:	0802cbb4 	.word	0x0802cbb4
 8000d28:	2401993c 	.word	0x2401993c
 8000d2c:	0802cbcc 	.word	0x0802cbcc

08000d30 <perform_http_data_read>:




void perform_http_data_read(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  request_done = false;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <perform_http_data_read+0x84>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

  struct mg_connection *c = mg_http_connect(&g_mgr, API_URL, http_event_handler, NULL);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000db8 <perform_http_data_read+0x88>)
 8000d40:	491e      	ldr	r1, [pc, #120]	@ (8000dbc <perform_http_data_read+0x8c>)
 8000d42:	481f      	ldr	r0, [pc, #124]	@ (8000dc0 <perform_http_data_read+0x90>)
 8000d44:	f00d fbb6 	bl	800e4b4 <mg_http_connect>
 8000d48:	6078      	str	r0, [r7, #4]
  if (c == NULL) {
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <perform_http_data_read+0x28>
    printf("HTTP connect failed\r\n");
 8000d50:	481c      	ldr	r0, [pc, #112]	@ (8000dc4 <perform_http_data_read+0x94>)
 8000d52:	f027 fbb7 	bl	80284c4 <puts>
    return;
 8000d56:	e029      	b.n	8000dac <perform_http_data_read+0x7c>
  }

  mg_printf(c, "GET %s HTTP/1.0\r\nHost: 192.168.1.133\r\n\r\n", "/api/stats?start=-1h&stop=now()");
 8000d58:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc8 <perform_http_data_read+0x98>)
 8000d5a:	491c      	ldr	r1, [pc, #112]	@ (8000dcc <perform_http_data_read+0x9c>)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f00e fe4d 	bl	800f9fc <mg_printf>

  uint32_t start = HAL_GetTick();
 8000d62:	f001 ff03 	bl	8002b6c <HAL_GetTick>
 8000d66:	6038      	str	r0, [r7, #0]
  while (!request_done && HAL_GetTick() - start < 7000) {
 8000d68:	e006      	b.n	8000d78 <perform_http_data_read+0x48>
    mg_mgr_poll(&g_mgr, 10);  // Poll with more responsiveness
 8000d6a:	210a      	movs	r1, #10
 8000d6c:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <perform_http_data_read+0x90>)
 8000d6e:	f012 fe4f 	bl	8013a10 <mg_mgr_poll>
    HAL_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f001 ff06 	bl	8002b84 <HAL_Delay>
  while (!request_done && HAL_GetTick() - start < 7000) {
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <perform_http_data_read+0x84>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <perform_http_data_read+0x68>
 8000d86:	f001 fef1 	bl	8002b6c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d9e8      	bls.n	8000d6a <perform_http_data_read+0x3a>
  }

  if (!request_done) {
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <perform_http_data_read+0x84>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	f083 0301 	eor.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <perform_http_data_read+0x7c>
    printf("Request timed out or incomplete\r\n");
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <perform_http_data_read+0xa0>)
 8000da8:	f027 fb8c 	bl	80284c4 <puts>
  }
}
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2401993c 	.word	0x2401993c
 8000db8:	08000c45 	.word	0x08000c45
 8000dbc:	0802cbfc 	.word	0x0802cbfc
 8000dc0:	2401d0b8 	.word	0x2401d0b8
 8000dc4:	0802cc38 	.word	0x0802cc38
 8000dc8:	0802cc50 	.word	0x0802cc50
 8000dcc:	0802cc70 	.word	0x0802cc70
 8000dd0:	0802cc9c 	.word	0x0802cc9c

08000dd4 <wait_for_network_ready>:



void wait_for_network_ready(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  uint32_t start = HAL_GetTick();
 8000dda:	f001 fec7 	bl	8002b6c <HAL_GetTick>
 8000dde:	6078      	str	r0, [r7, #4]
  while (HAL_GetTick() - start < 500) {
 8000de0:	e004      	b.n	8000dec <wait_for_network_ready+0x18>
    mongoose_poll();   // gives time for ARP retry and TCP/IP setup
 8000de2:	f025 fcd9 	bl	8026798 <mongoose_poll>
    HAL_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f001 fecc 	bl	8002b84 <HAL_Delay>
  while (HAL_GetTick() - start < 500) {
 8000dec:	f001 febe 	bl	8002b6c <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dfa:	d3f2      	bcc.n	8000de2 <wait_for_network_ready+0xe>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <write_json_to_nfc>:
    return atof(buf);  // Or strtod(buf, NULL) for more control
}



void write_json_to_nfc(const char *json_data, size_t json_len) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	f5ad 5dfc 	sub.w	sp, sp, #8064	@ 0x1f80
 8000e0e:	af04      	add	r7, sp, #16
 8000e10:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000e14:	f6a3 736c 	subw	r3, r3, #3948	@ 0xf6c
 8000e18:	6018      	str	r0, [r3, #0]
 8000e1a:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000e1e:	f5a3 6377 	sub.w	r3, r3, #3952	@ 0xf70
 8000e22:	6019      	str	r1, [r3, #0]
    uint16_t i2c_addr = 0x53 << 1;   // ST25DV I2C address
 8000e24:	23a6      	movs	r3, #166	@ 0xa6
 8000e26:	f641 7268 	movw	r2, #8040	@ 0x1f68
 8000e2a:	443a      	add	r2, r7
 8000e2c:	8013      	strh	r3, [r2, #0]
    uint16_t mem_addr = 0x0008;      // NDEF start offset
 8000e2e:	2308      	movs	r3, #8
 8000e30:	f641 7266 	movw	r2, #8038	@ 0x1f66
 8000e34:	443a      	add	r2, r7
 8000e36:	8013      	strh	r3, [r2, #0]
    HAL_StatusTypeDef status;

    if (json_len > 8000) {
 8000e38:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000e3c:	f5a3 6377 	sub.w	r3, r3, #3952	@ 0xf70
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000e46:	d908      	bls.n	8000e5a <write_json_to_nfc+0x52>
        printf("Error: JSON too large for NFC memory (%lu bytes)\n", (unsigned long)json_len);
 8000e48:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000e4c:	f5a3 6377 	sub.w	r3, r3, #3952	@ 0xf70
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	4831      	ldr	r0, [pc, #196]	@ (8000f18 <write_json_to_nfc+0x110>)
 8000e54:	f027 fa92 	bl	802837c <iprintf>
        return;
 8000e58:	e1ff      	b.n	800125a <write_json_to_nfc+0x452>
    }

    const char* mime_type = "application/json";
 8000e5a:	4b30      	ldr	r3, [pc, #192]	@ (8000f1c <write_json_to_nfc+0x114>)
 8000e5c:	f507 52fb 	add.w	r2, r7, #8032	@ 0x1f60
 8000e60:	6013      	str	r3, [r2, #0]
    uint8_t type_length = strlen(mime_type);
 8000e62:	f507 53fb 	add.w	r3, r7, #8032	@ 0x1f60
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f7ff fab2 	bl	80003d0 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f641 725f 	movw	r2, #8031	@ 0x1f5f
 8000e72:	443a      	add	r2, r7
 8000e74:	7013      	strb	r3, [r2, #0]
    uint8_t ndef_header_size = 1 + 1 + 4;
 8000e76:	2306      	movs	r3, #6
 8000e78:	f641 725e 	movw	r2, #8030	@ 0x1f5e
 8000e7c:	443a      	add	r2, r7
 8000e7e:	7013      	strb	r3, [r2, #0]

    uint32_t payload_length = json_len;
 8000e80:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000e84:	f5a3 6377 	sub.w	r3, r3, #3952	@ 0xf70
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f641 7258 	movw	r2, #8024	@ 0x1f58
 8000e8e:	443a      	add	r2, r7
 8000e90:	6013      	str	r3, [r2, #0]
    uint32_t ndef_record_length = ndef_header_size + type_length + payload_length;
 8000e92:	f641 735e 	movw	r3, #8030	@ 0x1f5e
 8000e96:	443b      	add	r3, r7
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	f641 735f 	movw	r3, #8031	@ 0x1f5f
 8000e9e:	443b      	add	r3, r7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	f641 7358 	movw	r3, #8024	@ 0x1f58
 8000eaa:	443b      	add	r3, r7
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	f641 7254 	movw	r2, #8020	@ 0x1f54
 8000eb4:	443a      	add	r2, r7
 8000eb6:	6013      	str	r3, [r2, #0]

    uint8_t ndef_buffer[MAX_NDEF_SIZE];
    uint16_t total_ndef_message_size = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f641 726e 	movw	r2, #8046	@ 0x1f6e
 8000ebe:	443a      	add	r2, r7
 8000ec0:	8013      	strh	r3, [r2, #0]

    // TLV block
    ndef_buffer[total_ndef_message_size++] = 0x03;  // TLV type
 8000ec2:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000ec6:	443b      	add	r3, r7
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8000ed0:	4439      	add	r1, r7
 8000ed2:	800a      	strh	r2, [r1, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000eda:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000ede:	2103      	movs	r1, #3
 8000ee0:	5499      	strb	r1, [r3, r2]
    if (ndef_record_length < 0xFF) {
 8000ee2:	f641 7354 	movw	r3, #8020	@ 0x1f54
 8000ee6:	443b      	add	r3, r7
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eec:	d818      	bhi.n	8000f20 <write_json_to_nfc+0x118>
        ndef_buffer[total_ndef_message_size++] = (uint8_t)ndef_record_length;
 8000eee:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000ef2:	443b      	add	r3, r7
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8000efc:	4439      	add	r1, r7
 8000efe:	800a      	strh	r2, [r1, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	f641 7354 	movw	r3, #8020	@ 0x1f54
 8000f06:	443b      	add	r3, r7
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b2d9      	uxtb	r1, r3
 8000f0c:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000f10:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000f14:	5499      	strb	r1, [r3, r2]
 8000f16:	e03c      	b.n	8000f92 <write_json_to_nfc+0x18a>
 8000f18:	0802ccc0 	.word	0x0802ccc0
 8000f1c:	0802ccf4 	.word	0x0802ccf4
    } else {
        ndef_buffer[total_ndef_message_size++] = 0xFF;
 8000f20:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000f24:	443b      	add	r3, r7
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8000f2e:	4439      	add	r1, r7
 8000f30:	800a      	strh	r2, [r1, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000f38:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000f3c:	21ff      	movs	r1, #255	@ 0xff
 8000f3e:	5499      	strb	r1, [r3, r2]
        ndef_buffer[total_ndef_message_size++] = (ndef_record_length >> 8) & 0xFF;
 8000f40:	f641 7354 	movw	r3, #8020	@ 0x1f54
 8000f44:	443b      	add	r3, r7
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0a19      	lsrs	r1, r3, #8
 8000f4a:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000f4e:	443b      	add	r3, r7
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	f641 706e 	movw	r0, #8046	@ 0x1f6e
 8000f58:	4438      	add	r0, r7
 8000f5a:	8002      	strh	r2, [r0, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	b2c9      	uxtb	r1, r1
 8000f60:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000f64:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000f68:	5499      	strb	r1, [r3, r2]
        ndef_buffer[total_ndef_message_size++] = ndef_record_length & 0xFF;
 8000f6a:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000f6e:	443b      	add	r3, r7
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8000f78:	4439      	add	r1, r7
 8000f7a:	800a      	strh	r2, [r1, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f641 7354 	movw	r3, #8020	@ 0x1f54
 8000f82:	443b      	add	r3, r7
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b2d9      	uxtb	r1, r3
 8000f88:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000f8c:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000f90:	5499      	strb	r1, [r3, r2]
    }

    // NDEF Record header
    ndef_buffer[total_ndef_message_size++] = 0xC2;  // MIME type record
 8000f92:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000f96:	443b      	add	r3, r7
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8000fa0:	4439      	add	r1, r7
 8000fa2:	800a      	strh	r2, [r1, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000faa:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000fae:	21c2      	movs	r1, #194	@ 0xc2
 8000fb0:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = type_length;
 8000fb2:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000fb6:	443b      	add	r3, r7
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8000fc0:	4439      	add	r1, r7
 8000fc2:	800a      	strh	r2, [r1, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000fca:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8000fce:	f641 725f 	movw	r2, #8031	@ 0x1f5f
 8000fd2:	443a      	add	r2, r7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	545a      	strb	r2, [r3, r1]
    ndef_buffer[total_ndef_message_size++] = (payload_length >> 24) & 0xFF;
 8000fd8:	f641 7358 	movw	r3, #8024	@ 0x1f58
 8000fdc:	443b      	add	r3, r7
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0e19      	lsrs	r1, r3, #24
 8000fe2:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8000fe6:	443b      	add	r3, r7
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	f641 706e 	movw	r0, #8046	@ 0x1f6e
 8000ff0:	4438      	add	r0, r7
 8000ff2:	8002      	strh	r2, [r0, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	b2c9      	uxtb	r1, r1
 8000ff8:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8000ffc:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8001000:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = (payload_length >> 16) & 0xFF;
 8001002:	f641 7358 	movw	r3, #8024	@ 0x1f58
 8001006:	443b      	add	r3, r7
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0c19      	lsrs	r1, r3, #16
 800100c:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8001010:	443b      	add	r3, r7
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	f641 706e 	movw	r0, #8046	@ 0x1f6e
 800101a:	4438      	add	r0, r7
 800101c:	8002      	strh	r2, [r0, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	b2c9      	uxtb	r1, r1
 8001022:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8001026:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 800102a:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = (payload_length >> 8) & 0xFF;
 800102c:	f641 7358 	movw	r3, #8024	@ 0x1f58
 8001030:	443b      	add	r3, r7
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0a19      	lsrs	r1, r3, #8
 8001036:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 800103a:	443b      	add	r3, r7
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	f641 706e 	movw	r0, #8046	@ 0x1f6e
 8001044:	4438      	add	r0, r7
 8001046:	8002      	strh	r2, [r0, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	b2c9      	uxtb	r1, r1
 800104c:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8001050:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8001054:	5499      	strb	r1, [r3, r2]
    ndef_buffer[total_ndef_message_size++] = payload_length & 0xFF;
 8001056:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 800105a:	443b      	add	r3, r7
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 8001064:	4439      	add	r1, r7
 8001066:	800a      	strh	r2, [r1, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	f641 7358 	movw	r3, #8024	@ 0x1f58
 800106e:	443b      	add	r3, r7
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b2d9      	uxtb	r1, r3
 8001074:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8001078:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 800107c:	5499      	strb	r1, [r3, r2]

    memcpy(&ndef_buffer[total_ndef_message_size], mime_type, type_length);
 800107e:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8001082:	443b      	add	r3, r7
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	4b77      	ldr	r3, [pc, #476]	@ (8001264 <write_json_to_nfc+0x45c>)
 8001088:	f503 53fb 	add.w	r3, r3, #8032	@ 0x1f60
 800108c:	f103 0310 	add.w	r3, r3, #16
 8001090:	443b      	add	r3, r7
 8001092:	4413      	add	r3, r2
 8001094:	f641 725f 	movw	r2, #8031	@ 0x1f5f
 8001098:	443a      	add	r2, r7
 800109a:	7812      	ldrb	r2, [r2, #0]
 800109c:	f507 51fb 	add.w	r1, r7, #8032	@ 0x1f60
 80010a0:	6809      	ldr	r1, [r1, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f028 fdab 	bl	8029bfe <memcpy>
    total_ndef_message_size += type_length;
 80010a8:	f641 735f 	movw	r3, #8031	@ 0x1f5f
 80010ac:	443b      	add	r3, r7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 80010b6:	443b      	add	r3, r7
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	f641 726e 	movw	r2, #8046	@ 0x1f6e
 80010c0:	443a      	add	r2, r7
 80010c2:	8013      	strh	r3, [r2, #0]

    memcpy(&ndef_buffer[total_ndef_message_size], json_data, payload_length);
 80010c4:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 80010c8:	443b      	add	r3, r7
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	4b65      	ldr	r3, [pc, #404]	@ (8001264 <write_json_to_nfc+0x45c>)
 80010ce:	f503 53fb 	add.w	r3, r3, #8032	@ 0x1f60
 80010d2:	f103 0310 	add.w	r3, r3, #16
 80010d6:	443b      	add	r3, r7
 80010d8:	1898      	adds	r0, r3, r2
 80010da:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 80010de:	f6a3 736c 	subw	r3, r3, #3948	@ 0xf6c
 80010e2:	f641 7258 	movw	r2, #8024	@ 0x1f58
 80010e6:	443a      	add	r2, r7
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	6819      	ldr	r1, [r3, #0]
 80010ec:	f028 fd87 	bl	8029bfe <memcpy>
    total_ndef_message_size += payload_length;
 80010f0:	f641 7358 	movw	r3, #8024	@ 0x1f58
 80010f4:	443b      	add	r3, r7
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 80010fe:	443b      	add	r3, r7
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	f641 726e 	movw	r2, #8046	@ 0x1f6e
 8001108:	443a      	add	r2, r7
 800110a:	8013      	strh	r3, [r2, #0]

    ndef_buffer[total_ndef_message_size++] = 0xFE;  // Terminator TLV
 800110c:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8001110:	443b      	add	r3, r7
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	f641 716e 	movw	r1, #8046	@ 0x1f6e
 800111a:	4439      	add	r1, r7
 800111c:	800a      	strh	r2, [r1, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8001124:	f6a3 7364 	subw	r3, r3, #3940	@ 0xf64
 8001128:	21fe      	movs	r1, #254	@ 0xfe
 800112a:	5499      	strb	r1, [r3, r2]

    printf("JSON length: %lu\n", (unsigned long)json_len);
 800112c:	f507 6377 	add.w	r3, r7, #3952	@ 0xf70
 8001130:	f5a3 6377 	sub.w	r3, r3, #3952	@ 0xf70
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	484c      	ldr	r0, [pc, #304]	@ (8001268 <write_json_to_nfc+0x460>)
 8001138:	f027 f920 	bl	802837c <iprintf>
    printf("Total NDEF size: %u bytes\n", total_ndef_message_size);
 800113c:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 8001140:	443b      	add	r3, r7
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	4849      	ldr	r0, [pc, #292]	@ (800126c <write_json_to_nfc+0x464>)
 8001148:	f027 f918 	bl	802837c <iprintf>

    // I2C chunked write to NFC
    const uint16_t MAX_CHUNK_SIZE = 64;
 800114c:	2340      	movs	r3, #64	@ 0x40
 800114e:	f641 7252 	movw	r2, #8018	@ 0x1f52
 8001152:	443a      	add	r2, r7
 8001154:	8013      	strh	r3, [r2, #0]
    uint16_t bytes_remaining = total_ndef_message_size;
 8001156:	f641 736e 	movw	r3, #8046	@ 0x1f6e
 800115a:	443b      	add	r3, r7
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	f641 726c 	movw	r2, #8044	@ 0x1f6c
 8001162:	443a      	add	r2, r7
 8001164:	8013      	strh	r3, [r2, #0]
    uint16_t offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f641 726a 	movw	r2, #8042	@ 0x1f6a
 800116c:	443a      	add	r2, r7
 800116e:	8013      	strh	r3, [r2, #0]

    while (bytes_remaining > 0) {
 8001170:	e06a      	b.n	8001248 <write_json_to_nfc+0x440>
        uint16_t chunk_size = (bytes_remaining > MAX_CHUNK_SIZE) ? MAX_CHUNK_SIZE : bytes_remaining;
 8001172:	f641 736c 	movw	r3, #8044	@ 0x1f6c
 8001176:	443b      	add	r3, r7
 8001178:	881a      	ldrh	r2, [r3, #0]
 800117a:	f641 7352 	movw	r3, #8018	@ 0x1f52
 800117e:	443b      	add	r3, r7
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4293      	cmp	r3, r2
 8001184:	bf28      	it	cs
 8001186:	4613      	movcs	r3, r2
 8001188:	f641 7250 	movw	r2, #8016	@ 0x1f50
 800118c:	443a      	add	r2, r7
 800118e:	8013      	strh	r3, [r2, #0]

        status = HAL_I2C_Mem_Write(&hi2c1, i2c_addr, mem_addr + offset,
 8001190:	f641 7366 	movw	r3, #8038	@ 0x1f66
 8001194:	443b      	add	r3, r7
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	f641 736a 	movw	r3, #8042	@ 0x1f6a
 800119c:	443b      	add	r3, r7
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	b298      	uxth	r0, r3
                                   I2C_MEMADD_SIZE_16BIT,
                                   &ndef_buffer[offset], chunk_size,
 80011a4:	f641 736a 	movw	r3, #8042	@ 0x1f6a
 80011a8:	443b      	add	r3, r7
 80011aa:	881a      	ldrh	r2, [r3, #0]
        status = HAL_I2C_Mem_Write(&hi2c1, i2c_addr, mem_addr + offset,
 80011ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <write_json_to_nfc+0x45c>)
 80011ae:	f503 53fb 	add.w	r3, r3, #8032	@ 0x1f60
 80011b2:	f103 0310 	add.w	r3, r3, #16
 80011b6:	443b      	add	r3, r7
 80011b8:	4413      	add	r3, r2
 80011ba:	f641 7268 	movw	r2, #8040	@ 0x1f68
 80011be:	443a      	add	r2, r7
 80011c0:	8811      	ldrh	r1, [r2, #0]
 80011c2:	f04f 32ff 	mov.w	r2, #4294967295
 80011c6:	9202      	str	r2, [sp, #8]
 80011c8:	f641 7250 	movw	r2, #8016	@ 0x1f50
 80011cc:	443a      	add	r2, r7
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2302      	movs	r3, #2
 80011d6:	4602      	mov	r2, r0
 80011d8:	4825      	ldr	r0, [pc, #148]	@ (8001270 <write_json_to_nfc+0x468>)
 80011da:	f002 fcc5 	bl	8003b68 <HAL_I2C_Mem_Write>
 80011de:	4603      	mov	r3, r0
 80011e0:	f641 724f 	movw	r2, #8015	@ 0x1f4f
 80011e4:	443a      	add	r2, r7
 80011e6:	7013      	strb	r3, [r2, #0]
                                   HAL_MAX_DELAY);

        if (status != HAL_OK) {
 80011e8:	f641 734f 	movw	r3, #8015	@ 0x1f4f
 80011ec:	443b      	add	r3, r7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00c      	beq.n	800120e <write_json_to_nfc+0x406>
            printf("I2C chunk write failed at offset %d, status: %d\r\n", offset, status);
 80011f4:	f641 736a 	movw	r3, #8042	@ 0x1f6a
 80011f8:	443b      	add	r3, r7
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	f641 724f 	movw	r2, #8015	@ 0x1f4f
 8001200:	443a      	add	r2, r7
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	481b      	ldr	r0, [pc, #108]	@ (8001274 <write_json_to_nfc+0x46c>)
 8001208:	f027 f8b8 	bl	802837c <iprintf>
            return;
 800120c:	e025      	b.n	800125a <write_json_to_nfc+0x452>
        }

        HAL_Delay(100);  // Wait for memory to settle
 800120e:	2064      	movs	r0, #100	@ 0x64
 8001210:	f001 fcb8 	bl	8002b84 <HAL_Delay>
        offset += chunk_size;
 8001214:	f641 736a 	movw	r3, #8042	@ 0x1f6a
 8001218:	443b      	add	r3, r7
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	f641 7350 	movw	r3, #8016	@ 0x1f50
 8001220:	443b      	add	r3, r7
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4413      	add	r3, r2
 8001226:	f641 726a 	movw	r2, #8042	@ 0x1f6a
 800122a:	443a      	add	r2, r7
 800122c:	8013      	strh	r3, [r2, #0]
        bytes_remaining -= chunk_size;
 800122e:	f641 736c 	movw	r3, #8044	@ 0x1f6c
 8001232:	443b      	add	r3, r7
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	f641 7350 	movw	r3, #8016	@ 0x1f50
 800123a:	443b      	add	r3, r7
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f641 726c 	movw	r2, #8044	@ 0x1f6c
 8001244:	443a      	add	r2, r7
 8001246:	8013      	strh	r3, [r2, #0]
    while (bytes_remaining > 0) {
 8001248:	f641 736c 	movw	r3, #8044	@ 0x1f6c
 800124c:	443b      	add	r3, r7
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d18e      	bne.n	8001172 <write_json_to_nfc+0x36a>
    }

    printf("I2C chunked write successful.\r\n");
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <write_json_to_nfc+0x470>)
 8001256:	f027 f935 	bl	80284c4 <puts>
}
 800125a:	f507 57fb 	add.w	r7, r7, #8032	@ 0x1f60
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	ffffe09c 	.word	0xffffe09c
 8001268:	0802cd08 	.word	0x0802cd08
 800126c:	0802cd1c 	.word	0x0802cd1c
 8001270:	2400119c 	.word	0x2400119c
 8001274:	0802cd38 	.word	0x0802cd38
 8001278:	0802cd6c 	.word	0x0802cd6c

0800127c <parse_float_request_fields>:

bool parse_float_request_fields(const char *json_data, size_t len,
                                struct mg_str *out_field,
                                struct mg_str *out_start,
                                struct mg_str *out_stop) {
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b099      	sub	sp, #100	@ 0x64
 8001280:	af02      	add	r7, sp, #8
 8001282:	6178      	str	r0, [r7, #20]
 8001284:	6139      	str	r1, [r7, #16]
 8001286:	60fa      	str	r2, [r7, #12]
 8001288:	60bb      	str	r3, [r7, #8]
    struct mg_str json = mg_str_n(json_data, len);
 800128a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	6979      	ldr	r1, [r7, #20]
 8001292:	4618      	mov	r0, r3
 8001294:	f016 fa73 	bl	801777e <mg_str_n>
    struct mg_str key, val;
    size_t offset = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	657b      	str	r3, [r7, #84]	@ 0x54

    *out_field = mg_str_n(NULL, 0);
 800129c:	68fc      	ldr	r4, [r7, #12]
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f016 fa6a 	bl	801777e <mg_str_n>
 80012aa:	4622      	mov	r2, r4
 80012ac:	463b      	mov	r3, r7
 80012ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012b2:	e882 0003 	stmia.w	r2, {r0, r1}
    *out_start = mg_str_n(NULL, 0);
 80012b6:	68bc      	ldr	r4, [r7, #8]
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f016 fa5d 	bl	801777e <mg_str_n>
 80012c4:	4622      	mov	r2, r4
 80012c6:	463b      	mov	r3, r7
 80012c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012cc:	e882 0003 	stmia.w	r2, {r0, r1}
    *out_stop  = mg_str_n(NULL, 0);
 80012d0:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f016 fa50 	bl	801777e <mg_str_n>
 80012de:	4622      	mov	r2, r4
 80012e0:	463b      	mov	r3, r7
 80012e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012e6:	e882 0003 	stmia.w	r2, {r0, r1}

    printf("🧪 Parsing JSON: %.*s\r\n", (int) json.len, json.buf);
 80012ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ec:	4619      	mov	r1, r3
 80012ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f0:	461a      	mov	r2, r3
 80012f2:	4888      	ldr	r0, [pc, #544]	@ (8001514 <parse_float_request_fields+0x298>)
 80012f4:	f027 f842 	bl	802837c <iprintf>
    // Check if JSON is double-encoded (starts with quote)
    if (json_data[0] == '"' && json_data[len - 1] == '"') {
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b22      	cmp	r3, #34	@ 0x22
 80012fe:	f040 80c0 	bne.w	8001482 <parse_float_request_fields+0x206>
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	3b01      	subs	r3, #1
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b22      	cmp	r3, #34	@ 0x22
 800130e:	f040 80b8 	bne.w	8001482 <parse_float_request_fields+0x206>
        printf("⚠️  JSON appears to be string-encoded, unescaping...\r\n");
 8001312:	4881      	ldr	r0, [pc, #516]	@ (8001518 <parse_float_request_fields+0x29c>)
 8001314:	f027 f8d6 	bl	80284c4 <puts>

        static char unescaped[1024];
        size_t j = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	653b      	str	r3, [r7, #80]	@ 0x50

        for (size_t i = 1; i < len - 1 && j < sizeof(unescaped) - 1; i++) {
 800131c:	2301      	movs	r3, #1
 800131e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001320:	e01a      	b.n	8001358 <parse_float_request_fields+0xdc>
            if (json_data[i] == '\\' && i + 1 < len - 1) {
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b5c      	cmp	r3, #92	@ 0x5c
 800132c:	d108      	bne.n	8001340 <parse_float_request_fields+0xc4>
 800132e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	3b01      	subs	r3, #1
 8001336:	429a      	cmp	r2, r3
 8001338:	d202      	bcs.n	8001340 <parse_float_request_fields+0xc4>
                i++;  // Skip backslash
 800133a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800133c:	3301      	adds	r3, #1
 800133e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
            unescaped[j++] = json_data[i];
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001344:	441a      	add	r2, r3
 8001346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001348:	1c59      	adds	r1, r3, #1
 800134a:	6539      	str	r1, [r7, #80]	@ 0x50
 800134c:	7811      	ldrb	r1, [r2, #0]
 800134e:	4a73      	ldr	r2, [pc, #460]	@ (800151c <parse_float_request_fields+0x2a0>)
 8001350:	54d1      	strb	r1, [r2, r3]
        for (size_t i = 1; i < len - 1 && j < sizeof(unescaped) - 1; i++) {
 8001352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001354:	3301      	adds	r3, #1
 8001356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	3b01      	subs	r3, #1
 800135c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800135e:	429a      	cmp	r2, r3
 8001360:	d204      	bcs.n	800136c <parse_float_request_fields+0xf0>
 8001362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001364:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001368:	4293      	cmp	r3, r2
 800136a:	d9da      	bls.n	8001322 <parse_float_request_fields+0xa6>
        }

        unescaped[j] = '\0';
 800136c:	4a6b      	ldr	r2, [pc, #428]	@ (800151c <parse_float_request_fields+0x2a0>)
 800136e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001370:	4413      	add	r3, r2
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
        json_data = unescaped;
 8001376:	4b69      	ldr	r3, [pc, #420]	@ (800151c <parse_float_request_fields+0x2a0>)
 8001378:	617b      	str	r3, [r7, #20]
        len = strlen(unescaped);
 800137a:	4868      	ldr	r0, [pc, #416]	@ (800151c <parse_float_request_fields+0x2a0>)
 800137c:	f7ff f828 	bl	80003d0 <strlen>
 8001380:	6138      	str	r0, [r7, #16]

        printf("🔓 Unescaped JSON: %s\n\r", json_data);
 8001382:	6979      	ldr	r1, [r7, #20]
 8001384:	4866      	ldr	r0, [pc, #408]	@ (8001520 <parse_float_request_fields+0x2a4>)
 8001386:	f026 fff9 	bl	802837c <iprintf>
    }


    while ((offset = mg_json_next(json, offset, &key, &val)) > 0) {
 800138a:	e07a      	b.n	8001482 <parse_float_request_fields+0x206>
    	printf("🔍 Found Key: %.*s | Value: %.*s\n", (int)key.len, key.buf, (int)val.len, val.buf);
 800138c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	4618      	mov	r0, r3
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4603      	mov	r3, r0
 800139c:	4861      	ldr	r0, [pc, #388]	@ (8001524 <parse_float_request_fields+0x2a8>)
 800139e:	f026 ffed 	bl	802837c <iprintf>


    	if (mg_match(key, mg_str("\"field\""), NULL)) {
 80013a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013a6:	4960      	ldr	r1, [pc, #384]	@ (8001528 <parse_float_request_fields+0x2ac>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f016 f9cb 	bl	8017744 <mg_str_s>
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013b6:	cb0c      	ldmia	r3, {r2, r3}
 80013b8:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013bc:	c903      	ldmia	r1, {r0, r1}
 80013be:	f016 facb 	bl	8017958 <mg_match>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00f      	beq.n	80013e8 <parse_float_request_fields+0x16c>
    	    *out_field = val;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	461a      	mov	r2, r3
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013d4:	e882 0003 	stmia.w	r2, {r0, r1}
    	    printf("✅ Matched 'field': %.*s\r\n", (int) val.len, val.buf);
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	4619      	mov	r1, r3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	461a      	mov	r2, r3
 80013e0:	4852      	ldr	r0, [pc, #328]	@ (800152c <parse_float_request_fields+0x2b0>)
 80013e2:	f026 ffcb 	bl	802837c <iprintf>
 80013e6:	e04c      	b.n	8001482 <parse_float_request_fields+0x206>
    	} else if (mg_match(key, mg_str("\"start\""), NULL)) {
 80013e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013ec:	4950      	ldr	r1, [pc, #320]	@ (8001530 <parse_float_request_fields+0x2b4>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f016 f9a8 	bl	8017744 <mg_str_s>
 80013f4:	2300      	movs	r3, #0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013fc:	cb0c      	ldmia	r3, {r2, r3}
 80013fe:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001402:	c903      	ldmia	r1, {r0, r1}
 8001404:	f016 faa8 	bl	8017958 <mg_match>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00f      	beq.n	800142e <parse_float_request_fields+0x1b2>
    	    *out_start = val;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	461a      	mov	r2, r3
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	e893 0003 	ldmia.w	r3, {r0, r1}
 800141a:	e882 0003 	stmia.w	r2, {r0, r1}
    	    printf("✅ Matched 'start': %.*s\r\n", (int) val.len, val.buf);
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	4619      	mov	r1, r3
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	461a      	mov	r2, r3
 8001426:	4843      	ldr	r0, [pc, #268]	@ (8001534 <parse_float_request_fields+0x2b8>)
 8001428:	f026 ffa8 	bl	802837c <iprintf>
 800142c:	e029      	b.n	8001482 <parse_float_request_fields+0x206>
    	} else if (mg_match(key, mg_str("\"stop\""), NULL)) {
 800142e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001432:	4941      	ldr	r1, [pc, #260]	@ (8001538 <parse_float_request_fields+0x2bc>)
 8001434:	4618      	mov	r0, r3
 8001436:	f016 f985 	bl	8017744 <mg_str_s>
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001442:	cb0c      	ldmia	r3, {r2, r3}
 8001444:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001448:	c903      	ldmia	r1, {r0, r1}
 800144a:	f016 fa85 	bl	8017958 <mg_match>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00f      	beq.n	8001474 <parse_float_request_fields+0x1f8>
    	    *out_stop = val;
 8001454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001456:	461a      	mov	r2, r3
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001460:	e882 0003 	stmia.w	r2, {r0, r1}
    	    printf("✅ Matched 'stop': %.*s\r\n", (int) val.len, val.buf);
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	4619      	mov	r1, r3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	461a      	mov	r2, r3
 800146c:	4833      	ldr	r0, [pc, #204]	@ (800153c <parse_float_request_fields+0x2c0>)
 800146e:	f026 ff85 	bl	802837c <iprintf>
 8001472:	e006      	b.n	8001482 <parse_float_request_fields+0x206>
    	} else {
    	    // This will now correctly show "cmd" as the non-match
    	    printf("❌ No match for key: %.*s\r\n", (int) key.len, key.buf);
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	4619      	mov	r1, r3
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	461a      	mov	r2, r3
 800147c:	4830      	ldr	r0, [pc, #192]	@ (8001540 <parse_float_request_fields+0x2c4>)
 800147e:	f026 ff7d 	bl	802837c <iprintf>
    while ((offset = mg_json_next(json, offset, &key, &val)) > 0) {
 8001482:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001490:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001494:	c903      	ldmia	r1, {r0, r1}
 8001496:	f00d fb6b 	bl	800eb70 <mg_json_next>
 800149a:	6578      	str	r0, [r7, #84]	@ 0x54
 800149c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f47f af74 	bne.w	800138c <parse_float_request_fields+0x110>
    	}
    }

    // Final report
    printf("📦 Parsed values:\r\n");
 80014a4:	4827      	ldr	r0, [pc, #156]	@ (8001544 <parse_float_request_fields+0x2c8>)
 80014a6:	f027 f80d 	bl	80284c4 <puts>
    printf("   field: %.*s\r\n", (int) out_field->len, out_field->buf);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4619      	mov	r1, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4824      	ldr	r0, [pc, #144]	@ (8001548 <parse_float_request_fields+0x2cc>)
 80014b8:	f026 ff60 	bl	802837c <iprintf>
    printf("   start: %.*s\r\n", (int) out_start->len, out_start->buf);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4619      	mov	r1, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4820      	ldr	r0, [pc, #128]	@ (800154c <parse_float_request_fields+0x2d0>)
 80014ca:	f026 ff57 	bl	802837c <iprintf>
    printf("   stop : %.*s\r\n", (int) out_stop->len, out_stop->buf);
 80014ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4619      	mov	r1, r3
 80014d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	481d      	ldr	r0, [pc, #116]	@ (8001550 <parse_float_request_fields+0x2d4>)
 80014dc:	f026 ff4e 	bl	802837c <iprintf>

    if (out_field->len > 0 && out_start->len > 0 && out_stop->len > 0) {
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00c      	beq.n	8001502 <parse_float_request_fields+0x286>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <parse_float_request_fields+0x286>
 80014f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <parse_float_request_fields+0x286>
        printf("✅ All required fields extracted.\r\n");
 80014f8:	4816      	ldr	r0, [pc, #88]	@ (8001554 <parse_float_request_fields+0x2d8>)
 80014fa:	f026 ffe3 	bl	80284c4 <puts>
        return true;
 80014fe:	2301      	movs	r3, #1
 8001500:	e003      	b.n	800150a <parse_float_request_fields+0x28e>
    } else {
        printf("❌ Missing one or more required fields.\r\n");
 8001502:	4815      	ldr	r0, [pc, #84]	@ (8001558 <parse_float_request_fields+0x2dc>)
 8001504:	f026 ffde 	bl	80284c4 <puts>
        return false;
 8001508:	2300      	movs	r3, #0
    }
}
 800150a:	4618      	mov	r0, r3
 800150c:	375c      	adds	r7, #92	@ 0x5c
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	0802cd8c 	.word	0x0802cd8c
 8001518:	0802cda8 	.word	0x0802cda8
 800151c:	24019940 	.word	0x24019940
 8001520:	0802cde4 	.word	0x0802cde4
 8001524:	0802ce00 	.word	0x0802ce00
 8001528:	0802ce24 	.word	0x0802ce24
 800152c:	0802ce2c 	.word	0x0802ce2c
 8001530:	0802ce48 	.word	0x0802ce48
 8001534:	0802ce50 	.word	0x0802ce50
 8001538:	0802ce6c 	.word	0x0802ce6c
 800153c:	0802ce74 	.word	0x0802ce74
 8001540:	0802ce90 	.word	0x0802ce90
 8001544:	0802ceb0 	.word	0x0802ceb0
 8001548:	0802cec8 	.word	0x0802cec8
 800154c:	0802cedc 	.word	0x0802cedc
 8001550:	0802cef0 	.word	0x0802cef0
 8001554:	0802cf04 	.word	0x0802cf04
 8001558:	0802cf28 	.word	0x0802cf28

0800155c <copy_and_strip_quotes>:

void copy_and_strip_quotes(struct mg_str src, char *dest, size_t dest_size) {
 800155c:	b490      	push	{r4, r7}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	f107 0408 	add.w	r4, r7, #8
 8001566:	e884 0003 	stmia.w	r4, {r0, r1}
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
    size_t j = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < src.len && j < dest_size - 1; i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	e012      	b.n	800159e <copy_and_strip_quotes+0x42>
        if (src.buf[i] != '"') {
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b22      	cmp	r3, #34	@ 0x22
 8001582:	d009      	beq.n	8001598 <copy_and_strip_quotes+0x3c>
            dest[j++] = src.buf[i];
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	441a      	add	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1c59      	adds	r1, r3, #1
 800158e:	6179      	str	r1, [r7, #20]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	440b      	add	r3, r1
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < src.len && j < dest_size - 1; i++) {
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3301      	adds	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d204      	bcs.n	80015b0 <copy_and_strip_quotes+0x54>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3e3      	bcc.n	8001578 <copy_and_strip_quotes+0x1c>
        }
    }
    dest[j] = '\0';
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc90      	pop	{r4, r7}
 80015c2:	4770      	bx	lr

080015c4 <read_phone_request_json>:



void read_phone_request_json(void) {
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	f2ad 5d34 	subw	sp, sp, #1332	@ 0x534
 80015ca:	af06      	add	r7, sp, #24
    uint16_t i2c_addr = 0x53 << 1;
 80015cc:	23a6      	movs	r3, #166	@ 0xa6
 80015ce:	f8a7 3516 	strh.w	r3, [r7, #1302]	@ 0x516
    uint16_t mem_addr = 0x0008;
 80015d2:	2308      	movs	r3, #8
 80015d4:	f8a7 3514 	strh.w	r3, [r7, #1300]	@ 0x514
    uint8_t buf[256];

    // Read first 256 bytes of EEPROM
    if (HAL_I2C_Mem_Read(&hi2c1, i2c_addr, mem_addr, I2C_MEMADD_SIZE_16BIT, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK) {
 80015d8:	f8b7 2514 	ldrh.w	r2, [r7, #1300]	@ 0x514
 80015dc:	f8b7 1516 	ldrh.w	r1, [r7, #1302]	@ 0x516
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2302      	movs	r3, #2
 80015f4:	4896      	ldr	r0, [pc, #600]	@ (8001850 <read_phone_request_json+0x28c>)
 80015f6:	f002 fbcb 	bl	8003d90 <HAL_I2C_Mem_Read>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <read_phone_request_json+0x44>
        printf("I2C read failed\n");
 8001600:	4894      	ldr	r0, [pc, #592]	@ (8001854 <read_phone_request_json+0x290>)
 8001602:	f026 ff5f 	bl	80284c4 <puts>
        return;
 8001606:	e11e      	b.n	8001846 <read_phone_request_json+0x282>
    }

    uint16_t i = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	f8a7 3512 	strh.w	r3, [r7, #1298]	@ 0x512

    if (buf[i++] != 0x03) {
 800160e:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	f8a7 2512 	strh.w	r2, [r7, #1298]	@ 0x512
 8001618:	461a      	mov	r2, r3
 800161a:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800161e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d003      	beq.n	8001630 <read_phone_request_json+0x6c>
        printf("Not an NDEF TLV.\n");
 8001628:	488b      	ldr	r0, [pc, #556]	@ (8001858 <read_phone_request_json+0x294>)
 800162a:	f026 ff4b 	bl	80284c4 <puts>
        return;
 800162e:	e10a      	b.n	8001846 <read_phone_request_json+0x282>
    }

    uint8_t tlv_length = buf[i++];  // assuming < 255 bytes
 8001630:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	f8a7 2512 	strh.w	r2, [r7, #1298]	@ 0x512
 800163a:	461a      	mov	r2, r3
 800163c:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001640:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001644:	5c9b      	ldrb	r3, [r3, r2]
 8001646:	f887 3511 	strb.w	r3, [r7, #1297]	@ 0x511

    // NDEF record header
    if (buf[i++] != 0xD1) {
 800164a:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	f8a7 2512 	strh.w	r2, [r7, #1298]	@ 0x512
 8001654:	461a      	mov	r2, r3
 8001656:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800165a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800165e:	5c9b      	ldrb	r3, [r3, r2]
 8001660:	2bd1      	cmp	r3, #209	@ 0xd1
 8001662:	d003      	beq.n	800166c <read_phone_request_json+0xa8>
        printf("Not a text record from phone.\n");
 8001664:	487d      	ldr	r0, [pc, #500]	@ (800185c <read_phone_request_json+0x298>)
 8001666:	f026 ff2d 	bl	80284c4 <puts>
        return;
 800166a:	e0ec      	b.n	8001846 <read_phone_request_json+0x282>
    }

    uint8_t type_len = buf[i++];
 800166c:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	f8a7 2512 	strh.w	r2, [r7, #1298]	@ 0x512
 8001676:	461a      	mov	r2, r3
 8001678:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800167c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001680:	5c9b      	ldrb	r3, [r3, r2]
 8001682:	f887 3510 	strb.w	r3, [r7, #1296]	@ 0x510
    uint8_t payload_len = buf[i++];
 8001686:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	f8a7 2512 	strh.w	r2, [r7, #1298]	@ 0x512
 8001690:	461a      	mov	r2, r3
 8001692:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001696:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800169a:	5c9b      	ldrb	r3, [r3, r2]
 800169c:	f887 350f 	strb.w	r3, [r7, #1295]	@ 0x50f

    // skip type string ("T")
    i += type_len;
 80016a0:	f897 3510 	ldrb.w	r3, [r7, #1296]	@ 0x510
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 80016aa:	4413      	add	r3, r2
 80016ac:	f8a7 3512 	strh.w	r3, [r7, #1298]	@ 0x512

    // first byte of payload is encoding/language code (usually 0x02)
    i++;
 80016b0:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 80016b4:	3301      	adds	r3, #1
 80016b6:	f8a7 3512 	strh.w	r3, [r7, #1298]	@ 0x512

    // JSON string starts here
    char json[240];
    memcpy(json, &buf[i], payload_len - 1);
 80016ba:	f8b7 3512 	ldrh.w	r3, [r7, #1298]	@ 0x512
 80016be:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	f897 350f 	ldrb.w	r3, [r7, #1295]	@ 0x50f
 80016c8:	3b01      	subs	r3, #1
 80016ca:	461a      	mov	r2, r3
 80016cc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80016d0:	4618      	mov	r0, r3
 80016d2:	f028 fa94 	bl	8029bfe <memcpy>
    json[payload_len - 1] = '\0';
 80016d6:	f897 350f 	ldrb.w	r3, [r7, #1295]	@ 0x50f
 80016da:	3b01      	subs	r3, #1
 80016dc:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 80016e0:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 80016e4:	2100      	movs	r1, #0
 80016e6:	54d1      	strb	r1, [r2, r3]

    printf("📥 Received JSON from phone: %s\n", json);
 80016e8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80016ec:	4619      	mov	r1, r3
 80016ee:	485c      	ldr	r0, [pc, #368]	@ (8001860 <read_phone_request_json+0x29c>)
 80016f0:	f026 fe44 	bl	802837c <iprintf>


    char *json_data = strchr(json, '{');  // Find the first '{' character
 80016f4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80016f8:	217b      	movs	r1, #123	@ 0x7b
 80016fa:	4618      	mov	r0, r3
 80016fc:	f027 f858 	bl	80287b0 <strchr>
 8001700:	f8c7 0508 	str.w	r0, [r7, #1288]	@ 0x508
    if (!json_data) {
 8001704:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8001708:	2b00      	cmp	r3, #0
 800170a:	d103      	bne.n	8001714 <read_phone_request_json+0x150>
        printf("❌ No JSON object found in payload\n");
 800170c:	4855      	ldr	r0, [pc, #340]	@ (8001864 <read_phone_request_json+0x2a0>)
 800170e:	f026 fed9 	bl	80284c4 <puts>
        return;
 8001712:	e098      	b.n	8001846 <read_phone_request_json+0x282>
    }

    // Step 2: Declare output variables
    struct mg_str field, start, stop;

    printf("Raw JSON: %s\n", json_data);
 8001714:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 8001718:	4853      	ldr	r0, [pc, #332]	@ (8001868 <read_phone_request_json+0x2a4>)
 800171a:	f026 fe2f 	bl	802837c <iprintf>


    // Step 3: Parse for cmd/field/start/stop
    if (parse_float_request_fields(json_data, strlen(json_data), &field, &start, &stop)) {
 800171e:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 8001722:	f7fe fe55 	bl	80003d0 <strlen>
 8001726:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 800172a:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 800172e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	460b      	mov	r3, r1
 8001736:	4601      	mov	r1, r0
 8001738:	f8d7 0508 	ldr.w	r0, [r7, #1288]	@ 0x508
 800173c:	f7ff fd9e 	bl	800127c <parse_float_request_fields>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d07c      	beq.n	8001840 <read_phone_request_json+0x27c>
        // Step 4: Use them to build the HTTP URL
        char url[256];
        snprintf(url, sizeof(url),
                 "http://192.168.1.133:8080/api/float-range?field=%.*s&start=%.*s&stop=%.*s",
                 (int) field.len, field.buf,
 8001746:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800174a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800174e:	685b      	ldr	r3, [r3, #4]
        snprintf(url, sizeof(url),
 8001750:	461e      	mov	r6, r3
 8001752:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001756:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800175a:	681b      	ldr	r3, [r3, #0]
                 (int) start.len, start.buf,
 800175c:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8001760:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8001764:	6852      	ldr	r2, [r2, #4]
        snprintf(url, sizeof(url),
 8001766:	4614      	mov	r4, r2
 8001768:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 800176c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8001770:	6812      	ldr	r2, [r2, #0]
                 (int) stop.len,  stop.buf);
 8001772:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8001776:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 800177a:	6849      	ldr	r1, [r1, #4]
        snprintf(url, sizeof(url),
 800177c:	460d      	mov	r5, r1
 800177e:	f507 61a3 	add.w	r1, r7, #1304	@ 0x518
 8001782:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8001786:	6809      	ldr	r1, [r1, #0]
 8001788:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 800178c:	9104      	str	r1, [sp, #16]
 800178e:	9503      	str	r5, [sp, #12]
 8001790:	9202      	str	r2, [sp, #8]
 8001792:	9401      	str	r4, [sp, #4]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4633      	mov	r3, r6
 8001798:	4a34      	ldr	r2, [pc, #208]	@ (800186c <read_phone_request_json+0x2a8>)
 800179a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800179e:	f026 fe99 	bl	80284d4 <sniprintf>

        printf("🌐 Generated HTTP URL:\n%s\n", url);
 80017a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80017a6:	4619      	mov	r1, r3
 80017a8:	4831      	ldr	r0, [pc, #196]	@ (8001870 <read_phone_request_json+0x2ac>)
 80017aa:	f026 fde7 	bl	802837c <iprintf>

        char field_buf[128], start_buf[64], stop_buf[64];

        copy_and_strip_quotes(field, field_buf, sizeof(field_buf));
 80017ae:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80017b2:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80017b6:	f5a3 7102 	sub.w	r1, r3, #520	@ 0x208
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	c903      	ldmia	r1, {r0, r1}
 80017be:	f7ff fecd 	bl	800155c <copy_and_strip_quotes>
        copy_and_strip_quotes(start, start_buf, sizeof(start_buf));
 80017c2:	463a      	mov	r2, r7
 80017c4:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80017c8:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 80017cc:	2340      	movs	r3, #64	@ 0x40
 80017ce:	c903      	ldmia	r1, {r0, r1}
 80017d0:	f7ff fec4 	bl	800155c <copy_and_strip_quotes>
        copy_and_strip_quotes(stop,  stop_buf,  sizeof(stop_buf));
 80017d4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80017d8:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 80017dc:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 80017e0:	2340      	movs	r3, #64	@ 0x40
 80017e2:	c903      	ldmia	r1, {r0, r1}
 80017e4:	f7ff feba 	bl	800155c <copy_and_strip_quotes>

        printf("✅ Clean URL:\n");
 80017e8:	4822      	ldr	r0, [pc, #136]	@ (8001874 <read_phone_request_json+0x2b0>)
 80017ea:	f026 fe6b 	bl	80284c4 <puts>
        printf("http://192.168.1.133:8080/api/float-range?field=%s&start=%s&stop=%s\n",
 80017ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017f2:	463a      	mov	r2, r7
 80017f4:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80017f8:	481f      	ldr	r0, [pc, #124]	@ (8001878 <read_phone_request_json+0x2b4>)
 80017fa:	f026 fdbf 	bl	802837c <iprintf>
               field_buf, start_buf, stop_buf);

        char full_path[256];
        snprintf(full_path, sizeof(full_path),
 80017fe:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001802:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8001806:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	463b      	mov	r3, r7
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	4a1a      	ldr	r2, [pc, #104]	@ (800187c <read_phone_request_json+0x2b8>)
 8001814:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001818:	f026 fe5c 	bl	80284d4 <sniprintf>
                 "/api/float-range?field=%s&start=%s&stop=%s",
                 field_buf, start_buf, stop_buf);

        // Optional debug print
        printf("✅ Clean path: %s\n", full_path);
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	4619      	mov	r1, r3
 8001822:	4817      	ldr	r0, [pc, #92]	@ (8001880 <read_phone_request_json+0x2bc>)
 8001824:	f026 fdaa 	bl	802837c <iprintf>
        wait_for_network_ready();
 8001828:	f7ff fad4 	bl	8000dd4 <wait_for_network_ready>
        perform_http_get(full_path);
 800182c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f829 	bl	8001888 <perform_http_get>
    	HAL_Delay(1000);
 8001836:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800183a:	f001 f9a3 	bl	8002b84 <HAL_Delay>
 800183e:	e002      	b.n	8001846 <read_phone_request_json+0x282>

        // Optionally perform the HTTP request here...
        // perform_http_get(url);
    } else {
        printf("❌ Failed to extract field/start/stop from JSON\n");
 8001840:	4810      	ldr	r0, [pc, #64]	@ (8001884 <read_phone_request_json+0x2c0>)
 8001842:	f026 fe3f 	bl	80284c4 <puts>
    }
}
 8001846:	f207 571c 	addw	r7, r7, #1308	@ 0x51c
 800184a:	46bd      	mov	sp, r7
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	bf00      	nop
 8001850:	2400119c 	.word	0x2400119c
 8001854:	0802cf54 	.word	0x0802cf54
 8001858:	0802cf64 	.word	0x0802cf64
 800185c:	0802cf78 	.word	0x0802cf78
 8001860:	0802cf98 	.word	0x0802cf98
 8001864:	0802cfbc 	.word	0x0802cfbc
 8001868:	0802cfe0 	.word	0x0802cfe0
 800186c:	0802cff0 	.word	0x0802cff0
 8001870:	0802d03c 	.word	0x0802d03c
 8001874:	0802d05c 	.word	0x0802d05c
 8001878:	0802d06c 	.word	0x0802d06c
 800187c:	0802d0b4 	.word	0x0802d0b4
 8001880:	0802d0e0 	.word	0x0802d0e0
 8001884:	0802d0f4 	.word	0x0802d0f4

08001888 <perform_http_get>:

void perform_http_get(const char *path) {
 8001888:	b580      	push	{r7, lr}
 800188a:	f5ad 5d1e 	sub.w	sp, sp, #10112	@ 0x2780
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	f507 63f5 	add.w	r3, r7, #1960	@ 0x7a8
 8001896:	f2a3 73a4 	subw	r3, r3, #1956	@ 0x7a4
 800189a:	6018      	str	r0, [r3, #0]
  request_done = false;
 800189c:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <perform_http_get+0x14c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]

  printf("🌐 Starting HTTP GET for path: %s\r\n", path);
 80018a2:	f507 63f5 	add.w	r3, r7, #1960	@ 0x7a8
 80018a6:	f2a3 73a4 	subw	r3, r3, #1956	@ 0x7a4
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	484a      	ldr	r0, [pc, #296]	@ (80019d8 <perform_http_get+0x150>)
 80018ae:	f026 fd65 	bl	802837c <iprintf>

  // Connect to server
  struct mg_connection *c = mg_http_connect(&g_mgr, "http://192.168.1.133:8080", http_event_handler, NULL);
 80018b2:	2300      	movs	r3, #0
 80018b4:	4a49      	ldr	r2, [pc, #292]	@ (80019dc <perform_http_get+0x154>)
 80018b6:	494a      	ldr	r1, [pc, #296]	@ (80019e0 <perform_http_get+0x158>)
 80018b8:	484a      	ldr	r0, [pc, #296]	@ (80019e4 <perform_http_get+0x15c>)
 80018ba:	f00c fdfb 	bl	800e4b4 <mg_http_connect>
 80018be:	f242 73a4 	movw	r3, #10148	@ 0x27a4
 80018c2:	443b      	add	r3, r7
 80018c4:	6018      	str	r0, [r3, #0]
  if (c == NULL) {
 80018c6:	f242 73a4 	movw	r3, #10148	@ 0x27a4
 80018ca:	443b      	add	r3, r7
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <perform_http_get+0x52>
    printf("❌ HTTP connect failed\r\n");
 80018d2:	4845      	ldr	r0, [pc, #276]	@ (80019e8 <perform_http_get+0x160>)
 80018d4:	f026 fdf6 	bl	80284c4 <puts>
    return;
 80018d8:	e076      	b.n	80019c8 <perform_http_get+0x140>
  }

  // Send custom GET request
  mg_printf(c,
 80018da:	f507 63f5 	add.w	r3, r7, #1960	@ 0x7a8
 80018de:	f2a3 73a4 	subw	r3, r3, #1956	@ 0x7a4
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4941      	ldr	r1, [pc, #260]	@ (80019ec <perform_http_get+0x164>)
 80018e6:	f242 73a4 	movw	r3, #10148	@ 0x27a4
 80018ea:	443b      	add	r3, r7
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f00e f885 	bl	800f9fc <mg_printf>
    path);



  // Poll until request completes or times out
  uint32_t start = HAL_GetTick();
 80018f2:	f001 f93b 	bl	8002b6c <HAL_GetTick>
 80018f6:	f242 73a0 	movw	r3, #10144	@ 0x27a0
 80018fa:	443b      	add	r3, r7
 80018fc:	6018      	str	r0, [r3, #0]
  while (!request_done && HAL_GetTick() - start < 5000) {
 80018fe:	e006      	b.n	800190e <perform_http_get+0x86>
    mg_mgr_poll(&g_mgr, 1);
 8001900:	2101      	movs	r1, #1
 8001902:	4838      	ldr	r0, [pc, #224]	@ (80019e4 <perform_http_get+0x15c>)
 8001904:	f012 f884 	bl	8013a10 <mg_mgr_poll>
    HAL_Delay(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f001 f93b 	bl	8002b84 <HAL_Delay>
  while (!request_done && HAL_GetTick() - start < 5000) {
 800190e:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <perform_http_get+0x14c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f083 0301 	eor.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <perform_http_get+0xac>
 800191c:	f001 f926 	bl	8002b6c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	f242 73a0 	movw	r3, #10144	@ 0x27a0
 8001926:	443b      	add	r3, r7
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001930:	4293      	cmp	r3, r2
 8001932:	d9e5      	bls.n	8001900 <perform_http_get+0x78>
  }

  if (!request_done) {
 8001934:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <perform_http_get+0x14c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <perform_http_get+0xc2>
    printf("❌ HTTP request timed out\r\n");
 8001942:	482b      	ldr	r0, [pc, #172]	@ (80019f0 <perform_http_get+0x168>)
 8001944:	f026 fdbe 	bl	80284c4 <puts>
    return;
 8001948:	e03e      	b.n	80019c8 <perform_http_get+0x140>
  }
  ParsedData parsed;
  char compact_json[OUTPUT_BUF_SIZE];

  if (parse_response_json(response_buf, &parsed)) {
 800194a:	4b2a      	ldr	r3, [pc, #168]	@ (80019f4 <perform_http_get+0x16c>)
 800194c:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 8001950:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001954:	443b      	add	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	4827      	ldr	r0, [pc, #156]	@ (80019f8 <perform_http_get+0x170>)
 800195a:	f000 f855 	bl	8001a08 <parse_response_json>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01a      	beq.n	800199a <perform_http_get+0x112>
    make_compact_json(&parsed, compact_json, sizeof(compact_json));
 8001964:	4925      	ldr	r1, [pc, #148]	@ (80019fc <perform_http_get+0x174>)
 8001966:	f242 73a8 	movw	r3, #10152	@ 0x27a8
 800196a:	440b      	add	r3, r1
 800196c:	19d9      	adds	r1, r3, r7
 800196e:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <perform_http_get+0x16c>)
 8001970:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 8001974:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001978:	443b      	add	r3, r7
 800197a:	f241 7270 	movw	r2, #6000	@ 0x1770
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f9e8 	bl	8001d54 <make_compact_json>
    printf("Compact JSON:\n%s\r\n", compact_json);
 8001984:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <perform_http_get+0x174>)
 8001986:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 800198a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800198e:	443b      	add	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	481b      	ldr	r0, [pc, #108]	@ (8001a00 <perform_http_get+0x178>)
 8001994:	f026 fcf2 	bl	802837c <iprintf>
 8001998:	e002      	b.n	80019a0 <perform_http_get+0x118>
  } else {
    printf("Failed to parse JSON!\r\n");
 800199a:	481a      	ldr	r0, [pc, #104]	@ (8001a04 <perform_http_get+0x17c>)
 800199c:	f026 fd92 	bl	80284c4 <puts>
  }

  // ✅ HTTP response is now in `response_buf`, call your NFC writer
  write_json_to_nfc(compact_json, strlen(compact_json));
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <perform_http_get+0x174>)
 80019a2:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 80019a6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80019aa:	443b      	add	r3, r7
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fd0f 	bl	80003d0 <strlen>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <perform_http_get+0x174>)
 80019b6:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 80019ba:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80019be:	443b      	add	r3, r7
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fa20 	bl	8000e08 <write_json_to_nfc>
}
 80019c8:	f507 571e 	add.w	r7, r7, #10112	@ 0x2780
 80019cc:	3728      	adds	r7, #40	@ 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2401993c 	.word	0x2401993c
 80019d8:	0802d128 	.word	0x0802d128
 80019dc:	08000c45 	.word	0x08000c45
 80019e0:	0802d150 	.word	0x0802d150
 80019e4:	2401d0b8 	.word	0x2401d0b8
 80019e8:	0802d16c 	.word	0x0802d16c
 80019ec:	0802d188 	.word	0x0802d188
 80019f0:	0802d1cc 	.word	0x0802d1cc
 80019f4:	ffffefd0 	.word	0xffffefd0
 80019f8:	24001298 	.word	0x24001298
 80019fc:	ffffd860 	.word	0xffffd860
 8001a00:	0802d1e8 	.word	0x0802d1e8
 8001a04:	0802d1fc 	.word	0x0802d1fc

08001a08 <parse_response_json>:

int parse_response_json(const char *json, ParsedData *out) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0c2      	sub	sp, #264	@ 0x108
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a16:	6018      	str	r0, [r3, #0]
 8001a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a20:	6019      	str	r1, [r3, #0]
  const char *ptr = json;
 8001a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  int i = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  char prev_time[32] = {0};
 8001a36:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f026 feae 	bl	80287a0 <memset>
  int found_first = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  out->interval_sec = 0;  // Reset interval
 8001a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]

  while ((ptr = strstr(ptr, "{\"time\":\"")) && i < MAX_VALUES) {
 8001a58:	e141      	b.n	8001cde <parse_response_json+0x2d6>
    ptr += 9;  // Move past "{\"time\":\""
 8001a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a5e:	3309      	adds	r3, #9
 8001a60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    const char *time_end = strchr(ptr, '"');
 8001a64:	2122      	movs	r1, #34	@ 0x22
 8001a66:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001a6a:	f026 fea1 	bl	80287b0 <strchr>
 8001a6e:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (!time_end) break;
 8001a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8143 	beq.w	8001d02 <parse_response_json+0x2fa>
    int len = time_end - ptr;
 8001a7c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    if (len >= sizeof(out->start_time)) len = sizeof(out->start_time) - 1;
 8001a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001a8e:	2b1f      	cmp	r3, #31
 8001a90:	d902      	bls.n	8001a98 <parse_response_json+0x90>
 8001a92:	231f      	movs	r3, #31
 8001a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

    char current_time[32];
    strncpy(current_time, ptr, len);
 8001a98:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f026 fea2 	bl	80287ee <strncpy>
    current_time[len] = '\0';
 8001aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001aae:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8001ab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]

    if (!found_first) {
 8001abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d117      	bne.n	8001af4 <parse_response_json+0xec>
      strcpy(out->start_time, current_time);
 8001ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f107 0208 	add.w	r2, r7, #8
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f028 f88a 	bl	8029bee <strcpy>
      found_first = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
      printf("📍 Start time set to: %s\n", out->start_time);
 8001ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4892      	ldr	r0, [pc, #584]	@ (8001d38 <parse_response_json+0x330>)
 8001aee:	f026 fc45 	bl	802837c <iprintf>
 8001af2:	e0c4      	b.n	8001c7e <parse_response_json+0x276>
    } else if (out->interval_sec == 0) {
 8001af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 80bc 	bne.w	8001c7e <parse_response_json+0x276>
      // Strip trailing 'Z' if present for prev_time
      char prev_trimmed[32];
      size_t len_prev = strlen(prev_time);
 8001b06:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fc60 	bl	80003d0 <strlen>
 8001b10:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
      if (len_prev > 0 && prev_time[len_prev - 1] == 'Z') {
 8001b14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01d      	beq.n	8001b58 <parse_response_json+0x150>
 8001b1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b20:	3b01      	subs	r3, #1
 8001b22:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001b26:	443b      	add	r3, r7
 8001b28:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001b2c:	2b5a      	cmp	r3, #90	@ 0x5a
 8001b2e:	d113      	bne.n	8001b58 <parse_response_json+0x150>
        strncpy(prev_trimmed, prev_time, len_prev - 1);
 8001b30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b34:	1e5a      	subs	r2, r3, #1
 8001b36:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f026 fe55 	bl	80287ee <strncpy>
        prev_trimmed[len_prev - 1] = '\0';
 8001b44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001b4e:	443b      	add	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	f803 2ce0 	strb.w	r2, [r3, #-224]
 8001b56:	e007      	b.n	8001b68 <parse_response_json+0x160>
      } else {
        strcpy(prev_trimmed, prev_time);
 8001b58:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001b5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f028 f843 	bl	8029bee <strcpy>
      }

      // Strip trailing 'Z' if present for current_time
      char curr_trimmed[32];
      size_t len_curr = strlen(current_time);
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fc2f 	bl	80003d0 <strlen>
 8001b72:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
      if (len_curr > 0 && current_time[len_curr - 1] == 'Z') {
 8001b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01d      	beq.n	8001bba <parse_response_json+0x1b2>
 8001b7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001b88:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	2b5a      	cmp	r3, #90	@ 0x5a
 8001b90:	d113      	bne.n	8001bba <parse_response_json+0x1b2>
        strncpy(curr_trimmed, current_time, len_curr - 1);
 8001b92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	f107 0108 	add.w	r1, r7, #8
 8001b9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f026 fe24 	bl	80287ee <strncpy>
        curr_trimmed[len_curr - 1] = '\0';
 8001ba6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001bb0:	443b      	add	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f803 2cc0 	strb.w	r2, [r3, #-192]
 8001bb8:	e007      	b.n	8001bca <parse_response_json+0x1c2>
      } else {
        strcpy(curr_trimmed, current_time);
 8001bba:	f107 0208 	add.w	r2, r7, #8
 8001bbe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f028 f812 	bl	8029bee <strcpy>
      }

      struct tm tm1 = {0}, tm2 = {0};
 8001bca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001bce:	2224      	movs	r2, #36	@ 0x24
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f026 fde4 	bl	80287a0 <memset>
 8001bd8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001bdc:	2224      	movs	r2, #36	@ 0x24
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f026 fddd 	bl	80287a0 <memset>
      strptime(prev_trimmed, "%Y-%m-%dT%H:%M:%S", &tm1);
 8001be6:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001bea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bee:	4953      	ldr	r1, [pc, #332]	@ (8001d3c <parse_response_json+0x334>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f027 fc71 	bl	80294d8 <strptime>
      strptime(curr_trimmed, "%Y-%m-%dT%H:%M:%S", &tm2);
 8001bf6:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001bfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bfe:	494f      	ldr	r1, [pc, #316]	@ (8001d3c <parse_response_json+0x334>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f027 fc69 	bl	80294d8 <strptime>
      time_t t1 = mktime(&tm1);
 8001c06:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f026 ff3c 	bl	8028a88 <mktime>
 8001c10:	e9c7 0138 	strd	r0, r1, [r7, #224]	@ 0xe0
      time_t t2 = mktime(&tm2);
 8001c14:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f026 ff35 	bl	8028a88 <mktime>
 8001c1e:	e9c7 0136 	strd	r0, r1, [r7, #216]	@ 0xd8

      printf("⏱️ prev_time = %s (trimmed: %s) → %ld\n", prev_time, prev_trimmed, (long)t1);
 8001c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c26:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001c2a:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001c2e:	4844      	ldr	r0, [pc, #272]	@ (8001d40 <parse_response_json+0x338>)
 8001c30:	f026 fba4 	bl	802837c <iprintf>
      printf("⏱️ current_time = %s (trimmed: %s) → %ld\n", current_time, curr_trimmed, (long)t2);
 8001c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c38:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001c3c:	f107 0108 	add.w	r1, r7, #8
 8001c40:	4840      	ldr	r0, [pc, #256]	@ (8001d44 <parse_response_json+0x33c>)
 8001c42:	f026 fb9b 	bl	802837c <iprintf>

      out->interval_sec = (int)difftime(t2, t1);
 8001c46:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8001c4a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001c4e:	f026 fe3d 	bl	80288cc <difftime>
 8001c52:	eeb0 7b40 	vmov.f64	d7, d0
 8001c56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001c5a:	ee17 2a90 	vmov	r2, s15
 8001c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	621a      	str	r2, [r3, #32]
      printf("📏 Calculated interval = %d seconds\n", out->interval_sec);
 8001c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4833      	ldr	r0, [pc, #204]	@ (8001d48 <parse_response_json+0x340>)
 8001c7a:	f026 fb7f 	bl	802837c <iprintf>
    }

    strcpy(prev_time, current_time);
 8001c7e:	f107 0208 	add.w	r2, r7, #8
 8001c82:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f027 ffb0 	bl	8029bee <strcpy>

    // Find value
    const char *val_ptr = strstr(time_end, "\"value\":");
 8001c8e:	492f      	ldr	r1, [pc, #188]	@ (8001d4c <parse_response_json+0x344>)
 8001c90:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001c94:	f026 fdd4 	bl	8028840 <strstr>
 8001c98:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    if (!val_ptr) break;
 8001c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d030      	beq.n	8001d06 <parse_response_json+0x2fe>
    float v = atof(val_ptr + 8);
 8001ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ca8:	3308      	adds	r3, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f024 fda6 	bl	80267fc <atof>
 8001cb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001cb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cb8:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
    out->values[i++] = v;
 8001cbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001cc6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001cca:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001cdc:	601a      	str	r2, [r3, #0]
  while ((ptr = strstr(ptr, "{\"time\":\"")) && i < MAX_VALUES) {
 8001cde:	491c      	ldr	r1, [pc, #112]	@ (8001d50 <parse_response_json+0x348>)
 8001ce0:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001ce4:	f026 fdac 	bl	8028840 <strstr>
 8001ce8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 8001cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <parse_response_json+0x300>
 8001cf4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cfc:	f6ff aead 	blt.w	8001a5a <parse_response_json+0x52>
 8001d00:	e002      	b.n	8001d08 <parse_response_json+0x300>
    if (!time_end) break;
 8001d02:	bf00      	nop
 8001d04:	e000      	b.n	8001d08 <parse_response_json+0x300>
    if (!val_ptr) break;
 8001d06:	bf00      	nop

  }

  out->count = i;
 8001d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d16:	461a      	mov	r2, r3
 8001d18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001d1c:	6253      	str	r3, [r2, #36]	@ 0x24
  return i > 0 ? 1 : 0;
 8001d1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfcc      	ite	gt
 8001d26:	2301      	movgt	r3, #1
 8001d28:	2300      	movle	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	0802d214 	.word	0x0802d214
 8001d3c:	0802d230 	.word	0x0802d230
 8001d40:	0802d244 	.word	0x0802d244
 8001d44:	0802d274 	.word	0x0802d274
 8001d48:	0802d2a4 	.word	0x0802d2a4
 8001d4c:	0802d2cc 	.word	0x0802d2cc
 8001d50:	0802d2d8 	.word	0x0802d2d8

08001d54 <make_compact_json>:

// Creates compact JSON output
void make_compact_json(const ParsedData *data, char *out_buf, size_t out_buf_size) {
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  int offset = snprintf(out_buf, out_buf_size,
    "{\n  \"start\": \"%s\",\n  \"interval\": %d,\n  \"values\": [",
    data->start_time, data->interval_sec);
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
  int offset = snprintf(out_buf, out_buf_size,
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <make_compact_json+0xa0>)
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	68b8      	ldr	r0, [r7, #8]
 8001d70:	f026 fbb0 	bl	80284d4 <sniprintf>
 8001d74:	6178      	str	r0, [r7, #20]

  for (int i = 0; i < data->count; i++) {
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	e026      	b.n	8001dca <make_compact_json+0x76>
    offset += snprintf(out_buf + offset, out_buf_size - offset,
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	18d0      	adds	r0, r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	1ad1      	subs	r1, r2, r3
      (i < data->count - 1) ? "%.2f," : "%.2f", data->values[i]);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	3b01      	subs	r3, #1
    offset += snprintf(out_buf + offset, out_buf_size - offset,
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	da01      	bge.n	8001d9c <make_compact_json+0x48>
 8001d98:	4c17      	ldr	r4, [pc, #92]	@ (8001df8 <make_compact_json+0xa4>)
 8001d9a:	e000      	b.n	8001d9e <make_compact_json+0x4a>
 8001d9c:	4c17      	ldr	r4, [pc, #92]	@ (8001dfc <make_compact_json+0xa8>)
      (i < data->count - 1) ? "%.2f," : "%.2f", data->values[i]);
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3308      	adds	r3, #8
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	edd3 7a00 	vldr	s15, [r3]
    offset += snprintf(out_buf + offset, out_buf_size - offset,
 8001dae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db2:	ed8d 7b00 	vstr	d7, [sp]
 8001db6:	4622      	mov	r2, r4
 8001db8:	f026 fb8c 	bl	80284d4 <sniprintf>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < data->count; i++) {
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbd1      	blt.n	8001d7c <make_compact_json+0x28>
  }

  snprintf(out_buf + offset, out_buf_size - offset, "]\n}\n");
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	18d0      	adds	r0, r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <make_compact_json+0xac>)
 8001de6:	4619      	mov	r1, r3
 8001de8:	f026 fb74 	bl	80284d4 <sniprintf>
}
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	0802d2e4 	.word	0x0802d2e4
 8001df8:	0802d318 	.word	0x0802d318
 8001dfc:	0802d320 	.word	0x0802d320
 8001e00:	0802d328 	.word	0x0802d328

08001e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e08:	f000 fe2a 	bl	8002a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0c:	f000 f84e 	bl	8001eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e10:	f000 f9ac 	bl	800216c <MX_GPIO_Init>
  MX_ETH_Init();
 8001e14:	f000 f8bc 	bl	8001f90 <MX_ETH_Init>
  MX_RNG_Init();
 8001e18:	f000 f946 	bl	80020a8 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001e1c:	f000 f95a 	bl	80020d4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001e20:	f000 f902 	bl	8002028 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mongoose_init();
 8001e24:	f024 fc56 	bl	80266d4 <mongoose_init>
  for (;;) {
    mongoose_poll();
 8001e28:	f024 fcb6 	bl	8026798 <mongoose_poll>

    if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 8001e2c:	2140      	movs	r1, #64	@ 0x40
 8001e2e:	481a      	ldr	r0, [pc, #104]	@ (8001e98 <main+0x94>)
 8001e30:	f001 fdcc 	bl	80039cc <HAL_GPIO_ReadPin>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <main+0x4e>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4817      	ldr	r0, [pc, #92]	@ (8001e9c <main+0x98>)
 8001e40:	f001 fddc 	bl	80039fc <HAL_GPIO_WritePin>
    	HAL_Delay(5000);
 8001e44:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e48:	f000 fe9c 	bl	8002b84 <HAL_Delay>
    	read_phone_request_json();
 8001e4c:	f7ff fbba 	bl	80015c4 <read_phone_request_json>
 8001e50:	e004      	b.n	8001e5c <main+0x58>
    } else{
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2101      	movs	r1, #1
 8001e56:	4811      	ldr	r0, [pc, #68]	@ (8001e9c <main+0x98>)
 8001e58:	f001 fdd0 	bl	80039fc <HAL_GPIO_WritePin>
    }

    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e60:	480f      	ldr	r0, [pc, #60]	@ (8001ea0 <main+0x9c>)
 8001e62:	f001 fdb3 	bl	80039cc <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0dd      	beq.n	8001e28 <main+0x24>
    	HAL_Delay(500);
 8001e6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e70:	f000 fe88 	bl	8002b84 <HAL_Delay>
    	glue_update_state();
 8001e74:	f023 fee8 	bl	8025c48 <glue_update_state>
        wait_for_network_ready();
 8001e78:	f7fe ffac 	bl	8000dd4 <wait_for_network_ready>
    	perform_http_data_read();
 8001e7c:	f7fe ff58 	bl	8000d30 <perform_http_data_read>
    	HAL_Delay(1000);
 8001e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e84:	f000 fe7e 	bl	8002b84 <HAL_Delay>
    	write_json_to_nfc(response_buf, response_len);
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <main+0xa0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <main+0xa4>)
 8001e90:	f7fe ffba 	bl	8000e08 <write_json_to_nfc>
    mongoose_poll();
 8001e94:	e7c8      	b.n	8001e28 <main+0x24>
 8001e96:	bf00      	nop
 8001e98:	58020000 	.word	0x58020000
 8001e9c:	58020400 	.word	0x58020400
 8001ea0:	58020800 	.word	0x58020800
 8001ea4:	24019938 	.word	0x24019938
 8001ea8:	24001298 	.word	0x24001298

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b09c      	sub	sp, #112	@ 0x70
 8001eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb6:	224c      	movs	r2, #76	@ 0x4c
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f026 fc70 	bl	80287a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f026 fc6a 	bl	80287a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f002 fbd3 	bl	8004678 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <SystemClock_Config+0xe0>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ede:	4a2b      	ldr	r2, [pc, #172]	@ (8001f8c <SystemClock_Config+0xe0>)
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <SystemClock_Config+0xe0>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ef2:	bf00      	nop
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <SystemClock_Config+0xe0>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f00:	d1f8      	bne.n	8001ef4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001f02:	2322      	movs	r3, #34	@ 0x22
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001f0a:	2340      	movs	r3, #64	@ 0x40
 8001f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f12:	2302      	movs	r3, #2
 8001f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f16:	2300      	movs	r3, #0
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f26:	2304      	movs	r3, #4
 8001f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fbd4 	bl	80046ec <HAL_RCC_OscConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001f4a:	f000 fa09 	bl	8002360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f4e:	233f      	movs	r3, #63	@ 0x3f
 8001f50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f52:	2303      	movs	r3, #3
 8001f54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f5e:	2340      	movs	r3, #64	@ 0x40
 8001f60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f62:	2340      	movs	r3, #64	@ 0x40
 8001f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2101      	movs	r1, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 ff93 	bl	8004ea0 <HAL_RCC_ClockConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001f80:	f000 f9ee 	bl	8002360 <Error_Handler>
  }
}
 8001f84:	bf00      	nop
 8001f86:	3770      	adds	r7, #112	@ 0x70
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024800 	.word	0x58024800

08001f90 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001f94:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <MX_ETH_Init+0x80>)
 8001f96:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <MX_ETH_Init+0x84>)
 8001f98:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_ETH_Init+0x88>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <MX_ETH_Init+0x88>)
 8001fa2:	2280      	movs	r2, #128	@ 0x80
 8001fa4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_ETH_Init+0x88>)
 8001fa8:	22e1      	movs	r2, #225	@ 0xe1
 8001faa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_ETH_Init+0x88>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <MX_ETH_Init+0x88>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <MX_ETH_Init+0x88>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001fbe:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <MX_ETH_Init+0x80>)
 8001fc0:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <MX_ETH_Init+0x88>)
 8001fc2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <MX_ETH_Init+0x80>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001fca:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <MX_ETH_Init+0x80>)
 8001fcc:	4a13      	ldr	r2, [pc, #76]	@ (800201c <MX_ETH_Init+0x8c>)
 8001fce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <MX_ETH_Init+0x80>)
 8001fd2:	4a13      	ldr	r2, [pc, #76]	@ (8002020 <MX_ETH_Init+0x90>)
 8001fd4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <MX_ETH_Init+0x80>)
 8001fd8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001fde:	480c      	ldr	r0, [pc, #48]	@ (8002010 <MX_ETH_Init+0x80>)
 8001fe0:	f000 ff18 	bl	8002e14 <HAL_ETH_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001fea:	f000 f9b9 	bl	8002360 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001fee:	2238      	movs	r2, #56	@ 0x38
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	480c      	ldr	r0, [pc, #48]	@ (8002024 <MX_ETH_Init+0x94>)
 8001ff4:	f026 fbd4 	bl	80287a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <MX_ETH_Init+0x94>)
 8001ffa:	2221      	movs	r2, #33	@ 0x21
 8001ffc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <MX_ETH_Init+0x94>)
 8002000:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002004:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <MX_ETH_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	240010ec 	.word	0x240010ec
 8002014:	40028000 	.word	0x40028000
 8002018:	24019d40 	.word	0x24019d40
 800201c:	24001038 	.word	0x24001038
 8002020:	24000fd8 	.word	0x24000fd8
 8002024:	240010b4 	.word	0x240010b4

08002028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <MX_I2C1_Init+0x74>)
 800202e:	4a1c      	ldr	r2, [pc, #112]	@ (80020a0 <MX_I2C1_Init+0x78>)
 8002030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8002032:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <MX_I2C1_Init+0x74>)
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <MX_I2C1_Init+0x7c>)
 8002036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002038:	4b18      	ldr	r3, [pc, #96]	@ (800209c <MX_I2C1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800203e:	4b17      	ldr	r3, [pc, #92]	@ (800209c <MX_I2C1_Init+0x74>)
 8002040:	2201      	movs	r2, #1
 8002042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <MX_I2C1_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800204a:	4b14      	ldr	r3, [pc, #80]	@ (800209c <MX_I2C1_Init+0x74>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <MX_I2C1_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <MX_I2C1_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <MX_I2C1_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002062:	480e      	ldr	r0, [pc, #56]	@ (800209c <MX_I2C1_Init+0x74>)
 8002064:	f001 fce4 	bl	8003a30 <HAL_I2C_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800206e:	f000 f977 	bl	8002360 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002072:	2100      	movs	r1, #0
 8002074:	4809      	ldr	r0, [pc, #36]	@ (800209c <MX_I2C1_Init+0x74>)
 8002076:	f002 fa67 	bl	8004548 <HAL_I2CEx_ConfigAnalogFilter>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002080:	f000 f96e 	bl	8002360 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002084:	2100      	movs	r1, #0
 8002086:	4805      	ldr	r0, [pc, #20]	@ (800209c <MX_I2C1_Init+0x74>)
 8002088:	f002 faa9 	bl	80045de <HAL_I2CEx_ConfigDigitalFilter>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002092:	f000 f965 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2400119c 	.word	0x2400119c
 80020a0:	40005400 	.word	0x40005400
 80020a4:	20303e5d 	.word	0x20303e5d

080020a8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80020ac:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <MX_RNG_Init+0x24>)
 80020ae:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <MX_RNG_Init+0x28>)
 80020b0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <MX_RNG_Init+0x24>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <MX_RNG_Init+0x24>)
 80020ba:	f005 f83f 	bl	800713c <HAL_RNG_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80020c4:	f000 f94c 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	240011f0 	.word	0x240011f0
 80020d0:	48021800 	.word	0x48021800

080020d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020d8:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 80020da:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <MX_USART3_UART_Init+0x94>)
 80020dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020de:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 80020e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002112:	2200      	movs	r2, #0
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002116:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800211c:	4811      	ldr	r0, [pc, #68]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 800211e:	f005 f9b6 	bl	800748e <HAL_UART_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002128:	f000 f91a 	bl	8002360 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800212c:	2100      	movs	r1, #0
 800212e:	480d      	ldr	r0, [pc, #52]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002130:	f006 fb51 	bl	80087d6 <HAL_UARTEx_SetTxFifoThreshold>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800213a:	f000 f911 	bl	8002360 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213e:	2100      	movs	r1, #0
 8002140:	4808      	ldr	r0, [pc, #32]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002142:	f006 fb86 	bl	8008852 <HAL_UARTEx_SetRxFifoThreshold>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800214c:	f000 f908 	bl	8002360 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	@ (8002164 <MX_USART3_UART_Init+0x90>)
 8002152:	f006 fb07 	bl	8008764 <HAL_UARTEx_DisableFifoMode>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800215c:	f000 f900 	bl	8002360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	24001204 	.word	0x24001204
 8002168:	40004800 	.word	0x40004800

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	4b70      	ldr	r3, [pc, #448]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002188:	4a6e      	ldr	r2, [pc, #440]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002192:	4b6c      	ldr	r3, [pc, #432]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a6:	4a67      	ldr	r2, [pc, #412]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b0:	4b64      	ldr	r3, [pc, #400]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e2:	4a58      	ldr	r2, [pc, #352]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ec:	4b55      	ldr	r3, [pc, #340]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fa:	4b52      	ldr	r3, [pc, #328]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002200:	4a50      	ldr	r2, [pc, #320]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220a:	4b4e      	ldr	r3, [pc, #312]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 800220c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002218:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221e:	4a49      	ldr	r2, [pc, #292]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 8002220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002228:	4b46      	ldr	r3, [pc, #280]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223c:	4a41      	ldr	r2, [pc, #260]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 800223e:	f043 0310 	orr.w	r3, r3, #16
 8002242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002246:	4b3f      	ldr	r3, [pc, #252]	@ (8002344 <MX_GPIO_Init+0x1d8>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	f244 0101 	movw	r1, #16385	@ 0x4001
 800225a:	483b      	ldr	r0, [pc, #236]	@ (8002348 <MX_GPIO_Init+0x1dc>)
 800225c:	f001 fbce 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002266:	4839      	ldr	r0, [pc, #228]	@ (800234c <MX_GPIO_Init+0x1e0>)
 8002268:	f001 fbc8 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	2102      	movs	r1, #2
 8002270:	4837      	ldr	r0, [pc, #220]	@ (8002350 <MX_GPIO_Init+0x1e4>)
 8002272:	f001 fbc3 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800227a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4832      	ldr	r0, [pc, #200]	@ (8002354 <MX_GPIO_Init+0x1e8>)
 800228c:	f001 f9f6 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002290:	2340      	movs	r3, #64	@ 0x40
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	482d      	ldr	r0, [pc, #180]	@ (8002358 <MX_GPIO_Init+0x1ec>)
 80022a4:	f001 f9ea 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80022a8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80022ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	4821      	ldr	r0, [pc, #132]	@ (8002348 <MX_GPIO_Init+0x1dc>)
 80022c2:	f001 f9db 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80022c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	4619      	mov	r1, r3
 80022de:	481b      	ldr	r0, [pc, #108]	@ (800234c <MX_GPIO_Init+0x1e0>)
 80022e0:	f001 f9cc 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	4818      	ldr	r0, [pc, #96]	@ (800235c <MX_GPIO_Init+0x1f0>)
 80022fa:	f001 f9bf 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80022fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8002310:	230a      	movs	r3, #10
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	480f      	ldr	r0, [pc, #60]	@ (8002358 <MX_GPIO_Init+0x1ec>)
 800231c:	f001 f9ae 	bl	800367c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8002320:	2302      	movs	r3, #2
 8002322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	@ (8002350 <MX_GPIO_Init+0x1e4>)
 8002338:	f001 f9a0 	bl	800367c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800233c:	bf00      	nop
 800233e:	3730      	adds	r7, #48	@ 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	58024400 	.word	0x58024400
 8002348:	58020400 	.word	0x58020400
 800234c:	58020c00 	.word	0x58020c00
 8002350:	58021000 	.word	0x58021000
 8002354:	58020800 	.word	0x58020800
 8002358:	58020000 	.word	0x58020000
 800235c:	58021800 	.word	0x58021800

08002360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002364:	b672      	cpsid	i
}
 8002366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <Error_Handler+0x8>

0800236c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_MspInit+0x30>)
 8002374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002378:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_MspInit+0x30>)
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_MspInit+0x30>)
 8002384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	58024400 	.word	0x58024400

080023a0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08e      	sub	sp, #56	@ 0x38
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_ETH_MspInit+0x194>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f040 80b3 	bne.w	800252a <HAL_ETH_MspInit+0x18a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80023c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 80023c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 80023cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023d4:	4b58      	ldr	r3, [pc, #352]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 80023d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80023e2:	4b55      	ldr	r3, [pc, #340]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a53      	ldr	r2, [pc, #332]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b51      	ldr	r3, [pc, #324]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002400:	4b4d      	ldr	r3, [pc, #308]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002406:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002410:	4b49      	ldr	r3, [pc, #292]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	4b46      	ldr	r3, [pc, #280]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002424:	4a44      	ldr	r2, [pc, #272]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800242e:	4b42      	ldr	r3, [pc, #264]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b3e      	ldr	r3, [pc, #248]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002442:	4a3d      	ldr	r2, [pc, #244]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244c:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002460:	4a35      	ldr	r2, [pc, #212]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800246a:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002478:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247e:	4a2e      	ldr	r2, [pc, #184]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 8002480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_ETH_MspInit+0x198>)
 800248a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002496:	2332      	movs	r3, #50	@ 0x32
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a6:	230b      	movs	r3, #11
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	4822      	ldr	r0, [pc, #136]	@ (800253c <HAL_ETH_MspInit+0x19c>)
 80024b2:	f001 f8e3 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024b6:	2386      	movs	r3, #134	@ 0x86
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024c6:	230b      	movs	r3, #11
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	481b      	ldr	r0, [pc, #108]	@ (8002540 <HAL_ETH_MspInit+0x1a0>)
 80024d2:	f001 f8d3 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80024d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e8:	230b      	movs	r3, #11
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4814      	ldr	r0, [pc, #80]	@ (8002544 <HAL_ETH_MspInit+0x1a4>)
 80024f4:	f001 f8c2 	bl	800367c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80024f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800250a:	230b      	movs	r3, #11
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800250e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002512:	4619      	mov	r1, r3
 8002514:	480c      	ldr	r0, [pc, #48]	@ (8002548 <HAL_ETH_MspInit+0x1a8>)
 8002516:	f001 f8b1 	bl	800367c <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	203d      	movs	r0, #61	@ 0x3d
 8002520:	f000 fc43 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002524:	203d      	movs	r0, #61	@ 0x3d
 8002526:	f000 fc5a 	bl	8002dde <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 800252a:	bf00      	nop
 800252c:	3738      	adds	r7, #56	@ 0x38
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40028000 	.word	0x40028000
 8002538:	58024400 	.word	0x58024400
 800253c:	58020800 	.word	0x58020800
 8002540:	58020000 	.word	0x58020000
 8002544:	58020400 	.word	0x58020400
 8002548:	58021800 	.word	0x58021800

0800254c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0b8      	sub	sp, #224	@ 0xe0
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	22b8      	movs	r2, #184	@ 0xb8
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f026 f917 	bl	80287a0 <memset>
  if(hi2c->Instance==I2C1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_I2C_MspInit+0xc8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d146      	bne.n	800260a <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800257c:	f04f 0208 	mov.w	r2, #8
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f810 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800259e:	f7ff fedf 	bl	8002360 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_I2C_MspInit+0xcc>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_I2C_MspInit+0xcc>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_I2C_MspInit+0xcc>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	2312      	movs	r3, #18
 80025ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025da:	2304      	movs	r3, #4
 80025dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025e4:	4619      	mov	r1, r3
 80025e6:	480d      	ldr	r0, [pc, #52]	@ (800261c <HAL_I2C_MspInit+0xd0>)
 80025e8:	f001 f848 	bl	800367c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_I2C_MspInit+0xcc>)
 80025ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025f2:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_I2C_MspInit+0xcc>)
 80025f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_I2C_MspInit+0xcc>)
 80025fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800260a:	bf00      	nop
 800260c:	37e0      	adds	r7, #224	@ 0xe0
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40005400 	.word	0x40005400
 8002618:	58024400 	.word	0x58024400
 800261c:	58020400 	.word	0x58020400

08002620 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0b2      	sub	sp, #200	@ 0xc8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	22b8      	movs	r2, #184	@ 0xb8
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f026 f8b5 	bl	80287a0 <memset>
  if(hrng->Instance==RNG)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a14      	ldr	r2, [pc, #80]	@ (800268c <HAL_RNG_MspInit+0x6c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d121      	bne.n	8002684 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002640:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	4618      	mov	r0, r3
 8002658:	f002 ffae 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002662:	f7ff fe7d 	bl	8002360 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <HAL_RNG_MspInit+0x70>)
 8002668:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800266c:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <HAL_RNG_MspInit+0x70>)
 800266e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002672:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RNG_MspInit+0x70>)
 8002678:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800267c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002684:	bf00      	nop
 8002686:	37c8      	adds	r7, #200	@ 0xc8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	48021800 	.word	0x48021800
 8002690:	58024400 	.word	0x58024400

08002694 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0b8      	sub	sp, #224	@ 0xe0
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	22b8      	movs	r2, #184	@ 0xb8
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f026 f873 	bl	80287a0 <memset>
  if(huart->Instance==USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a27      	ldr	r2, [pc, #156]	@ (800275c <HAL_UART_MspInit+0xc8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d146      	bne.n	8002752 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026c4:	f04f 0202 	mov.w	r2, #2
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 ff6c 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026e6:	f7ff fe3b 	bl	8002360 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_UART_MspInit+0xcc>)
 80026ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <HAL_UART_MspInit+0xcc>)
 80026f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026fa:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <HAL_UART_MspInit+0xcc>)
 80026fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002708:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_UART_MspInit+0xcc>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800270e:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <HAL_UART_MspInit+0xcc>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_UART_MspInit+0xcc>)
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002726:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800272a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002740:	2307      	movs	r3, #7
 8002742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002746:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800274a:	4619      	mov	r1, r3
 800274c:	4805      	ldr	r0, [pc, #20]	@ (8002764 <HAL_UART_MspInit+0xd0>)
 800274e:	f000 ff95 	bl	800367c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002752:	bf00      	nop
 8002754:	37e0      	adds	r7, #224	@ 0xe0
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40004800 	.word	0x40004800
 8002760:	58024400 	.word	0x58024400
 8002764:	58020c00 	.word	0x58020c00

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <NMI_Handler+0x4>

08002770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <MemManage_Handler+0x4>

08002780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <UsageFault_Handler+0x4>

08002790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027be:	f000 f9c1 	bl	8002b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  return 1;
 80027ca:	2301      	movs	r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <_kill>:

int _kill(int pid, int sig)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e0:	f027 f9d6 	bl	8029b90 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2216      	movs	r2, #22
 80027e8:	601a      	str	r2, [r3, #0]
  return -1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_exit>:

void _exit (int status)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffe7 	bl	80027d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <_exit+0x12>

0800280c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e00a      	b.n	8002834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800281e:	f3af 8000 	nop.w
 8002822:	4601      	mov	r1, r0
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	60ba      	str	r2, [r7, #8]
 800282a:	b2ca      	uxtb	r2, r1
 800282c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbf0      	blt.n	800281e <_read+0x12>
  }

  return len;
 800283c:	687b      	ldr	r3, [r7, #4]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800286e:	605a      	str	r2, [r3, #4]
  return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_isatty>:

int _isatty(int file)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	@ (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f027 f956 	bl	8029b90 <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	@ (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	24050000 	.word	0x24050000
 8002910:	00000400 	.word	0x00000400
 8002914:	24019d4c 	.word	0x24019d4c
 8002918:	2401d298 	.word	0x2401d298

0800291c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002920:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <SystemInit+0xd0>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	4a31      	ldr	r2, [pc, #196]	@ (80029ec <SystemInit+0xd0>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002930:	4b2f      	ldr	r3, [pc, #188]	@ (80029f0 <SystemInit+0xd4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	2b06      	cmp	r3, #6
 800293a:	d807      	bhi.n	800294c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800293c:	4b2c      	ldr	r3, [pc, #176]	@ (80029f0 <SystemInit+0xd4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 030f 	bic.w	r3, r3, #15
 8002944:	4a2a      	ldr	r2, [pc, #168]	@ (80029f0 <SystemInit+0xd4>)
 8002946:	f043 0307 	orr.w	r3, r3, #7
 800294a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800294c:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <SystemInit+0xd8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a28      	ldr	r2, [pc, #160]	@ (80029f4 <SystemInit+0xd8>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002958:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <SystemInit+0xd8>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <SystemInit+0xd8>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4924      	ldr	r1, [pc, #144]	@ (80029f4 <SystemInit+0xd8>)
 8002964:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <SystemInit+0xdc>)
 8002966:	4013      	ands	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <SystemInit+0xd4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <SystemInit+0xd4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 030f 	bic.w	r3, r3, #15
 800297e:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <SystemInit+0xd4>)
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <SystemInit+0xd8>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <SystemInit+0xd8>)
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <SystemInit+0xd8>)
 8002994:	2200      	movs	r2, #0
 8002996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002998:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <SystemInit+0xd8>)
 800299a:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <SystemInit+0xe0>)
 800299c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <SystemInit+0xd8>)
 80029a0:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <SystemInit+0xe4>)
 80029a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <SystemInit+0xd8>)
 80029a6:	4a17      	ldr	r2, [pc, #92]	@ (8002a04 <SystemInit+0xe8>)
 80029a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029aa:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <SystemInit+0xd8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <SystemInit+0xd8>)
 80029b2:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <SystemInit+0xe8>)
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029b6:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <SystemInit+0xd8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <SystemInit+0xd8>)
 80029be:	4a11      	ldr	r2, [pc, #68]	@ (8002a04 <SystemInit+0xe8>)
 80029c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <SystemInit+0xd8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <SystemInit+0xd8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <SystemInit+0xd8>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029d4:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <SystemInit+0xd8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <SystemInit+0xec>)
 80029dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80029e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00
 80029f0:	52002000 	.word	0x52002000
 80029f4:	58024400 	.word	0x58024400
 80029f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80029fc:	02020200 	.word	0x02020200
 8002a00:	01ff0000 	.word	0x01ff0000
 8002a04:	01010280 	.word	0x01010280
 8002a08:	52004000 	.word	0x52004000

08002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a10:	f7ff ff84 	bl	800291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a14:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a16:	490d      	ldr	r1, [pc, #52]	@ (8002a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a1c:	e002      	b.n	8002a24 <LoopCopyDataInit>

08002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a22:	3304      	adds	r3, #4

08002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a28:	d3f9      	bcc.n	8002a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a30:	e001      	b.n	8002a36 <LoopFillZerobss>

08002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a34:	3204      	adds	r2, #4

08002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a38:	d3fb      	bcc.n	8002a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f027 f8af 	bl	8029b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3e:	f7ff f9e1 	bl	8001e04 <main>
  bx  lr
 8002a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a4c:	24000fd8 	.word	0x24000fd8
  ldr r2, =_sidata
 8002a50:	0803eff0 	.word	0x0803eff0
  ldr r2, =_sbss
 8002a54:	24001098 	.word	0x24001098
  ldr r4, =_ebss
 8002a58:	2401d298 	.word	0x2401d298

08002a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC3_IRQHandler>
	...

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a66:	2003      	movs	r0, #3
 8002a68:	f000 f994 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a6c:	f002 fbce 	bl	800520c <HAL_RCC_GetSysClockFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_Init+0x68>)
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	4913      	ldr	r1, [pc, #76]	@ (8002acc <HAL_Init+0x6c>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_Init+0x68>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <HAL_Init+0x6c>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad0 <HAL_Init+0x70>)
 8002aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <HAL_Init+0x74>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f814 	bl	8002ad8 <HAL_InitTick>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e002      	b.n	8002ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aba:	f7ff fc57 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	08030c68 	.word	0x08030c68
 8002ad0:	24000008 	.word	0x24000008
 8002ad4:	24000004 	.word	0x24000004

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ae0:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_InitTick+0x60>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e021      	b.n	8002b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_InitTick+0x64>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_InitTick+0x60>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f979 	bl	8002dfa <HAL_SYSTICK_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00e      	b.n	8002b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d80a      	bhi.n	8002b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f000 f943 	bl	8002daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b24:	4a06      	ldr	r2, [pc, #24]	@ (8002b40 <HAL_InitTick+0x68>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	24000010 	.word	0x24000010
 8002b3c:	24000004 	.word	0x24000004
 8002b40:	2400000c 	.word	0x2400000c

08002b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_IncTick+0x20>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_IncTick+0x24>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <HAL_IncTick+0x24>)
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	24000010 	.word	0x24000010
 8002b68:	24019d50 	.word	0x24019d50

08002b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_GetTick+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	24019d50 	.word	0x24019d50

08002b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff ffee 	bl	8002b6c <HAL_GetTick>
 8002b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d005      	beq.n	8002baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_Delay+0x44>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002baa:	bf00      	nop
 8002bac:	f7ff ffde 	bl	8002b6c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d8f7      	bhi.n	8002bac <HAL_Delay+0x28>
  {
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	24000010 	.word	0x24000010

08002bcc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002bdc:	4904      	ldr	r1, [pc, #16]	@ (8002bf0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	58000400 	.word	0x58000400

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <__NVIC_SetPriorityGrouping+0x40>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <__NVIC_SetPriorityGrouping+0x40>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00
 8002c38:	05fa0000 	.word	0x05fa0000

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	@ (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	@ (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d60:	d301      	bcc.n	8002d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00f      	b.n	8002d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <SysTick_Config+0x40>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295
 8002d74:	f7ff ff8e 	bl	8002c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <SysTick_Config+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7e:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <SysTick_Config+0x40>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff29 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff40 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff90 	bl	8002ce8 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5f 	bl	8002c94 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff33 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffa4 	bl	8002d50 <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0e3      	b.n	8002fee <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d106      	bne.n	8002e3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fab1 	bl	80023a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff8 <HAL_ETH_Init+0x1e4>)
 8002e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e44:	4a6c      	ldr	r2, [pc, #432]	@ (8002ff8 <HAL_ETH_Init+0x1e4>)
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff8 <HAL_ETH_Init+0x1e4>)
 8002e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7a1b      	ldrb	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d103      	bne.n	8002e6c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f7ff feb1 	bl	8002bcc <HAL_SYSCFG_ETHInterfaceSelect>
 8002e6a:	e003      	b.n	8002e74 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002e6c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002e70:	f7ff feac 	bl	8002bcc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002e74:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <HAL_ETH_Init+0x1e8>)
 8002e76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7ff fe6c 	bl	8002b6c <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002e96:	e011      	b.n	8002ebc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e98:	f7ff fe68 	bl	8002b6c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ea6:	d909      	bls.n	8002ebc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	22e0      	movs	r2, #224	@ 0xe0
 8002eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e098      	b.n	8002fee <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e4      	bne.n	8002e98 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f89e 	bl	8003010 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002ed4:	f002 fb14 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_ETH_Init+0x1ec>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9a      	lsrs	r2, r3, #18
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fa81 	bl	80033f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002efa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002efe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f0e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	22e0      	movs	r2, #224	@ 0xe0
 8002f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e05d      	b.n	8002fee <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f3a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002f3e:	4b31      	ldr	r3, [pc, #196]	@ (8003004 <HAL_ETH_Init+0x1f0>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6952      	ldr	r2, [r2, #20]
 8002f46:	0051      	lsls	r1, r2, #1
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f52:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fae9 	bl	800352e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fb2f 	bl	80035c0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	3305      	adds	r3, #5
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	021a      	lsls	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	3303      	adds	r3, #3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	061a      	lsls	r2, r3, #24
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	3302      	adds	r3, #2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002fa0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002fae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002fb0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <HAL_ETH_Init+0x1f4>)
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <HAL_ETH_Init+0x1f8>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58000400 	.word	0x58000400
 8003000:	431bde83 	.word	0x431bde83
 8003004:	ffff8001 	.word	0xffff8001
 8003008:	0c020060 	.word	0x0c020060
 800300c:	0c20c000 	.word	0x0c20c000

08003010 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003020:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003028:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800302a:	f002 fa69 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 800302e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d804      	bhi.n	8003042 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e022      	b.n	8003088 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d204      	bcs.n	8003054 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e019      	b.n	8003088 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d915      	bls.n	8003088 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d804      	bhi.n	800306e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e00c      	b.n	8003088 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a0e      	ldr	r2, [pc, #56]	@ (80030ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d804      	bhi.n	8003080 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e003      	b.n	8003088 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	02160ebf 	.word	0x02160ebf
 80030a0:	03938700 	.word	0x03938700
 80030a4:	05f5e0ff 	.word	0x05f5e0ff
 80030a8:	08f0d17f 	.word	0x08f0d17f
 80030ac:	0ee6b27f 	.word	0x0ee6b27f

080030b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80030c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80030ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	7b1b      	ldrb	r3, [r3, #12]
 80030d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80030d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7b5b      	ldrb	r3, [r3, #13]
 80030d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80030da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	7b9b      	ldrb	r3, [r3, #14]
 80030e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80030e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	7bdb      	ldrb	r3, [r3, #15]
 80030e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80030ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	7c12      	ldrb	r2, [r2, #16]
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	d102      	bne.n	80030fa <ETH_SetMACConfig+0x4a>
 80030f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80030f8:	e000      	b.n	80030fc <ETH_SetMACConfig+0x4c>
 80030fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80030fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	7c52      	ldrb	r2, [r2, #17]
 8003102:	2a00      	cmp	r2, #0
 8003104:	d102      	bne.n	800310c <ETH_SetMACConfig+0x5c>
 8003106:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800310a:	e000      	b.n	800310e <ETH_SetMACConfig+0x5e>
 800310c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800310e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	7c9b      	ldrb	r3, [r3, #18]
 8003114:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003116:	431a      	orrs	r2, r3
               macconf->Speed |
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800311c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	7f1b      	ldrb	r3, [r3, #28]
 8003128:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800312a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	7f5b      	ldrb	r3, [r3, #29]
 8003130:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003132:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	7f92      	ldrb	r2, [r2, #30]
 8003138:	2a00      	cmp	r2, #0
 800313a:	d102      	bne.n	8003142 <ETH_SetMACConfig+0x92>
 800313c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003140:	e000      	b.n	8003144 <ETH_SetMACConfig+0x94>
 8003142:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003144:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	7fdb      	ldrb	r3, [r3, #31]
 800314a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800314c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003154:	2a00      	cmp	r2, #0
 8003156:	d102      	bne.n	800315e <ETH_SetMACConfig+0xae>
 8003158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800315c:	e000      	b.n	8003160 <ETH_SetMACConfig+0xb0>
 800315e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003160:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003166:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800316e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003170:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b56      	ldr	r3, [pc, #344]	@ (80032dc <ETH_SetMACConfig+0x22c>)
 8003182:	4013      	ands	r3, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	430b      	orrs	r3, r1
 800318c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800319a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800319c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80031a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80031ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80031b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d102      	bne.n	80031c2 <ETH_SetMACConfig+0x112>
 80031bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031c0:	e000      	b.n	80031c4 <ETH_SetMACConfig+0x114>
 80031c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80031c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4b42      	ldr	r3, [pc, #264]	@ (80032e0 <ETH_SetMACConfig+0x230>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	430b      	orrs	r3, r1
 80031e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4b3a      	ldr	r3, [pc, #232]	@ (80032e4 <ETH_SetMACConfig+0x234>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	430b      	orrs	r3, r1
 8003204:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800320c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003212:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800321a:	2a00      	cmp	r2, #0
 800321c:	d101      	bne.n	8003222 <ETH_SetMACConfig+0x172>
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	e000      	b.n	8003224 <ETH_SetMACConfig+0x174>
 8003222:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003224:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003236:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	430b      	orrs	r3, r1
 8003244:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800324c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003254:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	f023 0103 	bic.w	r1, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	430a      	orrs	r2, r1
 800326e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800327a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003296:	2a00      	cmp	r2, #0
 8003298:	d101      	bne.n	800329e <ETH_SetMACConfig+0x1ee>
 800329a:	2240      	movs	r2, #64	@ 0x40
 800329c:	e000      	b.n	80032a0 <ETH_SetMACConfig+0x1f0>
 800329e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80032a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80032a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80032aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80032b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80032c0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	00048083 	.word	0x00048083
 80032e0:	c0f88000 	.word	0xc0f88000
 80032e4:	fffffef0 	.word	0xfffffef0

080032e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b38      	ldr	r3, [pc, #224]	@ (80033e0 <ETH_SetDMAConfig+0xf8>)
 80032fe:	4013      	ands	r3, r2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	430b      	orrs	r3, r1
 800330a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800330e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	791b      	ldrb	r3, [r3, #4]
 8003314:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800331a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	7b1b      	ldrb	r3, [r3, #12]
 8003320:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4b2c      	ldr	r3, [pc, #176]	@ (80033e4 <ETH_SetDMAConfig+0xfc>)
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	68f9      	ldr	r1, [r7, #12]
 800333a:	430b      	orrs	r3, r1
 800333c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003340:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	7b5b      	ldrb	r3, [r3, #13]
 8003346:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003358:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800335c:	4b22      	ldr	r3, [pc, #136]	@ (80033e8 <ETH_SetDMAConfig+0x100>)
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	430b      	orrs	r3, r1
 8003368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800336c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	7d1b      	ldrb	r3, [r3, #20]
 8003378:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800337a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	7f5b      	ldrb	r3, [r3, #29]
 8003380:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800338e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003392:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <ETH_SetDMAConfig+0x104>)
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	430b      	orrs	r3, r1
 800339e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033a2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	7f1b      	ldrb	r3, [r3, #28]
 80033aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <ETH_SetDMAConfig+0x108>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033d0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	ffff87fd 	.word	0xffff87fd
 80033e4:	ffff2ffe 	.word	0xffff2ffe
 80033e8:	fffec000 	.word	0xfffec000
 80033ec:	ffc0efef 	.word	0xffc0efef
 80033f0:	7fc0ffff 	.word	0x7fc0ffff

080033f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0a4      	sub	sp, #144	@ 0x90
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003402:	2300      	movs	r3, #0
 8003404:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003434:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800343c:	2300      	movs	r3, #0
 800343e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800344c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003450:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003458:	2300      	movs	r3, #0
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800346e:	2300      	movs	r3, #0
 8003470:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003472:	2300      	movs	r3, #0
 8003474:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003476:	2300      	movs	r3, #0
 8003478:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800348c:	2320      	movs	r3, #32
 800348e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800349e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034a8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80034ce:	2300      	movs	r3, #0
 80034d0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fde6 	bl	80030b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034e8:	2301      	movs	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003502:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003508:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800350c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003514:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800351a:	f107 0308 	add.w	r3, r7, #8
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fee1 	bl	80032e8 <ETH_SetDMAConfig>
}
 8003526:	bf00      	nop
 8003528:	3790      	adds	r7, #144	@ 0x90
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e01d      	b.n	8003578 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68d9      	ldr	r1, [r3, #12]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2200      	movs	r2, #0
 8003558:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	3206      	adds	r2, #6
 800356e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3301      	adds	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d9de      	bls.n	800353c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800358c:	461a      	mov	r2, r3
 800358e:	2303      	movs	r3, #3
 8003590:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e023      	b.n	8003616 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6919      	ldr	r1, [r3, #16]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	3212      	adds	r2, #18
 800360c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d9d8      	bls.n	80035ce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003642:	461a      	mov	r2, r3
 8003644:	2303      	movs	r3, #3
 8003646:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003656:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800366a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	@ 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800368a:	4b86      	ldr	r3, [pc, #536]	@ (80038a4 <HAL_GPIO_Init+0x228>)
 800368c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800368e:	e18c      	b.n	80039aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 817e 	beq.w	80039a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d005      	beq.n	80036c0 <HAL_GPIO_Init+0x44>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d130      	bne.n	8003722 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036f6:	2201      	movs	r2, #1
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 0201 	and.w	r2, r3, #1
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b03      	cmp	r3, #3
 800372c:	d017      	beq.n	800375e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d123      	bne.n	80037b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	220f      	movs	r2, #15
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2203      	movs	r2, #3
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4013      	ands	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80d8 	beq.w	80039a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f4:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <HAL_GPIO_Init+0x22c>)
 80037f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037fa:	4a2b      	ldr	r2, [pc, #172]	@ (80038a8 <HAL_GPIO_Init+0x22c>)
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003804:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <HAL_GPIO_Init+0x22c>)
 8003806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003812:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <HAL_GPIO_Init+0x230>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <HAL_GPIO_Init+0x234>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d04a      	beq.n	80038d4 <HAL_GPIO_Init+0x258>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1c      	ldr	r2, [pc, #112]	@ (80038b4 <HAL_GPIO_Init+0x238>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02b      	beq.n	800389e <HAL_GPIO_Init+0x222>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <HAL_GPIO_Init+0x23c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d025      	beq.n	800389a <HAL_GPIO_Init+0x21e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1a      	ldr	r2, [pc, #104]	@ (80038bc <HAL_GPIO_Init+0x240>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01f      	beq.n	8003896 <HAL_GPIO_Init+0x21a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a19      	ldr	r2, [pc, #100]	@ (80038c0 <HAL_GPIO_Init+0x244>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d019      	beq.n	8003892 <HAL_GPIO_Init+0x216>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <HAL_GPIO_Init+0x248>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_GPIO_Init+0x212>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a17      	ldr	r2, [pc, #92]	@ (80038c8 <HAL_GPIO_Init+0x24c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00d      	beq.n	800388a <HAL_GPIO_Init+0x20e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a16      	ldr	r2, [pc, #88]	@ (80038cc <HAL_GPIO_Init+0x250>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <HAL_GPIO_Init+0x20a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a15      	ldr	r2, [pc, #84]	@ (80038d0 <HAL_GPIO_Init+0x254>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_GPIO_Init+0x206>
 800387e:	2309      	movs	r3, #9
 8003880:	e029      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 8003882:	230a      	movs	r3, #10
 8003884:	e027      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 8003886:	2307      	movs	r3, #7
 8003888:	e025      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 800388a:	2306      	movs	r3, #6
 800388c:	e023      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 800388e:	2305      	movs	r3, #5
 8003890:	e021      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 8003892:	2304      	movs	r3, #4
 8003894:	e01f      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 8003896:	2303      	movs	r3, #3
 8003898:	e01d      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 800389a:	2302      	movs	r3, #2
 800389c:	e01b      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 800389e:	2301      	movs	r3, #1
 80038a0:	e019      	b.n	80038d6 <HAL_GPIO_Init+0x25a>
 80038a2:	bf00      	nop
 80038a4:	58000080 	.word	0x58000080
 80038a8:	58024400 	.word	0x58024400
 80038ac:	58000400 	.word	0x58000400
 80038b0:	58020000 	.word	0x58020000
 80038b4:	58020400 	.word	0x58020400
 80038b8:	58020800 	.word	0x58020800
 80038bc:	58020c00 	.word	0x58020c00
 80038c0:	58021000 	.word	0x58021000
 80038c4:	58021400 	.word	0x58021400
 80038c8:	58021800 	.word	0x58021800
 80038cc:	58021c00 	.word	0x58021c00
 80038d0:	58022400 	.word	0x58022400
 80038d4:	2300      	movs	r3, #0
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f002 0203 	and.w	r2, r2, #3
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	4093      	lsls	r3, r2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e6:	4938      	ldr	r1, [pc, #224]	@ (80039c8 <HAL_GPIO_Init+0x34c>)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	3302      	adds	r3, #2
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800391a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	3301      	adds	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f ae6b 	bne.w	8003690 <HAL_GPIO_Init+0x14>
  }
}
 80039ba:	bf00      	nop
 80039bc:	bf00      	nop
 80039be:	3724      	adds	r7, #36	@ 0x24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	58000400 	.word	0x58000400

080039cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e001      	b.n	80039ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e08b      	b.n	8003b5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe fd78 	bl	800254c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	@ 0x24
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	e006      	b.n	8003ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d108      	bne.n	8003ad2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	e007      	b.n	8003ae2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <HAL_I2C_Init+0x134>)
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	02008000 	.word	0x02008000

08003b68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	817b      	strh	r3, [r7, #10]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	813b      	strh	r3, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	f040 80f9 	bne.w	8003d82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x34>
 8003b96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0ed      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Mem_Write+0x4e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0e6      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bbe:	f7fe ffd5 	bl	8002b6c <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2319      	movs	r3, #25
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fac3 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0d1      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2221      	movs	r2, #33	@ 0x21
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	@ 0x40
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c08:	88f8      	ldrh	r0, [r7, #6]
 8003c0a:	893a      	ldrh	r2, [r7, #8]
 8003c0c:	8979      	ldrh	r1, [r7, #10]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4603      	mov	r3, r0
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f9d3 	bl	8003fc4 <I2C_RequestMemoryWrite>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0a9      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2bff      	cmp	r3, #255	@ 0xff
 8003c38:	d90e      	bls.n	8003c58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	22ff      	movs	r2, #255	@ 0xff
 8003c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	8979      	ldrh	r1, [r7, #10]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fc47 	bl	80044e4 <I2C_TransferConfig>
 8003c56:	e00f      	b.n	8003c78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	8979      	ldrh	r1, [r7, #10]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 fc36 	bl	80044e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fac6 	bl	800420e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e07b      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d034      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x1c8>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d130      	bne.n	8003d30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	@ 0x80
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fa3f 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e04d      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2bff      	cmp	r3, #255	@ 0xff
 8003cf0:	d90e      	bls.n	8003d10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	@ 0xff
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	2300      	movs	r3, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fbeb 	bl	80044e4 <I2C_TransferConfig>
 8003d0e:	e00f      	b.n	8003d30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	8979      	ldrh	r1, [r7, #10]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fbda 	bl	80044e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d19e      	bne.n	8003c78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 faac 	bl	800429c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e01a      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2220      	movs	r2, #32
 8003d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <HAL_I2C_Mem_Write+0x224>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	fe00e800 	.word	0xfe00e800

08003d90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	f040 80fd 	bne.w	8003fb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x34>
 8003dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0f1      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_Mem_Read+0x4e>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0ea      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003de6:	f7fe fec1 	bl	8002b6c <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2319      	movs	r3, #25
 8003df2:	2201      	movs	r2, #1
 8003df4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f9af 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0d5      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2222      	movs	r2, #34	@ 0x22
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2240      	movs	r2, #64	@ 0x40
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e30:	88f8      	ldrh	r0, [r7, #6]
 8003e32:	893a      	ldrh	r2, [r7, #8]
 8003e34:	8979      	ldrh	r1, [r7, #10]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	4603      	mov	r3, r0
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f913 	bl	800406c <I2C_RequestMemoryRead>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0ad      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2bff      	cmp	r3, #255	@ 0xff
 8003e60:	d90e      	bls.n	8003e80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	@ 0xff
 8003e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	8979      	ldrh	r1, [r7, #10]
 8003e70:	4b52      	ldr	r3, [pc, #328]	@ (8003fbc <HAL_I2C_Mem_Read+0x22c>)
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fb33 	bl	80044e4 <I2C_TransferConfig>
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	8979      	ldrh	r1, [r7, #10]
 8003e92:	4b4a      	ldr	r3, [pc, #296]	@ (8003fbc <HAL_I2C_Mem_Read+0x22c>)
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fb22 	bl	80044e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f956 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07c      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d034      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x1d0>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d130      	bne.n	8003f60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f927 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e04d      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2bff      	cmp	r3, #255	@ 0xff
 8003f20:	d90e      	bls.n	8003f40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	@ 0xff
 8003f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fad3 	bl	80044e4 <I2C_TransferConfig>
 8003f3e:	e00f      	b.n	8003f60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	8979      	ldrh	r1, [r7, #10]
 8003f52:	2300      	movs	r3, #0
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fac2 	bl	80044e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d19a      	bne.n	8003ea0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f994 	bl	800429c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e01a      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2220      	movs	r2, #32
 8003f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <HAL_I2C_Mem_Read+0x230>)
 8003f92:	400b      	ands	r3, r1
 8003f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	80002400 	.word	0x80002400
 8003fc0:	fe00e800 	.word	0xfe00e800

08003fc4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	817b      	strh	r3, [r7, #10]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	813b      	strh	r3, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	8979      	ldrh	r1, [r7, #10]
 8003fe4:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <I2C_RequestMemoryWrite+0xa4>)
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fa79 	bl	80044e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f909 	bl	800420e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e02c      	b.n	8004060 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28
 8004016:	e015      	b.n	8004044 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004018:	893b      	ldrh	r3, [r7, #8]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	b29b      	uxth	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f8ef 	bl	800420e <I2C_WaitOnTXISFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e012      	b.n	8004060 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800403a:	893b      	ldrh	r3, [r7, #8]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2200      	movs	r2, #0
 800404c:	2180      	movs	r1, #128	@ 0x80
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f884 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	80002000 	.word	0x80002000

0800406c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	4b20      	ldr	r3, [pc, #128]	@ (8004110 <I2C_RequestMemoryRead+0xa4>)
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fa26 	bl	80044e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f8b6 	bl	800420e <I2C_WaitOnTXISFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e02c      	b.n	8004106 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b2:	893b      	ldrh	r3, [r7, #8]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80040bc:	e015      	b.n	80040ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040be:	893b      	ldrh	r3, [r7, #8]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f89c 	bl	800420e <I2C_WaitOnTXISFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e012      	b.n	8004106 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2140      	movs	r1, #64	@ 0x40
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f831 	bl	800415c <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	80002000 	.word	0x80002000

08004114 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d103      	bne.n	8004132 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d007      	beq.n	8004150 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	619a      	str	r2, [r3, #24]
  }
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416c:	e03b      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f8d6 	bl	8004324 <I2C_IsErrorOccurred>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e041      	b.n	8004206 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d02d      	beq.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fcef 	bl	8002b6c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d122      	bne.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d113      	bne.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e00f      	b.n	8004206 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	429a      	cmp	r2, r3
 8004202:	d0b4      	beq.n	800416e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800421a:	e033      	b.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f87f 	bl	8004324 <I2C_IsErrorOccurred>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e031      	b.n	8004294 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d025      	beq.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fe fc98 	bl	8002b6c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11a      	bne.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d013      	beq.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e007      	b.n	8004294 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b02      	cmp	r3, #2
 8004290:	d1c4      	bne.n	800421c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a8:	e02f      	b.n	800430a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f838 	bl	8004324 <I2C_IsErrorOccurred>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e02d      	b.n	800431a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fc55 	bl	8002b6c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11a      	bne.n	800430a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d013      	beq.n	800430a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e007      	b.n	800431a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b20      	cmp	r3, #32
 8004316:	d1c8      	bne.n	80042aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	@ 0x28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d068      	beq.n	8004422 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004358:	e049      	b.n	80043ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d045      	beq.n	80043ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fe fc03 	bl	8002b6c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <I2C_IsErrorOccurred+0x54>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d13a      	bne.n	80043ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800438a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800439a:	d121      	bne.n	80043e0 <I2C_IsErrorOccurred+0xbc>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a2:	d01d      	beq.n	80043e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d01a      	beq.n	80043e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043ba:	f7fe fbd7 	bl	8002b6c <HAL_GetTick>
 80043be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c0:	e00e      	b.n	80043e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043c2:	f7fe fbd3 	bl	8002b6c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b19      	cmp	r3, #25
 80043ce:	d907      	bls.n	80043e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	f043 0320 	orr.w	r3, r3, #32
 80043d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043de:	e006      	b.n	80043ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d1e9      	bne.n	80043c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d003      	beq.n	8004404 <I2C_IsErrorOccurred+0xe0>
 80043fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0aa      	beq.n	800435a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2220      	movs	r2, #32
 8004412:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00b      	beq.n	800444c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004466:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00b      	beq.n	8004490 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004488:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01c      	beq.n	80044d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fe3b 	bl	8004114 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <I2C_IsErrorOccurred+0x1bc>)
 80044aa:	400b      	ands	r3, r1
 80044ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3728      	adds	r7, #40	@ 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	fe00e800 	.word	0xfe00e800

080044e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	4613      	mov	r3, r2
 80044f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044f6:	897b      	ldrh	r3, [r7, #10]
 80044f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044fc:	7a7b      	ldrb	r3, [r7, #9]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004504:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	4313      	orrs	r3, r2
 800450e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004512:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	0d5b      	lsrs	r3, r3, #21
 800451e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004522:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <I2C_TransferConfig+0x60>)
 8004524:	430b      	orrs	r3, r1
 8004526:	43db      	mvns	r3, r3
 8004528:	ea02 0103 	and.w	r1, r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	430a      	orrs	r2, r1
 8004534:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	03ff63ff 	.word	0x03ff63ff

08004548 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d138      	bne.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004568:	2302      	movs	r3, #2
 800456a:	e032      	b.n	80045d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	@ 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800459a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d139      	bne.n	8004668 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045fe:	2302      	movs	r3, #2
 8004600:	e033      	b.n	800466a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2224      	movs	r2, #36	@ 0x24
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004630:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d00a      	beq.n	80046a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800468c:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e01f      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e01d      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046a2:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	490f      	ldr	r1, [pc, #60]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046b2:	f7fe fa5b 	bl	8002b6c <HAL_GetTick>
 80046b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046b8:	e009      	b.n	80046ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ba:	f7fe fa57 	bl	8002b6c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046c8:	d901      	bls.n	80046ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e007      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046da:	d1ee      	bne.n	80046ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024800 	.word	0x58024800

080046ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	@ 0x30
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e3c8      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8087 	beq.w	800481a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470c:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004716:	4b86      	ldr	r3, [pc, #536]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471e:	2b10      	cmp	r3, #16
 8004720:	d007      	beq.n	8004732 <HAL_RCC_OscConfig+0x46>
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	2b18      	cmp	r3, #24
 8004726:	d110      	bne.n	800474a <HAL_RCC_OscConfig+0x5e>
 8004728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d10b      	bne.n	800474a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004732:	4b7f      	ldr	r3, [pc, #508]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d06c      	beq.n	8004818 <HAL_RCC_OscConfig+0x12c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d168      	bne.n	8004818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e3a2      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004752:	d106      	bne.n	8004762 <HAL_RCC_OscConfig+0x76>
 8004754:	4b76      	ldr	r3, [pc, #472]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a75      	ldr	r2, [pc, #468]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800475a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e02e      	b.n	80047c0 <HAL_RCC_OscConfig+0xd4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0x98>
 800476a:	4b71      	ldr	r3, [pc, #452]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a70      	ldr	r2, [pc, #448]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b6e      	ldr	r3, [pc, #440]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6d      	ldr	r2, [pc, #436]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800477c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e01d      	b.n	80047c0 <HAL_RCC_OscConfig+0xd4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0xbc>
 800478e:	4b68      	ldr	r3, [pc, #416]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a67      	ldr	r2, [pc, #412]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b65      	ldr	r3, [pc, #404]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a64      	ldr	r2, [pc, #400]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0xd4>
 80047a8:	4b61      	ldr	r3, [pc, #388]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a60      	ldr	r2, [pc, #384]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80047ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe f9d0 	bl	8002b6c <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fe f9cc 	bl	8002b6c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	@ 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e356      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047e2:	4b53      	ldr	r3, [pc, #332]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0xe4>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe f9bc 	bl	8002b6c <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe f9b8 	bl	8002b6c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	@ 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e342      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800480a:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x10c>
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 808c 	beq.w	8004940 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004828:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004830:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004832:	4b3f      	ldr	r3, [pc, #252]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004836:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_RCC_OscConfig+0x162>
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	2b18      	cmp	r3, #24
 8004842:	d137      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1c8>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d132      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800484e:	4b38      	ldr	r3, [pc, #224]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_RCC_OscConfig+0x17a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e314      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004866:	4b32      	ldr	r3, [pc, #200]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0219 	bic.w	r2, r3, #25
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	492f      	ldr	r1, [pc, #188]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe f978 	bl	8002b6c <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004880:	f7fe f974 	bl	8002b6c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e2fe      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004892:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	4920      	ldr	r1, [pc, #128]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b2:	e045      	b.n	8004940 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d026      	beq.n	800490a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 0219 	bic.w	r2, r3, #25
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4919      	ldr	r1, [pc, #100]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fe f94d 	bl	8002b6c <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d6:	f7fe f949 	bl	8002b6c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e2d3      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	490b      	ldr	r1, [pc, #44]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
 8004908:	e01a      	b.n	8004940 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a08      	ldr	r2, [pc, #32]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fe f929 	bl	8002b6c <HAL_GetTick>
 800491a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800491e:	f7fe f925 	bl	8002b6c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d903      	bls.n	8004934 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e2af      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
 8004930:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004934:	4b96      	ldr	r3, [pc, #600]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	d06a      	beq.n	8004a22 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494c:	4b90      	ldr	r3, [pc, #576]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004954:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004956:	4b8e      	ldr	r3, [pc, #568]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b08      	cmp	r3, #8
 8004960:	d007      	beq.n	8004972 <HAL_RCC_OscConfig+0x286>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b18      	cmp	r3, #24
 8004966:	d11b      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2b4>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d116      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004972:	4b87      	ldr	r3, [pc, #540]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x29e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b80      	cmp	r3, #128	@ 0x80
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e282      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800498a:	4b81      	ldr	r3, [pc, #516]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	497d      	ldr	r1, [pc, #500]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800499e:	e040      	b.n	8004a22 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d023      	beq.n	80049f0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049a8:	4b79      	ldr	r3, [pc, #484]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a78      	ldr	r2, [pc, #480]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fe f8da 	bl	8002b6c <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049bc:	f7fe f8d6 	bl	8002b6c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e260      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ce:	4b70      	ldr	r3, [pc, #448]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049da:	4b6d      	ldr	r3, [pc, #436]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	4969      	ldr	r1, [pc, #420]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
 80049ee:	e018      	b.n	8004a22 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049f0:	4b67      	ldr	r3, [pc, #412]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a66      	ldr	r2, [pc, #408]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 80049f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fe f8b6 	bl	8002b6c <HAL_GetTick>
 8004a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a04:	f7fe f8b2 	bl	8002b6c <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e23c      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a16:	4b5e      	ldr	r3, [pc, #376]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d036      	beq.n	8004a9c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d019      	beq.n	8004a6a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a36:	4b56      	ldr	r3, [pc, #344]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	4a55      	ldr	r2, [pc, #340]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fe f893 	bl	8002b6c <HAL_GetTick>
 8004a46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe f88f 	bl	8002b6c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e219      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x35e>
 8004a68:	e018      	b.n	8004a9c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6a:	4b49      	ldr	r3, [pc, #292]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6e:	4a48      	ldr	r2, [pc, #288]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fe f879 	bl	8002b6c <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fe f875 	bl	8002b6c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e1ff      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a90:	4b3f      	ldr	r3, [pc, #252]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d036      	beq.n	8004b16 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d019      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab0:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a36      	ldr	r2, [pc, #216]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004ab6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004abc:	f7fe f856 	bl	8002b6c <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac4:	f7fe f852 	bl	8002b6c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e1dc      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x3d8>
 8004ae2:	e018      	b.n	8004b16 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a29      	ldr	r2, [pc, #164]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004af0:	f7fe f83c 	bl	8002b6c <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af8:	f7fe f838 	bl	8002b6c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1c2      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b0a:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8086 	beq.w	8004c30 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b24:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x4a8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1a      	ldr	r2, [pc, #104]	@ (8004b94 <HAL_RCC_OscConfig+0x4a8>)
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b30:	f7fe f81c 	bl	8002b6c <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b38:	f7fe f818 	bl	8002b6c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1a2      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4a:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_RCC_OscConfig+0x4a8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCC_OscConfig+0x480>
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	4a0b      	ldr	r2, [pc, #44]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6a:	e032      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d111      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4ac>
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b78:	4a05      	ldr	r2, [pc, #20]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b80:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b84:	4a02      	ldr	r2, [pc, #8]	@ (8004b90 <HAL_RCC_OscConfig+0x4a4>)
 8004b86:	f023 0304 	bic.w	r3, r3, #4
 8004b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8c:	e021      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e6>
 8004b8e:	bf00      	nop
 8004b90:	58024400 	.word	0x58024400
 8004b94:	58024800 	.word	0x58024800
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d10c      	bne.n	8004bba <HAL_RCC_OscConfig+0x4ce>
 8004ba0:	4b83      	ldr	r3, [pc, #524]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	4a82      	ldr	r2, [pc, #520]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bac:	4b80      	ldr	r3, [pc, #512]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	4a7f      	ldr	r2, [pc, #508]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb8:	e00b      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e6>
 8004bba:	4b7d      	ldr	r3, [pc, #500]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	4a79      	ldr	r2, [pc, #484]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d015      	beq.n	8004c06 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bda:	f7fd ffc7 	bl	8002b6c <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fd ffc3 	bl	8002b6c <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e14b      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bf8:	4b6d      	ldr	r3, [pc, #436]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ee      	beq.n	8004be2 <HAL_RCC_OscConfig+0x4f6>
 8004c04:	e014      	b.n	8004c30 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fd ffb1 	bl	8002b6c <HAL_GetTick>
 8004c0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fd ffad 	bl	8002b6c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e135      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c24:	4b62      	ldr	r3, [pc, #392]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1ee      	bne.n	8004c0e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 812a 	beq.w	8004e8e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c42:	2b18      	cmp	r3, #24
 8004c44:	f000 80ba 	beq.w	8004dbc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	f040 8095 	bne.w	8004d7c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c52:	4b57      	ldr	r3, [pc, #348]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fd ff85 	bl	8002b6c <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fd ff81 	bl	8002b6c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e10b      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c78:	4b4d      	ldr	r3, [pc, #308]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c84:	4b4a      	ldr	r3, [pc, #296]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c88:	4b4a      	ldr	r3, [pc, #296]	@ (8004db4 <HAL_RCC_OscConfig+0x6c8>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c94:	0112      	lsls	r2, r2, #4
 8004c96:	430a      	orrs	r2, r1
 8004c98:	4945      	ldr	r1, [pc, #276]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cac:	3b01      	subs	r3, #1
 8004cae:	025b      	lsls	r3, r3, #9
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cce:	4938      	ldr	r1, [pc, #224]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cd4:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	4a35      	ldr	r2, [pc, #212]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ce0:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce4:	4b34      	ldr	r3, [pc, #208]	@ (8004db8 <HAL_RCC_OscConfig+0x6cc>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cec:	00d2      	lsls	r2, r2, #3
 8004cee:	4930      	ldr	r1, [pc, #192]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	f023 020c 	bic.w	r2, r3, #12
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	492b      	ldr	r1, [pc, #172]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d06:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0a:	f023 0202 	bic.w	r2, r3, #2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	4927      	ldr	r1, [pc, #156]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d18:	4b25      	ldr	r3, [pc, #148]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	4a24      	ldr	r2, [pc, #144]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d24:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	4a21      	ldr	r2, [pc, #132]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a1e      	ldr	r2, [pc, #120]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4a1b      	ldr	r2, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d48:	4b19      	ldr	r3, [pc, #100]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd ff0a 	bl	8002b6c <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fd ff06 	bl	8002b6c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e090      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d6e:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0x670>
 8004d7a:	e088      	b.n	8004e8e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0b      	ldr	r2, [pc, #44]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fd fef0 	bl	8002b6c <HAL_GetTick>
 8004d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fd feec 	bl	8002b6c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e076      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004da2:	4b03      	ldr	r3, [pc, #12]	@ (8004db0 <HAL_RCC_OscConfig+0x6c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x6a4>
 8004dae:	e06e      	b.n	8004e8e <HAL_RCC_OscConfig+0x7a2>
 8004db0:	58024400 	.word	0x58024400
 8004db4:	fffffc0c 	.word	0xfffffc0c
 8004db8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004dbc:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dc2:	4b35      	ldr	r3, [pc, #212]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d031      	beq.n	8004e34 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f003 0203 	and.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d12a      	bne.n	8004e34 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d122      	bne.n	8004e34 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d11a      	bne.n	8004e34 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	0a5b      	lsrs	r3, r3, #9
 8004e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d108      	bne.n	8004e34 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e02b      	b.n	8004e90 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e38:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3c:	08db      	lsrs	r3, r3, #3
 8004e3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d01f      	beq.n	8004e8e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e4e:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	4a11      	ldr	r2, [pc, #68]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e5a:	f7fd fe87 	bl	8002b6c <HAL_GetTick>
 8004e5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e60:	bf00      	nop
 8004e62:	f7fd fe83 	bl	8002b6c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d0f9      	beq.n	8004e62 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e72:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <HAL_RCC_OscConfig+0x7b0>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e7a:	00d2      	lsls	r2, r2, #3
 8004e7c:	4906      	ldr	r1, [pc, #24]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	4a04      	ldr	r2, [pc, #16]	@ (8004e98 <HAL_RCC_OscConfig+0x7ac>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3730      	adds	r7, #48	@ 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	ffff0007 	.word	0xffff0007

08004ea0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e19c      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d910      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b87      	ldr	r3, [pc, #540]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 020f 	bic.w	r2, r3, #15
 8004eca:	4985      	ldr	r1, [pc, #532]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b83      	ldr	r3, [pc, #524]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e184      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	4b7b      	ldr	r3, [pc, #492]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d908      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f00:	4b78      	ldr	r3, [pc, #480]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	4975      	ldr	r1, [pc, #468]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	4b70      	ldr	r3, [pc, #448]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d908      	bls.n	8004f40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	496a      	ldr	r1, [pc, #424]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	4b64      	ldr	r3, [pc, #400]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d908      	bls.n	8004f6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f5c:	4b61      	ldr	r3, [pc, #388]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	495e      	ldr	r1, [pc, #376]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	4b59      	ldr	r3, [pc, #356]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d908      	bls.n	8004f9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f8a:	4b56      	ldr	r3, [pc, #344]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4953      	ldr	r1, [pc, #332]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	4b4d      	ldr	r3, [pc, #308]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d908      	bls.n	8004fca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f023 020f 	bic.w	r2, r3, #15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4947      	ldr	r1, [pc, #284]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d055      	beq.n	8005082 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fd6:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4940      	ldr	r1, [pc, #256]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d121      	bne.n	8005040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0f6      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d107      	bne.n	8005018 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005008:	4b36      	ldr	r3, [pc, #216]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d115      	bne.n	8005040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0ea      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d107      	bne.n	8005030 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005020:	4b30      	ldr	r3, [pc, #192]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0de      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005030:	4b2c      	ldr	r3, [pc, #176]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0d6      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005040:	4b28      	ldr	r3, [pc, #160]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f023 0207 	bic.w	r2, r3, #7
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4925      	ldr	r1, [pc, #148]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 800504e:	4313      	orrs	r3, r2
 8005050:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005052:	f7fd fd8b 	bl	8002b6c <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005058:	e00a      	b.n	8005070 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505a:	f7fd fd87 	bl	8002b6c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0be      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005070:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	429a      	cmp	r2, r3
 8005080:	d1eb      	bne.n	800505a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d010      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	429a      	cmp	r2, r3
 800509c:	d208      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509e:	4b11      	ldr	r3, [pc, #68]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f023 020f 	bic.w	r2, r3, #15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	490e      	ldr	r1, [pc, #56]	@ (80050e4 <HAL_RCC_ClockConfig+0x244>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d214      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 020f 	bic.w	r2, r3, #15
 80050c6:	4906      	ldr	r1, [pc, #24]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <HAL_RCC_ClockConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d005      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e086      	b.n	80051ee <HAL_RCC_ClockConfig+0x34e>
 80050e0:	52002000 	.word	0x52002000
 80050e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d010      	beq.n	8005116 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	4b3f      	ldr	r3, [pc, #252]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005100:	429a      	cmp	r2, r3
 8005102:	d208      	bcs.n	8005116 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005104:	4b3c      	ldr	r3, [pc, #240]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	4939      	ldr	r1, [pc, #228]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005112:	4313      	orrs	r3, r2
 8005114:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d010      	beq.n	8005144 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	4b34      	ldr	r3, [pc, #208]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800512e:	429a      	cmp	r2, r3
 8005130:	d208      	bcs.n	8005144 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005132:	4b31      	ldr	r3, [pc, #196]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	492e      	ldr	r1, [pc, #184]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005140:	4313      	orrs	r3, r2
 8005142:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800515c:	429a      	cmp	r2, r3
 800515e:	d208      	bcs.n	8005172 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005160:	4b25      	ldr	r3, [pc, #148]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	4922      	ldr	r1, [pc, #136]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 800516e:	4313      	orrs	r3, r2
 8005170:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b00      	cmp	r3, #0
 800517c:	d010      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800518a:	429a      	cmp	r2, r3
 800518c:	d208      	bcs.n	80051a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800518e:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	4917      	ldr	r1, [pc, #92]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 800519c:	4313      	orrs	r3, r2
 800519e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051a0:	f000 f834 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	4912      	ldr	r1, [pc, #72]	@ (80051fc <HAL_RCC_ClockConfig+0x35c>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051be:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <HAL_RCC_ClockConfig+0x358>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	4a0d      	ldr	r2, [pc, #52]	@ (80051fc <HAL_RCC_ClockConfig+0x35c>)
 80051c8:	5cd3      	ldrb	r3, [r2, r3]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005200 <HAL_RCC_ClockConfig+0x360>)
 80051d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005204 <HAL_RCC_ClockConfig+0x364>)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051de:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <HAL_RCC_ClockConfig+0x368>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fd fc78 	bl	8002ad8 <HAL_InitTick>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	58024400 	.word	0x58024400
 80051fc:	08030c68 	.word	0x08030c68
 8005200:	24000008 	.word	0x24000008
 8005204:	24000004 	.word	0x24000004
 8005208:	2400000c 	.word	0x2400000c

0800520c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	@ 0x24
 8005210:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005212:	4bb3      	ldr	r3, [pc, #716]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800521a:	2b18      	cmp	r3, #24
 800521c:	f200 8155 	bhi.w	80054ca <HAL_RCC_GetSysClockFreq+0x2be>
 8005220:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800528d 	.word	0x0800528d
 800522c:	080054cb 	.word	0x080054cb
 8005230:	080054cb 	.word	0x080054cb
 8005234:	080054cb 	.word	0x080054cb
 8005238:	080054cb 	.word	0x080054cb
 800523c:	080054cb 	.word	0x080054cb
 8005240:	080054cb 	.word	0x080054cb
 8005244:	080054cb 	.word	0x080054cb
 8005248:	080052b3 	.word	0x080052b3
 800524c:	080054cb 	.word	0x080054cb
 8005250:	080054cb 	.word	0x080054cb
 8005254:	080054cb 	.word	0x080054cb
 8005258:	080054cb 	.word	0x080054cb
 800525c:	080054cb 	.word	0x080054cb
 8005260:	080054cb 	.word	0x080054cb
 8005264:	080054cb 	.word	0x080054cb
 8005268:	080052b9 	.word	0x080052b9
 800526c:	080054cb 	.word	0x080054cb
 8005270:	080054cb 	.word	0x080054cb
 8005274:	080054cb 	.word	0x080054cb
 8005278:	080054cb 	.word	0x080054cb
 800527c:	080054cb 	.word	0x080054cb
 8005280:	080054cb 	.word	0x080054cb
 8005284:	080054cb 	.word	0x080054cb
 8005288:	080052bf 	.word	0x080052bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800528c:	4b94      	ldr	r3, [pc, #592]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005298:	4b91      	ldr	r3, [pc, #580]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	08db      	lsrs	r3, r3, #3
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	4a90      	ldr	r2, [pc, #576]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
 80052a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052aa:	e111      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052ac:	4b8d      	ldr	r3, [pc, #564]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ae:	61bb      	str	r3, [r7, #24]
      break;
 80052b0:	e10e      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052b2:	4b8d      	ldr	r3, [pc, #564]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052b4:	61bb      	str	r3, [r7, #24]
      break;
 80052b6:	e10b      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052b8:	4b8c      	ldr	r3, [pc, #560]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052ba:	61bb      	str	r3, [r7, #24]
      break;
 80052bc:	e108      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052be:	4b88      	ldr	r3, [pc, #544]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052c8:	4b85      	ldr	r3, [pc, #532]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052d4:	4b82      	ldr	r3, [pc, #520]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052de:	4b80      	ldr	r3, [pc, #512]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	08db      	lsrs	r3, r3, #3
 80052e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80e1 	beq.w	80054c4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b02      	cmp	r3, #2
 8005306:	f000 8083 	beq.w	8005410 <HAL_RCC_GetSysClockFreq+0x204>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b02      	cmp	r3, #2
 800530e:	f200 80a1 	bhi.w	8005454 <HAL_RCC_GetSysClockFreq+0x248>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x114>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d056      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800531e:	e099      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005320:	4b6f      	ldr	r3, [pc, #444]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800532c:	4b6c      	ldr	r3, [pc, #432]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	4a6b      	ldr	r2, [pc, #428]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
 800533c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b62      	ldr	r3, [pc, #392]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a02 	vldr	s12, [r7, #8]
 800536a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80054f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005386:	e087      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80054f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b51      	ldr	r3, [pc, #324]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80054f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ca:	e065      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b40      	ldr	r3, [pc, #256]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80053f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80054f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800540e:	e043      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80054fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b2f      	ldr	r3, [pc, #188]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	ed97 6a02 	vldr	s12, [r7, #8]
 8005436:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80054f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005452:	e021      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80054f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b1e      	ldr	r3, [pc, #120]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a02 	vldr	s12, [r7, #8]
 800547a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80054f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005496:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005498:	4b11      	ldr	r3, [pc, #68]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	0a5b      	lsrs	r3, r3, #9
 800549e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054a2:	3301      	adds	r3, #1
 80054a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054bc:	ee17 3a90 	vmov	r3, s15
 80054c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054c2:	e005      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61bb      	str	r3, [r7, #24]
      break;
 80054c8:	e002      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054ca:	4b07      	ldr	r3, [pc, #28]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054cc:	61bb      	str	r3, [r7, #24]
      break;
 80054ce:	bf00      	nop
  }

  return sysclockfreq;
 80054d0:	69bb      	ldr	r3, [r7, #24]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3724      	adds	r7, #36	@ 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	58024400 	.word	0x58024400
 80054e4:	03d09000 	.word	0x03d09000
 80054e8:	003d0900 	.word	0x003d0900
 80054ec:	007a1200 	.word	0x007a1200
 80054f0:	46000000 	.word	0x46000000
 80054f4:	4c742400 	.word	0x4c742400
 80054f8:	4a742400 	.word	0x4a742400
 80054fc:	4af42400 	.word	0x4af42400

08005500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005506:	f7ff fe81 	bl	800520c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <HAL_RCC_GetHCLKFreq+0x50>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	0a1b      	lsrs	r3, r3, #8
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490f      	ldr	r1, [pc, #60]	@ (8005554 <HAL_RCC_GetHCLKFreq+0x54>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <HAL_RCC_GetHCLKFreq+0x50>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	4a09      	ldr	r2, [pc, #36]	@ (8005554 <HAL_RCC_GetHCLKFreq+0x54>)
 800552e:	5cd3      	ldrb	r3, [r2, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	fa22 f303 	lsr.w	r3, r2, r3
 800553a:	4a07      	ldr	r2, [pc, #28]	@ (8005558 <HAL_RCC_GetHCLKFreq+0x58>)
 800553c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800553e:	4a07      	ldr	r2, [pc, #28]	@ (800555c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005544:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <HAL_RCC_GetHCLKFreq+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	58024400 	.word	0x58024400
 8005554:	08030c68 	.word	0x08030c68
 8005558:	24000008 	.word	0x24000008
 800555c:	24000004 	.word	0x24000004

08005560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005564:	f7ff ffcc 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4904      	ldr	r1, [pc, #16]	@ (8005588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	58024400 	.word	0x58024400
 8005588:	08030c68 	.word	0x08030c68

0800558c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005590:	f7ff ffb6 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	4904      	ldr	r1, [pc, #16]	@ (80055b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	58024400 	.word	0x58024400
 80055b4:	08030c68 	.word	0x08030c68

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b0c6      	sub	sp, #280	@ 0x118
 80055be:	af00      	add	r7, sp, #0
 80055c0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055dc:	2500      	movs	r5, #0
 80055de:	ea54 0305 	orrs.w	r3, r4, r5
 80055e2:	d049      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ee:	d02f      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055f4:	d828      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055fa:	d01a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005600:	d822      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800560a:	d007      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800560c:	e01c      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560e:	4bab      	ldr	r3, [pc, #684]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	4aaa      	ldr	r2, [pc, #680]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005618:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800561a:	e01a      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	3308      	adds	r3, #8
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fc25 	bl	8006e74 <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005630:	e00f      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005636:	3328      	adds	r3, #40	@ 0x28
 8005638:	2102      	movs	r1, #2
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fccc 	bl	8006fd8 <RCCEx_PLL3_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005646:	e004      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800565a:	4b98      	ldr	r3, [pc, #608]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800565c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800565e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005668:	4a94      	ldr	r2, [pc, #592]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800566a:	430b      	orrs	r3, r1
 800566c:	6513      	str	r3, [r2, #80]	@ 0x50
 800566e:	e003      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005674:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005684:	f04f 0900 	mov.w	r9, #0
 8005688:	ea58 0309 	orrs.w	r3, r8, r9
 800568c:	d047      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005694:	2b04      	cmp	r3, #4
 8005696:	d82a      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056b5 	.word	0x080056b5
 80056a4:	080056c3 	.word	0x080056c3
 80056a8:	080056d9 	.word	0x080056d9
 80056ac:	080056f7 	.word	0x080056f7
 80056b0:	080056f7 	.word	0x080056f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b4:	4b81      	ldr	r3, [pc, #516]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	4a80      	ldr	r2, [pc, #512]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c0:	e01a      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	3308      	adds	r3, #8
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 fbd2 	bl	8006e74 <RCCEx_PLL2_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d6:	e00f      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	3328      	adds	r3, #40	@ 0x28
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fc79 	bl	8006fd8 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ec:	e004      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005700:	4b6e      	ldr	r3, [pc, #440]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005704:	f023 0107 	bic.w	r1, r3, #7
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	4a6b      	ldr	r2, [pc, #428]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005710:	430b      	orrs	r3, r1
 8005712:	6513      	str	r3, [r2, #80]	@ 0x50
 8005714:	e003      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800571a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800572a:	f04f 0b00 	mov.w	fp, #0
 800572e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005732:	d05b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800573c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005740:	d03b      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005742:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005746:	d834      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005748:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800574c:	d037      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x206>
 800574e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005752:	d82e      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005754:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005758:	d033      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800575a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800575e:	d828      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005764:	d01a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800576a:	d822      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005774:	d007      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005776:	e01c      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005778:	4b50      	ldr	r3, [pc, #320]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	4a4f      	ldr	r2, [pc, #316]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800577e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005784:	e01e      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578a:	3308      	adds	r3, #8
 800578c:	2100      	movs	r1, #0
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fb70 	bl	8006e74 <RCCEx_PLL2_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800579a:	e013      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	3328      	adds	r3, #40	@ 0x28
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fc17 	bl	8006fd8 <RCCEx_PLL3_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057b0:	e008      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057b8:	e004      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057ba:	bf00      	nop
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057cc:	4b3b      	ldr	r3, [pc, #236]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80057d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057dc:	4a37      	ldr	r2, [pc, #220]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e2:	e003      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005802:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d05d      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800580c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005814:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005818:	d03b      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800581a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800581e:	d834      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005824:	d037      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800582a:	d82e      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800582c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005830:	d033      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005832:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005836:	d828      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800583c:	d01a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800583e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005842:	d822      	bhi.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800584c:	d007      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800584e:	e01c      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	4a19      	ldr	r2, [pc, #100]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800585a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800585c:	e01e      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005862:	3308      	adds	r3, #8
 8005864:	2100      	movs	r1, #0
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fb04 	bl	8006e74 <RCCEx_PLL2_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005872:	e013      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	3328      	adds	r3, #40	@ 0x28
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fbab 	bl	8006fd8 <RCCEx_PLL3_Config>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005888:	e008      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005890:	e004      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800589a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10d      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058a4:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058b4:	4a01      	ldr	r2, [pc, #4]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058b6:	430b      	orrs	r3, r1
 80058b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ba:	e005      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80058bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80058d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058d8:	2300      	movs	r3, #0
 80058da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058de:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d03a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	2b30      	cmp	r3, #48	@ 0x30
 80058f0:	d01f      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80058f2:	2b30      	cmp	r3, #48	@ 0x30
 80058f4:	d819      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d00c      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d815      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d019      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005902:	2b10      	cmp	r3, #16
 8005904:	d111      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005906:	4baa      	ldr	r3, [pc, #680]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	4aa9      	ldr	r2, [pc, #676]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800590c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005912:	e011      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005918:	3308      	adds	r3, #8
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 faa9 	bl	8006e74 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005940:	4b9b      	ldr	r3, [pc, #620]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005944:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594e:	4a98      	ldr	r2, [pc, #608]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005950:	430b      	orrs	r3, r1
 8005952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005954:	e003      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800595a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800596a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800596e:	2300      	movs	r3, #0
 8005970:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005974:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d051      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800597e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005988:	d035      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800598a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800598e:	d82e      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005990:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005994:	d031      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800599a:	d828      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a0:	d01a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a6:	d822      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b0:	d007      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80059b2:	e01c      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	4a7d      	ldr	r2, [pc, #500]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059c0:	e01c      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c6:	3308      	adds	r3, #8
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 fa52 	bl	8006e74 <RCCEx_PLL2_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d6:	e011      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059dc:	3328      	adds	r3, #40	@ 0x28
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 faf9 	bl	8006fd8 <RCCEx_PLL3_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ec:	e006      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059f4:	e002      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80059f6:	bf00      	nop
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80059fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a04:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a12:	4a67      	ldr	r2, [pc, #412]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a18:	e003      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a32:	2300      	movs	r3, #0
 8005a34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a38:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	d053      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a4c:	d033      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005a4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a52:	d82c      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a58:	d02f      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a5e:	d826      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a64:	d02b      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005a66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a6a:	d820      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a70:	d012      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a76:	d81a      	bhi.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d022      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a80:	d115      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a86:	3308      	adds	r3, #8
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f9f2 	bl	8006e74 <RCCEx_PLL2_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a96:	e015      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9c:	3328      	adds	r3, #40	@ 0x28
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 fa99 	bl	8006fd8 <RCCEx_PLL3_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ab4:	e006      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ab6:	bf00      	nop
 8005ab8:	e004      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005aba:	bf00      	nop
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005acc:	4b38      	ldr	r3, [pc, #224]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ada:	4a35      	ldr	r2, [pc, #212]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae0:	e003      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b00:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b04:	460b      	mov	r3, r1
 8005b06:	4313      	orrs	r3, r2
 8005b08:	d058      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b16:	d033      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b1c:	d82c      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d02f      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b28:	d826      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b2e:	d02b      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005b30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b34:	d820      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b3a:	d012      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b40:	d81a      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d022      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b4a:	d115      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	3308      	adds	r3, #8
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f98d 	bl	8006e74 <RCCEx_PLL2_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b60:	e015      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b66:	3328      	adds	r3, #40	@ 0x28
 8005b68:	2101      	movs	r1, #1
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 fa34 	bl	8006fd8 <RCCEx_PLL3_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b76:	e00a      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b7e:	e006      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b80:	bf00      	nop
 8005b82:	e004      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b84:	bf00      	nop
 8005b86:	e002      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b88:	bf00      	nop
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10e      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ba6:	4a02      	ldr	r2, [pc, #8]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bac:	e006      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	d037      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be6:	d00e      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bec:	d816      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d018      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf6:	d111      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf8:	4bc4      	ldr	r3, [pc, #784]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfc:	4ac3      	ldr	r2, [pc, #780]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c04:	e00f      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f930 	bl	8006e74 <RCCEx_PLL2_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c1a:	e004      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c2e:	4bb7      	ldr	r3, [pc, #732]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3c:	4ab3      	ldr	r2, [pc, #716]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c42:	e003      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c66:	460b      	mov	r3, r1
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	d039      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d81c      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005cb9 	.word	0x08005cb9
 8005c80:	08005c8d 	.word	0x08005c8d
 8005c84:	08005c9b 	.word	0x08005c9b
 8005c88:	08005cb9 	.word	0x08005cb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8c:	4b9f      	ldr	r3, [pc, #636]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	4a9e      	ldr	r2, [pc, #632]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c98:	e00f      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	2102      	movs	r1, #2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f8e6 	bl	8006e74 <RCCEx_PLL2_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cae:	e004      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cc2:	4b92      	ldr	r3, [pc, #584]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc6:	f023 0103 	bic.w	r1, r3, #3
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cd0:	4a8e      	ldr	r2, [pc, #568]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cd6:	e003      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cf6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f000 8099 	beq.w	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d02:	4b83      	ldr	r3, [pc, #524]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a82      	ldr	r2, [pc, #520]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d0e:	f7fc ff2d 	bl	8002b6c <HAL_GetTick>
 8005d12:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d16:	e00b      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d18:	f7fc ff28 	bl	8002b6c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b64      	cmp	r3, #100	@ 0x64
 8005d26:	d903      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d2e:	e005      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d30:	4b77      	ldr	r3, [pc, #476]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ed      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d173      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d44:	4b71      	ldr	r3, [pc, #452]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d50:	4053      	eors	r3, r2
 8005d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d015      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d66:	4b69      	ldr	r3, [pc, #420]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6a:	4a68      	ldr	r2, [pc, #416]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d72:	4b66      	ldr	r3, [pc, #408]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	4a65      	ldr	r2, [pc, #404]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d7e:	4a63      	ldr	r2, [pc, #396]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d92:	d118      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc feea 	bl	8002b6c <HAL_GetTick>
 8005d98:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d9c:	e00d      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9e:	f7fc fee5 	bl	8002b6c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d903      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005db8:	e005      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dba:	4b54      	ldr	r3, [pc, #336]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0eb      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d129      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dde:	d10e      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005de0:	4b4a      	ldr	r3, [pc, #296]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005df0:	091a      	lsrs	r2, r3, #4
 8005df2:	4b48      	ldr	r3, [pc, #288]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	4a45      	ldr	r2, [pc, #276]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6113      	str	r3, [r2, #16]
 8005dfc:	e005      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005dfe:	4b43      	ldr	r3, [pc, #268]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4a42      	ldr	r2, [pc, #264]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	4b40      	ldr	r3, [pc, #256]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f002 0301 	and.w	r3, r2, #1
 8005e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f000 808f 	beq.w	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e5c:	2b28      	cmp	r3, #40	@ 0x28
 8005e5e:	d871      	bhi.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005e60:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005f4d 	.word	0x08005f4d
 8005e6c:	08005f45 	.word	0x08005f45
 8005e70:	08005f45 	.word	0x08005f45
 8005e74:	08005f45 	.word	0x08005f45
 8005e78:	08005f45 	.word	0x08005f45
 8005e7c:	08005f45 	.word	0x08005f45
 8005e80:	08005f45 	.word	0x08005f45
 8005e84:	08005f45 	.word	0x08005f45
 8005e88:	08005f19 	.word	0x08005f19
 8005e8c:	08005f45 	.word	0x08005f45
 8005e90:	08005f45 	.word	0x08005f45
 8005e94:	08005f45 	.word	0x08005f45
 8005e98:	08005f45 	.word	0x08005f45
 8005e9c:	08005f45 	.word	0x08005f45
 8005ea0:	08005f45 	.word	0x08005f45
 8005ea4:	08005f45 	.word	0x08005f45
 8005ea8:	08005f2f 	.word	0x08005f2f
 8005eac:	08005f45 	.word	0x08005f45
 8005eb0:	08005f45 	.word	0x08005f45
 8005eb4:	08005f45 	.word	0x08005f45
 8005eb8:	08005f45 	.word	0x08005f45
 8005ebc:	08005f45 	.word	0x08005f45
 8005ec0:	08005f45 	.word	0x08005f45
 8005ec4:	08005f45 	.word	0x08005f45
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08005f45 	.word	0x08005f45
 8005ed0:	08005f45 	.word	0x08005f45
 8005ed4:	08005f45 	.word	0x08005f45
 8005ed8:	08005f45 	.word	0x08005f45
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005f45 	.word	0x08005f45
 8005ee4:	08005f45 	.word	0x08005f45
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08005f45 	.word	0x08005f45
 8005ef0:	08005f45 	.word	0x08005f45
 8005ef4:	08005f45 	.word	0x08005f45
 8005ef8:	08005f45 	.word	0x08005f45
 8005efc:	08005f45 	.word	0x08005f45
 8005f00:	08005f45 	.word	0x08005f45
 8005f04:	08005f45 	.word	0x08005f45
 8005f08:	08005f4d 	.word	0x08005f4d
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	58024800 	.word	0x58024800
 8005f14:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 ffa7 	bl	8006e74 <RCCEx_PLL2_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f2c:	e00f      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f32:	3328      	adds	r3, #40	@ 0x28
 8005f34:	2101      	movs	r1, #1
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f84e 	bl	8006fd8 <RCCEx_PLL3_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f42:	e004      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f4a:	e000      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f56:	4bbf      	ldr	r3, [pc, #764]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f64:	4abb      	ldr	r2, [pc, #748]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f6a:	e003      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f002 0302 	and.w	r3, r2, #2
 8005f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d041      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d824      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005ff1 	.word	0x08005ff1
 8005fa8:	08005fbd 	.word	0x08005fbd
 8005fac:	08005fd3 	.word	0x08005fd3
 8005fb0:	08005ff1 	.word	0x08005ff1
 8005fb4:	08005ff1 	.word	0x08005ff1
 8005fb8:	08005ff1 	.word	0x08005ff1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ff55 	bl	8006e74 <RCCEx_PLL2_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00f      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fffc 	bl	8006fd8 <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fee:	e000      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ffa:	4b96      	ldr	r3, [pc, #600]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f023 0107 	bic.w	r1, r3, #7
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006008:	4a92      	ldr	r2, [pc, #584]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6553      	str	r3, [r2, #84]	@ 0x54
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f002 0304 	and.w	r3, r2, #4
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800602e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d044      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006040:	2b05      	cmp	r3, #5
 8006042:	d825      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006099 	.word	0x08006099
 8006050:	08006065 	.word	0x08006065
 8006054:	0800607b 	.word	0x0800607b
 8006058:	08006099 	.word	0x08006099
 800605c:	08006099 	.word	0x08006099
 8006060:	08006099 	.word	0x08006099
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	3308      	adds	r3, #8
 800606a:	2101      	movs	r1, #1
 800606c:	4618      	mov	r0, r3
 800606e:	f000 ff01 	bl	8006e74 <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006078:	e00f      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	3328      	adds	r3, #40	@ 0x28
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f000 ffa8 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a6:	f023 0107 	bic.w	r1, r3, #7
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	4a68      	ldr	r2, [pc, #416]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f002 0320 	and.w	r3, r2, #32
 80060ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d055      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ee:	d033      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80060f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f4:	d82c      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fa:	d02f      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d826      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006106:	d02b      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800610c:	d820      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006112:	d012      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006118:	d81a      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d022      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800611e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006122:	d115      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006128:	3308      	adds	r3, #8
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fea1 	bl	8006e74 <RCCEx_PLL2_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006138:	e015      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	3328      	adds	r3, #40	@ 0x28
 8006140:	2102      	movs	r1, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 ff48 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800614e:	e00a      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006156:	e006      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006158:	bf00      	nop
 800615a:	e004      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800615c:	bf00      	nop
 800615e:	e002      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006160:	bf00      	nop
 8006162:	e000      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800616e:	4b39      	ldr	r3, [pc, #228]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800617e:	4a35      	ldr	r2, [pc, #212]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6553      	str	r3, [r2, #84]	@ 0x54
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800618a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800619a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061a8:	460b      	mov	r3, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	d058      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061ba:	d033      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80061bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061c0:	d82c      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c6:	d02f      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061cc:	d826      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061d2:	d02b      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80061d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061d8:	d820      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061de:	d012      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80061e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e4:	d81a      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d022      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ee:	d115      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	3308      	adds	r3, #8
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fe3b 	bl	8006e74 <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006204:	e015      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	3328      	adds	r3, #40	@ 0x28
 800620c:	2102      	movs	r1, #2
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fee2 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800621a:	e00a      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006222:	e006      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006224:	bf00      	nop
 8006226:	e004      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10e      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800623c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800624a:	4a02      	ldr	r2, [pc, #8]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800624c:	430b      	orrs	r3, r1
 800624e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006250:	e006      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006252:	bf00      	nop
 8006254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800625c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800626c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006276:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	d055      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006288:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800628c:	d033      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800628e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006292:	d82c      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006298:	d02f      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800629a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629e:	d826      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062a4:	d02b      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80062a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062aa:	d820      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b0:	d012      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b6:	d81a      	bhi.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d022      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80062bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c0:	d115      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c6:	3308      	adds	r3, #8
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fdd2 	bl	8006e74 <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062d6:	e015      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062dc:	3328      	adds	r3, #40	@ 0x28
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fe79 	bl	8006fd8 <RCCEx_PLL3_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062ec:	e00a      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062f6:	bf00      	nop
 80062f8:	e004      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062fa:	bf00      	nop
 80062fc:	e002      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062fe:	bf00      	nop
 8006300:	e000      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800630c:	4ba0      	ldr	r3, [pc, #640]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800630e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006310:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800631c:	4a9c      	ldr	r2, [pc, #624]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6593      	str	r3, [r2, #88]	@ 0x58
 8006322:	e003      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f002 0308 	and.w	r3, r2, #8
 8006338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006342:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006346:	460b      	mov	r3, r1
 8006348:	4313      	orrs	r3, r2
 800634a:	d01e      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006358:	d10c      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	3328      	adds	r3, #40	@ 0x28
 8006360:	2102      	movs	r1, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fe38 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006374:	4b86      	ldr	r3, [pc, #536]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006378:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006384:	4a82      	ldr	r2, [pc, #520]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f002 0310 	and.w	r3, r2, #16
 8006396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800639a:	2300      	movs	r3, #0
 800639c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063a4:	460b      	mov	r3, r1
 80063a6:	4313      	orrs	r3, r2
 80063a8:	d01e      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b6:	d10c      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	3328      	adds	r3, #40	@ 0x28
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fe09 	bl	8006fd8 <RCCEx_PLL3_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063e4:	430b      	orrs	r3, r1
 80063e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063f6:	2300      	movs	r3, #0
 80063f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	d03e      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800640c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006410:	d022      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006416:	d81b      	bhi.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006420:	d00b      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006422:	e015      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006428:	3308      	adds	r3, #8
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fd21 	bl	8006e74 <RCCEx_PLL2_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006438:	e00f      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643e:	3328      	adds	r3, #40	@ 0x28
 8006440:	2102      	movs	r1, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fdc8 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800644e:	e004      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006462:	4b4b      	ldr	r3, [pc, #300]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006466:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006472:	4a47      	ldr	r2, [pc, #284]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006474:	430b      	orrs	r3, r1
 8006476:	6593      	str	r3, [r2, #88]	@ 0x58
 8006478:	e003      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800647e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800648e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006490:	2300      	movs	r3, #0
 8006492:	677b      	str	r3, [r7, #116]	@ 0x74
 8006494:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006498:	460b      	mov	r3, r1
 800649a:	4313      	orrs	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064aa:	d01f      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80064ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064b0:	d818      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80064b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064bc:	d007      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80064be:	e011      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c0:	4b33      	ldr	r3, [pc, #204]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	4a32      	ldr	r2, [pc, #200]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064cc:	e00f      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d2:	3328      	adds	r3, #40	@ 0x28
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fd7e 	bl	8006fd8 <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80064e2:	e004      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80064ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f6:	4b26      	ldr	r3, [pc, #152]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006506:	4a22      	ldr	r2, [pc, #136]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6553      	str	r3, [r2, #84]	@ 0x54
 800650c:	e003      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006524:	2300      	movs	r3, #0
 8006526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006528:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d034      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006540:	d007      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006542:	e011      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006544:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	4a11      	ldr	r2, [pc, #68]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006550:	e00e      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006556:	3308      	adds	r3, #8
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fc8a 	bl	8006e74 <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006566:	e003      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800656e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10d      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006578:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800657a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006586:	4a02      	ldr	r2, [pc, #8]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006588:	430b      	orrs	r3, r1
 800658a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800658c:	e006      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006598:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80065aa:	2300      	movs	r3, #0
 80065ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80065ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d00c      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065bc:	3328      	adds	r3, #40	@ 0x28
 80065be:	2102      	movs	r1, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fd09 	bl	8006fd8 <RCCEx_PLL3_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065e0:	2300      	movs	r3, #0
 80065e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d036      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f8:	d018      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80065fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065fe:	d811      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006604:	d014      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800660a:	d80b      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d011      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006614:	d106      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006616:	4bb7      	ldr	r3, [pc, #732]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	4ab6      	ldr	r2, [pc, #728]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800661c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006622:	e008      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800662a:	e004      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800662c:	bf00      	nop
 800662e:	e002      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800663e:	4bad      	ldr	r3, [pc, #692]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006642:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800664c:	4aa9      	ldr	r2, [pc, #676]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800664e:	430b      	orrs	r3, r1
 8006650:	6553      	str	r3, [r2, #84]	@ 0x54
 8006652:	e003      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006658:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006668:	653b      	str	r3, [r7, #80]	@ 0x50
 800666a:	2300      	movs	r3, #0
 800666c:	657b      	str	r3, [r7, #84]	@ 0x54
 800666e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006678:	4b9e      	ldr	r3, [pc, #632]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	4a9b      	ldr	r2, [pc, #620]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800669a:	2300      	movs	r3, #0
 800669c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800669e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066a8:	4b92      	ldr	r3, [pc, #584]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066b6:	4a8f      	ldr	r2, [pc, #572]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ca:	2300      	movs	r3, #0
 80066cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066d8:	4b86      	ldr	r3, [pc, #536]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	4a85      	ldr	r2, [pc, #532]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066e2:	6113      	str	r3, [r2, #16]
 80066e4:	4b83      	ldr	r3, [pc, #524]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066e6:	6919      	ldr	r1, [r3, #16]
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066f0:	4a80      	ldr	r2, [pc, #512]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006704:	2300      	movs	r3, #0
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006708:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006712:	4b78      	ldr	r3, [pc, #480]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006716:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	4a74      	ldr	r2, [pc, #464]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006722:	430b      	orrs	r3, r1
 8006724:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006732:	633b      	str	r3, [r7, #48]	@ 0x30
 8006734:	2300      	movs	r3, #0
 8006736:	637b      	str	r3, [r7, #52]	@ 0x34
 8006738:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006742:	4b6c      	ldr	r3, [pc, #432]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	4a68      	ldr	r2, [pc, #416]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	2100      	movs	r1, #0
 8006762:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800676a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d011      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006778:	3308      	adds	r3, #8
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fb79 	bl	8006e74 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006788:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006794:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	2100      	movs	r1, #0
 80067a2:	6239      	str	r1, [r7, #32]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d011      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b8:	3308      	adds	r3, #8
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fb59 	bl	8006e74 <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80067c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	2100      	movs	r1, #0
 80067e2:	61b9      	str	r1, [r7, #24]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	d011      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	3308      	adds	r3, #8
 80067fa:	2102      	movs	r1, #2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fb39 	bl	8006e74 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	2100      	movs	r1, #0
 8006822:	6139      	str	r1, [r7, #16]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d011      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	3328      	adds	r3, #40	@ 0x28
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fbcb 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	2100      	movs	r1, #0
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d011      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006878:	3328      	adds	r3, #40	@ 0x28
 800687a:	2101      	movs	r1, #1
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fbab 	bl	8006fd8 <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	2100      	movs	r1, #0
 80068a2:	6039      	str	r1, [r7, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068ae:	460b      	mov	r3, r1
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d011      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b8:	3328      	adds	r3, #40	@ 0x28
 80068ba:	2102      	movs	r1, #2
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fb8b 	bl	8006fd8 <RCCEx_PLL3_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80068c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80068d8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e000      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80068ec:	46bd      	mov	sp, r7
 80068ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400

080068f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068fc:	f7fe fe00 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4904      	ldr	r1, [pc, #16]	@ (8006920 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	58024400 	.word	0x58024400
 8006920:	08030c68 	.word	0x08030c68

08006924 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006924:	b480      	push	{r7}
 8006926:	b089      	sub	sp, #36	@ 0x24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800692c:	4ba1      	ldr	r3, [pc, #644]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006936:	4b9f      	ldr	r3, [pc, #636]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693a:	0b1b      	lsrs	r3, r3, #12
 800693c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006940:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006942:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	091b      	lsrs	r3, r3, #4
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800694e:	4b99      	ldr	r3, [pc, #612]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006952:	08db      	lsrs	r3, r3, #3
 8006954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	fb02 f303 	mul.w	r3, r2, r3
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8111 	beq.w	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b02      	cmp	r3, #2
 8006976:	f000 8083 	beq.w	8006a80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b02      	cmp	r3, #2
 800697e:	f200 80a1 	bhi.w	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d056      	beq.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800698e:	e099      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006990:	4b88      	ldr	r3, [pc, #544]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02d      	beq.n	80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800699c:	4b85      	ldr	r3, [pc, #532]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	08db      	lsrs	r3, r3, #3
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	4a84      	ldr	r2, [pc, #528]	@ (8006bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069a8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	ee07 3a90 	vmov	s15, r3
 80069b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c6:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069f6:	e087      	b.n	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3a:	e065      	b.n	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4e:	4b59      	ldr	r3, [pc, #356]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7e:	e043      	b.n	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a92:	4b48      	ldr	r3, [pc, #288]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac2:	e021      	b.n	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	4b37      	ldr	r3, [pc, #220]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b08:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	0a5b      	lsrs	r3, r3, #9
 8006b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2e:	ee17 2a90 	vmov	r2, s15
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b36:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5c:	ee17 2a90 	vmov	r2, s15
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b64:	4b13      	ldr	r3, [pc, #76]	@ (8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b68:	0e1b      	lsrs	r3, r3, #24
 8006b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b8a:	ee17 2a90 	vmov	r2, s15
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b92:	e008      	b.n	8006ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
}
 8006ba6:	bf00      	nop
 8006ba8:	3724      	adds	r7, #36	@ 0x24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	03d09000 	.word	0x03d09000
 8006bbc:	46000000 	.word	0x46000000
 8006bc0:	4c742400 	.word	0x4c742400
 8006bc4:	4a742400 	.word	0x4a742400
 8006bc8:	4af42400 	.word	0x4af42400

08006bcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b089      	sub	sp, #36	@ 0x24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bd4:	4ba1      	ldr	r3, [pc, #644]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006bde:	4b9f      	ldr	r3, [pc, #636]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	0d1b      	lsrs	r3, r3, #20
 8006be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006be8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bea:	4b9c      	ldr	r3, [pc, #624]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006bf6:	4b99      	ldr	r3, [pc, #612]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8111 	beq.w	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	f000 8083 	beq.w	8006d28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	f200 80a1 	bhi.w	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d056      	beq.n	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c36:	e099      	b.n	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c38:	4b88      	ldr	r3, [pc, #544]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02d      	beq.n	8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c44:	4b85      	ldr	r3, [pc, #532]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	4a84      	ldr	r2, [pc, #528]	@ (8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c9e:	e087      	b.n	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce2:	e065      	b.n	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf6:	4b59      	ldr	r3, [pc, #356]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d26:	e043      	b.n	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3a:	4b48      	ldr	r3, [pc, #288]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6a:	e021      	b.n	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7e:	4b37      	ldr	r3, [pc, #220]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006db0:	4b2a      	ldr	r3, [pc, #168]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db4:	0a5b      	lsrs	r3, r3, #9
 8006db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd6:	ee17 2a90 	vmov	r2, s15
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006dde:	4b1f      	ldr	r3, [pc, #124]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e04:	ee17 2a90 	vmov	r2, s15
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e0c:	4b13      	ldr	r3, [pc, #76]	@ (8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	0e1b      	lsrs	r3, r3, #24
 8006e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e32:	ee17 2a90 	vmov	r2, s15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e3a:	e008      	b.n	8006e4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	609a      	str	r2, [r3, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	3724      	adds	r7, #36	@ 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	03d09000 	.word	0x03d09000
 8006e64:	46000000 	.word	0x46000000
 8006e68:	4c742400 	.word	0x4c742400
 8006e6c:	4a742400 	.word	0x4a742400
 8006e70:	4af42400 	.word	0x4af42400

08006e74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e82:	4b53      	ldr	r3, [pc, #332]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d101      	bne.n	8006e92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e099      	b.n	8006fc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e92:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a4e      	ldr	r2, [pc, #312]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e9e:	f7fb fe65 	bl	8002b6c <HAL_GetTick>
 8006ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ea4:	e008      	b.n	8006eb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ea6:	f7fb fe61 	bl	8002b6c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e086      	b.n	8006fc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006eb8:	4b45      	ldr	r3, [pc, #276]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f0      	bne.n	8006ea6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ec4:	4b42      	ldr	r3, [pc, #264]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	493f      	ldr	r1, [pc, #252]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	025b      	lsls	r3, r3, #9
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	061b      	lsls	r3, r3, #24
 8006f04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f08:	4931      	ldr	r1, [pc, #196]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f0e:	4b30      	ldr	r3, [pc, #192]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	492d      	ldr	r1, [pc, #180]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f20:	4b2b      	ldr	r3, [pc, #172]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	f023 0220 	bic.w	r2, r3, #32
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	4928      	ldr	r1, [pc, #160]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f32:	4b27      	ldr	r3, [pc, #156]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	4a26      	ldr	r2, [pc, #152]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f38:	f023 0310 	bic.w	r3, r3, #16
 8006f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f3e:	4b24      	ldr	r3, [pc, #144]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f42:	4b24      	ldr	r3, [pc, #144]	@ (8006fd4 <RCCEx_PLL2_Config+0x160>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	69d2      	ldr	r2, [r2, #28]
 8006f4a:	00d2      	lsls	r2, r2, #3
 8006f4c:	4920      	ldr	r1, [pc, #128]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f52:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	f043 0310 	orr.w	r3, r3, #16
 8006f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f64:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f68:	4a19      	ldr	r2, [pc, #100]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f70:	e00f      	b.n	8006f92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d106      	bne.n	8006f86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f78:	4b15      	ldr	r3, [pc, #84]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	4a14      	ldr	r2, [pc, #80]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f84:	e005      	b.n	8006f92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f86:	4b12      	ldr	r3, [pc, #72]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	4a11      	ldr	r2, [pc, #68]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f92:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a0e      	ldr	r2, [pc, #56]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006f98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f9e:	f7fb fde5 	bl	8002b6c <HAL_GetTick>
 8006fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fa4:	e008      	b.n	8006fb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fa6:	f7fb fde1 	bl	8002b6c <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e006      	b.n	8006fc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fb8:	4b05      	ldr	r3, [pc, #20]	@ (8006fd0 <RCCEx_PLL2_Config+0x15c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0f0      	beq.n	8006fa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	58024400 	.word	0x58024400
 8006fd4:	ffff0007 	.word	0xffff0007

08006fd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fe6:	4b53      	ldr	r3, [pc, #332]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d101      	bne.n	8006ff6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e099      	b.n	800712a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007002:	f7fb fdb3 	bl	8002b6c <HAL_GetTick>
 8007006:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007008:	e008      	b.n	800701c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800700a:	f7fb fdaf 	bl	8002b6c <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e086      	b.n	800712a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800701c:	4b45      	ldr	r3, [pc, #276]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1f0      	bne.n	800700a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007028:	4b42      	ldr	r3, [pc, #264]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	493f      	ldr	r1, [pc, #252]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8007038:	4313      	orrs	r3, r2
 800703a:	628b      	str	r3, [r1, #40]	@ 0x28
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	3b01      	subs	r3, #1
 8007042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	025b      	lsls	r3, r3, #9
 800704e:	b29b      	uxth	r3, r3
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	3b01      	subs	r3, #1
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800706c:	4931      	ldr	r1, [pc, #196]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 800706e:	4313      	orrs	r3, r2
 8007070:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007072:	4b30      	ldr	r3, [pc, #192]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	492d      	ldr	r1, [pc, #180]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007084:	4b2b      	ldr	r3, [pc, #172]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	4928      	ldr	r1, [pc, #160]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007096:	4b27      	ldr	r3, [pc, #156]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a26      	ldr	r2, [pc, #152]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 800709c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070a2:	4b24      	ldr	r3, [pc, #144]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070a6:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <RCCEx_PLL3_Config+0x160>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	69d2      	ldr	r2, [r2, #28]
 80070ae:	00d2      	lsls	r2, r2, #3
 80070b0:	4920      	ldr	r1, [pc, #128]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	4a19      	ldr	r2, [pc, #100]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070d4:	e00f      	b.n	80070f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d106      	bne.n	80070ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070dc:	4b15      	ldr	r3, [pc, #84]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070e8:	e005      	b.n	80070f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ea:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	4a11      	ldr	r2, [pc, #68]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 80070fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007102:	f7fb fd33 	bl	8002b6c <HAL_GetTick>
 8007106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007108:	e008      	b.n	800711c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800710a:	f7fb fd2f 	bl	8002b6c <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d901      	bls.n	800711c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800711c:	4b05      	ldr	r3, [pc, #20]	@ (8007134 <RCCEx_PLL3_Config+0x15c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0f0      	beq.n	800710a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	58024400 	.word	0x58024400
 8007138:	ffff0007 	.word	0xffff0007

0800713c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e092      	b.n	8007274 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7a5b      	ldrb	r3, [r3, #9]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb fa5e 	bl	8002620 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0204 	bic.w	r2, r2, #4
 8007178:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b3e      	ldr	r3, [pc, #248]	@ (800727c <HAL_RNG_Init+0x140>)
 8007182:	4013      	ands	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6852      	ldr	r2, [r2, #4]
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007192:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a39      	ldr	r2, [pc, #228]	@ (8007280 <HAL_RNG_Init+0x144>)
 800719a:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f247 2274 	movw	r2, #29300	@ 0x7274
 80071a4:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80071b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071b6:	f7fb fcd9 	bl	8002b6c <HAL_GetTick>
 80071ba:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80071bc:	e016      	b.n	80071ec <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80071be:	f7fb fcd5 	bl	8002b6c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d90f      	bls.n	80071ec <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071da:	d107      	bne.n	80071ec <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e043      	b.n	8007274 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fa:	d0e0      	beq.n	80071be <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0204 	orr.w	r2, r2, #4
 800720a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007216:	2b40      	cmp	r3, #64	@ 0x40
 8007218:	d104      	bne.n	8007224 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e027      	b.n	8007274 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007224:	f7fb fca2 	bl	8002b6c <HAL_GetTick>
 8007228:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800722a:	e015      	b.n	8007258 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800722c:	f7fb fc9e 	bl	8002b6c <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d90e      	bls.n	8007258 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d007      	beq.n	8007258 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2204      	movs	r2, #4
 800724c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e00d      	b.n	8007274 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b01      	cmp	r3, #1
 8007264:	d1e2      	bne.n	800722c <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	bfffffdf 	.word	0xbfffffdf
 8007280:	17590abc 	.word	0x17590abc

08007284 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7a1b      	ldrb	r3, [r3, #8]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_RNG_GenerateRandomNumber+0x1a>
 800729a:	2302      	movs	r3, #2
 800729c:	e068      	b.n	8007370 <HAL_RNG_GenerateRandomNumber+0xec>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7a5b      	ldrb	r3, [r3, #9]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d157      	bne.n	800735e <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072be:	2b40      	cmp	r3, #64	@ 0x40
 80072c0:	d10f      	bne.n	80072e2 <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2208      	movs	r2, #8
 80072c6:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f85f 	bl	800738c <RNG_RecoverSeedError>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d104      	bne.n	80072e2 <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	60da      	str	r2, [r3, #12]
        return status;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	e046      	b.n	8007370 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80072e2:	f7fb fc43 	bl	8002b6c <HAL_GetTick>
 80072e6:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072e8:	e018      	b.n	800731c <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80072ea:	f7fb fc3f 	bl	8002b6c <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d911      	bls.n	800731c <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d00a      	beq.n	800731c <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e029      	b.n	8007370 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d1df      	bne.n	80072ea <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	d105      	bne.n	800734e <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2208      	movs	r2, #8
 8007346:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
 800734c:	e003      	b.n	8007356 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	725a      	strb	r2, [r3, #9]
 800735c:	e004      	b.n	8007368 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2204      	movs	r2, #4
 8007362:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	721a      	strb	r2, [r3, #8]

  return status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d008      	beq.n	80073b8 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	e05f      	b.n	8007478 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80073c6:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80073d6:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 80073d8:	2302      	movs	r3, #2
 80073da:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3b01      	subs	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d110      	bne.n	800740a <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f043 0202 	orr.w	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ffb9 	bl	8007378 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e03d      	b.n	8007486 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007418:	d0e0      	beq.n	80073dc <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007424:	2b40      	cmp	r3, #64	@ 0x40
 8007426:	d107      	bne.n	8007438 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007436:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 8007438:	2302      	movs	r3, #2
 800743a:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3b01      	subs	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d110      	bne.n	800746a <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f043 0202 	orr.w	r2, r3, #2
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ff89 	bl	8007378 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e00d      	b.n	8007486 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b04      	cmp	r3, #4
 8007476:	d0e1      	beq.n	800743c <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f023 0208 	bic.w	r2, r3, #8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e042      	b.n	8007526 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fb f8ee 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2224      	movs	r2, #36	@ 0x24
 80074bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 ff23 	bl	8008324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f8b4 	bl	800764c <UART_SetConfig>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e01b      	b.n	8007526 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800750c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0201 	orr.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 ffa2 	bl	8008468 <UART_CheckIdleState>
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b08a      	sub	sp, #40	@ 0x28
 8007532:	af02      	add	r7, sp, #8
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	603b      	str	r3, [r7, #0]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007544:	2b20      	cmp	r3, #32
 8007546:	d17b      	bne.n	8007640 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_UART_Transmit+0x26>
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e074      	b.n	8007642 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2221      	movs	r2, #33	@ 0x21
 8007564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007568:	f7fb fb00 	bl	8002b6c <HAL_GetTick>
 800756c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007586:	d108      	bne.n	800759a <HAL_UART_Transmit+0x6c>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e003      	b.n	80075a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075a2:	e030      	b.n	8007606 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2200      	movs	r2, #0
 80075ac:	2180      	movs	r1, #128	@ 0x80
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f001 f804 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e03d      	b.n	8007642 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10b      	bne.n	80075e4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	3302      	adds	r3, #2
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	e007      	b.n	80075f4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	781a      	ldrb	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	3301      	adds	r3, #1
 80075f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1c8      	bne.n	80075a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	2140      	movs	r1, #64	@ 0x40
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 ffcd 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e006      	b.n	8007642 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	e000      	b.n	8007642 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007640:	2302      	movs	r3, #2
  }
}
 8007642:	4618      	mov	r0, r3
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800764c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007650:	b092      	sub	sp, #72	@ 0x48
 8007652:	af00      	add	r7, sp, #0
 8007654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	431a      	orrs	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	431a      	orrs	r2, r3
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	4313      	orrs	r3, r2
 8007672:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4bbe      	ldr	r3, [pc, #760]	@ (8007974 <UART_SetConfig+0x328>)
 800767c:	4013      	ands	r3, r2
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007684:	430b      	orrs	r3, r1
 8007686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4ab3      	ldr	r2, [pc, #716]	@ (8007978 <UART_SetConfig+0x32c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b4:	4313      	orrs	r3, r2
 80076b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	4baf      	ldr	r3, [pc, #700]	@ (800797c <UART_SetConfig+0x330>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	f023 010f 	bic.w	r1, r3, #15
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4aa6      	ldr	r2, [pc, #664]	@ (8007980 <UART_SetConfig+0x334>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d177      	bne.n	80077dc <UART_SetConfig+0x190>
 80076ec:	4ba5      	ldr	r3, [pc, #660]	@ (8007984 <UART_SetConfig+0x338>)
 80076ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076f4:	2b28      	cmp	r3, #40	@ 0x28
 80076f6:	d86d      	bhi.n	80077d4 <UART_SetConfig+0x188>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0xb4>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	080077a5 	.word	0x080077a5
 8007704:	080077d5 	.word	0x080077d5
 8007708:	080077d5 	.word	0x080077d5
 800770c:	080077d5 	.word	0x080077d5
 8007710:	080077d5 	.word	0x080077d5
 8007714:	080077d5 	.word	0x080077d5
 8007718:	080077d5 	.word	0x080077d5
 800771c:	080077d5 	.word	0x080077d5
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077d5 	.word	0x080077d5
 8007728:	080077d5 	.word	0x080077d5
 800772c:	080077d5 	.word	0x080077d5
 8007730:	080077d5 	.word	0x080077d5
 8007734:	080077d5 	.word	0x080077d5
 8007738:	080077d5 	.word	0x080077d5
 800773c:	080077d5 	.word	0x080077d5
 8007740:	080077b5 	.word	0x080077b5
 8007744:	080077d5 	.word	0x080077d5
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077d5 	.word	0x080077d5
 8007754:	080077d5 	.word	0x080077d5
 8007758:	080077d5 	.word	0x080077d5
 800775c:	080077d5 	.word	0x080077d5
 8007760:	080077bd 	.word	0x080077bd
 8007764:	080077d5 	.word	0x080077d5
 8007768:	080077d5 	.word	0x080077d5
 800776c:	080077d5 	.word	0x080077d5
 8007770:	080077d5 	.word	0x080077d5
 8007774:	080077d5 	.word	0x080077d5
 8007778:	080077d5 	.word	0x080077d5
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077c5 	.word	0x080077c5
 8007784:	080077d5 	.word	0x080077d5
 8007788:	080077d5 	.word	0x080077d5
 800778c:	080077d5 	.word	0x080077d5
 8007790:	080077d5 	.word	0x080077d5
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077d5 	.word	0x080077d5
 800779c:	080077d5 	.word	0x080077d5
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e326      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e322      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e31e      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e31a      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077c4:	2320      	movs	r3, #32
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e316      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077cc:	2340      	movs	r3, #64	@ 0x40
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e312      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077d4:	2380      	movs	r3, #128	@ 0x80
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e30e      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a69      	ldr	r2, [pc, #420]	@ (8007988 <UART_SetConfig+0x33c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d130      	bne.n	8007848 <UART_SetConfig+0x1fc>
 80077e6:	4b67      	ldr	r3, [pc, #412]	@ (8007984 <UART_SetConfig+0x338>)
 80077e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d826      	bhi.n	8007840 <UART_SetConfig+0x1f4>
 80077f2:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x1ac>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007819 	.word	0x08007819
 8007800:	08007821 	.word	0x08007821
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e2f0      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007818:	2304      	movs	r3, #4
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e2ec      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007820:	2308      	movs	r3, #8
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e2e8      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007828:	2310      	movs	r3, #16
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e2e4      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007830:	2320      	movs	r3, #32
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e2e0      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007838:	2340      	movs	r3, #64	@ 0x40
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e2dc      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e2d8      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a4f      	ldr	r2, [pc, #316]	@ (800798c <UART_SetConfig+0x340>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d130      	bne.n	80078b4 <UART_SetConfig+0x268>
 8007852:	4b4c      	ldr	r3, [pc, #304]	@ (8007984 <UART_SetConfig+0x338>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b05      	cmp	r3, #5
 800785c:	d826      	bhi.n	80078ac <UART_SetConfig+0x260>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <UART_SetConfig+0x218>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	0800787d 	.word	0x0800787d
 8007868:	08007885 	.word	0x08007885
 800786c:	0800788d 	.word	0x0800788d
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e2ba      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e2b6      	b.n	8007dfa <UART_SetConfig+0x7ae>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e2b2      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e2ae      	b.n	8007dfa <UART_SetConfig+0x7ae>
 800789c:	2320      	movs	r3, #32
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e2aa      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80078a4:	2340      	movs	r3, #64	@ 0x40
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e2a6      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80078ac:	2380      	movs	r3, #128	@ 0x80
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e2a2      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a35      	ldr	r2, [pc, #212]	@ (8007990 <UART_SetConfig+0x344>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d130      	bne.n	8007920 <UART_SetConfig+0x2d4>
 80078be:	4b31      	ldr	r3, [pc, #196]	@ (8007984 <UART_SetConfig+0x338>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d826      	bhi.n	8007918 <UART_SetConfig+0x2cc>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <UART_SetConfig+0x284>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	080078f9 	.word	0x080078f9
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007911 	.word	0x08007911
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e284      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80078f0:	2304      	movs	r3, #4
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e280      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80078f8:	2308      	movs	r3, #8
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e27c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007900:	2310      	movs	r3, #16
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e278      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007908:	2320      	movs	r3, #32
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e274      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007910:	2340      	movs	r3, #64	@ 0x40
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e270      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e26c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1b      	ldr	r2, [pc, #108]	@ (8007994 <UART_SetConfig+0x348>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d142      	bne.n	80079b0 <UART_SetConfig+0x364>
 800792a:	4b16      	ldr	r3, [pc, #88]	@ (8007984 <UART_SetConfig+0x338>)
 800792c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b05      	cmp	r3, #5
 8007934:	d838      	bhi.n	80079a8 <UART_SetConfig+0x35c>
 8007936:	a201      	add	r2, pc, #4	@ (adr r2, 800793c <UART_SetConfig+0x2f0>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007955 	.word	0x08007955
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007965 	.word	0x08007965
 8007948:	0800796d 	.word	0x0800796d
 800794c:	08007999 	.word	0x08007999
 8007950:	080079a1 	.word	0x080079a1
 8007954:	2300      	movs	r3, #0
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e24e      	b.n	8007dfa <UART_SetConfig+0x7ae>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e24a      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e246      	b.n	8007dfa <UART_SetConfig+0x7ae>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e242      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007974:	cfff69f3 	.word	0xcfff69f3
 8007978:	58000c00 	.word	0x58000c00
 800797c:	11fff4ff 	.word	0x11fff4ff
 8007980:	40011000 	.word	0x40011000
 8007984:	58024400 	.word	0x58024400
 8007988:	40004400 	.word	0x40004400
 800798c:	40004800 	.word	0x40004800
 8007990:	40004c00 	.word	0x40004c00
 8007994:	40005000 	.word	0x40005000
 8007998:	2320      	movs	r3, #32
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e22c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80079a0:	2340      	movs	r3, #64	@ 0x40
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e228      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80079a8:	2380      	movs	r3, #128	@ 0x80
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e224      	b.n	8007dfa <UART_SetConfig+0x7ae>
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4ab1      	ldr	r2, [pc, #708]	@ (8007c7c <UART_SetConfig+0x630>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d176      	bne.n	8007aa8 <UART_SetConfig+0x45c>
 80079ba:	4bb1      	ldr	r3, [pc, #708]	@ (8007c80 <UART_SetConfig+0x634>)
 80079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079c2:	2b28      	cmp	r3, #40	@ 0x28
 80079c4:	d86c      	bhi.n	8007aa0 <UART_SetConfig+0x454>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x380>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a71 	.word	0x08007a71
 80079d0:	08007aa1 	.word	0x08007aa1
 80079d4:	08007aa1 	.word	0x08007aa1
 80079d8:	08007aa1 	.word	0x08007aa1
 80079dc:	08007aa1 	.word	0x08007aa1
 80079e0:	08007aa1 	.word	0x08007aa1
 80079e4:	08007aa1 	.word	0x08007aa1
 80079e8:	08007aa1 	.word	0x08007aa1
 80079ec:	08007a79 	.word	0x08007a79
 80079f0:	08007aa1 	.word	0x08007aa1
 80079f4:	08007aa1 	.word	0x08007aa1
 80079f8:	08007aa1 	.word	0x08007aa1
 80079fc:	08007aa1 	.word	0x08007aa1
 8007a00:	08007aa1 	.word	0x08007aa1
 8007a04:	08007aa1 	.word	0x08007aa1
 8007a08:	08007aa1 	.word	0x08007aa1
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007aa1 	.word	0x08007aa1
 8007a14:	08007aa1 	.word	0x08007aa1
 8007a18:	08007aa1 	.word	0x08007aa1
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007aa1 	.word	0x08007aa1
 8007a24:	08007aa1 	.word	0x08007aa1
 8007a28:	08007aa1 	.word	0x08007aa1
 8007a2c:	08007a89 	.word	0x08007a89
 8007a30:	08007aa1 	.word	0x08007aa1
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007aa1 	.word	0x08007aa1
 8007a40:	08007aa1 	.word	0x08007aa1
 8007a44:	08007aa1 	.word	0x08007aa1
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007a91 	.word	0x08007a91
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	08007aa1 	.word	0x08007aa1
 8007a58:	08007aa1 	.word	0x08007aa1
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007aa1 	.word	0x08007aa1
 8007a64:	08007aa1 	.word	0x08007aa1
 8007a68:	08007aa1 	.word	0x08007aa1
 8007a6c:	08007a99 	.word	0x08007a99
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e1c0      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007a78:	2304      	movs	r3, #4
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e1bc      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007a80:	2308      	movs	r3, #8
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e1b8      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007a88:	2310      	movs	r3, #16
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e1b4      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007a90:	2320      	movs	r3, #32
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e1b0      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007a98:	2340      	movs	r3, #64	@ 0x40
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e1ac      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007aa0:	2380      	movs	r3, #128	@ 0x80
 8007aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa6:	e1a8      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a75      	ldr	r2, [pc, #468]	@ (8007c84 <UART_SetConfig+0x638>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d130      	bne.n	8007b14 <UART_SetConfig+0x4c8>
 8007ab2:	4b73      	ldr	r3, [pc, #460]	@ (8007c80 <UART_SetConfig+0x634>)
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	2b05      	cmp	r3, #5
 8007abc:	d826      	bhi.n	8007b0c <UART_SetConfig+0x4c0>
 8007abe:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <UART_SetConfig+0x478>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007add 	.word	0x08007add
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	08007aed 	.word	0x08007aed
 8007ad0:	08007af5 	.word	0x08007af5
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e18a      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e186      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e182      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e17e      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007afc:	2320      	movs	r3, #32
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e17a      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b04:	2340      	movs	r3, #64	@ 0x40
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e176      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b0c:	2380      	movs	r3, #128	@ 0x80
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e172      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a5b      	ldr	r2, [pc, #364]	@ (8007c88 <UART_SetConfig+0x63c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d130      	bne.n	8007b80 <UART_SetConfig+0x534>
 8007b1e:	4b58      	ldr	r3, [pc, #352]	@ (8007c80 <UART_SetConfig+0x634>)
 8007b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d826      	bhi.n	8007b78 <UART_SetConfig+0x52c>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <UART_SetConfig+0x4e4>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	08007b59 	.word	0x08007b59
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b71 	.word	0x08007b71
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e154      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e150      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e14c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e148      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e144      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b70:	2340      	movs	r3, #64	@ 0x40
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e140      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b78:	2380      	movs	r3, #128	@ 0x80
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e13c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a41      	ldr	r2, [pc, #260]	@ (8007c8c <UART_SetConfig+0x640>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f040 8082 	bne.w	8007c90 <UART_SetConfig+0x644>
 8007b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c80 <UART_SetConfig+0x634>)
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b94:	2b28      	cmp	r3, #40	@ 0x28
 8007b96:	d86d      	bhi.n	8007c74 <UART_SetConfig+0x628>
 8007b98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <UART_SetConfig+0x554>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007c45 	.word	0x08007c45
 8007ba4:	08007c75 	.word	0x08007c75
 8007ba8:	08007c75 	.word	0x08007c75
 8007bac:	08007c75 	.word	0x08007c75
 8007bb0:	08007c75 	.word	0x08007c75
 8007bb4:	08007c75 	.word	0x08007c75
 8007bb8:	08007c75 	.word	0x08007c75
 8007bbc:	08007c75 	.word	0x08007c75
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c75 	.word	0x08007c75
 8007bc8:	08007c75 	.word	0x08007c75
 8007bcc:	08007c75 	.word	0x08007c75
 8007bd0:	08007c75 	.word	0x08007c75
 8007bd4:	08007c75 	.word	0x08007c75
 8007bd8:	08007c75 	.word	0x08007c75
 8007bdc:	08007c75 	.word	0x08007c75
 8007be0:	08007c55 	.word	0x08007c55
 8007be4:	08007c75 	.word	0x08007c75
 8007be8:	08007c75 	.word	0x08007c75
 8007bec:	08007c75 	.word	0x08007c75
 8007bf0:	08007c75 	.word	0x08007c75
 8007bf4:	08007c75 	.word	0x08007c75
 8007bf8:	08007c75 	.word	0x08007c75
 8007bfc:	08007c75 	.word	0x08007c75
 8007c00:	08007c5d 	.word	0x08007c5d
 8007c04:	08007c75 	.word	0x08007c75
 8007c08:	08007c75 	.word	0x08007c75
 8007c0c:	08007c75 	.word	0x08007c75
 8007c10:	08007c75 	.word	0x08007c75
 8007c14:	08007c75 	.word	0x08007c75
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c65 	.word	0x08007c65
 8007c24:	08007c75 	.word	0x08007c75
 8007c28:	08007c75 	.word	0x08007c75
 8007c2c:	08007c75 	.word	0x08007c75
 8007c30:	08007c75 	.word	0x08007c75
 8007c34:	08007c75 	.word	0x08007c75
 8007c38:	08007c75 	.word	0x08007c75
 8007c3c:	08007c75 	.word	0x08007c75
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4a:	e0d6      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c52:	e0d2      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5a:	e0ce      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c62:	e0ca      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6a:	e0c6      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c6c:	2340      	movs	r3, #64	@ 0x40
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c72:	e0c2      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c74:	2380      	movs	r3, #128	@ 0x80
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e0be      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007c7c:	40011400 	.word	0x40011400
 8007c80:	58024400 	.word	0x58024400
 8007c84:	40007800 	.word	0x40007800
 8007c88:	40007c00 	.word	0x40007c00
 8007c8c:	40011800 	.word	0x40011800
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4aad      	ldr	r2, [pc, #692]	@ (8007f4c <UART_SetConfig+0x900>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d176      	bne.n	8007d88 <UART_SetConfig+0x73c>
 8007c9a:	4bad      	ldr	r3, [pc, #692]	@ (8007f50 <UART_SetConfig+0x904>)
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ca2:	2b28      	cmp	r3, #40	@ 0x28
 8007ca4:	d86c      	bhi.n	8007d80 <UART_SetConfig+0x734>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <UART_SetConfig+0x660>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007d51 	.word	0x08007d51
 8007cb0:	08007d81 	.word	0x08007d81
 8007cb4:	08007d81 	.word	0x08007d81
 8007cb8:	08007d81 	.word	0x08007d81
 8007cbc:	08007d81 	.word	0x08007d81
 8007cc0:	08007d81 	.word	0x08007d81
 8007cc4:	08007d81 	.word	0x08007d81
 8007cc8:	08007d81 	.word	0x08007d81
 8007ccc:	08007d59 	.word	0x08007d59
 8007cd0:	08007d81 	.word	0x08007d81
 8007cd4:	08007d81 	.word	0x08007d81
 8007cd8:	08007d81 	.word	0x08007d81
 8007cdc:	08007d81 	.word	0x08007d81
 8007ce0:	08007d81 	.word	0x08007d81
 8007ce4:	08007d81 	.word	0x08007d81
 8007ce8:	08007d81 	.word	0x08007d81
 8007cec:	08007d61 	.word	0x08007d61
 8007cf0:	08007d81 	.word	0x08007d81
 8007cf4:	08007d81 	.word	0x08007d81
 8007cf8:	08007d81 	.word	0x08007d81
 8007cfc:	08007d81 	.word	0x08007d81
 8007d00:	08007d81 	.word	0x08007d81
 8007d04:	08007d81 	.word	0x08007d81
 8007d08:	08007d81 	.word	0x08007d81
 8007d0c:	08007d69 	.word	0x08007d69
 8007d10:	08007d81 	.word	0x08007d81
 8007d14:	08007d81 	.word	0x08007d81
 8007d18:	08007d81 	.word	0x08007d81
 8007d1c:	08007d81 	.word	0x08007d81
 8007d20:	08007d81 	.word	0x08007d81
 8007d24:	08007d81 	.word	0x08007d81
 8007d28:	08007d81 	.word	0x08007d81
 8007d2c:	08007d71 	.word	0x08007d71
 8007d30:	08007d81 	.word	0x08007d81
 8007d34:	08007d81 	.word	0x08007d81
 8007d38:	08007d81 	.word	0x08007d81
 8007d3c:	08007d81 	.word	0x08007d81
 8007d40:	08007d81 	.word	0x08007d81
 8007d44:	08007d81 	.word	0x08007d81
 8007d48:	08007d81 	.word	0x08007d81
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e050      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e04c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d60:	2308      	movs	r3, #8
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e048      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e044      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d70:	2320      	movs	r3, #32
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e040      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d78:	2340      	movs	r3, #64	@ 0x40
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e03c      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d80:	2380      	movs	r3, #128	@ 0x80
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e038      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a71      	ldr	r2, [pc, #452]	@ (8007f54 <UART_SetConfig+0x908>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d130      	bne.n	8007df4 <UART_SetConfig+0x7a8>
 8007d92:	4b6f      	ldr	r3, [pc, #444]	@ (8007f50 <UART_SetConfig+0x904>)
 8007d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	d826      	bhi.n	8007dec <UART_SetConfig+0x7a0>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <UART_SetConfig+0x758>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	08007dcd 	.word	0x08007dcd
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007ddd 	.word	0x08007ddd
 8007db8:	08007de5 	.word	0x08007de5
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e01a      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e016      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e012      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e00e      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007ddc:	2320      	movs	r3, #32
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e00a      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007de4:	2340      	movs	r3, #64	@ 0x40
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e006      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007dec:	2380      	movs	r3, #128	@ 0x80
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e002      	b.n	8007dfa <UART_SetConfig+0x7ae>
 8007df4:	2380      	movs	r3, #128	@ 0x80
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a55      	ldr	r2, [pc, #340]	@ (8007f54 <UART_SetConfig+0x908>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	f040 80f8 	bne.w	8007ff6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	dc46      	bgt.n	8007e9c <UART_SetConfig+0x850>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	db75      	blt.n	8007efe <UART_SetConfig+0x8b2>
 8007e12:	3b02      	subs	r3, #2
 8007e14:	2b1e      	cmp	r3, #30
 8007e16:	d872      	bhi.n	8007efe <UART_SetConfig+0x8b2>
 8007e18:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <UART_SetConfig+0x7d4>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007ea3 	.word	0x08007ea3
 8007e24:	08007eff 	.word	0x08007eff
 8007e28:	08007eab 	.word	0x08007eab
 8007e2c:	08007eff 	.word	0x08007eff
 8007e30:	08007eff 	.word	0x08007eff
 8007e34:	08007eff 	.word	0x08007eff
 8007e38:	08007ebb 	.word	0x08007ebb
 8007e3c:	08007eff 	.word	0x08007eff
 8007e40:	08007eff 	.word	0x08007eff
 8007e44:	08007eff 	.word	0x08007eff
 8007e48:	08007eff 	.word	0x08007eff
 8007e4c:	08007eff 	.word	0x08007eff
 8007e50:	08007eff 	.word	0x08007eff
 8007e54:	08007eff 	.word	0x08007eff
 8007e58:	08007ecb 	.word	0x08007ecb
 8007e5c:	08007eff 	.word	0x08007eff
 8007e60:	08007eff 	.word	0x08007eff
 8007e64:	08007eff 	.word	0x08007eff
 8007e68:	08007eff 	.word	0x08007eff
 8007e6c:	08007eff 	.word	0x08007eff
 8007e70:	08007eff 	.word	0x08007eff
 8007e74:	08007eff 	.word	0x08007eff
 8007e78:	08007eff 	.word	0x08007eff
 8007e7c:	08007eff 	.word	0x08007eff
 8007e80:	08007eff 	.word	0x08007eff
 8007e84:	08007eff 	.word	0x08007eff
 8007e88:	08007eff 	.word	0x08007eff
 8007e8c:	08007eff 	.word	0x08007eff
 8007e90:	08007eff 	.word	0x08007eff
 8007e94:	08007eff 	.word	0x08007eff
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	2b40      	cmp	r3, #64	@ 0x40
 8007e9e:	d02a      	beq.n	8007ef6 <UART_SetConfig+0x8aa>
 8007ea0:	e02d      	b.n	8007efe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ea2:	f7fe fd29 	bl	80068f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e02f      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fd38 	bl	8006924 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb8:	e027      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eba:	f107 0318 	add.w	r3, r7, #24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fe84 	bl	8006bcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e01f      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eca:	4b21      	ldr	r3, [pc, #132]	@ (8007f50 <UART_SetConfig+0x904>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f50 <UART_SetConfig+0x904>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	08db      	lsrs	r3, r3, #3
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f58 <UART_SetConfig+0x90c>)
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ee8:	e00f      	b.n	8007f0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007eea:	4b1b      	ldr	r3, [pc, #108]	@ (8007f58 <UART_SetConfig+0x90c>)
 8007eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eee:	e00c      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f5c <UART_SetConfig+0x910>)
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef4:	e009      	b.n	8007f0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efc:	e005      	b.n	8007f0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 81ee 	beq.w	80082ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	4a12      	ldr	r2, [pc, #72]	@ (8007f60 <UART_SetConfig+0x914>)
 8007f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f24:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	4413      	add	r3, r2
 8007f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d305      	bcc.n	8007f42 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d910      	bls.n	8007f64 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f48:	e1d1      	b.n	80082ee <UART_SetConfig+0xca2>
 8007f4a:	bf00      	nop
 8007f4c:	40011c00 	.word	0x40011c00
 8007f50:	58024400 	.word	0x58024400
 8007f54:	58000c00 	.word	0x58000c00
 8007f58:	03d09000 	.word	0x03d09000
 8007f5c:	003d0900 	.word	0x003d0900
 8007f60:	08030c78 	.word	0x08030c78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f66:	2200      	movs	r2, #0
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	60fa      	str	r2, [r7, #12]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f70:	4ac0      	ldr	r2, [pc, #768]	@ (8008274 <UART_SetConfig+0xc28>)
 8007f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2200      	movs	r2, #0
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f86:	f7f8 fc37 	bl	80007f8 <__aeabi_uldivmod>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4619      	mov	r1, r3
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	020b      	lsls	r3, r1, #8
 8007f9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fa0:	0202      	lsls	r2, r0, #8
 8007fa2:	6979      	ldr	r1, [r7, #20]
 8007fa4:	6849      	ldr	r1, [r1, #4]
 8007fa6:	0849      	lsrs	r1, r1, #1
 8007fa8:	2000      	movs	r0, #0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4605      	mov	r5, r0
 8007fae:	eb12 0804 	adds.w	r8, r2, r4
 8007fb2:	eb43 0905 	adc.w	r9, r3, r5
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	4693      	mov	fp, r2
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	f7f8 fc16 	bl	80007f8 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fda:	d308      	bcc.n	8007fee <UART_SetConfig+0x9a2>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe2:	d204      	bcs.n	8007fee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fea:	60da      	str	r2, [r3, #12]
 8007fec:	e17f      	b.n	80082ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ff4:	e17b      	b.n	80082ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ffe:	f040 80bd 	bne.w	800817c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008002:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008006:	2b20      	cmp	r3, #32
 8008008:	dc48      	bgt.n	800809c <UART_SetConfig+0xa50>
 800800a:	2b00      	cmp	r3, #0
 800800c:	db7b      	blt.n	8008106 <UART_SetConfig+0xaba>
 800800e:	2b20      	cmp	r3, #32
 8008010:	d879      	bhi.n	8008106 <UART_SetConfig+0xaba>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <UART_SetConfig+0x9cc>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	080080a3 	.word	0x080080a3
 800801c:	080080ab 	.word	0x080080ab
 8008020:	08008107 	.word	0x08008107
 8008024:	08008107 	.word	0x08008107
 8008028:	080080b3 	.word	0x080080b3
 800802c:	08008107 	.word	0x08008107
 8008030:	08008107 	.word	0x08008107
 8008034:	08008107 	.word	0x08008107
 8008038:	080080c3 	.word	0x080080c3
 800803c:	08008107 	.word	0x08008107
 8008040:	08008107 	.word	0x08008107
 8008044:	08008107 	.word	0x08008107
 8008048:	08008107 	.word	0x08008107
 800804c:	08008107 	.word	0x08008107
 8008050:	08008107 	.word	0x08008107
 8008054:	08008107 	.word	0x08008107
 8008058:	080080d3 	.word	0x080080d3
 800805c:	08008107 	.word	0x08008107
 8008060:	08008107 	.word	0x08008107
 8008064:	08008107 	.word	0x08008107
 8008068:	08008107 	.word	0x08008107
 800806c:	08008107 	.word	0x08008107
 8008070:	08008107 	.word	0x08008107
 8008074:	08008107 	.word	0x08008107
 8008078:	08008107 	.word	0x08008107
 800807c:	08008107 	.word	0x08008107
 8008080:	08008107 	.word	0x08008107
 8008084:	08008107 	.word	0x08008107
 8008088:	08008107 	.word	0x08008107
 800808c:	08008107 	.word	0x08008107
 8008090:	08008107 	.word	0x08008107
 8008094:	08008107 	.word	0x08008107
 8008098:	080080f9 	.word	0x080080f9
 800809c:	2b40      	cmp	r3, #64	@ 0x40
 800809e:	d02e      	beq.n	80080fe <UART_SetConfig+0xab2>
 80080a0:	e031      	b.n	8008106 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a2:	f7fd fa5d 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 80080a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080a8:	e033      	b.n	8008112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080aa:	f7fd fa6f 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 80080ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080b0:	e02f      	b.n	8008112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fc34 	bl	8006924 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c0:	e027      	b.n	8008112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c2:	f107 0318 	add.w	r3, r7, #24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fd80 	bl	8006bcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d0:	e01f      	b.n	8008112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d2:	4b69      	ldr	r3, [pc, #420]	@ (8008278 <UART_SetConfig+0xc2c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080de:	4b66      	ldr	r3, [pc, #408]	@ (8008278 <UART_SetConfig+0xc2c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	4a64      	ldr	r2, [pc, #400]	@ (800827c <UART_SetConfig+0xc30>)
 80080ea:	fa22 f303 	lsr.w	r3, r2, r3
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080f0:	e00f      	b.n	8008112 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80080f2:	4b62      	ldr	r3, [pc, #392]	@ (800827c <UART_SetConfig+0xc30>)
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f6:	e00c      	b.n	8008112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080f8:	4b61      	ldr	r3, [pc, #388]	@ (8008280 <UART_SetConfig+0xc34>)
 80080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080fc:	e009      	b.n	8008112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008104:	e005      	b.n	8008112 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80ea 	beq.w	80082ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811e:	4a55      	ldr	r2, [pc, #340]	@ (8008274 <UART_SetConfig+0xc28>)
 8008120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008124:	461a      	mov	r2, r3
 8008126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008128:	fbb3 f3f2 	udiv	r3, r3, r2
 800812c:	005a      	lsls	r2, r3, #1
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	441a      	add	r2, r3
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	fbb2 f3f3 	udiv	r3, r2, r3
 800813e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008142:	2b0f      	cmp	r3, #15
 8008144:	d916      	bls.n	8008174 <UART_SetConfig+0xb28>
 8008146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800814c:	d212      	bcs.n	8008174 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800814e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008150:	b29b      	uxth	r3, r3
 8008152:	f023 030f 	bic.w	r3, r3, #15
 8008156:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815a:	085b      	lsrs	r3, r3, #1
 800815c:	b29b      	uxth	r3, r3
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	b29a      	uxth	r2, r3
 8008164:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008166:	4313      	orrs	r3, r2
 8008168:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008170:	60da      	str	r2, [r3, #12]
 8008172:	e0bc      	b.n	80082ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800817a:	e0b8      	b.n	80082ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800817c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008180:	2b20      	cmp	r3, #32
 8008182:	dc4b      	bgt.n	800821c <UART_SetConfig+0xbd0>
 8008184:	2b00      	cmp	r3, #0
 8008186:	f2c0 8087 	blt.w	8008298 <UART_SetConfig+0xc4c>
 800818a:	2b20      	cmp	r3, #32
 800818c:	f200 8084 	bhi.w	8008298 <UART_SetConfig+0xc4c>
 8008190:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <UART_SetConfig+0xb4c>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	08008223 	.word	0x08008223
 800819c:	0800822b 	.word	0x0800822b
 80081a0:	08008299 	.word	0x08008299
 80081a4:	08008299 	.word	0x08008299
 80081a8:	08008233 	.word	0x08008233
 80081ac:	08008299 	.word	0x08008299
 80081b0:	08008299 	.word	0x08008299
 80081b4:	08008299 	.word	0x08008299
 80081b8:	08008243 	.word	0x08008243
 80081bc:	08008299 	.word	0x08008299
 80081c0:	08008299 	.word	0x08008299
 80081c4:	08008299 	.word	0x08008299
 80081c8:	08008299 	.word	0x08008299
 80081cc:	08008299 	.word	0x08008299
 80081d0:	08008299 	.word	0x08008299
 80081d4:	08008299 	.word	0x08008299
 80081d8:	08008253 	.word	0x08008253
 80081dc:	08008299 	.word	0x08008299
 80081e0:	08008299 	.word	0x08008299
 80081e4:	08008299 	.word	0x08008299
 80081e8:	08008299 	.word	0x08008299
 80081ec:	08008299 	.word	0x08008299
 80081f0:	08008299 	.word	0x08008299
 80081f4:	08008299 	.word	0x08008299
 80081f8:	08008299 	.word	0x08008299
 80081fc:	08008299 	.word	0x08008299
 8008200:	08008299 	.word	0x08008299
 8008204:	08008299 	.word	0x08008299
 8008208:	08008299 	.word	0x08008299
 800820c:	08008299 	.word	0x08008299
 8008210:	08008299 	.word	0x08008299
 8008214:	08008299 	.word	0x08008299
 8008218:	0800828b 	.word	0x0800828b
 800821c:	2b40      	cmp	r3, #64	@ 0x40
 800821e:	d037      	beq.n	8008290 <UART_SetConfig+0xc44>
 8008220:	e03a      	b.n	8008298 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008222:	f7fd f99d 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8008226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008228:	e03c      	b.n	80082a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800822a:	f7fd f9af 	bl	800558c <HAL_RCC_GetPCLK2Freq>
 800822e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008230:	e038      	b.n	80082a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fb74 	bl	8006924 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008240:	e030      	b.n	80082a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fcc0 	bl	8006bcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008250:	e028      	b.n	80082a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008252:	4b09      	ldr	r3, [pc, #36]	@ (8008278 <UART_SetConfig+0xc2c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d012      	beq.n	8008284 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800825e:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <UART_SetConfig+0xc2c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	08db      	lsrs	r3, r3, #3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	4a04      	ldr	r2, [pc, #16]	@ (800827c <UART_SetConfig+0xc30>)
 800826a:	fa22 f303 	lsr.w	r3, r2, r3
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008270:	e018      	b.n	80082a4 <UART_SetConfig+0xc58>
 8008272:	bf00      	nop
 8008274:	08030c78 	.word	0x08030c78
 8008278:	58024400 	.word	0x58024400
 800827c:	03d09000 	.word	0x03d09000
 8008280:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008284:	4b24      	ldr	r3, [pc, #144]	@ (8008318 <UART_SetConfig+0xccc>)
 8008286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008288:	e00c      	b.n	80082a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800828a:	4b24      	ldr	r3, [pc, #144]	@ (800831c <UART_SetConfig+0xcd0>)
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828e:	e009      	b.n	80082a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008296:	e005      	b.n	80082a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082a2:	bf00      	nop
    }

    if (pclk != 0U)
 80082a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d021      	beq.n	80082ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008320 <UART_SetConfig+0xcd4>)
 80082b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	441a      	add	r2, r3
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	2b0f      	cmp	r3, #15
 80082d2:	d909      	bls.n	80082e8 <UART_SetConfig+0xc9c>
 80082d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082da:	d205      	bcs.n	80082e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082de:	b29a      	uxth	r2, r3
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	e002      	b.n	80082ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2200      	movs	r2, #0
 8008302:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800830a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800830e:	4618      	mov	r0, r3
 8008310:	3748      	adds	r7, #72	@ 0x48
 8008312:	46bd      	mov	sp, r7
 8008314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008318:	03d09000 	.word	0x03d09000
 800831c:	003d0900 	.word	0x003d0900
 8008320:	08030c78 	.word	0x08030c78

08008324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01a      	beq.n	800843a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008422:	d10a      	bne.n	800843a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b098      	sub	sp, #96	@ 0x60
 800846c:	af02      	add	r7, sp, #8
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008478:	f7fa fb78 	bl	8002b6c <HAL_GetTick>
 800847c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b08      	cmp	r3, #8
 800848a:	d12f      	bne.n	80084ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800848c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008494:	2200      	movs	r2, #0
 8008496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f88e 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d022      	beq.n	80084ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e6      	bne.n	80084a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e063      	b.n	80085b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d149      	bne.n	800858e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008502:	2200      	movs	r2, #0
 8008504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f857 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d03c      	beq.n	800858e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	623b      	str	r3, [r7, #32]
   return(result);
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008532:	633b      	str	r3, [r7, #48]	@ 0x30
 8008534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	60fb      	str	r3, [r7, #12]
   return(result);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008566:	61fa      	str	r2, [r7, #28]
 8008568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	69b9      	ldr	r1, [r7, #24]
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	617b      	str	r3, [r7, #20]
   return(result);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e5      	bne.n	8008546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e012      	b.n	80085b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3758      	adds	r7, #88	@ 0x58
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085cc:	e04f      	b.n	800866e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d04b      	beq.n	800866e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d6:	f7fa fac9 	bl	8002b6c <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d302      	bcc.n	80085ec <UART_WaitOnFlagUntilTimeout+0x30>
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e04e      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d037      	beq.n	800866e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b80      	cmp	r3, #128	@ 0x80
 8008602:	d034      	beq.n	800866e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b40      	cmp	r3, #64	@ 0x40
 8008608:	d031      	beq.n	800866e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b08      	cmp	r3, #8
 8008616:	d110      	bne.n	800863a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2208      	movs	r2, #8
 800861e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f839 	bl	8008698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2208      	movs	r2, #8
 800862a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e029      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008648:	d111      	bne.n	800866e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 f81f 	bl	8008698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2220      	movs	r2, #32
 800865e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e00f      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69da      	ldr	r2, [r3, #28]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	429a      	cmp	r2, r3
 800867c:	bf0c      	ite	eq
 800867e:	2301      	moveq	r3, #1
 8008680:	2300      	movne	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	429a      	cmp	r2, r3
 800868a:	d0a0      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b095      	sub	sp, #84	@ 0x54
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086be:	643b      	str	r3, [r7, #64]	@ 0x40
 80086c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008760 <UART_EndRxTransfer+0xc8>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e5      	bne.n	80086d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800870a:	2b01      	cmp	r3, #1
 800870c:	d118      	bne.n	8008740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60bb      	str	r3, [r7, #8]
   return(result);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f023 0310 	bic.w	r3, r3, #16
 8008722:	647b      	str	r3, [r7, #68]	@ 0x44
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	613b      	str	r3, [r7, #16]
   return(result);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008754:	bf00      	nop
 8008756:	3754      	adds	r7, #84	@ 0x54
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	effffffe 	.word	0xeffffffe

08008764 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <HAL_UARTEx_DisableFifoMode+0x16>
 8008776:	2302      	movs	r3, #2
 8008778:	e027      	b.n	80087ca <HAL_UARTEx_DisableFifoMode+0x66>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2224      	movs	r2, #36	@ 0x24
 8008786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e02d      	b.n	800884a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2224      	movs	r2, #36	@ 0x24
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f850 	bl	80088d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008866:	2302      	movs	r3, #2
 8008868:	e02d      	b.n	80088c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2224      	movs	r2, #36	@ 0x24
 8008876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0201 	bic.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f812 	bl	80088d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d108      	bne.n	80088f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088f0:	e031      	b.n	8008956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088f2:	2310      	movs	r3, #16
 80088f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088f6:	2310      	movs	r3, #16
 80088f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	0e5b      	lsrs	r3, r3, #25
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	0f5b      	lsrs	r3, r3, #29
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	7b3a      	ldrb	r2, [r7, #12]
 800891e:	4911      	ldr	r1, [pc, #68]	@ (8008964 <UARTEx_SetNbDataToProcess+0x94>)
 8008920:	5c8a      	ldrb	r2, [r1, r2]
 8008922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008926:	7b3a      	ldrb	r2, [r7, #12]
 8008928:	490f      	ldr	r1, [pc, #60]	@ (8008968 <UARTEx_SetNbDataToProcess+0x98>)
 800892a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800892c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008930:	b29a      	uxth	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	7b7a      	ldrb	r2, [r7, #13]
 800893c:	4909      	ldr	r1, [pc, #36]	@ (8008964 <UARTEx_SetNbDataToProcess+0x94>)
 800893e:	5c8a      	ldrb	r2, [r1, r2]
 8008940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008944:	7b7a      	ldrb	r2, [r7, #13]
 8008946:	4908      	ldr	r1, [pc, #32]	@ (8008968 <UARTEx_SetNbDataToProcess+0x98>)
 8008948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800894a:	fb93 f3f2 	sdiv	r3, r3, r2
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	08030c90 	.word	0x08030c90
 8008968:	08030c98 	.word	0x08030c98

0800896c <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b19      	cmp	r3, #25
 8008978:	dc02      	bgt.n	8008980 <mg_base64_encode_single+0x14>
    return c + 'A';
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3341      	adds	r3, #65	@ 0x41
 800897e:	e011      	b.n	80089a4 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b33      	cmp	r3, #51	@ 0x33
 8008984:	dc02      	bgt.n	800898c <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3347      	adds	r3, #71	@ 0x47
 800898a:	e00b      	b.n	80089a4 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b3d      	cmp	r3, #61	@ 0x3d
 8008990:	dc02      	bgt.n	8008998 <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3b04      	subs	r3, #4
 8008996:	e005      	b.n	80089a4 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b3e      	cmp	r3, #62	@ 0x3e
 800899c:	d101      	bne.n	80089a2 <mg_base64_encode_single+0x36>
 800899e:	232b      	movs	r3, #43	@ 0x2b
 80089a0:	e000      	b.n	80089a4 <mg_base64_encode_single+0x38>
 80089a2:	232f      	movs	r3, #47	@ 0x2f
  }
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b40      	cmp	r3, #64	@ 0x40
 80089bc:	dd05      	ble.n	80089ca <mg_base64_decode_single+0x1a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80089c2:	dc02      	bgt.n	80089ca <mg_base64_decode_single+0x1a>
    return c - 'A';
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3b41      	subs	r3, #65	@ 0x41
 80089c8:	e022      	b.n	8008a10 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b60      	cmp	r3, #96	@ 0x60
 80089ce:	dd05      	ble.n	80089dc <mg_base64_decode_single+0x2c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b7a      	cmp	r3, #122	@ 0x7a
 80089d4:	dc02      	bgt.n	80089dc <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3b47      	subs	r3, #71	@ 0x47
 80089da:	e019      	b.n	8008a10 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b2f      	cmp	r3, #47	@ 0x2f
 80089e0:	dd05      	ble.n	80089ee <mg_base64_decode_single+0x3e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b39      	cmp	r3, #57	@ 0x39
 80089e6:	dc02      	bgt.n	80089ee <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3304      	adds	r3, #4
 80089ec:	e010      	b.n	8008a10 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b2b      	cmp	r3, #43	@ 0x2b
 80089f2:	d101      	bne.n	80089f8 <mg_base64_decode_single+0x48>
    return 62;
 80089f4:	233e      	movs	r3, #62	@ 0x3e
 80089f6:	e00b      	b.n	8008a10 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80089fc:	d101      	bne.n	8008a02 <mg_base64_decode_single+0x52>
    return 63;
 80089fe:	233f      	movs	r3, #63	@ 0x3f
 8008a00:	e006      	b.n	8008a10 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b3d      	cmp	r3, #61	@ 0x3d
 8008a06:	d101      	bne.n	8008a0c <mg_base64_decode_single+0x5c>
    return 64;
 8008a08:	2340      	movs	r3, #64	@ 0x40
 8008a0a:	e001      	b.n	8008a10 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8008a0c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f003 0203 	and.w	r2, r3, #3
 8008a30:	4b38      	ldr	r3, [pc, #224]	@ (8008b14 <mg_base64_update+0xf8>)
 8008a32:	fba3 1302 	umull	r1, r3, r3, r2
 8008a36:	0859      	lsrs	r1, r3, #1
 8008a38:	460b      	mov	r3, r1
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	440b      	add	r3, r1
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d119      	bne.n	8008a7c <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	089b      	lsrs	r3, r3, #2
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff ff8c 	bl	800896c <mg_base64_encode_single>
 8008a54:	4601      	mov	r1, r0
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	b2ca      	uxtb	r2, r1
 8008a5e:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	440b      	add	r3, r1
 8008a72:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e046      	b.n	8008b0a <mg_base64_update+0xee>
  } else if (rem == 1) {
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d11f      	bne.n	8008ac2 <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	091b      	lsrs	r3, r3, #4
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff ff69 	bl	800896c <mg_base64_encode_single>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	b2ca      	uxtb	r2, r1
 8008aa4:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	607b      	str	r3, [r7, #4]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	440b      	add	r3, r1
 8008ab8:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e023      	b.n	8008b0a <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	781a      	ldrb	r2, [r3, #0]
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	099b      	lsrs	r3, r3, #6
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ff49 	bl	800896c <mg_base64_encode_single>
 8008ada:	4601      	mov	r1, r0
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	b2ca      	uxtb	r2, r1
 8008ae4:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff ff3d 	bl	800896c <mg_base64_encode_single>
 8008af2:	4601      	mov	r1, r0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3301      	adds	r3, #1
 8008af8:	607b      	str	r3, [r7, #4]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4413      	add	r3, r2
 8008b00:	b2ca      	uxtb	r2, r1
 8008b02:	701a      	strb	r2, [r3, #0]
    n++;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3301      	adds	r3, #1
 8008b08:	607b      	str	r3, [r7, #4]
  }
  return n;
 8008b0a:	687b      	ldr	r3, [r7, #4]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	aaaaaaab 	.word	0xaaaaaaab

08008b18 <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <mg_base64_final+0x24>
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	2000      	movs	r0, #0
 8008b36:	f7ff ff71 	bl	8008a1c <mg_base64_update>
 8008b3a:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d10a      	bne.n	8008b5c <mg_base64_final+0x44>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8008b4c:	e006      	b.n	8008b5c <mg_base64_final+0x44>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	603a      	str	r2, [r7, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	223d      	movs	r2, #61	@ 0x3d
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f3      	bne.n	8008b4e <mg_base64_final+0x36>
  to[n] = '\0';
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
  return n;
 8008b70:	683b      	ldr	r3, [r7, #0]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <mg_base64_encode+0x1e>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008c0c <mg_base64_encode+0x90>)
 8008b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba2:	0858      	lsrs	r0, r3, #1
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	4b19      	ldr	r3, [pc, #100]	@ (8008c0c <mg_base64_encode+0x90>)
 8008ba8:	fba3 2301 	umull	r2, r3, r3, r1
 8008bac:	085a      	lsrs	r2, r3, #1
 8008bae:	4613      	mov	r3, r2
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	1aca      	subs	r2, r1, r3
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	d001      	beq.n	8008bbe <mg_base64_encode+0x42>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <mg_base64_encode+0x44>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4403      	add	r3, r0
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d201      	bcs.n	8008bd0 <mg_base64_encode+0x54>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e019      	b.n	8008c04 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	e00c      	b.n	8008bf0 <mg_base64_encode+0x74>
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	4413      	add	r3, r2
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff ff1a 	bl	8008a1c <mg_base64_update>
 8008be8:	6138      	str	r0, [r7, #16]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	3301      	adds	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d3ee      	bcc.n	8008bd6 <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 8008bf8:	6939      	ldr	r1, [r7, #16]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff ff8c 	bl	8008b18 <mg_base64_final>
 8008c00:	6138      	str	r0, [r7, #16]
  return len;
 8008c02:	693b      	ldr	r3, [r7, #16]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	aaaaaaab 	.word	0xaaaaaaab

08008c10 <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08a      	sub	sp, #40	@ 0x28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <mg_base64_decode+0x1c>
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4413      	add	r3, r2
 8008c2a:	e000      	b.n	8008c2e <mg_base64_decode+0x1e>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	089a      	lsrs	r2, r3, #2
 8008c38:	4613      	mov	r3, r2
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3301      	adds	r3, #1
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d378      	bcc.n	8008d38 <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 8008c46:	e068      	b.n	8008d1a <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff feaf 	bl	80089b0 <mg_base64_decode_single>
 8008c52:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3301      	adds	r3, #1
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fea8 	bl	80089b0 <mg_base64_decode_single>
 8008c60:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3302      	adds	r3, #2
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fea1 	bl	80089b0 <mg_base64_decode_single>
 8008c6e:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3303      	adds	r3, #3
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fe9a 	bl	80089b0 <mg_base64_decode_single>
 8008c7c:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	2b40      	cmp	r3, #64	@ 0x40
 8008c82:	d05b      	beq.n	8008d3c <mg_base64_decode+0x12c>
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	db58      	blt.n	8008d3c <mg_base64_decode+0x12c>
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b40      	cmp	r3, #64	@ 0x40
 8008c8e:	d055      	beq.n	8008d3c <mg_base64_decode+0x12c>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	db52      	blt.n	8008d3c <mg_base64_decode+0x12c>
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	db4f      	blt.n	8008d3c <mg_base64_decode+0x12c>
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	db4c      	blt.n	8008d3c <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	b25a      	sxtb	r2, r3
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	111b      	asrs	r3, r3, #4
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	b259      	sxtb	r1, r3
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	b2ca      	uxtb	r2, r1
 8008cc0:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b3d      	cmp	r3, #61	@ 0x3d
 8008cca:	d023      	beq.n	8008d14 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	b25b      	sxtb	r3, r3
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	b25a      	sxtb	r2, r3
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	109b      	asrs	r3, r3, #2
 8008cd8:	b25b      	sxtb	r3, r3
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	b259      	sxtb	r1, r3
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	b2ca      	uxtb	r2, r1
 8008cea:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3303      	adds	r3, #3
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b3d      	cmp	r3, #61	@ 0x3d
 8008cf4:	d00e      	beq.n	8008d14 <mg_base64_decode+0x104>
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	b25b      	sxtb	r3, r3
 8008cfa:	019b      	lsls	r3, r3, #6
 8008cfc:	b25a      	sxtb	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	b25b      	sxtb	r3, r3
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b259      	sxtb	r1, r3
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	b2ca      	uxtb	r2, r1
 8008d12:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3304      	adds	r3, #4
 8008d18:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <mg_base64_decode+0x11a>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3303      	adds	r3, #3
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d88e      	bhi.n	8008c48 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	4413      	add	r3, r2
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
  return len;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	e009      	b.n	8008d4c <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 8008d38:	bf00      	nop
 8008d3a:	e000      	b.n	8008d3e <mg_base64_decode+0x12e>
      goto fail;
 8008d3c:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <mg_base64_decode+0x13a>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
  return 0;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3728      	adds	r7, #40	@ 0x28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60fb      	str	r3, [r7, #12]
 8008d62:	e002      	b.n	8008d6a <mg_dns_free+0x16>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d1f7      	bne.n	8008d64 <mg_dns_free+0x10>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]
  free(d);
 8008d7c:	6838      	ldr	r0, [r7, #0]
 8008d7e:	f01d fd69 	bl	8026854 <free>
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	332c      	adds	r3, #44	@ 0x2c
 8008d98:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e00d      	b.n	8008dbe <mg_resolve_cancel+0x34>
    tmp = d->next;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d103      	bne.n	8008dba <mg_resolve_cancel+0x30>
 8008db2:	6979      	ldr	r1, [r7, #20]
 8008db4:	6938      	ldr	r0, [r7, #16]
 8008db6:	f7ff ffcd 	bl	8008d54 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1ee      	bne.n	8008da2 <mg_resolve_cancel+0x18>
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b08c      	sub	sp, #48	@ 0x30
 8008dd2:	af04      	add	r7, sp, #16
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
 8008dda:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8008de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <mg_dns_parse_name_depth+0x24>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <mg_dns_parse_name_depth+0x24>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	f340 8084 	ble.w	8008f02 <mg_dns_parse_name_depth+0x134>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e093      	b.n	8008f26 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d103      	bne.n	8008e1a <mg_dns_parse_name_depth+0x4c>
      i++;
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	3301      	adds	r3, #1
 8008e16:	61fb      	str	r3, [r7, #28]
      break;
 8008e18:	e07b      	b.n	8008f12 <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d02f      	beq.n	8008e84 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	440a      	add	r2, r1
 8008e32:	3201      	adds	r2, #1
 8008e34:	68f9      	ldr	r1, [r7, #12]
 8008e36:	440a      	add	r2, r1
 8008e38:	7812      	ldrb	r2, [r2, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	3301      	adds	r3, #1
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d919      	bls.n	8008e7c <mg_dns_parse_name_depth+0xae>
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d111      	bne.n	8008e7c <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	9302      	str	r3, [sp, #8]
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff ffae 	bl	8008dce <mg_dns_parse_name_depth>
 8008e72:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <mg_dns_parse_name_depth+0xae>
        return 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e054      	b.n	8008f26 <mg_dns_parse_name_depth+0x158>
      i += 2;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	3302      	adds	r3, #2
 8008e80:	61fb      	str	r3, [r7, #28]
      break;
 8008e82:	e046      	b.n	8008f12 <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	441a      	add	r2, r3
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3301      	adds	r3, #1
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d801      	bhi.n	8008e9a <mg_dns_parse_name_depth+0xcc>
 8008e96:	2300      	movs	r3, #0
 8008e98:	e045      	b.n	8008f26 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8008e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8008ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d204      	bcs.n	8008eb2 <mg_dns_parse_name_depth+0xe4>
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	4413      	add	r3, r2
 8008eae:	222e      	movs	r2, #46	@ 0x2e
 8008eb0:	701a      	strb	r2, [r3, #0]
      j++;
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8008eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d90c      	bls.n	8008ede <mg_dns_parse_name_depth+0x110>
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec8:	18d0      	adds	r0, r2, r3
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	4413      	add	r3, r2
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	f020 fe90 	bl	8029bfe <memcpy>
    j += n;
 8008ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	4413      	add	r3, r2
 8008eec:	3301      	adds	r3, #1
 8008eee:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8008ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d204      	bcs.n	8008f02 <mg_dns_parse_name_depth+0x134>
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efc:	4413      	add	r3, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4413      	add	r3, r2
 8008f08:	3301      	adds	r3, #1
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	f63f af76 	bhi.w	8008dfe <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <mg_dns_parse_name_depth+0x156>
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	4413      	add	r3, r2
 8008f20:	2200      	movs	r2, #0
 8008f22:	701a      	strb	r2, [r3, #0]
  return i;
 8008f24:	69fb      	ldr	r3, [r7, #28]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b088      	sub	sp, #32
 8008f32:	af04      	add	r7, sp, #16
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
 8008f3a:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9302      	str	r3, [sp, #8]
 8008f40:	2300      	movs	r3, #0
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff ff3d 	bl	8008dce <mg_dns_parse_name_depth>
 8008f54:	4603      	mov	r3, r0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b088      	sub	sp, #32
 8008f62:	af02      	add	r7, sp, #8
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	2100      	movs	r1, #0
 8008f80:	6a38      	ldr	r0, [r7, #32]
 8008f82:	f01f fc0d 	bl	80287a0 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b0b      	cmp	r3, #11
 8008f8a:	d801      	bhi.n	8008f90 <mg_dns_parse_rr+0x32>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e077      	b.n	8009080 <mg_dns_parse_rr+0x122>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f96:	d901      	bls.n	8008f9c <mg_dns_parse_rr+0x3e>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e071      	b.n	8009080 <mg_dns_parse_rr+0x122>
  if (s >= e) return 0;     //  Overflow
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d301      	bcc.n	8008fa8 <mg_dns_parse_rr+0x4a>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e06b      	b.n	8009080 <mg_dns_parse_rr+0x122>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	2300      	movs	r3, #0
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff ffbb 	bl	8008f2e <mg_dns_parse_name>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <mg_dns_parse_rr+0x6e>
    return 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e059      	b.n	8009080 <mg_dns_parse_rr+0x122>
  s += rr->nlen + 4;
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d901      	bls.n	8008fe4 <mg_dns_parse_rr+0x86>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e04d      	b.n	8009080 <mg_dns_parse_rr+0x122>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	3b04      	subs	r3, #4
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	b21a      	sxth	r2, r3
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	3b03      	subs	r3, #3
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b21b      	sxth	r3, r3
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	b21b      	sxth	r3, r3
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	3b02      	subs	r3, #2
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	b21b      	sxth	r3, r3
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	b21a      	sxth	r2, r3
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	3b01      	subs	r3, #1
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b21b      	sxth	r3, r3
 8009016:	4313      	orrs	r3, r2
 8009018:	b21b      	sxth	r3, r3
 800901a:	b29a      	uxth	r2, r3
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <mg_dns_parse_rr+0xd0>
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	3304      	adds	r3, #4
 800902c:	e028      	b.n	8009080 <mg_dns_parse_rr+0x122>

  s += 6;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	3306      	adds	r3, #6
 8009032:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d901      	bls.n	8009040 <mg_dns_parse_rr+0xe2>
 800903c:	2300      	movs	r3, #0
 800903e:	e01f      	b.n	8009080 <mg_dns_parse_rr+0x122>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	3b02      	subs	r3, #2
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b21b      	sxth	r3, r3
 8009048:	021b      	lsls	r3, r3, #8
 800904a:	b21a      	sxth	r2, r3
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	3b01      	subs	r3, #1
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	b21b      	sxth	r3, r3
 8009054:	4313      	orrs	r3, r2
 8009056:	b21b      	sxth	r3, r3
 8009058:	b29a      	uxth	r2, r3
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	461a      	mov	r2, r3
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	4413      	add	r3, r2
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	429a      	cmp	r2, r3
 800906c:	d201      	bcs.n	8009072 <mg_dns_parse_rr+0x114>
 800906e:	2300      	movs	r3, #0
 8009070:	e006      	b.n	8009080 <mg_dns_parse_rr+0x122>
  return (size_t) (rr->nlen + rr->alen + 10);
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	88db      	ldrh	r3, [r3, #6]
 800907c:	4413      	add	r3, r2
 800907e:	330a      	adds	r3, #10
}
 8009080:	4618      	mov	r0, r3
 8009082:	3718      	adds	r7, #24
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b08e      	sub	sp, #56	@ 0x38
 800908c:	af02      	add	r7, sp, #8
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8009098:	230c      	movs	r3, #12
 800909a:	627b      	str	r3, [r7, #36]	@ 0x24
  bool is_response;
  memset(dm, 0, sizeof(*dm));
 800909c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80090a0:	2100      	movs	r1, #0
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f01f fb7c 	bl	80287a0 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b0b      	cmp	r3, #11
 80090ac:	d801      	bhi.n	80090b2 <mg_dns_parse+0x2a>
 80090ae:	2300      	movs	r3, #0
 80090b0:	e0c8      	b.n	8009244 <mg_dns_parse+0x1bc>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	889b      	ldrh	r3, [r3, #4]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f019 fdde 	bl	8022c78 <mg_ntohs>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d901      	bls.n	80090c6 <mg_dns_parse+0x3e>
 80090c2:	2300      	movs	r3, #0
 80090c4:	e0be      	b.n	8009244 <mg_dns_parse+0x1bc>
  num_answers = mg_ntohs(h->num_answers);
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	88db      	ldrh	r3, [r3, #6]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f019 fdd4 	bl	8022c78 <mg_ntohs>
 80090d0:	4603      	mov	r3, r0
 80090d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	2b0a      	cmp	r3, #10
 80090d8:	d90f      	bls.n	80090fa <mg_dns_parse+0x72>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80090da:	4b5c      	ldr	r3, [pc, #368]	@ (800924c <mg_dns_parse+0x1c4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	dd09      	ble.n	80090f6 <mg_dns_parse+0x6e>
 80090e2:	4b5b      	ldr	r3, [pc, #364]	@ (8009250 <mg_dns_parse+0x1c8>)
 80090e4:	22e7      	movs	r2, #231	@ 0xe7
 80090e6:	495b      	ldr	r1, [pc, #364]	@ (8009254 <mg_dns_parse+0x1cc>)
 80090e8:	2003      	movs	r0, #3
 80090ea:	f006 fb2b 	bl	800f744 <mg_log_prefix>
 80090ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090f0:	4859      	ldr	r0, [pc, #356]	@ (8009258 <mg_dns_parse+0x1d0>)
 80090f2:	f006 fb77 	bl	800f7e4 <mg_log>
    num_answers = 10;  // Sanity cap
 80090f6:	230a      	movs	r3, #10
 80090f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f019 fdba 	bl	8022c78 <mg_ntohs>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	801a      	strh	r2, [r3, #0]
  is_response = mg_ntohs(h->flags) & 0x8000;
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	885b      	ldrh	r3, [r3, #2]
 8009110:	4618      	mov	r0, r3
 8009112:	f019 fdb1 	bl	8022c78 <mg_ntohs>
 8009116:	4603      	mov	r3, r0
 8009118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf14      	ite	ne
 8009120:	2301      	movne	r3, #1
 8009122:	2300      	moveq	r3, #0
 8009124:	77fb      	strb	r3, [r7, #31]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8009126:	2300      	movs	r3, #0
 8009128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800912a:	e01f      	b.n	800916c <mg_dns_parse+0xe4>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 800912c:	f107 0310 	add.w	r3, r7, #16
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	2301      	movs	r3, #1
 8009134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7ff ff10 	bl	8008f5e <mg_dns_parse_rr>
 800913e:	61b8      	str	r0, [r7, #24]
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <mg_dns_parse+0xc2>
 8009146:	2300      	movs	r3, #0
 8009148:	e07c      	b.n	8009244 <mg_dns_parse+0x1bc>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3318      	adds	r3, #24
 800914e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009152:	9200      	str	r2, [sp, #0]
 8009154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff fee8 	bl	8008f2e <mg_dns_parse_name>
    ofs += n;
 800915e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	4413      	add	r3, r2
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8009166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009168:	3301      	adds	r3, #1
 800916a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	889b      	ldrh	r3, [r3, #4]
 8009170:	4618      	mov	r0, r3
 8009172:	f019 fd81 	bl	8022c78 <mg_ntohs>
 8009176:	4603      	mov	r3, r0
 8009178:	461a      	mov	r2, r3
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	4293      	cmp	r3, r2
 800917e:	d3d5      	bcc.n	800912c <mg_dns_parse+0xa4>
  }

  if (!is_response) {
 8009180:	7ffb      	ldrb	r3, [r7, #31]
 8009182:	f083 0301 	eor.w	r3, r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <mg_dns_parse+0x108>
    // For queries, there is no need to parse the answers. In this way,
    // we also ensure the domain name (dm->name) is parsed from
    // the question field.
    return true;
 800918c:	2301      	movs	r3, #1
 800918e:	e059      	b.n	8009244 <mg_dns_parse+0x1bc>
  }

  for (i = 0; i < num_answers; i++) {
 8009190:	2300      	movs	r3, #0
 8009192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009194:	e051      	b.n	800923a <mg_dns_parse+0x1b2>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8009196:	f107 0310 	add.w	r3, r7, #16
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fedb 	bl	8008f5e <mg_dns_parse_rr>
 80091a8:	61b8      	str	r0, [r7, #24]
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <mg_dns_parse+0x12c>
 80091b0:	2300      	movs	r3, #0
 80091b2:	e047      	b.n	8009244 <mg_dns_parse+0x1bc>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3318      	adds	r3, #24
 80091b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091bc:	9200      	str	r2, [sp, #0]
 80091be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff feb3 	bl	8008f2e <mg_dns_parse_name>
    ofs += n;
 80091c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	4413      	add	r3, r2
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 80091d0:	8afb      	ldrh	r3, [r7, #22]
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d114      	bne.n	8009200 <mg_dns_parse+0x178>
 80091d6:	8a7b      	ldrh	r3, [r7, #18]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d111      	bne.n	8009200 <mg_dns_parse+0x178>
 80091dc:	8abb      	ldrh	r3, [r7, #20]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d10e      	bne.n	8009200 <mg_dns_parse+0x178>
      dm->addr.is_ip6 = false;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ee:	3a04      	subs	r2, #4
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	440a      	add	r2, r1
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 80091fe:	e020      	b.n	8009242 <mg_dns_parse+0x1ba>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8009200:	8afb      	ldrh	r3, [r7, #22]
 8009202:	2b10      	cmp	r3, #16
 8009204:	d116      	bne.n	8009234 <mg_dns_parse+0x1ac>
 8009206:	8a7b      	ldrh	r3, [r7, #18]
 8009208:	2b1c      	cmp	r3, #28
 800920a:	d113      	bne.n	8009234 <mg_dns_parse+0x1ac>
 800920c:	8abb      	ldrh	r3, [r7, #20]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d110      	bne.n	8009234 <mg_dns_parse+0x1ac>
      dm->addr.is_ip6 = true;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	1d18      	adds	r0, r3, #4
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	3b10      	subs	r3, #16
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	2210      	movs	r2, #16
 8009226:	4619      	mov	r1, r3
 8009228:	f020 fce9 	bl	8029bfe <memcpy>
      dm->resolved = true;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8009232:	e006      	b.n	8009242 <mg_dns_parse+0x1ba>
  for (i = 0; i < num_answers; i++) {
 8009234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009236:	3301      	adds	r3, #1
 8009238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800923a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	429a      	cmp	r2, r3
 8009240:	d3a9      	bcc.n	8009196 <mg_dns_parse+0x10e>
    }
  }
  return true;
 8009242:	2301      	movs	r3, #1
}
 8009244:	4618      	mov	r0, r3
 8009246:	3730      	adds	r7, #48	@ 0x30
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	2400025c 	.word	0x2400025c
 8009250:	08031100 	.word	0x08031100
 8009254:	0802d330 	.word	0x0802d330
 8009258:	0802d348 	.word	0x0802d348

0800925c <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	b0d2      	sub	sp, #328	@ 0x148
 8009260:	af02      	add	r7, sp, #8
 8009262:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009266:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800926a:	6018      	str	r0, [r3, #0]
 800926c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009270:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009274:	6019      	str	r1, [r3, #0]
 8009276:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800927a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800927e:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8009280:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009284:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	332c      	adds	r3, #44	@ 0x2c
 800928e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8009292:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009296:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d12d      	bne.n	80092fc <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 80092a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 80092b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80092bc:	e019      	b.n	80092f2 <dns_cb+0x96>
      tmp = d->next;
 80092be:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80092c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80092cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80092d0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80092d4:	4290      	cmp	r0, r2
 80092d6:	eb71 0303 	sbcs.w	r3, r1, r3
 80092da:	d206      	bcs.n	80092ea <dns_cb+0x8e>
 80092dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	4992      	ldr	r1, [pc, #584]	@ (800952c <dns_cb+0x2d0>)
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fb37 	bl	8009958 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 80092ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80092ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80092f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e1      	bne.n	80092be <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 80092fa:	e112      	b.n	8009522 <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 80092fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009300:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b07      	cmp	r3, #7
 8009308:	f040 80e4 	bne.w	80094d4 <dns_cb+0x278>
    int resolved = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8009312:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009316:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800931e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009322:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	f107 0210 	add.w	r2, r7, #16
 800932e:	4619      	mov	r1, r3
 8009330:	f7ff feaa 	bl	8009088 <mg_dns_parse>
 8009334:	4603      	mov	r3, r0
 8009336:	f083 0301 	eor.w	r3, r3, #1
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01e      	beq.n	800937e <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8009340:	4b7b      	ldr	r3, [pc, #492]	@ (8009530 <dns_cb+0x2d4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd09      	ble.n	800935c <dns_cb+0x100>
 8009348:	4b7a      	ldr	r3, [pc, #488]	@ (8009534 <dns_cb+0x2d8>)
 800934a:	f240 121f 	movw	r2, #287	@ 0x11f
 800934e:	497a      	ldr	r1, [pc, #488]	@ (8009538 <dns_cb+0x2dc>)
 8009350:	2001      	movs	r0, #1
 8009352:	f006 f9f7 	bl	800f744 <mg_log_prefix>
 8009356:	4879      	ldr	r0, [pc, #484]	@ (800953c <dns_cb+0x2e0>)
 8009358:	f006 fa44 	bl	800f7e4 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 800935c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009360:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009368:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800936c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f006 fa6a 	bl	800f850 <mg_hexdump>
 800937c:	e090      	b.n	80094a0 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 800937e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8009388:	e085      	b.n	8009496 <dns_cb+0x23a>
        tmp = d->next;
 800938a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8009394:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009398:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800939c:	881a      	ldrh	r2, [r3, #0]
 800939e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80093a2:	8a1b      	ldrh	r3, [r3, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d171      	bne.n	800948c <dns_cb+0x230>
        if (d->c->is_resolving) {
 80093a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d04a      	beq.n	8009452 <dns_cb+0x1f6>
          if (dm.resolved) {
 80093bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80093c4:	789b      	ldrb	r3, [r3, #2]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d038      	beq.n	800943c <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 80093ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80093da:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 80093dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80093ea:	f102 041c 	add.w	r4, r2, #28
 80093ee:	1d1d      	adds	r5, r3, #4
 80093f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 80093f8:	4b4d      	ldr	r3, [pc, #308]	@ (8009530 <dns_cb+0x2d4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	dd16      	ble.n	800942e <dns_cb+0x1d2>
 8009400:	4b4c      	ldr	r3, [pc, #304]	@ (8009534 <dns_cb+0x2d8>)
 8009402:	f240 122b 	movw	r2, #299	@ 0x12b
 8009406:	494c      	ldr	r1, [pc, #304]	@ (8009538 <dns_cb+0x2dc>)
 8009408:	2003      	movs	r0, #3
 800940a:	f006 f99b 	bl	800f744 <mg_log_prefix>
 800940e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009416:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	331c      	adds	r3, #28
 800941e:	f107 0210 	add.w	r2, r7, #16
 8009422:	3218      	adds	r2, #24
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	4b46      	ldr	r3, [pc, #280]	@ (8009540 <dns_cb+0x2e4>)
 8009428:	4846      	ldr	r0, [pc, #280]	@ (8009544 <dns_cb+0x2e8>)
 800942a:	f006 f9db 	bl	800f7e4 <mg_log>
            mg_connect_resolved(d->c);
 800942e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4618      	mov	r0, r3
 8009436:	f00a f8e3 	bl	8013600 <mg_connect_resolved>
 800943a:	e01d      	b.n	8009478 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 800943c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009440:	6858      	ldr	r0, [r3, #4]
 8009442:	f107 0310 	add.w	r3, r7, #16
 8009446:	3318      	adds	r3, #24
 8009448:	461a      	mov	r2, r3
 800944a:	493f      	ldr	r1, [pc, #252]	@ (8009548 <dns_cb+0x2ec>)
 800944c:	f000 fa84 	bl	8009958 <mg_error>
 8009450:	e012      	b.n	8009478 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8009452:	4b37      	ldr	r3, [pc, #220]	@ (8009530 <dns_cb+0x2d4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	dd0e      	ble.n	8009478 <dns_cb+0x21c>
 800945a:	4b36      	ldr	r3, [pc, #216]	@ (8009534 <dns_cb+0x2d8>)
 800945c:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009460:	4935      	ldr	r1, [pc, #212]	@ (8009538 <dns_cb+0x2dc>)
 8009462:	2001      	movs	r0, #1
 8009464:	f006 f96e 	bl	800f744 <mg_log_prefix>
 8009468:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009470:	4619      	mov	r1, r3
 8009472:	4836      	ldr	r0, [pc, #216]	@ (800954c <dns_cb+0x2f0>)
 8009474:	f006 f9b6 	bl	800f7e4 <mg_log>
        mg_dns_free(head, d);
 8009478:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800947c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8009480:	f7ff fc68 	bl	8008d54 <mg_dns_free>
        resolved = 1;
 8009484:	2301      	movs	r3, #1
 8009486:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800948a:	e000      	b.n	800948e <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 800948c:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 800948e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009492:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8009496:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800949a:	2b00      	cmp	r3, #0
 800949c:	f47f af75 	bne.w	800938a <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80094a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10d      	bne.n	80094c4 <dns_cb+0x268>
 80094a8:	4b21      	ldr	r3, [pc, #132]	@ (8009530 <dns_cb+0x2d4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dd09      	ble.n	80094c4 <dns_cb+0x268>
 80094b0:	4b20      	ldr	r3, [pc, #128]	@ (8009534 <dns_cb+0x2d8>)
 80094b2:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 80094b6:	4920      	ldr	r1, [pc, #128]	@ (8009538 <dns_cb+0x2dc>)
 80094b8:	2001      	movs	r0, #1
 80094ba:	f006 f943 	bl	800f744 <mg_log_prefix>
 80094be:	4824      	ldr	r0, [pc, #144]	@ (8009550 <dns_cb+0x2f4>)
 80094c0:	f006 f990 	bl	800f7e4 <mg_log>
    c->recv.len = 0;
 80094c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80094c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2200      	movs	r2, #0
 80094d0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80094d2:	e026      	b.n	8009522 <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 80094d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80094d8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b09      	cmp	r3, #9
 80094e0:	d11f      	bne.n	8009522 <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 80094e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80094ec:	e015      	b.n	800951a <dns_cb+0x2be>
      tmp = d->next;
 80094ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 80094f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	4915      	ldr	r1, [pc, #84]	@ (8009554 <dns_cb+0x2f8>)
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fa29 	bl	8009958 <mg_error>
      mg_dns_free(head, d);
 8009506:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800950a:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800950e:	f7ff fc21 	bl	8008d54 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8009512:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009516:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800951a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e5      	bne.n	80094ee <dns_cb+0x292>
}
 8009522:	bf00      	nop
 8009524:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009528:	46bd      	mov	sp, r7
 800952a:	bdb0      	pop	{r4, r5, r7, pc}
 800952c:	0802d374 	.word	0x0802d374
 8009530:	2400025c 	.word	0x2400025c
 8009534:	08031110 	.word	0x08031110
 8009538:	0802d330 	.word	0x0802d330
 800953c:	0802d380 	.word	0x0802d380
 8009540:	080141a3 	.word	0x080141a3
 8009544:	0802d39c 	.word	0x0802d39c
 8009548:	0802d3ac 	.word	0x0802d3ac
 800954c:	0802d3c4 	.word	0x0802d3c4
 8009550:	0802d3dc 	.word	0x0802d3dc
 8009554:	0802d3ec 	.word	0x0802d3ec

08009558 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8009558:	b590      	push	{r4, r7, lr}
 800955a:	b0cb      	sub	sp, #300	@ 0x12c
 800955c:	af00      	add	r7, sp, #0
 800955e:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8009562:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8009566:	6020      	str	r0, [r4, #0]
 8009568:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800956c:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8009570:	6001      	str	r1, [r0, #0]
 8009572:	4619      	mov	r1, r3
 8009574:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009578:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009582:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8009586:	460a      	mov	r2, r1
 8009588:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 800958a:	f107 0314 	add.w	r3, r7, #20
 800958e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8009592:	2100      	movs	r1, #0
 8009594:	4618      	mov	r0, r3
 8009596:	f01f f903 	bl	80287a0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 800959a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800959e:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f019 fb67 	bl	8022c78 <mg_ntohs>
 80095aa:	4603      	mov	r3, r0
 80095ac:	461a      	mov	r2, r3
 80095ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80095b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80095b6:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 80095b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80095bc:	f019 fb5c 	bl	8022c78 <mg_ntohs>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80095c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80095cc:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 80095ce:	2001      	movs	r0, #1
 80095d0:	f019 fb52 	bl	8022c78 <mg_ntohs>
 80095d4:	4603      	mov	r3, r0
 80095d6:	461a      	mov	r2, r3
 80095d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80095dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80095e0:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80095e2:	2300      	movs	r3, #0
 80095e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80095e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80095f0:	e054      	b.n	800969c <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 80095f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80095f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009602:	4413      	add	r3, r2
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b2e      	cmp	r3, #46	@ 0x2e
 8009608:	d009      	beq.n	800961e <mg_dns_send+0xc6>
 800960a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800960e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800961a:	429a      	cmp	r2, r3
 800961c:	d32f      	bcc.n	800967e <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 800961e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009622:	b2da      	uxtb	r2, r3
 8009624:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009628:	b2db      	uxtb	r3, r3
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	b2d9      	uxtb	r1, r3
 800962e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009632:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009636:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800963a:	4413      	add	r3, r2
 800963c:	330c      	adds	r3, #12
 800963e:	460a      	mov	r2, r1
 8009640:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8009642:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009646:	3301      	adds	r3, #1
 8009648:	f107 0214 	add.w	r2, r7, #20
 800964c:	3308      	adds	r3, #8
 800964e:	4413      	add	r3, r2
 8009650:	1d18      	adds	r0, r3, #4
 8009652:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009656:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009662:	18d1      	adds	r1, r2, r3
 8009664:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8009668:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	461a      	mov	r2, r3
 8009670:	f020 fac5 	bl	8029bfe <memcpy>
      n = i + 1;
 8009674:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009678:	3301      	adds	r3, #1
 800967a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 800967e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009682:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800968e:	429a      	cmp	r2, r3
 8009690:	d209      	bcs.n	80096a6 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8009692:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009696:	3301      	adds	r3, #1
 8009698:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800969c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80096a0:	2bfa      	cmp	r3, #250	@ 0xfa
 80096a2:	d9a6      	bls.n	80095f2 <mg_dns_send+0x9a>
 80096a4:	e000      	b.n	80096a8 <mg_dns_send+0x150>
    if (i >= name->len) break;
 80096a6:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 80096a8:	f107 0214 	add.w	r2, r7, #20
 80096ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096b0:	3308      	adds	r3, #8
 80096b2:	4413      	add	r3, r2
 80096b4:	3304      	adds	r3, #4
 80096b6:	2205      	movs	r2, #5
 80096b8:	4916      	ldr	r1, [pc, #88]	@ (8009714 <mg_dns_send+0x1bc>)
 80096ba:	4618      	mov	r0, r3
 80096bc:	f020 fa9f 	bl	8029bfe <memcpy>
  n += 5;
 80096c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096c4:	3305      	adds	r3, #5
 80096c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 80096ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80096ce:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d009      	beq.n	80096ec <mg_dns_send+0x194>
 80096d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096dc:	3b03      	subs	r3, #3
 80096de:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80096e2:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80096e6:	4413      	add	r3, r2
 80096e8:	221c      	movs	r2, #28
 80096ea:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 80096ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096f0:	f103 020c 	add.w	r2, r3, #12
 80096f4:	f107 0114 	add.w	r1, r7, #20
 80096f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80096fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	f00a fab7 	bl	8013c74 <mg_send>
 8009706:	4603      	mov	r3, r0
}
 8009708:	4618      	mov	r0, r3
 800970a:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 800970e:	46bd      	mov	sp, r7
 8009710:	bd90      	pop	{r4, r7, pc}
 8009712:	bf00      	nop
 8009714:	0802d3f8 	.word	0x0802d3f8

08009718 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8009718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800971c:	b088      	sub	sp, #32
 800971e:	af02      	add	r7, sp, #8
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d104      	bne.n	800973e <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8009734:	494d      	ldr	r1, [pc, #308]	@ (800986c <mg_sendnsreq+0x154>)
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f90e 	bl	8009958 <mg_error>
 800973c:	e017      	b.n	800976e <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d113      	bne.n	800976e <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6858      	ldr	r0, [r3, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6819      	ldr	r1, [r3, #0]
 800974e:	2300      	movs	r3, #0
 8009750:	2200      	movs	r2, #0
 8009752:	f006 fc75 	bl	8010040 <mg_connect>
 8009756:	4602      	mov	r2, r0
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4a41      	ldr	r2, [pc, #260]	@ (8009870 <mg_sendnsreq+0x158>)
 800976a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d104      	bne.n	8009780 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8009776:	493f      	ldr	r1, [pc, #252]	@ (8009874 <mg_sendnsreq+0x15c>)
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 f8ed 	bl	8009958 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 800977e:	e070      	b.n	8009862 <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8009780:	2118      	movs	r1, #24
 8009782:	2001      	movs	r0, #1
 8009784:	f01d f842 	bl	802680c <calloc>
 8009788:	4603      	mov	r3, r0
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 8009792:	4939      	ldr	r1, [pc, #228]	@ (8009878 <mg_sendnsreq+0x160>)
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f8df 	bl	8009958 <mg_error>
}
 800979a:	e062      	b.n	8009862 <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a2:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <mg_sendnsreq+0x9c>
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	8a1b      	ldrh	r3, [r3, #16]
 80097ae:	3301      	adds	r3, #1
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	e000      	b.n	80097b6 <mg_sendnsreq+0x9e>
 80097b4:	2201      	movs	r2, #1
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    d->expire = mg_millis() + (uint64_t) ms;
 80097cc:	f7f7 fa10 	bl	8000bf0 <mg_millis>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	17c8      	asrs	r0, r1, #31
 80097d8:	460c      	mov	r4, r1
 80097da:	4605      	mov	r5, r0
 80097dc:	eb12 0804 	adds.w	r8, r2, r4
 80097e0:	eb43 0905 	adc.w	r9, r3, r5
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80097f6:	f043 0308 	orr.w	r3, r3, #8
 80097fa:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 80097fe:	4b1f      	ldr	r3, [pc, #124]	@ (800987c <mg_sendnsreq+0x164>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b03      	cmp	r3, #3
 8009804:	dd18      	ble.n	8009838 <mg_sendnsreq+0x120>
 8009806:	4b1e      	ldr	r3, [pc, #120]	@ (8009880 <mg_sendnsreq+0x168>)
 8009808:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 800980c:	491d      	ldr	r1, [pc, #116]	@ (8009884 <mg_sendnsreq+0x16c>)
 800980e:	2004      	movs	r0, #4
 8009810:	f005 ff98 	bl	800f744 <mg_log_prefix>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	461c      	mov	r4, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6818      	ldr	r0, [r3, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	8a12      	ldrh	r2, [r2, #16]
 800982a:	9201      	str	r2, [sp, #4]
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4603      	mov	r3, r0
 8009830:	4622      	mov	r2, r4
 8009832:	4815      	ldr	r0, [pc, #84]	@ (8009888 <mg_sendnsreq+0x170>)
 8009834:	f005 ffd6 	bl	800f7e4 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	6858      	ldr	r0, [r3, #4]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	8a1a      	ldrh	r2, [r3, #16]
 8009840:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009844:	68b9      	ldr	r1, [r7, #8]
 8009846:	f7ff fe87 	bl	8009558 <mg_dns_send>
 800984a:	4603      	mov	r3, r0
 800984c:	f083 0301 	eor.w	r3, r3, #1
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	490c      	ldr	r1, [pc, #48]	@ (800988c <mg_sendnsreq+0x174>)
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f87b 	bl	8009958 <mg_error>
}
 8009862:	bf00      	nop
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800986c:	0802d400 	.word	0x0802d400
 8009870:	0800925d 	.word	0x0800925d
 8009874:	0802d42c 	.word	0x0802d42c
 8009878:	0802d438 	.word	0x0802d438
 800987c:	2400025c 	.word	0x2400025c
 8009880:	08031118 	.word	0x08031118
 8009884:	0802d330 	.word	0x0802d330
 8009888:	0802d444 	.word	0x0802d444
 800988c:	0802d468 	.word	0x0802d468

08009890 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af02      	add	r7, sp, #8
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 800989a:	f107 030c 	add.w	r3, r7, #12
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f019 f872 	bl	802298a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80098a6:	6838      	ldr	r0, [r7, #0]
 80098a8:	f019 f8a2 	bl	80229f0 <mg_url_port>
 80098ac:	4603      	mov	r3, r0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f019 f9e2 	bl	8022c78 <mg_ntohs>
 80098b4:	4603      	mov	r3, r0
 80098b6:	461a      	mov	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	331c      	adds	r3, #28
 80098c0:	461a      	mov	r2, r3
 80098c2:	f107 030c 	add.w	r3, r7, #12
 80098c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098ca:	f006 faea 	bl	800fea2 <mg_aton>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f009 fe93 	bl	8013600 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80098da:	e019      	b.n	8009910 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	7e1b      	ldrb	r3, [r3, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <mg_resolve+0x5e>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	330c      	adds	r3, #12
 80098ec:	e002      	b.n	80098f4 <mg_resolve+0x64>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	695a      	ldr	r2, [r3, #20]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	7e1b      	ldrb	r3, [r3, #24]
 8009902:	f107 010c 	add.w	r1, r7, #12
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff ff04 	bl	8009718 <mg_sendnsreq>
}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <mg_call+0x24>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009940:	2b00      	cmp	r3, #0
 8009942:	d005      	beq.n	8009950 <mg_call+0x38>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	4798      	blx	r3
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8009958:	b40e      	push	{r1, r2, r3}
 800995a:	b580      	push	{r7, lr}
 800995c:	b095      	sub	sp, #84	@ 0x54
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8009962:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009966:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8009968:	f107 030c 	add.w	r3, r7, #12
 800996c:	f107 0010 	add.w	r0, r7, #16
 8009970:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009972:	2140      	movs	r1, #64	@ 0x40
 8009974:	f00a fafa 	bl	8013f6c <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8009978:	4b14      	ldr	r3, [pc, #80]	@ (80099cc <mg_error+0x74>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd0f      	ble.n	80099a0 <mg_error+0x48>
 8009980:	4b13      	ldr	r3, [pc, #76]	@ (80099d0 <mg_error+0x78>)
 8009982:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8009986:	4913      	ldr	r1, [pc, #76]	@ (80099d4 <mg_error+0x7c>)
 8009988:	2001      	movs	r0, #1
 800998a:	f005 fedb 	bl	800f744 <mg_log_prefix>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009996:	f107 0310 	add.w	r3, r7, #16
 800999a:	480f      	ldr	r0, [pc, #60]	@ (80099d8 <mg_error+0x80>)
 800999c:	f005 ff22 	bl	800f7e4 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80099a6:	f043 0320 	orr.w	r3, r3, #32
 80099aa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80099ae:	f107 0310 	add.w	r3, r7, #16
 80099b2:	461a      	mov	r2, r3
 80099b4:	2100      	movs	r1, #0
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7ff ffae 	bl	8009918 <mg_call>
}
 80099bc:	bf00      	nop
 80099be:	3754      	adds	r7, #84	@ 0x54
 80099c0:	46bd      	mov	sp, r7
 80099c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099c6:	b003      	add	sp, #12
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	2400025c 	.word	0x2400025c
 80099d0:	08031128 	.word	0x08031128
 80099d4:	0802d330 	.word	0x0802d330
 80099d8:	0802d4e0 	.word	0x0802d4e0

080099dc <mg_ota_flash_begin>:

static char *s_addr;      // Current address to write to
static size_t s_size;     // Firmware size to flash. In-progress indicator
static uint32_t s_crc32;  // Firmware checksum

bool mg_ota_flash_begin(size_t new_firmware_size, struct mg_flash *flash) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  bool ok = false;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
  if (s_size) {
 80099ea:	4b30      	ldr	r3, [pc, #192]	@ (8009aac <mg_ota_flash_begin+0xd0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00e      	beq.n	8009a10 <mg_ota_flash_begin+0x34>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 80099f2:	4b2f      	ldr	r3, [pc, #188]	@ (8009ab0 <mg_ota_flash_begin+0xd4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	dd52      	ble.n	8009aa0 <mg_ota_flash_begin+0xc4>
 80099fa:	4b2e      	ldr	r3, [pc, #184]	@ (8009ab4 <mg_ota_flash_begin+0xd8>)
 80099fc:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8009a00:	492d      	ldr	r1, [pc, #180]	@ (8009ab8 <mg_ota_flash_begin+0xdc>)
 8009a02:	2001      	movs	r0, #1
 8009a04:	f005 fe9e 	bl	800f744 <mg_log_prefix>
 8009a08:	482c      	ldr	r0, [pc, #176]	@ (8009abc <mg_ota_flash_begin+0xe0>)
 8009a0a:	f005 feeb 	bl	800f7e4 <mg_log>
 8009a0e:	e047      	b.n	8009aa0 <mg_ota_flash_begin+0xc4>
  } else {
    size_t half = flash->size / 2;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	085b      	lsrs	r3, r3, #1
 8009a16:	60bb      	str	r3, [r7, #8]
    s_crc32 = 0;
 8009a18:	4b29      	ldr	r3, [pc, #164]	@ (8009ac0 <mg_ota_flash_begin+0xe4>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
    s_addr = (char *) flash->start + half;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	4413      	add	r3, r2
 8009a26:	4a27      	ldr	r2, [pc, #156]	@ (8009ac4 <mg_ota_flash_begin+0xe8>)
 8009a28:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("FW %lu bytes, max %lu", new_firmware_size, half));
 8009a2a:	4b21      	ldr	r3, [pc, #132]	@ (8009ab0 <mg_ota_flash_begin+0xd4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	dd0b      	ble.n	8009a4a <mg_ota_flash_begin+0x6e>
 8009a32:	4b20      	ldr	r3, [pc, #128]	@ (8009ab4 <mg_ota_flash_begin+0xd8>)
 8009a34:	f240 2211 	movw	r2, #529	@ 0x211
 8009a38:	491f      	ldr	r1, [pc, #124]	@ (8009ab8 <mg_ota_flash_begin+0xdc>)
 8009a3a:	2003      	movs	r0, #3
 8009a3c:	f005 fe82 	bl	800f744 <mg_log_prefix>
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	4820      	ldr	r0, [pc, #128]	@ (8009ac8 <mg_ota_flash_begin+0xec>)
 8009a46:	f005 fecd 	bl	800f7e4 <mg_log>
    if (new_firmware_size < half) {
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d216      	bcs.n	8009a80 <mg_ota_flash_begin+0xa4>
      ok = true;
 8009a52:	2301      	movs	r3, #1
 8009a54:	73fb      	strb	r3, [r7, #15]
      s_size = new_firmware_size;
 8009a56:	4a15      	ldr	r2, [pc, #84]	@ (8009aac <mg_ota_flash_begin+0xd0>)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 8009a5c:	4b14      	ldr	r3, [pc, #80]	@ (8009ab0 <mg_ota_flash_begin+0xd4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	dd1d      	ble.n	8009aa0 <mg_ota_flash_begin+0xc4>
 8009a64:	4b13      	ldr	r3, [pc, #76]	@ (8009ab4 <mg_ota_flash_begin+0xd8>)
 8009a66:	f240 2215 	movw	r2, #533	@ 0x215
 8009a6a:	4913      	ldr	r1, [pc, #76]	@ (8009ab8 <mg_ota_flash_begin+0xdc>)
 8009a6c:	2002      	movs	r0, #2
 8009a6e:	f005 fe69 	bl	800f744 <mg_log_prefix>
 8009a72:	4b0e      	ldr	r3, [pc, #56]	@ (8009aac <mg_ota_flash_begin+0xd0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	4814      	ldr	r0, [pc, #80]	@ (8009acc <mg_ota_flash_begin+0xf0>)
 8009a7a:	f005 feb3 	bl	800f7e4 <mg_log>
 8009a7e:	e00f      	b.n	8009aa0 <mg_ota_flash_begin+0xc4>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, half));
 8009a80:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab0 <mg_ota_flash_begin+0xd4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dd0b      	ble.n	8009aa0 <mg_ota_flash_begin+0xc4>
 8009a88:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab4 <mg_ota_flash_begin+0xd8>)
 8009a8a:	f240 2217 	movw	r2, #535	@ 0x217
 8009a8e:	490a      	ldr	r1, [pc, #40]	@ (8009ab8 <mg_ota_flash_begin+0xdc>)
 8009a90:	2001      	movs	r0, #1
 8009a92:	f005 fe57 	bl	800f744 <mg_log_prefix>
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	480d      	ldr	r0, [pc, #52]	@ (8009ad0 <mg_ota_flash_begin+0xf4>)
 8009a9c:	f005 fea2 	bl	800f7e4 <mg_log>
    }
  }
  return ok;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	24019d58 	.word	0x24019d58
 8009ab0:	2400025c 	.word	0x2400025c
 8009ab4:	08031134 	.word	0x08031134
 8009ab8:	0802d330 	.word	0x0802d330
 8009abc:	0802d4ec 	.word	0x0802d4ec
 8009ac0:	24019d5c 	.word	0x24019d5c
 8009ac4:	24019d54 	.word	0x24019d54
 8009ac8:	0802d518 	.word	0x0802d518
 8009acc:	0802d530 	.word	0x0802d530
 8009ad0:	0802d550 	.word	0x0802d550

08009ad4 <mg_ota_flash_write>:

bool mg_ota_flash_write(const void *buf, size_t len, struct mg_flash *flash) {
 8009ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad8:	b08c      	sub	sp, #48	@ 0x30
 8009ada:	af02      	add	r7, sp, #8
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
  bool ok = false;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (s_size == 0) {
 8009ae8:	4b54      	ldr	r3, [pc, #336]	@ (8009c3c <mg_ota_flash_write+0x168>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10f      	bne.n	8009b10 <mg_ota_flash_write+0x3c>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 8009af0:	4b53      	ldr	r3, [pc, #332]	@ (8009c40 <mg_ota_flash_write+0x16c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f340 8099 	ble.w	8009c2c <mg_ota_flash_write+0x158>
 8009afa:	4b52      	ldr	r3, [pc, #328]	@ (8009c44 <mg_ota_flash_write+0x170>)
 8009afc:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8009b00:	4951      	ldr	r1, [pc, #324]	@ (8009c48 <mg_ota_flash_write+0x174>)
 8009b02:	2001      	movs	r0, #1
 8009b04:	f005 fe1e 	bl	800f744 <mg_log_prefix>
 8009b08:	4850      	ldr	r0, [pc, #320]	@ (8009c4c <mg_ota_flash_write+0x178>)
 8009b0a:	f005 fe6b 	bl	800f7e4 <mg_log>
 8009b0e:	e08d      	b.n	8009c2c <mg_ota_flash_write+0x158>
  } else {
    size_t len_aligned_down = MG_ROUND_DOWN(len, flash->align);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <mg_ota_flash_write+0x58>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	68d2      	ldr	r2, [r2, #12]
 8009b26:	fb02 f303 	mul.w	r3, r2, r3
 8009b2a:	e000      	b.n	8009b2e <mg_ota_flash_write+0x5a>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	623b      	str	r3, [r7, #32]
    if (len_aligned_down) ok = flash->write_fn(s_addr, buf, len_aligned_down);
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d009      	beq.n	8009b4a <mg_ota_flash_write+0x76>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	4a45      	ldr	r2, [pc, #276]	@ (8009c50 <mg_ota_flash_write+0x17c>)
 8009b3c:	6810      	ldr	r0, [r2, #0]
 8009b3e:	6a3a      	ldr	r2, [r7, #32]
 8009b40:	68f9      	ldr	r1, [r7, #12]
 8009b42:	4798      	blx	r3
 8009b44:	4603      	mov	r3, r0
 8009b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (len_aligned_down < len) {
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d244      	bcs.n	8009bdc <mg_ota_flash_write+0x108>
 8009b52:	466b      	mov	r3, sp
 8009b54:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	61fb      	str	r3, [r7, #28]
      char tmp[flash->align];
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68de      	ldr	r6, [r3, #12]
 8009b62:	4633      	mov	r3, r6
 8009b64:	3b01      	subs	r3, #1
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	46b0      	mov	r8, r6
 8009b6c:	4699      	mov	r9, r3
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	f04f 0300 	mov.w	r3, #0
 8009b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b82:	2300      	movs	r3, #0
 8009b84:	4634      	mov	r4, r6
 8009b86:	461d      	mov	r5, r3
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	00eb      	lsls	r3, r5, #3
 8009b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b96:	00e2      	lsls	r2, r4, #3
 8009b98:	1df3      	adds	r3, r6, #7
 8009b9a:	08db      	lsrs	r3, r3, #3
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	ebad 0d03 	sub.w	sp, sp, r3
 8009ba2:	ab02      	add	r3, sp, #8
 8009ba4:	3300      	adds	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
      memset(tmp, 0xff, sizeof(tmp));
 8009ba8:	4632      	mov	r2, r6
 8009baa:	21ff      	movs	r1, #255	@ 0xff
 8009bac:	6978      	ldr	r0, [r7, #20]
 8009bae:	f01e fdf7 	bl	80287a0 <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6978      	ldr	r0, [r7, #20]
 8009bbe:	f020 f81e 	bl	8029bfe <memcpy>
      ok = flash->write_fn(s_addr + len_aligned_down, tmp, sizeof(tmp));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	4a22      	ldr	r2, [pc, #136]	@ (8009c50 <mg_ota_flash_write+0x17c>)
 8009bc8:	6811      	ldr	r1, [r2, #0]
 8009bca:	6a3a      	ldr	r2, [r7, #32]
 8009bcc:	1888      	adds	r0, r1, r2
 8009bce:	4632      	mov	r2, r6
 8009bd0:	6979      	ldr	r1, [r7, #20]
 8009bd2:	4798      	blx	r3
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009bda:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c54 <mg_ota_flash_write+0x180>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f018 ffc7 	bl	8022b78 <mg_crc32>
 8009bea:	4603      	mov	r3, r0
 8009bec:	4a19      	ldr	r2, [pc, #100]	@ (8009c54 <mg_ota_flash_write+0x180>)
 8009bee:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 8009bf0:	4b13      	ldr	r3, [pc, #76]	@ (8009c40 <mg_ota_flash_write+0x16c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	dd13      	ble.n	8009c20 <mg_ota_flash_write+0x14c>
 8009bf8:	4b12      	ldr	r3, [pc, #72]	@ (8009c44 <mg_ota_flash_write+0x170>)
 8009bfa:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8009bfe:	4912      	ldr	r1, [pc, #72]	@ (8009c48 <mg_ota_flash_write+0x174>)
 8009c00:	2003      	movs	r0, #3
 8009c02:	f005 fd9f 	bl	800f744 <mg_log_prefix>
 8009c06:	4b12      	ldr	r3, [pc, #72]	@ (8009c50 <mg_ota_flash_write+0x17c>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	18d1      	adds	r1, r2, r3
 8009c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	480f      	ldr	r0, [pc, #60]	@ (8009c58 <mg_ota_flash_write+0x184>)
 8009c1c:	f005 fde2 	bl	800f7e4 <mg_log>
    s_addr += len;
 8009c20:	4b0b      	ldr	r3, [pc, #44]	@ (8009c50 <mg_ota_flash_write+0x17c>)
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4413      	add	r3, r2
 8009c28:	4a09      	ldr	r2, [pc, #36]	@ (8009c50 <mg_ota_flash_write+0x17c>)
 8009c2a:	6013      	str	r3, [r2, #0]
  }
  return ok;
 8009c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3728      	adds	r7, #40	@ 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	bf00      	nop
 8009c3c:	24019d58 	.word	0x24019d58
 8009c40:	2400025c 	.word	0x2400025c
 8009c44:	08031148 	.word	0x08031148
 8009c48:	0802d330 	.word	0x0802d330
 8009c4c:	0802d574 	.word	0x0802d574
 8009c50:	24019d54 	.word	0x24019d54
 8009c54:	24019d5c 	.word	0x24019d5c
 8009c58:	0802d59c 	.word	0x0802d59c

08009c5c <mg_ota_flash_end>:

bool mg_ota_flash_end(struct mg_flash *flash) {
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	6078      	str	r0, [r7, #4]
  char *base = (char *) flash->start + flash->size / 2;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	4413      	add	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
  bool ok = false;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 8009c76:	4b2f      	ldr	r3, [pc, #188]	@ (8009d34 <mg_ota_flash_end+0xd8>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d040      	beq.n	8009d00 <mg_ota_flash_end+0xa4>
    size_t size = (size_t) (s_addr - base);
 8009c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8009d38 <mg_ota_flash_end+0xdc>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	60fb      	str	r3, [r7, #12]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 8009c88:	4b2a      	ldr	r3, [pc, #168]	@ (8009d34 <mg_ota_flash_end+0xd8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6939      	ldr	r1, [r7, #16]
 8009c90:	2000      	movs	r0, #0
 8009c92:	f018 ff71 	bl	8022b78 <mg_crc32>
 8009c96:	60b8      	str	r0, [r7, #8]
    if (size == s_size && crc32 == s_crc32) ok = true;
 8009c98:	4b26      	ldr	r3, [pc, #152]	@ (8009d34 <mg_ota_flash_end+0xd8>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d106      	bne.n	8009cb0 <mg_ota_flash_end+0x54>
 8009ca2:	4b26      	ldr	r3, [pc, #152]	@ (8009d3c <mg_ota_flash_end+0xe0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d101      	bne.n	8009cb0 <mg_ota_flash_end+0x54>
 8009cac:	2301      	movs	r3, #1
 8009cae:	75fb      	strb	r3, [r7, #23]
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 8009cb0:	4b23      	ldr	r3, [pc, #140]	@ (8009d40 <mg_ota_flash_end+0xe4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	dd18      	ble.n	8009cea <mg_ota_flash_end+0x8e>
 8009cb8:	4b22      	ldr	r3, [pc, #136]	@ (8009d44 <mg_ota_flash_end+0xe8>)
 8009cba:	f240 2239 	movw	r2, #569	@ 0x239
 8009cbe:	4922      	ldr	r1, [pc, #136]	@ (8009d48 <mg_ota_flash_end+0xec>)
 8009cc0:	2003      	movs	r0, #3
 8009cc2:	f005 fd3f 	bl	800f744 <mg_log_prefix>
 8009cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d3c <mg_ota_flash_end+0xe0>)
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <mg_ota_flash_end+0xd8>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <mg_ota_flash_end+0x7c>
 8009cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d4c <mg_ota_flash_end+0xf0>)
 8009cd6:	e000      	b.n	8009cda <mg_ota_flash_end+0x7e>
 8009cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d50 <mg_ota_flash_end+0xf4>)
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	481b      	ldr	r0, [pc, #108]	@ (8009d54 <mg_ota_flash_end+0xf8>)
 8009ce6:	f005 fd7d 	bl	800f7e4 <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 8009cea:	4b12      	ldr	r3, [pc, #72]	@ (8009d34 <mg_ota_flash_end+0xd8>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
    if (ok) ok = flash->swap_fn();
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d004      	beq.n	8009d00 <mg_ota_flash_end+0xa4>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	4798      	blx	r3
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75fb      	strb	r3, [r7, #23]
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 8009d00:	4b0f      	ldr	r3, [pc, #60]	@ (8009d40 <mg_ota_flash_end+0xe4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	dd10      	ble.n	8009d2a <mg_ota_flash_end+0xce>
 8009d08:	4b0e      	ldr	r3, [pc, #56]	@ (8009d44 <mg_ota_flash_end+0xe8>)
 8009d0a:	f240 223e 	movw	r2, #574	@ 0x23e
 8009d0e:	490e      	ldr	r1, [pc, #56]	@ (8009d48 <mg_ota_flash_end+0xec>)
 8009d10:	2002      	movs	r0, #2
 8009d12:	f005 fd17 	bl	800f744 <mg_log_prefix>
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <mg_ota_flash_end+0xc4>
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d4c <mg_ota_flash_end+0xf0>)
 8009d1e:	e000      	b.n	8009d22 <mg_ota_flash_end+0xc6>
 8009d20:	4b0b      	ldr	r3, [pc, #44]	@ (8009d50 <mg_ota_flash_end+0xf4>)
 8009d22:	4619      	mov	r1, r3
 8009d24:	480c      	ldr	r0, [pc, #48]	@ (8009d58 <mg_ota_flash_end+0xfc>)
 8009d26:	f005 fd5d 	bl	800f7e4 <mg_log>
  return ok;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	24019d58 	.word	0x24019d58
 8009d38:	24019d54 	.word	0x24019d54
 8009d3c:	24019d5c 	.word	0x24019d5c
 8009d40:	2400025c 	.word	0x2400025c
 8009d44:	0803115c 	.word	0x0803115c
 8009d48:	0802d330 	.word	0x0802d330
 8009d4c:	0802d5b0 	.word	0x0802d5b0
 8009d50:	0802d5b4 	.word	0x0802d5b4
 8009d54:	0802d5bc 	.word	0x0802d5bc
 8009d58:	0802d5e4 	.word	0x0802d5e4

08009d5c <is_digit>:
#endif




static bool is_digit(int c) {
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d68:	dd04      	ble.n	8009d74 <is_digit+0x18>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b39      	cmp	r3, #57	@ 0x39
 8009d6e:	dc01      	bgt.n	8009d74 <is_digit+0x18>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <is_digit+0x1a>
 8009d74:	2300      	movs	r3, #0
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	b2db      	uxtb	r3, r3
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  int n = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	617a      	str	r2, [r7, #20]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	2265      	movs	r2, #101	@ 0x65
 8009da6:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	617a      	str	r2, [r7, #20]
 8009dae:	461a      	mov	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009dc0:	dd01      	ble.n	8009dc6 <addexp+0x3e>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e057      	b.n	8009e76 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	dc07      	bgt.n	8009ddc <addexp+0x54>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	617a      	str	r2, [r7, #20]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	2230      	movs	r2, #48	@ 0x30
 8009dda:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b63      	cmp	r3, #99	@ 0x63
 8009de0:	dd1c      	ble.n	8009e1c <addexp+0x94>
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4a27      	ldr	r2, [pc, #156]	@ (8009e84 <addexp+0xfc>)
 8009de6:	fb82 1203 	smull	r1, r2, r2, r3
 8009dea:	1152      	asrs	r2, r2, #5
 8009dec:	17db      	asrs	r3, r3, #31
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	1c59      	adds	r1, r3, #1
 8009df6:	6179      	str	r1, [r7, #20]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	440b      	add	r3, r1
 8009dfe:	3230      	adds	r2, #48	@ 0x30
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	4a1f      	ldr	r2, [pc, #124]	@ (8009e84 <addexp+0xfc>)
 8009e08:	fb82 1203 	smull	r1, r2, r2, r3
 8009e0c:	1151      	asrs	r1, r2, #5
 8009e0e:	17da      	asrs	r2, r3, #31
 8009e10:	1a8a      	subs	r2, r1, r2
 8009e12:	2164      	movs	r1, #100	@ 0x64
 8009e14:	fb01 f202 	mul.w	r2, r1, r2
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b09      	cmp	r3, #9
 8009e20:	dd1d      	ble.n	8009e5e <addexp+0xd6>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4a18      	ldr	r2, [pc, #96]	@ (8009e88 <addexp+0x100>)
 8009e26:	fb82 1203 	smull	r1, r2, r2, r3
 8009e2a:	1092      	asrs	r2, r2, #2
 8009e2c:	17db      	asrs	r3, r3, #31
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	1c59      	adds	r1, r3, #1
 8009e36:	6179      	str	r1, [r7, #20]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	440b      	add	r3, r1
 8009e3e:	3230      	adds	r2, #48	@ 0x30
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	701a      	strb	r2, [r3, #0]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	4b10      	ldr	r3, [pc, #64]	@ (8009e88 <addexp+0x100>)
 8009e48:	fb83 1302 	smull	r1, r3, r3, r2
 8009e4c:	1099      	asrs	r1, r3, #2
 8009e4e:	17d3      	asrs	r3, r2, #31
 8009e50:	1ac9      	subs	r1, r1, r3
 8009e52:	460b      	mov	r3, r1
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	1c59      	adds	r1, r3, #1
 8009e66:	6179      	str	r1, [r7, #20]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	440b      	add	r3, r1
 8009e6e:	3230      	adds	r2, #48	@ 0x30
 8009e70:	b2d2      	uxtb	r2, r2
 8009e72:	701a      	strb	r2, [r3, #0]
  return n;
 8009e74:	697b      	ldr	r3, [r7, #20]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	51eb851f 	.word	0x51eb851f
 8009e88:	66666667 	.word	0x66666667

08009e8c <xisinf>:

static int xisinf(double x) {
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8009e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8009e9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ea2:	f04f 0200 	mov.w	r2, #0
 8009ea6:	f04f 0300 	mov.w	r3, #0
 8009eaa:	000a      	movs	r2, r1
 8009eac:	2300      	movs	r3, #0
 8009eae:	4613      	mov	r3, r2
 8009eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009eb4:	4a08      	ldr	r2, [pc, #32]	@ (8009ed8 <xisinf+0x4c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d106      	bne.n	8009ec8 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8009eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ebe:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <xisinf+0x3c>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <xisinf+0x3e>
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	7ff00000 	.word	0x7ff00000

08009edc <xisnan>:

static int xisnan(double x) {
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8009ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eea:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8009eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ef2:	f04f 0200 	mov.w	r2, #0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	000a      	movs	r2, r1
 8009efc:	2300      	movs	r3, #0
 8009efe:	4613      	mov	r3, r2
 8009f00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8009f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf14      	ite	ne
 8009f0e:	2301      	movne	r3, #1
 8009f10:	2300      	moveq	r3, #0
 8009f12:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8009f14:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8009f16:	4a06      	ldr	r2, [pc, #24]	@ (8009f30 <xisnan+0x54>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	bf8c      	ite	hi
 8009f1c:	2301      	movhi	r3, #1
 8009f1e:	2300      	movls	r3, #0
 8009f20:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	7ff00000 	.word	0x7ff00000
 8009f34:	00000000 	.word	0x00000000

08009f38 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b0a0      	sub	sp, #128	@ 0x80
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	6178      	str	r0, [r7, #20]
 8009f40:	6139      	str	r1, [r7, #16]
 8009f42:	ed87 0b02 	vstr	d0, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f4e:	2300      	movs	r3, #0
 8009f50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f52:	2300      	movs	r3, #0
 8009f54:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8009f56:	ed97 7b02 	vldr	d7, [r7, #8]
 8009f5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f62:	d107      	bne.n	8009f74 <mg_dtoa+0x3c>
 8009f64:	4bb8      	ldr	r3, [pc, #736]	@ (800a248 <mg_dtoa+0x310>)
 8009f66:	4ab9      	ldr	r2, [pc, #740]	@ (800a24c <mg_dtoa+0x314>)
 8009f68:	6939      	ldr	r1, [r7, #16]
 8009f6a:	6978      	ldr	r0, [r7, #20]
 8009f6c:	f00a f826 	bl	8013fbc <mg_snprintf>
 8009f70:	4603      	mov	r3, r0
 8009f72:	e28d      	b.n	800a490 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8009f74:	ed97 0b02 	vldr	d0, [r7, #8]
 8009f78:	f7ff ff88 	bl	8009e8c <xisinf>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d010      	beq.n	8009fa4 <mg_dtoa+0x6c>
 8009f82:	ed97 7b02 	vldr	d7, [r7, #8]
 8009f86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8e:	dd01      	ble.n	8009f94 <mg_dtoa+0x5c>
 8009f90:	4baf      	ldr	r3, [pc, #700]	@ (800a250 <mg_dtoa+0x318>)
 8009f92:	e000      	b.n	8009f96 <mg_dtoa+0x5e>
 8009f94:	4baf      	ldr	r3, [pc, #700]	@ (800a254 <mg_dtoa+0x31c>)
 8009f96:	4aad      	ldr	r2, [pc, #692]	@ (800a24c <mg_dtoa+0x314>)
 8009f98:	6939      	ldr	r1, [r7, #16]
 8009f9a:	6978      	ldr	r0, [r7, #20]
 8009f9c:	f00a f80e 	bl	8013fbc <mg_snprintf>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	e275      	b.n	800a490 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8009fa4:	ed97 0b02 	vldr	d0, [r7, #8]
 8009fa8:	f7ff ff98 	bl	8009edc <xisnan>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d007      	beq.n	8009fc2 <mg_dtoa+0x8a>
 8009fb2:	4ba9      	ldr	r3, [pc, #676]	@ (800a258 <mg_dtoa+0x320>)
 8009fb4:	4aa5      	ldr	r2, [pc, #660]	@ (800a24c <mg_dtoa+0x314>)
 8009fb6:	6939      	ldr	r1, [r7, #16]
 8009fb8:	6978      	ldr	r0, [r7, #20]
 8009fba:	f009 ffff 	bl	8013fbc <mg_snprintf>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	e266      	b.n	800a490 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8009fc2:	ed97 7b02 	vldr	d7, [r7, #8]
 8009fc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fce:	d50d      	bpl.n	8009fec <mg_dtoa+0xb4>
 8009fd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8009fd4:	eeb1 7b47 	vneg.f64	d7, d7
 8009fd8:	ed87 7b02 	vstr	d7, [r7, #8]
 8009fdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	673a      	str	r2, [r7, #112]	@ 0x70
 8009fe2:	3378      	adds	r3, #120	@ 0x78
 8009fe4:	443b      	add	r3, r7
 8009fe6:	222d      	movs	r2, #45	@ 0x2d
 8009fe8:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 8009fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ff0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d024      	beq.n	800a044 <mg_dtoa+0x10c>
    mul = 1.0;
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	4b97      	ldr	r3, [pc, #604]	@ (800a25c <mg_dtoa+0x324>)
 800a000:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800a004:	e007      	b.n	800a016 <mg_dtoa+0xde>
 800a006:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800a00a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a00e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a012:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800a016:	ed97 7b02 	vldr	d7, [r7, #8]
 800a01a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a01e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a026:	db12      	blt.n	800a04e <mg_dtoa+0x116>
 800a028:	ed97 5b02 	vldr	d5, [r7, #8]
 800a02c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800a030:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a034:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a038:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a040:	dae1      	bge.n	800a006 <mg_dtoa+0xce>
 800a042:	e00d      	b.n	800a060 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 800a044:	a37e      	add	r3, pc, #504	@ (adr r3, 800a240 <mg_dtoa+0x308>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 800a04e:	e007      	b.n	800a060 <mg_dtoa+0x128>
 800a050:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800a054:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800a058:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a05c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800a060:	ed97 7b02 	vldr	d7, [r7, #8]
 800a064:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a068:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a070:	d80c      	bhi.n	800a08c <mg_dtoa+0x154>
 800a072:	ed97 5b02 	vldr	d5, [r7, #8]
 800a076:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800a07a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a07e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a082:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08a:	d9e1      	bls.n	800a050 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a090:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800a094:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800a098:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a09c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800a0a0:	e00a      	b.n	800a0b8 <mg_dtoa+0x180>
 800a0a2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800a0a6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800a0aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0ae:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800a0b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a0b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	dbf0      	blt.n	800a0a2 <mg_dtoa+0x16a>

  d += t;
 800a0c0:	ed97 6b02 	vldr	d6, [r7, #8]
 800a0c4:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800a0c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a0cc:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	4b61      	ldr	r3, [pc, #388]	@ (800a25c <mg_dtoa+0x324>)
 800a0d6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 800a0da:	e00a      	b.n	800a0f2 <mg_dtoa+0x1ba>
 800a0dc:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800a0e0:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a0e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0e8:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800a0ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f2:	ed97 7b02 	vldr	d7, [r7, #8]
 800a0f6:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a0fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a102:	db0c      	blt.n	800a11e <mg_dtoa+0x1e6>
 800a104:	ed97 5b02 	vldr	d5, [r7, #8]
 800a108:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800a10c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a110:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a114:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	dade      	bge.n	800a0dc <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 800a11e:	e00a      	b.n	800a136 <mg_dtoa+0x1fe>
 800a120:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800a124:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800a128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a12c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800a130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a132:	3b01      	subs	r3, #1
 800a134:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a136:	ed97 7b02 	vldr	d7, [r7, #8]
 800a13a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a13e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a146:	d50c      	bpl.n	800a162 <mg_dtoa+0x22a>
 800a148:	ed97 5b02 	vldr	d5, [r7, #8]
 800a14c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800a150:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a154:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a158:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a160:	d4de      	bmi.n	800a120 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d031      	beq.n	800a1cc <mg_dtoa+0x294>
 800a168:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	db2d      	blt.n	800a1cc <mg_dtoa+0x294>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b01      	cmp	r3, #1
 800a174:	dd2a      	ble.n	800a1cc <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800a176:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800a17a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800a17e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	f107 0018 	add.w	r0, r7, #24
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	eeb0 0b45 	vmov.f64	d0, d5
 800a18e:	2128      	movs	r1, #40	@ 0x28
 800a190:	f7ff fed2 	bl	8009f38 <mg_dtoa>
 800a194:	4603      	mov	r3, r0
 800a196:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 800a198:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a19c:	4413      	add	r3, r2
 800a19e:	f107 0218 	add.w	r2, r7, #24
 800a1a2:	4413      	add	r3, r2
 800a1a4:	222b      	movs	r2, #43	@ 0x2b
 800a1a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff fded 	bl	8009d88 <addexp>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b2:	4413      	add	r3, r2
 800a1b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800a1b6:	f107 0318 	add.w	r3, r7, #24
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1be:	4a28      	ldr	r2, [pc, #160]	@ (800a260 <mg_dtoa+0x328>)
 800a1c0:	6939      	ldr	r1, [r7, #16]
 800a1c2:	6978      	ldr	r0, [r7, #20]
 800a1c4:	f009 fefa 	bl	8013fbc <mg_snprintf>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	e161      	b.n	800a490 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d048      	beq.n	800a264 <mg_dtoa+0x32c>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	425b      	negs	r3, r3
 800a1d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	dc43      	bgt.n	800a264 <mg_dtoa+0x32c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	dd40      	ble.n	800a264 <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800a1e2:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800a1e6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800a1ea:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800a1ee:	78fb      	ldrb	r3, [r7, #3]
 800a1f0:	f107 0018 	add.w	r0, r7, #24
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	eeb0 0b45 	vmov.f64	d0, d5
 800a1fa:	2128      	movs	r1, #40	@ 0x28
 800a1fc:	f7ff fe9c 	bl	8009f38 <mg_dtoa>
 800a200:	4603      	mov	r3, r0
 800a202:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 800a204:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a208:	4413      	add	r3, r2
 800a20a:	f107 0218 	add.w	r2, r7, #24
 800a20e:	18d0      	adds	r0, r2, r3
 800a210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a212:	425b      	negs	r3, r3
 800a214:	222d      	movs	r2, #45	@ 0x2d
 800a216:	4619      	mov	r1, r3
 800a218:	f7ff fdb6 	bl	8009d88 <addexp>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a220:	4413      	add	r3, r2
 800a222:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800a224:	f107 0318 	add.w	r3, r7, #24
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22c:	4a0c      	ldr	r2, [pc, #48]	@ (800a260 <mg_dtoa+0x328>)
 800a22e:	6939      	ldr	r1, [r7, #16]
 800a230:	6978      	ldr	r0, [r7, #20]
 800a232:	f009 fec3 	bl	8013fbc <mg_snprintf>
 800a236:	4603      	mov	r3, r0
 800a238:	e12a      	b.n	800a490 <mg_dtoa+0x558>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
 800a240:	9999999a 	.word	0x9999999a
 800a244:	3fb99999 	.word	0x3fb99999
 800a248:	0802d5f8 	.word	0x0802d5f8
 800a24c:	0802d5fc 	.word	0x0802d5fc
 800a250:	0802d600 	.word	0x0802d600
 800a254:	0802d604 	.word	0x0802d604
 800a258:	0802d60c 	.word	0x0802d60c
 800a25c:	3ff00000 	.word	0x3ff00000
 800a260:	0802d610 	.word	0x0802d610
  } else {
    int targ_width = width;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800a268:	2300      	movs	r3, #0
 800a26a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a26c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a270:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800a274:	e037      	b.n	800a2e6 <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 800a276:	ed97 5b02 	vldr	d5, [r7, #8]
 800a27a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800a27e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a282:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a286:	ee17 3a90 	vmov	r3, s15
 800a28a:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 800a28c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	dc02      	bgt.n	800a298 <mg_dtoa+0x360>
 800a292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd0c      	ble.n	800a2b2 <mg_dtoa+0x37a>
 800a298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a29e:	1c59      	adds	r1, r3, #1
 800a2a0:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800a2a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a2a4:	440b      	add	r3, r1
 800a2a6:	3230      	adds	r2, #48	@ 0x30
 800a2a8:	b2d2      	uxtb	r2, r2
 800a2aa:	3378      	adds	r3, #120	@ 0x78
 800a2ac:	443b      	add	r3, r7
 800a2ae:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800a2b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800a2bc:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800a2c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a2c4:	ed97 6b02 	vldr	d6, [r7, #8]
 800a2c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a2cc:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800a2d0:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800a2d4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800a2d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a2dc:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800a2e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2e6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800a2ea:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a2ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f6:	db04      	blt.n	800a302 <mg_dtoa+0x3ca>
 800a2f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a2fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fc:	4413      	add	r3, r2
 800a2fe:	2b27      	cmp	r3, #39	@ 0x27
 800a300:	ddb9      	ble.n	800a276 <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 800a302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d118      	bne.n	800a33a <mg_dtoa+0x402>
 800a308:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a30a:	1c5a      	adds	r2, r3, #1
 800a30c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a30e:	3378      	adds	r3, #120	@ 0x78
 800a310:	443b      	add	r3, r7
 800a312:	2230      	movs	r2, #48	@ 0x30
 800a314:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 800a318:	e00f      	b.n	800a33a <mg_dtoa+0x402>
 800a31a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a320:	3378      	adds	r3, #120	@ 0x78
 800a322:	443b      	add	r3, r7
 800a324:	2230      	movs	r2, #48	@ 0x30
 800a326:	f803 2c60 	strb.w	r2, [r3, #-96]
 800a32a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800a32e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800a332:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a336:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800a33a:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800a33e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a342:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34a:	db04      	blt.n	800a356 <mg_dtoa+0x41e>
 800a34c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a34e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a350:	4413      	add	r3, r2
 800a352:	2b27      	cmp	r3, #39	@ 0x27
 800a354:	dde1      	ble.n	800a31a <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 800a356:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a35a:	4413      	add	r3, r2
 800a35c:	2b27      	cmp	r3, #39	@ 0x27
 800a35e:	dc09      	bgt.n	800a374 <mg_dtoa+0x43c>
 800a360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	673a      	str	r2, [r7, #112]	@ 0x70
 800a366:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a368:	4413      	add	r3, r2
 800a36a:	3378      	adds	r3, #120	@ 0x78
 800a36c:	443b      	add	r3, r7
 800a36e:	222e      	movs	r2, #46	@ 0x2e
 800a370:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	f083 0301 	eor.w	r3, r3, #1
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d006      	beq.n	800a38e <mg_dtoa+0x456>
 800a380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a382:	2b00      	cmp	r3, #0
 800a384:	dd03      	ble.n	800a38e <mg_dtoa+0x456>
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a38a:	4413      	add	r3, r2
 800a38c:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 800a38e:	2300      	movs	r3, #0
 800a390:	677b      	str	r3, [r7, #116]	@ 0x74
 800a392:	a342      	add	r3, pc, #264	@ (adr r3, 800a49c <mg_dtoa+0x564>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800a39c:	e031      	b.n	800a402 <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 800a39e:	ed97 5b02 	vldr	d5, [r7, #8]
 800a3a2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800a3a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a3aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a3ae:	ee17 3a90 	vmov	r3, s15
 800a3b2:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 800a3b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ba:	1c59      	adds	r1, r3, #1
 800a3bc:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800a3be:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a3c0:	440b      	add	r3, r1
 800a3c2:	3230      	adds	r2, #48	@ 0x30
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	3378      	adds	r3, #120	@ 0x78
 800a3c8:	443b      	add	r3, r7
 800a3ca:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800a3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800a3d8:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800a3dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a3e0:	ed97 6b02 	vldr	d6, [r7, #8]
 800a3e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a3e8:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800a3ec:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800a3f0:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800a3f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a3f8:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 800a3fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3fe:	3301      	adds	r3, #1
 800a400:	677b      	str	r3, [r7, #116]	@ 0x74
 800a402:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a406:	4413      	add	r3, r2
 800a408:	2b27      	cmp	r3, #39	@ 0x27
 800a40a:	dc07      	bgt.n	800a41c <mg_dtoa+0x4e4>
 800a40c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a40e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a410:	429a      	cmp	r2, r3
 800a412:	dbc4      	blt.n	800a39e <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 800a414:	e002      	b.n	800a41c <mg_dtoa+0x4e4>
 800a416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a418:	3b01      	subs	r3, #1
 800a41a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00c      	beq.n	800a43c <mg_dtoa+0x504>
 800a422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a424:	2b00      	cmp	r3, #0
 800a426:	dd09      	ble.n	800a43c <mg_dtoa+0x504>
 800a428:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a42c:	4413      	add	r3, r2
 800a42e:	3b01      	subs	r3, #1
 800a430:	3378      	adds	r3, #120	@ 0x78
 800a432:	443b      	add	r3, r7
 800a434:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 800a438:	2b30      	cmp	r3, #48	@ 0x30
 800a43a:	d0ec      	beq.n	800a416 <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <mg_dtoa+0x52a>
 800a442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a444:	2b00      	cmp	r3, #0
 800a446:	dd0c      	ble.n	800a462 <mg_dtoa+0x52a>
 800a448:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a44a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44c:	4413      	add	r3, r2
 800a44e:	3b01      	subs	r3, #1
 800a450:	3378      	adds	r3, #120	@ 0x78
 800a452:	443b      	add	r3, r7
 800a454:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 800a458:	2b2e      	cmp	r3, #46	@ 0x2e
 800a45a:	d102      	bne.n	800a462 <mg_dtoa+0x52a>
 800a45c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a45e:	3b01      	subs	r3, #1
 800a460:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 800a462:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a466:	4413      	add	r3, r2
 800a468:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800a46a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a46c:	2b27      	cmp	r3, #39	@ 0x27
 800a46e:	dd01      	ble.n	800a474 <mg_dtoa+0x53c>
 800a470:	2327      	movs	r3, #39	@ 0x27
 800a472:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 800a474:	f107 0218 	add.w	r2, r7, #24
 800a478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a47a:	4413      	add	r3, r2
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 800a480:	f107 0318 	add.w	r3, r7, #24
 800a484:	4a04      	ldr	r2, [pc, #16]	@ (800a498 <mg_dtoa+0x560>)
 800a486:	6939      	ldr	r1, [r7, #16]
 800a488:	6978      	ldr	r0, [r7, #20]
 800a48a:	f009 fd97 	bl	8013fbc <mg_snprintf>
 800a48e:	4603      	mov	r3, r0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3778      	adds	r7, #120	@ 0x78
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	0802d5fc 	.word	0x0802d5fc
 800a49c:	9999999a 	.word	0x9999999a
 800a4a0:	3fb99999 	.word	0x3fb99999

0800a4a4 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 800a4a4:	b5b0      	push	{r4, r5, r7, lr}
 800a4a6:	b08c      	sub	sp, #48	@ 0x30
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 800a4b0:	4b53      	ldr	r3, [pc, #332]	@ (800a600 <mg_lld+0x15c>)
 800a4b2:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 800a4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 800a4c0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d012      	beq.n	800a4ee <mg_lld+0x4a>
 800a4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da0e      	bge.n	800a4ee <mg_lld+0x4a>
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	222d      	movs	r2, #45	@ 0x2d
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4254      	negs	r4, r2
 800a4e6:	eb61 0503 	sbc.w	r5, r1, r3
 800a4ea:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 800a4ee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d021      	beq.n	800a53a <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	623b      	str	r3, [r7, #32]
 800a4fa:	e019      	b.n	800a530 <mg_lld+0x8c>
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	f003 030f 	and.w	r3, r3, #15
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	441a      	add	r2, r3
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	1c59      	adds	r1, r3, #1
 800a50a:	6239      	str	r1, [r7, #32]
 800a50c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a50e:	440b      	add	r3, r1
 800a510:	68f9      	ldr	r1, [r7, #12]
 800a512:	440b      	add	r3, r1
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	701a      	strb	r2, [r3, #0]
 800a518:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	0902      	lsrs	r2, r0, #4
 800a526:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800a52a:	090b      	lsrs	r3, r1, #4
 800a52c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a534:	4313      	orrs	r3, r2
 800a536:	d1e1      	bne.n	800a4fc <mg_lld+0x58>
 800a538:	e025      	b.n	800a586 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 800a53a:	2300      	movs	r3, #0
 800a53c:	623b      	str	r3, [r7, #32]
 800a53e:	e01e      	b.n	800a57e <mg_lld+0xda>
 800a540:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a544:	f04f 020a 	mov.w	r2, #10
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	f7f6 f954 	bl	80007f8 <__aeabi_uldivmod>
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	441a      	add	r2, r3
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	1c59      	adds	r1, r3, #1
 800a558:	6239      	str	r1, [r7, #32]
 800a55a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a55c:	440b      	add	r3, r1
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	440b      	add	r3, r1
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	701a      	strb	r2, [r3, #0]
 800a566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a56a:	f04f 020a 	mov.w	r2, #10
 800a56e:	f04f 0300 	mov.w	r3, #0
 800a572:	f7f6 f941 	bl	80007f8 <__aeabi_uldivmod>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800a57e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a582:	4313      	orrs	r3, r2
 800a584:	d1dc      	bne.n	800a540 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
 800a58a:	e022      	b.n	800a5d2 <mg_lld+0x12e>
    char t = buf[s + i];
 800a58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	4413      	add	r3, r2
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4413      	add	r3, r2
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800a59a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	441a      	add	r2, r3
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	441a      	add	r2, r3
 800a5aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	440b      	add	r3, r1
 800a5b0:	68f9      	ldr	r1, [r7, #12]
 800a5b2:	440b      	add	r3, r1
 800a5b4:	7812      	ldrb	r2, [r2, #0]
 800a5b6:	701a      	strb	r2, [r3, #0]
 800a5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	441a      	add	r2, r3
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	7dfa      	ldrb	r2, [r7, #23]
 800a5ca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	085b      	lsrs	r3, r3, #1
 800a5d6:	69fa      	ldr	r2, [r7, #28]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d3d7      	bcc.n	800a58c <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 800a5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	d106      	bne.n	800a5f2 <mg_lld+0x14e>
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	623a      	str	r2, [r7, #32]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	2230      	movs	r2, #48	@ 0x30
 800a5f0:	701a      	strb	r2, [r3, #0]
  return n + s;
 800a5f2:	6a3a      	ldr	r2, [r7, #32]
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f6:	4413      	add	r3, r2
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3730      	adds	r7, #48	@ 0x30
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a600:	0802d618 	.word	0x0802d618

0800a604 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 800a616:	e009      	b.n	800a62c <scpy+0x28>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	617a      	str	r2, [r7, #20]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4413      	add	r3, r2
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d205      	bcs.n	800a640 <scpy+0x3c>
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1eb      	bne.n	800a618 <scpy+0x14>
  return i;
 800a640:	697b      	ldr	r3, [r7, #20]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800a64a:	b40c      	push	{r2, r3}
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800a65a:	f107 031c 	add.w	r3, r7, #28
 800a65e:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f809 	bl	800a680 <mg_vxprintf>
 800a66e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800a670:	68fb      	ldr	r3, [r7, #12]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a67c:	b002      	add	sp, #8
 800a67e:	4770      	bx	lr

0800a680 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 800a680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a684:	b0a6      	sub	sp, #152	@ 0x98
 800a686:	af02      	add	r7, sp, #8
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a696:	2300      	movs	r3, #0
 800a698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 800a69c:	e383      	b.n	800ada6 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6a4:	4413      	add	r3, r2
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b25      	cmp	r3, #37	@ 0x25
 800a6aa:	f040 8369 	bne.w	800ad80 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a6be:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a6cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6dc:	4413      	add	r3, r2
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800a6e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a6e8:	2b23      	cmp	r3, #35	@ 0x23
 800a6ea:	d10e      	bne.n	800a70a <mg_vxprintf+0x8a>
 800a6ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a6f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a702:	4413      	add	r3, r2
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 800a70a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a70e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a710:	d110      	bne.n	800a734 <mg_vxprintf+0xb4>
 800a712:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a716:	3301      	adds	r3, #1
 800a718:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a71c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a720:	3301      	adds	r3, #1
 800a722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a72c:	4413      	add	r3, r2
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 800a734:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a738:	2b30      	cmp	r3, #48	@ 0x30
 800a73a:	d127      	bne.n	800a78c <mg_vxprintf+0x10c>
 800a73c:	2330      	movs	r3, #48	@ 0x30
 800a73e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a746:	3301      	adds	r3, #1
 800a748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a752:	4413      	add	r3, r2
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 800a75a:	e017      	b.n	800a78c <mg_vxprintf+0x10c>
 800a75c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	677b      	str	r3, [r7, #116]	@ 0x74
 800a768:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800a76c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a76e:	4413      	add	r3, r2
 800a770:	3b30      	subs	r3, #48	@ 0x30
 800a772:	677b      	str	r3, [r7, #116]	@ 0x74
 800a774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a778:	3301      	adds	r3, #1
 800a77a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a784:	4413      	add	r3, r2
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800a78c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a790:	4618      	mov	r0, r3
 800a792:	f7ff fae3 	bl	8009d5c <is_digit>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1df      	bne.n	800a75c <mg_vxprintf+0xdc>
      if (c == '.') {
 800a79c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a7a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7a2:	d153      	bne.n	800a84c <mg_vxprintf+0x1cc>
        c = fmt[++i];
 800a7a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7b4:	4413      	add	r3, r2
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 800a7bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a7c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7c2:	d113      	bne.n	800a7ec <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	6011      	str	r1, [r2, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 800a7d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7e2:	4413      	add	r3, r2
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800a7ea:	e02f      	b.n	800a84c <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 800a7f0:	e017      	b.n	800a822 <mg_vxprintf+0x1a2>
 800a7f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7fe:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800a802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a804:	4413      	add	r3, r2
 800a806:	3b30      	subs	r3, #48	@ 0x30
 800a808:	673b      	str	r3, [r7, #112]	@ 0x70
 800a80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a80e:	3301      	adds	r3, #1
 800a810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a81a:	4413      	add	r3, r2
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800a822:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fa98 	bl	8009d5c <is_digit>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1df      	bne.n	800a7f2 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 800a832:	e00b      	b.n	800a84c <mg_vxprintf+0x1cc>
 800a834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a838:	3301      	adds	r3, #1
 800a83a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a844:	4413      	add	r3, r2
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800a84c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a850:	2b68      	cmp	r3, #104	@ 0x68
 800a852:	d0ef      	beq.n	800a834 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 800a854:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a858:	2b6c      	cmp	r3, #108	@ 0x6c
 800a85a:	d121      	bne.n	800a8a0 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 800a85c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a85e:	3301      	adds	r3, #1
 800a860:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a866:	3301      	adds	r3, #1
 800a868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a872:	4413      	add	r3, r2
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 800a87a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a87e:	2b6c      	cmp	r3, #108	@ 0x6c
 800a880:	d10e      	bne.n	800a8a0 <mg_vxprintf+0x220>
 800a882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a884:	3301      	adds	r3, #1
 800a886:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88c:	3301      	adds	r3, #1
 800a88e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a898:	4413      	add	r3, r2
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 800a8a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8a4:	2b70      	cmp	r3, #112	@ 0x70
 800a8a6:	d103      	bne.n	800a8b0 <mg_vxprintf+0x230>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 800a8b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8b4:	2b64      	cmp	r3, #100	@ 0x64
 800a8b6:	d018      	beq.n	800a8ea <mg_vxprintf+0x26a>
 800a8b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8bc:	2b75      	cmp	r3, #117	@ 0x75
 800a8be:	d014      	beq.n	800a8ea <mg_vxprintf+0x26a>
 800a8c0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8c4:	2b78      	cmp	r3, #120	@ 0x78
 800a8c6:	d010      	beq.n	800a8ea <mg_vxprintf+0x26a>
 800a8c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8cc:	2b58      	cmp	r3, #88	@ 0x58
 800a8ce:	d00c      	beq.n	800a8ea <mg_vxprintf+0x26a>
 800a8d0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8d4:	2b70      	cmp	r3, #112	@ 0x70
 800a8d6:	d008      	beq.n	800a8ea <mg_vxprintf+0x26a>
 800a8d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8dc:	2b67      	cmp	r3, #103	@ 0x67
 800a8de:	d004      	beq.n	800a8ea <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 800a8e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8e4:	2b66      	cmp	r3, #102	@ 0x66
 800a8e6:	f040 816c 	bne.w	800abc2 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 800a8ea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8ee:	2b64      	cmp	r3, #100	@ 0x64
 800a8f0:	bf0c      	ite	eq
 800a8f2:	2301      	moveq	r3, #1
 800a8f4:	2300      	movne	r3, #0
 800a8f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a8fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a8fe:	2b78      	cmp	r3, #120	@ 0x78
 800a900:	d007      	beq.n	800a912 <mg_vxprintf+0x292>
 800a902:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a906:	2b58      	cmp	r3, #88	@ 0x58
 800a908:	d003      	beq.n	800a912 <mg_vxprintf+0x292>
 800a90a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a90e:	2b70      	cmp	r3, #112	@ 0x70
 800a910:	d101      	bne.n	800a916 <mg_vxprintf+0x296>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <mg_vxprintf+0x298>
 800a916:	2300      	movs	r3, #0
 800a918:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800a91c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a920:	f003 0301 	and.w	r3, r3, #1
 800a924:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 800a928:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <mg_vxprintf+0x2b2>
 800a92e:	2302      	movs	r3, #2
 800a930:	e000      	b.n	800a934 <mg_vxprintf+0x2b4>
 800a932:	2300      	movs	r3, #0
 800a934:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 800a936:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a93a:	2b67      	cmp	r3, #103	@ 0x67
 800a93c:	d003      	beq.n	800a946 <mg_vxprintf+0x2c6>
 800a93e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a942:	2b66      	cmp	r3, #102	@ 0x66
 800a944:	d124      	bne.n	800a990 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3307      	adds	r3, #7
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	f103 0108 	add.w	r1, r3, #8
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	6011      	str	r1, [r2, #0]
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 800a960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d101      	bne.n	800a96c <mg_vxprintf+0x2ec>
 800a968:	2306      	movs	r3, #6
 800a96a:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 800a96c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a96e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800a972:	2b67      	cmp	r3, #103	@ 0x67
 800a974:	bf0c      	ite	eq
 800a976:	2301      	moveq	r3, #1
 800a978:	2300      	movne	r3, #0
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f107 0014 	add.w	r0, r7, #20
 800a980:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 800a984:	2128      	movs	r1, #40	@ 0x28
 800a986:	f7ff fad7 	bl	8009f38 <mg_dtoa>
 800a98a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 800a98e:	e069      	b.n	800aa64 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 800a990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a992:	2b02      	cmp	r3, #2
 800a994:	d11c      	bne.n	800a9d0 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3307      	adds	r3, #7
 800a99c:	f023 0307 	bic.w	r3, r3, #7
 800a9a0:	f103 0108 	add.w	r1, r3, #8
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	6011      	str	r1, [r2, #0]
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 800a9b0:	f107 0114 	add.w	r1, r7, #20
 800a9b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	f7ff fd6d 	bl	800a4a4 <mg_lld>
 800a9ca:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800a9ce:	e049      	b.n	800aa64 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 800a9d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d123      	bne.n	800aa1e <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	6011      	str	r1, [r2, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 800a9e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d004      	beq.n	800a9f6 <mg_vxprintf+0x376>
 800a9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ee:	17da      	asrs	r2, r3, #31
 800a9f0:	461c      	mov	r4, r3
 800a9f2:	4615      	mov	r5, r2
 800a9f4:	e003      	b.n	800a9fe <mg_vxprintf+0x37e>
 800a9f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	4615      	mov	r5, r2
 800a9fe:	f107 0114 	add.w	r1, r7, #20
 800aa02:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	4622      	mov	r2, r4
 800aa10:	462b      	mov	r3, r5
 800aa12:	4608      	mov	r0, r1
 800aa14:	f7ff fd46 	bl	800a4a4 <mg_lld>
 800aa18:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800aa1c:	e022      	b.n	800aa64 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	1d19      	adds	r1, r3, #4
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	6011      	str	r1, [r2, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 800aa2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <mg_vxprintf+0x3be>
 800aa34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa36:	17da      	asrs	r2, r3, #31
 800aa38:	4698      	mov	r8, r3
 800aa3a:	4691      	mov	r9, r2
 800aa3c:	e003      	b.n	800aa46 <mg_vxprintf+0x3c6>
 800aa3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa40:	2200      	movs	r2, #0
 800aa42:	4698      	mov	r8, r3
 800aa44:	4691      	mov	r9, r2
 800aa46:	f107 0114 	add.w	r1, r7, #20
 800aa4a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	4642      	mov	r2, r8
 800aa58:	464b      	mov	r3, r9
 800aa5a:	4608      	mov	r0, r1
 800aa5c:	f7ff fd22 	bl	800a4a4 <mg_lld>
 800aa60:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 800aa64:	2300      	movs	r3, #0
 800aa66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa6a:	e007      	b.n	800aa7c <mg_vxprintf+0x3fc>
 800aa6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa76:	3301      	adds	r3, #1
 800aa78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800aa80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d202      	bcs.n	800aa8c <mg_vxprintf+0x40c>
 800aa86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1ef      	bne.n	800aa6c <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa92:	e011      	b.n	800aab8 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 800aa94:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800aa98:	2301      	movs	r3, #1
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff fdb1 	bl	800a604 <scpy>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 800aaae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aab2:	3301      	adds	r3, #1
 800aab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aab8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aabc:	2b20      	cmp	r3, #32
 800aabe:	d110      	bne.n	800aae2 <mg_vxprintf+0x462>
 800aac0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10c      	bne.n	800aae2 <mg_vxprintf+0x462>
 800aac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aacc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aace:	429a      	cmp	r2, r3
 800aad0:	d207      	bcs.n	800aae2 <mg_vxprintf+0x462>
 800aad2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800aad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aada:	4413      	add	r3, r2
 800aadc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800aade:	429a      	cmp	r2, r3
 800aae0:	d8d8      	bhi.n	800aa94 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800aae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aae4:	4ab7      	ldr	r2, [pc, #732]	@ (800adc4 <mg_vxprintf+0x744>)
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fd8b 	bl	800a604 <scpy>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800aafa:	2300      	movs	r3, #0
 800aafc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab00:	e011      	b.n	800ab26 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 800ab02:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800ab06:	2301      	movs	r3, #1
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff fd7a 	bl	800a604 <scpy>
 800ab10:	4602      	mov	r2, r0
 800ab12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ab16:	4413      	add	r3, r2
 800ab18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800ab1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ab20:	3301      	adds	r3, #1
 800ab22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ab2a:	2b30      	cmp	r3, #48	@ 0x30
 800ab2c:	d10c      	bne.n	800ab48 <mg_vxprintf+0x4c8>
 800ab2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d207      	bcs.n	800ab48 <mg_vxprintf+0x4c8>
 800ab38:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ab40:	4413      	add	r3, r2
 800ab42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d8dc      	bhi.n	800ab02 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 800ab48:	f107 0214 	add.w	r2, r7, #20
 800ab4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fd56 	bl	800a604 <scpy>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ab5e:	4413      	add	r3, r2
 800ab60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800ab64:	2300      	movs	r3, #0
 800ab66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab6a:	e011      	b.n	800ab90 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 800ab6c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800ab70:	2301      	movs	r3, #1
 800ab72:	68b9      	ldr	r1, [r7, #8]
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff fd45 	bl	800a604 <scpy>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ab80:	4413      	add	r3, r2
 800ab82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800ab86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	f040 80ea 	bne.w	800ad6e <mg_vxprintf+0x6ee>
 800ab9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80e5 	beq.w	800ad6e <mg_vxprintf+0x6ee>
 800aba4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aba8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800abaa:	429a      	cmp	r2, r3
 800abac:	f080 80df 	bcs.w	800ad6e <mg_vxprintf+0x6ee>
 800abb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800abb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800abb8:	4413      	add	r3, r2
 800abba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d8d5      	bhi.n	800ab6c <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 800abc0:	e0d5      	b.n	800ad6e <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 800abc2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800abc6:	2b6d      	cmp	r3, #109	@ 0x6d
 800abc8:	d003      	beq.n	800abd2 <mg_vxprintf+0x552>
 800abca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800abce:	2b4d      	cmp	r3, #77	@ 0x4d
 800abd0:	d128      	bne.n	800ac24 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	1d19      	adds	r1, r3, #4
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	6011      	str	r1, [r2, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 800abe0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800abe4:	2b6d      	cmp	r3, #109	@ 0x6d
 800abe6:	d103      	bne.n	800abf0 <mg_vxprintf+0x570>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	2022      	movs	r0, #34	@ 0x22
 800abee:	4798      	blx	r3
        n += f(out, param, ap);
 800abf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	4798      	blx	r3
 800abfa:	4602      	mov	r2, r0
 800abfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac00:	4413      	add	r3, r2
 800ac02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 800ac06:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800ac0a:	2b6d      	cmp	r3, #109	@ 0x6d
 800ac0c:	f040 80b1 	bne.w	800ad72 <mg_vxprintf+0x6f2>
 800ac10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac14:	3302      	adds	r3, #2
 800ac16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	2022      	movs	r0, #34	@ 0x22
 800ac20:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800ac22:	e0a6      	b.n	800ad72 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 800ac24:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800ac28:	2b63      	cmp	r3, #99	@ 0x63
 800ac2a:	d112      	bne.n	800ac52 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	1d19      	adds	r1, r3, #4
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 800ac3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	4610      	mov	r0, r2
 800ac44:	4798      	blx	r3
        n++;
 800ac46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac50:	e090      	b.n	800ad74 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800ac52:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800ac56:	2b73      	cmp	r3, #115	@ 0x73
 800ac58:	d16b      	bne.n	800ad32 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	1d19      	adds	r1, r3, #4
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	6011      	str	r1, [r2, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 800ac68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d109      	bne.n	800ac84 <mg_vxprintf+0x604>
 800ac70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <mg_vxprintf+0x600>
 800ac76:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ac78:	f7f5 fbaa 	bl	80003d0 <strlen>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	e000      	b.n	800ac82 <mg_vxprintf+0x602>
 800ac80:	2300      	movs	r3, #0
 800ac82:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800ac84:	2300      	movs	r3, #0
 800ac86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac8a:	e011      	b.n	800acb0 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 800ac8c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800ac90:	2301      	movs	r3, #1
 800ac92:	68b9      	ldr	r1, [r7, #8]
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f7ff fcb5 	bl	800a604 <scpy>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aca0:	4413      	add	r3, r2
 800aca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800aca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acaa:	3301      	adds	r3, #1
 800acac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acb0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <mg_vxprintf+0x64e>
 800acb8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800acba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d206      	bcs.n	800acce <mg_vxprintf+0x64e>
 800acc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800acc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acc6:	4413      	add	r3, r2
 800acc8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800acca:	429a      	cmp	r2, r3
 800accc:	d8de      	bhi.n	800ac8c <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 800acce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acd0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff fc95 	bl	800a604 <scpy>
 800acda:	4602      	mov	r2, r0
 800acdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ace0:	4413      	add	r3, r2
 800ace2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800ace6:	2300      	movs	r3, #0
 800ace8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acec:	e011      	b.n	800ad12 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 800acee:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800acf2:	2301      	movs	r3, #1
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7ff fc84 	bl	800a604 <scpy>
 800acfc:	4602      	mov	r2, r0
 800acfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad02:	4413      	add	r3, r2
 800ad04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800ad08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad12:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d02c      	beq.n	800ad74 <mg_vxprintf+0x6f4>
 800ad1a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d228      	bcs.n	800ad74 <mg_vxprintf+0x6f4>
 800ad22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad28:	4413      	add	r3, r2
 800ad2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d8de      	bhi.n	800acee <mg_vxprintf+0x66e>
 800ad30:	e020      	b.n	800ad74 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800ad32:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800ad36:	2b25      	cmp	r3, #37	@ 0x25
 800ad38:	d109      	bne.n	800ad4e <mg_vxprintf+0x6ce>
        out('%', param);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	68b9      	ldr	r1, [r7, #8]
 800ad3e:	2025      	movs	r0, #37	@ 0x25
 800ad40:	4798      	blx	r3
        n++;
 800ad42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad46:	3301      	adds	r3, #1
 800ad48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad4c:	e012      	b.n	800ad74 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	68b9      	ldr	r1, [r7, #8]
 800ad52:	2025      	movs	r0, #37	@ 0x25
 800ad54:	4798      	blx	r3
        out(c, param);
 800ad56:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
        n += 2;
 800ad62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad66:	3302      	adds	r3, #2
 800ad68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad6c:	e002      	b.n	800ad74 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 800ad6e:	bf00      	nop
 800ad70:	e000      	b.n	800ad74 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800ad72:	bf00      	nop
      }
      i++;
 800ad74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad78:	3301      	adds	r3, #1
 800ad7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad7e:	e012      	b.n	800ada6 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad86:	4413      	add	r3, r2
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	68b9      	ldr	r1, [r7, #8]
 800ad8e:	4610      	mov	r0, r2
 800ad90:	4798      	blx	r3
 800ad92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad96:	3301      	adds	r3, #1
 800ad98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ada0:	3301      	adds	r3, #1
 800ada2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adac:	4413      	add	r3, r2
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f47f ac74 	bne.w	800a69e <mg_vxprintf+0x1e>
    }
  }
  return n;
 800adb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3790      	adds	r7, #144	@ 0x90
 800adbe:	46bd      	mov	sp, r7
 800adc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800adc4:	0802d62c 	.word	0x0802d62c

0800adc8 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800add4:	2108      	movs	r1, #8
 800add6:	2001      	movs	r0, #1
 800add8:	f01b fd18 	bl	802680c <calloc>
 800addc:	4603      	mov	r3, r0
 800adde:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d013      	beq.n	800ae0e <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	68b8      	ldr	r0, [r7, #8]
 800adee:	4798      	blx	r3
 800adf0:	4602      	mov	r2, r0
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <mg_fs_open+0x46>
      free(fd);
 800ae04:	6978      	ldr	r0, [r7, #20]
 800ae06:	f01b fd25 	bl	8026854 <free>
      fd = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 800ae0e:	697b      	ldr	r3, [r7, #20]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3718      	adds	r7, #24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
    free(fd);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f01b fd0d 	bl	8026854 <free>
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7f5 fabe 	bl	80003d0 <strlen>
 800ae54:	4602      	mov	r2, r0
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d219      	bcs.n	800ae90 <is_dir_prefix+0x4e>
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f01d fcb2 	bl	80287ca <strncmp>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d111      	bne.n	800ae90 <is_dir_prefix+0x4e>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00c      	beq.n	800ae8c <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	4413      	add	r3, r2
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae7c:	d006      	beq.n	800ae8c <is_dir_prefix+0x4a>
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae8a:	d101      	bne.n	800ae90 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e000      	b.n	800ae92 <is_dir_prefix+0x50>
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b088      	sub	sp, #32
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7f5 fa92 	bl	80003d0 <strlen>
 800aeac:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f019 f9fa 	bl	80242ac <mg_unpack>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <packed_stat+0x28>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e017      	b.n	800aef2 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800aec2:	2300      	movs	r3, #0
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	e00c      	b.n	800aee2 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	69b9      	ldr	r1, [r7, #24]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff ffb8 	bl	800ae42 <is_dir_prefix>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <packed_stat+0x42>
 800aed8:	2304      	movs	r3, #4
 800aeda:	e00a      	b.n	800aef2 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	3301      	adds	r3, #1
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	69f8      	ldr	r0, [r7, #28]
 800aee4:	f019 f9ce 	bl	8024284 <mg_unlist>
 800aee8:	6178      	str	r0, [r7, #20]
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1eb      	bne.n	800aec8 <packed_stat+0x2e>
  }
  return 0;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b0be      	sub	sp, #248	@ 0xf8
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f7f5 fa61 	bl	80003d0 <strlen>
 800af0e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 800af12:	2300      	movs	r3, #0
 800af14:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800af16:	2300      	movs	r3, #0
 800af18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af1c:	e05a      	b.n	800afd4 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 800af1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af22:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f7ff ff8b 	bl	800ae42 <is_dir_prefix>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d048      	beq.n	800afc4 <packed_list+0xc8>
    begin = &path[n + 1];
 800af32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af36:	3301      	adds	r3, #1
 800af38:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af3c:	4413      	add	r3, r2
 800af3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 800af42:	212f      	movs	r1, #47	@ 0x2f
 800af44:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800af48:	f01d fc32 	bl	80287b0 <strchr>
 800af4c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 800af50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <packed_list+0x70>
 800af58:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800af5c:	f7f5 fa38 	bl	80003d0 <strlen>
 800af60:	4602      	mov	r2, r0
 800af62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af66:	4413      	add	r3, r2
 800af68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 800af6c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800af70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800af7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	4613      	mov	r3, r2
 800af82:	4a1c      	ldr	r2, [pc, #112]	@ (800aff4 <packed_list+0xf8>)
 800af84:	2164      	movs	r1, #100	@ 0x64
 800af86:	f009 f819 	bl	8013fbc <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 800af8a:	2300      	movs	r3, #0
 800af8c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 800af90:	f107 0214 	add.w	r2, r7, #20
 800af94:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800af98:	4611      	mov	r1, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f5 f9b8 	bl	8000310 <strcmp>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d010      	beq.n	800afc8 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800afa6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800afb2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800afb6:	f107 0314 	add.w	r3, r7, #20
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f01e fe16 	bl	8029bee <strcpy>
 800afc2:	e002      	b.n	800afca <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800afc4:	bf00      	nop
 800afc6:	e000      	b.n	800afca <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 800afc8:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800afca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800afce:	3301      	adds	r3, #1
 800afd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800afd4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800afd8:	f019 f954 	bl	8024284 <mg_unlist>
 800afdc:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800afe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d19a      	bne.n	800af1e <packed_list+0x22>
  }
}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	37f0      	adds	r7, #240	@ 0xf0
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	0802d610 	.word	0x0802d610

0800aff8 <packed_open>:

static void *packed_open(const char *path, int flags) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 800b006:	f107 030c 	add.w	r3, r7, #12
 800b00a:	2200      	movs	r2, #0
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f019 f94c 	bl	80242ac <mg_unpack>
 800b014:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <packed_open+0x2c>
 800b020:	2300      	movs	r3, #0
 800b022:	e016      	b.n	800b052 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <packed_open+0x3a>
 800b02e:	2300      	movs	r3, #0
 800b030:	e00f      	b.n	800b052 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 800b032:	210c      	movs	r1, #12
 800b034:	2001      	movs	r0, #1
 800b036:	f01b fbe9 	bl	802680c <calloc>
 800b03a:	4603      	mov	r3, r0
 800b03c:	613b      	str	r3, [r7, #16]
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <packed_open+0x58>
    fp->size = size;
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	605a      	str	r2, [r3, #4]
    fp->data = data;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 800b050:	693b      	ldr	r3, [r7, #16]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <packed_close>:

static void packed_close(void *fp) {
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <packed_close+0x14>
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f01b fbf3 	bl	8026854 <free>
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800b076:	b580      	push	{r7, lr}
 800b078:	b086      	sub	sp, #24
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	441a      	add	r2, r3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d905      	bls.n	800b0a2 <packed_read+0x2c>
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	68b8      	ldr	r0, [r7, #8]
 800b0b2:	f01e fda4 	bl	8029bfe <memcpy>
  fp->pos += len;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	441a      	add	r2, r3
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	609a      	str	r2, [r3, #8]
  return len;
 800b0c2:	687b      	ldr	r3, [r7, #4]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d903      	bls.n	800b10e <packed_seek+0x28>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	609a      	str	r2, [r3, #8]
  return fp->pos;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	689b      	ldr	r3, [r3, #8]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <packed_remove>:

static bool packed_remove(const char *path) {
 800b136:	b480      	push	{r7}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800b162:	b480      	push	{r7}
 800b164:	b085      	sub	sp, #20
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 800b188:	bf00      	nop
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <p_open>:
static void *p_open(const char *path, int flags) {
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <p_close>:
static void p_close(void *fp) {
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 800b1da:	b480      	push	{r7}
 800b1dc:	b085      	sub	sp, #20
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 800b1fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <p_rename>:
static bool p_rename(const char *from, const char *to) {
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <p_remove>:
static bool p_remove(const char *path) {
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <p_mkdir>:
static bool p_mkdir(const char *path) {
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800b252:	b480      	push	{r7}
 800b254:	b089      	sub	sp, #36	@ 0x24
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d02d      	beq.n	800b2c4 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	60fa      	str	r2, [r7, #12]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	61bb      	str	r3, [r7, #24]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	60ba      	str	r2, [r7, #8]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	2b40      	cmp	r3, #64	@ 0x40
 800b280:	dd05      	ble.n	800b28e <mg_ncasecmp+0x3c>
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	2b5a      	cmp	r3, #90	@ 0x5a
 800b286:	dc02      	bgt.n	800b28e <mg_ncasecmp+0x3c>
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	3320      	adds	r3, #32
 800b28c:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b40      	cmp	r3, #64	@ 0x40
 800b292:	dd05      	ble.n	800b2a0 <mg_ncasecmp+0x4e>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2b5a      	cmp	r3, #90	@ 0x5a
 800b298:	dc02      	bgt.n	800b2a0 <mg_ncasecmp+0x4e>
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	3320      	adds	r3, #32
 800b29e:	617b      	str	r3, [r7, #20]
      diff = c - d;
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <mg_ncasecmp+0x72>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <mg_ncasecmp+0x72>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	607b      	str	r3, [r7, #4]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1d1      	bne.n	800b268 <mg_ncasecmp+0x16>
  return diff;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3724      	adds	r7, #36	@ 0x24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 800b2d4:	b480      	push	{r7}
 800b2d6:	b08b      	sub	sp, #44	@ 0x2c
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	f107 0308 	add.w	r3, r7, #8
 800b2de:	e883 0003 	stmia.w	r3, {r0, r1}
 800b2e2:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ec:	61bb      	str	r3, [r7, #24]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	4a42      	ldr	r2, [pc, #264]	@ (800b3fc <mg_to_size_t+0x128>)
 800b2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	617b      	str	r3, [r7, #20]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	623b      	str	r3, [r7, #32]
 800b2fe:	2300      	movs	r3, #0
 800b300:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800b302:	e002      	b.n	800b30a <mg_to_size_t+0x36>
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	3301      	adds	r3, #1
 800b308:	627b      	str	r3, [r7, #36]	@ 0x24
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b30e:	429a      	cmp	r2, r3
 800b310:	d20b      	bcs.n	800b32a <mg_to_size_t+0x56>
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	4413      	add	r3, r2
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d0f2      	beq.n	800b304 <mg_to_size_t+0x30>
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b322:	4413      	add	r3, r2
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b09      	cmp	r3, #9
 800b328:	d0ec      	beq.n	800b304 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b32e:	429a      	cmp	r2, r3
 800b330:	d22b      	bcs.n	800b38a <mg_to_size_t+0xb6>
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b336:	4413      	add	r3, r2
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b33c:	d125      	bne.n	800b38a <mg_to_size_t+0xb6>
 800b33e:	2300      	movs	r3, #0
 800b340:	e056      	b.n	800b3f0 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b346:	4413      	add	r3, r2
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	3b30      	subs	r3, #48	@ 0x30
 800b34c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800b34e:	6a3a      	ldr	r2, [r7, #32]
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	429a      	cmp	r2, r3
 800b354:	d901      	bls.n	800b35a <mg_to_size_t+0x86>
 800b356:	2300      	movs	r3, #0
 800b358:	e04a      	b.n	800b3f0 <mg_to_size_t+0x11c>
    result *= 10;
 800b35a:	6a3a      	ldr	r2, [r7, #32]
 800b35c:	4613      	mov	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	6a3a      	ldr	r2, [r7, #32]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d901      	bls.n	800b376 <mg_to_size_t+0xa2>
 800b372:	2300      	movs	r3, #0
 800b374:	e03c      	b.n	800b3f0 <mg_to_size_t+0x11c>
    result += digit;
 800b376:	6a3a      	ldr	r2, [r7, #32]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	4413      	add	r3, r2
 800b37c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800b37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b380:	3301      	adds	r3, #1
 800b382:	627b      	str	r3, [r7, #36]	@ 0x24
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	3301      	adds	r3, #1
 800b388:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b38e:	429a      	cmp	r2, r3
 800b390:	d20f      	bcs.n	800b3b2 <mg_to_size_t+0xde>
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b396:	4413      	add	r3, r2
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b2f      	cmp	r3, #47	@ 0x2f
 800b39c:	d909      	bls.n	800b3b2 <mg_to_size_t+0xde>
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a2:	4413      	add	r3, r2
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b39      	cmp	r3, #57	@ 0x39
 800b3a8:	d9cb      	bls.n	800b342 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800b3aa:	e002      	b.n	800b3b2 <mg_to_size_t+0xde>
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d20b      	bcs.n	800b3d2 <mg_to_size_t+0xfe>
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3be:	4413      	add	r3, r2
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d0f2      	beq.n	800b3ac <mg_to_size_t+0xd8>
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ca:	4413      	add	r3, r2
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2b09      	cmp	r3, #9
 800b3d0:	d0ec      	beq.n	800b3ac <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <mg_to_size_t+0x108>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e009      	b.n	800b3f0 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d001      	beq.n	800b3e8 <mg_to_size_t+0x114>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	e003      	b.n	800b3f0 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a3a      	ldr	r2, [r7, #32]
 800b3ec:	601a      	str	r2, [r3, #0]
  return true;
 800b3ee:	2301      	movs	r3, #1
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	372c      	adds	r7, #44	@ 0x2c
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	cccccccd 	.word	0xcccccccd

0800b400 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 800b400:	b082      	sub	sp, #8
 800b402:	b580      	push	{r7, lr}
 800b404:	b08e      	sub	sp, #56	@ 0x38
 800b406:	af02      	add	r7, sp, #8
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	1d38      	adds	r0, r7, #4
 800b40c:	e880 0006 	stmia.w	r0, {r1, r2}
 800b410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 800b412:	f107 0310 	add.w	r3, r7, #16
 800b416:	2200      	movs	r2, #0
 800b418:	2100      	movs	r1, #0
 800b41a:	4618      	mov	r0, r3
 800b41c:	f00c f9af 	bl	801777e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 800b420:	e023      	b.n	800b46a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800b422:	f107 0318 	add.w	r3, r7, #24
 800b426:	f107 0220 	add.w	r2, r7, #32
 800b42a:	213d      	movs	r1, #61	@ 0x3d
 800b42c:	9100      	str	r1, [sp, #0]
 800b42e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b432:	c903      	ldmia	r1, {r0, r1}
 800b434:	f00c fb84 	bl	8017b40 <mg_span>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d015      	beq.n	800b46a <mg_http_var+0x6a>
 800b43e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	429a      	cmp	r2, r3
 800b444:	d111      	bne.n	800b46a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 800b446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b448:	6a39      	ldr	r1, [r7, #32]
 800b44a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff ff00 	bl	800b252 <mg_ncasecmp>
 800b452:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800b454:	2b00      	cmp	r3, #0
 800b456:	d108      	bne.n	800b46a <mg_http_var+0x6a>
      result = v;
 800b458:	f107 0310 	add.w	r3, r7, #16
 800b45c:	f107 0218 	add.w	r2, r7, #24
 800b460:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b464:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 800b468:	e00b      	b.n	800b482 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800b46a:	1d3b      	adds	r3, r7, #4
 800b46c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b470:	2126      	movs	r1, #38	@ 0x26
 800b472:	9100      	str	r1, [sp, #0]
 800b474:	1d39      	adds	r1, r7, #4
 800b476:	c903      	ldmia	r1, {r0, r1}
 800b478:	f00c fb62 	bl	8017b40 <mg_span>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1cf      	bne.n	800b422 <mg_http_var+0x22>
    }
  }
  return result;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	461a      	mov	r2, r3
 800b486:	f107 0310 	add.w	r3, r7, #16
 800b48a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b48e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	3730      	adds	r7, #48	@ 0x30
 800b496:	46bd      	mov	sp, r7
 800b498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b49c:	b002      	add	sp, #8
 800b49e:	4770      	bx	lr

0800b4a0 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08c      	sub	sp, #48	@ 0x30
 800b4a4:	af02      	add	r7, sp, #8
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d005      	beq.n	800b4c0 <mg_http_get_var+0x20>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <mg_http_get_var+0x2c>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 800b4cc:	f06f 0301 	mvn.w	r3, #1
 800b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4d2:	e033      	b.n	800b53c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d006      	beq.n	800b4ea <mg_http_get_var+0x4a>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <mg_http_get_var+0x4a>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d103      	bne.n	800b4f2 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 800b4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4f0:	e024      	b.n	800b53c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 800b4f2:	f107 031c 	add.w	r3, r7, #28
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f00c f923 	bl	8017744 <mg_str_s>
 800b4fe:	f107 0014 	add.w	r0, r7, #20
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	ca06      	ldmia	r2, {r1, r2}
 800b50c:	f7ff ff78 	bl	800b400 <mg_http_var>
    if (v.buf == NULL) {
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 800b516:	f06f 0303 	mvn.w	r3, #3
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b51c:	e00e      	b.n	800b53c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 800b51e:	6978      	ldr	r0, [r7, #20]
 800b520:	69b9      	ldr	r1, [r7, #24]
 800b522:	2301      	movs	r3, #1
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	f000 f82e 	bl	800b58a <mg_url_decode>
 800b52e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	2b00      	cmp	r3, #0
 800b534:	da02      	bge.n	800b53c <mg_http_get_var+0x9c>
 800b536:	f06f 0302 	mvn.w	r3, #2
 800b53a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 800b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3728      	adds	r7, #40	@ 0x28
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <isx>:

static bool isx(int c) {
 800b546:	b480      	push	{r7}
 800b548:	b083      	sub	sp, #12
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b2f      	cmp	r3, #47	@ 0x2f
 800b552:	dd02      	ble.n	800b55a <isx+0x14>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b39      	cmp	r3, #57	@ 0x39
 800b558:	dd0b      	ble.n	800b572 <isx+0x2c>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b60      	cmp	r3, #96	@ 0x60
 800b55e:	dd02      	ble.n	800b566 <isx+0x20>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b66      	cmp	r3, #102	@ 0x66
 800b564:	dd05      	ble.n	800b572 <isx+0x2c>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b40      	cmp	r3, #64	@ 0x40
 800b56a:	dd04      	ble.n	800b576 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b46      	cmp	r3, #70	@ 0x46
 800b570:	dc01      	bgt.n	800b576 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800b572:	2301      	movs	r3, #1
 800b574:	e000      	b.n	800b578 <isx+0x32>
 800b576:	2300      	movs	r3, #0
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	b2db      	uxtb	r3, r3
}
 800b57e:	4618      	mov	r0, r3
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b08a      	sub	sp, #40	@ 0x28
 800b58e:	af02      	add	r7, sp, #8
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
 800b596:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800b598:	2300      	movs	r3, #0
 800b59a:	61bb      	str	r3, [r7, #24]
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	61fb      	str	r3, [r7, #28]
 800b5a0:	e059      	b.n	800b656 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b25      	cmp	r3, #37	@ 0x25
 800b5ac:	d136      	bne.n	800b61c <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d92e      	bls.n	800b616 <mg_url_decode+0x8c>
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff ffbf 	bl	800b546 <isx>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d023      	beq.n	800b616 <mg_url_decode+0x8c>
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff ffb4 	bl	800b546 <isx>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d018      	beq.n	800b616 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	18d1      	adds	r1, r2, r3
 800b5ec:	f107 0310 	add.w	r3, r7, #16
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f00c f8c3 	bl	801777e <mg_str_n>
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	2201      	movs	r2, #1
 800b600:	9200      	str	r2, [sp, #0]
 800b602:	2210      	movs	r2, #16
 800b604:	f107 0110 	add.w	r1, r7, #16
 800b608:	c903      	ldmia	r1, {r0, r1}
 800b60a:	f00c faf6 	bl	8017bfa <mg_str_to_num>
        i += 2;
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	3302      	adds	r3, #2
 800b612:	61fb      	str	r3, [r7, #28]
 800b614:	e019      	b.n	800b64a <mg_url_decode+0xc0>
      } else {
        return -1;
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	e03a      	b.n	800b692 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 800b61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00b      	beq.n	800b63a <mg_url_decode+0xb0>
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	4413      	add	r3, r2
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2b2b      	cmp	r3, #43	@ 0x2b
 800b62c:	d105      	bne.n	800b63a <mg_url_decode+0xb0>
      dst[j] = ' ';
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	4413      	add	r3, r2
 800b634:	2220      	movs	r2, #32
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	e007      	b.n	800b64a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	441a      	add	r2, r3
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	440b      	add	r3, r1
 800b646:	7812      	ldrb	r2, [r2, #0]
 800b648:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	3301      	adds	r3, #1
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	3301      	adds	r3, #1
 800b654:	61bb      	str	r3, [r7, #24]
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d204      	bcs.n	800b668 <mg_url_decode+0xde>
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	3301      	adds	r3, #1
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d89c      	bhi.n	800b5a2 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d204      	bcs.n	800b67a <mg_url_decode+0xf0>
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	4413      	add	r3, r2
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800b67a:	69fa      	ldr	r2, [r7, #28]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d305      	bcc.n	800b68e <mg_url_decode+0x104>
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d201      	bcs.n	800b68e <mg_url_decode+0x104>
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	e001      	b.n	800b692 <mg_url_decode+0x108>
 800b68e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b692:	4618      	mov	r0, r3
 800b694:	3720      	adds	r7, #32
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <isok>:

static bool isok(uint8_t c) {
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b0a      	cmp	r3, #10
 800b6a8:	d008      	beq.n	800b6bc <isok+0x22>
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	2b0d      	cmp	r3, #13
 800b6ae:	d005      	beq.n	800b6bc <isok+0x22>
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	2b09      	cmp	r3, #9
 800b6b4:	d002      	beq.n	800b6bc <isok+0x22>
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	2b1f      	cmp	r3, #31
 800b6ba:	d901      	bls.n	800b6c0 <isok+0x26>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e000      	b.n	800b6c2 <isok+0x28>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	b2db      	uxtb	r3, r3
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	e03c      	b.n	800b75e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff ffd4 	bl	800b69a <isok>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f083 0301 	eor.w	r3, r3, #1
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <mg_http_get_request_len+0x30>
 800b6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b702:	e031      	b.n	800b768 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00c      	beq.n	800b724 <mg_http_get_request_len+0x50>
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b0a      	cmp	r3, #10
 800b714:	d106      	bne.n	800b724 <mg_http_get_request_len+0x50>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3b01      	subs	r3, #1
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b0a      	cmp	r3, #10
 800b722:	d016      	beq.n	800b752 <mg_http_get_request_len+0x7e>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b03      	cmp	r3, #3
 800b728:	d916      	bls.n	800b758 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b0a      	cmp	r3, #10
 800b734:	d110      	bne.n	800b758 <mg_http_get_request_len+0x84>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3b01      	subs	r3, #1
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	4413      	add	r3, r2
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b0d      	cmp	r3, #13
 800b742:	d109      	bne.n	800b758 <mg_http_get_request_len+0x84>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3b02      	subs	r3, #2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	4413      	add	r3, r2
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	2b0a      	cmp	r3, #10
 800b750:	d102      	bne.n	800b758 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	e007      	b.n	800b768 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3301      	adds	r3, #1
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d3be      	bcc.n	800b6e4 <mg_http_get_request_len+0x10>
  }
  return 0;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 800b770:	b580      	push	{r7, lr}
 800b772:	b088      	sub	sp, #32
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800b77a:	6838      	ldr	r0, [r7, #0]
 800b77c:	f7f4 fe28 	bl	80003d0 <strlen>
 800b780:	61b8      	str	r0, [r7, #24]
 800b782:	231e      	movs	r3, #30
 800b784:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800b786:	2300      	movs	r3, #0
 800b788:	61fb      	str	r3, [r7, #28]
 800b78a:	e01f      	b.n	800b7cc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	3302      	adds	r3, #2
 800b790:	011b      	lsls	r3, r3, #4
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	4413      	add	r3, r2
 800b796:	613b      	str	r3, [r7, #16]
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	011b      	lsls	r3, r3, #4
 800b79c:	3328      	adds	r3, #40	@ 0x28
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d10b      	bne.n	800b7c6 <mg_http_get_header+0x56>
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fd4b 	bl	800b252 <mg_ncasecmp>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <mg_http_get_header+0x56>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	e010      	b.n	800b7e8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d208      	bcs.n	800b7e6 <mg_http_get_header+0x76>
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	3302      	adds	r3, #2
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	4413      	add	r3, r2
 800b7de:	3304      	adds	r3, #4
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1d2      	bne.n	800b78c <mg_http_get_header+0x1c>
  }
  return NULL;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b800:	2b80      	cmp	r3, #128	@ 0x80
 800b802:	bf0c      	ite	eq
 800b804:	2301      	moveq	r3, #1
 800b806:	2300      	movne	r3, #0
 800b808:	b2db      	uxtb	r3, r3
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 800b832:	7cfb      	ldrb	r3, [r7, #19]
 800b834:	2b20      	cmp	r3, #32
 800b836:	d904      	bls.n	800b842 <clen+0x2c>
 800b838:	7cfb      	ldrb	r3, [r7, #19]
 800b83a:	2b7e      	cmp	r3, #126	@ 0x7e
 800b83c:	d801      	bhi.n	800b842 <clen+0x2c>
 800b83e:	2301      	movs	r3, #1
 800b840:	e054      	b.n	800b8ec <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 800b842:	7cfb      	ldrb	r3, [r7, #19]
 800b844:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800b848:	2bc0      	cmp	r3, #192	@ 0xc0
 800b84a:	d10d      	bne.n	800b868 <clen+0x52>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b01      	cmp	r3, #1
 800b850:	dd0a      	ble.n	800b868 <clen+0x52>
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	3301      	adds	r3, #1
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff ffc9 	bl	800b7f0 <vcb>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <clen+0x52>
 800b864:	2302      	movs	r3, #2
 800b866:	e041      	b.n	800b8ec <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 800b868:	7cfb      	ldrb	r3, [r7, #19]
 800b86a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b86e:	2be0      	cmp	r3, #224	@ 0xe0
 800b870:	d116      	bne.n	800b8a0 <clen+0x8a>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b02      	cmp	r3, #2
 800b876:	dd13      	ble.n	800b8a0 <clen+0x8a>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	3301      	adds	r3, #1
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7ff ffb6 	bl	800b7f0 <vcb>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <clen+0x8a>
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	3302      	adds	r3, #2
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff ffad 	bl	800b7f0 <vcb>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <clen+0x8a>
 800b89c:	2303      	movs	r3, #3
 800b89e:	e025      	b.n	800b8ec <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 800b8a0:	7cfb      	ldrb	r3, [r7, #19]
 800b8a2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800b8a6:	2bf0      	cmp	r3, #240	@ 0xf0
 800b8a8:	d11f      	bne.n	800b8ea <clen+0xd4>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	dd1c      	ble.n	800b8ea <clen+0xd4>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff ff9a 	bl	800b7f0 <vcb>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d013      	beq.n	800b8ea <clen+0xd4>
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	3302      	adds	r3, #2
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff ff91 	bl	800b7f0 <vcb>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00a      	beq.n	800b8ea <clen+0xd4>
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	3303      	adds	r3, #3
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff ff88 	bl	800b7f0 <vcb>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <clen+0xd4>
    return 4;
 800b8e6:	2304      	movs	r3, #4
 800b8e8:	e000      	b.n	800b8ec <clen+0xd6>
  return 0;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800b906:	e007      	b.n	800b918 <skiptorn+0x24>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3301      	adds	r3, #1
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	605a      	str	r2, [r3, #4]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d207      	bcs.n	800b930 <skiptorn+0x3c>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	2b0a      	cmp	r3, #10
 800b926:	d003      	beq.n	800b930 <skiptorn+0x3c>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b0d      	cmp	r3, #13
 800b92e:	d1eb      	bne.n	800b908 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	429a      	cmp	r2, r3
 800b936:	d208      	bcs.n	800b94a <skiptorn+0x56>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b0d      	cmp	r3, #13
 800b93e:	d106      	bne.n	800b94e <skiptorn+0x5a>
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3301      	adds	r3, #1
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b0a      	cmp	r3, #10
 800b948:	d001      	beq.n	800b94e <skiptorn+0x5a>
 800b94a:	2300      	movs	r3, #0
 800b94c:	e017      	b.n	800b97e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	d206      	bcs.n	800b964 <skiptorn+0x70>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b0d      	cmp	r3, #13
 800b95c:	d102      	bne.n	800b964 <skiptorn+0x70>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	3301      	adds	r3, #1
 800b962:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d205      	bcs.n	800b978 <skiptorn+0x84>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	60fa      	str	r2, [r7, #12]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b0a      	cmp	r3, #10
 800b976:	d001      	beq.n	800b97c <skiptorn+0x88>
 800b978:	2300      	movs	r3, #0
 800b97a:	e000      	b.n	800b97e <skiptorn+0x8a>
  return s;
 800b97c:	68fb      	ldr	r3, [r7, #12]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b08a      	sub	sp, #40	@ 0x28
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
 800b996:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800b998:	2300      	movs	r3, #0
 800b99a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b99c:	e09a      	b.n	800bad4 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 800b99e:	2300      	movs	r3, #0
 800b9a0:	61bb      	str	r3, [r7, #24]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	61fb      	str	r3, [r7, #28]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	613b      	str	r3, [r7, #16]
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d301      	bcc.n	800b9ba <mg_http_parse_headers+0x30>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e092      	b.n	800bae0 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b0a      	cmp	r3, #10
 800b9c0:	f000 808d 	beq.w	800bade <mg_http_parse_headers+0x154>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	2b0d      	cmp	r3, #13
 800b9ca:	d105      	bne.n	800b9d8 <mg_http_parse_headers+0x4e>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b0a      	cmp	r3, #10
 800b9d4:	f000 8083 	beq.w	800bade <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 800b9dc:	e007      	b.n	800b9ee <mg_http_parse_headers+0x64>
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	69fa      	ldr	r2, [r7, #28]
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d20b      	bcs.n	800ba0e <mg_http_parse_headers+0x84>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b3a      	cmp	r3, #58	@ 0x3a
 800b9fc:	d007      	beq.n	800ba0e <mg_http_parse_headers+0x84>
 800b9fe:	68b9      	ldr	r1, [r7, #8]
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f7ff ff08 	bl	800b816 <clen>
 800ba06:	6238      	str	r0, [r7, #32]
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1e7      	bne.n	800b9de <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <mg_http_parse_headers+0x8e>
 800ba14:	2300      	movs	r3, #0
 800ba16:	e063      	b.n	800bae0 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d206      	bcs.n	800ba2e <mg_http_parse_headers+0xa4>
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fef7 	bl	800b816 <clen>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <mg_http_parse_headers+0xa8>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e056      	b.n	800bae0 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	60fa      	str	r2, [r7, #12]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ba3c:	d004      	beq.n	800ba48 <mg_http_parse_headers+0xbe>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e04e      	b.n	800bae0 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3301      	adds	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d207      	bcs.n	800ba60 <mg_http_parse_headers+0xd6>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b20      	cmp	r3, #32
 800ba56:	d0f4      	beq.n	800ba42 <mg_http_parse_headers+0xb8>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b09      	cmp	r3, #9
 800ba5e:	d0f0      	beq.n	800ba42 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 800ba60:	f107 0310 	add.w	r3, r7, #16
 800ba64:	461a      	mov	r2, r3
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7ff ff43 	bl	800b8f4 <skiptorn>
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d104      	bne.n	800ba80 <mg_http_parse_headers+0xf6>
 800ba76:	2300      	movs	r3, #0
 800ba78:	e032      	b.n	800bae0 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00d      	beq.n	800baa2 <mg_http_parse_headers+0x118>
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	4413      	add	r3, r2
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b20      	cmp	r3, #32
 800ba92:	d0f2      	beq.n	800ba7a <mg_http_parse_headers+0xf0>
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	4413      	add	r3, r2
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	2b09      	cmp	r3, #9
 800baa0:	d0eb      	beq.n	800ba7a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	011b      	lsls	r3, r3, #4
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	4413      	add	r3, r2
 800baaa:	461a      	mov	r2, r3
 800baac:	f107 0318 	add.w	r3, r7, #24
 800bab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bab4:	e882 0003 	stmia.w	r2, {r0, r1}
 800bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3308      	adds	r3, #8
 800bac2:	f107 0210 	add.w	r2, r7, #16
 800bac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800baca:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 800bace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad0:	3301      	adds	r3, #1
 800bad2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	f4ff af60 	bcc.w	800b99e <mg_http_parse_headers+0x14>
  }
  return true;
 800bade:	2301      	movs	r3, #1
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3728      	adds	r7, #40	@ 0x28
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b092      	sub	sp, #72	@ 0x48
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 800baf4:	68b9      	ldr	r1, [r7, #8]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff fdec 	bl	800b6d4 <mg_http_get_request_len>
 800bafc:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d003      	beq.n	800bb0c <mg_http_parse+0x24>
 800bb04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	e000      	b.n	800bb0e <mg_http_parse+0x26>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 800bb10:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bb14:	2100      	movs	r1, #0
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f01c fe42 	bl	80287a0 <memset>
  if (req_len <= 0) return req_len;
 800bb1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dc01      	bgt.n	800bb26 <mg_http_parse+0x3e>
 800bb22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb24:	e18f      	b.n	800be46 <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 800bb42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 800bb66:	e009      	b.n	800bb7c <mg_http_parse+0x94>
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6c:	4413      	add	r3, r2
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb76:	441a      	add	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	605a      	str	r2, [r3, #4]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d20b      	bcs.n	800bb9c <mg_http_parse+0xb4>
 800bb84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f7ff fe45 	bl	800b816 <clen>
 800bb8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800bb8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e9      	bne.n	800bb68 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800bb94:	e002      	b.n	800bb9c <mg_http_parse+0xb4>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d203      	bcs.n	800bbac <mg_http_parse+0xc4>
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	d0f4      	beq.n	800bb96 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 800bbb2:	e009      	b.n	800bbc8 <mg_http_parse+0xe0>
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb8:	4413      	add	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68da      	ldr	r2, [r3, #12]
 800bbc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc2:	441a      	add	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	60da      	str	r2, [r3, #12]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d20b      	bcs.n	800bbe8 <mg_http_parse+0x100>
 800bbd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7ff fe1f 	bl	800b816 <clen>
 800bbd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800bbda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e9      	bne.n	800bbb4 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800bbe0:	e002      	b.n	800bbe8 <mg_http_parse+0x100>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d203      	bcs.n	800bbf8 <mg_http_parse+0x110>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	2b20      	cmp	r3, #32
 800bbf6:	d0f4      	beq.n	800bbe2 <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	2b05      	cmp	r3, #5
 800bbfe:	d90b      	bls.n	800bc18 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2205      	movs	r2, #5
 800bc06:	4992      	ldr	r1, [pc, #584]	@ (800be50 <mg_http_parse+0x368>)
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff fb22 	bl	800b252 <mg_ncasecmp>
 800bc0e:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <mg_http_parse+0x130>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e000      	b.n	800bc1a <mg_http_parse+0x132>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3318      	adds	r3, #24
 800bc20:	461a      	mov	r2, r3
 800bc22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f7ff fe65 	bl	800b8f4 <skiptorn>
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <mg_http_parse+0x14e>
 800bc32:	2300      	movs	r3, #0
 800bc34:	e107      	b.n	800be46 <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	2b05      	cmp	r3, #5
 800bc3c:	d90b      	bls.n	800bc56 <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	2205      	movs	r2, #5
 800bc44:	4982      	ldr	r1, [pc, #520]	@ (800be50 <mg_http_parse+0x368>)
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff fb03 	bl	800b252 <mg_ncasecmp>
 800bc4c:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <mg_http_parse+0x16e>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e000      	b.n	800bc58 <mg_http_parse+0x170>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bc5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 800bc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d12f      	bne.n	800bcce <mg_http_parse+0x1e6>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d02b      	beq.n	800bcce <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800bc76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc7a:	f083 0301 	eor.w	r3, r3, #1
 800bc7e:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d121      	bne.n	800bcc8 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	69db      	ldr	r3, [r3, #28]
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d11d      	bne.n	800bcc8 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	3305      	adds	r3, #5
 800bc92:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 800bc94:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc96:	d917      	bls.n	800bcc8 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	3305      	adds	r3, #5
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b39      	cmp	r3, #57	@ 0x39
 800bca2:	d811      	bhi.n	800bcc8 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	3306      	adds	r3, #6
 800bcaa:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800bcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcae:	d10b      	bne.n	800bcc8 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	3307      	adds	r3, #7
 800bcb6:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 800bcb8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcba:	d905      	bls.n	800bcc8 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	3307      	adds	r3, #7
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b39      	cmp	r3, #57	@ 0x39
 800bcc6:	d902      	bls.n	800bcce <mg_http_parse+0x1e6>
    return -1;
 800bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bccc:	e0bb      	b.n	800be46 <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6898      	ldr	r0, [r3, #8]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	213f      	movs	r1, #63	@ 0x3f
 800bcda:	f7f4 fb29 	bl	8000330 <memchr>
 800bcde:	6338      	str	r0, [r7, #48]	@ 0x30
 800bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d015      	beq.n	800bd12 <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689a      	ldr	r2, [r3, #8]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	441a      	add	r2, r3
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	461a      	mov	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <mg_http_parse+0x23a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <mg_http_parse+0x240>
 800bd22:	f04f 33ff 	mov.w	r3, #4294967295
 800bd26:	e08e      	b.n	800be46 <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f103 0220 	add.w	r2, r3, #32
 800bd2e:	231e      	movs	r3, #30
 800bd30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff fe29 	bl	800b98a <mg_http_parse_headers>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f083 0301 	eor.w	r3, r3, #1
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	e07d      	b.n	800be46 <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 800bd4a:	4942      	ldr	r1, [pc, #264]	@ (800be54 <mg_http_parse+0x36c>)
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff fd0f 	bl	800b770 <mg_http_get_header>
 800bd52:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d018      	beq.n	800bd8c <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800bd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd62:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd66:	f7ff fab5 	bl	800b2d4 <mg_to_size_t>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	f083 0301 	eor.w	r3, r3, #1
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <mg_http_parse+0x294>
 800bd76:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7a:	e064      	b.n	800be46 <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd84:	441a      	add	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd96:	d12a      	bne.n	800bdee <mg_http_parse+0x306>
 800bd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d127      	bne.n	800bdee <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800bd9e:	f107 0314 	add.w	r3, r7, #20
 800bda2:	492d      	ldr	r1, [pc, #180]	@ (800be58 <mg_http_parse+0x370>)
 800bda4:	4618      	mov	r0, r3
 800bda6:	f00b fccd 	bl	8017744 <mg_str_s>
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	f107 0314 	add.w	r3, r7, #20
 800bdb0:	cb0c      	ldmia	r3, {r2, r3}
 800bdb2:	c903      	ldmia	r1, {r0, r1}
 800bdb4:	f00b fd89 	bl	80178ca <mg_strcasecmp>
 800bdb8:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d017      	beq.n	800bdee <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 800bdbe:	f107 031c 	add.w	r3, r7, #28
 800bdc2:	4926      	ldr	r1, [pc, #152]	@ (800be5c <mg_http_parse+0x374>)
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f00b fcbd 	bl	8017744 <mg_str_s>
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	f107 031c 	add.w	r3, r7, #28
 800bdd0:	cb0c      	ldmia	r3, {r2, r3}
 800bdd2:	c903      	ldmia	r1, {r0, r1}
 800bdd4:	f00b fd79 	bl	80178ca <mg_strcasecmp>
 800bdd8:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d007      	beq.n	800bdee <mg_http_parse+0x306>
    hm->body.len = 0;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800bde6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf8:	d11b      	bne.n	800be32 <mg_http_parse+0x34a>
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d018      	beq.n	800be32 <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 800be00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be04:	4916      	ldr	r1, [pc, #88]	@ (800be60 <mg_http_parse+0x378>)
 800be06:	4618      	mov	r0, r3
 800be08:	f00b fc9c 	bl	8017744 <mg_str_s>
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be12:	cb0c      	ldmia	r3, {r2, r3}
 800be14:	3108      	adds	r1, #8
 800be16:	c903      	ldmia	r1, {r0, r1}
 800be18:	f00b fd57 	bl	80178ca <mg_strcasecmp>
 800be1c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d107      	bne.n	800be32 <mg_http_parse+0x34a>
    hm->body.len = 0;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800be2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800be38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d202      	bcs.n	800be44 <mg_http_parse+0x35c>
 800be3e:	f04f 33ff 	mov.w	r3, #4294967295
 800be42:	e000      	b.n	800be46 <mg_http_parse+0x35e>

  return req_len;
 800be44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800be46:	4618      	mov	r0, r3
 800be48:	3748      	adds	r7, #72	@ 0x48
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	0802d68c 	.word	0x0802d68c
 800be54:	0802d694 	.word	0x0802d694
 800be58:	0802d6a4 	.word	0x0802d6a4
 800be5c:	0802d6a8 	.word	0x0802d6a8
 800be60:	0802d6b0 	.word	0x0802d6b0

0800be64 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3b64      	subs	r3, #100	@ 0x64
 800be70:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800be74:	4293      	cmp	r3, r2
 800be76:	f200 8469 	bhi.w	800c74c <mg_http_status_code_str+0x8e8>
 800be7a:	a101      	add	r1, pc, #4	@ (adr r1, 800be80 <mg_http_status_code_str+0x1c>)
 800be7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be80:	0800c651 	.word	0x0800c651
 800be84:	0800c655 	.word	0x0800c655
 800be88:	0800c659 	.word	0x0800c659
 800be8c:	0800c74d 	.word	0x0800c74d
 800be90:	0800c74d 	.word	0x0800c74d
 800be94:	0800c74d 	.word	0x0800c74d
 800be98:	0800c74d 	.word	0x0800c74d
 800be9c:	0800c74d 	.word	0x0800c74d
 800bea0:	0800c74d 	.word	0x0800c74d
 800bea4:	0800c74d 	.word	0x0800c74d
 800bea8:	0800c74d 	.word	0x0800c74d
 800beac:	0800c74d 	.word	0x0800c74d
 800beb0:	0800c74d 	.word	0x0800c74d
 800beb4:	0800c74d 	.word	0x0800c74d
 800beb8:	0800c74d 	.word	0x0800c74d
 800bebc:	0800c74d 	.word	0x0800c74d
 800bec0:	0800c74d 	.word	0x0800c74d
 800bec4:	0800c74d 	.word	0x0800c74d
 800bec8:	0800c74d 	.word	0x0800c74d
 800becc:	0800c74d 	.word	0x0800c74d
 800bed0:	0800c74d 	.word	0x0800c74d
 800bed4:	0800c74d 	.word	0x0800c74d
 800bed8:	0800c74d 	.word	0x0800c74d
 800bedc:	0800c74d 	.word	0x0800c74d
 800bee0:	0800c74d 	.word	0x0800c74d
 800bee4:	0800c74d 	.word	0x0800c74d
 800bee8:	0800c74d 	.word	0x0800c74d
 800beec:	0800c74d 	.word	0x0800c74d
 800bef0:	0800c74d 	.word	0x0800c74d
 800bef4:	0800c74d 	.word	0x0800c74d
 800bef8:	0800c74d 	.word	0x0800c74d
 800befc:	0800c74d 	.word	0x0800c74d
 800bf00:	0800c74d 	.word	0x0800c74d
 800bf04:	0800c74d 	.word	0x0800c74d
 800bf08:	0800c74d 	.word	0x0800c74d
 800bf0c:	0800c74d 	.word	0x0800c74d
 800bf10:	0800c74d 	.word	0x0800c74d
 800bf14:	0800c74d 	.word	0x0800c74d
 800bf18:	0800c74d 	.word	0x0800c74d
 800bf1c:	0800c74d 	.word	0x0800c74d
 800bf20:	0800c74d 	.word	0x0800c74d
 800bf24:	0800c74d 	.word	0x0800c74d
 800bf28:	0800c74d 	.word	0x0800c74d
 800bf2c:	0800c74d 	.word	0x0800c74d
 800bf30:	0800c74d 	.word	0x0800c74d
 800bf34:	0800c74d 	.word	0x0800c74d
 800bf38:	0800c74d 	.word	0x0800c74d
 800bf3c:	0800c74d 	.word	0x0800c74d
 800bf40:	0800c74d 	.word	0x0800c74d
 800bf44:	0800c74d 	.word	0x0800c74d
 800bf48:	0800c74d 	.word	0x0800c74d
 800bf4c:	0800c74d 	.word	0x0800c74d
 800bf50:	0800c74d 	.word	0x0800c74d
 800bf54:	0800c74d 	.word	0x0800c74d
 800bf58:	0800c74d 	.word	0x0800c74d
 800bf5c:	0800c74d 	.word	0x0800c74d
 800bf60:	0800c74d 	.word	0x0800c74d
 800bf64:	0800c74d 	.word	0x0800c74d
 800bf68:	0800c74d 	.word	0x0800c74d
 800bf6c:	0800c74d 	.word	0x0800c74d
 800bf70:	0800c74d 	.word	0x0800c74d
 800bf74:	0800c74d 	.word	0x0800c74d
 800bf78:	0800c74d 	.word	0x0800c74d
 800bf7c:	0800c74d 	.word	0x0800c74d
 800bf80:	0800c74d 	.word	0x0800c74d
 800bf84:	0800c74d 	.word	0x0800c74d
 800bf88:	0800c74d 	.word	0x0800c74d
 800bf8c:	0800c74d 	.word	0x0800c74d
 800bf90:	0800c74d 	.word	0x0800c74d
 800bf94:	0800c74d 	.word	0x0800c74d
 800bf98:	0800c74d 	.word	0x0800c74d
 800bf9c:	0800c74d 	.word	0x0800c74d
 800bfa0:	0800c74d 	.word	0x0800c74d
 800bfa4:	0800c74d 	.word	0x0800c74d
 800bfa8:	0800c74d 	.word	0x0800c74d
 800bfac:	0800c74d 	.word	0x0800c74d
 800bfb0:	0800c74d 	.word	0x0800c74d
 800bfb4:	0800c74d 	.word	0x0800c74d
 800bfb8:	0800c74d 	.word	0x0800c74d
 800bfbc:	0800c74d 	.word	0x0800c74d
 800bfc0:	0800c74d 	.word	0x0800c74d
 800bfc4:	0800c74d 	.word	0x0800c74d
 800bfc8:	0800c74d 	.word	0x0800c74d
 800bfcc:	0800c74d 	.word	0x0800c74d
 800bfd0:	0800c74d 	.word	0x0800c74d
 800bfd4:	0800c74d 	.word	0x0800c74d
 800bfd8:	0800c74d 	.word	0x0800c74d
 800bfdc:	0800c74d 	.word	0x0800c74d
 800bfe0:	0800c74d 	.word	0x0800c74d
 800bfe4:	0800c74d 	.word	0x0800c74d
 800bfe8:	0800c74d 	.word	0x0800c74d
 800bfec:	0800c74d 	.word	0x0800c74d
 800bff0:	0800c74d 	.word	0x0800c74d
 800bff4:	0800c74d 	.word	0x0800c74d
 800bff8:	0800c74d 	.word	0x0800c74d
 800bffc:	0800c74d 	.word	0x0800c74d
 800c000:	0800c74d 	.word	0x0800c74d
 800c004:	0800c74d 	.word	0x0800c74d
 800c008:	0800c74d 	.word	0x0800c74d
 800c00c:	0800c74d 	.word	0x0800c74d
 800c010:	0800c65d 	.word	0x0800c65d
 800c014:	0800c661 	.word	0x0800c661
 800c018:	0800c665 	.word	0x0800c665
 800c01c:	0800c669 	.word	0x0800c669
 800c020:	0800c66d 	.word	0x0800c66d
 800c024:	0800c671 	.word	0x0800c671
 800c028:	0800c675 	.word	0x0800c675
 800c02c:	0800c679 	.word	0x0800c679
 800c030:	0800c67d 	.word	0x0800c67d
 800c034:	0800c74d 	.word	0x0800c74d
 800c038:	0800c74d 	.word	0x0800c74d
 800c03c:	0800c74d 	.word	0x0800c74d
 800c040:	0800c74d 	.word	0x0800c74d
 800c044:	0800c74d 	.word	0x0800c74d
 800c048:	0800c74d 	.word	0x0800c74d
 800c04c:	0800c74d 	.word	0x0800c74d
 800c050:	0800c74d 	.word	0x0800c74d
 800c054:	0800c74d 	.word	0x0800c74d
 800c058:	0800c74d 	.word	0x0800c74d
 800c05c:	0800c74d 	.word	0x0800c74d
 800c060:	0800c74d 	.word	0x0800c74d
 800c064:	0800c74d 	.word	0x0800c74d
 800c068:	0800c74d 	.word	0x0800c74d
 800c06c:	0800c74d 	.word	0x0800c74d
 800c070:	0800c74d 	.word	0x0800c74d
 800c074:	0800c74d 	.word	0x0800c74d
 800c078:	0800c681 	.word	0x0800c681
 800c07c:	0800c74d 	.word	0x0800c74d
 800c080:	0800c74d 	.word	0x0800c74d
 800c084:	0800c74d 	.word	0x0800c74d
 800c088:	0800c74d 	.word	0x0800c74d
 800c08c:	0800c74d 	.word	0x0800c74d
 800c090:	0800c74d 	.word	0x0800c74d
 800c094:	0800c74d 	.word	0x0800c74d
 800c098:	0800c74d 	.word	0x0800c74d
 800c09c:	0800c74d 	.word	0x0800c74d
 800c0a0:	0800c74d 	.word	0x0800c74d
 800c0a4:	0800c74d 	.word	0x0800c74d
 800c0a8:	0800c74d 	.word	0x0800c74d
 800c0ac:	0800c74d 	.word	0x0800c74d
 800c0b0:	0800c74d 	.word	0x0800c74d
 800c0b4:	0800c74d 	.word	0x0800c74d
 800c0b8:	0800c74d 	.word	0x0800c74d
 800c0bc:	0800c74d 	.word	0x0800c74d
 800c0c0:	0800c74d 	.word	0x0800c74d
 800c0c4:	0800c74d 	.word	0x0800c74d
 800c0c8:	0800c74d 	.word	0x0800c74d
 800c0cc:	0800c74d 	.word	0x0800c74d
 800c0d0:	0800c74d 	.word	0x0800c74d
 800c0d4:	0800c74d 	.word	0x0800c74d
 800c0d8:	0800c74d 	.word	0x0800c74d
 800c0dc:	0800c74d 	.word	0x0800c74d
 800c0e0:	0800c74d 	.word	0x0800c74d
 800c0e4:	0800c74d 	.word	0x0800c74d
 800c0e8:	0800c74d 	.word	0x0800c74d
 800c0ec:	0800c74d 	.word	0x0800c74d
 800c0f0:	0800c74d 	.word	0x0800c74d
 800c0f4:	0800c74d 	.word	0x0800c74d
 800c0f8:	0800c74d 	.word	0x0800c74d
 800c0fc:	0800c74d 	.word	0x0800c74d
 800c100:	0800c74d 	.word	0x0800c74d
 800c104:	0800c74d 	.word	0x0800c74d
 800c108:	0800c74d 	.word	0x0800c74d
 800c10c:	0800c74d 	.word	0x0800c74d
 800c110:	0800c74d 	.word	0x0800c74d
 800c114:	0800c74d 	.word	0x0800c74d
 800c118:	0800c74d 	.word	0x0800c74d
 800c11c:	0800c74d 	.word	0x0800c74d
 800c120:	0800c74d 	.word	0x0800c74d
 800c124:	0800c74d 	.word	0x0800c74d
 800c128:	0800c74d 	.word	0x0800c74d
 800c12c:	0800c74d 	.word	0x0800c74d
 800c130:	0800c74d 	.word	0x0800c74d
 800c134:	0800c74d 	.word	0x0800c74d
 800c138:	0800c74d 	.word	0x0800c74d
 800c13c:	0800c74d 	.word	0x0800c74d
 800c140:	0800c74d 	.word	0x0800c74d
 800c144:	0800c74d 	.word	0x0800c74d
 800c148:	0800c74d 	.word	0x0800c74d
 800c14c:	0800c74d 	.word	0x0800c74d
 800c150:	0800c74d 	.word	0x0800c74d
 800c154:	0800c74d 	.word	0x0800c74d
 800c158:	0800c74d 	.word	0x0800c74d
 800c15c:	0800c74d 	.word	0x0800c74d
 800c160:	0800c74d 	.word	0x0800c74d
 800c164:	0800c74d 	.word	0x0800c74d
 800c168:	0800c74d 	.word	0x0800c74d
 800c16c:	0800c74d 	.word	0x0800c74d
 800c170:	0800c74d 	.word	0x0800c74d
 800c174:	0800c74d 	.word	0x0800c74d
 800c178:	0800c74d 	.word	0x0800c74d
 800c17c:	0800c74d 	.word	0x0800c74d
 800c180:	0800c74d 	.word	0x0800c74d
 800c184:	0800c74d 	.word	0x0800c74d
 800c188:	0800c74d 	.word	0x0800c74d
 800c18c:	0800c74d 	.word	0x0800c74d
 800c190:	0800c74d 	.word	0x0800c74d
 800c194:	0800c74d 	.word	0x0800c74d
 800c198:	0800c74d 	.word	0x0800c74d
 800c19c:	0800c74d 	.word	0x0800c74d
 800c1a0:	0800c685 	.word	0x0800c685
 800c1a4:	0800c689 	.word	0x0800c689
 800c1a8:	0800c68d 	.word	0x0800c68d
 800c1ac:	0800c691 	.word	0x0800c691
 800c1b0:	0800c695 	.word	0x0800c695
 800c1b4:	0800c699 	.word	0x0800c699
 800c1b8:	0800c74d 	.word	0x0800c74d
 800c1bc:	0800c69d 	.word	0x0800c69d
 800c1c0:	0800c6a1 	.word	0x0800c6a1
 800c1c4:	0800c74d 	.word	0x0800c74d
 800c1c8:	0800c74d 	.word	0x0800c74d
 800c1cc:	0800c74d 	.word	0x0800c74d
 800c1d0:	0800c74d 	.word	0x0800c74d
 800c1d4:	0800c74d 	.word	0x0800c74d
 800c1d8:	0800c74d 	.word	0x0800c74d
 800c1dc:	0800c74d 	.word	0x0800c74d
 800c1e0:	0800c74d 	.word	0x0800c74d
 800c1e4:	0800c74d 	.word	0x0800c74d
 800c1e8:	0800c74d 	.word	0x0800c74d
 800c1ec:	0800c74d 	.word	0x0800c74d
 800c1f0:	0800c74d 	.word	0x0800c74d
 800c1f4:	0800c74d 	.word	0x0800c74d
 800c1f8:	0800c74d 	.word	0x0800c74d
 800c1fc:	0800c74d 	.word	0x0800c74d
 800c200:	0800c74d 	.word	0x0800c74d
 800c204:	0800c74d 	.word	0x0800c74d
 800c208:	0800c74d 	.word	0x0800c74d
 800c20c:	0800c74d 	.word	0x0800c74d
 800c210:	0800c74d 	.word	0x0800c74d
 800c214:	0800c74d 	.word	0x0800c74d
 800c218:	0800c74d 	.word	0x0800c74d
 800c21c:	0800c74d 	.word	0x0800c74d
 800c220:	0800c74d 	.word	0x0800c74d
 800c224:	0800c74d 	.word	0x0800c74d
 800c228:	0800c74d 	.word	0x0800c74d
 800c22c:	0800c74d 	.word	0x0800c74d
 800c230:	0800c74d 	.word	0x0800c74d
 800c234:	0800c74d 	.word	0x0800c74d
 800c238:	0800c74d 	.word	0x0800c74d
 800c23c:	0800c74d 	.word	0x0800c74d
 800c240:	0800c74d 	.word	0x0800c74d
 800c244:	0800c74d 	.word	0x0800c74d
 800c248:	0800c74d 	.word	0x0800c74d
 800c24c:	0800c74d 	.word	0x0800c74d
 800c250:	0800c74d 	.word	0x0800c74d
 800c254:	0800c74d 	.word	0x0800c74d
 800c258:	0800c74d 	.word	0x0800c74d
 800c25c:	0800c74d 	.word	0x0800c74d
 800c260:	0800c74d 	.word	0x0800c74d
 800c264:	0800c74d 	.word	0x0800c74d
 800c268:	0800c74d 	.word	0x0800c74d
 800c26c:	0800c74d 	.word	0x0800c74d
 800c270:	0800c74d 	.word	0x0800c74d
 800c274:	0800c74d 	.word	0x0800c74d
 800c278:	0800c74d 	.word	0x0800c74d
 800c27c:	0800c74d 	.word	0x0800c74d
 800c280:	0800c74d 	.word	0x0800c74d
 800c284:	0800c74d 	.word	0x0800c74d
 800c288:	0800c74d 	.word	0x0800c74d
 800c28c:	0800c74d 	.word	0x0800c74d
 800c290:	0800c74d 	.word	0x0800c74d
 800c294:	0800c74d 	.word	0x0800c74d
 800c298:	0800c74d 	.word	0x0800c74d
 800c29c:	0800c74d 	.word	0x0800c74d
 800c2a0:	0800c74d 	.word	0x0800c74d
 800c2a4:	0800c74d 	.word	0x0800c74d
 800c2a8:	0800c74d 	.word	0x0800c74d
 800c2ac:	0800c74d 	.word	0x0800c74d
 800c2b0:	0800c74d 	.word	0x0800c74d
 800c2b4:	0800c74d 	.word	0x0800c74d
 800c2b8:	0800c74d 	.word	0x0800c74d
 800c2bc:	0800c74d 	.word	0x0800c74d
 800c2c0:	0800c74d 	.word	0x0800c74d
 800c2c4:	0800c74d 	.word	0x0800c74d
 800c2c8:	0800c74d 	.word	0x0800c74d
 800c2cc:	0800c74d 	.word	0x0800c74d
 800c2d0:	0800c74d 	.word	0x0800c74d
 800c2d4:	0800c74d 	.word	0x0800c74d
 800c2d8:	0800c74d 	.word	0x0800c74d
 800c2dc:	0800c74d 	.word	0x0800c74d
 800c2e0:	0800c74d 	.word	0x0800c74d
 800c2e4:	0800c74d 	.word	0x0800c74d
 800c2e8:	0800c74d 	.word	0x0800c74d
 800c2ec:	0800c74d 	.word	0x0800c74d
 800c2f0:	0800c74d 	.word	0x0800c74d
 800c2f4:	0800c74d 	.word	0x0800c74d
 800c2f8:	0800c74d 	.word	0x0800c74d
 800c2fc:	0800c74d 	.word	0x0800c74d
 800c300:	0800c74d 	.word	0x0800c74d
 800c304:	0800c74d 	.word	0x0800c74d
 800c308:	0800c74d 	.word	0x0800c74d
 800c30c:	0800c74d 	.word	0x0800c74d
 800c310:	0800c74d 	.word	0x0800c74d
 800c314:	0800c74d 	.word	0x0800c74d
 800c318:	0800c74d 	.word	0x0800c74d
 800c31c:	0800c74d 	.word	0x0800c74d
 800c320:	0800c74d 	.word	0x0800c74d
 800c324:	0800c74d 	.word	0x0800c74d
 800c328:	0800c74d 	.word	0x0800c74d
 800c32c:	0800c74d 	.word	0x0800c74d
 800c330:	0800c6a5 	.word	0x0800c6a5
 800c334:	0800c6a9 	.word	0x0800c6a9
 800c338:	0800c6ad 	.word	0x0800c6ad
 800c33c:	0800c6b1 	.word	0x0800c6b1
 800c340:	0800c6b5 	.word	0x0800c6b5
 800c344:	0800c6b9 	.word	0x0800c6b9
 800c348:	0800c6bd 	.word	0x0800c6bd
 800c34c:	0800c6c1 	.word	0x0800c6c1
 800c350:	0800c6c5 	.word	0x0800c6c5
 800c354:	0800c6c9 	.word	0x0800c6c9
 800c358:	0800c6cd 	.word	0x0800c6cd
 800c35c:	0800c6d1 	.word	0x0800c6d1
 800c360:	0800c6d5 	.word	0x0800c6d5
 800c364:	0800c6d9 	.word	0x0800c6d9
 800c368:	0800c6dd 	.word	0x0800c6dd
 800c36c:	0800c6e1 	.word	0x0800c6e1
 800c370:	0800c6e5 	.word	0x0800c6e5
 800c374:	0800c6e9 	.word	0x0800c6e9
 800c378:	0800c6ed 	.word	0x0800c6ed
 800c37c:	0800c74d 	.word	0x0800c74d
 800c380:	0800c74d 	.word	0x0800c74d
 800c384:	0800c6f1 	.word	0x0800c6f1
 800c388:	0800c6f5 	.word	0x0800c6f5
 800c38c:	0800c6f9 	.word	0x0800c6f9
 800c390:	0800c6fd 	.word	0x0800c6fd
 800c394:	0800c74d 	.word	0x0800c74d
 800c398:	0800c701 	.word	0x0800c701
 800c39c:	0800c74d 	.word	0x0800c74d
 800c3a0:	0800c705 	.word	0x0800c705
 800c3a4:	0800c709 	.word	0x0800c709
 800c3a8:	0800c74d 	.word	0x0800c74d
 800c3ac:	0800c70d 	.word	0x0800c70d
 800c3b0:	0800c74d 	.word	0x0800c74d
 800c3b4:	0800c74d 	.word	0x0800c74d
 800c3b8:	0800c74d 	.word	0x0800c74d
 800c3bc:	0800c74d 	.word	0x0800c74d
 800c3c0:	0800c74d 	.word	0x0800c74d
 800c3c4:	0800c74d 	.word	0x0800c74d
 800c3c8:	0800c74d 	.word	0x0800c74d
 800c3cc:	0800c74d 	.word	0x0800c74d
 800c3d0:	0800c74d 	.word	0x0800c74d
 800c3d4:	0800c74d 	.word	0x0800c74d
 800c3d8:	0800c74d 	.word	0x0800c74d
 800c3dc:	0800c74d 	.word	0x0800c74d
 800c3e0:	0800c711 	.word	0x0800c711
 800c3e4:	0800c74d 	.word	0x0800c74d
 800c3e8:	0800c74d 	.word	0x0800c74d
 800c3ec:	0800c74d 	.word	0x0800c74d
 800c3f0:	0800c74d 	.word	0x0800c74d
 800c3f4:	0800c74d 	.word	0x0800c74d
 800c3f8:	0800c74d 	.word	0x0800c74d
 800c3fc:	0800c715 	.word	0x0800c715
 800c400:	0800c74d 	.word	0x0800c74d
 800c404:	0800c74d 	.word	0x0800c74d
 800c408:	0800c74d 	.word	0x0800c74d
 800c40c:	0800c74d 	.word	0x0800c74d
 800c410:	0800c74d 	.word	0x0800c74d
 800c414:	0800c74d 	.word	0x0800c74d
 800c418:	0800c74d 	.word	0x0800c74d
 800c41c:	0800c74d 	.word	0x0800c74d
 800c420:	0800c74d 	.word	0x0800c74d
 800c424:	0800c74d 	.word	0x0800c74d
 800c428:	0800c74d 	.word	0x0800c74d
 800c42c:	0800c74d 	.word	0x0800c74d
 800c430:	0800c74d 	.word	0x0800c74d
 800c434:	0800c74d 	.word	0x0800c74d
 800c438:	0800c74d 	.word	0x0800c74d
 800c43c:	0800c74d 	.word	0x0800c74d
 800c440:	0800c74d 	.word	0x0800c74d
 800c444:	0800c74d 	.word	0x0800c74d
 800c448:	0800c74d 	.word	0x0800c74d
 800c44c:	0800c74d 	.word	0x0800c74d
 800c450:	0800c74d 	.word	0x0800c74d
 800c454:	0800c74d 	.word	0x0800c74d
 800c458:	0800c74d 	.word	0x0800c74d
 800c45c:	0800c74d 	.word	0x0800c74d
 800c460:	0800c74d 	.word	0x0800c74d
 800c464:	0800c74d 	.word	0x0800c74d
 800c468:	0800c74d 	.word	0x0800c74d
 800c46c:	0800c74d 	.word	0x0800c74d
 800c470:	0800c74d 	.word	0x0800c74d
 800c474:	0800c74d 	.word	0x0800c74d
 800c478:	0800c74d 	.word	0x0800c74d
 800c47c:	0800c74d 	.word	0x0800c74d
 800c480:	0800c74d 	.word	0x0800c74d
 800c484:	0800c74d 	.word	0x0800c74d
 800c488:	0800c74d 	.word	0x0800c74d
 800c48c:	0800c74d 	.word	0x0800c74d
 800c490:	0800c74d 	.word	0x0800c74d
 800c494:	0800c74d 	.word	0x0800c74d
 800c498:	0800c74d 	.word	0x0800c74d
 800c49c:	0800c74d 	.word	0x0800c74d
 800c4a0:	0800c74d 	.word	0x0800c74d
 800c4a4:	0800c74d 	.word	0x0800c74d
 800c4a8:	0800c74d 	.word	0x0800c74d
 800c4ac:	0800c74d 	.word	0x0800c74d
 800c4b0:	0800c74d 	.word	0x0800c74d
 800c4b4:	0800c74d 	.word	0x0800c74d
 800c4b8:	0800c74d 	.word	0x0800c74d
 800c4bc:	0800c719 	.word	0x0800c719
 800c4c0:	0800c71d 	.word	0x0800c71d
 800c4c4:	0800c721 	.word	0x0800c721
 800c4c8:	0800c725 	.word	0x0800c725
 800c4cc:	0800c729 	.word	0x0800c729
 800c4d0:	0800c72d 	.word	0x0800c72d
 800c4d4:	0800c731 	.word	0x0800c731
 800c4d8:	0800c735 	.word	0x0800c735
 800c4dc:	0800c739 	.word	0x0800c739
 800c4e0:	0800c73d 	.word	0x0800c73d
 800c4e4:	0800c74d 	.word	0x0800c74d
 800c4e8:	0800c741 	.word	0x0800c741
 800c4ec:	0800c745 	.word	0x0800c745
 800c4f0:	0800c74d 	.word	0x0800c74d
 800c4f4:	0800c74d 	.word	0x0800c74d
 800c4f8:	0800c74d 	.word	0x0800c74d
 800c4fc:	0800c74d 	.word	0x0800c74d
 800c500:	0800c74d 	.word	0x0800c74d
 800c504:	0800c74d 	.word	0x0800c74d
 800c508:	0800c74d 	.word	0x0800c74d
 800c50c:	0800c74d 	.word	0x0800c74d
 800c510:	0800c74d 	.word	0x0800c74d
 800c514:	0800c74d 	.word	0x0800c74d
 800c518:	0800c74d 	.word	0x0800c74d
 800c51c:	0800c74d 	.word	0x0800c74d
 800c520:	0800c74d 	.word	0x0800c74d
 800c524:	0800c74d 	.word	0x0800c74d
 800c528:	0800c74d 	.word	0x0800c74d
 800c52c:	0800c74d 	.word	0x0800c74d
 800c530:	0800c74d 	.word	0x0800c74d
 800c534:	0800c74d 	.word	0x0800c74d
 800c538:	0800c74d 	.word	0x0800c74d
 800c53c:	0800c74d 	.word	0x0800c74d
 800c540:	0800c74d 	.word	0x0800c74d
 800c544:	0800c74d 	.word	0x0800c74d
 800c548:	0800c74d 	.word	0x0800c74d
 800c54c:	0800c74d 	.word	0x0800c74d
 800c550:	0800c74d 	.word	0x0800c74d
 800c554:	0800c74d 	.word	0x0800c74d
 800c558:	0800c74d 	.word	0x0800c74d
 800c55c:	0800c74d 	.word	0x0800c74d
 800c560:	0800c74d 	.word	0x0800c74d
 800c564:	0800c74d 	.word	0x0800c74d
 800c568:	0800c74d 	.word	0x0800c74d
 800c56c:	0800c74d 	.word	0x0800c74d
 800c570:	0800c74d 	.word	0x0800c74d
 800c574:	0800c74d 	.word	0x0800c74d
 800c578:	0800c74d 	.word	0x0800c74d
 800c57c:	0800c74d 	.word	0x0800c74d
 800c580:	0800c74d 	.word	0x0800c74d
 800c584:	0800c74d 	.word	0x0800c74d
 800c588:	0800c74d 	.word	0x0800c74d
 800c58c:	0800c74d 	.word	0x0800c74d
 800c590:	0800c74d 	.word	0x0800c74d
 800c594:	0800c74d 	.word	0x0800c74d
 800c598:	0800c74d 	.word	0x0800c74d
 800c59c:	0800c74d 	.word	0x0800c74d
 800c5a0:	0800c74d 	.word	0x0800c74d
 800c5a4:	0800c74d 	.word	0x0800c74d
 800c5a8:	0800c74d 	.word	0x0800c74d
 800c5ac:	0800c74d 	.word	0x0800c74d
 800c5b0:	0800c74d 	.word	0x0800c74d
 800c5b4:	0800c74d 	.word	0x0800c74d
 800c5b8:	0800c74d 	.word	0x0800c74d
 800c5bc:	0800c74d 	.word	0x0800c74d
 800c5c0:	0800c74d 	.word	0x0800c74d
 800c5c4:	0800c74d 	.word	0x0800c74d
 800c5c8:	0800c74d 	.word	0x0800c74d
 800c5cc:	0800c74d 	.word	0x0800c74d
 800c5d0:	0800c74d 	.word	0x0800c74d
 800c5d4:	0800c74d 	.word	0x0800c74d
 800c5d8:	0800c74d 	.word	0x0800c74d
 800c5dc:	0800c74d 	.word	0x0800c74d
 800c5e0:	0800c74d 	.word	0x0800c74d
 800c5e4:	0800c74d 	.word	0x0800c74d
 800c5e8:	0800c74d 	.word	0x0800c74d
 800c5ec:	0800c74d 	.word	0x0800c74d
 800c5f0:	0800c74d 	.word	0x0800c74d
 800c5f4:	0800c74d 	.word	0x0800c74d
 800c5f8:	0800c74d 	.word	0x0800c74d
 800c5fc:	0800c74d 	.word	0x0800c74d
 800c600:	0800c74d 	.word	0x0800c74d
 800c604:	0800c74d 	.word	0x0800c74d
 800c608:	0800c74d 	.word	0x0800c74d
 800c60c:	0800c74d 	.word	0x0800c74d
 800c610:	0800c74d 	.word	0x0800c74d
 800c614:	0800c74d 	.word	0x0800c74d
 800c618:	0800c74d 	.word	0x0800c74d
 800c61c:	0800c74d 	.word	0x0800c74d
 800c620:	0800c74d 	.word	0x0800c74d
 800c624:	0800c74d 	.word	0x0800c74d
 800c628:	0800c74d 	.word	0x0800c74d
 800c62c:	0800c74d 	.word	0x0800c74d
 800c630:	0800c74d 	.word	0x0800c74d
 800c634:	0800c74d 	.word	0x0800c74d
 800c638:	0800c74d 	.word	0x0800c74d
 800c63c:	0800c74d 	.word	0x0800c74d
 800c640:	0800c74d 	.word	0x0800c74d
 800c644:	0800c74d 	.word	0x0800c74d
 800c648:	0800c74d 	.word	0x0800c74d
 800c64c:	0800c749 	.word	0x0800c749
    case 100: return "Continue";
 800c650:	4b42      	ldr	r3, [pc, #264]	@ (800c75c <mg_http_status_code_str+0x8f8>)
 800c652:	e07c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800c654:	4b42      	ldr	r3, [pc, #264]	@ (800c760 <mg_http_status_code_str+0x8fc>)
 800c656:	e07a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 800c658:	4b42      	ldr	r3, [pc, #264]	@ (800c764 <mg_http_status_code_str+0x900>)
 800c65a:	e078      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800c65c:	4b42      	ldr	r3, [pc, #264]	@ (800c768 <mg_http_status_code_str+0x904>)
 800c65e:	e076      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 800c660:	4b42      	ldr	r3, [pc, #264]	@ (800c76c <mg_http_status_code_str+0x908>)
 800c662:	e074      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800c664:	4b42      	ldr	r3, [pc, #264]	@ (800c770 <mg_http_status_code_str+0x90c>)
 800c666:	e072      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 800c668:	4b42      	ldr	r3, [pc, #264]	@ (800c774 <mg_http_status_code_str+0x910>)
 800c66a:	e070      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800c66c:	4b42      	ldr	r3, [pc, #264]	@ (800c778 <mg_http_status_code_str+0x914>)
 800c66e:	e06e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 800c670:	4b42      	ldr	r3, [pc, #264]	@ (800c77c <mg_http_status_code_str+0x918>)
 800c672:	e06c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800c674:	4b42      	ldr	r3, [pc, #264]	@ (800c780 <mg_http_status_code_str+0x91c>)
 800c676:	e06a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 800c678:	4b42      	ldr	r3, [pc, #264]	@ (800c784 <mg_http_status_code_str+0x920>)
 800c67a:	e068      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800c67c:	4b42      	ldr	r3, [pc, #264]	@ (800c788 <mg_http_status_code_str+0x924>)
 800c67e:	e066      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 800c680:	4b42      	ldr	r3, [pc, #264]	@ (800c78c <mg_http_status_code_str+0x928>)
 800c682:	e064      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800c684:	4b42      	ldr	r3, [pc, #264]	@ (800c790 <mg_http_status_code_str+0x92c>)
 800c686:	e062      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 800c688:	4b42      	ldr	r3, [pc, #264]	@ (800c794 <mg_http_status_code_str+0x930>)
 800c68a:	e060      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800c68c:	4b42      	ldr	r3, [pc, #264]	@ (800c798 <mg_http_status_code_str+0x934>)
 800c68e:	e05e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 800c690:	4b42      	ldr	r3, [pc, #264]	@ (800c79c <mg_http_status_code_str+0x938>)
 800c692:	e05c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800c694:	4b42      	ldr	r3, [pc, #264]	@ (800c7a0 <mg_http_status_code_str+0x93c>)
 800c696:	e05a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 800c698:	4b42      	ldr	r3, [pc, #264]	@ (800c7a4 <mg_http_status_code_str+0x940>)
 800c69a:	e058      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800c69c:	4b42      	ldr	r3, [pc, #264]	@ (800c7a8 <mg_http_status_code_str+0x944>)
 800c69e:	e056      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 800c6a0:	4b42      	ldr	r3, [pc, #264]	@ (800c7ac <mg_http_status_code_str+0x948>)
 800c6a2:	e054      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800c6a4:	4b42      	ldr	r3, [pc, #264]	@ (800c7b0 <mg_http_status_code_str+0x94c>)
 800c6a6:	e052      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 800c6a8:	4b42      	ldr	r3, [pc, #264]	@ (800c7b4 <mg_http_status_code_str+0x950>)
 800c6aa:	e050      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800c6ac:	4b42      	ldr	r3, [pc, #264]	@ (800c7b8 <mg_http_status_code_str+0x954>)
 800c6ae:	e04e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 800c6b0:	4b42      	ldr	r3, [pc, #264]	@ (800c7bc <mg_http_status_code_str+0x958>)
 800c6b2:	e04c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800c6b4:	4b42      	ldr	r3, [pc, #264]	@ (800c7c0 <mg_http_status_code_str+0x95c>)
 800c6b6:	e04a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 800c6b8:	4b42      	ldr	r3, [pc, #264]	@ (800c7c4 <mg_http_status_code_str+0x960>)
 800c6ba:	e048      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800c6bc:	4b42      	ldr	r3, [pc, #264]	@ (800c7c8 <mg_http_status_code_str+0x964>)
 800c6be:	e046      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 800c6c0:	4b42      	ldr	r3, [pc, #264]	@ (800c7cc <mg_http_status_code_str+0x968>)
 800c6c2:	e044      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800c6c4:	4b42      	ldr	r3, [pc, #264]	@ (800c7d0 <mg_http_status_code_str+0x96c>)
 800c6c6:	e042      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 800c6c8:	4b42      	ldr	r3, [pc, #264]	@ (800c7d4 <mg_http_status_code_str+0x970>)
 800c6ca:	e040      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800c6cc:	4b42      	ldr	r3, [pc, #264]	@ (800c7d8 <mg_http_status_code_str+0x974>)
 800c6ce:	e03e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 800c6d0:	4b42      	ldr	r3, [pc, #264]	@ (800c7dc <mg_http_status_code_str+0x978>)
 800c6d2:	e03c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800c6d4:	4b42      	ldr	r3, [pc, #264]	@ (800c7e0 <mg_http_status_code_str+0x97c>)
 800c6d6:	e03a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 800c6d8:	4b42      	ldr	r3, [pc, #264]	@ (800c7e4 <mg_http_status_code_str+0x980>)
 800c6da:	e038      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800c6dc:	4b42      	ldr	r3, [pc, #264]	@ (800c7e8 <mg_http_status_code_str+0x984>)
 800c6de:	e036      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 800c6e0:	4b42      	ldr	r3, [pc, #264]	@ (800c7ec <mg_http_status_code_str+0x988>)
 800c6e2:	e034      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800c6e4:	4b42      	ldr	r3, [pc, #264]	@ (800c7f0 <mg_http_status_code_str+0x98c>)
 800c6e6:	e032      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 800c6e8:	4b42      	ldr	r3, [pc, #264]	@ (800c7f4 <mg_http_status_code_str+0x990>)
 800c6ea:	e030      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800c6ec:	4b42      	ldr	r3, [pc, #264]	@ (800c7f8 <mg_http_status_code_str+0x994>)
 800c6ee:	e02e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 800c6f0:	4b42      	ldr	r3, [pc, #264]	@ (800c7fc <mg_http_status_code_str+0x998>)
 800c6f2:	e02c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800c6f4:	4b42      	ldr	r3, [pc, #264]	@ (800c800 <mg_http_status_code_str+0x99c>)
 800c6f6:	e02a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 800c6f8:	4b42      	ldr	r3, [pc, #264]	@ (800c804 <mg_http_status_code_str+0x9a0>)
 800c6fa:	e028      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800c6fc:	4b42      	ldr	r3, [pc, #264]	@ (800c808 <mg_http_status_code_str+0x9a4>)
 800c6fe:	e026      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 800c700:	4b42      	ldr	r3, [pc, #264]	@ (800c80c <mg_http_status_code_str+0x9a8>)
 800c702:	e024      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800c704:	4b42      	ldr	r3, [pc, #264]	@ (800c810 <mg_http_status_code_str+0x9ac>)
 800c706:	e022      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 800c708:	4b42      	ldr	r3, [pc, #264]	@ (800c814 <mg_http_status_code_str+0x9b0>)
 800c70a:	e020      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 800c70c:	4b42      	ldr	r3, [pc, #264]	@ (800c818 <mg_http_status_code_str+0x9b4>)
 800c70e:	e01e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 800c710:	4b42      	ldr	r3, [pc, #264]	@ (800c81c <mg_http_status_code_str+0x9b8>)
 800c712:	e01c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800c714:	4b42      	ldr	r3, [pc, #264]	@ (800c820 <mg_http_status_code_str+0x9bc>)
 800c716:	e01a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 800c718:	4b42      	ldr	r3, [pc, #264]	@ (800c824 <mg_http_status_code_str+0x9c0>)
 800c71a:	e018      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 800c71c:	4b42      	ldr	r3, [pc, #264]	@ (800c828 <mg_http_status_code_str+0x9c4>)
 800c71e:	e016      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 800c720:	4b42      	ldr	r3, [pc, #264]	@ (800c82c <mg_http_status_code_str+0x9c8>)
 800c722:	e014      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800c724:	4b42      	ldr	r3, [pc, #264]	@ (800c830 <mg_http_status_code_str+0x9cc>)
 800c726:	e012      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 800c728:	4b42      	ldr	r3, [pc, #264]	@ (800c834 <mg_http_status_code_str+0x9d0>)
 800c72a:	e010      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 800c72c:	4b42      	ldr	r3, [pc, #264]	@ (800c838 <mg_http_status_code_str+0x9d4>)
 800c72e:	e00e      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 800c730:	4b42      	ldr	r3, [pc, #264]	@ (800c83c <mg_http_status_code_str+0x9d8>)
 800c732:	e00c      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800c734:	4b42      	ldr	r3, [pc, #264]	@ (800c840 <mg_http_status_code_str+0x9dc>)
 800c736:	e00a      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 800c738:	4b42      	ldr	r3, [pc, #264]	@ (800c844 <mg_http_status_code_str+0x9e0>)
 800c73a:	e008      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 800c73c:	4b42      	ldr	r3, [pc, #264]	@ (800c848 <mg_http_status_code_str+0x9e4>)
 800c73e:	e006      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 800c740:	4b42      	ldr	r3, [pc, #264]	@ (800c84c <mg_http_status_code_str+0x9e8>)
 800c742:	e004      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800c744:	4b42      	ldr	r3, [pc, #264]	@ (800c850 <mg_http_status_code_str+0x9ec>)
 800c746:	e002      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 800c748:	4b42      	ldr	r3, [pc, #264]	@ (800c854 <mg_http_status_code_str+0x9f0>)
 800c74a:	e000      	b.n	800c74e <mg_http_status_code_str+0x8ea>
    default: return "";
 800c74c:	4b42      	ldr	r3, [pc, #264]	@ (800c858 <mg_http_status_code_str+0x9f4>)
  }
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	0802d6d0 	.word	0x0802d6d0
 800c760:	0802d6dc 	.word	0x0802d6dc
 800c764:	0802d6f0 	.word	0x0802d6f0
 800c768:	0802d6fc 	.word	0x0802d6fc
 800c76c:	0802d700 	.word	0x0802d700
 800c770:	0802d708 	.word	0x0802d708
 800c774:	0802d714 	.word	0x0802d714
 800c778:	0802d734 	.word	0x0802d734
 800c77c:	0802d740 	.word	0x0802d740
 800c780:	0802d750 	.word	0x0802d750
 800c784:	0802d760 	.word	0x0802d760
 800c788:	0802d770 	.word	0x0802d770
 800c78c:	0802d784 	.word	0x0802d784
 800c790:	0802d78c 	.word	0x0802d78c
 800c794:	0802d7a0 	.word	0x0802d7a0
 800c798:	0802d7b4 	.word	0x0802d7b4
 800c79c:	0802d7bc 	.word	0x0802d7bc
 800c7a0:	0802d7c8 	.word	0x0802d7c8
 800c7a4:	0802d7d8 	.word	0x0802d7d8
 800c7a8:	0802d7e4 	.word	0x0802d7e4
 800c7ac:	0802d7f8 	.word	0x0802d7f8
 800c7b0:	0802d80c 	.word	0x0802d80c
 800c7b4:	0802d818 	.word	0x0802d818
 800c7b8:	0802d828 	.word	0x0802d828
 800c7bc:	0802d83c 	.word	0x0802d83c
 800c7c0:	0802d848 	.word	0x0802d848
 800c7c4:	0802d854 	.word	0x0802d854
 800c7c8:	0802d868 	.word	0x0802d868
 800c7cc:	0802d878 	.word	0x0802d878
 800c7d0:	0802d898 	.word	0x0802d898
 800c7d4:	0802d8a8 	.word	0x0802d8a8
 800c7d8:	0802d8b4 	.word	0x0802d8b4
 800c7dc:	0802d8bc 	.word	0x0802d8bc
 800c7e0:	0802d8cc 	.word	0x0802d8cc
 800c7e4:	0802d8e0 	.word	0x0802d8e0
 800c7e8:	0802d8f4 	.word	0x0802d8f4
 800c7ec:	0802d90c 	.word	0x0802d90c
 800c7f0:	0802d924 	.word	0x0802d924
 800c7f4:	0802d944 	.word	0x0802d944
 800c7f8:	0802d958 	.word	0x0802d958
 800c7fc:	0802d968 	.word	0x0802d968
 800c800:	0802d97c 	.word	0x0802d97c
 800c804:	0802d994 	.word	0x0802d994
 800c808:	0802d99c 	.word	0x0802d99c
 800c80c:	0802d9b0 	.word	0x0802d9b0
 800c810:	0802d9c4 	.word	0x0802d9c4
 800c814:	0802d9dc 	.word	0x0802d9dc
 800c818:	0802d9f0 	.word	0x0802d9f0
 800c81c:	0802da10 	.word	0x0802da10
 800c820:	0802da34 	.word	0x0802da34
 800c824:	0802da54 	.word	0x0802da54
 800c828:	0802da6c 	.word	0x0802da6c
 800c82c:	0802da84 	.word	0x0802da84
 800c830:	0802da94 	.word	0x0802da94
 800c834:	0802daa0 	.word	0x0802daa0
 800c838:	0802dab4 	.word	0x0802dab4
 800c83c:	0802dac4 	.word	0x0802dac4
 800c840:	0802dae0 	.word	0x0802dae0
 800c844:	0802daf8 	.word	0x0802daf8
 800c848:	0802db10 	.word	0x0802db10
 800c84c:	0802db20 	.word	0x0802db20
 800c850:	0802db30 	.word	0x0802db30
 800c854:	0802db50 	.word	0x0802db50
 800c858:	0802db70 	.word	0x0802db70

0800c85c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 800c85c:	b408      	push	{r3}
 800c85e:	b580      	push	{r7, lr}
 800c860:	b08b      	sub	sp, #44	@ 0x2c
 800c862:	af02      	add	r7, sp, #8
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800c86a:	68b8      	ldr	r0, [r7, #8]
 800c86c:	f7ff fafa 	bl	800be64 <mg_http_status_code_str>
 800c870:	4602      	mov	r2, r0
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <mg_http_reply+0x20>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	e000      	b.n	800c87e <mg_http_reply+0x22>
 800c87c:	4b1f      	ldr	r3, [pc, #124]	@ (800c8fc <mg_http_reply+0xa0>)
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	4613      	mov	r3, r2
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	491e      	ldr	r1, [pc, #120]	@ (800c900 <mg_http_reply+0xa4>)
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f003 f8b8 	bl	800f9fc <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c890:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800c892:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c896:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800c89e:	f107 0314 	add.w	r3, r7, #20
 800c8a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8a4:	4817      	ldr	r0, [pc, #92]	@ (800c904 <mg_http_reply+0xa8>)
 800c8a6:	f7fd feeb 	bl	800a680 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ae:	2b10      	cmp	r3, #16
 800c8b0:	d916      	bls.n	800c8e0 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	3b0f      	subs	r3, #15
 800c8ba:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800c8c4:	4a10      	ldr	r2, [pc, #64]	@ (800c908 <mg_http_reply+0xac>)
 800c8c6:	210b      	movs	r1, #11
 800c8c8:	f007 fb78 	bl	8013fbc <mg_snprintf>
 800c8cc:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8d2:	69f9      	ldr	r1, [r7, #28]
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	440b      	add	r3, r1
 800c8d8:	3b0f      	subs	r3, #15
 800c8da:	4413      	add	r3, r2
 800c8dc:	2220      	movs	r2, #32
 800c8de:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800c8e6:	f023 0301 	bic.w	r3, r3, #1
 800c8ea:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800c8ee:	bf00      	nop
 800c8f0:	3724      	adds	r7, #36	@ 0x24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8f8:	b001      	add	sp, #4
 800c8fa:	4770      	bx	lr
 800c8fc:	0802db70 	.word	0x0802db70
 800c900:	0802db74 	.word	0x0802db74
 800c904:	08013f4d 	.word	0x08013f4d
 800c908:	0802dba8 	.word	0x0802dba8

0800c90c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fa7c 	bl	800ae18 <mg_fs_close>
  c->pfn_data = NULL;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a07      	ldr	r2, [pc, #28]	@ (800c948 <restore_http_cb+0x3c>)
 800c92c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800c936:	f023 0301 	bic.w	r3, r3, #1
 800c93a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	0800dc7d 	.word	0x0800dc7d

0800c94c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800c94c:	b5b0      	push	{r4, r5, r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af04      	add	r7, sp, #16
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	461c      	mov	r4, r3
 800c95e:	4615      	mov	r5, r2
 800c960:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c964:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c968:	e9cd 2300 	strd	r2, r3, [sp]
 800c96c:	4a04      	ldr	r2, [pc, #16]	@ (800c980 <mg_http_etag+0x34>)
 800c96e:	68b9      	ldr	r1, [r7, #8]
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f007 fb23 	bl	8013fbc <mg_snprintf>
  return buf;
 800c976:	68fb      	ldr	r3, [r7, #12]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bdb0      	pop	{r4, r5, r7, pc}
 800c980:	0802dbb0 	.word	0x0802dbb0

0800c984 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	@ 0x28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	2b08      	cmp	r3, #8
 800c994:	d002      	beq.n	800c99c <static_cb+0x18>
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d148      	bne.n	800ca2e <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9a2:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800c9a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c9a8:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	33a4      	adds	r3, #164	@ 0xa4
 800c9ae:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9b4:	69fa      	ldr	r2, [r7, #28]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d905      	bls.n	800c9c6 <static_cb+0x42>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	3348      	adds	r3, #72	@ 0x48
 800c9be:	69f9      	ldr	r1, [r7, #28]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f001 fdc9 	bl	800e558 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d234      	bcs.n	800ca3c <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d902      	bls.n	800c9ee <static_cb+0x6a>
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	6a3a      	ldr	r2, [r7, #32]
 800c9f6:	6810      	ldr	r0, [r2, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ca00:	4411      	add	r1, r2
 800ca02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca04:	4798      	blx	r3
 800ca06:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	441a      	add	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	1ad2      	subs	r2, r2, r3
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10c      	bne.n	800ca40 <static_cb+0xbc>
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7ff ff70 	bl	800c90c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800ca2c:	e008      	b.n	800ca40 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d106      	bne.n	800ca42 <static_cb+0xbe>
    restore_http_cb(c);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f7ff ff69 	bl	800c90c <restore_http_cb>
 800ca3a:	e002      	b.n	800ca42 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800ca3c:	bf00      	nop
 800ca3e:	e000      	b.n	800ca42 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800ca40:	bf00      	nop
  }
  (void) ev_data;
}
 800ca42:	3728      	adds	r7, #40	@ 0x28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 800ca48:	b590      	push	{r4, r7, lr}
 800ca4a:	b093      	sub	sp, #76	@ 0x4c
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	1d38      	adds	r0, r7, #4
 800ca52:	e880 0006 	stmia.w	r0, {r1, r2}
 800ca56:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 800ca58:	f107 031c 	add.w	r3, r7, #28
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f00a fe70 	bl	8017744 <mg_str_s>
 800ca64:	f107 0314 	add.w	r3, r7, #20
 800ca68:	2201      	movs	r2, #1
 800ca6a:	4943      	ldr	r1, [pc, #268]	@ (800cb78 <guess_content_type+0x130>)
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f00a fe86 	bl	801777e <mg_str_n>
  size_t i = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800ca76:	e002      	b.n	800ca7e <guess_content_type+0x36>
 800ca78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d208      	bcs.n	800ca98 <guess_content_type+0x50>
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca8c:	1acb      	subs	r3, r1, r3
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	4413      	add	r3, r2
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca96:	d1ef      	bne.n	800ca78 <guess_content_type+0x30>
  path.buf += path.len - i;
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	68b9      	ldr	r1, [r7, #8]
 800ca9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9e:	1acb      	subs	r3, r1, r3
 800caa0:	4413      	add	r3, r2
 800caa2:	607b      	str	r3, [r7, #4]
  path.len = i;
 800caa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa6:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 800caa8:	e02b      	b.n	800cb02 <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 800caaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800cab2:	213d      	movs	r1, #61	@ 0x3d
 800cab4:	9100      	str	r1, [sp, #0]
 800cab6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800caba:	c903      	ldmia	r1, {r0, r1}
 800cabc:	f00b f840 	bl	8017b40 <mg_span>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d01d      	beq.n	800cb02 <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800cac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800caca:	cb0c      	ldmia	r3, {r2, r3}
 800cacc:	f107 0114 	add.w	r1, r7, #20
 800cad0:	c903      	ldmia	r1, {r0, r1}
 800cad2:	f00a feb8 	bl	8017846 <mg_strcmp>
 800cad6:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d009      	beq.n	800caf0 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800cadc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cae0:	cb0c      	ldmia	r3, {r2, r3}
 800cae2:	1d39      	adds	r1, r7, #4
 800cae4:	c903      	ldmia	r1, {r0, r1}
 800cae6:	f00a feae 	bl	8017846 <mg_strcmp>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d108      	bne.n	800cb02 <guess_content_type+0xba>
      return v;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	461a      	mov	r2, r3
 800caf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cafc:	e882 0003 	stmia.w	r2, {r0, r1}
 800cb00:	e036      	b.n	800cb70 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800cb02:	f107 031c 	add.w	r3, r7, #28
 800cb06:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800cb0a:	212c      	movs	r1, #44	@ 0x2c
 800cb0c:	9100      	str	r1, [sp, #0]
 800cb0e:	f107 011c 	add.w	r1, r7, #28
 800cb12:	c903      	ldmia	r1, {r0, r1}
 800cb14:	f00b f814 	bl	8017b40 <mg_span>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1c5      	bne.n	800caaa <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800cb1e:	2300      	movs	r3, #0
 800cb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb22:	e01a      	b.n	800cb5a <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800cb24:	4a15      	ldr	r2, [pc, #84]	@ (800cb7c <guess_content_type+0x134>)
 800cb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	4413      	add	r3, r2
 800cb2c:	cb0c      	ldmia	r3, {r2, r3}
 800cb2e:	1d39      	adds	r1, r7, #4
 800cb30:	c903      	ldmia	r1, {r0, r1}
 800cb32:	f00a fe88 	bl	8017846 <mg_strcmp>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10b      	bne.n	800cb54 <guess_content_type+0x10c>
 800cb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3e:	3301      	adds	r3, #1
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	4a0e      	ldr	r2, [pc, #56]	@ (800cb7c <guess_content_type+0x134>)
 800cb44:	460c      	mov	r4, r1
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	4413      	add	r3, r2
 800cb4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800cb52:	e00d      	b.n	800cb70 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800cb54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb56:	3302      	adds	r3, #2
 800cb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb5a:	4a08      	ldr	r2, [pc, #32]	@ (800cb7c <guess_content_type+0x134>)
 800cb5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1de      	bne.n	800cb24 <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	4905      	ldr	r1, [pc, #20]	@ (800cb80 <guess_content_type+0x138>)
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f00a fdea 	bl	8017744 <mg_str_s>
}
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	3744      	adds	r7, #68	@ 0x44
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd90      	pop	{r4, r7, pc}
 800cb78:	0802de20 	.word	0x0802de20
 800cb7c:	24000064 	.word	0x24000064
 800cb80:	0802dc9c 	.word	0x0802dc9c

0800cb84 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08c      	sub	sp, #48	@ 0x30
 800cb88:	af02      	add	r7, sp, #8
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800cb94:	2300      	movs	r3, #0
 800cb96:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb98:	e058      	b.n	800cc4c <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	3306      	adds	r3, #6
 800cba2:	18d1      	adds	r1, r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	1f9a      	subs	r2, r3, #6
 800cbae:	f107 0310 	add.w	r3, r7, #16
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f00a fde3 	bl	801777e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	4413      	add	r3, r2
 800cbc0:	2206      	movs	r2, #6
 800cbc2:	4929      	ldr	r1, [pc, #164]	@ (800cc68 <getrange+0xe4>)
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f01b fdc1 	bl	802874c <memcmp>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d139      	bne.n	800cc44 <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 800cbd0:	f107 0310 	add.w	r3, r7, #16
 800cbd4:	f107 0218 	add.w	r2, r7, #24
 800cbd8:	212d      	movs	r1, #45	@ 0x2d
 800cbda:	9100      	str	r1, [sp, #0]
 800cbdc:	f107 0110 	add.w	r1, r7, #16
 800cbe0:	c903      	ldmia	r1, {r0, r1}
 800cbe2:	f00a ffad 	bl	8017b40 <mg_span>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d01d      	beq.n	800cc28 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	f107 0318 	add.w	r3, r7, #24
 800cbf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbf6:	f7fe fb6d 	bl	800b2d4 <mg_to_size_t>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <getrange+0x82>
 800cc00:	6a3b      	ldr	r3, [r7, #32]
 800cc02:	3301      	adds	r3, #1
 800cc04:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d026      	beq.n	800cc5a <getrange+0xd6>
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	f107 0310 	add.w	r3, r7, #16
 800cc12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc16:	f7fe fb5d 	bl	800b2d4 <mg_to_size_t>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d01c      	beq.n	800cc5a <getrange+0xd6>
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	3301      	adds	r3, #1
 800cc24:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 800cc26:	e018      	b.n	800cc5a <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	f107 0310 	add.w	r3, r7, #16
 800cc2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc32:	f7fe fb4f 	bl	800b2d4 <mg_to_size_t>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00e      	beq.n	800cc5a <getrange+0xd6>
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	623b      	str	r3, [r7, #32]
 800cc42:	e00b      	b.n	800cc5c <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800cc44:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 800cc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc48:	3301      	adds	r3, #1
 800cc4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	1d9a      	adds	r2, r3, #6
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d3a0      	bcc.n	800cb9a <getrange+0x16>
 800cc58:	e000      	b.n	800cc5c <getrange+0xd8>
    break;
 800cc5a:	bf00      	nop
  }
  return (int) numparsed;
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3728      	adds	r7, #40	@ 0x28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	0802de24 	.word	0x0802de24

0800cc6c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc70:	b0f3      	sub	sp, #460	@ 0x1cc
 800cc72:	af0a      	add	r7, sp, #40	@ 0x28
 800cc74:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800cc78:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 800cc7c:	6020      	str	r0, [r4, #0]
 800cc7e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800cc82:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 800cc86:	6001      	str	r1, [r0, #0]
 800cc88:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800cc8c:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 800cc90:	600a      	str	r2, [r1, #0]
 800cc92:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800cc96:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800cc9a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800cc9c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cca0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d006      	beq.n	800ccba <mg_http_serve_file+0x4e>
 800ccac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ccb0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	e000      	b.n	800ccbc <mg_http_serve_file+0x50>
 800ccba:	4ba4      	ldr	r3, [pc, #656]	@ (800cf4c <mg_http_serve_file+0x2e0>)
 800ccbc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 800cccc:	f04f 0200 	mov.w	r2, #0
 800ccd0:	f04f 0300 	mov.w	r3, #0
 800ccd4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800ccde:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800cce2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cce6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800ccea:	6819      	ldr	r1, [r3, #0]
 800ccec:	4610      	mov	r0, r2
 800ccee:	f00a fd29 	bl	8017744 <mg_str_s>
 800ccf2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ccf6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800cd02:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 800cd06:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800cd0a:	ca06      	ldmia	r2, {r1, r2}
 800cd0c:	f7ff fe9c 	bl	800ca48 <guess_content_type>
  bool gzip = false;
 800cd10:	2300      	movs	r3, #0
 800cd12:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 800cd16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cd1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d05c      	beq.n	800cdde <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800cd24:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cd28:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800cd2c:	4988      	ldr	r1, [pc, #544]	@ (800cf50 <mg_http_serve_file+0x2e4>)
 800cd2e:	6818      	ldr	r0, [r3, #0]
 800cd30:	f7fe fd1e 	bl	800b770 <mg_http_get_header>
 800cd34:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 800cd38:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d03e      	beq.n	800cdbe <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 800cd40:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800cd44:	6859      	ldr	r1, [r3, #4]
 800cd46:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	4881      	ldr	r0, [pc, #516]	@ (800cf54 <mg_http_serve_file+0x2e8>)
 800cd50:	f007 f96a 	bl	8014028 <mg_mprintf>
 800cd54:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 800cd58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d02a      	beq.n	800cdb6 <mg_http_serve_file+0x14a>
 800cd60:	497d      	ldr	r1, [pc, #500]	@ (800cf58 <mg_http_serve_file+0x2ec>)
 800cd62:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800cd66:	f01b fd6b 	bl	8028840 <strstr>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d022      	beq.n	800cdb6 <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 800cd70:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cd74:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800cd78:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a77      	ldr	r2, [pc, #476]	@ (800cf5c <mg_http_serve_file+0x2f0>)
 800cd80:	2164      	movs	r1, #100	@ 0x64
 800cd82:	f007 f91b 	bl	8013fbc <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800cd86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800cd92:	f7fe f819 	bl	800adc8 <mg_fs_open>
 800cd96:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 800cd9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d009      	beq.n	800cdb6 <mg_http_serve_file+0x14a>
 800cda2:	2301      	movs	r3, #1
 800cda4:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 800cda8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cdac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800cdb0:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800cdb4:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 800cdb6:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800cdba:	f019 fd4b 	bl	8026854 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800cdbe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10b      	bne.n	800cdde <mg_http_serve_file+0x172>
 800cdc6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cdca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800cdce:	2201      	movs	r2, #1
 800cdd0:	6819      	ldr	r1, [r3, #0]
 800cdd2:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800cdd6:	f7fd fff7 	bl	800adc8 <mg_fs_open>
 800cdda:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800cdde:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d144      	bne.n	800ce70 <mg_http_serve_file+0x204>
 800cde6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cdea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d03c      	beq.n	800ce70 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800cdf6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cdfa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	2201      	movs	r2, #1
 800ce04:	4619      	mov	r1, r3
 800ce06:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800ce0a:	f7fd ffdd 	bl	800adc8 <mg_fs_open>
 800ce0e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 800ce12:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ce16:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800ce1a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800ce1e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800ce22:	6812      	ldr	r2, [r2, #0]
 800ce24:	6912      	ldr	r2, [r2, #16]
 800ce26:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 800ce28:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800ce2c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ce30:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800ce34:	6819      	ldr	r1, [r3, #0]
 800ce36:	4610      	mov	r0, r2
 800ce38:	f00a fc84 	bl	8017744 <mg_str_s>
 800ce3c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ce40:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800ce4c:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 800ce50:	f107 0010 	add.w	r0, r7, #16
 800ce54:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800ce58:	ca06      	ldmia	r2, {r1, r2}
 800ce5a:	f7ff fdf5 	bl	800ca48 <guess_content_type>
 800ce5e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ce62:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800ce66:	4623      	mov	r3, r4
 800ce68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce6c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 800ce70:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00f      	beq.n	800ce98 <mg_http_serve_file+0x22c>
 800ce78:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800ce7c:	681c      	ldr	r4, [r3, #0]
 800ce7e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800ce82:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800ce86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ce8a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800ce8e:	6818      	ldr	r0, [r3, #0]
 800ce90:	47a0      	blx	r4
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d114      	bne.n	800cec2 <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 800ce98:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ce9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689a      	ldr	r2, [r3, #8]
 800cea4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cea8:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800ceac:	4b2c      	ldr	r3, [pc, #176]	@ (800cf60 <mg_http_serve_file+0x2f4>)
 800ceae:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800ceb2:	6800      	ldr	r0, [r0, #0]
 800ceb4:	f7ff fcd2 	bl	800c85c <mg_http_reply>
    mg_fs_close(fd);
 800ceb8:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800cebc:	f7fd ffac 	bl	800ae18 <mg_fs_close>
 800cec0:	e190      	b.n	800d1e4 <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800cec2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800cec6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800ceca:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800cece:	e9cd 2300 	strd	r2, r3, [sp]
 800ced2:	460a      	mov	r2, r1
 800ced4:	2140      	movs	r1, #64	@ 0x40
 800ced6:	f7ff fd39 	bl	800c94c <mg_http_etag>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d045      	beq.n	800cf6c <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800cee0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cee4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800cee8:	491e      	ldr	r1, [pc, #120]	@ (800cf64 <mg_http_serve_file+0x2f8>)
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	f7fe fc40 	bl	800b770 <mg_http_get_header>
 800cef0:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800cef4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d037      	beq.n	800cf6c <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 800cefc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800cf00:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f00a fc1c 	bl	8017744 <mg_str_s>
 800cf0c:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 800cf10:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800cf14:	cb0c      	ldmia	r3, {r2, r3}
 800cf16:	c903      	ldmia	r1, {r0, r1}
 800cf18:	f00a fcd7 	bl	80178ca <mg_strcasecmp>
 800cf1c:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d124      	bne.n	800cf6c <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 800cf22:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800cf26:	f7fd ff77 	bl	800ae18 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800cf2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cf2e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	689a      	ldr	r2, [r3, #8]
 800cf36:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cf3a:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800cf3e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf68 <mg_http_serve_file+0x2fc>)
 800cf40:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800cf44:	6800      	ldr	r0, [r0, #0]
 800cf46:	f7ff fc89 	bl	800c85c <mg_http_reply>
 800cf4a:	e14b      	b.n	800d1e4 <mg_http_serve_file+0x578>
 800cf4c:	2400003c 	.word	0x2400003c
 800cf50:	0802de2c 	.word	0x0802de2c
 800cf54:	0802d610 	.word	0x0802d610
 800cf58:	0802de3c 	.word	0x0802de3c
 800cf5c:	0802de44 	.word	0x0802de44
 800cf60:	0802de4c 	.word	0x0802de4c
 800cf64:	0802de58 	.word	0x0802de58
 800cf68:	0802db70 	.word	0x0802db70
  } else {
    int n, status = 200;
 800cf6c:	23c8      	movs	r3, #200	@ 0xc8
 800cf6e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800cf72:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cf76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cf82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf8e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800cf92:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cf96:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800cf9a:	4995      	ldr	r1, [pc, #596]	@ (800d1f0 <mg_http_serve_file+0x584>)
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	f7fe fbe7 	bl	800b770 <mg_http_get_header>
 800cfa2:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 800cfa6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cfaa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800cfae:	2200      	movs	r2, #0
 800cfb0:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800cfb2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f000 808e 	beq.w	800d0d8 <mg_http_serve_file+0x46c>
 800cfbc:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800cfc0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 800cfca:	f7ff fddb 	bl	800cb84 <getrange>
 800cfce:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800cfd2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	dd7e      	ble.n	800d0d8 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800cfda:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d107      	bne.n	800cff2 <mg_http_serve_file+0x386>
 800cfe2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800cfe6:	1e5a      	subs	r2, r3, #1
 800cfe8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cfec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800cff0:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800cff2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800cff6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d000:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d808      	bhi.n	800d01c <mg_http_serve_file+0x3b0>
 800d00a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d00e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800d018:	429a      	cmp	r2, r3
 800d01a:	d817      	bhi.n	800d04c <mg_http_serve_file+0x3e0>
        status = 416;
 800d01c:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800d020:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 800d024:	2300      	movs	r3, #0
 800d026:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800d02a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d02e:	2200      	movs	r2, #0
 800d030:	60bb      	str	r3, [r7, #8]
 800d032:	60fa      	str	r2, [r7, #12]
 800d034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d038:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d03c:	e9cd 1200 	strd	r1, r2, [sp]
 800d040:	4a6c      	ldr	r2, [pc, #432]	@ (800d1f4 <mg_http_serve_file+0x588>)
 800d042:	2164      	movs	r1, #100	@ 0x64
 800d044:	4618      	mov	r0, r3
 800d046:	f006 ffb9 	bl	8013fbc <mg_snprintf>
 800d04a:	e045      	b.n	800d0d8 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800d04c:	23ce      	movs	r3, #206	@ 0xce
 800d04e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800d052:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d056:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d060:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	3301      	adds	r3, #1
 800d06a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800d06e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d072:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2200      	movs	r2, #0
 800d07a:	469a      	mov	sl, r3
 800d07c:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800d07e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d082:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800d08c:	4413      	add	r3, r2
 800d08e:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800d090:	2200      	movs	r2, #0
 800d092:	461d      	mov	r5, r3
 800d094:	4616      	mov	r6, r2
 800d096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d09a:	2200      	movs	r2, #0
 800d09c:	603b      	str	r3, [r7, #0]
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d0a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d0a8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d0ac:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800d0b0:	e9cd ab00 	strd	sl, fp, [sp]
 800d0b4:	4a50      	ldr	r2, [pc, #320]	@ (800d1f8 <mg_http_serve_file+0x58c>)
 800d0b6:	2164      	movs	r1, #100	@ 0x64
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f006 ff7f 	bl	8013fbc <mg_snprintf>
        fs->sk(fd->fd, r1);
 800d0be:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800d0c2:	699b      	ldr	r3, [r3, #24]
 800d0c4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800d0c8:	6810      	ldr	r0, [r2, #0]
 800d0ca:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800d0ce:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800d0d2:	6812      	ldr	r2, [r2, #0]
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800d0d8:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800d0dc:	f7fe fec2 	bl	800be64 <mg_http_status_code_str>
 800d0e0:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800d0e2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d0e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ea:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800d0ec:	461d      	mov	r5, r3
 800d0ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	4698      	mov	r8, r3
 800d100:	4689      	mov	r9, r1
 800d102:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <mg_http_serve_file+0x4a2>
 800d10a:	493c      	ldr	r1, [pc, #240]	@ (800d1fc <mg_http_serve_file+0x590>)
 800d10c:	e000      	b.n	800d110 <mg_http_serve_file+0x4a4>
 800d10e:	493c      	ldr	r1, [pc, #240]	@ (800d200 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800d110:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d114:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d006      	beq.n	800d12e <mg_http_serve_file+0x4c2>
 800d120:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d124:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	e000      	b.n	800d130 <mg_http_serve_file+0x4c4>
 800d12e:	4b34      	ldr	r3, [pc, #208]	@ (800d200 <mg_http_serve_file+0x594>)
 800d130:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800d134:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 800d138:	9308      	str	r3, [sp, #32]
 800d13a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d13e:	9307      	str	r3, [sp, #28]
 800d140:	9106      	str	r1, [sp, #24]
 800d142:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800d146:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800d14a:	9302      	str	r3, [sp, #8]
 800d14c:	9201      	str	r2, [sp, #4]
 800d14e:	9500      	str	r5, [sp, #0]
 800d150:	4623      	mov	r3, r4
 800d152:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800d156:	492b      	ldr	r1, [pc, #172]	@ (800d204 <mg_http_serve_file+0x598>)
 800d158:	6800      	ldr	r0, [r0, #0]
 800d15a:	f002 fc4f 	bl	800f9fc <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800d15e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800d162:	4929      	ldr	r1, [pc, #164]	@ (800d208 <mg_http_serve_file+0x59c>)
 800d164:	4618      	mov	r0, r3
 800d166:	f00a faed 	bl	8017744 <mg_str_s>
 800d16a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d16e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800d172:	6819      	ldr	r1, [r3, #0]
 800d174:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800d178:	cb0c      	ldmia	r3, {r2, r3}
 800d17a:	c903      	ldmia	r1, {r0, r1}
 800d17c:	f00a fba5 	bl	80178ca <mg_strcasecmp>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10f      	bne.n	800d1a6 <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 800d186:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d18a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800d194:	f023 0301 	bic.w	r3, r3, #1
 800d198:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800d19c:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800d1a0:	f7fd fe3a 	bl	800ae18 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800d1a4:	e01e      	b.n	800d1e4 <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800d1a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d1aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	33a4      	adds	r3, #164	@ 0xa4
 800d1b2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 800d1b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d1ba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a12      	ldr	r2, [pc, #72]	@ (800d20c <mg_http_serve_file+0x5a0>)
 800d1c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800d1c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800d1ca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800d1d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 800d1d8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800d1dc:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800d1e0:	601a      	str	r2, [r3, #0]
}
 800d1e2:	e7ff      	b.n	800d1e4 <mg_http_serve_file+0x578>
 800d1e4:	bf00      	nop
 800d1e6:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f0:	0802de68 	.word	0x0802de68
 800d1f4:	0802de70 	.word	0x0802de70
 800d1f8:	0802de90 	.word	0x0802de90
 800d1fc:	0802deb8 	.word	0x0802deb8
 800d200:	0802db70 	.word	0x0802db70
 800d204:	0802ded4 	.word	0x0802ded4
 800d208:	0802df24 	.word	0x0802df24
 800d20c:	0800c985 	.word	0x0800c985

0800d210 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800d210:	b082      	sub	sp, #8
 800d212:	b590      	push	{r4, r7, lr}
 800d214:	b08f      	sub	sp, #60	@ 0x3c
 800d216:	af02      	add	r7, sp, #8
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
 800d21e:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800d220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d222:	461a      	mov	r2, r3
 800d224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	4613      	mov	r3, r2
 800d22a:	4a9c      	ldr	r2, [pc, #624]	@ (800d49c <uri_to_path2+0x28c>)
 800d22c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d22e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d230:	f006 fec4 	bl	8013fbc <mg_snprintf>
 800d234:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800d236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d238:	3302      	adds	r3, #2
 800d23a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d809      	bhi.n	800d254 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800d240:	4b97      	ldr	r3, [pc, #604]	@ (800d4a0 <uri_to_path2+0x290>)
 800d242:	4a98      	ldr	r2, [pc, #608]	@ (800d4a4 <uri_to_path2+0x294>)
 800d244:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f7ff fb07 	bl	800c85c <mg_http_reply>
    return -1;
 800d24e:	f04f 33ff 	mov.w	r3, #4294967295
 800d252:	e143      	b.n	800d4dc <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800d254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d256:	3b01      	subs	r3, #1
 800d258:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d25a:	4413      	add	r3, r2
 800d25c:	2200      	movs	r2, #0
 800d25e:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800d260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d262:	2b00      	cmp	r3, #0
 800d264:	d012      	beq.n	800d28c <uri_to_path2+0x7c>
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	3b01      	subs	r3, #1
 800d26a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d26c:	4413      	add	r3, r2
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b2f      	cmp	r3, #47	@ 0x2f
 800d272:	d00b      	beq.n	800d28c <uri_to_path2+0x7c>
 800d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	627a      	str	r2, [r7, #36]	@ 0x24
 800d27a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d27c:	4413      	add	r3, r2
 800d27e:	222f      	movs	r2, #47	@ 0x2f
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d286:	4413      	add	r3, r2
 800d288:	2200      	movs	r2, #0
 800d28a:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800d28c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	429a      	cmp	r2, r3
 800d294:	d212      	bcs.n	800d2bc <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	689a      	ldr	r2, [r3, #8]
 800d29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29c:	18d0      	adds	r0, r2, r3
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	68da      	ldr	r2, [r3, #12]
 800d2a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2a4:	1ad1      	subs	r1, r2, r3
 800d2a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	18d4      	adds	r4, r2, r3
 800d2ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	9200      	str	r2, [sp, #0]
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	f7fe f967 	bl	800b58a <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800d2bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2c2:	4413      	add	r3, r2
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800d2c8:	f107 0314 	add.w	r3, r7, #20
 800d2cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f00a fa54 	bl	801777e <mg_str_n>
 800d2d6:	f107 0314 	add.w	r3, r7, #20
 800d2da:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d2de:	f015 fc85 	bl	8022bec <mg_path_is_sane>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	f083 0301 	eor.w	r3, r3, #1
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d009      	beq.n	800d302 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800d2ee:	4b6e      	ldr	r3, [pc, #440]	@ (800d4a8 <uri_to_path2+0x298>)
 800d2f0:	4a6c      	ldr	r2, [pc, #432]	@ (800d4a4 <uri_to_path2+0x294>)
 800d2f2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7ff fab0 	bl	800c85c <mg_http_reply>
    return -1;
 800d2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d300:	e0ec      	b.n	800d4dc <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800d302:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d304:	f7f3 f864 	bl	80003d0 <strlen>
 800d308:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800d30a:	e007      	b.n	800d31c <uri_to_path2+0x10c>
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	3b01      	subs	r3, #1
 800d310:	627b      	str	r3, [r7, #36]	@ 0x24
 800d312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d316:	4413      	add	r3, r2
 800d318:	2200      	movs	r2, #0
 800d31a:	701a      	strb	r2, [r3, #0]
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d906      	bls.n	800d330 <uri_to_path2+0x120>
 800d322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d324:	3b01      	subs	r3, #1
 800d326:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d328:	4413      	add	r3, r2
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d32e:	d0ed      	beq.n	800d30c <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800d330:	f107 031c 	add.w	r3, r7, #28
 800d334:	495d      	ldr	r1, [pc, #372]	@ (800d4ac <uri_to_path2+0x29c>)
 800d336:	4618      	mov	r0, r3
 800d338:	f00a fa04 	bl	8017744 <mg_str_s>
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	f107 031c 	add.w	r3, r7, #28
 800d342:	cb0c      	ldmia	r3, {r2, r3}
 800d344:	3108      	adds	r1, #8
 800d346:	c903      	ldmia	r1, {r0, r1}
 800d348:	f00a fa7d 	bl	8017846 <mg_strcmp>
 800d34c:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d007      	beq.n	800d362 <uri_to_path2+0x152>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2200      	movs	r2, #0
 800d358:	2100      	movs	r1, #0
 800d35a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d35c:	4798      	blx	r3
 800d35e:	4603      	mov	r3, r0
 800d360:	e000      	b.n	800d364 <uri_to_path2+0x154>
 800d362:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800d364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800d366:	4b52      	ldr	r3, [pc, #328]	@ (800d4b0 <uri_to_path2+0x2a0>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	dd16      	ble.n	800d39c <uri_to_path2+0x18c>
 800d36e:	4b51      	ldr	r3, [pc, #324]	@ (800d4b4 <uri_to_path2+0x2a4>)
 800d370:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 800d374:	4950      	ldr	r1, [pc, #320]	@ (800d4b8 <uri_to_path2+0x2a8>)
 800d376:	2004      	movs	r0, #4
 800d378:	f002 f9e4 	bl	800f744 <mg_log_prefix>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	4618      	mov	r0, r3
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	689a      	ldr	r2, [r3, #8]
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	4613      	mov	r3, r2
 800d394:	4602      	mov	r2, r0
 800d396:	4849      	ldr	r0, [pc, #292]	@ (800d4bc <uri_to_path2+0x2ac>)
 800d398:	f002 fa24 	bl	800f7e4 <mg_log>
              flags));
  if (flags == 0) {
 800d39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	f000 809b 	beq.w	800d4da <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a6:	f003 0304 	and.w	r3, r3, #4
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d020      	beq.n	800d3f0 <uri_to_path2+0x1e0>
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d01c      	beq.n	800d3f0 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	4413      	add	r3, r2
 800d3c2:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800d3c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d3c6:	d013      	beq.n	800d3f0 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	493b      	ldr	r1, [pc, #236]	@ (800d4c0 <uri_to_path2+0x2b0>)
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f002 fb11 	bl	800f9fc <mg_printf>
    c->is_resp = 0;
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800d3e0:	f023 0301 	bic.w	r3, r3, #1
 800d3e4:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3ee:	e074      	b.n	800d4da <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800d3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f2:	f003 0304 	and.w	r3, r3, #4
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d06f      	beq.n	800d4da <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800d3fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fe:	18d0      	adds	r0, r2, r3
 800d400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	4a2f      	ldr	r2, [pc, #188]	@ (800d4c4 <uri_to_path2+0x2b4>)
 800d408:	4619      	mov	r1, r3
 800d40a:	f006 fdd7 	bl	8013fbc <mg_snprintf>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d009      	beq.n	800d428 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2200      	movs	r2, #0
 800d41a:	2100      	movs	r1, #0
 800d41c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d41e:	4798      	blx	r3
 800d420:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800d422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d424:	2b00      	cmp	r3, #0
 800d426:	d116      	bne.n	800d456 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800d428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42c:	18d0      	adds	r0, r2, r3
 800d42e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	4a24      	ldr	r2, [pc, #144]	@ (800d4c8 <uri_to_path2+0x2b8>)
 800d436:	4619      	mov	r1, r3
 800d438:	f006 fdc0 	bl	8013fbc <mg_snprintf>
 800d43c:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d00c      	beq.n	800d45c <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2200      	movs	r2, #0
 800d448:	2100      	movs	r1, #0
 800d44a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d44c:	4798      	blx	r3
 800d44e:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800d450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <uri_to_path2+0x24c>
      flags = tmp;
 800d456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d45a:	e03e      	b.n	800d4da <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800d45c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d460:	18d0      	adds	r0, r2, r3
 800d462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	4a18      	ldr	r2, [pc, #96]	@ (800d4cc <uri_to_path2+0x2bc>)
 800d46a:	4619      	mov	r1, r3
 800d46c:	f006 fda6 	bl	8013fbc <mg_snprintf>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d02c      	beq.n	800d4d0 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2200      	movs	r2, #0
 800d47c:	2100      	movs	r1, #0
 800d47e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d480:	4798      	blx	r3
 800d482:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800d484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d486:	2b00      	cmp	r3, #0
 800d488:	d022      	beq.n	800d4d0 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800d48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800d48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d490:	330b      	adds	r3, #11
 800d492:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d494:	4413      	add	r3, r2
 800d496:	2200      	movs	r2, #0
 800d498:	701a      	strb	r2, [r3, #0]
 800d49a:	e01e      	b.n	800d4da <uri_to_path2+0x2ca>
 800d49c:	0802d610 	.word	0x0802d610
 800d4a0:	0802df2c 	.word	0x0802df2c
 800d4a4:	0802db70 	.word	0x0802db70
 800d4a8:	0802df40 	.word	0x0802df40
 800d4ac:	0802df50 	.word	0x0802df50
 800d4b0:	2400025c 	.word	0x2400025c
 800d4b4:	08031170 	.word	0x08031170
 800d4b8:	0802d330 	.word	0x0802d330
 800d4bc:	0802df54 	.word	0x0802df54
 800d4c0:	0802df68 	.word	0x0802df68
 800d4c4:	0802dfa4 	.word	0x0802dfa4
 800d4c8:	0802dfb0 	.word	0x0802dfb0
 800d4cc:	0802dfc0 	.word	0x0802dfc0
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800d4d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d4:	4413      	add	r3, r2
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800d4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3734      	adds	r7, #52	@ 0x34
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d4e6:	b002      	add	sp, #8
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop

0800d4ec <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b09c      	sub	sp, #112	@ 0x70
 800d4f0:	af06      	add	r7, sp, #24
 800d4f2:	6178      	str	r0, [r7, #20]
 800d4f4:	6139      	str	r1, [r7, #16]
 800d4f6:	60fa      	str	r2, [r7, #12]
 800d4f8:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d002      	beq.n	800d508 <uri_to_path+0x1c>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	e000      	b.n	800d50a <uri_to_path+0x1e>
 800d508:	4b5b      	ldr	r3, [pc, #364]	@ (800d678 <uri_to_path+0x18c>)
 800d50a:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d514:	4611      	mov	r1, r2
 800d516:	4618      	mov	r0, r3
 800d518:	f00a f914 	bl	8017744 <mg_str_s>
 800d51c:	2300      	movs	r3, #0
 800d51e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d520:	2300      	movs	r3, #0
 800d522:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d524:	f107 031c 	add.w	r3, r7, #28
 800d528:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d52c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d530:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800d534:	e078      	b.n	800d628 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800d536:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d53a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d53e:	213d      	movs	r1, #61	@ 0x3d
 800d540:	9100      	str	r1, [sp, #0]
 800d542:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800d546:	c903      	ldmia	r1, {r0, r1}
 800d548:	f00a fafa 	bl	8017b40 <mg_span>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f083 0301 	eor.w	r3, r3, #1
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d014      	beq.n	800d582 <uri_to_path+0x96>
 800d558:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800d55c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d560:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d564:	e883 0003 	stmia.w	r3, {r0, r1}
 800d568:	463b      	mov	r3, r7
 800d56a:	2200      	movs	r2, #0
 800d56c:	2100      	movs	r1, #0
 800d56e:	4618      	mov	r0, r3
 800d570:	f00a f905 	bl	801777e <mg_str_n>
 800d574:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d578:	463a      	mov	r2, r7
 800d57a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d57e:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800d582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d584:	2b00      	cmp	r3, #0
 800d586:	d123      	bne.n	800d5d0 <uri_to_path+0xe4>
 800d588:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d58c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d590:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d594:	e883 0003 	stmia.w	r3, {r0, r1}
 800d598:	463b      	mov	r3, r7
 800d59a:	4938      	ldr	r1, [pc, #224]	@ (800d67c <uri_to_path+0x190>)
 800d59c:	4618      	mov	r0, r3
 800d59e:	f00a f8d1 	bl	8017744 <mg_str_s>
 800d5a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800d5a6:	463a      	mov	r2, r7
 800d5a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800d5b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5b4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d5b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d5c0:	f107 031c 	add.w	r3, r7, #28
 800d5c4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d5c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5cc:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	68da      	ldr	r2, [r3, #12]
 800d5d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d323      	bcc.n	800d622 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	6899      	ldr	r1, [r3, #8]
 800d5de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f00a f8ca 	bl	801777e <mg_str_n>
 800d5ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d5ee:	cb0c      	ldmia	r3, {r2, r3}
 800d5f0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800d5f4:	c903      	ldmia	r1, {r0, r1}
 800d5f6:	f00a f926 	bl	8017846 <mg_strcmp>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d112      	bne.n	800d626 <uri_to_path+0x13a>
    u = k, p = v;
 800d600:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d604:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800d608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d60c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d610:	f107 031c 	add.w	r3, r7, #28
 800d614:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d61c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d620:	e002      	b.n	800d628 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800d622:	bf00      	nop
 800d624:	e000      	b.n	800d628 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800d626:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800d628:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d62c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d630:	212c      	movs	r1, #44	@ 0x2c
 800d632:	9100      	str	r1, [sp, #0]
 800d634:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d638:	c903      	ldmia	r1, {r0, r1}
 800d63a:	f00a fa81 	bl	8017b40 <mg_span>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	f47f af78 	bne.w	800d536 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800d646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d648:	9304      	str	r3, [sp, #16]
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	9303      	str	r3, [sp, #12]
 800d64e:	aa01      	add	r2, sp, #4
 800d650:	f107 031c 	add.w	r3, r7, #28
 800d654:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d658:	e882 0003 	stmia.w	r2, {r0, r1}
 800d65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d662:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d664:	6939      	ldr	r1, [r7, #16]
 800d666:	6978      	ldr	r0, [r7, #20]
 800d668:	f7ff fdd2 	bl	800d210 <uri_to_path2>
 800d66c:	4603      	mov	r3, r0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3758      	adds	r7, #88	@ 0x58
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	2400003c 	.word	0x2400003c
 800d67c:	0802df50 	.word	0x0802df50

0800d680 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800d680:	b580      	push	{r7, lr}
 800d682:	b0a6      	sub	sp, #152	@ 0x98
 800d684:	af02      	add	r7, sp, #8
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800d694:	f107 0314 	add.w	r3, r7, #20
 800d698:	2264      	movs	r2, #100	@ 0x64
 800d69a:	9200      	str	r2, [sp, #0]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	f7ff ff23 	bl	800d4ec <uri_to_path>
 800d6a6:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800d6aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	db41      	blt.n	800d736 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800d6b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6b6:	f003 0304 	and.w	r3, r3, #4
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d007      	beq.n	800d6ce <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800d6be:	4b20      	ldr	r3, [pc, #128]	@ (800d740 <mg_http_serve_dir+0xc0>)
 800d6c0:	4a20      	ldr	r2, [pc, #128]	@ (800d744 <mg_http_serve_dir+0xc4>)
 800d6c2:	f240 1193 	movw	r1, #403	@ 0x193
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff f8c8 	bl	800c85c <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800d6cc:	e033      	b.n	800d736 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800d6ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d028      	beq.n	800d728 <mg_http_serve_dir+0xa8>
 800d6d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d024      	beq.n	800d728 <mg_http_serve_dir+0xa8>
 800d6de:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800d6e2:	f107 0214 	add.w	r2, r7, #20
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f00a f82b 	bl	8017744 <mg_str_s>
 800d6ee:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800d6f2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f00a f824 	bl	8017744 <mg_str_s>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800d704:	cb0c      	ldmia	r3, {r2, r3}
 800d706:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800d70a:	c903      	ldmia	r1, {r0, r1}
 800d70c:	f00a f924 	bl	8017958 <mg_match>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d008      	beq.n	800d728 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f107 0214 	add.w	r2, r7, #20
 800d71e:	4619      	mov	r1, r3
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f009 fffb 	bl	801771c <mg_http_serve_ssi>
}
 800d726:	e006      	b.n	800d736 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800d728:	f107 0214 	add.w	r2, r7, #20
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	68b9      	ldr	r1, [r7, #8]
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7ff fa9b 	bl	800cc6c <mg_http_serve_file>
}
 800d736:	bf00      	nop
 800d738:	3790      	adds	r7, #144	@ 0x90
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0802dfd0 	.word	0x0802dfd0
 800d744:	0802db70 	.word	0x0802db70

0800d748 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800d748:	b590      	push	{r4, r7, lr}
 800d74a:	b0cf      	sub	sp, #316	@ 0x13c
 800d74c:	af02      	add	r7, sp, #8
 800d74e:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800d752:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800d756:	6020      	str	r0, [r4, #0]
 800d758:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800d75c:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800d760:	6001      	str	r1, [r0, #0]
 800d762:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800d766:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800d76a:	600a      	str	r2, [r1, #0]
 800d76c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d770:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d774:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800d776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d77a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d77e:	497a      	ldr	r1, [pc, #488]	@ (800d968 <mg_http_creds+0x220>)
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	f7fd fff5 	bl	800b770 <mg_http_get_header>
 800d786:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800d78a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d78e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2200      	movs	r2, #0
 800d796:	701a      	strb	r2, [r3, #0]
 800d798:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d79c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800d7b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d05e      	beq.n	800d876 <mg_http_creds+0x12e>
 800d7b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	2b06      	cmp	r3, #6
 800d7c0:	d959      	bls.n	800d876 <mg_http_creds+0x12e>
 800d7c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2206      	movs	r2, #6
 800d7ca:	4968      	ldr	r1, [pc, #416]	@ (800d96c <mg_http_creds+0x224>)
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f01a ffbd 	bl	802874c <memcmp>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d14e      	bne.n	800d876 <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800d7d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	1d98      	adds	r0, r3, #6
 800d7e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	1f99      	subs	r1, r3, #6
 800d7e8:	f107 0214 	add.w	r2, r7, #20
 800d7ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7f0:	f7fb fa0e 	bl	8008c10 <mg_base64_decode>
 800d7f4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800d7f8:	f107 0314 	add.w	r3, r7, #20
 800d7fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d800:	213a      	movs	r1, #58	@ 0x3a
 800d802:	4618      	mov	r0, r3
 800d804:	f7f2 fd94 	bl	8000330 <memchr>
 800d808:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800d80c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 80a2 	beq.w	800d95a <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800d816:	f107 0314 	add.w	r3, r7, #20
 800d81a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800d81e:	1ad2      	subs	r2, r2, r3
 800d820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d824:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800d828:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d82c:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800d830:	f107 0314 	add.w	r3, r7, #20
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	4613      	mov	r3, r2
 800d838:	4a4d      	ldr	r2, [pc, #308]	@ (800d970 <mg_http_creds+0x228>)
 800d83a:	6809      	ldr	r1, [r1, #0]
 800d83c:	6800      	ldr	r0, [r0, #0]
 800d83e:	f006 fbbd 	bl	8013fbc <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800d842:	f107 0314 	add.w	r3, r7, #20
 800d846:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	461a      	mov	r2, r3
 800d84e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d852:	1a9b      	subs	r3, r3, r2
 800d854:	1e5a      	subs	r2, r3, #1
 800d856:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800d85a:	3301      	adds	r3, #1
 800d85c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800d860:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	4613      	mov	r3, r2
 800d868:	4a41      	ldr	r2, [pc, #260]	@ (800d970 <mg_http_creds+0x228>)
 800d86a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d86e:	6800      	ldr	r0, [r0, #0]
 800d870:	f006 fba4 	bl	8013fbc <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800d874:	e071      	b.n	800d95a <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800d876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d024      	beq.n	800d8c8 <mg_http_creds+0x180>
 800d87e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	2b07      	cmp	r3, #7
 800d886:	d91f      	bls.n	800d8c8 <mg_http_creds+0x180>
 800d888:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2207      	movs	r2, #7
 800d890:	4938      	ldr	r1, [pc, #224]	@ (800d974 <mg_http_creds+0x22c>)
 800d892:	4618      	mov	r0, r3
 800d894:	f01a ff5a 	bl	802874c <memcmp>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d114      	bne.n	800d8c8 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800d89e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	1fda      	subs	r2, r3, #7
 800d8a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3307      	adds	r3, #7
 800d8ae:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800d8b2:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	4a2d      	ldr	r2, [pc, #180]	@ (800d970 <mg_http_creds+0x228>)
 800d8bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d8c0:	6800      	ldr	r0, [r0, #0]
 800d8c2:	f006 fb7b 	bl	8013fbc <mg_snprintf>
 800d8c6:	e049      	b.n	800d95c <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800d8c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d8d0:	4929      	ldr	r1, [pc, #164]	@ (800d978 <mg_http_creds+0x230>)
 800d8d2:	6818      	ldr	r0, [r3, #0]
 800d8d4:	f7fd ff4c 	bl	800b770 <mg_http_get_header>
 800d8d8:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800d8dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d028      	beq.n	800d936 <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800d8e4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800d8e8:	220c      	movs	r2, #12
 800d8ea:	4924      	ldr	r1, [pc, #144]	@ (800d97c <mg_http_creds+0x234>)
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f009 ff46 	bl	801777e <mg_str_n>
 800d8f2:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800d8f6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800d8fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d904:	ca06      	ldmia	r2, {r1, r2}
 800d906:	f000 f864 	bl	800d9d2 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800d90a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d024      	beq.n	800d95c <mg_http_creds+0x214>
 800d912:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800d916:	4619      	mov	r1, r3
 800d918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d91c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d920:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	460b      	mov	r3, r1
 800d928:	4a11      	ldr	r2, [pc, #68]	@ (800d970 <mg_http_creds+0x228>)
 800d92a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d92e:	6800      	ldr	r0, [r0, #0]
 800d930:	f006 fb44 	bl	8013fbc <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800d934:	e012      	b.n	800d95c <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800d936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d93a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f103 0010 	add.w	r0, r3, #16
 800d944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d948:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800d94c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d950:	6812      	ldr	r2, [r2, #0]
 800d952:	490a      	ldr	r1, [pc, #40]	@ (800d97c <mg_http_creds+0x234>)
 800d954:	f7fd fda4 	bl	800b4a0 <mg_http_get_var>
}
 800d958:	e000      	b.n	800d95c <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800d95a:	bf00      	nop
}
 800d95c:	bf00      	nop
 800d95e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d962:	46bd      	mov	sp, r7
 800d964:	bd90      	pop	{r4, r7, pc}
 800d966:	bf00      	nop
 800d968:	0802dfe4 	.word	0x0802dfe4
 800d96c:	0802dff4 	.word	0x0802dff4
 800d970:	0802d610 	.word	0x0802d610
 800d974:	0802dffc 	.word	0x0802dffc
 800d978:	0802e004 	.word	0x0802e004
 800d97c:	0802e00c 	.word	0x0802e00c

0800d980 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	1d3b      	adds	r3, r7, #4
 800d98a:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800d98e:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800d990:	2b01      	cmp	r3, #1
 800d992:	d913      	bls.n	800d9bc <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	2b22      	cmp	r3, #34	@ 0x22
 800d99a:	d10f      	bne.n	800d9bc <stripquotes+0x3c>
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	4413      	add	r3, r2
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b22      	cmp	r3, #34	@ 0x22
 800d9a8:	d108      	bne.n	800d9bc <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	1c59      	adds	r1, r3, #1
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	1e9a      	subs	r2, r3, #2
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f009 fee2 	bl	801777e <mg_str_n>
             : s;
 800d9ba:	e006      	b.n	800d9ca <stripquotes+0x4a>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	1d3b      	adds	r3, r7, #4
 800d9c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d9c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08c      	sub	sp, #48	@ 0x30
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	1d38      	adds	r0, r7, #4
 800d9de:	e880 0006 	stmia.w	r0, {r1, r2}
 800d9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9e8:	e072      	b.n	800dad0 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f0:	440b      	add	r3, r1
 800d9f2:	4413      	add	r3, r2
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	2b3d      	cmp	r3, #61	@ 0x3d
 800d9f8:	d167      	bne.n	800daca <mg_http_get_header_var+0xf8>
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fe:	4413      	add	r3, r2
 800da00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da04:	4618      	mov	r0, r3
 800da06:	f01a fea1 	bl	802874c <memcmp>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d15c      	bne.n	800daca <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da16:	440b      	add	r3, r1
 800da18:	3301      	adds	r3, #1
 800da1a:	4413      	add	r3, r2
 800da1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da20:	627b      	str	r3, [r7, #36]	@ 0x24
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	4413      	add	r3, r2
 800da28:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800da2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da2c:	6a3b      	ldr	r3, [r7, #32]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d205      	bcs.n	800da3e <mg_http_get_header_var+0x6c>
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b22      	cmp	r3, #34	@ 0x22
 800da38:	d101      	bne.n	800da3e <mg_http_get_header_var+0x6c>
 800da3a:	2301      	movs	r3, #1
 800da3c:	e000      	b.n	800da40 <mg_http_get_header_var+0x6e>
 800da3e:	2300      	movs	r3, #0
 800da40:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800da42:	e002      	b.n	800da4a <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	3301      	adds	r3, #1
 800da48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800da4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d227      	bcs.n	800daa2 <mg_http_get_header_var+0xd0>
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d010      	beq.n	800da7a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800da58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d003      	beq.n	800da68 <mg_http_get_header_var+0x96>
 800da60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b22      	cmp	r3, #34	@ 0x22
 800da66:	d001      	beq.n	800da6c <mg_http_get_header_var+0x9a>
 800da68:	2301      	movs	r3, #1
 800da6a:	e000      	b.n	800da6e <mg_http_get_header_var+0x9c>
 800da6c:	2300      	movs	r3, #0
      while (p < x &&
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e5      	bne.n	800da44 <mg_http_get_header_var+0x72>
 800da78:	e013      	b.n	800daa2 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800da7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b3b      	cmp	r3, #59	@ 0x3b
 800da80:	d009      	beq.n	800da96 <mg_http_get_header_var+0xc4>
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b20      	cmp	r3, #32
 800da88:	d005      	beq.n	800da96 <mg_http_get_header_var+0xc4>
 800da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b2c      	cmp	r3, #44	@ 0x2c
 800da90:	d001      	beq.n	800da96 <mg_http_get_header_var+0xc4>
 800da92:	2301      	movs	r3, #1
 800da94:	e000      	b.n	800da98 <mg_http_get_header_var+0xc6>
 800da96:	2300      	movs	r3, #0
      while (p < x &&
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1d0      	bne.n	800da44 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800daa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa6:	1ad2      	subs	r2, r2, r3
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	4413      	add	r3, r2
 800daac:	461a      	mov	r2, r3
 800daae:	f107 0314 	add.w	r3, r7, #20
 800dab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f009 fe62 	bl	801777e <mg_str_n>
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f107 0314 	add.w	r3, r7, #20
 800dac0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dac4:	f7ff ff5c 	bl	800d980 <stripquotes>
 800dac8:	e012      	b.n	800daf0 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800daca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dacc:	3301      	adds	r3, #1
 800dace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d006      	beq.n	800dae4 <mg_http_get_header_var+0x112>
 800dad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dada:	4413      	add	r3, r2
 800dadc:	1c9a      	adds	r2, r3, #2
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d382      	bcc.n	800d9ea <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	2100      	movs	r1, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f009 fe47 	bl	801777e <mg_str_n>
}
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	3730      	adds	r7, #48	@ 0x30
 800daf4:	46bd      	mov	sp, r7
 800daf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dafa:	b002      	add	sp, #8
 800dafc:	4770      	bx	lr

0800dafe <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800dafe:	b580      	push	{r7, lr}
 800db00:	b082      	sub	sp, #8
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f018 fe79 	bl	8026802 <atoi>
 800db10:	4603      	mov	r3, r0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <is_hex_digit>:

static bool is_hex_digit(int c) {
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b2f      	cmp	r3, #47	@ 0x2f
 800db26:	dd02      	ble.n	800db2e <is_hex_digit+0x14>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b39      	cmp	r3, #57	@ 0x39
 800db2c:	dd0b      	ble.n	800db46 <is_hex_digit+0x2c>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b60      	cmp	r3, #96	@ 0x60
 800db32:	dd02      	ble.n	800db3a <is_hex_digit+0x20>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b66      	cmp	r3, #102	@ 0x66
 800db38:	dd05      	ble.n	800db46 <is_hex_digit+0x2c>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2b40      	cmp	r3, #64	@ 0x40
 800db3e:	dd04      	ble.n	800db4a <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b46      	cmp	r3, #70	@ 0x46
 800db44:	dc01      	bgt.n	800db4a <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800db46:	2301      	movs	r3, #1
 800db48:	e000      	b.n	800db4c <is_hex_digit+0x32>
 800db4a:	2300      	movs	r3, #0
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	b2db      	uxtb	r3, r3
}
 800db52:	4618      	mov	r0, r3
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800db5e:	b580      	push	{r7, lr}
 800db60:	b08a      	sub	sp, #40	@ 0x28
 800db62:	af02      	add	r7, sp, #8
 800db64:	60f8      	str	r0, [r7, #12]
 800db66:	60b9      	str	r1, [r7, #8]
 800db68:	607a      	str	r2, [r7, #4]
 800db6a:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	61fb      	str	r3, [r7, #28]
 800db70:	2300      	movs	r3, #0
 800db72:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b02      	cmp	r3, #2
 800db78:	dc04      	bgt.n	800db84 <skip_chunk+0x26>
 800db7a:	2300      	movs	r3, #0
 800db7c:	e07a      	b.n	800dc74 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	3301      	adds	r3, #1
 800db82:	61fb      	str	r3, [r7, #28]
 800db84:	69fa      	ldr	r2, [r7, #28]
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	429a      	cmp	r2, r3
 800db8a:	da09      	bge.n	800dba0 <skip_chunk+0x42>
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	4413      	add	r3, r2
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff ffc0 	bl	800db1a <is_hex_digit>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1ee      	bne.n	800db7e <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d102      	bne.n	800dbac <skip_chunk+0x4e>
 800dba6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbaa:	e063      	b.n	800dc74 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	2b08      	cmp	r3, #8
 800dbb0:	dd02      	ble.n	800dbb8 <skip_chunk+0x5a>
 800dbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb6:	e05d      	b.n	800dc74 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800dbb8:	69fa      	ldr	r2, [r7, #28]
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	da0c      	bge.n	800dbda <skip_chunk+0x7c>
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b0d      	cmp	r3, #13
 800dbca:	d106      	bne.n	800dbda <skip_chunk+0x7c>
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	2b0a      	cmp	r3, #10
 800dbd8:	d002      	beq.n	800dbe0 <skip_chunk+0x82>
 800dbda:	f04f 33ff 	mov.w	r3, #4294967295
 800dbde:	e049      	b.n	800dc74 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800dbe0:	69fa      	ldr	r2, [r7, #28]
 800dbe2:	f107 0314 	add.w	r3, r7, #20
 800dbe6:	68f9      	ldr	r1, [r7, #12]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f009 fdc8 	bl	801777e <mg_str_n>
 800dbee:	f107 0310 	add.w	r3, r7, #16
 800dbf2:	2204      	movs	r2, #4
 800dbf4:	9200      	str	r2, [sp, #0]
 800dbf6:	2210      	movs	r2, #16
 800dbf8:	f107 0114 	add.w	r1, r7, #20
 800dbfc:	c903      	ldmia	r1, {r0, r1}
 800dbfe:	f009 fffc 	bl	8017bfa <mg_str_to_num>
 800dc02:	4603      	mov	r3, r0
 800dc04:	f083 0301 	eor.w	r3, r3, #1
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc12:	e02f      	b.n	800dc74 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da02      	bge.n	800dc20 <skip_chunk+0xc2>
 800dc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1e:	e029      	b.n	800dc74 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	1eda      	subs	r2, r3, #3
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	dc01      	bgt.n	800dc32 <skip_chunk+0xd4>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	e020      	b.n	800dc74 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	4413      	add	r3, r2
 800dc38:	3302      	adds	r3, #2
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b0d      	cmp	r3, #13
 800dc42:	d108      	bne.n	800dc56 <skip_chunk+0xf8>
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	4413      	add	r3, r2
 800dc4a:	3303      	adds	r3, #3
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4413      	add	r3, r2
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b0a      	cmp	r3, #10
 800dc54:	d002      	beq.n	800dc5c <skip_chunk+0xfe>
 800dc56:	f04f 33ff 	mov.w	r3, #4294967295
 800dc5a:	e00b      	b.n	800dc74 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	1c9a      	adds	r2, r3, #2
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	1c9a      	adds	r2, r3, #2
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	4413      	add	r3, r2
 800dc72:	3302      	adds	r3, #2
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dc88:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dc8c:	6018      	str	r0, [r3, #0]
 800dc8e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dc92:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800dc96:	6019      	str	r1, [r3, #0]
 800dc98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dc9c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800dca0:	601a      	str	r2, [r3, #0]
	if(ev!=2){
 800dca2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dca6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d007      	beq.n	800dcc0 <http_cb+0x44>
		printf("📡 Event received: %d\n", ev);
 800dcb0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dcb4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800dcb8:	6819      	ldr	r1, [r3, #0]
 800dcba:	48ae      	ldr	r0, [pc, #696]	@ (800df74 <http_cb+0x2f8>)
 800dcbc:	f01a fb5e 	bl	802837c <iprintf>
	}
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800dcc0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dcc4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b07      	cmp	r3, #7
 800dccc:	d031      	beq.n	800dd32 <http_cb+0xb6>
 800dcce:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dcd2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b09      	cmp	r3, #9
 800dcda:	d02a      	beq.n	800dd32 <http_cb+0xb6>
 800dcdc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dce0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	f040 83d4 	bne.w	800e494 <http_cb+0x818>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800dcec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dcf0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800dcfa:	f003 0304 	and.w	r3, r3, #4
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 83c7 	beq.w	800e494 <http_cb+0x818>
 800dd06:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dd0a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800dd14:	f003 0310 	and.w	r3, r3, #16
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f040 83ba 	bne.w	800e494 <http_cb+0x818>
       c->recv.len > 0)) {  // see #2796
 800dd20:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dd24:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 83b1 	beq.w	800e494 <http_cb+0x818>
	printf("🧾 Received %lu bytes\n", c->recv.len);
 800dd32:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dd36:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd3e:	4619      	mov	r1, r3
 800dd40:	488d      	ldr	r0, [pc, #564]	@ (800df78 <http_cb+0x2fc>)
 800dd42:	f01a fb1b 	bl	802837c <iprintf>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800dd46:	2300      	movs	r3, #0
 800dd48:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800dd4c:	e374      	b.n	800e438 <http_cb+0x7bc>
      const char *buf = (char *) c->recv.buf + ofs;
 800dd4e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dd52:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd5a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800dd5e:	4413      	add	r3, r2
 800dd60:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800dd64:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dd68:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dd70:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	f107 0210 	add.w	r2, r7, #16
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800dd80:	f7fd feb2 	bl	800bae8 <mg_http_parse>
 800dd84:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      printf("🔍 Parsing HTTP headers at offset %lu, result: %d\n", ofs, n);
 800dd88:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800dd8c:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 800dd90:	487a      	ldr	r0, [pc, #488]	@ (800df7c <http_cb+0x300>)
 800dd92:	f01a faf3 	bl	802837c <iprintf>
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800dd96:	2300      	movs	r3, #0
 800dd98:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800dd9c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dda0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda8:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800ddac:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	da38      	bge.n	800de26 <http_cb+0x1aa>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800ddb4:	4b72      	ldr	r3, [pc, #456]	@ (800df80 <http_cb+0x304>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	dd10      	ble.n	800ddde <http_cb+0x162>
 800ddbc:	4b71      	ldr	r3, [pc, #452]	@ (800df84 <http_cb+0x308>)
 800ddbe:	f640 12ab 	movw	r2, #2475	@ 0x9ab
 800ddc2:	4971      	ldr	r1, [pc, #452]	@ (800df88 <http_cb+0x30c>)
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	f001 fcbd 	bl	800f744 <mg_log_prefix>
 800ddca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ddce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	486c      	ldr	r0, [pc, #432]	@ (800df8c <http_cb+0x310>)
 800ddda:	f001 fd03 	bl	800f7e4 <mg_log>
        c->is_draining = 1;
 800ddde:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dde2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ddec:	f043 0310 	orr.w	r3, r3, #16
 800ddf0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800ddf4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ddf8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de00:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	2b10      	cmp	r3, #16
 800de08:	bf28      	it	cs
 800de0a:	2310      	movcs	r3, #16
 800de0c:	4619      	mov	r1, r3
 800de0e:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800de12:	f001 fd1d 	bl	800f850 <mg_hexdump>
        c->recv.len = 0;
 800de16:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800de1a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2200      	movs	r2, #0
 800de22:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800de24:	e336      	b.n	800e494 <http_cb+0x818>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800de26:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 831c 	beq.w	800e468 <http_cb+0x7ec>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800de30:	f107 0210 	add.w	r2, r7, #16
 800de34:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800de38:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800de3c:	210a      	movs	r1, #10
 800de3e:	6818      	ldr	r0, [r3, #0]
 800de40:	f7fb fd6a 	bl	8009918 <mg_call>
      if (c->recv.len != old_len) {
 800de44:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800de48:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de50:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800de54:	429a      	cmp	r2, r3
 800de56:	d01d      	beq.n	800de94 <http_cb+0x218>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800de58:	4b49      	ldr	r3, [pc, #292]	@ (800df80 <http_cb+0x304>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	dd10      	ble.n	800de82 <http_cb+0x206>
 800de60:	4b48      	ldr	r3, [pc, #288]	@ (800df84 <http_cb+0x308>)
 800de62:	f640 12b5 	movw	r2, #2485	@ 0x9b5
 800de66:	4948      	ldr	r1, [pc, #288]	@ (800df88 <http_cb+0x30c>)
 800de68:	2003      	movs	r0, #3
 800de6a:	f001 fc6b 	bl	800f744 <mg_log_prefix>
 800de6e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800de72:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de7a:	4619      	mov	r1, r3
 800de7c:	4844      	ldr	r0, [pc, #272]	@ (800df90 <http_cb+0x314>)
 800de7e:	f001 fcb1 	bl	800f7e4 <mg_log>
        c->pfn = NULL;
 800de82:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800de86:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800de92:	e2ff      	b.n	800e494 <http_cb+0x818>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800de94:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800de98:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b09      	cmp	r3, #9
 800dea0:	d132      	bne.n	800df08 <http_cb+0x28c>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800dea2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dea6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800deae:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800deb2:	1ad2      	subs	r2, r2, r3
 800deb4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800deb8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800debc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800dec0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dec4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800dec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800decc:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800ded0:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800ded4:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800ded8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800dedc:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800dee0:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800dee4:	1a8a      	subs	r2, r1, r2
 800dee6:	1a9a      	subs	r2, r3, r2
 800dee8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800deec:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800def0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
        printf("⚠️  Connection closed, setting message.len to %lu\n", hm.message.len);
 800def4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800def8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800defc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df00:	4619      	mov	r1, r3
 800df02:	4824      	ldr	r0, [pc, #144]	@ (800df94 <http_cb+0x318>)
 800df04:	f01a fa3a 	bl	802837c <iprintf>
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800df08:	f107 0310 	add.w	r3, r7, #16
 800df0c:	4922      	ldr	r1, [pc, #136]	@ (800df98 <http_cb+0x31c>)
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fd fc2e 	bl	800b770 <mg_http_get_header>
 800df14:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800df18:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d043      	beq.n	800dfa8 <http_cb+0x32c>
          printf("📦 Transfer-Encoding: %.*s\n", (int)te->len, te->buf);
 800df20:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	4619      	mov	r1, r3
 800df28:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	461a      	mov	r2, r3
 800df30:	481a      	ldr	r0, [pc, #104]	@ (800df9c <http_cb+0x320>)
 800df32:	f01a fa23 	bl	802837c <iprintf>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800df36:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800df3a:	4919      	ldr	r1, [pc, #100]	@ (800dfa0 <http_cb+0x324>)
 800df3c:	4618      	mov	r0, r3
 800df3e:	f009 fc01 	bl	8017744 <mg_str_s>
 800df42:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800df46:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800df4a:	cb0c      	ldmia	r3, {r2, r3}
 800df4c:	c903      	ldmia	r1, {r0, r1}
 800df4e:	f009 fcbc 	bl	80178ca <mg_strcasecmp>
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d103      	bne.n	800df60 <http_cb+0x2e4>
          is_chunked = true;
 800df58:	2301      	movs	r3, #1
 800df5a:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800df5e:	e0cd      	b.n	800e0fc <http_cb+0x480>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800df60:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800df64:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800df68:	490e      	ldr	r1, [pc, #56]	@ (800dfa4 <http_cb+0x328>)
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	f7fb fcf4 	bl	8009958 <mg_error>
          return;
 800df70:	e290      	b.n	800e494 <http_cb+0x818>
 800df72:	bf00      	nop
 800df74:	0802e0c4 	.word	0x0802e0c4
 800df78:	0802e0e0 	.word	0x0802e0e0
 800df7c:	0802e0fc 	.word	0x0802e0fc
 800df80:	2400025c 	.word	0x2400025c
 800df84:	08031180 	.word	0x08031180
 800df88:	0802d330 	.word	0x0802d330
 800df8c:	0802e134 	.word	0x0802e134
 800df90:	0802e14c 	.word	0x0802e14c
 800df94:	0802e168 	.word	0x0802e168
 800df98:	0802e1a0 	.word	0x0802e1a0
 800df9c:	0802e1b4 	.word	0x0802e1b4
 800dfa0:	0802e1d4 	.word	0x0802e1d4
 800dfa4:	0802e1dc 	.word	0x0802e1dc
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800dfa8:	f107 0310 	add.w	r3, r7, #16
 800dfac:	49c2      	ldr	r1, [pc, #776]	@ (800e2b8 <http_cb+0x63c>)
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fd fbde 	bl	800b770 <mg_http_get_header>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f040 80a0 	bne.w	800e0fc <http_cb+0x480>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800dfbc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800dfc0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2205      	movs	r2, #5
 800dfc8:	49bc      	ldr	r1, [pc, #752]	@ (800e2bc <http_cb+0x640>)
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fd f941 	bl	800b252 <mg_ncasecmp>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	bf0c      	ite	eq
 800dfd6:	2301      	moveq	r3, #1
 800dfd8:	2300      	movne	r3, #0
 800dfda:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800dfe4:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800dfe8:	f083 0301 	eor.w	r3, r3, #1
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d030      	beq.n	800e054 <http_cb+0x3d8>
 800dff2:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800dff6:	49b2      	ldr	r1, [pc, #712]	@ (800e2c0 <http_cb+0x644>)
 800dff8:	4618      	mov	r0, r3
 800dffa:	f009 fba3 	bl	8017744 <mg_str_s>
 800dffe:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e002:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800e006:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800e00a:	cb0c      	ldmia	r3, {r2, r3}
 800e00c:	c903      	ldmia	r1, {r0, r1}
 800e00e:	f009 fc5c 	bl	80178ca <mg_strcasecmp>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d012      	beq.n	800e03e <http_cb+0x3c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800e018:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800e01c:	49a9      	ldr	r1, [pc, #676]	@ (800e2c4 <http_cb+0x648>)
 800e01e:	4618      	mov	r0, r3
 800e020:	f009 fb90 	bl	8017744 <mg_str_s>
 800e024:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e028:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800e02c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800e030:	cb0c      	ldmia	r3, {r2, r3}
 800e032:	c903      	ldmia	r1, {r0, r1}
 800e034:	f009 fc49 	bl	80178ca <mg_strcasecmp>
 800e038:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d10a      	bne.n	800e054 <http_cb+0x3d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800e03e:	2301      	movs	r3, #1
 800e040:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800e044:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800e048:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800e04c:	4413      	add	r3, r2
 800e04e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800e052:	e022      	b.n	800e09a <http_cb+0x41e>
        } else if (is_response) {
 800e054:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01e      	beq.n	800e09a <http_cb+0x41e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800e05c:	f107 0310 	add.w	r3, r7, #16
 800e060:	4618      	mov	r0, r3
 800e062:	f7ff fd4c 	bl	800dafe <mg_http_status>
 800e066:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800e06a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800e06e:	2bc7      	cmp	r3, #199	@ 0xc7
 800e070:	dd0a      	ble.n	800e088 <http_cb+0x40c>
 800e072:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800e076:	2bcc      	cmp	r3, #204	@ 0xcc
 800e078:	d006      	beq.n	800e088 <http_cb+0x40c>
 800e07a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800e07e:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800e082:	d001      	beq.n	800e088 <http_cb+0x40c>
 800e084:	2301      	movs	r3, #1
 800e086:	e000      	b.n	800e08a <http_cb+0x40e>
 800e088:	2300      	movs	r3, #0
 800e08a:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800e08e:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800e092:	f003 0301 	and.w	r3, r3, #1
 800e096:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800e09a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d02c      	beq.n	800e0fc <http_cb+0x480>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800e0a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e0a6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e0b0:	f003 0302 	and.w	r3, r3, #2
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10a      	bne.n	800e0d0 <http_cb+0x454>
 800e0ba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e0be:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800e0c2:	4b81      	ldr	r3, [pc, #516]	@ (800e2c8 <http_cb+0x64c>)
 800e0c4:	4a80      	ldr	r2, [pc, #512]	@ (800e2c8 <http_cb+0x64c>)
 800e0c6:	f240 119b 	movw	r1, #411	@ 0x19b
 800e0ca:	6800      	ldr	r0, [r0, #0]
 800e0cc:	f7fe fbc6 	bl	800c85c <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 800e0d0:	4b7e      	ldr	r3, [pc, #504]	@ (800e2cc <http_cb+0x650>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	dd11      	ble.n	800e0fc <http_cb+0x480>
 800e0d8:	4b7d      	ldr	r3, [pc, #500]	@ (800e2d0 <http_cb+0x654>)
 800e0da:	f640 12da 	movw	r2, #2522	@ 0x9da
 800e0de:	497d      	ldr	r1, [pc, #500]	@ (800e2d4 <http_cb+0x658>)
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	f001 fb2f 	bl	800f744 <mg_log_prefix>
 800e0e6:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <http_cb+0x476>
 800e0ee:	4b7a      	ldr	r3, [pc, #488]	@ (800e2d8 <http_cb+0x65c>)
 800e0f0:	e000      	b.n	800e0f4 <http_cb+0x478>
 800e0f2:	4b7a      	ldr	r3, [pc, #488]	@ (800e2dc <http_cb+0x660>)
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	487a      	ldr	r0, [pc, #488]	@ (800e2e0 <http_cb+0x664>)
 800e0f8:	f001 fb74 	bl	800f7e4 <mg_log>
        }
      }

      if (is_chunked) {
 800e0fc:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800e100:	2b00      	cmp	r3, #0
 800e102:	f000 80f7 	beq.w	800e2f4 <http_cb+0x678>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
    	  printf("🔄 Processing chunked transfer encoding\n");
 800e106:	4877      	ldr	r0, [pc, #476]	@ (800e2e4 <http_cb+0x668>)
 800e108:	f01a f9dc 	bl	80284c4 <puts>
        char *s = (char *) c->recv.buf + ofs + n;
 800e10c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e110:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e118:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800e11c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800e120:	440b      	add	r3, r1
 800e122:	4413      	add	r3, r2
 800e124:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800e128:	2300      	movs	r3, #0
 800e12a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800e12e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e132:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e13a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800e13e:	1ad2      	subs	r2, r2, r3
 800e140:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800e14a:	e006      	b.n	800e15a <http_cb+0x4de>
 800e14c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800e150:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800e154:	4413      	add	r3, r2
 800e156:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800e15a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800e15e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800e162:	18d0      	adds	r0, r2, r3
 800e164:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800e168:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800e16c:	1ad1      	subs	r1, r2, r3
 800e16e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800e172:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800e176:	f7ff fcf2 	bl	800db5e <skip_chunk>
 800e17a:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800e17e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800e182:	2b00      	cmp	r3, #0
 800e184:	dd03      	ble.n	800e18e <http_cb+0x512>
 800e186:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1de      	bne.n	800e14c <http_cb+0x4d0>
        if (cl == 0){
 800e18e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800e192:	2b00      	cmp	r3, #0
 800e194:	d103      	bne.n	800e19e <http_cb+0x522>
        	printf("⏳ Incomplete chunked body, waiting for more data\n");
 800e196:	4854      	ldr	r0, [pc, #336]	@ (800e2e8 <http_cb+0x66c>)
 800e198:	f01a f994 	bl	80284c4 <puts>
        	break;  // No zero-len chunk, buffer more data
 800e19c:	e165      	b.n	800e46a <http_cb+0x7ee>
        }
        if (cl < 0) {
 800e19e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	da08      	bge.n	800e1b8 <http_cb+0x53c>
          mg_error(c, "Invalid chunk");
 800e1a6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e1aa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e1ae:	494f      	ldr	r1, [pc, #316]	@ (800e2ec <http_cb+0x670>)
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	f7fb fbd1 	bl	8009958 <mg_error>
          break;
 800e1b6:	e158      	b.n	800e46a <http_cb+0x7ee>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800e1be:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e1c2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800e1cc:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800e1d0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e1d4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e1d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800e1dc:	e03e      	b.n	800e25c <http_cb+0x5e0>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800e1de:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e1e2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e1e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e1ea:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800e1ee:	18d0      	adds	r0, r2, r3
 800e1f0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800e1f4:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800e1f8:	4413      	add	r3, r2
 800e1fa:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800e1fe:	4413      	add	r3, r2
 800e200:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800e204:	4619      	mov	r1, r3
 800e206:	f01a fab1 	bl	802876c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800e20a:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800e20e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800e212:	4413      	add	r3, r2
 800e214:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800e218:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e21c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e220:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e224:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800e228:	441a      	add	r2, r3
 800e22a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e22e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e232:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800e236:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e23a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e23e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e242:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800e246:	441a      	add	r2, r3
 800e248:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e24c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e250:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800e254:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d016      	beq.n	800e28a <http_cb+0x60e>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800e25c:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800e260:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800e264:	18d0      	adds	r0, r2, r3
 800e266:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800e26a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800e26e:	1ad1      	subs	r1, r2, r3
 800e270:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800e274:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800e278:	f7ff fc71 	bl	800db5e <skip_chunk>
 800e27c:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800e280:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800e284:	2b00      	cmp	r3, #0
 800e286:	dcaa      	bgt.n	800e1de <http_cb+0x562>
 800e288:	e000      	b.n	800e28c <http_cb+0x610>
          if (dl == 0) break;
 800e28a:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800e28c:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800e290:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800e294:	4413      	add	r3, r2
 800e296:	461a      	mov	r2, r3
 800e298:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800e29c:	4413      	add	r3, r2
 800e29e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
        printf("✅ Chunked message fully assembled: body.len=%lu\n", hm.body.len);
 800e2a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e2a6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e2aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	480f      	ldr	r0, [pc, #60]	@ (800e2f0 <http_cb+0x674>)
 800e2b2:	f01a f863 	bl	802837c <iprintf>
 800e2b6:	e05a      	b.n	800e36e <http_cb+0x6f2>
 800e2b8:	0802e1f8 	.word	0x0802e1f8
 800e2bc:	0802d68c 	.word	0x0802d68c
 800e2c0:	0802d6a8 	.word	0x0802d6a8
 800e2c4:	0802d6a4 	.word	0x0802d6a4
 800e2c8:	0802db70 	.word	0x0802db70
 800e2cc:	2400025c 	.word	0x2400025c
 800e2d0:	08031180 	.word	0x08031180
 800e2d4:	0802d330 	.word	0x0802d330
 800e2d8:	0802e208 	.word	0x0802e208
 800e2dc:	0802e214 	.word	0x0802e214
 800e2e0:	0802e21c 	.word	0x0802e21c
 800e2e4:	0802e23c 	.word	0x0802e23c
 800e2e8:	0802e268 	.word	0x0802e268
 800e2ec:	0802e29c 	.word	0x0802e29c
 800e2f0:	0802e2ac 	.word	0x0802e2ac
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800e2f4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e2f8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e300:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800e304:	1ad2      	subs	r2, r2, r3
 800e306:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len){
 800e310:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e314:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e318:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e31c:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800e320:	429a      	cmp	r2, r3
 800e322:	d20c      	bcs.n	800e33e <http_cb+0x6c2>
        	printf("⏳ Incomplete body, need more data: have=%lu, want=%lu\n", len, hm.body.len);
 800e324:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e328:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e32c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e330:	461a      	mov	r2, r3
 800e332:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800e336:	4859      	ldr	r0, [pc, #356]	@ (800e49c <http_cb+0x820>)
 800e338:	f01a f820 	bl	802837c <iprintf>
        	break;  // Buffer more data
 800e33c:	e095      	b.n	800e46a <http_cb+0x7ee>
        }
        ofs += (size_t) n + hm.body.len;
 800e33e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e342:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e346:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e34a:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800e34e:	4413      	add	r3, r2
 800e350:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800e354:	4413      	add	r3, r2
 800e356:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
        printf("✅ Non-chunked message complete: body.len=%lu\n", hm.body.len);
 800e35a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e35e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800e362:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e366:	4619      	mov	r1, r3
 800e368:	484d      	ldr	r0, [pc, #308]	@ (800e4a0 <http_cb+0x824>)
 800e36a:	f01a f807 	bl	802837c <iprintf>
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800e36e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e372:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e37c:	f003 0304 	and.w	r3, r3, #4
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <http_cb+0x720>
 800e386:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e38a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800e394:	f043 0301 	orr.w	r3, r3, #1
 800e398:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800e39c:	f107 0210 	add.w	r2, r7, #16
 800e3a0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e3a4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e3a8:	210b      	movs	r1, #11
 800e3aa:	6818      	ldr	r0, [r3, #0]
 800e3ac:	f7fb fab4 	bl	8009918 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800e3b0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e3b4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e3be:	f003 0304 	and.w	r3, r3, #4
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d037      	beq.n	800e438 <http_cb+0x7bc>
 800e3c8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e3cc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d12b      	bne.n	800e438 <http_cb+0x7bc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800e3e0:	f107 0310 	add.w	r3, r7, #16
 800e3e4:	492f      	ldr	r1, [pc, #188]	@ (800e4a4 <http_cb+0x828>)
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fd f9c2 	bl	800b770 <mg_http_get_header>
 800e3ec:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800e3f0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d01f      	beq.n	800e438 <http_cb+0x7bc>
 800e3f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800e3fc:	492a      	ldr	r1, [pc, #168]	@ (800e4a8 <http_cb+0x82c>)
 800e3fe:	4618      	mov	r0, r3
 800e400:	f009 f9a0 	bl	8017744 <mg_str_s>
 800e404:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800e408:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800e40c:	cb0c      	ldmia	r3, {r2, r3}
 800e40e:	c903      	ldmia	r1, {r0, r1}
 800e410:	f009 fa5b 	bl	80178ca <mg_strcasecmp>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10e      	bne.n	800e438 <http_cb+0x7bc>
        	printf("🔚 Connection: close header detected, setting is_draining\n");
 800e41a:	4824      	ldr	r0, [pc, #144]	@ (800e4ac <http_cb+0x830>)
 800e41c:	f01a f852 	bl	80284c4 <puts>
          c->is_draining = 1;  // honor "Connection: close"
 800e420:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e424:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e42e:	f043 0310 	orr.w	r3, r3, #16
 800e432:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800e436:	e018      	b.n	800e46a <http_cb+0x7ee>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800e438:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e43c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10c      	bne.n	800e46a <http_cb+0x7ee>
 800e450:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e454:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e45c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800e460:	429a      	cmp	r2, r3
 800e462:	f4ff ac74 	bcc.w	800dd4e <http_cb+0xd2>
 800e466:	e000      	b.n	800e46a <http_cb+0x7ee>
      if (n == 0) break;                 // Request is not buffered yet
 800e468:	bf00      	nop
        }
      }
    }
    if (ofs > 0){
 800e46a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d010      	beq.n	800e494 <http_cb+0x818>
    	printf("🧹 Cleaning up %lu processed bytes from recv buffer\n", ofs);
 800e472:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 800e476:	480e      	ldr	r0, [pc, #56]	@ (800e4b0 <http_cb+0x834>)
 800e478:	f019 ff80 	bl	802837c <iprintf>
    	mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800e47c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800e480:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3338      	adds	r3, #56	@ 0x38
 800e488:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800e48c:	2100      	movs	r1, #0
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 f940 	bl	800e714 <mg_iobuf_del>
    }
  }
  (void) ev_data;
}
 800e494:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	0802e2e0 	.word	0x0802e2e0
 800e4a0:	0802e31c 	.word	0x0802e31c
 800e4a4:	0802e34c 	.word	0x0802e34c
 800e4a8:	0802e358 	.word	0x0802e358
 800e4ac:	0802e360 	.word	0x0802e360
 800e4b0:	0802e39c 	.word	0x0802e39c

0800e4b4 <mg_http_connect>:
  while (done == false) mg_mgr_poll(&mgr, 100);
  mg_mgr_free(&mgr);
}

struct mg_connection *mg_http_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fn_data) {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
 800e4c0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	68b9      	ldr	r1, [r7, #8]
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f001 fdb9 	bl	8010040 <mg_connect>
 800e4ce:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <mg_http_connect+0x2a>
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	4a03      	ldr	r2, [pc, #12]	@ (800e4e8 <mg_http_connect+0x34>)
 800e4da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800e4de:	697b      	ldr	r3, [r7, #20]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	0800dc7d 	.word	0x0800dc7d

0800e4ec <mg_http_listen>:

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
 800e4f8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	68b9      	ldr	r1, [r7, #8]
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f001 fe3b 	bl	801017c <mg_listen>
 800e506:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d003      	beq.n	800e516 <mg_http_listen+0x2a>
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	4a03      	ldr	r2, [pc, #12]	@ (800e520 <mg_http_listen+0x34>)
 800e512:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800e516:	697b      	ldr	r3, [r7, #20]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	0800dc7d 	.word	0x0800dc7d

0800e524 <roundup>:





static size_t roundup(size_t size, size_t align) {
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00a      	beq.n	800e54a <roundup+0x26>
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	4413      	add	r3, r2
 800e53a:	1e5a      	subs	r2, r3, #1
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	fb02 f303 	mul.w	r3, r2, r3
 800e548:	e000      	b.n	800e54c <roundup+0x28>
 800e54a:	687b      	ldr	r3, [r7, #4]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	370c      	adds	r7, #12
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr

0800e558 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800e558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e55c:	b088      	sub	sp, #32
 800e55e:	af02      	add	r7, sp, #8
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800e564:	2301      	movs	r3, #1
 800e566:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	4619      	mov	r1, r3
 800e56e:	6838      	ldr	r0, [r7, #0]
 800e570:	f7ff ffd8 	bl	800e524 <roundup>
 800e574:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d117      	bne.n	800e5ac <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f014 fa96 	bl	8022ab8 <mg_bzero>
    free(io->buf);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4618      	mov	r0, r3
 800e592:	f018 f95f 	bl	8026854 <free>
    io->buf = NULL;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	605a      	str	r2, [r3, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685a      	ldr	r2, [r3, #4]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	609a      	str	r2, [r3, #8]
 800e5aa:	e053      	b.n	800e654 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	683a      	ldr	r2, [r7, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d04e      	beq.n	800e654 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	2001      	movs	r0, #1
 800e5ba:	f018 f927 	bl	802680c <calloc>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d028      	beq.n	800e61a <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	683a      	ldr	r2, [r7, #0]
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	bf28      	it	cs
 800e5d2:	4613      	movcs	r3, r2
 800e5d4:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00a      	beq.n	800e5f2 <mg_iobuf_resize+0x9a>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d006      	beq.n	800e5f2 <mg_iobuf_resize+0x9a>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6938      	ldr	r0, [r7, #16]
 800e5ee:	f01a f8bd 	bl	802876c <memmove>
      mg_bzero(io->buf, io->size);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	f014 fa5b 	bl	8022ab8 <mg_bzero>
      free(io->buf);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4618      	mov	r0, r3
 800e608:	f018 f924 	bl	8026854 <free>
      io->buf = (unsigned char *) p;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	605a      	str	r2, [r3, #4]
 800e618:	e01c      	b.n	800e654 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800e61e:	4b10      	ldr	r3, [pc, #64]	@ (800e660 <mg_iobuf_resize+0x108>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	dd16      	ble.n	800e654 <mg_iobuf_resize+0xfc>
 800e626:	4b0f      	ldr	r3, [pc, #60]	@ (800e664 <mg_iobuf_resize+0x10c>)
 800e628:	f640 2261 	movw	r2, #2657	@ 0xa61
 800e62c:	490e      	ldr	r1, [pc, #56]	@ (800e668 <mg_iobuf_resize+0x110>)
 800e62e:	2001      	movs	r0, #1
 800e630:	f001 f888 	bl	800f744 <mg_log_prefix>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	4698      	mov	r8, r3
 800e63c:	4691      	mov	r9, r2
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2200      	movs	r2, #0
 800e642:	461c      	mov	r4, r3
 800e644:	4615      	mov	r5, r2
 800e646:	e9cd 4500 	strd	r4, r5, [sp]
 800e64a:	4642      	mov	r2, r8
 800e64c:	464b      	mov	r3, r9
 800e64e:	4807      	ldr	r0, [pc, #28]	@ (800e66c <mg_iobuf_resize+0x114>)
 800e650:	f001 f8c8 	bl	800f7e4 <mg_log>
    }
  }
  return ok;
 800e654:	697b      	ldr	r3, [r7, #20]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e660:	2400025c 	.word	0x2400025c
 800e664:	08031188 	.word	0x08031188
 800e668:	0802d330 	.word	0x0802d330
 800e66c:	0802e40c 	.word	0x0802e40c

0800e670 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b086      	sub	sp, #24
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	689a      	ldr	r2, [r3, #8]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	441a      	add	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	4619      	mov	r1, r3
 800e68c:	4610      	mov	r0, r2
 800e68e:	f7ff ff49 	bl	800e524 <roundup>
 800e692:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800e694:	6979      	ldr	r1, [r7, #20]
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7ff ff5e 	bl	800e558 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d001      	beq.n	800e6aa <mg_iobuf_add+0x3a>
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d210      	bcs.n	800e6d6 <mg_iobuf_add+0x66>
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	68b9      	ldr	r1, [r7, #8]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	440b      	add	r3, r1
 800e6be:	18d0      	adds	r0, r2, r3
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	18d1      	adds	r1, r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	689a      	ldr	r2, [r3, #8]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	f01a f84b 	bl	802876c <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d008      	beq.n	800e6ee <mg_iobuf_add+0x7e>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f01a f83f 	bl	802876c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d902      	bls.n	800e6fe <mg_iobuf_add+0x8e>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	609a      	str	r2, [r3, #8]
  io->len += len;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	689a      	ldr	r2, [r3, #8]
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	441a      	add	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	609a      	str	r2, [r3, #8]
  return len;
 800e70a:	683b      	ldr	r3, [r7, #0]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	429a      	cmp	r2, r3
 800e728:	d902      	bls.n	800e730 <mg_iobuf_del+0x1c>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	441a      	add	r2, r3
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d904      	bls.n	800e748 <mg_iobuf_del+0x34>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	689a      	ldr	r2, [r3, #8]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d012      	beq.n	800e776 <mg_iobuf_del+0x62>
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	18d0      	adds	r0, r2, r3
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	68b9      	ldr	r1, [r7, #8]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	440b      	add	r3, r1
 800e762:	18d1      	adds	r1, r2, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	689a      	ldr	r2, [r3, #8]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	1ad2      	subs	r2, r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	461a      	mov	r2, r3
 800e772:	f019 fffb 	bl	802876c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00a      	beq.n	800e794 <mg_iobuf_del+0x80>
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6899      	ldr	r1, [r3, #8]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	1acb      	subs	r3, r1, r3
 800e78a:	4413      	add	r3, r2
 800e78c:	6879      	ldr	r1, [r7, #4]
 800e78e:	4618      	mov	r0, r3
 800e790:	f014 f992 	bl	8022ab8 <mg_bzero>
  io->len -= len;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	689a      	ldr	r2, [r3, #8]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	1ad2      	subs	r2, r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	609a      	str	r2, [r3, #8]
  return len;
 800e7a0:	687b      	ldr	r3, [r7, #4]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff fecf 	bl	800e558 <mg_iobuf_resize>
}
 800e7ba:	bf00      	nop
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <escapeseq+0x12>
 800e7d2:	4b04      	ldr	r3, [pc, #16]	@ (800e7e4 <escapeseq+0x20>)
 800e7d4:	e000      	b.n	800e7d8 <escapeseq+0x14>
 800e7d6:	4b04      	ldr	r3, [pc, #16]	@ (800e7e8 <escapeseq+0x24>)
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	0802e418 	.word	0x0802e418
 800e7e8:	0802e420 	.word	0x0802e420

0800e7ec <json_esc>:

static char json_esc(int c, int esc) {
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b086      	sub	sp, #24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800e7f6:	6838      	ldr	r0, [r7, #0]
 800e7f8:	f7ff ffe4 	bl	800e7c4 <escapeseq>
 800e7fc:	6138      	str	r0, [r7, #16]
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	bf0c      	ite	eq
 800e804:	2301      	moveq	r3, #1
 800e806:	2300      	movne	r3, #0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7ff ffda 	bl	800e7c4 <escapeseq>
 800e810:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	e010      	b.n	800e83a <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	461a      	mov	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4293      	cmp	r3, r2
 800e822:	d107      	bne.n	800e834 <json_esc+0x48>
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	1ad3      	subs	r3, r2, r3
 800e82a:	461a      	mov	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	e007      	b.n	800e844 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	3301      	adds	r3, #1
 800e838:	617b      	str	r3, [r7, #20]
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1ea      	bne.n	800e818 <json_esc+0x2c>
  }
  return 0;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800e856:	2300      	movs	r3, #0
 800e858:	60fb      	str	r3, [r7, #12]
 800e85a:	e02e      	b.n	800e8ba <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	4413      	add	r3, r2
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b5c      	cmp	r3, #92	@ 0x5c
 800e866:	d114      	bne.n	800e892 <mg_pass_string+0x46>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	3301      	adds	r3, #1
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	429a      	cmp	r2, r3
 800e870:	dd0f      	ble.n	800e892 <mg_pass_string+0x46>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	3301      	adds	r3, #1
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	4413      	add	r3, r2
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2101      	movs	r1, #1
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff ffb4 	bl	800e7ec <json_esc>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d003      	beq.n	800e892 <mg_pass_string+0x46>
      i++;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3301      	adds	r3, #1
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	e010      	b.n	800e8b4 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4413      	add	r3, r2
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d102      	bne.n	800e8a4 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800e89e:	f06f 0301 	mvn.w	r3, #1
 800e8a2:	e010      	b.n	800e8c6 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	2b22      	cmp	r3, #34	@ 0x22
 800e8ae:	d101      	bne.n	800e8b4 <mg_pass_string+0x68>
      return i;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	e008      	b.n	800e8c6 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	dbcc      	blt.n	800e85c <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800e8c2:	f06f 0301 	mvn.w	r3, #1
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800e8d0:	b480      	push	{r7}
 800e8d2:	b091      	sub	sp, #68	@ 0x44
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800e8dc:	f04f 0200 	mov.w	r2, #0
 800e8e0:	f04f 0300 	mov.w	r3, #0
 800e8e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800e8f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	da0a      	bge.n	800e90e <mg_atod+0x3e>
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800e8fe:	d106      	bne.n	800e90e <mg_atod+0x3e>
    sign = -1, i++;
 800e900:	f04f 33ff 	mov.w	r3, #4294967295
 800e904:	633b      	str	r3, [r7, #48]	@ 0x30
 800e906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e908:	3301      	adds	r3, #1
 800e90a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e90c:	e00a      	b.n	800e924 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800e90e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	429a      	cmp	r2, r3
 800e914:	da21      	bge.n	800e95a <mg_atod+0x8a>
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	2b2b      	cmp	r3, #43	@ 0x2b
 800e91c:	d11d      	bne.n	800e95a <mg_atod+0x8a>
    i++;
 800e91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e920:	3301      	adds	r3, #1
 800e922:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800e924:	e019      	b.n	800e95a <mg_atod+0x8a>
    d *= 10.0;
 800e926:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800e92a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800e92e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e932:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800e936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	4413      	add	r3, r2
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	3b30      	subs	r3, #48	@ 0x30
 800e940:	ee07 3a90 	vmov	s15, r3
 800e944:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e948:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800e94c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e950:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800e954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e956:	3301      	adds	r3, #1
 800e958:	637b      	str	r3, [r7, #52]	@ 0x34
 800e95a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	429a      	cmp	r2, r3
 800e960:	da0b      	bge.n	800e97a <mg_atod+0xaa>
 800e962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4413      	add	r3, r2
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e96c:	d905      	bls.n	800e97a <mg_atod+0xaa>
 800e96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	4413      	add	r3, r2
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	2b39      	cmp	r3, #57	@ 0x39
 800e978:	d9d5      	bls.n	800e926 <mg_atod+0x56>
  }
  d *= sign;
 800e97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97c:	ee07 3a90 	vmov	s15, r3
 800e980:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e984:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800e988:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e98c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800e990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	429a      	cmp	r2, r3
 800e996:	da51      	bge.n	800ea3c <mg_atod+0x16c>
 800e998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	4413      	add	r3, r2
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9a2:	d14b      	bne.n	800ea3c <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800e9a4:	f04f 0200 	mov.w	r2, #0
 800e9a8:	f04f 0300 	mov.w	r3, #0
 800e9ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800e9b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800eb68 <mg_atod+0x298>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800e9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9bc:	3301      	adds	r3, #1
 800e9be:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800e9c0:	e01d      	b.n	800e9fe <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800e9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	3b30      	subs	r3, #48	@ 0x30
 800e9cc:	ee07 3a90 	vmov	s15, r3
 800e9d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e9d4:	ed97 7b08 	vldr	d7, [r7, #32]
 800e9d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e9dc:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800e9e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e9e4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800e9e8:	ed97 6b08 	vldr	d6, [r7, #32]
 800e9ec:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800e9f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e9f4:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800e9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	da0b      	bge.n	800ea1e <mg_atod+0x14e>
 800ea06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea10:	d905      	bls.n	800ea1e <mg_atod+0x14e>
 800ea12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	4413      	add	r3, r2
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b39      	cmp	r3, #57	@ 0x39
 800ea1c:	d9d1      	bls.n	800e9c2 <mg_atod+0xf2>
    }
    d += frac * sign;
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea20:	ee07 3a90 	vmov	s15, r3
 800ea24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ea28:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800ea2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ea30:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800ea34:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ea38:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800ea3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	da7e      	bge.n	800eb42 <mg_atod+0x272>
 800ea44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	4413      	add	r3, r2
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2b65      	cmp	r3, #101	@ 0x65
 800ea4e:	d005      	beq.n	800ea5c <mg_atod+0x18c>
 800ea50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	4413      	add	r3, r2
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	2b45      	cmp	r3, #69	@ 0x45
 800ea5a:	d172      	bne.n	800eb42 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	61bb      	str	r3, [r7, #24]
 800ea60:	2300      	movs	r3, #0
 800ea62:	617b      	str	r3, [r7, #20]
    i++;
 800ea64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea66:	3301      	adds	r3, #1
 800ea68:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800ea6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	da0a      	bge.n	800ea88 <mg_atod+0x1b8>
 800ea72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	4413      	add	r3, r2
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea7c:	d104      	bne.n	800ea88 <mg_atod+0x1b8>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	617b      	str	r3, [r7, #20]
 800ea82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea84:	3301      	adds	r3, #1
 800ea86:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800ea88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	da19      	bge.n	800eac4 <mg_atod+0x1f4>
 800ea90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	4413      	add	r3, r2
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea9a:	d113      	bne.n	800eac4 <mg_atod+0x1f4>
 800ea9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800eaa2:	e00f      	b.n	800eac4 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800eaa4:	69ba      	ldr	r2, [r7, #24]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	005b      	lsls	r3, r3, #1
 800eaae:	4619      	mov	r1, r3
 800eab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eab2:	1c5a      	adds	r2, r3, #1
 800eab4:	637a      	str	r2, [r7, #52]	@ 0x34
 800eab6:	461a      	mov	r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	4413      	add	r3, r2
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	3b30      	subs	r3, #48	@ 0x30
 800eac0:	440b      	add	r3, r1
 800eac2:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800eac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	da0f      	bge.n	800eaec <mg_atod+0x21c>
 800eacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	4413      	add	r3, r2
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	2b2f      	cmp	r3, #47	@ 0x2f
 800ead6:	d909      	bls.n	800eaec <mg_atod+0x21c>
 800ead8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	4413      	add	r3, r2
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b39      	cmp	r3, #57	@ 0x39
 800eae2:	d803      	bhi.n	800eaec <mg_atod+0x21c>
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800eaea:	dbdb      	blt.n	800eaa4 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d002      	beq.n	800eaf8 <mg_atod+0x228>
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	425b      	negs	r3, r3
 800eaf6:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	61fb      	str	r3, [r7, #28]
 800eafc:	e00a      	b.n	800eb14 <mg_atod+0x244>
 800eafe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800eb02:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800eb06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb0a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	3301      	adds	r3, #1
 800eb12:	61fb      	str	r3, [r7, #28]
 800eb14:	69fa      	ldr	r2, [r7, #28]
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	dbf0      	blt.n	800eafe <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
 800eb20:	e00a      	b.n	800eb38 <mg_atod+0x268>
 800eb22:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800eb26:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800eb2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb2e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	3301      	adds	r3, #1
 800eb36:	61fb      	str	r3, [r7, #28]
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	425b      	negs	r3, r3
 800eb3c:	69fa      	ldr	r2, [r7, #28]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	dbef      	blt.n	800eb22 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <mg_atod+0x27e>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb4c:	601a      	str	r2, [r3, #0]
  return d;
 800eb4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800eb52:	ec43 2b17 	vmov	d7, r2, r3
}
 800eb56:	eeb0 0b47 	vmov.f64	d0, d7
 800eb5a:	3744      	adds	r7, #68	@ 0x44
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	f3af 8000 	nop.w
 800eb68:	9999999a 	.word	0x9999999a
 800eb6c:	3fb99999 	.word	0x3fb99999

0800eb70 <mg_json_next>:

// Iterate over object or array elements
size_t mg_json_next(struct mg_str obj, size_t ofs, struct mg_str *key,
                    struct mg_str *val) {
 800eb70:	b590      	push	{r4, r7, lr}
 800eb72:	b08d      	sub	sp, #52	@ 0x34
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	f107 0410 	add.w	r4, r7, #16
 800eb7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb7e:	60fa      	str	r2, [r7, #12]
 800eb80:	60bb      	str	r3, [r7, #8]
  if (ofs >= obj.len) {
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d302      	bcc.n	800eb90 <mg_json_next+0x20>
    ofs = 0;  // Out of boundaries, stop scanning
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	60fb      	str	r3, [r7, #12]
 800eb8e:	e133      	b.n	800edf8 <mg_json_next+0x288>
  } else if (obj.len < 2 || (*obj.buf != '{' && *obj.buf != '[')) {
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d907      	bls.n	800eba6 <mg_json_next+0x36>
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b7b      	cmp	r3, #123	@ 0x7b
 800eb9c:	d006      	beq.n	800ebac <mg_json_next+0x3c>
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	2b5b      	cmp	r3, #91	@ 0x5b
 800eba4:	d002      	beq.n	800ebac <mg_json_next+0x3c>
    ofs = 0;  // Not an array or object, stop
 800eba6:	2300      	movs	r3, #0
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	e125      	b.n	800edf8 <mg_json_next+0x288>
  } else {
    struct mg_str sub = mg_str_n(obj.buf + ofs, obj.len - ofs);
 800ebac:	693a      	ldr	r2, [r7, #16]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	18d1      	adds	r1, r2, r3
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	1ad2      	subs	r2, r2, r3
 800ebb8:	f107 0320 	add.w	r3, r7, #32
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f008 fdde 	bl	801777e <mg_str_n>
    if (ofs == 0) ofs++, sub.buf++, sub.len--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d108      	bne.n	800ebda <mg_json_next+0x6a>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	623b      	str	r3, [r7, #32]
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (*obj.buf == '[') {  // Iterate over an array
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b5b      	cmp	r3, #91	@ 0x5b
 800ebe0:	d146      	bne.n	800ec70 <mg_json_next+0x100>
      int n = 0, o = mg_json_get(sub, "$", &n);
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	61fb      	str	r3, [r7, #28]
 800ebe6:	f107 031c 	add.w	r3, r7, #28
 800ebea:	4a86      	ldr	r2, [pc, #536]	@ (800ee04 <mg_json_next+0x294>)
 800ebec:	f107 0120 	add.w	r1, r7, #32
 800ebf0:	c903      	ldmia	r1, {r0, r1}
 800ebf2:	f000 f909 	bl	800ee08 <mg_json_get>
 800ebf6:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	db09      	blt.n	800ec12 <mg_json_next+0xa2>
 800ebfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	db06      	blt.n	800ec12 <mg_json_next+0xa2>
 800ec04:	69fa      	ldr	r2, [r7, #28]
 800ec06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec08:	4413      	add	r3, r2
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d902      	bls.n	800ec18 <mg_json_next+0xa8>
        ofs = 0;  // Error parsing key, stop scanning
 800ec12:	2300      	movs	r3, #0
 800ec14:	60fb      	str	r3, [r7, #12]
 800ec16:	e0b6      	b.n	800ed86 <mg_json_next+0x216>
      } else {
        if (key) *key = mg_str_n(NULL, 0);
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00c      	beq.n	800ec38 <mg_json_next+0xc8>
 800ec1e:	68bc      	ldr	r4, [r7, #8]
 800ec20:	463b      	mov	r3, r7
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	4618      	mov	r0, r3
 800ec28:	f008 fda9 	bl	801777e <mg_str_n>
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	463b      	mov	r3, r7
 800ec30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ec34:	e882 0003 	stmia.w	r2, {r0, r1}
        if (val) *val = mg_str_n(sub.buf + o, (size_t) n);
 800ec38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00f      	beq.n	800ec5e <mg_json_next+0xee>
 800ec3e:	6a3a      	ldr	r2, [r7, #32]
 800ec40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec42:	18d1      	adds	r1, r2, r3
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	461a      	mov	r2, r3
 800ec48:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ec4a:	463b      	mov	r3, r7
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f008 fd96 	bl	801777e <mg_str_n>
 800ec52:	4622      	mov	r2, r4
 800ec54:	463b      	mov	r3, r7
 800ec56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ec5a:	e882 0003 	stmia.w	r2, {r0, r1}
        ofs = (size_t) (&sub.buf[o + n] - obj.buf);
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	69f9      	ldr	r1, [r7, #28]
 800ec62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec64:	440a      	add	r2, r1
 800ec66:	441a      	add	r2, r3
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	60fb      	str	r3, [r7, #12]
 800ec6e:	e08e      	b.n	800ed8e <mg_json_next+0x21e>
      }
    } else {  // Iterate over an object
      int n = 0, o = mg_json_get(sub, "$", &n);
 800ec70:	2300      	movs	r3, #0
 800ec72:	61bb      	str	r3, [r7, #24]
 800ec74:	f107 0318 	add.w	r3, r7, #24
 800ec78:	4a62      	ldr	r2, [pc, #392]	@ (800ee04 <mg_json_next+0x294>)
 800ec7a:	f107 0120 	add.w	r1, r7, #32
 800ec7e:	c903      	ldmia	r1, {r0, r1}
 800ec80:	f000 f8c2 	bl	800ee08 <mg_json_get>
 800ec84:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	db09      	blt.n	800eca0 <mg_json_next+0x130>
 800ec8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	db06      	blt.n	800eca0 <mg_json_next+0x130>
 800ec92:	69ba      	ldr	r2, [r7, #24]
 800ec94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec96:	4413      	add	r3, r2
 800ec98:	461a      	mov	r2, r3
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d902      	bls.n	800eca6 <mg_json_next+0x136>
        ofs = 0;  // Error parsing key, stop scanning
 800eca0:	2300      	movs	r3, #0
 800eca2:	60fb      	str	r3, [r7, #12]
 800eca4:	e06f      	b.n	800ed86 <mg_json_next+0x216>
      } else {
        if (key) *key = mg_str_n(sub.buf + o, (size_t) n);
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00f      	beq.n	800eccc <mg_json_next+0x15c>
 800ecac:	6a3a      	ldr	r2, [r7, #32]
 800ecae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb0:	18d1      	adds	r1, r2, r3
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	68bc      	ldr	r4, [r7, #8]
 800ecb8:	463b      	mov	r3, r7
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f008 fd5f 	bl	801777e <mg_str_n>
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	463b      	mov	r3, r7
 800ecc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ecc8:	e882 0003 	stmia.w	r2, {r0, r1}
        sub.buf += o + n, sub.len -= (size_t) (o + n);
 800eccc:	6a3b      	ldr	r3, [r7, #32]
 800ecce:	69b9      	ldr	r1, [r7, #24]
 800ecd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecd2:	440a      	add	r2, r1
 800ecd4:	4413      	add	r3, r2
 800ecd6:	623b      	str	r3, [r7, #32]
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecda:	69b9      	ldr	r1, [r7, #24]
 800ecdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecde:	440a      	add	r2, r1
 800ece0:	1a9b      	subs	r3, r3, r2
 800ece2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (sub.len > 0 && *sub.buf != ':') sub.len--, sub.buf++;
 800ece4:	e005      	b.n	800ecf2 <mg_json_next+0x182>
 800ece6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece8:	3b01      	subs	r3, #1
 800ecea:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecec:	6a3b      	ldr	r3, [r7, #32]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	623b      	str	r3, [r7, #32]
 800ecf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d003      	beq.n	800ed00 <mg_json_next+0x190>
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	2b3a      	cmp	r3, #58	@ 0x3a
 800ecfe:	d1f2      	bne.n	800ece6 <mg_json_next+0x176>
        if (sub.len > 0 && *sub.buf == ':') sub.len--, sub.buf++;
 800ed00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d009      	beq.n	800ed1a <mg_json_next+0x1aa>
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed0c:	d105      	bne.n	800ed1a <mg_json_next+0x1aa>
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed10:	3b01      	subs	r3, #1
 800ed12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	3301      	adds	r3, #1
 800ed18:	623b      	str	r3, [r7, #32]
        n = 0, o = mg_json_get(sub, "$", &n);
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	61bb      	str	r3, [r7, #24]
 800ed1e:	f107 0318 	add.w	r3, r7, #24
 800ed22:	4a38      	ldr	r2, [pc, #224]	@ (800ee04 <mg_json_next+0x294>)
 800ed24:	f107 0120 	add.w	r1, r7, #32
 800ed28:	c903      	ldmia	r1, {r0, r1}
 800ed2a:	f000 f86d 	bl	800ee08 <mg_json_get>
 800ed2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (n < 0 || o < 0 || (size_t) (o + n) > sub.len) {
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	db09      	blt.n	800ed4a <mg_json_next+0x1da>
 800ed36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	db06      	blt.n	800ed4a <mg_json_next+0x1da>
 800ed3c:	69ba      	ldr	r2, [r7, #24]
 800ed3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed40:	4413      	add	r3, r2
 800ed42:	461a      	mov	r2, r3
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d902      	bls.n	800ed50 <mg_json_next+0x1e0>
          ofs = 0;  // Error parsing value, stop scanning
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	e01a      	b.n	800ed86 <mg_json_next+0x216>
        } else {
          if (val) *val = mg_str_n(sub.buf + o, (size_t) n);
 800ed50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00f      	beq.n	800ed76 <mg_json_next+0x206>
 800ed56:	6a3a      	ldr	r2, [r7, #32]
 800ed58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5a:	18d1      	adds	r1, r2, r3
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ed62:	463b      	mov	r3, r7
 800ed64:	4618      	mov	r0, r3
 800ed66:	f008 fd0a 	bl	801777e <mg_str_n>
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	463b      	mov	r3, r7
 800ed6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed72:	e882 0003 	stmia.w	r2, {r0, r1}
          ofs = (size_t) (&sub.buf[o + n] - obj.buf);
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	69b9      	ldr	r1, [r7, #24]
 800ed7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed7c:	440a      	add	r2, r1
 800ed7e:	441a      	add	r2, r3
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	60fb      	str	r3, [r7, #12]
        }
      }
    }
    // MG_INFO(("SUB ofs %u %.*s", ofs, sub.len, sub.buf));
    while (ofs && ofs < obj.len &&
 800ed86:	e002      	b.n	800ed8e <mg_json_next+0x21e>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
      ofs++;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
    while (ofs && ofs < obj.len &&
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d01b      	beq.n	800edcc <mg_json_next+0x25c>
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d217      	bcs.n	800edcc <mg_json_next+0x25c>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	4413      	add	r3, r2
 800eda2:	781b      	ldrb	r3, [r3, #0]
    while (ofs && ofs < obj.len &&
 800eda4:	2b20      	cmp	r3, #32
 800eda6:	d0ef      	beq.n	800ed88 <mg_json_next+0x218>
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	4413      	add	r3, r2
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d0e9      	beq.n	800ed88 <mg_json_next+0x218>
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	4413      	add	r3, r2
 800edba:	781b      	ldrb	r3, [r3, #0]
           (obj.buf[ofs] == ' ' || obj.buf[ofs] == '\t' ||
 800edbc:	2b0a      	cmp	r3, #10
 800edbe:	d0e3      	beq.n	800ed88 <mg_json_next+0x218>
            obj.buf[ofs] == '\n' || obj.buf[ofs] == '\r')) {
 800edc0:	693a      	ldr	r2, [r7, #16]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	4413      	add	r3, r2
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	2b0d      	cmp	r3, #13
 800edca:	d0dd      	beq.n	800ed88 <mg_json_next+0x218>
    }
    if (ofs && ofs < obj.len && obj.buf[ofs] == ',') ofs++;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00c      	beq.n	800edec <mg_json_next+0x27c>
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d208      	bcs.n	800edec <mg_json_next+0x27c>
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	4413      	add	r3, r2
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	2b2c      	cmp	r3, #44	@ 0x2c
 800ede4:	d102      	bne.n	800edec <mg_json_next+0x27c>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	3301      	adds	r3, #1
 800edea:	60fb      	str	r3, [r7, #12]
    if (ofs > obj.len) ofs = 0;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d901      	bls.n	800edf8 <mg_json_next+0x288>
 800edf4:	2300      	movs	r3, #0
 800edf6:	60fb      	str	r3, [r7, #12]
  }
  return ofs;
 800edf8:	68fb      	ldr	r3, [r7, #12]
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3734      	adds	r7, #52	@ 0x34
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd90      	pop	{r4, r7, pc}
 800ee02:	bf00      	nop
 800ee04:	0802e428 	.word	0x0802e428

0800ee08 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800ee08:	b590      	push	{r4, r7, lr}
 800ee0a:	b09b      	sub	sp, #108	@ 0x6c
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	f107 0408 	add.w	r4, r7, #8
 800ee12:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800ee22:	2300      	movs	r3, #0
 800ee24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800ee28:	2300      	movs	r3, #0
 800ee2a:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800ee30:	2300      	movs	r3, #0
 800ee32:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800ee34:	2300      	movs	r3, #0
 800ee36:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800ee38:	2301      	movs	r3, #1
 800ee3a:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800ee3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee42:	f04f 33ff 	mov.w	r3, #4294967295
 800ee46:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <mg_json_get+0x4c>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2200      	movs	r2, #0
 800ee52:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	2b24      	cmp	r3, #36	@ 0x24
 800ee5a:	d002      	beq.n	800ee62 <mg_json_get+0x5a>
 800ee5c:	f06f 0301 	mvn.w	r3, #1
 800ee60:	e308      	b.n	800f474 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800ee62:	2300      	movs	r3, #0
 800ee64:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee66:	e2fe      	b.n	800f466 <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800ee68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee6c:	4413      	add	r3, r2
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800ee74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee78:	2b20      	cmp	r3, #32
 800ee7a:	f000 82ee 	beq.w	800f45a <mg_json_get+0x652>
 800ee7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee82:	2b09      	cmp	r3, #9
 800ee84:	f000 82e9 	beq.w	800f45a <mg_json_get+0x652>
 800ee88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee8c:	2b0a      	cmp	r3, #10
 800ee8e:	f000 82e4 	beq.w	800f45a <mg_json_get+0x652>
 800ee92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ee96:	2b0d      	cmp	r3, #13
 800ee98:	f000 82df 	beq.w	800f45a <mg_json_get+0x652>
    switch (expecting) {
 800ee9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eea0:	2b03      	cmp	r3, #3
 800eea2:	f200 82dd 	bhi.w	800f460 <mg_json_get+0x658>
 800eea6:	a201      	add	r2, pc, #4	@ (adr r2, 800eeac <mg_json_get+0xa4>)
 800eea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeac:	0800eebd 	.word	0x0800eebd
 800eeb0:	0800f1a5 	.word	0x0800f1a5
 800eeb4:	0800f333 	.word	0x0800f333
 800eeb8:	0800f349 	.word	0x0800f349
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800eebc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d101      	bne.n	800eec8 <mg_json_get+0xc0>
 800eec4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800eec8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800eecc:	2b7b      	cmp	r3, #123	@ 0x7b
 800eece:	d12b      	bne.n	800ef28 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800eed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eed2:	2b1d      	cmp	r3, #29
 800eed4:	dd02      	ble.n	800eedc <mg_json_get+0xd4>
 800eed6:	f04f 33ff 	mov.w	r3, #4294967295
 800eeda:	e2cb      	b.n	800f474 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800eedc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d114      	bne.n	800ef0e <mg_json_get+0x106>
 800eee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	4413      	add	r3, r2
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b2e      	cmp	r3, #46	@ 0x2e
 800eeee:	d10e      	bne.n	800ef0e <mg_json_get+0x106>
 800eef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d10a      	bne.n	800ef0e <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800eef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eefa:	3301      	adds	r3, #1
 800eefc:	657b      	str	r3, [r7, #84]	@ 0x54
 800eefe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef00:	3301      	adds	r3, #1
 800ef02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef04:	f04f 33ff 	mov.w	r3, #4294967295
 800ef08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800ef0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef10:	1c5a      	adds	r2, r3, #1
 800ef12:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ef14:	3368      	adds	r3, #104	@ 0x68
 800ef16:	443b      	add	r3, r7
 800ef18:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ef1c:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800ef20:	2301      	movs	r3, #1
 800ef22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800ef26:	e29b      	b.n	800f460 <mg_json_get+0x658>
        } else if (c == '[') {
 800ef28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ef2c:	2b5b      	cmp	r3, #91	@ 0x5b
 800ef2e:	d14e      	bne.n	800efce <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800ef30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef32:	2b1d      	cmp	r3, #29
 800ef34:	dd02      	ble.n	800ef3c <mg_json_get+0x134>
 800ef36:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3a:	e29b      	b.n	800f474 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800ef3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d13a      	bne.n	800efba <mg_json_get+0x1b2>
 800ef44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	4413      	add	r3, r2
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	2b5b      	cmp	r3, #91	@ 0x5b
 800ef4e:	d134      	bne.n	800efba <mg_json_get+0x1b2>
 800ef50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d130      	bne.n	800efba <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800ef58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef60:	3301      	adds	r3, #1
 800ef62:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef64:	2300      	movs	r3, #0
 800ef66:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800ef68:	2300      	movs	r3, #0
 800ef6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef6c:	e010      	b.n	800ef90 <mg_json_get+0x188>
              ei *= 10;
 800ef6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef70:	4613      	mov	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	4413      	add	r3, r2
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800ef7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	4413      	add	r3, r2
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	3b30      	subs	r3, #48	@ 0x30
 800ef84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef86:	4413      	add	r3, r2
 800ef88:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800ef8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	4413      	add	r3, r2
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b5d      	cmp	r3, #93	@ 0x5d
 800ef9a:	d005      	beq.n	800efa8 <mg_json_get+0x1a0>
 800ef9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	4413      	add	r3, r2
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1e2      	bne.n	800ef6e <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800efa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	4413      	add	r3, r2
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d002      	beq.n	800efba <mg_json_get+0x1b2>
 800efb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efb6:	3301      	adds	r3, #1
 800efb8:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800efba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 800efc0:	3368      	adds	r3, #104	@ 0x68
 800efc2:	443b      	add	r3, r7
 800efc4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800efc8:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800efcc:	e248      	b.n	800f460 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800efce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800efd2:	2b5d      	cmp	r3, #93	@ 0x5d
 800efd4:	d13a      	bne.n	800f04c <mg_json_get+0x244>
 800efd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dd37      	ble.n	800f04c <mg_json_get+0x244>
          MG_EOO(']');
 800efdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d106      	bne.n	800eff2 <mg_json_get+0x1ea>
 800efe4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800efe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efe8:	429a      	cmp	r2, r3
 800efea:	d002      	beq.n	800eff2 <mg_json_get+0x1ea>
 800efec:	f06f 0302 	mvn.w	r3, #2
 800eff0:	e240      	b.n	800f474 <mg_json_get+0x66c>
 800eff2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800eff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eff8:	3b01      	subs	r3, #1
 800effa:	3368      	adds	r3, #104	@ 0x68
 800effc:	443b      	add	r3, r7
 800effe:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800f002:	3302      	adds	r3, #2
 800f004:	429a      	cmp	r2, r3
 800f006:	d002      	beq.n	800f00e <mg_json_get+0x206>
 800f008:	f06f 0301 	mvn.w	r3, #1
 800f00c:	e232      	b.n	800f474 <mg_json_get+0x66c>
 800f00e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f010:	3b01      	subs	r3, #1
 800f012:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f014:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f018:	429a      	cmp	r2, r3
 800f01a:	f040 809c 	bne.w	800f156 <mg_json_get+0x34e>
 800f01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	4413      	add	r3, r2
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	f040 8095 	bne.w	800f156 <mg_json_get+0x34e>
 800f02c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f02e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f030:	429a      	cmp	r2, r3
 800f032:	f040 8090 	bne.w	800f156 <mg_json_get+0x34e>
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d005      	beq.n	800f048 <mg_json_get+0x240>
 800f03c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f03e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f04a:	e213      	b.n	800f474 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800f04c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f050:	2b74      	cmp	r3, #116	@ 0x74
 800f052:	d113      	bne.n	800f07c <mg_json_get+0x274>
 800f054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f056:	3303      	adds	r3, #3
 800f058:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f05a:	429a      	cmp	r2, r3
 800f05c:	dd0e      	ble.n	800f07c <mg_json_get+0x274>
 800f05e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f062:	4413      	add	r3, r2
 800f064:	2204      	movs	r2, #4
 800f066:	4998      	ldr	r1, [pc, #608]	@ (800f2c8 <mg_json_get+0x4c0>)
 800f068:	4618      	mov	r0, r3
 800f06a:	f019 fb6f 	bl	802874c <memcmp>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d103      	bne.n	800f07c <mg_json_get+0x274>
          i += 3;
 800f074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f076:	3303      	adds	r3, #3
 800f078:	663b      	str	r3, [r7, #96]	@ 0x60
 800f07a:	e06c      	b.n	800f156 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800f07c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f080:	2b6e      	cmp	r3, #110	@ 0x6e
 800f082:	d113      	bne.n	800f0ac <mg_json_get+0x2a4>
 800f084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f086:	3303      	adds	r3, #3
 800f088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f08a:	429a      	cmp	r2, r3
 800f08c:	dd0e      	ble.n	800f0ac <mg_json_get+0x2a4>
 800f08e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f092:	4413      	add	r3, r2
 800f094:	2204      	movs	r2, #4
 800f096:	498d      	ldr	r1, [pc, #564]	@ (800f2cc <mg_json_get+0x4c4>)
 800f098:	4618      	mov	r0, r3
 800f09a:	f019 fb57 	bl	802874c <memcmp>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d103      	bne.n	800f0ac <mg_json_get+0x2a4>
          i += 3;
 800f0a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0a6:	3303      	adds	r3, #3
 800f0a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800f0aa:	e054      	b.n	800f156 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800f0ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f0b0:	2b66      	cmp	r3, #102	@ 0x66
 800f0b2:	d113      	bne.n	800f0dc <mg_json_get+0x2d4>
 800f0b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0b6:	3304      	adds	r3, #4
 800f0b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	dd0e      	ble.n	800f0dc <mg_json_get+0x2d4>
 800f0be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0c2:	4413      	add	r3, r2
 800f0c4:	2205      	movs	r2, #5
 800f0c6:	4982      	ldr	r1, [pc, #520]	@ (800f2d0 <mg_json_get+0x4c8>)
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f019 fb3f 	bl	802874c <memcmp>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d103      	bne.n	800f0dc <mg_json_get+0x2d4>
          i += 4;
 800f0d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800f0da:	e03c      	b.n	800f156 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800f0dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f0e0:	2b2d      	cmp	r3, #45	@ 0x2d
 800f0e2:	d007      	beq.n	800f0f4 <mg_json_get+0x2ec>
 800f0e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f0e8:	2b2f      	cmp	r3, #47	@ 0x2f
 800f0ea:	d916      	bls.n	800f11a <mg_json_get+0x312>
 800f0ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f0f0:	2b39      	cmp	r3, #57	@ 0x39
 800f0f2:	d812      	bhi.n	800f11a <mg_json_get+0x312>
          int numlen = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800f0f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0fc:	18d0      	adds	r0, r2, r3
 800f0fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	f107 0210 	add.w	r2, r7, #16
 800f108:	4619      	mov	r1, r3
 800f10a:	f7ff fbe1 	bl	800e8d0 <mg_atod>
          i += numlen - 1;
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	3b01      	subs	r3, #1
 800f112:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f114:	4413      	add	r3, r2
 800f116:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800f118:	e01d      	b.n	800f156 <mg_json_get+0x34e>
        } else if (c == '"') {
 800f11a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f11e:	2b22      	cmp	r3, #34	@ 0x22
 800f120:	d116      	bne.n	800f150 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800f122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f124:	3301      	adds	r3, #1
 800f126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f128:	18d0      	adds	r0, r2, r3
 800f12a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f12c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	3b01      	subs	r3, #1
 800f132:	4619      	mov	r1, r3
 800f134:	f7ff fb8a 	bl	800e84c <mg_pass_string>
 800f138:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800f13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	da01      	bge.n	800f144 <mg_json_get+0x33c>
 800f140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f142:	e197      	b.n	800f474 <mg_json_get+0x66c>
          i += n + 1;
 800f144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f146:	3301      	adds	r3, #1
 800f148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f14a:	4413      	add	r3, r2
 800f14c:	663b      	str	r3, [r7, #96]	@ 0x60
 800f14e:	e002      	b.n	800f156 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800f150:	f06f 0301 	mvn.w	r3, #1
 800f154:	e18e      	b.n	800f474 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800f156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d114      	bne.n	800f188 <mg_json_get+0x380>
 800f15e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	4413      	add	r3, r2
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d10e      	bne.n	800f188 <mg_json_get+0x380>
 800f16a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f16c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f16e:	429a      	cmp	r2, r3
 800f170:	d10a      	bne.n	800f188 <mg_json_get+0x380>
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <mg_json_get+0x37c>
 800f178:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f17a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f186:	e175      	b.n	800f474 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800f188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d105      	bne.n	800f19c <mg_json_get+0x394>
 800f190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f192:	2b00      	cmp	r3, #0
 800f194:	db02      	blt.n	800f19c <mg_json_get+0x394>
 800f196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f198:	3301      	adds	r3, #1
 800f19a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800f19c:	2303      	movs	r3, #3
 800f19e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800f1a2:	e15d      	b.n	800f460 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800f1a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f1a8:	2b22      	cmp	r3, #34	@ 0x22
 800f1aa:	d170      	bne.n	800f28e <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800f1ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1b2:	18d0      	adds	r0, r2, r3
 800f1b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	4619      	mov	r1, r3
 800f1be:	f7ff fb45 	bl	800e84c <mg_pass_string>
 800f1c2:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	da01      	bge.n	800f1ce <mg_json_get+0x3c6>
 800f1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1cc:	e152      	b.n	800f474 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800f1ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1d0:	1c5a      	adds	r2, r3, #1
 800f1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d4:	4413      	add	r3, r2
 800f1d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	dc02      	bgt.n	800f1e2 <mg_json_get+0x3da>
 800f1dc:	f06f 0302 	mvn.w	r3, #2
 800f1e0:	e148      	b.n	800f474 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800f1e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f1e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	da02      	bge.n	800f1f0 <mg_json_get+0x3e8>
 800f1ea:	f06f 0302 	mvn.w	r3, #2
 800f1ee:	e141      	b.n	800f474 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800f1f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d109      	bne.n	800f20c <mg_json_get+0x404>
 800f1f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	4413      	add	r3, r2
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	2b2e      	cmp	r3, #46	@ 0x2e
 800f204:	d002      	beq.n	800f20c <mg_json_get+0x404>
 800f206:	f06f 0302 	mvn.w	r3, #2
 800f20a:	e133      	b.n	800f474 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800f20c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f20e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f210:	429a      	cmp	r2, r3
 800f212:	d133      	bne.n	800f27c <mg_json_get+0x474>
 800f214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f216:	3b01      	subs	r3, #1
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	4413      	add	r3, r2
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f220:	d12c      	bne.n	800f27c <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800f222:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f224:	3301      	adds	r3, #1
 800f226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f228:	18d0      	adds	r0, r2, r3
 800f22a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	4413      	add	r3, r2
 800f230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f232:	4619      	mov	r1, r3
 800f234:	f019 fac9 	bl	80287ca <strncmp>
 800f238:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d11e      	bne.n	800f27c <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800f23e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f242:	4413      	add	r3, r2
 800f244:	461a      	mov	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4413      	add	r3, r2
 800f24a:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d011      	beq.n	800f274 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800f250:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f254:	4413      	add	r3, r2
 800f256:	461a      	mov	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4413      	add	r3, r2
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f260:	d008      	beq.n	800f274 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800f262:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f266:	4413      	add	r3, r2
 800f268:	461a      	mov	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4413      	add	r3, r2
 800f26e:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800f270:	2b5b      	cmp	r3, #91	@ 0x5b
 800f272:	d103      	bne.n	800f27c <mg_json_get+0x474>
            pos += n;
 800f274:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f278:	4413      	add	r3, r2
 800f27a:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800f27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27e:	3301      	adds	r3, #1
 800f280:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f282:	4413      	add	r3, r2
 800f284:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800f286:	2302      	movs	r3, #2
 800f288:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800f28c:	e0e7      	b.n	800f45e <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800f28e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f292:	2b7d      	cmp	r3, #125	@ 0x7d
 800f294:	d14a      	bne.n	800f32c <mg_json_get+0x524>
          MG_EOO('}');
 800f296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d106      	bne.n	800f2ac <mg_json_get+0x4a4>
 800f29e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f2a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d002      	beq.n	800f2ac <mg_json_get+0x4a4>
 800f2a6:	f06f 0302 	mvn.w	r3, #2
 800f2aa:	e0e3      	b.n	800f474 <mg_json_get+0x66c>
 800f2ac:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800f2b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	3368      	adds	r3, #104	@ 0x68
 800f2b6:	443b      	add	r3, r7
 800f2b8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800f2bc:	3302      	adds	r3, #2
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d008      	beq.n	800f2d4 <mg_json_get+0x4cc>
 800f2c2:	f06f 0301 	mvn.w	r3, #1
 800f2c6:	e0d5      	b.n	800f474 <mg_json_get+0x66c>
 800f2c8:	0802e42c 	.word	0x0802e42c
 800f2cc:	0802e434 	.word	0x0802e434
 800f2d0:	0802e43c 	.word	0x0802e43c
 800f2d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f2da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d114      	bne.n	800f30c <mg_json_get+0x504>
 800f2e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10e      	bne.n	800f30c <mg_json_get+0x504>
 800f2ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d10a      	bne.n	800f30c <mg_json_get+0x504>
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d005      	beq.n	800f308 <mg_json_get+0x500>
 800f2fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f2fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f30a:	e0b3      	b.n	800f474 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800f30c:	2303      	movs	r3, #3
 800f30e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800f312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f316:	429a      	cmp	r2, r3
 800f318:	f040 80a1 	bne.w	800f45e <mg_json_get+0x656>
 800f31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f2c0 809d 	blt.w	800f45e <mg_json_get+0x656>
 800f324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f326:	3301      	adds	r3, #1
 800f328:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800f32a:	e098      	b.n	800f45e <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800f32c:	f06f 0301 	mvn.w	r3, #1
 800f330:	e0a0      	b.n	800f474 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800f332:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f336:	2b3a      	cmp	r3, #58	@ 0x3a
 800f338:	d103      	bne.n	800f342 <mg_json_get+0x53a>
          expecting = S_VALUE;
 800f33a:	2300      	movs	r3, #0
 800f33c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800f340:	e08e      	b.n	800f460 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800f342:	f06f 0301 	mvn.w	r3, #1
 800f346:	e095      	b.n	800f474 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800f348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	dc02      	bgt.n	800f354 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800f34e:	f06f 0301 	mvn.w	r3, #1
 800f352:	e08f      	b.n	800f474 <mg_json_get+0x66c>
        } else if (c == ',') {
 800f354:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f358:	2b2c      	cmp	r3, #44	@ 0x2c
 800f35a:	d10d      	bne.n	800f378 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800f35c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f35e:	3b01      	subs	r3, #1
 800f360:	3368      	adds	r3, #104	@ 0x68
 800f362:	443b      	add	r3, r7
 800f364:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800f368:	2b7b      	cmp	r3, #123	@ 0x7b
 800f36a:	bf0c      	ite	eq
 800f36c:	2301      	moveq	r3, #1
 800f36e:	2300      	movne	r3, #0
 800f370:	b2db      	uxtb	r3, r3
 800f372:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800f376:	e073      	b.n	800f460 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800f378:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f37c:	2b5d      	cmp	r3, #93	@ 0x5d
 800f37e:	d003      	beq.n	800f388 <mg_json_get+0x580>
 800f380:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f384:	2b7d      	cmp	r3, #125	@ 0x7d
 800f386:	d163      	bne.n	800f450 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800f388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d10d      	bne.n	800f3ac <mg_json_get+0x5a4>
 800f390:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f394:	2b7d      	cmp	r3, #125	@ 0x7d
 800f396:	d109      	bne.n	800f3ac <mg_json_get+0x5a4>
 800f398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f39a:	3b01      	subs	r3, #1
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	4413      	add	r3, r2
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3a4:	d102      	bne.n	800f3ac <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800f3a6:	f06f 0302 	mvn.w	r3, #2
 800f3aa:	e063      	b.n	800f474 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800f3ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d10d      	bne.n	800f3d0 <mg_json_get+0x5c8>
 800f3b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f3b8:	2b5d      	cmp	r3, #93	@ 0x5d
 800f3ba:	d109      	bne.n	800f3d0 <mg_json_get+0x5c8>
 800f3bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	2b2c      	cmp	r3, #44	@ 0x2c
 800f3c8:	d102      	bne.n	800f3d0 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800f3ca:	f06f 0302 	mvn.w	r3, #2
 800f3ce:	e051      	b.n	800f474 <mg_json_get+0x66c>
          MG_EOO('O');
 800f3d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d106      	bne.n	800f3e6 <mg_json_get+0x5de>
 800f3d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f3da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d002      	beq.n	800f3e6 <mg_json_get+0x5de>
 800f3e0:	f06f 0302 	mvn.w	r3, #2
 800f3e4:	e046      	b.n	800f474 <mg_json_get+0x66c>
 800f3e6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800f3ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	3368      	adds	r3, #104	@ 0x68
 800f3f0:	443b      	add	r3, r7
 800f3f2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800f3f6:	3302      	adds	r3, #2
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d002      	beq.n	800f402 <mg_json_get+0x5fa>
 800f3fc:	f06f 0301 	mvn.w	r3, #1
 800f400:	e038      	b.n	800f474 <mg_json_get+0x66c>
 800f402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f404:	3b01      	subs	r3, #1
 800f406:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f408:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d114      	bne.n	800f43a <mg_json_get+0x632>
 800f410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	4413      	add	r3, r2
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10e      	bne.n	800f43a <mg_json_get+0x632>
 800f41c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f41e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f420:	429a      	cmp	r2, r3
 800f422:	d10a      	bne.n	800f43a <mg_json_get+0x632>
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d005      	beq.n	800f436 <mg_json_get+0x62e>
 800f42a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f42c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	1c5a      	adds	r2, r3, #1
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f438:	e01c      	b.n	800f474 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800f43a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f43e:	429a      	cmp	r2, r3
 800f440:	d109      	bne.n	800f456 <mg_json_get+0x64e>
 800f442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f444:	2b00      	cmp	r3, #0
 800f446:	db06      	blt.n	800f456 <mg_json_get+0x64e>
 800f448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f44a:	3301      	adds	r3, #1
 800f44c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f44e:	e002      	b.n	800f456 <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800f450:	f06f 0301 	mvn.w	r3, #1
 800f454:	e00e      	b.n	800f474 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800f456:	bf00      	nop
        break;
 800f458:	e002      	b.n	800f460 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800f45a:	bf00      	nop
 800f45c:	e000      	b.n	800f460 <mg_json_get+0x658>
        break;
 800f45e:	bf00      	nop
  for (i = 0; i < len; i++) {
 800f460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f462:	3301      	adds	r3, #1
 800f464:	663b      	str	r3, [r7, #96]	@ 0x60
 800f466:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f46a:	429a      	cmp	r2, r3
 800f46c:	f6ff acfc 	blt.w	800ee68 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800f470:	f06f 0302 	mvn.w	r3, #2
}
 800f474:	4618      	mov	r0, r3
 800f476:	376c      	adds	r7, #108	@ 0x6c
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd90      	pop	{r4, r7, pc}

0800f47c <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b086      	sub	sp, #24
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	1d38      	adds	r0, r7, #4
 800f486:	e880 0006 	stmia.w	r0, {r1, r2}
 800f48a:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800f48c:	2300      	movs	r3, #0
 800f48e:	613b      	str	r3, [r7, #16]
 800f490:	f107 0310 	add.w	r3, r7, #16
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	1d39      	adds	r1, r7, #4
 800f498:	c903      	ldmia	r1, {r0, r1}
 800f49a:	f7ff fcb5 	bl	800ee08 <mg_json_get>
 800f49e:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	db03      	blt.n	800f4ae <mg_json_get_tok+0x32>
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	e000      	b.n	800f4b0 <mg_json_get_tok+0x34>
 800f4ae:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800f4b0:	693a      	ldr	r2, [r7, #16]
 800f4b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	f008 f960 	bl	801777e <mg_str_n>
}
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800f4c6:	b590      	push	{r4, r7, lr}
 800f4c8:	b089      	sub	sp, #36	@ 0x24
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	f107 0408 	add.w	r4, r7, #8
 800f4d0:	e884 0003 	stmia.w	r4, {r0, r1}
 800f4d4:	607a      	str	r2, [r7, #4]
 800f4d6:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800f4dc:	f107 0314 	add.w	r3, r7, #20
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	f107 0108 	add.w	r1, r7, #8
 800f4e6:	c903      	ldmia	r1, {r0, r1}
 800f4e8:	f7ff fc8e 	bl	800ee08 <mg_json_get>
 800f4ec:	61b8      	str	r0, [r7, #24]
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	db23      	blt.n	800f53c <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800f4f4:	68ba      	ldr	r2, [r7, #8]
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800f4fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800f4fe:	d00b      	beq.n	800f518 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	4413      	add	r3, r2
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2b2f      	cmp	r3, #47	@ 0x2f
 800f50a:	d917      	bls.n	800f53c <mg_json_get_num+0x76>
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	4413      	add	r3, r2
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	2b39      	cmp	r3, #57	@ 0x39
 800f516:	d811      	bhi.n	800f53c <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d00c      	beq.n	800f538 <mg_json_get_num+0x72>
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	4413      	add	r3, r2
 800f524:	6979      	ldr	r1, [r7, #20]
 800f526:	2200      	movs	r2, #0
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff f9d1 	bl	800e8d0 <mg_atod>
 800f52e:	eeb0 7b40 	vmov.f64	d7, d0
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800f538:	2301      	movs	r3, #1
 800f53a:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	bf14      	ite	ne
 800f542:	2301      	movne	r3, #1
 800f544:	2300      	moveq	r3, #0
 800f546:	b2db      	uxtb	r3, r3
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3724      	adds	r7, #36	@ 0x24
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd90      	pop	{r4, r7, pc}

0800f550 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800f550:	b590      	push	{r4, r7, lr}
 800f552:	b087      	sub	sp, #28
 800f554:	af00      	add	r7, sp, #0
 800f556:	f107 0408 	add.w	r4, r7, #8
 800f55a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f55e:	607a      	str	r2, [r7, #4]
 800f560:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800f562:	2300      	movs	r3, #0
 800f564:	617b      	str	r3, [r7, #20]
 800f566:	2300      	movs	r3, #0
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	f107 0108 	add.w	r1, r7, #8
 800f56e:	c903      	ldmia	r1, {r0, r1}
 800f570:	f7ff fc4a 	bl	800ee08 <mg_json_get>
 800f574:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	db1b      	blt.n	800f5b4 <mg_json_get_bool+0x64>
 800f57c:	68ba      	ldr	r2, [r7, #8]
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	4413      	add	r3, r2
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2b74      	cmp	r3, #116	@ 0x74
 800f586:	d005      	beq.n	800f594 <mg_json_get_bool+0x44>
 800f588:	68ba      	ldr	r2, [r7, #8]
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	4413      	add	r3, r2
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	2b66      	cmp	r3, #102	@ 0x66
 800f592:	d10f      	bne.n	800f5b4 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <mg_json_get_bool+0x60>
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	4413      	add	r3, r2
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b74      	cmp	r3, #116	@ 0x74
 800f5a4:	bf0c      	ite	eq
 800f5a6:	2301      	moveq	r3, #1
 800f5a8:	2300      	movne	r3, #0
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	701a      	strb	r2, [r3, #0]
    found = 1;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	617b      	str	r3, [r7, #20]
  }
  return found;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bf14      	ite	ne
 800f5ba:	2301      	movne	r3, #1
 800f5bc:	2300      	moveq	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	371c      	adds	r7, #28
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd90      	pop	{r4, r7, pc}

0800f5c8 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800f5c8:	b590      	push	{r4, r7, lr}
 800f5ca:	b08d      	sub	sp, #52	@ 0x34
 800f5cc:	af02      	add	r7, sp, #8
 800f5ce:	f107 0408 	add.w	r4, r7, #8
 800f5d2:	e884 0003 	stmia.w	r4, {r0, r1}
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800f5da:	2300      	movs	r3, #0
 800f5dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5de:	2300      	movs	r3, #0
 800f5e0:	623b      	str	r3, [r7, #32]
 800f5e2:	e064      	b.n	800f6ae <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	4413      	add	r3, r2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800f5ee:	d12c      	bne.n	800f64a <mg_json_unescape+0x82>
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5f2:	1d5a      	adds	r2, r3, #5
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d227      	bcs.n	800f64a <mg_json_unescape+0x82>
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fe:	3301      	adds	r3, #1
 800f600:	4413      	add	r3, r2
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	2b75      	cmp	r3, #117	@ 0x75
 800f606:	d120      	bne.n	800f64a <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f60c:	3302      	adds	r3, #2
 800f60e:	18d1      	adds	r1, r2, r3
 800f610:	f107 0314 	add.w	r3, r7, #20
 800f614:	2204      	movs	r2, #4
 800f616:	4618      	mov	r0, r3
 800f618:	f008 f8b1 	bl	801777e <mg_str_n>
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	4413      	add	r3, r2
 800f622:	2201      	movs	r2, #1
 800f624:	9200      	str	r2, [sp, #0]
 800f626:	2210      	movs	r2, #16
 800f628:	f107 0114 	add.w	r1, r7, #20
 800f62c:	c903      	ldmia	r1, {r0, r1}
 800f62e:	f008 fae4 	bl	8017bfa <mg_str_to_num>
 800f632:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800f634:	f083 0301 	eor.w	r3, r3, #1
 800f638:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d001      	beq.n	800f642 <mg_json_unescape+0x7a>
        return false;
 800f63e:	2300      	movs	r3, #0
 800f640:	e04c      	b.n	800f6dc <mg_json_unescape+0x114>
      i += 5;
 800f642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f644:	3305      	adds	r3, #5
 800f646:	627b      	str	r3, [r7, #36]	@ 0x24
 800f648:	e02b      	b.n	800f6a2 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64e:	4413      	add	r3, r2
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b5c      	cmp	r3, #92	@ 0x5c
 800f654:	d11d      	bne.n	800f692 <mg_json_unescape+0xca>
 800f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f658:	1c5a      	adds	r2, r3, #1
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d218      	bcs.n	800f692 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800f660:	68ba      	ldr	r2, [r7, #8]
 800f662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f664:	3301      	adds	r3, #1
 800f666:	4413      	add	r3, r2
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2100      	movs	r1, #0
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7ff f8bd 	bl	800e7ec <json_esc>
 800f672:	4603      	mov	r3, r0
 800f674:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800f676:	7ffb      	ldrb	r3, [r7, #31]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d101      	bne.n	800f680 <mg_json_unescape+0xb8>
 800f67c:	2300      	movs	r3, #0
 800f67e:	e02d      	b.n	800f6dc <mg_json_unescape+0x114>
      to[j] = c;
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	4413      	add	r3, r2
 800f686:	7ffa      	ldrb	r2, [r7, #31]
 800f688:	701a      	strb	r2, [r3, #0]
      i++;
 800f68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68c:	3301      	adds	r3, #1
 800f68e:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800f690:	e007      	b.n	800f6a2 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800f692:	68ba      	ldr	r2, [r7, #8]
 800f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f696:	441a      	add	r2, r3
 800f698:	6879      	ldr	r1, [r7, #4]
 800f69a:	6a3b      	ldr	r3, [r7, #32]
 800f69c:	440b      	add	r3, r1
 800f69e:	7812      	ldrb	r2, [r2, #0]
 800f6a0:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6a8:	6a3b      	ldr	r3, [r7, #32]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	623b      	str	r3, [r7, #32]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d203      	bcs.n	800f6be <mg_json_unescape+0xf6>
 800f6b6:	6a3a      	ldr	r2, [r7, #32]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d392      	bcc.n	800f5e4 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800f6be:	6a3a      	ldr	r2, [r7, #32]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d301      	bcc.n	800f6ca <mg_json_unescape+0x102>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	e008      	b.n	800f6dc <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d004      	beq.n	800f6da <mg_json_unescape+0x112>
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	701a      	strb	r2, [r3, #0]
  return true;
 800f6da:	2301      	movs	r3, #1
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	372c      	adds	r7, #44	@ 0x2c
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd90      	pop	{r4, r7, pc}

0800f6e4 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800f6ee:	4b05      	ldr	r3, [pc, #20]	@ (800f704 <logc+0x20>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a05      	ldr	r2, [pc, #20]	@ (800f708 <logc+0x24>)
 800f6f4:	6811      	ldr	r1, [r2, #0]
 800f6f6:	79fa      	ldrb	r2, [r7, #7]
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	4798      	blx	r3
}
 800f6fc:	bf00      	nop
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	24000260 	.word	0x24000260
 800f708:	24019d60 	.word	0x24019d60

0800f70c <logs>:

static void logs(const char *buf, size_t len) {
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800f716:	2300      	movs	r3, #0
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e009      	b.n	800f730 <logs+0x24>
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	4413      	add	r3, r2
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff ffdd 	bl	800f6e4 <logc>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3301      	adds	r3, #1
 800f72e:	60fb      	str	r3, [r7, #12]
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d3f1      	bcc.n	800f71c <logs+0x10>
}
 800f738:	bf00      	nop
 800f73a:	bf00      	nop
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
	...

0800f744 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800f744:	b590      	push	{r4, r7, lr}
 800f746:	b099      	sub	sp, #100	@ 0x64
 800f748:	af06      	add	r7, sp, #24
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800f752:	212f      	movs	r1, #47	@ 0x2f
 800f754:	68b8      	ldr	r0, [r7, #8]
 800f756:	f019 f85d 	bl	8028814 <strrchr>
 800f75a:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800f75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d104      	bne.n	800f76c <mg_log_prefix+0x28>
 800f762:	215c      	movs	r1, #92	@ 0x5c
 800f764:	68b8      	ldr	r0, [r7, #8]
 800f766:	f019 f855 	bl	8028814 <strrchr>
 800f76a:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800f76c:	f7f1 fa40 	bl	8000bf0 <mg_millis>
 800f770:	4602      	mov	r2, r0
 800f772:	460b      	mov	r3, r1
 800f774:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f776:	2900      	cmp	r1, #0
 800f778:	d002      	beq.n	800f780 <mg_log_prefix+0x3c>
 800f77a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f77c:	3101      	adds	r1, #1
 800f77e:	e000      	b.n	800f782 <mg_log_prefix+0x3e>
 800f780:	68b9      	ldr	r1, [r7, #8]
 800f782:	f107 0414 	add.w	r4, r7, #20
 800f786:	6838      	ldr	r0, [r7, #0]
 800f788:	9005      	str	r0, [sp, #20]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	9004      	str	r0, [sp, #16]
 800f78e:	9103      	str	r1, [sp, #12]
 800f790:	68f9      	ldr	r1, [r7, #12]
 800f792:	9102      	str	r1, [sp, #8]
 800f794:	e9cd 2300 	strd	r2, r3, [sp]
 800f798:	4a11      	ldr	r2, [pc, #68]	@ (800f7e0 <mg_log_prefix+0x9c>)
 800f79a:	2129      	movs	r1, #41	@ 0x29
 800f79c:	4620      	mov	r0, r4
 800f79e:	f004 fc0d 	bl	8013fbc <mg_snprintf>
 800f7a2:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800f7a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7a6:	2b27      	cmp	r3, #39	@ 0x27
 800f7a8:	d90a      	bls.n	800f7c0 <mg_log_prefix+0x7c>
 800f7aa:	2327      	movs	r3, #39	@ 0x27
 800f7ac:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800f7ae:	e007      	b.n	800f7c0 <mg_log_prefix+0x7c>
 800f7b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7b2:	1c5a      	adds	r2, r3, #1
 800f7b4:	643a      	str	r2, [r7, #64]	@ 0x40
 800f7b6:	3348      	adds	r3, #72	@ 0x48
 800f7b8:	443b      	add	r3, r7
 800f7ba:	2220      	movs	r2, #32
 800f7bc:	f803 2c34 	strb.w	r2, [r3, #-52]
 800f7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7c2:	2b28      	cmp	r3, #40	@ 0x28
 800f7c4:	d9f4      	bls.n	800f7b0 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800f7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7c8:	1e5a      	subs	r2, r3, #1
 800f7ca:	f107 0314 	add.w	r3, r7, #20
 800f7ce:	4611      	mov	r1, r2
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff ff9b 	bl	800f70c <logs>
}
 800f7d6:	bf00      	nop
 800f7d8:	374c      	adds	r7, #76	@ 0x4c
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd90      	pop	{r4, r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	0802e444 	.word	0x0802e444

0800f7e4 <mg_log>:

void mg_log(const char *fmt, ...) {
 800f7e4:	b40f      	push	{r0, r1, r2, r3}
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800f7ec:	f107 0314 	add.w	r3, r7, #20
 800f7f0:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800f7f2:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <mg_log+0x34>)
 800f7f4:	6818      	ldr	r0, [r3, #0]
 800f7f6:	4b09      	ldr	r3, [pc, #36]	@ (800f81c <mg_log+0x38>)
 800f7f8:	6819      	ldr	r1, [r3, #0]
 800f7fa:	1d3b      	adds	r3, r7, #4
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	f7fa ff3f 	bl	800a680 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800f802:	2102      	movs	r1, #2
 800f804:	4806      	ldr	r0, [pc, #24]	@ (800f820 <mg_log+0x3c>)
 800f806:	f7ff ff81 	bl	800f70c <logs>
}
 800f80a:	bf00      	nop
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f814:	b004      	add	sp, #16
 800f816:	4770      	bx	lr
 800f818:	24000260 	.word	0x24000260
 800f81c:	24019d60 	.word	0x24019d60
 800f820:	0802d678 	.word	0x0802d678

0800f824 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b09      	cmp	r3, #9
 800f830:	d804      	bhi.n	800f83c <nibble+0x18>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	b2db      	uxtb	r3, r3
 800f836:	3330      	adds	r3, #48	@ 0x30
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	e003      	b.n	800f844 <nibble+0x20>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	3357      	adds	r3, #87	@ 0x57
 800f842:	b2db      	uxtb	r3, r3
}
 800f844:	4618      	mov	r0, r3
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800f850:	b580      	push	{r7, lr}
 800f852:	b08a      	sub	sp, #40	@ 0x28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800f864:	2300      	movs	r3, #0
 800f866:	623b      	str	r3, [r7, #32]
 800f868:	e07b      	b.n	800f962 <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	f003 030f 	and.w	r3, r3, #15
 800f870:	2b00      	cmp	r3, #0
 800f872:	d13b      	bne.n	800f8ec <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d010      	beq.n	800f89c <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800f87a:	2102      	movs	r1, #2
 800f87c:	484e      	ldr	r0, [pc, #312]	@ (800f9b8 <mg_hexdump+0x168>)
 800f87e:	f7ff ff45 	bl	800f70c <logs>
 800f882:	f107 030c 	add.w	r3, r7, #12
 800f886:	2110      	movs	r1, #16
 800f888:	4618      	mov	r0, r3
 800f88a:	f7ff ff3f 	bl	800f70c <logs>
 800f88e:	2102      	movs	r1, #2
 800f890:	484a      	ldr	r0, [pc, #296]	@ (800f9bc <mg_hexdump+0x16c>)
 800f892:	f7ff ff3b 	bl	800f70c <logs>
 800f896:	2300      	movs	r3, #0
 800f898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800f89c:	6a3b      	ldr	r3, [r7, #32]
 800f89e:	0b1b      	lsrs	r3, r3, #12
 800f8a0:	f003 030f 	and.w	r3, r3, #15
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff ffbd 	bl	800f824 <nibble>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff ff19 	bl	800f6e4 <logc>
 800f8b2:	6a3b      	ldr	r3, [r7, #32]
 800f8b4:	0a1b      	lsrs	r3, r3, #8
 800f8b6:	f003 030f 	and.w	r3, r3, #15
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff ffb2 	bl	800f824 <nibble>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7ff ff0e 	bl	800f6e4 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800f8c8:	6a3b      	ldr	r3, [r7, #32]
 800f8ca:	091b      	lsrs	r3, r3, #4
 800f8cc:	f003 030f 	and.w	r3, r3, #15
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff ffa7 	bl	800f824 <nibble>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7ff ff03 	bl	800f6e4 <logc>
 800f8de:	2030      	movs	r0, #48	@ 0x30
 800f8e0:	f7ff ff00 	bl	800f6e4 <logc>
 800f8e4:	2103      	movs	r1, #3
 800f8e6:	4836      	ldr	r0, [pc, #216]	@ (800f9c0 <mg_hexdump+0x170>)
 800f8e8:	f7ff ff10 	bl	800f70c <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800f8ec:	69fa      	ldr	r2, [r7, #28]
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	091b      	lsrs	r3, r3, #4
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7ff ff93 	bl	800f824 <nibble>
 800f8fe:	4603      	mov	r3, r0
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff feef 	bl	800f6e4 <logc>
 800f906:	69fa      	ldr	r2, [r7, #28]
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	4413      	add	r3, r2
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	f003 030f 	and.w	r3, r3, #15
 800f912:	4618      	mov	r0, r3
 800f914:	f7ff ff86 	bl	800f824 <nibble>
 800f918:	4603      	mov	r3, r0
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff fee2 	bl	800f6e4 <logc>
    logc(' ');                                         // Space after hex number
 800f920:	2020      	movs	r0, #32
 800f922:	f7ff fedf 	bl	800f6e4 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800f926:	69fa      	ldr	r2, [r7, #28]
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	4413      	add	r3, r2
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b1f      	cmp	r3, #31
 800f930:	d90a      	bls.n	800f948 <mg_hexdump+0xf8>
 800f932:	69fa      	ldr	r2, [r7, #28]
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	4413      	add	r3, r2
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	2b7e      	cmp	r3, #126	@ 0x7e
 800f93c:	d804      	bhi.n	800f948 <mg_hexdump+0xf8>
 800f93e:	69fa      	ldr	r2, [r7, #28]
 800f940:	6a3b      	ldr	r3, [r7, #32]
 800f942:	4413      	add	r3, r2
 800f944:	781a      	ldrb	r2, [r3, #0]
 800f946:	e000      	b.n	800f94a <mg_hexdump+0xfa>
 800f948:	222e      	movs	r2, #46	@ 0x2e
 800f94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f94e:	1c59      	adds	r1, r3, #1
 800f950:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800f954:	3328      	adds	r3, #40	@ 0x28
 800f956:	443b      	add	r3, r7
 800f958:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800f95c:	6a3b      	ldr	r3, [r7, #32]
 800f95e:	3301      	adds	r3, #1
 800f960:	623b      	str	r3, [r7, #32]
 800f962:	6a3a      	ldr	r2, [r7, #32]
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	429a      	cmp	r2, r3
 800f968:	f4ff af7f 	bcc.w	800f86a <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800f96c:	e00d      	b.n	800f98a <mg_hexdump+0x13a>
 800f96e:	2103      	movs	r1, #3
 800f970:	4813      	ldr	r0, [pc, #76]	@ (800f9c0 <mg_hexdump+0x170>)
 800f972:	f7ff fecb 	bl	800f70c <logs>
 800f976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f97a:	1c5a      	adds	r2, r3, #1
 800f97c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800f980:	3328      	adds	r3, #40	@ 0x28
 800f982:	443b      	add	r3, r7
 800f984:	2220      	movs	r2, #32
 800f986:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800f98a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f98e:	2b0f      	cmp	r3, #15
 800f990:	d9ed      	bls.n	800f96e <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800f992:	2102      	movs	r1, #2
 800f994:	4808      	ldr	r0, [pc, #32]	@ (800f9b8 <mg_hexdump+0x168>)
 800f996:	f7ff feb9 	bl	800f70c <logs>
 800f99a:	f107 030c 	add.w	r3, r7, #12
 800f99e:	2110      	movs	r1, #16
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7ff feb3 	bl	800f70c <logs>
 800f9a6:	2102      	movs	r1, #2
 800f9a8:	4804      	ldr	r0, [pc, #16]	@ (800f9bc <mg_hexdump+0x16c>)
 800f9aa:	f7ff feaf 	bl	800f70c <logs>
}
 800f9ae:	bf00      	nop
 800f9b0:	3728      	adds	r7, #40	@ 0x28
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0802e458 	.word	0x0802e458
 800f9bc:	0802d678 	.word	0x0802d678
 800f9c0:	0802e45c 	.word	0x0802e45c

0800f9c4 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9d4:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	4805      	ldr	r0, [pc, #20]	@ (800f9f8 <mg_vprintf+0x34>)
 800f9e2:	f7fa fe4d 	bl	800a680 <mg_vxprintf>
  return c->send.len - old;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	1ad3      	subs	r3, r2, r3
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3718      	adds	r7, #24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	08013f4d 	.word	0x08013f4d

0800f9fc <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800f9fc:	b40e      	push	{r1, r2, r3}
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b085      	sub	sp, #20
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800fa0a:	f107 0320 	add.w	r3, r7, #32
 800fa0e:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800fa10:	f107 0308 	add.w	r3, r7, #8
 800fa14:	461a      	mov	r2, r3
 800fa16:	69f9      	ldr	r1, [r7, #28]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7ff ffd3 	bl	800f9c4 <mg_vprintf>
 800fa1e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800fa20:	68fb      	ldr	r3, [r7, #12]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa2c:	b003      	add	sp, #12
 800fa2e:	4770      	bx	lr

0800fa30 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b088      	sub	sp, #32
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	f107 0308 	add.w	r3, r7, #8
 800fa3a:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa3e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800fa40:	4811      	ldr	r0, [pc, #68]	@ (800fa88 <mg_atonl+0x58>)
 800fa42:	f013 f930 	bl	8022ca6 <mg_ntohl>
 800fa46:	4603      	mov	r3, r0
 800fa48:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800fa4a:	f107 0318 	add.w	r3, r7, #24
 800fa4e:	490f      	ldr	r1, [pc, #60]	@ (800fa8c <mg_atonl+0x5c>)
 800fa50:	4618      	mov	r0, r3
 800fa52:	f007 fe77 	bl	8017744 <mg_str_s>
 800fa56:	f107 0318 	add.w	r3, r7, #24
 800fa5a:	cb0c      	ldmia	r3, {r2, r3}
 800fa5c:	f107 0108 	add.w	r1, r7, #8
 800fa60:	c903      	ldmia	r1, {r0, r1}
 800fa62:	f007 ff32 	bl	80178ca <mg_strcasecmp>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <mg_atonl+0x40>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	e006      	b.n	800fa7e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	74da      	strb	r2, [r3, #19]
  return true;
 800fa7c:	2301      	movs	r3, #1
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3720      	adds	r7, #32
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
 800fa86:	bf00      	nop
 800fa88:	7f000001 	.word	0x7f000001
 800fa8c:	0802e500 	.word	0x0802e500

0800fa90 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	f107 0308 	add.w	r3, r7, #8
 800fa9a:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa9e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <mg_atone+0x1a>
 800faa6:	2300      	movs	r3, #0
 800faa8:	e009      	b.n	800fabe <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2210      	movs	r2, #16
 800faae:	2100      	movs	r1, #0
 800fab0:	4618      	mov	r0, r3
 800fab2:	f018 fe75 	bl	80287a0 <memset>
  addr->is_ip6 = false;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	74da      	strb	r2, [r3, #19]
  return true;
 800fabc:	2301      	movs	r3, #1
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800fac6:	b480      	push	{r7}
 800fac8:	b089      	sub	sp, #36	@ 0x24
 800faca:	af00      	add	r7, sp, #0
 800facc:	f107 0308 	add.w	r3, r7, #8
 800fad0:	e883 0003 	stmia.w	r3, {r0, r1}
 800fad4:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800fad6:	2300      	movs	r3, #0
 800fad8:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800fada:	2300      	movs	r3, #0
 800fadc:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800fade:	2300      	movs	r3, #0
 800fae0:	61fb      	str	r3, [r7, #28]
 800fae2:	e049      	b.n	800fb78 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	4413      	add	r3, r2
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	2b2f      	cmp	r3, #47	@ 0x2f
 800faee:	d925      	bls.n	800fb3c <mg_aton4+0x76>
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	4413      	add	r3, r2
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	2b39      	cmp	r3, #57	@ 0x39
 800fafa:	d81f      	bhi.n	800fb3c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800fafc:	f107 0210 	add.w	r2, r7, #16
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	4413      	add	r3, r2
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	461a      	mov	r2, r3
 800fb08:	4613      	mov	r3, r2
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	4413      	add	r3, r2
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	4619      	mov	r1, r3
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	4413      	add	r3, r2
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	3b30      	subs	r3, #48	@ 0x30
 800fb1c:	440b      	add	r3, r1
 800fb1e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	2bff      	cmp	r3, #255	@ 0xff
 800fb24:	dd01      	ble.n	800fb2a <mg_aton4+0x64>
 800fb26:	2300      	movs	r3, #0
 800fb28:	e03d      	b.n	800fba6 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	b2d9      	uxtb	r1, r3
 800fb2e:	f107 0210 	add.w	r2, r7, #16
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	4413      	add	r3, r2
 800fb36:	460a      	mov	r2, r1
 800fb38:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800fb3a:	e01a      	b.n	800fb72 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800fb3c:	68ba      	ldr	r2, [r7, #8]
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	4413      	add	r3, r2
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb46:	d112      	bne.n	800fb6e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	2b02      	cmp	r3, #2
 800fb4c:	d809      	bhi.n	800fb62 <mg_aton4+0x9c>
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d006      	beq.n	800fb62 <mg_aton4+0x9c>
 800fb54:	68ba      	ldr	r2, [r7, #8]
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	4413      	add	r3, r2
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb60:	d101      	bne.n	800fb66 <mg_aton4+0xa0>
 800fb62:	2300      	movs	r3, #0
 800fb64:	e01f      	b.n	800fba6 <mg_aton4+0xe0>
      num_dots++;
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	61bb      	str	r3, [r7, #24]
 800fb6c:	e001      	b.n	800fb72 <mg_aton4+0xac>
    } else {
      return false;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	e019      	b.n	800fba6 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	3301      	adds	r3, #1
 800fb76:	61fb      	str	r3, [r7, #28]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	69fa      	ldr	r2, [r7, #28]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d3b1      	bcc.n	800fae4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	2b03      	cmp	r3, #3
 800fb84:	d106      	bne.n	800fb94 <mg_aton4+0xce>
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	4413      	add	r3, r2
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb92:	d101      	bne.n	800fb98 <mg_aton4+0xd2>
 800fb94:	2300      	movs	r3, #0
 800fb96:	e006      	b.n	800fba6 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	74da      	strb	r2, [r3, #19]
  return true;
 800fba4:	2301      	movs	r3, #1
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3724      	adds	r7, #36	@ 0x24
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr

0800fbb2 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b088      	sub	sp, #32
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	f107 0308 	add.w	r3, r7, #8
 800fbbc:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbc0:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2b0d      	cmp	r3, #13
 800fbc6:	d801      	bhi.n	800fbcc <mg_v4mapped+0x1a>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e056      	b.n	800fc7a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b3a      	cmp	r3, #58	@ 0x3a
 800fbd2:	d109      	bne.n	800fbe8 <mg_v4mapped+0x36>
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	2b3a      	cmp	r3, #58	@ 0x3a
 800fbdc:	d104      	bne.n	800fbe8 <mg_v4mapped+0x36>
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	3306      	adds	r3, #6
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	2b3a      	cmp	r3, #58	@ 0x3a
 800fbe6:	d001      	beq.n	800fbec <mg_v4mapped+0x3a>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e046      	b.n	800fc7a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800fbec:	2302      	movs	r3, #2
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e010      	b.n	800fc14 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	2b66      	cmp	r3, #102	@ 0x66
 800fbfc:	d007      	beq.n	800fc0e <mg_v4mapped+0x5c>
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	4413      	add	r3, r2
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b46      	cmp	r3, #70	@ 0x46
 800fc08:	d001      	beq.n	800fc0e <mg_v4mapped+0x5c>
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	e035      	b.n	800fc7a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	3301      	adds	r3, #1
 800fc12:	61fb      	str	r3, [r7, #28]
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	2b05      	cmp	r3, #5
 800fc18:	ddeb      	ble.n	800fbf2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	1dd9      	adds	r1, r3, #7
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	1fda      	subs	r2, r3, #7
 800fc22:	f107 0314 	add.w	r3, r7, #20
 800fc26:	4618      	mov	r0, r3
 800fc28:	f007 fda9 	bl	801777e <mg_str_n>
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	f107 0314 	add.w	r3, r7, #20
 800fc32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc36:	f7ff ff46 	bl	800fac6 <mg_aton4>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	f083 0301 	eor.w	r3, r3, #1
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <mg_v4mapped+0x98>
 800fc46:	2300      	movs	r3, #0
 800fc48:	e017      	b.n	800fc7a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2210      	movs	r2, #16
 800fc54:	2100      	movs	r1, #0
 800fc56:	4618      	mov	r0, r3
 800fc58:	f018 fda2 	bl	80287a0 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	22ff      	movs	r2, #255	@ 0xff
 800fc60:	72da      	strb	r2, [r3, #11]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	7ada      	ldrb	r2, [r3, #11]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	330c      	adds	r3, #12
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	74da      	strb	r2, [r3, #19]
  return true;
 800fc78:	2301      	movs	r3, #1
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3720      	adds	r7, #32
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b090      	sub	sp, #64	@ 0x40
 800fc86:	af02      	add	r7, sp, #8
 800fc88:	f107 0308 	add.w	r3, r7, #8
 800fc8c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc90:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800fc92:	2300      	movs	r3, #0
 800fc94:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc96:	2300      	movs	r3, #0
 800fc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc9a:	232a      	movs	r3, #42	@ 0x2a
 800fc9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2200      	movs	r2, #0
 800fca2:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	d909      	bls.n	800fcbe <mg_aton6+0x3c>
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b5b      	cmp	r3, #91	@ 0x5b
 800fcb0:	d105      	bne.n	800fcbe <mg_aton6+0x3c>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	3301      	adds	r3, #1
 800fcb6:	60bb      	str	r3, [r7, #8]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	3b02      	subs	r3, #2
 800fcbc:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	f107 0308 	add.w	r3, r7, #8
 800fcc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fcc8:	f7ff ff73 	bl	800fbb2 <mg_v4mapped>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <mg_aton6+0x54>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e0e1      	b.n	800fe9a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcda:	e0b0      	b.n	800fe3e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce0:	4413      	add	r3, r2
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	2b2f      	cmp	r3, #47	@ 0x2f
 800fce6:	d905      	bls.n	800fcf4 <mg_aton6+0x72>
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcec:	4413      	add	r3, r2
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b39      	cmp	r3, #57	@ 0x39
 800fcf2:	d917      	bls.n	800fd24 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf8:	4413      	add	r3, r2
 800fcfa:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800fcfc:	2b60      	cmp	r3, #96	@ 0x60
 800fcfe:	d905      	bls.n	800fd0c <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd04:	4413      	add	r3, r2
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b66      	cmp	r3, #102	@ 0x66
 800fd0a:	d90b      	bls.n	800fd24 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800fd0c:	68ba      	ldr	r2, [r7, #8]
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd10:	4413      	add	r3, r2
 800fd12:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800fd14:	2b40      	cmp	r3, #64	@ 0x40
 800fd16:	d933      	bls.n	800fd80 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd1c:	4413      	add	r3, r2
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b46      	cmp	r3, #70	@ 0x46
 800fd22:	d82d      	bhi.n	800fd80 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800fd24:	2300      	movs	r3, #0
 800fd26:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800fd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2a:	3303      	adds	r3, #3
 800fd2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d901      	bls.n	800fd36 <mg_aton6+0xb4>
 800fd32:	2300      	movs	r3, #0
 800fd34:	e0b1      	b.n	800fe9a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3a:	18d1      	adds	r1, r2, r3
 800fd3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	1c5a      	adds	r2, r3, #1
 800fd44:	f107 0318 	add.w	r3, r7, #24
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f007 fd18 	bl	801777e <mg_str_n>
 800fd4e:	f107 0314 	add.w	r3, r7, #20
 800fd52:	2204      	movs	r2, #4
 800fd54:	9200      	str	r2, [sp, #0]
 800fd56:	2210      	movs	r2, #16
 800fd58:	f107 0118 	add.w	r1, r7, #24
 800fd5c:	c903      	ldmia	r1, {r0, r1}
 800fd5e:	f007 ff4c 	bl	8017bfa <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	0a1b      	lsrs	r3, r3, #8
 800fd66:	b2d9      	uxtb	r1, r3
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd6c:	4413      	add	r3, r2
 800fd6e:	460a      	mov	r2, r1
 800fd70:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd76:	3301      	adds	r3, #1
 800fd78:	b2d1      	uxtb	r1, r2
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800fd7e:	e05b      	b.n	800fe38 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd84:	4413      	add	r3, r2
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b3a      	cmp	r3, #58	@ 0x3a
 800fd8a:	d134      	bne.n	800fdf6 <mg_aton6+0x174>
      j = i + 1;
 800fd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd8e:	3301      	adds	r3, #1
 800fd90:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800fd92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d014      	beq.n	800fdc2 <mg_aton6+0x140>
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	4413      	add	r3, r2
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2b3a      	cmp	r3, #58	@ 0x3a
 800fda4:	d10d      	bne.n	800fdc2 <mg_aton6+0x140>
        dc = n;  // Double colon
 800fda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800fdaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d90f      	bls.n	800fdd0 <mg_aton6+0x14e>
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdb4:	3b02      	subs	r3, #2
 800fdb6:	4413      	add	r3, r2
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	2b3a      	cmp	r3, #58	@ 0x3a
 800fdbc:	d108      	bne.n	800fdd0 <mg_aton6+0x14e>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e06b      	b.n	800fe9a <mg_aton6+0x218>
      } else if (i > 0) {
 800fdc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d004      	beq.n	800fdd2 <mg_aton6+0x150>
        n += 2;
 800fdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdca:	3302      	adds	r3, #2
 800fdcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdce:	e000      	b.n	800fdd2 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800fdd0:	bf00      	nop
      }
      if (n > 14) return false;
 800fdd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd4:	2b0e      	cmp	r3, #14
 800fdd6:	d901      	bls.n	800fddc <mg_aton6+0x15a>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	e05e      	b.n	800fe9a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800fddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdde:	3301      	adds	r3, #1
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	2100      	movs	r1, #0
 800fde4:	54d1      	strb	r1, [r2, r3]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	5cd1      	ldrb	r1, [r2, r3]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdee:	4413      	add	r3, r2
 800fdf0:	460a      	mov	r2, r1
 800fdf2:	701a      	strb	r2, [r3, #0]
 800fdf4:	e020      	b.n	800fe38 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdfa:	4413      	add	r3, r2
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	2b25      	cmp	r3, #37	@ 0x25
 800fe00:	d118      	bne.n	800fe34 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe06:	3301      	adds	r3, #1
 800fe08:	18d1      	adds	r1, r2, r3
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	1e5a      	subs	r2, r3, #1
 800fe12:	f107 0320 	add.w	r3, r7, #32
 800fe16:	4618      	mov	r0, r3
 800fe18:	f007 fcb1 	bl	801777e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800fe20:	2201      	movs	r2, #1
 800fe22:	9200      	str	r2, [sp, #0]
 800fe24:	220a      	movs	r2, #10
 800fe26:	f107 0120 	add.w	r1, r7, #32
 800fe2a:	c903      	ldmia	r1, {r0, r1}
 800fe2c:	f007 fee5 	bl	8017bfa <mg_str_to_num>
 800fe30:	4603      	mov	r3, r0
 800fe32:	e032      	b.n	800fe9a <mg_aton6+0x218>
    } else {
      return false;
 800fe34:	2300      	movs	r3, #0
 800fe36:	e030      	b.n	800fe9a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800fe38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe42:	429a      	cmp	r2, r3
 800fe44:	f4ff af4a 	bcc.w	800fcdc <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800fe48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe4a:	2b0d      	cmp	r3, #13
 800fe4c:	d804      	bhi.n	800fe58 <mg_aton6+0x1d6>
 800fe4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe50:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe52:	d101      	bne.n	800fe58 <mg_aton6+0x1d6>
 800fe54:	2300      	movs	r3, #0
 800fe56:	e020      	b.n	800fe9a <mg_aton6+0x218>
  if (n < 14) {
 800fe58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5a:	2b0d      	cmp	r3, #13
 800fe5c:	d819      	bhi.n	800fe92 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800fe5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	330e      	adds	r3, #14
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	18d0      	adds	r0, r2, r3
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6e:	18d1      	adds	r1, r2, r3
 800fe70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	3302      	adds	r3, #2
 800fe78:	461a      	mov	r2, r3
 800fe7a:	f018 fc77 	bl	802876c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe82:	18d0      	adds	r0, r2, r3
 800fe84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe86:	f1c3 030e 	rsb	r3, r3, #14
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	f018 fc87 	bl	80287a0 <memset>
  }

  addr->is_ip6 = true;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	74da      	strb	r2, [r3, #19]
  return true;
 800fe98:	2301      	movs	r3, #1
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3738      	adds	r7, #56	@ 0x38
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b084      	sub	sp, #16
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	f107 0308 	add.w	r3, r7, #8
 800feac:	e883 0003 	stmia.w	r3, {r0, r1}
 800feb0:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	f107 0308 	add.w	r3, r7, #8
 800feb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800febc:	f7ff fde8 	bl	800fa90 <mg_atone>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d11d      	bne.n	800ff02 <mg_aton+0x60>
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	f107 0308 	add.w	r3, r7, #8
 800fecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fed0:	f7ff fdae 	bl	800fa30 <mg_atonl>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d113      	bne.n	800ff02 <mg_aton+0x60>
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	f107 0308 	add.w	r3, r7, #8
 800fee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fee4:	f7ff fdef 	bl	800fac6 <mg_aton4>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d109      	bne.n	800ff02 <mg_aton+0x60>
         mg_aton6(str, addr);
 800feee:	687a      	ldr	r2, [r7, #4]
 800fef0:	f107 0308 	add.w	r3, r7, #8
 800fef4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fef8:	f7ff fec3 	bl	800fc82 <mg_aton6>
 800fefc:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d001      	beq.n	800ff06 <mg_aton+0x64>
 800ff02:	2301      	movs	r3, #1
 800ff04:	e000      	b.n	800ff08 <mg_aton+0x66>
 800ff06:	2300      	movs	r3, #0
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	b2db      	uxtb	r3, r3
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b084      	sub	sp, #16
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff22:	33b0      	adds	r3, #176	@ 0xb0
 800ff24:	4619      	mov	r1, r3
 800ff26:	2001      	movs	r0, #1
 800ff28:	f016 fc70 	bl	802680c <calloc>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d017      	beq.n	800ff66 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff42:	675a      	str	r2, [r3, #116]	@ 0x74
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	645a      	str	r2, [r3, #68]	@ 0x44
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	69db      	ldr	r3, [r3, #28]
 800ff58:	1c5a      	adds	r2, r3, #1
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	61da      	str	r2, [r3, #28]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	69da      	ldr	r2, [r3, #28]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800ff66:	68fb      	ldr	r3, [r7, #12]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7f8 ff06 	bl	8008d8a <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	60fb      	str	r3, [r7, #12]
 800ff84:	e002      	b.n	800ff8c <mg_close_conn+0x1c>
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d1f7      	bne.n	800ff86 <mg_close_conn+0x16>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d103      	bne.n	800ffb2 <mg_close_conn+0x42>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d103      	bne.n	800ffc6 <mg_close_conn+0x56>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	2109      	movs	r1, #9
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f7f9 fca4 	bl	8009918 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800ffd0:	4b17      	ldr	r3, [pc, #92]	@ (8010030 <mg_close_conn+0xc0>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	dd0e      	ble.n	800fff6 <mg_close_conn+0x86>
 800ffd8:	4b16      	ldr	r3, [pc, #88]	@ (8010034 <mg_close_conn+0xc4>)
 800ffda:	f640 72cf 	movw	r2, #4047	@ 0xfcf
 800ffde:	4916      	ldr	r1, [pc, #88]	@ (8010038 <mg_close_conn+0xc8>)
 800ffe0:	2003      	movs	r0, #3
 800ffe2:	f7ff fbaf 	bl	800f744 <mg_log_prefix>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffee:	461a      	mov	r2, r3
 800fff0:	4812      	ldr	r0, [pc, #72]	@ (801003c <mg_close_conn+0xcc>)
 800fff2:	f7ff fbf7 	bl	800f7e4 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f00c f8c0 	bl	801c17c <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3338      	adds	r3, #56	@ 0x38
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fbd2 	bl	800e7aa <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	3348      	adds	r3, #72	@ 0x48
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe fbcd 	bl	800e7aa <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3368      	adds	r3, #104	@ 0x68
 8010014:	4618      	mov	r0, r3
 8010016:	f7fe fbc8 	bl	800e7aa <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 801001a:	21b0      	movs	r1, #176	@ 0xb0
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f012 fd4b 	bl	8022ab8 <mg_bzero>
  free(c);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f016 fc16 	bl	8026854 <free>
}
 8010028:	bf00      	nop
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	2400025c 	.word	0x2400025c
 8010034:	08031198 	.word	0x08031198
 8010038:	0802d330 	.word	0x0802d330
 801003c:	0802e50c 	.word	0x0802e50c

08010040 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801004e:	2300      	movs	r3, #0
 8010050:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d003      	beq.n	8010060 <mg_connect+0x20>
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10e      	bne.n	801007e <mg_connect+0x3e>
    MG_ERROR(("null url"));
 8010060:	4b3f      	ldr	r3, [pc, #252]	@ (8010160 <mg_connect+0x120>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	dd76      	ble.n	8010156 <mg_connect+0x116>
 8010068:	4b3e      	ldr	r3, [pc, #248]	@ (8010164 <mg_connect+0x124>)
 801006a:	f640 72df 	movw	r2, #4063	@ 0xfdf
 801006e:	493e      	ldr	r1, [pc, #248]	@ (8010168 <mg_connect+0x128>)
 8010070:	2001      	movs	r0, #1
 8010072:	f7ff fb67 	bl	800f744 <mg_log_prefix>
 8010076:	483d      	ldr	r0, [pc, #244]	@ (801016c <mg_connect+0x12c>)
 8010078:	f7ff fbb4 	bl	800f7e4 <mg_log>
 801007c:	e06b      	b.n	8010156 <mg_connect+0x116>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f7ff ff49 	bl	800ff16 <mg_alloc_conn>
 8010084:	6178      	str	r0, [r7, #20]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d10e      	bne.n	80100aa <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 801008c:	4b34      	ldr	r3, [pc, #208]	@ (8010160 <mg_connect+0x120>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	dd60      	ble.n	8010156 <mg_connect+0x116>
 8010094:	4b33      	ldr	r3, [pc, #204]	@ (8010164 <mg_connect+0x124>)
 8010096:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 801009a:	4933      	ldr	r1, [pc, #204]	@ (8010168 <mg_connect+0x128>)
 801009c:	2001      	movs	r0, #1
 801009e:	f7ff fb51 	bl	800f744 <mg_log_prefix>
 80100a2:	4833      	ldr	r0, [pc, #204]	@ (8010170 <mg_connect+0x130>)
 80100a4:	f7ff fb9e 	bl	800f7e4 <mg_log>
 80100a8:	e055      	b.n	8010156 <mg_connect+0x116>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	697a      	ldr	r2, [r7, #20]
 80100b6:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 80100b8:	2204      	movs	r2, #4
 80100ba:	492e      	ldr	r1, [pc, #184]	@ (8010174 <mg_connect+0x134>)
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f018 fb84 	bl	80287ca <strncmp>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	bf0c      	ite	eq
 80100c8:	2301      	moveq	r3, #1
 80100ca:	2300      	movne	r3, #0
 80100cc:	b2d9      	uxtb	r1, r3
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80100d4:	f361 0300 	bfi	r3, r1, #0, #1
 80100d8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	f04f 32ff 	mov.w	r2, #4294967295
 80100e2:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 80100ea:	697a      	ldr	r2, [r7, #20]
 80100ec:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80100f0:	f043 0302 	orr.w	r3, r3, #2
 80100f4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	683a      	ldr	r2, [r7, #0]
 80100fc:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 80100fe:	68b8      	ldr	r0, [r7, #8]
 8010100:	f012 fb7a 	bl	80227f8 <mg_url_is_ssl>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	bf14      	ite	ne
 801010a:	2301      	movne	r3, #1
 801010c:	2300      	moveq	r3, #0
 801010e:	b2d9      	uxtb	r1, r3
 8010110:	697a      	ldr	r2, [r7, #20]
 8010112:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010116:	f361 1386 	bfi	r3, r1, #6, #1
 801011a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, (void *) url);
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	2101      	movs	r1, #1
 8010122:	6978      	ldr	r0, [r7, #20]
 8010124:	f7f9 fbf8 	bl	8009918 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8010128:	4b0d      	ldr	r3, [pc, #52]	@ (8010160 <mg_connect+0x120>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b02      	cmp	r3, #2
 801012e:	dd0e      	ble.n	801014e <mg_connect+0x10e>
 8010130:	4b0c      	ldr	r3, [pc, #48]	@ (8010164 <mg_connect+0x124>)
 8010132:	f640 72eb 	movw	r2, #4075	@ 0xfeb
 8010136:	490c      	ldr	r1, [pc, #48]	@ (8010168 <mg_connect+0x128>)
 8010138:	2003      	movs	r0, #3
 801013a:	f7ff fb03 	bl	800f744 <mg_log_prefix>
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	480b      	ldr	r0, [pc, #44]	@ (8010178 <mg_connect+0x138>)
 801014a:	f7ff fb4b 	bl	800f7e4 <mg_log>
    mg_resolve(c, url);
 801014e:	68b9      	ldr	r1, [r7, #8]
 8010150:	6978      	ldr	r0, [r7, #20]
 8010152:	f7f9 fb9d 	bl	8009890 <mg_resolve>
  }
  return c;
 8010156:	697b      	ldr	r3, [r7, #20]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3718      	adds	r7, #24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	2400025c 	.word	0x2400025c
 8010164:	080311a8 	.word	0x080311a8
 8010168:	0802d330 	.word	0x0802d330
 801016c:	0802e51c 	.word	0x0802e51c
 8010170:	0802e528 	.word	0x0802e528
 8010174:	0802e52c 	.word	0x0802e52c
 8010178:	0802d4e0 	.word	0x0802d4e0

0801017c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 801017c:	b580      	push	{r7, lr}
 801017e:	b086      	sub	sp, #24
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
 8010188:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f7ff fec1 	bl	800ff16 <mg_alloc_conn>
 8010194:	6178      	str	r0, [r7, #20]
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10f      	bne.n	80101bc <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 801019c:	4b43      	ldr	r3, [pc, #268]	@ (80102ac <mg_listen+0x130>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	dd7d      	ble.n	80102a0 <mg_listen+0x124>
 80101a4:	4b42      	ldr	r3, [pc, #264]	@ (80102b0 <mg_listen+0x134>)
 80101a6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80101aa:	4942      	ldr	r1, [pc, #264]	@ (80102b4 <mg_listen+0x138>)
 80101ac:	2001      	movs	r0, #1
 80101ae:	f7ff fac9 	bl	800f744 <mg_log_prefix>
 80101b2:	68b9      	ldr	r1, [r7, #8]
 80101b4:	4840      	ldr	r0, [pc, #256]	@ (80102b8 <mg_listen+0x13c>)
 80101b6:	f7ff fb15 	bl	800f7e4 <mg_log>
 80101ba:	e071      	b.n	80102a0 <mg_listen+0x124>
  } else if (!mg_open_listener(c, url)) {
 80101bc:	68b9      	ldr	r1, [r7, #8]
 80101be:	6978      	ldr	r0, [r7, #20]
 80101c0:	f003 fb06 	bl	80137d0 <mg_open_listener>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f083 0301 	eor.w	r3, r3, #1
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d019      	beq.n	8010204 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80101d0:	4b36      	ldr	r3, [pc, #216]	@ (80102ac <mg_listen+0x130>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dd0f      	ble.n	80101f8 <mg_listen+0x7c>
 80101d8:	4b35      	ldr	r3, [pc, #212]	@ (80102b0 <mg_listen+0x134>)
 80101da:	f640 72f7 	movw	r2, #4087	@ 0xff7
 80101de:	4935      	ldr	r1, [pc, #212]	@ (80102b4 <mg_listen+0x138>)
 80101e0:	2001      	movs	r0, #1
 80101e2:	f7ff faaf 	bl	800f744 <mg_log_prefix>
 80101e6:	f019 fcd3 	bl	8029b90 <__errno>
 80101ea:	4603      	mov	r3, r0
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	461a      	mov	r2, r3
 80101f0:	68b9      	ldr	r1, [r7, #8]
 80101f2:	4832      	ldr	r0, [pc, #200]	@ (80102bc <mg_listen+0x140>)
 80101f4:	f7ff faf6 	bl	800f7e4 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 80101f8:	6978      	ldr	r0, [r7, #20]
 80101fa:	f016 fb2b 	bl	8026854 <free>
    c = NULL;
 80101fe:	2300      	movs	r3, #0
 8010200:	617b      	str	r3, [r7, #20]
 8010202:	e04d      	b.n	80102a0 <mg_listen+0x124>
  } else {
    c->is_listening = 1;
 8010204:	697a      	ldr	r2, [r7, #20]
 8010206:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801020a:	f043 0301 	orr.w	r3, r3, #1
 801020e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8010212:	2204      	movs	r2, #4
 8010214:	492a      	ldr	r1, [pc, #168]	@ (80102c0 <mg_listen+0x144>)
 8010216:	68b8      	ldr	r0, [r7, #8]
 8010218:	f018 fad7 	bl	80287ca <strncmp>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	bf0c      	ite	eq
 8010222:	2301      	moveq	r3, #1
 8010224:	2300      	movne	r3, #0
 8010226:	b2d9      	uxtb	r1, r3
 8010228:	697a      	ldr	r2, [r7, #20]
 801022a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801022e:	f361 0300 	bfi	r3, r1, #0, #1
 8010232:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	697a      	ldr	r2, [r7, #20]
 8010242:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 8010250:	68b8      	ldr	r0, [r7, #8]
 8010252:	f012 fad1 	bl	80227f8 <mg_url_is_ssl>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	bf14      	ite	ne
 801025c:	2301      	movne	r3, #1
 801025e:	2300      	moveq	r3, #0
 8010260:	b2d9      	uxtb	r1, r3
 8010262:	697a      	ldr	r2, [r7, #20]
 8010264:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010268:	f361 1386 	bfi	r3, r1, #6, #1
 801026c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, NULL);
 8010270:	2200      	movs	r2, #0
 8010272:	2101      	movs	r1, #1
 8010274:	6978      	ldr	r0, [r7, #20]
 8010276:	f7f9 fb4f 	bl	8009918 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801027a:	4b0c      	ldr	r3, [pc, #48]	@ (80102ac <mg_listen+0x130>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b02      	cmp	r3, #2
 8010280:	dd0e      	ble.n	80102a0 <mg_listen+0x124>
 8010282:	4b0b      	ldr	r3, [pc, #44]	@ (80102b0 <mg_listen+0x134>)
 8010284:	f241 0203 	movw	r2, #4099	@ 0x1003
 8010288:	490a      	ldr	r1, [pc, #40]	@ (80102b4 <mg_listen+0x138>)
 801028a:	2003      	movs	r0, #3
 801028c:	f7ff fa5a 	bl	800f744 <mg_log_prefix>
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	480a      	ldr	r0, [pc, #40]	@ (80102c4 <mg_listen+0x148>)
 801029c:	f7ff faa2 	bl	800f7e4 <mg_log>
  }
  return c;
 80102a0:	697b      	ldr	r3, [r7, #20]
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	2400025c 	.word	0x2400025c
 80102b0:	080311b4 	.word	0x080311b4
 80102b4:	0802d330 	.word	0x0802d330
 80102b8:	0802e534 	.word	0x0802e534
 80102bc:	0802e53c 	.word	0x0802e53c
 80102c0:	0802e52c 	.word	0x0802e52c
 80102c4:	0802d4e0 	.word	0x0802d4e0

080102c8 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b08a      	sub	sp, #40	@ 0x28
 80102cc:	af04      	add	r7, sp, #16
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 80102d4:	2120      	movs	r1, #32
 80102d6:	2001      	movs	r0, #1
 80102d8:	f016 fa98 	bl	802680c <calloc>
 80102dc:	4603      	mov	r3, r0
 80102de:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d011      	beq.n	801030a <mg_timer_add+0x42>
    flags |= MG_TIMER_AUTODELETE;  // We have calloc-ed it, so autodelete
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	f043 0308 	orr.w	r3, r3, #8
 80102ec:	623b      	str	r3, [r7, #32]
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80102f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f6:	9302      	str	r3, [sp, #8]
 80102f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102fa:	9301      	str	r3, [sp, #4]
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010304:	6979      	ldr	r1, [r7, #20]
 8010306:	f007 feab 	bl	8018060 <mg_timer_init>
  }
  return t;
 801030a:	697b      	ldr	r3, [r7, #20]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 801031c:	2244      	movs	r2, #68	@ 0x44
 801031e:	2100      	movs	r1, #0
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f018 fa3d 	bl	80287a0 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f04f 32ff 	mov.w	r2, #4294967295
 801032c:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 801032e:	4b34      	ldr	r3, [pc, #208]	@ (8010400 <mg_mgr_init+0xec>)
 8010330:	2204      	movs	r2, #4
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	4b32      	ldr	r3, [pc, #200]	@ (8010400 <mg_mgr_init+0xec>)
 8010336:	2200      	movs	r2, #0
 8010338:	711a      	strb	r2, [r3, #4]
 801033a:	4b31      	ldr	r3, [pc, #196]	@ (8010400 <mg_mgr_init+0xec>)
 801033c:	2202      	movs	r2, #2
 801033e:	715a      	strb	r2, [r3, #5]
 8010340:	4830      	ldr	r0, [pc, #192]	@ (8010404 <mg_mgr_init+0xf0>)
 8010342:	f012 fcb0 	bl	8022ca6 <mg_ntohl>
 8010346:	4603      	mov	r3, r0
 8010348:	4a2f      	ldr	r2, [pc, #188]	@ (8010408 <mg_mgr_init+0xf4>)
 801034a:	6093      	str	r3, [r2, #8]
 801034c:	482f      	ldr	r0, [pc, #188]	@ (801040c <mg_mgr_init+0xf8>)
 801034e:	f012 fcaa 	bl	8022ca6 <mg_ntohl>
 8010352:	4603      	mov	r3, r0
 8010354:	4a2c      	ldr	r2, [pc, #176]	@ (8010408 <mg_mgr_init+0xf4>)
 8010356:	60d3      	str	r3, [r2, #12]
 8010358:	482d      	ldr	r0, [pc, #180]	@ (8010410 <mg_mgr_init+0xfc>)
 801035a:	f012 fca4 	bl	8022ca6 <mg_ntohl>
 801035e:	4603      	mov	r3, r0
 8010360:	4a29      	ldr	r2, [pc, #164]	@ (8010408 <mg_mgr_init+0xf4>)
 8010362:	6113      	str	r3, [r2, #16]
 8010364:	4b28      	ldr	r3, [pc, #160]	@ (8010408 <mg_mgr_init+0xf4>)
 8010366:	4a2b      	ldr	r2, [pc, #172]	@ (8010414 <mg_mgr_init+0x100>)
 8010368:	625a      	str	r2, [r3, #36]	@ 0x24
 801036a:	4b27      	ldr	r3, [pc, #156]	@ (8010408 <mg_mgr_init+0xf4>)
 801036c:	4a24      	ldr	r2, [pc, #144]	@ (8010400 <mg_mgr_init+0xec>)
 801036e:	629a      	str	r2, [r3, #40]	@ 0x28
 8010370:	4b25      	ldr	r3, [pc, #148]	@ (8010408 <mg_mgr_init+0xf4>)
 8010372:	2202      	movs	r2, #2
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	4b28      	ldr	r3, [pc, #160]	@ (8010418 <mg_mgr_init+0x104>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	b2da      	uxtb	r2, r3
 801037c:	4b22      	ldr	r3, [pc, #136]	@ (8010408 <mg_mgr_init+0xf4>)
 801037e:	705a      	strb	r2, [r3, #1]
 8010380:	4b25      	ldr	r3, [pc, #148]	@ (8010418 <mg_mgr_init+0x104>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	0a9b      	lsrs	r3, r3, #10
 8010386:	b2da      	uxtb	r2, r3
 8010388:	4b1f      	ldr	r3, [pc, #124]	@ (8010408 <mg_mgr_init+0xf4>)
 801038a:	709a      	strb	r2, [r3, #2]
 801038c:	4b22      	ldr	r3, [pc, #136]	@ (8010418 <mg_mgr_init+0x104>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	0cdb      	lsrs	r3, r3, #19
 8010392:	b2da      	uxtb	r2, r3
 8010394:	4b1c      	ldr	r3, [pc, #112]	@ (8010408 <mg_mgr_init+0xf4>)
 8010396:	70da      	strb	r2, [r3, #3]
 8010398:	4b20      	ldr	r3, [pc, #128]	@ (801041c <mg_mgr_init+0x108>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	b2da      	uxtb	r2, r3
 801039e:	4b1a      	ldr	r3, [pc, #104]	@ (8010408 <mg_mgr_init+0xf4>)
 80103a0:	711a      	strb	r2, [r3, #4]
 80103a2:	4b1f      	ldr	r3, [pc, #124]	@ (8010420 <mg_mgr_init+0x10c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	b2da      	uxtb	r2, r3
 80103a8:	4b17      	ldr	r3, [pc, #92]	@ (8010408 <mg_mgr_init+0xf4>)
 80103aa:	715a      	strb	r2, [r3, #5]
 80103ac:	4916      	ldr	r1, [pc, #88]	@ (8010408 <mg_mgr_init+0xf4>)
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f002 ffb4 	bl	801331c <mg_tcpip_init>
 80103b4:	4b1b      	ldr	r3, [pc, #108]	@ (8010424 <mg_mgr_init+0x110>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	dd0b      	ble.n	80103d4 <mg_mgr_init+0xc0>
 80103bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010428 <mg_mgr_init+0x114>)
 80103be:	f241 024f 	movw	r2, #4175	@ 0x104f
 80103c2:	491a      	ldr	r1, [pc, #104]	@ (801042c <mg_mgr_init+0x118>)
 80103c4:	2002      	movs	r0, #2
 80103c6:	f7ff f9bd 	bl	800f744 <mg_log_prefix>
 80103ca:	4a0f      	ldr	r2, [pc, #60]	@ (8010408 <mg_mgr_init+0xf4>)
 80103cc:	4918      	ldr	r1, [pc, #96]	@ (8010430 <mg_mgr_init+0x11c>)
 80103ce:	4819      	ldr	r0, [pc, #100]	@ (8010434 <mg_mgr_init+0x120>)
 80103d0:	f7ff fa08 	bl	800f7e4 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f04f 32ff 	mov.w	r2, #4294967295
 80103da:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80103e2:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a14      	ldr	r2, [pc, #80]	@ (8010438 <mg_mgr_init+0x124>)
 80103e8:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4a13      	ldr	r2, [pc, #76]	@ (801043c <mg_mgr_init+0x128>)
 80103ee:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f00c f81e 	bl	801c432 <mg_tls_ctx_init>
}
 80103f6:	bf00      	nop
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	2401ce50 	.word	0x2401ce50
 8010404:	c0a80119 	.word	0xc0a80119
 8010408:	2401ce58 	.word	0x2401ce58
 801040c:	ffff0000 	.word	0xffff0000
 8010410:	c0a80101 	.word	0xc0a80101
 8010414:	240002a4 	.word	0x240002a4
 8010418:	1ff1e800 	.word	0x1ff1e800
 801041c:	1ff1e804 	.word	0x1ff1e804
 8010420:	1ff1e808 	.word	0x1ff1e808
 8010424:	2400025c 	.word	0x2400025c
 8010428:	080311c0 	.word	0x080311c0
 801042c:	0802d330 	.word	0x0802d330
 8010430:	08014239 	.word	0x08014239
 8010434:	0802e56c 	.word	0x0802e56c
 8010438:	0802e584 	.word	0x0802e584
 801043c:	0802e598 	.word	0x0802e598

08010440 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010450:	2b00      	cmp	r3, #0
 8010452:	d005      	beq.n	8010460 <mg_tcpip_call+0x20>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	68b9      	ldr	r1, [r7, #8]
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	4798      	blx	r3
}
 8010460:	bf00      	nop
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 8010468:	b590      	push	{r4, r7, lr}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	441a      	add	r2, r3
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	461a      	mov	r2, r3
 8010482:	68fc      	ldr	r4, [r7, #12]
 8010484:	463b      	mov	r3, r7
 8010486:	68b9      	ldr	r1, [r7, #8]
 8010488:	4618      	mov	r0, r3
 801048a:	f007 f978 	bl	801777e <mg_str_n>
 801048e:	f104 0308 	add.w	r3, r4, #8
 8010492:	463a      	mov	r2, r7
 8010494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010498:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801049c:	bf00      	nop
 801049e:	3714      	adds	r7, #20
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd90      	pop	{r4, r7, pc}

080104a4 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 80104a4:	b480      	push	{r7}
 80104a6:	b087      	sub	sp, #28
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 80104b4:	2300      	movs	r3, #0
 80104b6:	617b      	str	r3, [r7, #20]
 80104b8:	e014      	b.n	80104e4 <csumup+0x40>
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	f003 0301 	and.w	r3, r3, #1
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d004      	beq.n	80104ce <csumup+0x2a>
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	4413      	add	r3, r2
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	e004      	b.n	80104d8 <csumup+0x34>
 80104ce:	693a      	ldr	r2, [r7, #16]
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	4413      	add	r3, r2
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	021b      	lsls	r3, r3, #8
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	4413      	add	r3, r2
 80104dc:	60fb      	str	r3, [r7, #12]
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	3301      	adds	r3, #1
 80104e2:	617b      	str	r3, [r7, #20]
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d3e6      	bcc.n	80104ba <csumup+0x16>
  return sum;
 80104ec:	68fb      	ldr	r3, [r7, #12]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	371c      	adds	r7, #28
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b082      	sub	sp, #8
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8010502:	e005      	b.n	8010510 <csumfin+0x16>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	b29a      	uxth	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	0c1b      	lsrs	r3, r3, #16
 801050c:	4413      	add	r3, r2
 801050e:	607b      	str	r3, [r7, #4]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	0c1b      	lsrs	r3, r3, #16
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1f5      	bne.n	8010504 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	b29b      	uxth	r3, r3
 801051c:	43db      	mvns	r3, r3
 801051e:	b29b      	uxth	r3, r3
 8010520:	4618      	mov	r0, r3
 8010522:	f012 fba9 	bl	8022c78 <mg_ntohs>
 8010526:	4603      	mov	r3, r0
}
 8010528:	4618      	mov	r0, r3
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	6879      	ldr	r1, [r7, #4]
 801053e:	2000      	movs	r0, #0
 8010540:	f7ff ffb0 	bl	80104a4 <csumup>
 8010544:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f7ff ffd7 	bl	80104fa <csumfin>
 801054c:	4603      	mov	r3, r0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
	...

08010558 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8010558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801055c:	b088      	sub	sp, #32
 801055e:	af02      	add	r7, sp, #8
 8010560:	6078      	str	r0, [r7, #4]
 8010562:	460b      	mov	r3, r1
 8010564:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801056c:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	33b0      	adds	r3, #176	@ 0xb0
 8010572:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 8010574:	78fb      	ldrb	r3, [r7, #3]
 8010576:	2b01      	cmp	r3, #1
 8010578:	d013      	beq.n	80105a2 <settmout+0x4a>
 801057a:	78fb      	ldrb	r3, [r7, #3]
 801057c:	2b02      	cmp	r3, #2
 801057e:	d00e      	beq.n	801059e <settmout+0x46>
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	2b03      	cmp	r3, #3
 8010584:	d008      	beq.n	8010598 <settmout+0x40>
 8010586:	78fb      	ldrb	r3, [r7, #3]
 8010588:	2b04      	cmp	r3, #4
 801058a:	d102      	bne.n	8010592 <settmout+0x3a>
 801058c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010590:	e008      	b.n	80105a4 <settmout+0x4c>
 8010592:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 8010596:	e005      	b.n	80105a4 <settmout+0x4c>
 8010598:	f643 2398 	movw	r3, #15000	@ 0x3a98
 801059c:	e002      	b.n	80105a4 <settmout+0x4c>
 801059e:	2364      	movs	r3, #100	@ 0x64
 80105a0:	e000      	b.n	80105a4 <settmout+0x4c>
 80105a2:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 80105a4:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105ac:	2b04      	cmp	r3, #4
 80105ae:	d029      	beq.n	8010604 <settmout+0xac>
  s->timer = ifp->now + n;
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80105b6:	68f9      	ldr	r1, [r7, #12]
 80105b8:	2000      	movs	r0, #0
 80105ba:	460c      	mov	r4, r1
 80105bc:	4605      	mov	r5, r0
 80105be:	eb12 0804 	adds.w	r8, r2, r4
 80105c2:	eb43 0905 	adc.w	r9, r3, r5
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	78fa      	ldrb	r2, [r7, #3]
 80105d0:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80105d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010610 <settmout+0xb8>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b03      	cmp	r3, #3
 80105da:	dd14      	ble.n	8010606 <settmout+0xae>
 80105dc:	4b0d      	ldr	r3, [pc, #52]	@ (8010614 <settmout+0xbc>)
 80105de:	f241 1211 	movw	r2, #4369	@ 0x1111
 80105e2:	490d      	ldr	r1, [pc, #52]	@ (8010618 <settmout+0xc0>)
 80105e4:	2004      	movs	r0, #4
 80105e6:	f7ff f8ad 	bl	800f744 <mg_log_prefix>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80105ee:	78f8      	ldrb	r0, [r7, #3]
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80105f6:	e9cd 2300 	strd	r2, r3, [sp]
 80105fa:	4602      	mov	r2, r0
 80105fc:	4807      	ldr	r0, [pc, #28]	@ (801061c <settmout+0xc4>)
 80105fe:	f7ff f8f1 	bl	800f7e4 <mg_log>
 8010602:	e000      	b.n	8010606 <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 8010604:	bf00      	nop
}
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801060e:	bf00      	nop
 8010610:	2400025c 	.word	0x2400025c
 8010614:	080311cc 	.word	0x080311cc
 8010618:	0802d330 	.word	0x0802d330
 801061c:	0802e5b8 	.word	0x0802e5b8

08010620 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	6950      	ldr	r0, [r2, #20]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	6839      	ldr	r1, [r7, #0]
 8010638:	4798      	blx	r3
 801063a:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	429a      	cmp	r2, r3
 8010642:	d104      	bne.n	801064e <ether_output+0x2e>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010648:	1c5a      	adds	r2, r3, #1
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 801064e:	68fb      	ldr	r3, [r7, #12]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	695b      	ldr	r3, [r3, #20]
 8010668:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	330e      	adds	r3, #14
 801066e:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	2206      	movs	r2, #6
 8010674:	21ff      	movs	r1, #255	@ 0xff
 8010676:	4618      	mov	r0, r3
 8010678:	f018 f892 	bl	80287a0 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	3306      	adds	r3, #6
 8010680:	68f9      	ldr	r1, [r7, #12]
 8010682:	2206      	movs	r2, #6
 8010684:	4618      	mov	r0, r3
 8010686:	f019 faba 	bl	8029bfe <memcpy>
  eth->type = mg_htons(0x806);
 801068a:	f640 0006 	movw	r0, #2054	@ 0x806
 801068e:	f012 faf3 	bl	8022c78 <mg_ntohs>
 8010692:	4603      	mov	r3, r0
 8010694:	461a      	mov	r2, r3
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 801069a:	221c      	movs	r2, #28
 801069c:	2100      	movs	r1, #0
 801069e:	6938      	ldr	r0, [r7, #16]
 80106a0:	f018 f87e 	bl	80287a0 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 80106a4:	2001      	movs	r0, #1
 80106a6:	f012 fae7 	bl	8022c78 <mg_ntohs>
 80106aa:	4603      	mov	r3, r0
 80106ac:	461a      	mov	r2, r3
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	801a      	strh	r2, [r3, #0]
 80106b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80106b6:	f012 fadf 	bl	8022c78 <mg_ntohs>
 80106ba:	4603      	mov	r3, r0
 80106bc:	461a      	mov	r2, r3
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	805a      	strh	r2, [r3, #2]
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	2206      	movs	r2, #6
 80106c6:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	2204      	movs	r2, #4
 80106cc:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 80106ce:	2001      	movs	r0, #1
 80106d0:	f012 fad2 	bl	8022c78 <mg_ntohs>
 80106d4:	4603      	mov	r3, r0
 80106d6:	461a      	mov	r2, r3
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	80da      	strh	r2, [r3, #6]
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	68ba      	ldr	r2, [r7, #8]
 80106e0:	619a      	str	r2, [r3, #24]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	689a      	ldr	r2, [r3, #8]
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	3308      	adds	r3, #8
 80106f0:	68f9      	ldr	r1, [r7, #12]
 80106f2:	2206      	movs	r2, #6
 80106f4:	4618      	mov	r0, r3
 80106f6:	f019 fa82 	bl	8029bfe <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d006      	beq.n	801070e <mg_tcpip_arp_request+0xb6>
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	3312      	adds	r3, #18
 8010704:	2206      	movs	r2, #6
 8010706:	6879      	ldr	r1, [r7, #4]
 8010708:	4618      	mov	r0, r3
 801070a:	f019 fa78 	bl	8029bfe <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	f103 021c 	add.w	r2, r3, #28
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	4619      	mov	r1, r3
 801071a:	68f8      	ldr	r0, [r7, #12]
 801071c:	f7ff ff80 	bl	8010620 <ether_output>
}
 8010720:	bf00      	nop
 8010722:	3718      	adds	r7, #24
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010736:	2b04      	cmp	r3, #4
 8010738:	d135      	bne.n	80107a6 <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 801073a:	4b45      	ldr	r3, [pc, #276]	@ (8010850 <onstatechange+0x128>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2b01      	cmp	r3, #1
 8010740:	dd0d      	ble.n	801075e <onstatechange+0x36>
 8010742:	4b44      	ldr	r3, [pc, #272]	@ (8010854 <onstatechange+0x12c>)
 8010744:	f241 122b 	movw	r2, #4395	@ 0x112b
 8010748:	4943      	ldr	r1, [pc, #268]	@ (8010858 <onstatechange+0x130>)
 801074a:	2002      	movs	r0, #2
 801074c:	f7fe fffa 	bl	800f744 <mg_log_prefix>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	3308      	adds	r3, #8
 8010754:	461a      	mov	r2, r3
 8010756:	4941      	ldr	r1, [pc, #260]	@ (801085c <onstatechange+0x134>)
 8010758:	4841      	ldr	r0, [pc, #260]	@ (8010860 <onstatechange+0x138>)
 801075a:	f7ff f843 	bl	800f7e4 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 801075e:	4b3c      	ldr	r3, [pc, #240]	@ (8010850 <onstatechange+0x128>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b01      	cmp	r3, #1
 8010764:	dd0d      	ble.n	8010782 <onstatechange+0x5a>
 8010766:	4b3b      	ldr	r3, [pc, #236]	@ (8010854 <onstatechange+0x12c>)
 8010768:	f241 122c 	movw	r2, #4396	@ 0x112c
 801076c:	493a      	ldr	r1, [pc, #232]	@ (8010858 <onstatechange+0x130>)
 801076e:	2002      	movs	r0, #2
 8010770:	f7fe ffe8 	bl	800f744 <mg_log_prefix>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	3310      	adds	r3, #16
 8010778:	461a      	mov	r2, r3
 801077a:	4938      	ldr	r1, [pc, #224]	@ (801085c <onstatechange+0x134>)
 801077c:	4839      	ldr	r0, [pc, #228]	@ (8010864 <onstatechange+0x13c>)
 801077e:	f7ff f831 	bl	800f7e4 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8010782:	4b33      	ldr	r3, [pc, #204]	@ (8010850 <onstatechange+0x128>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b01      	cmp	r3, #1
 8010788:	dd57      	ble.n	801083a <onstatechange+0x112>
 801078a:	4b32      	ldr	r3, [pc, #200]	@ (8010854 <onstatechange+0x12c>)
 801078c:	f241 122d 	movw	r2, #4397	@ 0x112d
 8010790:	4931      	ldr	r1, [pc, #196]	@ (8010858 <onstatechange+0x130>)
 8010792:	2002      	movs	r0, #2
 8010794:	f7fe ffd6 	bl	800f744 <mg_log_prefix>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	461a      	mov	r2, r3
 801079c:	4932      	ldr	r1, [pc, #200]	@ (8010868 <onstatechange+0x140>)
 801079e:	4833      	ldr	r0, [pc, #204]	@ (801086c <onstatechange+0x144>)
 80107a0:	f7ff f820 	bl	800f7e4 <mg_log>
 80107a4:	e049      	b.n	801083a <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107ac:	2b03      	cmp	r3, #3
 80107ae:	d115      	bne.n	80107dc <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 80107b0:	4b27      	ldr	r3, [pc, #156]	@ (8010850 <onstatechange+0x128>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	dd09      	ble.n	80107cc <onstatechange+0xa4>
 80107b8:	4b26      	ldr	r3, [pc, #152]	@ (8010854 <onstatechange+0x12c>)
 80107ba:	f241 122f 	movw	r2, #4399	@ 0x112f
 80107be:	4926      	ldr	r1, [pc, #152]	@ (8010858 <onstatechange+0x130>)
 80107c0:	2001      	movs	r0, #1
 80107c2:	f7fe ffbf 	bl	800f744 <mg_log_prefix>
 80107c6:	482a      	ldr	r0, [pc, #168]	@ (8010870 <onstatechange+0x148>)
 80107c8:	f7ff f80c 	bl	800f7e4 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	2200      	movs	r2, #0
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7ff ff3f 	bl	8010658 <mg_tcpip_arp_request>
 80107da:	e02e      	b.n	801083a <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d116      	bne.n	8010814 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 80107e6:	4b1a      	ldr	r3, [pc, #104]	@ (8010850 <onstatechange+0x128>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	dd09      	ble.n	8010802 <onstatechange+0xda>
 80107ee:	4b19      	ldr	r3, [pc, #100]	@ (8010854 <onstatechange+0x12c>)
 80107f0:	f241 1232 	movw	r2, #4402	@ 0x1132
 80107f4:	4918      	ldr	r1, [pc, #96]	@ (8010858 <onstatechange+0x130>)
 80107f6:	2001      	movs	r0, #1
 80107f8:	f7fe ffa4 	bl	800f744 <mg_log_prefix>
 80107fc:	481d      	ldr	r0, [pc, #116]	@ (8010874 <onstatechange+0x14c>)
 80107fe:	f7fe fff1 	bl	800f7e4 <mg_log>
    srand((unsigned int) mg_millis());
 8010802:	f7f0 f9f5 	bl	8000bf0 <mg_millis>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4613      	mov	r3, r2
 801080c:	4618      	mov	r0, r3
 801080e:	f016 f8d7 	bl	80269c0 <srand>
 8010812:	e012      	b.n	801083a <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801081a:	2b00      	cmp	r3, #0
 801081c:	d10d      	bne.n	801083a <onstatechange+0x112>
    MG_ERROR(("Link down"));
 801081e:	4b0c      	ldr	r3, [pc, #48]	@ (8010850 <onstatechange+0x128>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	dd09      	ble.n	801083a <onstatechange+0x112>
 8010826:	4b0b      	ldr	r3, [pc, #44]	@ (8010854 <onstatechange+0x12c>)
 8010828:	f241 1235 	movw	r2, #4405	@ 0x1135
 801082c:	490a      	ldr	r1, [pc, #40]	@ (8010858 <onstatechange+0x130>)
 801082e:	2001      	movs	r0, #1
 8010830:	f7fe ff88 	bl	800f744 <mg_log_prefix>
 8010834:	4810      	ldr	r0, [pc, #64]	@ (8010878 <onstatechange+0x150>)
 8010836:	f7fe ffd5 	bl	800f7e4 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	3384      	adds	r3, #132	@ 0x84
 801083e:	461a      	mov	r2, r3
 8010840:	2100      	movs	r1, #0
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7ff fdfc 	bl	8010440 <mg_tcpip_call>
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	2400025c 	.word	0x2400025c
 8010854:	080311d8 	.word	0x080311d8
 8010858:	0802d330 	.word	0x0802d330
 801085c:	08014175 	.word	0x08014175
 8010860:	0802e5c8 	.word	0x0802e5c8
 8010864:	0802e5d8 	.word	0x0802e5d8
 8010868:	08014239 	.word	0x08014239
 801086c:	0802e5e8 	.word	0x0802e5e8
 8010870:	0802e5f8 	.word	0x0802e5f8
 8010874:	0802e600 	.word	0x0802e600
 8010878:	0802e608 	.word	0x0802e608

0801087c <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	603b      	str	r3, [r7, #0]
 8010888:	4613      	mov	r3, r2
 801088a:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	695b      	ldr	r3, [r3, #20]
 8010890:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	330e      	adds	r3, #14
 8010896:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	2206      	movs	r2, #6
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	4618      	mov	r0, r3
 80108a0:	f019 f9ad 	bl	8029bfe <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	3306      	adds	r3, #6
 80108a8:	68f9      	ldr	r1, [r7, #12]
 80108aa:	2206      	movs	r2, #6
 80108ac:	4618      	mov	r0, r3
 80108ae:	f019 f9a6 	bl	8029bfe <memcpy>
  eth->type = mg_htons(0x800);
 80108b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80108b6:	f012 f9df 	bl	8022c78 <mg_ntohs>
 80108ba:	4603      	mov	r3, r0
 80108bc:	461a      	mov	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 80108c2:	2214      	movs	r2, #20
 80108c4:	2100      	movs	r1, #0
 80108c6:	6938      	ldr	r0, [r7, #16]
 80108c8:	f017 ff6a 	bl	80287a0 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	2245      	movs	r2, #69	@ 0x45
 80108d0:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 80108d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80108d6:	f012 f9cf 	bl	8022c78 <mg_ntohs>
 80108da:	4603      	mov	r3, r0
 80108dc:	461a      	mov	r2, r3
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80108e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	3314      	adds	r3, #20
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	4618      	mov	r0, r3
 80108ec:	f012 f9c4 	bl	8022c78 <mg_ntohs>
 80108f0:	4603      	mov	r3, r0
 80108f2:	461a      	mov	r2, r3
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	2240      	movs	r2, #64	@ 0x40
 80108fc:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	79fa      	ldrb	r2, [r7, #7]
 8010902:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	6a3a      	ldr	r2, [r7, #32]
 801090e:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8010910:	2114      	movs	r1, #20
 8010912:	6938      	ldr	r0, [r7, #16]
 8010914:	f7ff fe0c 	bl	8010530 <ipcsum>
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	815a      	strh	r2, [r3, #10]
  return ip;
 8010920:	693b      	ldr	r3, [r7, #16]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 801092a:	b580      	push	{r7, lr}
 801092c:	b08a      	sub	sp, #40	@ 0x28
 801092e:	af02      	add	r7, sp, #8
 8010930:	60f8      	str	r0, [r7, #12]
 8010932:	60b9      	str	r1, [r7, #8]
 8010934:	607a      	str	r2, [r7, #4]
 8010936:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8010938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801093a:	3308      	adds	r3, #8
 801093c:	9301      	str	r3, [sp, #4]
 801093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2211      	movs	r2, #17
 8010946:	68b9      	ldr	r1, [r7, #8]
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	f7ff ff97 	bl	801087c <tx_ip>
 801094e:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	3314      	adds	r3, #20
 8010954:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	887a      	ldrh	r2, [r7, #2]
 801095a:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8010960:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8010962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010964:	b29b      	uxth	r3, r3
 8010966:	3308      	adds	r3, #8
 8010968:	b29b      	uxth	r3, r3
 801096a:	4618      	mov	r0, r3
 801096c:	f012 f984 	bl	8022c78 <mg_ntohs>
 8010970:	4603      	mov	r3, r0
 8010972:	461a      	mov	r2, r3
 8010974:	69bb      	ldr	r3, [r7, #24]
 8010976:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	2200      	movs	r2, #0
 801097c:	719a      	strb	r2, [r3, #6]
 801097e:	2200      	movs	r2, #0
 8010980:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8010982:	2208      	movs	r2, #8
 8010984:	69b9      	ldr	r1, [r7, #24]
 8010986:	2000      	movs	r0, #0
 8010988:	f7ff fd8c 	bl	80104a4 <csumup>
 801098c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 801098e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010990:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010992:	6978      	ldr	r0, [r7, #20]
 8010994:	f7ff fd86 	bl	80104a4 <csumup>
 8010998:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801099a:	69fb      	ldr	r3, [r7, #28]
 801099c:	330c      	adds	r3, #12
 801099e:	2204      	movs	r2, #4
 80109a0:	4619      	mov	r1, r3
 80109a2:	6978      	ldr	r0, [r7, #20]
 80109a4:	f7ff fd7e 	bl	80104a4 <csumup>
 80109a8:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	3310      	adds	r3, #16
 80109ae:	2204      	movs	r2, #4
 80109b0:	4619      	mov	r1, r3
 80109b2:	6978      	ldr	r0, [r7, #20]
 80109b4:	f7ff fd76 	bl	80104a4 <csumup>
 80109b8:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	7a5b      	ldrb	r3, [r3, #9]
 80109be:	461a      	mov	r2, r3
 80109c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109c2:	441a      	add	r2, r3
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	4413      	add	r3, r2
 80109c8:	3308      	adds	r3, #8
 80109ca:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 80109cc:	6978      	ldr	r0, [r7, #20]
 80109ce:	f7ff fd94 	bl	80104fa <csumfin>
 80109d2:	4603      	mov	r3, r0
 80109d4:	461a      	mov	r2, r3
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	3308      	adds	r3, #8
 80109de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80109e2:	4618      	mov	r0, r3
 80109e4:	f017 fec2 	bl	802876c <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 80109e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109ea:	332a      	adds	r3, #42	@ 0x2a
 80109ec:	4619      	mov	r1, r3
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	f7ff fe16 	bl	8010620 <ether_output>
}
 80109f4:	bf00      	nop
 80109f6:	3720      	adds	r7, #32
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 80109fc:	b5b0      	push	{r4, r5, r7, lr}
 80109fe:	b0d0      	sub	sp, #320	@ 0x140
 8010a00:	af04      	add	r7, sp, #16
 8010a02:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8010a06:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 8010a0a:	6020      	str	r0, [r4, #0]
 8010a0c:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8010a10:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8010a14:	6001      	str	r1, [r0, #0]
 8010a16:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8010a1a:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8010a1e:	600a      	str	r2, [r1, #0]
 8010a20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010a24:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010a28:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8010a2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010a32:	4a38      	ldr	r2, [pc, #224]	@ (8010b14 <tx_dhcp+0x118>)
 8010a34:	4618      	mov	r0, r3
 8010a36:	4611      	mov	r1, r2
 8010a38:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	f019 f8de 	bl	8029bfe <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8010a42:	4835      	ldr	r0, [pc, #212]	@ (8010b18 <tx_dhcp+0x11c>)
 8010a44:	f012 f92f 	bl	8022ca6 <mg_ntohl>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010a52:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8010a56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a5a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010a5e:	6819      	ldr	r1, [r3, #0]
 8010a60:	f107 0314 	add.w	r3, r7, #20
 8010a64:	331c      	adds	r3, #28
 8010a66:	2206      	movs	r2, #6
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f019 f8c8 	bl	8029bfe <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8010a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	3302      	adds	r3, #2
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010a86:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8010a88:	f107 0314 	add.w	r3, r7, #20
 8010a8c:	33f0      	adds	r3, #240	@ 0xf0
 8010a8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010a92:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8010a96:	4618      	mov	r0, r3
 8010a98:	f019 f8b1 	bl	8029bfe <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8010a9c:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d009      	beq.n	8010ab8 <tx_dhcp+0xbc>
 8010aa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aa8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010aac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010ab0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010ab4:	6812      	ldr	r2, [r2, #0]
 8010ab6:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8010ab8:	2044      	movs	r0, #68	@ 0x44
 8010aba:	f012 f8dd 	bl	8022c78 <mg_ntohs>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	461d      	mov	r5, r3
 8010ac2:	2043      	movs	r0, #67	@ 0x43
 8010ac4:	f012 f8d8 	bl	8022c78 <mg_ntohs>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461c      	mov	r4, r3
 8010acc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ad0:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8010ad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ad8:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8010adc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ae0:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8010ae4:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8010ae8:	9303      	str	r3, [sp, #12]
 8010aea:	f107 0314 	add.w	r3, r7, #20
 8010aee:	9302      	str	r3, [sp, #8]
 8010af0:	9401      	str	r4, [sp, #4]
 8010af2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010af6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	462b      	mov	r3, r5
 8010b00:	6812      	ldr	r2, [r2, #0]
 8010b02:	6809      	ldr	r1, [r1, #0]
 8010b04:	6800      	ldr	r0, [r0, #0]
 8010b06:	f7ff ff10 	bl	801092a <tx_udp>
         sizeof(dhcp));
}
 8010b0a:	bf00      	nop
 8010b0c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bdb0      	pop	{r4, r5, r7, pc}
 8010b14:	0802e614 	.word	0x0802e614
 8010b18:	63825363 	.word	0x63825363

08010b1c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b096      	sub	sp, #88	@ 0x58
 8010b20:	af04      	add	r7, sp, #16
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	60b9      	str	r1, [r7, #8]
 8010b26:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	7fdb      	ldrb	r3, [r3, #31]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <tx_dhcp_request_sel+0x18>
 8010b30:	2201      	movs	r2, #1
 8010b32:	e000      	b.n	8010b36 <tx_dhcp_request_sel+0x1a>
 8010b34:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d001      	beq.n	8010b44 <tx_dhcp_request_sel+0x28>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e000      	b.n	8010b46 <tx_dhcp_request_sel+0x2a>
 8010b44:	2300      	movs	r3, #0
 8010b46:	4413      	add	r3, r2
 8010b48:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	3344      	adds	r3, #68	@ 0x44
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7ef fc3d 	bl	80003d0 <strlen>
 8010b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 8010b58:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8010b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b5e:	4413      	add	r3, r2
 8010b60:	3318      	adds	r3, #24
 8010b62:	63bb      	str	r3, [r7, #56]	@ 0x38
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 8010b64:	f107 0310 	add.w	r3, r7, #16
 8010b68:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 8010b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b6c:	2b26      	cmp	r3, #38	@ 0x26
 8010b6e:	d906      	bls.n	8010b7e <tx_dhcp_request_sel+0x62>
 8010b70:	4b50      	ldr	r3, [pc, #320]	@ (8010cb4 <tx_dhcp_request_sel+0x198>)
 8010b72:	4a51      	ldr	r2, [pc, #324]	@ (8010cb8 <tx_dhcp_request_sel+0x19c>)
 8010b74:	f241 117e 	movw	r1, #4478	@ 0x117e
 8010b78:	4850      	ldr	r0, [pc, #320]	@ (8010cbc <tx_dhcp_request_sel+0x1a0>)
 8010b7a:	f015 fe21 	bl	80267c0 <__assert_func>
  memset(opts, 0, sizeof(opts));
 8010b7e:	f107 0310 	add.w	r3, r7, #16
 8010b82:	2226      	movs	r2, #38	@ 0x26
 8010b84:	2100      	movs	r1, #0
 8010b86:	4618      	mov	r0, r3
 8010b88:	f017 fe0a 	bl	80287a0 <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 8010b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b8e:	1c5a      	adds	r2, r3, #1
 8010b90:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b92:	2235      	movs	r2, #53	@ 0x35
 8010b94:	701a      	strb	r2, [r3, #0]
 8010b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b98:	1c5a      	adds	r2, r3, #1
 8010b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	701a      	strb	r2, [r3, #0]
 8010ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	647a      	str	r2, [r7, #68]	@ 0x44
 8010ba6:	2203      	movs	r2, #3
 8010ba8:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 8010baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bac:	1c5a      	adds	r2, r3, #1
 8010bae:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bb0:	2236      	movs	r2, #54	@ 0x36
 8010bb2:	701a      	strb	r2, [r3, #0]
 8010bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bba:	2204      	movs	r2, #4
 8010bbc:	701a      	strb	r2, [r3, #0]
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bc2:	601a      	str	r2, [r3, #0]
 8010bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bc6:	3304      	adds	r3, #4
 8010bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 8010bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bcc:	1c5a      	adds	r2, r3, #1
 8010bce:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bd0:	2232      	movs	r2, #50	@ 0x32
 8010bd2:	701a      	strb	r2, [r3, #0]
 8010bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bd6:	1c5a      	adds	r2, r3, #1
 8010bd8:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bda:	2204      	movs	r2, #4
 8010bdc:	701a      	strb	r2, [r3, #0]
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010be2:	601a      	str	r2, [r3, #0]
 8010be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010be6:	3304      	adds	r3, #4
 8010be8:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 8010bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bf0:	220c      	movs	r2, #12
 8010bf2:	701a      	strb	r2, [r3, #0]
 8010bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bf6:	1c5a      	adds	r2, r3, #1
 8010bf8:	647a      	str	r2, [r7, #68]	@ 0x44
 8010bfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010bfc:	b2d2      	uxtb	r2, r2
 8010bfe:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3344      	adds	r3, #68	@ 0x44
 8010c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c06:	4619      	mov	r1, r3
 8010c08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010c0a:	f018 fff8 	bl	8029bfe <memcpy>
 8010c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c12:	4413      	add	r3, r2
 8010c14:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 8010c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c1c:	2237      	movs	r2, #55	@ 0x37
 8010c1e:	701a      	strb	r2, [r3, #0]
 8010c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c22:	1c5a      	adds	r2, r3, #1
 8010c24:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c26:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8010c2a:	3202      	adds	r2, #2
 8010c2c:	b2d2      	uxtb	r2, r2
 8010c2e:	701a      	strb	r2, [r3, #0]
 8010c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c36:	2201      	movs	r2, #1
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c3c:	1c5a      	adds	r2, r3, #1
 8010c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c40:	2203      	movs	r2, #3
 8010c42:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	7fdb      	ldrb	r3, [r3, #31]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d004      	beq.n	8010c56 <tx_dhcp_request_sel+0x13a>
 8010c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c52:	2206      	movs	r2, #6
 8010c54:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d004      	beq.n	8010c6a <tx_dhcp_request_sel+0x14e>
 8010c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c66:	222a      	movs	r2, #42	@ 0x2a
 8010c68:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 8010c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c6c:	1c5a      	adds	r2, r3, #1
 8010c6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c70:	22ff      	movs	r2, #255	@ 0xff
 8010c72:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 8010c74:	2300      	movs	r3, #0
 8010c76:	9302      	str	r3, [sp, #8]
 8010c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7a:	9301      	str	r3, [sp, #4]
 8010c7c:	f107 0310 	add.w	r3, r7, #16
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	f04f 33ff 	mov.w	r3, #4294967295
 8010c86:	2200      	movs	r2, #0
 8010c88:	490d      	ldr	r1, [pc, #52]	@ (8010cc0 <tx_dhcp_request_sel+0x1a4>)
 8010c8a:	68f8      	ldr	r0, [r7, #12]
 8010c8c:	f7ff feb6 	bl	80109fc <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8010c90:	4b0c      	ldr	r3, [pc, #48]	@ (8010cc4 <tx_dhcp_request_sel+0x1a8>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	dd09      	ble.n	8010cac <tx_dhcp_request_sel+0x190>
 8010c98:	4b07      	ldr	r3, [pc, #28]	@ (8010cb8 <tx_dhcp_request_sel+0x19c>)
 8010c9a:	f241 128b 	movw	r2, #4491	@ 0x118b
 8010c9e:	4907      	ldr	r1, [pc, #28]	@ (8010cbc <tx_dhcp_request_sel+0x1a0>)
 8010ca0:	2003      	movs	r0, #3
 8010ca2:	f7fe fd4f 	bl	800f744 <mg_log_prefix>
 8010ca6:	4808      	ldr	r0, [pc, #32]	@ (8010cc8 <tx_dhcp_request_sel+0x1ac>)
 8010ca8:	f7fe fd9c 	bl	800f7e4 <mg_log>
}
 8010cac:	bf00      	nop
 8010cae:	3748      	adds	r7, #72	@ 0x48
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	0802e730 	.word	0x0802e730
 8010cb8:	080311e8 	.word	0x080311e8
 8010cbc:	0802d330 	.word	0x0802d330
 8010cc0:	08030ca0 	.word	0x08030ca0
 8010cc4:	2400025c 	.word	0x2400025c
 8010cc8:	0802e748 	.word	0x0802e748

08010ccc <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b08a      	sub	sp, #40	@ 0x28
 8010cd0:	af04      	add	r7, sp, #16
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	607a      	str	r2, [r7, #4]
 8010cd8:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8010cda:	4b10      	ldr	r3, [pc, #64]	@ (8010d1c <tx_dhcp_request_re+0x50>)
 8010cdc:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8010cde:	2301      	movs	r3, #1
 8010ce0:	9302      	str	r3, [sp, #8]
 8010ce2:	2304      	movs	r3, #4
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	f107 0314 	add.w	r3, r7, #20
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	68b9      	ldr	r1, [r7, #8]
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f7ff fe82 	bl	80109fc <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8010cf8:	4b09      	ldr	r3, [pc, #36]	@ (8010d20 <tx_dhcp_request_re+0x54>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	dd09      	ble.n	8010d14 <tx_dhcp_request_re+0x48>
 8010d00:	4b08      	ldr	r3, [pc, #32]	@ (8010d24 <tx_dhcp_request_re+0x58>)
 8010d02:	f241 1296 	movw	r2, #4502	@ 0x1196
 8010d06:	4908      	ldr	r1, [pc, #32]	@ (8010d28 <tx_dhcp_request_re+0x5c>)
 8010d08:	2003      	movs	r0, #3
 8010d0a:	f7fe fd1b 	bl	800f744 <mg_log_prefix>
 8010d0e:	4807      	ldr	r0, [pc, #28]	@ (8010d2c <tx_dhcp_request_re+0x60>)
 8010d10:	f7fe fd68 	bl	800f7e4 <mg_log>
}
 8010d14:	bf00      	nop
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	ff030135 	.word	0xff030135
 8010d20:	2400025c 	.word	0x2400025c
 8010d24:	080311fc 	.word	0x080311fc
 8010d28:	0802d330 	.word	0x0802d330
 8010d2c:	0802e748 	.word	0x0802e748

08010d30 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b088      	sub	sp, #32
 8010d34:	af04      	add	r7, sp, #16
 8010d36:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 8010d38:	4a14      	ldr	r2, [pc, #80]	@ (8010d8c <tx_dhcp_discover+0x5c>)
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d42:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8010d46:	2300      	movs	r3, #0
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	2308      	movs	r3, #8
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	f107 0308 	add.w	r3, r7, #8
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	f04f 33ff 	mov.w	r3, #4294967295
 8010d58:	2200      	movs	r2, #0
 8010d5a:	490d      	ldr	r1, [pc, #52]	@ (8010d90 <tx_dhcp_discover+0x60>)
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff fe4d 	bl	80109fc <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8010d62:	4b0c      	ldr	r3, [pc, #48]	@ (8010d94 <tx_dhcp_discover+0x64>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b02      	cmp	r3, #2
 8010d68:	dd0c      	ble.n	8010d84 <tx_dhcp_discover+0x54>
 8010d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d98 <tx_dhcp_discover+0x68>)
 8010d6c:	f44f 528d 	mov.w	r2, #4512	@ 0x11a0
 8010d70:	490a      	ldr	r1, [pc, #40]	@ (8010d9c <tx_dhcp_discover+0x6c>)
 8010d72:	2003      	movs	r0, #3
 8010d74:	f7fe fce6 	bl	800f744 <mg_log_prefix>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4908      	ldr	r1, [pc, #32]	@ (8010da0 <tx_dhcp_discover+0x70>)
 8010d7e:	4809      	ldr	r0, [pc, #36]	@ (8010da4 <tx_dhcp_discover+0x74>)
 8010d80:	f7fe fd30 	bl	800f7e4 <mg_log>
}
 8010d84:	bf00      	nop
 8010d86:	3710      	adds	r7, #16
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	0802e778 	.word	0x0802e778
 8010d90:	08030ca0 	.word	0x08030ca0
 8010d94:	2400025c 	.word	0x2400025c
 8010d98:	08031210 	.word	0x08031210
 8010d9c:	0802d330 	.word	0x0802d330
 8010da0:	08014239 	.word	0x08014239
 8010da4:	0802e758 	.word	0x0802e758

08010da8 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b086      	sub	sp, #24
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	4613      	mov	r3, r2
 8010db4:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8010db6:	2300      	movs	r3, #0
 8010db8:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	617b      	str	r3, [r7, #20]
 8010dc0:	e057      	b.n	8010e72 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010dc8:	f003 0310 	and.w	r3, r3, #16
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d010      	beq.n	8010df4 <getpeer+0x4c>
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	699b      	ldr	r3, [r3, #24]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00c      	beq.n	8010df4 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	699b      	ldr	r3, [r3, #24]
 8010dde:	f103 000e 	add.w	r0, r3, #14
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	331c      	adds	r3, #28
 8010de6:	2204      	movs	r2, #4
 8010de8:	4619      	mov	r1, r3
 8010dea:	f017 fcaf 	bl	802874c <memcmp>
 8010dee:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d042      	beq.n	8010e7a <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010dfa:	f003 0301 	and.w	r3, r3, #1
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00b      	beq.n	8010e1c <getpeer+0x74>
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d007      	beq.n	8010e1c <getpeer+0x74>
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	8b1a      	ldrh	r2, [r3, #24]
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e14:	885b      	ldrh	r3, [r3, #2]
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d030      	beq.n	8010e7e <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010e22:	f003 0301 	and.w	r3, r3, #1
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d11f      	bne.n	8010e6c <getpeer+0xc4>
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d01b      	beq.n	8010e6c <getpeer+0xc4>
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	8b1a      	ldrh	r2, [r3, #24]
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e3c:	885b      	ldrh	r3, [r3, #2]
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d113      	bne.n	8010e6c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010e4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010e4e:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8010e50:	79fa      	ldrb	r2, [r7, #7]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d10a      	bne.n	8010e6c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d111      	bne.n	8010e80 <getpeer+0xd8>
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d009      	beq.n	8010e80 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	617b      	str	r3, [r7, #20]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1a4      	bne.n	8010dc2 <getpeer+0x1a>
 8010e78:	e002      	b.n	8010e80 <getpeer+0xd8>
      break;
 8010e7a:	bf00      	nop
 8010e7c:	e000      	b.n	8010e80 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8010e7e:	bf00      	nop
      break;
  }
  return c;
 8010e80:	697b      	ldr	r3, [r7, #20]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3718      	adds	r7, #24
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
	...

08010e8c <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010e8c:	b5b0      	push	{r4, r5, r7, lr}
 8010e8e:	b088      	sub	sp, #32
 8010e90:	af02      	add	r7, sp, #8
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	88db      	ldrh	r3, [r3, #6]
 8010e9c:	b29c      	uxth	r4, r3
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	f011 feea 	bl	8022c78 <mg_ntohs>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	429c      	cmp	r4, r3
 8010ea8:	d176      	bne.n	8010f98 <rx_arp+0x10c>
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	699b      	ldr	r3, [r3, #24]
 8010eae:	699a      	ldr	r2, [r3, #24]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	689b      	ldr	r3, [r3, #8]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d16f      	bne.n	8010f98 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	695b      	ldr	r3, [r3, #20]
 8010ebc:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	330e      	adds	r3, #14
 8010ec2:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8010ec4:	6978      	ldr	r0, [r7, #20]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	691b      	ldr	r3, [r3, #16]
 8010eca:	3306      	adds	r3, #6
 8010ecc:	2206      	movs	r2, #6
 8010ece:	4619      	mov	r1, r3
 8010ed0:	f018 fe95 	bl	8029bfe <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	3306      	adds	r3, #6
 8010ed8:	6879      	ldr	r1, [r7, #4]
 8010eda:	2206      	movs	r2, #6
 8010edc:	4618      	mov	r0, r3
 8010ede:	f018 fe8e 	bl	8029bfe <memcpy>
    eth->type = mg_htons(0x806);
 8010ee2:	f640 0006 	movw	r0, #2054	@ 0x806
 8010ee6:	f011 fec7 	bl	8022c78 <mg_ntohs>
 8010eea:	4603      	mov	r3, r0
 8010eec:	461a      	mov	r2, r3
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	699a      	ldr	r2, [r3, #24]
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	6814      	ldr	r4, [r2, #0]
 8010efa:	6850      	ldr	r0, [r2, #4]
 8010efc:	6891      	ldr	r1, [r2, #8]
 8010efe:	68d5      	ldr	r5, [r2, #12]
 8010f00:	601c      	str	r4, [r3, #0]
 8010f02:	6058      	str	r0, [r3, #4]
 8010f04:	6099      	str	r1, [r3, #8]
 8010f06:	60dd      	str	r5, [r3, #12]
 8010f08:	6914      	ldr	r4, [r2, #16]
 8010f0a:	6950      	ldr	r0, [r2, #20]
 8010f0c:	6991      	ldr	r1, [r2, #24]
 8010f0e:	611c      	str	r4, [r3, #16]
 8010f10:	6158      	str	r0, [r3, #20]
 8010f12:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8010f14:	2002      	movs	r0, #2
 8010f16:	f011 feaf 	bl	8022c78 <mg_ntohs>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	f103 0012 	add.w	r0, r3, #18
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	699b      	ldr	r3, [r3, #24]
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	2206      	movs	r2, #6
 8010f30:	4619      	mov	r1, r3
 8010f32:	f018 fe64 	bl	8029bfe <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	3308      	adds	r3, #8
 8010f3a:	6879      	ldr	r1, [r7, #4]
 8010f3c:	2206      	movs	r2, #6
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f018 fe5d 	bl	8029bfe <memcpy>
    arp->tpa = pkt->arp->spa;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	699b      	ldr	r3, [r3, #24]
 8010f48:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	689a      	ldr	r2, [r3, #8]
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8010f5a:	4b4e      	ldr	r3, [pc, #312]	@ (8011094 <rx_arp+0x208>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2b02      	cmp	r3, #2
 8010f60:	dd10      	ble.n	8010f84 <rx_arp+0xf8>
 8010f62:	4b4d      	ldr	r3, [pc, #308]	@ (8011098 <rx_arp+0x20c>)
 8010f64:	f241 12c4 	movw	r2, #4548	@ 0x11c4
 8010f68:	494c      	ldr	r1, [pc, #304]	@ (801109c <rx_arp+0x210>)
 8010f6a:	2003      	movs	r0, #3
 8010f6c:	f7fe fbea 	bl	800f744 <mg_log_prefix>
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	f103 0218 	add.w	r2, r3, #24
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	9300      	str	r3, [sp, #0]
 8010f7a:	4b49      	ldr	r3, [pc, #292]	@ (80110a0 <rx_arp+0x214>)
 8010f7c:	4949      	ldr	r1, [pc, #292]	@ (80110a4 <rx_arp+0x218>)
 8010f7e:	484a      	ldr	r0, [pc, #296]	@ (80110a8 <rx_arp+0x21c>)
 8010f80:	f7fe fc30 	bl	800f7e4 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	f103 021c 	add.w	r2, r3, #28
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7ff fb45 	bl	8010620 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8010f96:	e079      	b.n	801108c <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	699b      	ldr	r3, [r3, #24]
 8010f9c:	88db      	ldrh	r3, [r3, #6]
 8010f9e:	b29c      	uxth	r4, r3
 8010fa0:	2002      	movs	r0, #2
 8010fa2:	f011 fe69 	bl	8022c78 <mg_ntohs>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	429c      	cmp	r4, r3
 8010faa:	d16f      	bne.n	801108c <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	699b      	ldr	r3, [r3, #24]
 8010fb0:	3312      	adds	r3, #18
 8010fb2:	6879      	ldr	r1, [r7, #4]
 8010fb4:	2206      	movs	r2, #6
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f017 fbc8 	bl	802874c <memcmp>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d163      	bne.n	801108a <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	691b      	ldr	r3, [r3, #16]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d116      	bne.n	8011000 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	699b      	ldr	r3, [r3, #24]
 8010fdc:	3308      	adds	r3, #8
 8010fde:	2206      	movs	r2, #6
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	f018 fe0c 	bl	8029bfe <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010fec:	2b03      	cmp	r3, #3
 8010fee:	d14d      	bne.n	801108c <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2204      	movs	r2, #4
 8010ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff fb95 	bl	8010728 <onstatechange>
 8010ffe:	e045      	b.n	801108c <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011004:	2200      	movs	r2, #0
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	4618      	mov	r0, r3
 801100a:	f7ff fecd 	bl	8010da8 <getpeer>
 801100e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d03a      	beq.n	801108c <rx_arp+0x200>
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801101c:	f003 0310 	and.w	r3, r3, #16
 8011020:	b2db      	uxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	d032      	beq.n	801108c <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	33b0      	adds	r3, #176	@ 0xb0
 801102a:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	f103 001a 	add.w	r0, r3, #26
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	3308      	adds	r3, #8
 8011038:	2206      	movs	r2, #6
 801103a:	4619      	mov	r1, r3
 801103c:	f018 fddf 	bl	8029bfe <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8011040:	4b14      	ldr	r3, [pc, #80]	@ (8011094 <rx_arp+0x208>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b02      	cmp	r3, #2
 8011046:	dd15      	ble.n	8011074 <rx_arp+0x1e8>
 8011048:	4b13      	ldr	r3, [pc, #76]	@ (8011098 <rx_arp+0x20c>)
 801104a:	f241 12d5 	movw	r2, #4565	@ 0x11d5
 801104e:	4913      	ldr	r1, [pc, #76]	@ (801109c <rx_arp+0x210>)
 8011050:	2003      	movs	r0, #3
 8011052:	f7fe fb77 	bl	800f744 <mg_log_prefix>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f103 021c 	add.w	r2, r3, #28
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	331a      	adds	r3, #26
 8011064:	9301      	str	r3, [sp, #4]
 8011066:	4b0e      	ldr	r3, [pc, #56]	@ (80110a0 <rx_arp+0x214>)
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	4613      	mov	r3, r2
 801106c:	4a0d      	ldr	r2, [pc, #52]	@ (80110a4 <rx_arp+0x218>)
 801106e:	480f      	ldr	r0, [pc, #60]	@ (80110ac <rx_arp+0x220>)
 8011070:	f7fe fbb8 	bl	800f7e4 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801107a:	f023 0310 	bic.w	r3, r3, #16
 801107e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f002 fa69 	bl	801355a <mac_resolved>
 8011088:	e000      	b.n	801108c <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801108a:	bf00      	nop
      }
    }
  }
}
 801108c:	3718      	adds	r7, #24
 801108e:	46bd      	mov	sp, r7
 8011090:	bdb0      	pop	{r4, r5, r7, pc}
 8011092:	bf00      	nop
 8011094:	2400025c 	.word	0x2400025c
 8011098:	08031224 	.word	0x08031224
 801109c:	0802d330 	.word	0x0802d330
 80110a0:	08014239 	.word	0x08014239
 80110a4:	08014175 	.word	0x08014175
 80110a8:	0802e780 	.word	0x0802e780
 80110ac:	0802e798 	.word	0x0802e798

080110b0 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b08a      	sub	sp, #40	@ 0x28
 80110b4:	af02      	add	r7, sp, #8
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	2b08      	cmp	r3, #8
 80110c2:	d14d      	bne.n	8011160 <rx_icmp+0xb0>
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	69db      	ldr	r3, [r3, #28]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d049      	beq.n	8011160 <rx_icmp+0xb0>
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	69db      	ldr	r3, [r3, #28]
 80110d0:	691a      	ldr	r2, [r3, #16]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d142      	bne.n	8011160 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 80110da:	2326      	movs	r3, #38	@ 0x26
 80110dc:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	699a      	ldr	r2, [r3, #24]
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	617b      	str	r3, [r7, #20]
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 80110ee:	69fa      	ldr	r2, [r7, #28]
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d901      	bls.n	80110fa <rx_icmp+0x4a>
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	691b      	ldr	r3, [r3, #16]
 80110fe:	1d99      	adds	r1, r3, #6
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6898      	ldr	r0, [r3, #8]
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	69db      	ldr	r3, [r3, #28]
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	69fa      	ldr	r2, [r7, #28]
 801110c:	3204      	adds	r2, #4
 801110e:	9201      	str	r2, [sp, #4]
 8011110:	9300      	str	r3, [sp, #0]
 8011112:	4603      	mov	r3, r0
 8011114:	2201      	movs	r2, #1
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff fbb0 	bl	801087c <tx_ip>
 801111c:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	3314      	adds	r3, #20
 8011122:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8011124:	2204      	movs	r2, #4
 8011126:	2100      	movs	r1, #0
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f017 fb39 	bl	80287a0 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	1d18      	adds	r0, r3, #4
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	69fa      	ldr	r2, [r7, #28]
 8011138:	4619      	mov	r1, r3
 801113a:	f018 fd60 	bl	8029bfe <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	3304      	adds	r3, #4
 8011142:	4619      	mov	r1, r3
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f7ff f9f3 	bl	8010530 <ipcsum>
 801114a:	4603      	mov	r3, r0
 801114c:	461a      	mov	r2, r3
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 8011152:	69ba      	ldr	r2, [r7, #24]
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	4413      	add	r3, r2
 8011158:	4619      	mov	r1, r3
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f7ff fa60 	bl	8010620 <ether_output>
  }
}
 8011160:	bf00      	nop
 8011162:	3720      	adds	r7, #32
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801116c:	b090      	sub	sp, #64	@ 0x40
 801116e:	af00      	add	r7, sp, #0
 8011170:	60f8      	str	r0, [r7, #12]
 8011172:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8011174:	2300      	movs	r3, #0
 8011176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011178:	2300      	movs	r3, #0
 801117a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801117c:	2300      	movs	r3, #0
 801117e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011180:	2300      	movs	r3, #0
 8011182:	623b      	str	r3, [r7, #32]
 8011184:	2300      	movs	r3, #0
 8011186:	61fb      	str	r3, [r7, #28]
 8011188:	2300      	movs	r3, #0
 801118a:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 801118c:	2300      	movs	r3, #0
 801118e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111a0:	33f0      	adds	r3, #240	@ 0xf0
 80111a2:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	4413      	add	r3, r2
 80111ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111b4:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 80111b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111ba:	429a      	cmp	r2, r3
 80111bc:	f0c0 81ac 	bcc.w	8011518 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111c4:	1d18      	adds	r0, r3, #4
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	3302      	adds	r3, #2
 80111ca:	2204      	movs	r2, #4
 80111cc:	4619      	mov	r1, r3
 80111ce:	f017 fabd 	bl	802874c <memcmp>
 80111d2:	4603      	mov	r3, r0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f040 81a1 	bne.w	801151c <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80111da:	e08a      	b.n	80112f2 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80111dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d10e      	bne.n	8011202 <rx_dhcp_client+0x9a>
 80111e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e6:	3301      	adds	r3, #1
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b04      	cmp	r3, #4
 80111ec:	d109      	bne.n	8011202 <rx_dhcp_client+0x9a>
 80111ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111f0:	3306      	adds	r3, #6
 80111f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d904      	bls.n	8011202 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 80111f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111fa:	3302      	adds	r3, #2
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011200:	e070      	b.n	80112e4 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8011202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b03      	cmp	r3, #3
 8011208:	d112      	bne.n	8011230 <rx_dhcp_client+0xc8>
 801120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801120c:	3301      	adds	r3, #1
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	2b04      	cmp	r3, #4
 8011212:	d10d      	bne.n	8011230 <rx_dhcp_client+0xc8>
 8011214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011216:	3306      	adds	r3, #6
 8011218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801121a:	429a      	cmp	r2, r3
 801121c:	d908      	bls.n	8011230 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011220:	3302      	adds	r3, #2
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801122e:	e059      	b.n	80112e4 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	7fdb      	ldrb	r3, [r3, #31]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d012      	beq.n	801125e <rx_dhcp_client+0xf6>
 8011238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	2b06      	cmp	r3, #6
 801123e:	d10e      	bne.n	801125e <rx_dhcp_client+0xf6>
 8011240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011242:	3301      	adds	r3, #1
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	2b04      	cmp	r3, #4
 8011248:	d109      	bne.n	801125e <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 801124a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801124c:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801124e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011250:	429a      	cmp	r2, r3
 8011252:	d904      	bls.n	801125e <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 8011254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011256:	3302      	adds	r3, #2
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	61fb      	str	r3, [r7, #28]
 801125c:	e042      	b.n	80112e4 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d012      	beq.n	801128e <rx_dhcp_client+0x126>
 8011268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	2b2a      	cmp	r3, #42	@ 0x2a
 801126e:	d10e      	bne.n	801128e <rx_dhcp_client+0x126>
 8011270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011272:	3301      	adds	r3, #1
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	2b04      	cmp	r3, #4
 8011278:	d109      	bne.n	801128e <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 801127a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801127c:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801127e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011280:	429a      	cmp	r2, r3
 8011282:	d904      	bls.n	801128e <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8011284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011286:	3302      	adds	r3, #2
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	61bb      	str	r3, [r7, #24]
 801128c:	e02a      	b.n	80112e4 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 801128e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	2b33      	cmp	r3, #51	@ 0x33
 8011294:	d114      	bne.n	80112c0 <rx_dhcp_client+0x158>
 8011296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011298:	3301      	adds	r3, #1
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	2b04      	cmp	r3, #4
 801129e:	d10f      	bne.n	80112c0 <rx_dhcp_client+0x158>
 80112a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112a2:	3306      	adds	r3, #6
 80112a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d90a      	bls.n	80112c0 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 80112aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ac:	3302      	adds	r3, #2
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f011 fcf6 	bl	8022ca6 <mg_ntohl>
 80112ba:	4603      	mov	r3, r0
 80112bc:	623b      	str	r3, [r7, #32]
 80112be:	e011      	b.n	80112e4 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80112c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b35      	cmp	r3, #53	@ 0x35
 80112c6:	d10d      	bne.n	80112e4 <rx_dhcp_client+0x17c>
 80112c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ca:	3301      	adds	r3, #1
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d108      	bne.n	80112e4 <rx_dhcp_client+0x17c>
 80112d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112d4:	3306      	adds	r3, #6
 80112d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112d8:	429a      	cmp	r2, r3
 80112da:	d903      	bls.n	80112e4 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 80112dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112de:	789b      	ldrb	r3, [r3, #2]
 80112e0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 80112e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e6:	3301      	adds	r3, #1
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	3302      	adds	r3, #2
 80112ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112ee:	4413      	add	r3, r2
 80112f0:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80112f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112f4:	3301      	adds	r3, #1
 80112f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d904      	bls.n	8011306 <rx_dhcp_client+0x19e>
 80112fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	2bff      	cmp	r3, #255	@ 0xff
 8011302:	f47f af6b 	bne.w	80111dc <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8011306:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801130a:	2b06      	cmp	r3, #6
 801130c:	d10c      	bne.n	8011328 <rx_dhcp_client+0x1c0>
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011314:	429a      	cmp	r2, r3
 8011316:	d107      	bne.n	8011328 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2200      	movs	r2, #0
 8011324:	609a      	str	r2, [r3, #8]
 8011326:	e0ec      	b.n	8011502 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8011328:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801132c:	2b02      	cmp	r3, #2
 801132e:	d123      	bne.n	8011378 <rx_dhcp_client+0x210>
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011336:	2b01      	cmp	r3, #1
 8011338:	d11e      	bne.n	8011378 <rx_dhcp_client+0x210>
 801133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801133c:	2b00      	cmp	r3, #0
 801133e:	d01b      	beq.n	8011378 <rx_dhcp_client+0x210>
 8011340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011342:	2b00      	cmp	r3, #0
 8011344:	d018      	beq.n	8011378 <rx_dhcp_client+0x210>
 8011346:	6a3b      	ldr	r3, [r7, #32]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d015      	beq.n	8011378 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011350:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 8011352:	2b00      	cmp	r3, #0
 8011354:	d003      	beq.n	801135e <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 801135a:	695b      	ldr	r3, [r3, #20]
 801135c:	e002      	b.n	8011364 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	461a      	mov	r2, r3
 8011366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011368:	68f8      	ldr	r0, [r7, #12]
 801136a:	f7ff fbd7 	bl	8010b1c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2202      	movs	r2, #2
 8011372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8011376:	e0c4      	b.n	8011502 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 8011378:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801137c:	2b05      	cmp	r3, #5
 801137e:	f040 80c0 	bne.w	8011502 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011388:	2b02      	cmp	r3, #2
 801138a:	f040 8081 	bne.w	8011490 <rx_dhcp_client+0x328>
 801138e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011390:	2b00      	cmp	r3, #0
 8011392:	d07d      	beq.n	8011490 <rx_dhcp_client+0x328>
 8011394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011396:	2b00      	cmp	r3, #0
 8011398:	d07a      	beq.n	8011490 <rx_dhcp_client+0x328>
 801139a:	6a3b      	ldr	r3, [r7, #32]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d077      	beq.n	8011490 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80113a6:	6a39      	ldr	r1, [r7, #32]
 80113a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ac:	fb00 f101 	mul.w	r1, r0, r1
 80113b0:	2000      	movs	r0, #0
 80113b2:	4688      	mov	r8, r1
 80113b4:	4681      	mov	r9, r0
 80113b6:	eb12 0108 	adds.w	r1, r2, r8
 80113ba:	6039      	str	r1, [r7, #0]
 80113bc:	eb43 0309 	adc.w	r3, r3, r9
 80113c0:	607b      	str	r3, [r7, #4]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80113c8:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80113cc:	4b56      	ldr	r3, [pc, #344]	@ (8011528 <rx_dhcp_client+0x3c0>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	dd16      	ble.n	8011402 <rx_dhcp_client+0x29a>
 80113d4:	4b55      	ldr	r3, [pc, #340]	@ (801152c <rx_dhcp_client+0x3c4>)
 80113d6:	f241 2216 	movw	r2, #4630	@ 0x1216
 80113da:	4955      	ldr	r1, [pc, #340]	@ (8011530 <rx_dhcp_client+0x3c8>)
 80113dc:	2002      	movs	r0, #2
 80113de:	f7fe f9b1 	bl	800f744 <mg_log_prefix>
 80113e2:	6a3c      	ldr	r4, [r7, #32]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80113ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80113ee:	f04f 0300 	mov.w	r3, #0
 80113f2:	f7ef fa01 	bl	80007f8 <__aeabi_uldivmod>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	4621      	mov	r1, r4
 80113fc:	484d      	ldr	r0, [pc, #308]	@ (8011534 <rx_dhcp_client+0x3cc>)
 80113fe:	f7fe f9f1 	bl	800f7e4 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	3306      	adds	r3, #6
 801140e:	2206      	movs	r2, #6
 8011410:	4619      	mov	r1, r3
 8011412:	f018 fbf4 	bl	8029bfe <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801141a:	609a      	str	r2, [r3, #8]
 801141c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	611a      	str	r2, [r3, #16]
 8011422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2203      	movs	r2, #3
 801142c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8011430:	f107 0310 	add.w	r3, r7, #16
 8011434:	2108      	movs	r1, #8
 8011436:	4618      	mov	r0, r3
 8011438:	f7ef fbac 	bl	8000b94 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801143c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011440:	4614      	mov	r4, r2
 8011442:	f7ef fbd5 	bl	8000bf0 <mg_millis>
 8011446:	4602      	mov	r2, r0
 8011448:	460b      	mov	r3, r1
 801144a:	4613      	mov	r3, r2
 801144c:	4423      	add	r3, r4
 801144e:	4618      	mov	r0, r3
 8011450:	f015 fab6 	bl	80269c0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	7fdb      	ldrb	r3, [r3, #31]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d009      	beq.n	8011470 <rx_dhcp_client+0x308>
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d006      	beq.n	8011470 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 8011462:	f107 031c 	add.w	r3, r7, #28
 8011466:	461a      	mov	r2, r3
 8011468:	2101      	movs	r1, #1
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f7fe ffe8 	bl	8010440 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d042      	beq.n	8011500 <rx_dhcp_client+0x398>
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d03f      	beq.n	8011500 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8011480:	f107 0318 	add.w	r3, r7, #24
 8011484:	461a      	mov	r2, r3
 8011486:	2102      	movs	r1, #2
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	f7fe ffd9 	bl	8010440 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801148e:	e037      	b.n	8011500 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011496:	2b04      	cmp	r3, #4
 8011498:	d133      	bne.n	8011502 <rx_dhcp_client+0x39a>
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d12e      	bne.n	8011502 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80114aa:	6a39      	ldr	r1, [r7, #32]
 80114ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80114b0:	fb00 f101 	mul.w	r1, r0, r1
 80114b4:	2000      	movs	r0, #0
 80114b6:	460c      	mov	r4, r1
 80114b8:	4605      	mov	r5, r0
 80114ba:	eb12 0a04 	adds.w	sl, r2, r4
 80114be:	eb43 0b05 	adc.w	fp, r3, r5
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80114c8:	4b17      	ldr	r3, [pc, #92]	@ (8011528 <rx_dhcp_client+0x3c0>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	dd18      	ble.n	8011502 <rx_dhcp_client+0x39a>
 80114d0:	4b16      	ldr	r3, [pc, #88]	@ (801152c <rx_dhcp_client+0x3c4>)
 80114d2:	f241 2224 	movw	r2, #4644	@ 0x1224
 80114d6:	4916      	ldr	r1, [pc, #88]	@ (8011530 <rx_dhcp_client+0x3c8>)
 80114d8:	2002      	movs	r0, #2
 80114da:	f7fe f933 	bl	800f744 <mg_log_prefix>
 80114de:	6a3c      	ldr	r4, [r7, #32]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80114e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80114ea:	f04f 0300 	mov.w	r3, #0
 80114ee:	f7ef f983 	bl	80007f8 <__aeabi_uldivmod>
 80114f2:	4602      	mov	r2, r0
 80114f4:	460b      	mov	r3, r1
 80114f6:	4621      	mov	r1, r4
 80114f8:	480e      	ldr	r0, [pc, #56]	@ (8011534 <rx_dhcp_client+0x3cc>)
 80114fa:	f7fe f973 	bl	800f7e4 <mg_log>
 80114fe:	e000      	b.n	8011502 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8011500:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011508:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801150c:	429a      	cmp	r2, r3
 801150e:	d006      	beq.n	801151e <rx_dhcp_client+0x3b6>
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7ff f909 	bl	8010728 <onstatechange>
 8011516:	e002      	b.n	801151e <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8011518:	bf00      	nop
 801151a:	e000      	b.n	801151e <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801151c:	bf00      	nop
}
 801151e:	3740      	adds	r7, #64	@ 0x40
 8011520:	46bd      	mov	sp, r7
 8011522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011526:	bf00      	nop
 8011528:	2400025c 	.word	0x2400025c
 801152c:	0803122c 	.word	0x0803122c
 8011530:	0802d330 	.word	0x0802d330
 8011534:	0802e7b4 	.word	0x0802e7b4

08011538 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153c:	b0d8      	sub	sp, #352	@ 0x160
 801153e:	af04      	add	r7, sp, #16
 8011540:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011544:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011548:	6018      	str	r0, [r3, #0]
 801154a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801154e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011552:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8011554:	2300      	movs	r3, #0
 8011556:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 801155a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801155e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011566:	33f0      	adds	r3, #240	@ 0xf0
 8011568:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801156c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011570:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801157c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	4413      	add	r3, r2
 8011586:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801158a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801158e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011596:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 801159a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 801159e:	429a      	cmp	r2, r3
 80115a0:	f0c0 81b0 	bcc.w	8011904 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 80115a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80115a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80115ac:	4ad8      	ldr	r2, [pc, #864]	@ (8011910 <rx_dhcp_server+0x3d8>)
 80115ae:	4618      	mov	r0, r3
 80115b0:	4611      	mov	r1, r2
 80115b2:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 80115b6:	461a      	mov	r2, r3
 80115b8:	f018 fb21 	bl	8029bfe <memcpy>
  res.yiaddr = ifp->ip;
 80115bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80115c0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	689a      	ldr	r2, [r3, #8]
 80115c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80115cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80115d0:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80115d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80115d6:	3310      	adds	r3, #16
 80115d8:	3303      	adds	r3, #3
 80115da:	781a      	ldrb	r2, [r3, #0]
 80115dc:	3201      	adds	r2, #1
 80115de:	b2d2      	uxtb	r2, r2
 80115e0:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80115e2:	e020      	b.n	8011626 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 80115e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	2b35      	cmp	r3, #53	@ 0x35
 80115ec:	d111      	bne.n	8011612 <rx_dhcp_server+0xda>
 80115ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80115f2:	3301      	adds	r3, #1
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d10b      	bne.n	8011612 <rx_dhcp_server+0xda>
 80115fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80115fe:	3302      	adds	r3, #2
 8011600:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8011604:	429a      	cmp	r2, r3
 8011606:	d904      	bls.n	8011612 <rx_dhcp_server+0xda>
      op = p[2];
 8011608:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801160c:	789b      	ldrb	r3, [r3, #2]
 801160e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 8011612:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011616:	3301      	adds	r3, #1
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	3302      	adds	r3, #2
 801161c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011620:	4413      	add	r3, r2
 8011622:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8011626:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801162a:	3301      	adds	r3, #1
 801162c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8011630:	429a      	cmp	r2, r3
 8011632:	d904      	bls.n	801163e <rx_dhcp_server+0x106>
 8011634:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	2bff      	cmp	r3, #255	@ 0xff
 801163c:	d1d2      	bne.n	80115e4 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801163e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8011642:	2b01      	cmp	r3, #1
 8011644:	d004      	beq.n	8011650 <rx_dhcp_server+0x118>
 8011646:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 801164a:	2b03      	cmp	r3, #3
 801164c:	f040 815b 	bne.w	8011906 <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8011650:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8011654:	2b01      	cmp	r3, #1
 8011656:	d101      	bne.n	801165c <rx_dhcp_server+0x124>
 8011658:	2302      	movs	r3, #2
 801165a:	e000      	b.n	801165e <rx_dhcp_server+0x126>
 801165c:	2305      	movs	r3, #5
 801165e:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 8011662:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011666:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801166a:	2235      	movs	r2, #53	@ 0x35
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011672:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011676:	2201      	movs	r2, #1
 8011678:	705a      	strb	r2, [r3, #1]
 801167a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801167e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011682:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 8011686:	709a      	strb	r2, [r3, #2]
 8011688:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801168c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011690:	2201      	movs	r2, #1
 8011692:	70da      	strb	r2, [r3, #3]
 8011694:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011698:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801169c:	2204      	movs	r2, #4
 801169e:	711a      	strb	r2, [r3, #4]
 80116a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116a8:	2200      	movs	r2, #0
 80116aa:	715a      	strb	r2, [r3, #5]
 80116ac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116b4:	2200      	movs	r2, #0
 80116b6:	719a      	strb	r2, [r3, #6]
 80116b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116c0:	2200      	movs	r2, #0
 80116c2:	71da      	strb	r2, [r3, #7]
 80116c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116cc:	2200      	movs	r2, #0
 80116ce:	721a      	strb	r2, [r3, #8]
 80116d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116d4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116d8:	2236      	movs	r2, #54	@ 0x36
 80116da:	725a      	strb	r2, [r3, #9]
 80116dc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116e4:	2204      	movs	r2, #4
 80116e6:	729a      	strb	r2, [r3, #10]
 80116e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116f0:	2200      	movs	r2, #0
 80116f2:	72da      	strb	r2, [r3, #11]
 80116f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80116f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80116fc:	2200      	movs	r2, #0
 80116fe:	731a      	strb	r2, [r3, #12]
 8011700:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011704:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011708:	2200      	movs	r2, #0
 801170a:	735a      	strb	r2, [r3, #13]
 801170c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011710:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011714:	2200      	movs	r2, #0
 8011716:	739a      	strb	r2, [r3, #14]
 8011718:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801171c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011720:	220c      	movs	r2, #12
 8011722:	73da      	strb	r2, [r3, #15]
 8011724:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011728:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801172c:	2203      	movs	r2, #3
 801172e:	741a      	strb	r2, [r3, #16]
 8011730:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011734:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011738:	226d      	movs	r2, #109	@ 0x6d
 801173a:	745a      	strb	r2, [r3, #17]
 801173c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011740:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011744:	2269      	movs	r2, #105	@ 0x69
 8011746:	749a      	strb	r2, [r3, #18]
 8011748:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801174c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011750:	2270      	movs	r2, #112	@ 0x70
 8011752:	74da      	strb	r2, [r3, #19]
 8011754:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011758:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801175c:	2233      	movs	r2, #51	@ 0x33
 801175e:	751a      	strb	r2, [r3, #20]
 8011760:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011764:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011768:	2204      	movs	r2, #4
 801176a:	755a      	strb	r2, [r3, #21]
 801176c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011770:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011774:	22ff      	movs	r2, #255	@ 0xff
 8011776:	759a      	strb	r2, [r3, #22]
 8011778:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801177c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011780:	22ff      	movs	r2, #255	@ 0xff
 8011782:	75da      	strb	r2, [r3, #23]
 8011784:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011788:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801178c:	22ff      	movs	r2, #255	@ 0xff
 801178e:	761a      	strb	r2, [r3, #24]
 8011790:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011794:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011798:	22ff      	movs	r2, #255	@ 0xff
 801179a:	765a      	strb	r2, [r3, #25]
 801179c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80117a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80117a4:	22ff      	movs	r2, #255	@ 0xff
 80117a6:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80117a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80117ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117b4:	f103 011c 	add.w	r1, r3, #28
 80117b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80117bc:	331c      	adds	r3, #28
 80117be:	2206      	movs	r2, #6
 80117c0:	4618      	mov	r0, r3
 80117c2:	f018 fa1c 	bl	8029bfe <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80117c6:	f107 030c 	add.w	r3, r7, #12
 80117ca:	3305      	adds	r3, #5
 80117cc:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80117d0:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80117d4:	6812      	ldr	r2, [r2, #0]
 80117d6:	320c      	adds	r2, #12
 80117d8:	6812      	ldr	r2, [r2, #0]
 80117da:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 80117dc:	f107 030c 	add.w	r3, r7, #12
 80117e0:	330b      	adds	r3, #11
 80117e2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80117e6:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80117ea:	6812      	ldr	r2, [r2, #0]
 80117ec:	3208      	adds	r2, #8
 80117ee:	6812      	ldr	r2, [r2, #0]
 80117f0:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 80117f2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80117f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80117fa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80117fe:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8011802:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 8011806:	4615      	mov	r5, r2
 8011808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801180a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801180c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011810:	c403      	stmia	r4!, {r0, r1}
 8011812:	8022      	strh	r2, [r4, #0]
 8011814:	3402      	adds	r4, #2
 8011816:	0c13      	lsrs	r3, r2, #16
 8011818:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801181a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801181e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011826:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801182a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801182e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011832:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 8011836:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801183a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011842:	685a      	ldr	r2, [r3, #4]
 8011844:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011848:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801184c:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 801184e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011852:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	7f9b      	ldrb	r3, [r3, #30]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d01c      	beq.n	8011898 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 801185e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011862:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011866:	691a      	ldr	r2, [r3, #16]
 8011868:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801186c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8011874:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011878:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 8011882:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011886:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	3306      	adds	r3, #6
 8011890:	2206      	movs	r2, #6
 8011892:	4619      	mov	r1, r3
 8011894:	f018 f9b3 	bl	8029bfe <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8011898:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801189c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	691b      	ldr	r3, [r3, #16]
 80118a4:	1d9d      	adds	r5, r3, #6
 80118a6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80118aa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	689e      	ldr	r6, [r3, #8]
 80118b2:	2043      	movs	r0, #67	@ 0x43
 80118b4:	f011 f9e0 	bl	8022c78 <mg_ntohs>
 80118b8:	4603      	mov	r3, r0
 80118ba:	4698      	mov	r8, r3
 80118bc:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d005      	beq.n	80118d0 <rx_dhcp_server+0x398>
 80118c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80118c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80118cc:	691c      	ldr	r4, [r3, #16]
 80118ce:	e001      	b.n	80118d4 <rx_dhcp_server+0x39c>
 80118d0:	f04f 34ff 	mov.w	r4, #4294967295
 80118d4:	2044      	movs	r0, #68	@ 0x44
 80118d6:	f011 f9cf 	bl	8022c78 <mg_ntohs>
 80118da:	4603      	mov	r3, r0
 80118dc:	461a      	mov	r2, r3
 80118de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80118e2:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 80118e6:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 80118ea:	9303      	str	r3, [sp, #12]
 80118ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80118f0:	9302      	str	r3, [sp, #8]
 80118f2:	9201      	str	r2, [sp, #4]
 80118f4:	9400      	str	r4, [sp, #0]
 80118f6:	4643      	mov	r3, r8
 80118f8:	4632      	mov	r2, r6
 80118fa:	4629      	mov	r1, r5
 80118fc:	6800      	ldr	r0, [r0, #0]
 80118fe:	f7ff f814 	bl	801092a <tx_udp>
 8011902:	e000      	b.n	8011906 <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8011904:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8011906:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 801190a:	46bd      	mov	sp, r7
 801190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011910:	0802e7cc 	.word	0x0802e7cc

08011914 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011922:	2201      	movs	r2, #1
 8011924:	6839      	ldr	r1, [r7, #0]
 8011926:	4618      	mov	r0, r3
 8011928:	f7ff fa3e 	bl	8010da8 <getpeer>
 801192c:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d059      	beq.n	80119e8 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011938:	881b      	ldrh	r3, [r3, #0]
 801193a:	b29a      	uxth	r2, r3
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	331c      	adds	r3, #28
 8011944:	683a      	ldr	r2, [r7, #0]
 8011946:	69d2      	ldr	r2, [r2, #28]
 8011948:	320c      	adds	r2, #12
 801194a:	6812      	ldr	r2, [r2, #0]
 801194c:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	33b0      	adds	r3, #176	@ 0xb0
 8011952:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	f103 001a 	add.w	r0, r3, #26
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	3306      	adds	r3, #6
 8011960:	2206      	movs	r2, #6
 8011962:	4619      	mov	r1, r3
 8011964:	f018 f94b 	bl	8029bfe <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801196c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011970:	d304      	bcc.n	801197c <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 8011972:	491f      	ldr	r1, [pc, #124]	@ (80119f0 <rx_udp+0xdc>)
 8011974:	68f8      	ldr	r0, [r7, #12]
 8011976:	f7f7 ffef 	bl	8009958 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801197a:	e035      	b.n	80119e8 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011984:	1ad2      	subs	r2, r2, r3
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	429a      	cmp	r2, r3
 801198c:	d212      	bcs.n	80119b4 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	68db      	ldr	r3, [r3, #12]
 801199c:	4413      	add	r3, r2
 801199e:	4619      	mov	r1, r3
 80119a0:	f7fc fdda 	bl	800e558 <mg_iobuf_resize>
 80119a4:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d104      	bne.n	80119b4 <rx_udp+0xa0>
      mg_error(c, "oom");
 80119aa:	4912      	ldr	r1, [pc, #72]	@ (80119f4 <rx_udp+0xe0>)
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	f7f7 ffd3 	bl	8009958 <mg_error>
}
 80119b2:	e019      	b.n	80119e8 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119bc:	18d0      	adds	r0, r2, r3
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	6899      	ldr	r1, [r3, #8]
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	461a      	mov	r2, r3
 80119c8:	f018 f919 	bl	8029bfe <memcpy>
      c->recv.len += pkt->pay.len;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	441a      	add	r2, r3
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	330c      	adds	r3, #12
 80119de:	461a      	mov	r2, r3
 80119e0:	2107      	movs	r1, #7
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7f7 ff98 	bl	8009918 <mg_call>
}
 80119e8:	bf00      	nop
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	0802e8e8 	.word	0x0802e8e8
 80119f4:	0802e904 	.word	0x0802e904

080119f8 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 80119f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119fa:	b091      	sub	sp, #68	@ 0x44
 80119fc:	af06      	add	r7, sp, #24
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	607a      	str	r2, [r7, #4]
 8011a04:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                 // Send MSS, RFC-9293 3.7.1
 8011a06:	78fb      	ldrb	r3, [r7, #3]
 8011a08:	f003 0302 	and.w	r3, r3, #2
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d014      	beq.n	8011a3a <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);         // RFC-9293 3.2
 8011a10:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8011a14:	f011 f930 	bl	8022c78 <mg_ntohs>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons(ifp->mtu - 40);  // RFC-6691
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a22:	3b28      	subs	r3, #40	@ 0x28
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	4618      	mov	r0, r3
 8011a28:	f011 f926 	bl	8022c78 <mg_ntohs>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 8011a30:	f107 0314 	add.w	r3, r7, #20
 8011a34:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 8011a36:	2304      	movs	r3, #4
 8011a38:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	689a      	ldr	r2, [r3, #8]
 8011a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a40:	3314      	adds	r3, #20
 8011a42:	9301      	str	r3, [sp, #4]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	2206      	movs	r2, #6
 8011a4c:	68b9      	ldr	r1, [r7, #8]
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f7fe ff14 	bl	801087c <tx_ip>
 8011a54:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 8011a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a58:	3314      	adds	r3, #20
 8011a5a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8011a5c:	2214      	movs	r2, #20
 8011a5e:	2100      	movs	r1, #0
 8011a60:	6a38      	ldr	r0, [r7, #32]
 8011a62:	f016 fe9d 	bl	80287a0 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8011a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d009      	beq.n	8011a80 <tx_tcp+0x88>
 8011a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d006      	beq.n	8011a80 <tx_tcp+0x88>
 8011a72:	6a3b      	ldr	r3, [r7, #32]
 8011a74:	3314      	adds	r3, #20
 8011a76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f016 fe76 	bl	802876c <memmove>
  tcp->sport = sport;
 8011a80:	6a3b      	ldr	r3, [r7, #32]
 8011a82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011a86:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8011a88:	6a3b      	ldr	r3, [r7, #32]
 8011a8a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8011a8e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a94:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 8011a96:	6a3b      	ldr	r3, [r7, #32]
 8011a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a9a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8011a9c:	6a3b      	ldr	r3, [r7, #32]
 8011a9e:	78fa      	ldrb	r2, [r7, #3]
 8011aa0:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 8011aa2:	f241 7070 	movw	r0, #6000	@ 0x1770
 8011aa6:	f011 f8e7 	bl	8022c78 <mg_ntohs>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	461a      	mov	r2, r3
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8011ab2:	6a3b      	ldr	r3, [r7, #32]
 8011ab4:	2250      	movs	r2, #80	@ 0x50
 8011ab6:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 8011ab8:	78fb      	ldrb	r3, [r7, #3]
 8011aba:	f003 0302 	and.w	r3, r3, #2
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d005      	beq.n	8011ace <tx_tcp+0xd6>
 8011ac2:	6a3b      	ldr	r3, [r7, #32]
 8011ac4:	7b1b      	ldrb	r3, [r3, #12]
 8011ac6:	3310      	adds	r3, #16
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	6a3b      	ldr	r3, [r7, #32]
 8011acc:	731a      	strb	r2, [r3, #12]

  uint32_t cs = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8011ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	3314      	adds	r3, #20
 8011ad8:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8011ada:	2300      	movs	r3, #0
 8011adc:	743b      	strb	r3, [r7, #16]
 8011ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae0:	7a5b      	ldrb	r3, [r3, #9]
 8011ae2:	747b      	strb	r3, [r7, #17]
 8011ae4:	8b7b      	ldrh	r3, [r7, #26]
 8011ae6:	0a1b      	lsrs	r3, r3, #8
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	74bb      	strb	r3, [r7, #18]
 8011aee:	8b7b      	ldrh	r3, [r7, #26]
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	74fb      	strb	r3, [r7, #19]
  cs = csumup(cs, tcp, n);
 8011af4:	8b7b      	ldrh	r3, [r7, #26]
 8011af6:	461a      	mov	r2, r3
 8011af8:	6a39      	ldr	r1, [r7, #32]
 8011afa:	69f8      	ldr	r0, [r7, #28]
 8011afc:	f7fe fcd2 	bl	80104a4 <csumup>
 8011b00:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8011b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b04:	330c      	adds	r3, #12
 8011b06:	2204      	movs	r2, #4
 8011b08:	4619      	mov	r1, r3
 8011b0a:	69f8      	ldr	r0, [r7, #28]
 8011b0c:	f7fe fcca 	bl	80104a4 <csumup>
 8011b10:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8011b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b14:	3310      	adds	r3, #16
 8011b16:	2204      	movs	r2, #4
 8011b18:	4619      	mov	r1, r3
 8011b1a:	69f8      	ldr	r0, [r7, #28]
 8011b1c:	f7fe fcc2 	bl	80104a4 <csumup>
 8011b20:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8011b22:	f107 0310 	add.w	r3, r7, #16
 8011b26:	2204      	movs	r2, #4
 8011b28:	4619      	mov	r1, r3
 8011b2a:	69f8      	ldr	r0, [r7, #28]
 8011b2c:	f7fe fcba 	bl	80104a4 <csumup>
 8011b30:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8011b32:	69f8      	ldr	r0, [r7, #28]
 8011b34:	f7fe fce1 	bl	80104fa <csumfin>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	6a3b      	ldr	r3, [r7, #32]
 8011b3e:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8011b40:	4b21      	ldr	r3, [pc, #132]	@ (8011bc8 <tx_tcp+0x1d0>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	dd2c      	ble.n	8011ba2 <tx_tcp+0x1aa>
 8011b48:	4b20      	ldr	r3, [pc, #128]	@ (8011bcc <tx_tcp+0x1d4>)
 8011b4a:	f241 2289 	movw	r2, #4745	@ 0x1289
 8011b4e:	4920      	ldr	r1, [pc, #128]	@ (8011bd0 <tx_tcp+0x1d8>)
 8011b50:	2004      	movs	r0, #4
 8011b52:	f7fd fdf7 	bl	800f744 <mg_log_prefix>
 8011b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b58:	f103 050c 	add.w	r5, r3, #12
 8011b5c:	6a3b      	ldr	r3, [r7, #32]
 8011b5e:	881b      	ldrh	r3, [r3, #0]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	4618      	mov	r0, r3
 8011b64:	f011 f888 	bl	8022c78 <mg_ntohs>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	461e      	mov	r6, r3
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6e:	f103 0410 	add.w	r4, r3, #16
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	885b      	ldrh	r3, [r3, #2]
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f011 f87d 	bl	8022c78 <mg_ntohs>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	461a      	mov	r2, r3
 8011b82:	6a3b      	ldr	r3, [r7, #32]
 8011b84:	7b5b      	ldrb	r3, [r3, #13]
 8011b86:	4619      	mov	r1, r3
 8011b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b8a:	9304      	str	r3, [sp, #16]
 8011b8c:	9103      	str	r1, [sp, #12]
 8011b8e:	9202      	str	r2, [sp, #8]
 8011b90:	9401      	str	r4, [sp, #4]
 8011b92:	4b10      	ldr	r3, [pc, #64]	@ (8011bd4 <tx_tcp+0x1dc>)
 8011b94:	9300      	str	r3, [sp, #0]
 8011b96:	4633      	mov	r3, r6
 8011b98:	462a      	mov	r2, r5
 8011b9a:	490e      	ldr	r1, [pc, #56]	@ (8011bd4 <tx_tcp+0x1dc>)
 8011b9c:	480e      	ldr	r0, [pc, #56]	@ (8011bd8 <tx_tcp+0x1e0>)
 8011b9e:	f7fd fe21 	bl	800f7e4 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	f103 0214 	add.w	r2, r3, #20
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	695b      	ldr	r3, [r3, #20]
 8011bac:	1ad3      	subs	r3, r2, r3
 8011bae:	461a      	mov	r2, r3
 8011bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bb2:	4413      	add	r3, r2
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f7fe fd32 	bl	8010620 <ether_output>
 8011bbc:	4603      	mov	r3, r0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	372c      	adds	r7, #44	@ 0x2c
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	2400025c 	.word	0x2400025c
 8011bcc:	0803123c 	.word	0x0803123c
 8011bd0:	0802d330 	.word	0x0802d330
 8011bd4:	08014175 	.word	0x08014175
 8011bd8:	0802e908 	.word	0x0802e908

08011bdc <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8011bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be0:	b08c      	sub	sp, #48	@ 0x30
 8011be2:	af06      	add	r7, sp, #24
 8011be4:	60f8      	str	r0, [r7, #12]
 8011be6:	60b9      	str	r1, [r7, #8]
 8011be8:	603b      	str	r3, [r7, #0]
 8011bea:	4613      	mov	r3, r2
 8011bec:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bf2:	7b5b      	ldrb	r3, [r3, #13]
 8011bf4:	f003 0303 	and.w	r3, r3, #3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	bf14      	ite	ne
 8011bfc:	2301      	movne	r3, #1
 8011bfe:	2300      	moveq	r3, #0
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	1d9e      	adds	r6, r3, #6
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	69db      	ldr	r3, [r3, #28]
 8011c0e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c16:	885b      	ldrh	r3, [r3, #2]
 8011c18:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f011 f83c 	bl	8022ca6 <mg_ntohl>
 8011c2e:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	4413      	add	r3, r2
 8011c34:	4618      	mov	r0, r3
 8011c36:	f011 f836 	bl	8022ca6 <mg_ntohl>
 8011c3a:	4601      	mov	r1, r0
 8011c3c:	79fa      	ldrb	r2, [r7, #7]
 8011c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c40:	9305      	str	r3, [sp, #20]
 8011c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c44:	9304      	str	r3, [sp, #16]
 8011c46:	9103      	str	r1, [sp, #12]
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	9302      	str	r3, [sp, #8]
 8011c4c:	9501      	str	r5, [sp, #4]
 8011c4e:	9400      	str	r4, [sp, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	4642      	mov	r2, r8
 8011c54:	4631      	mov	r1, r6
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f7ff fece 	bl	80119f8 <tx_tcp>
 8011c5c:	4603      	mov	r3, r0
                buf, len);
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3718      	adds	r7, #24
 8011c62:	46bd      	mov	sp, r7
 8011c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c68 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8011c68:	b5b0      	push	{r4, r5, r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fe f94d 	bl	800ff16 <mg_alloc_conn>
 8011c7c:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10f      	bne.n	8011ca4 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 8011c84:	4b5e      	ldr	r3, [pc, #376]	@ (8011e00 <accept_conn+0x198>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	dd09      	ble.n	8011ca0 <accept_conn+0x38>
 8011c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8011e04 <accept_conn+0x19c>)
 8011c8e:	f241 229d 	movw	r2, #4765	@ 0x129d
 8011c92:	495d      	ldr	r1, [pc, #372]	@ (8011e08 <accept_conn+0x1a0>)
 8011c94:	2001      	movs	r0, #1
 8011c96:	f7fd fd55 	bl	800f744 <mg_log_prefix>
 8011c9a:	485c      	ldr	r0, [pc, #368]	@ (8011e0c <accept_conn+0x1a4>)
 8011c9c:	f7fd fda2 	bl	800f7e4 <mg_log>
    return NULL;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	e0a8      	b.n	8011df6 <accept_conn+0x18e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	33b0      	adds	r3, #176	@ 0xb0
 8011ca8:	60bb      	str	r3, [r7, #8]
  s->dmss = 536;  // assume default, RFC-9293 3.7.1
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011cb0:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f010 fff4 	bl	8022ca6 <mg_ntohl>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f010 ffeb 	bl	8022ca6 <mg_ntohl>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	f103 001a 	add.w	r0, r3, #26
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	691b      	ldr	r3, [r3, #16]
 8011ce0:	3306      	adds	r3, #6
 8011ce2:	2206      	movs	r2, #6
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	f017 ff8a 	bl	8029bfe <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8011cea:	2100      	movs	r1, #0
 8011cec:	68f8      	ldr	r0, [r7, #12]
 8011cee:	f7fe fc33 	bl	8010558 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	331c      	adds	r3, #28
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	69d2      	ldr	r2, [r2, #28]
 8011cfa:	320c      	adds	r2, #12
 8011cfc:	6812      	ldr	r2, [r2, #0]
 8011cfe:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d04:	881b      	ldrh	r3, [r3, #0]
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8011d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8011e00 <accept_conn+0x198>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b02      	cmp	r3, #2
 8011d12:	dd0e      	ble.n	8011d32 <accept_conn+0xca>
 8011d14:	4b3b      	ldr	r3, [pc, #236]	@ (8011e04 <accept_conn+0x19c>)
 8011d16:	f241 22a7 	movw	r2, #4775	@ 0x12a7
 8011d1a:	493b      	ldr	r1, [pc, #236]	@ (8011e08 <accept_conn+0x1a0>)
 8011d1c:	2003      	movs	r0, #3
 8011d1e:	f7fd fd11 	bl	800f744 <mg_log_prefix>
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	331c      	adds	r3, #28
 8011d2a:	4a39      	ldr	r2, [pc, #228]	@ (8011e10 <accept_conn+0x1a8>)
 8011d2c:	4839      	ldr	r0, [pc, #228]	@ (8011e14 <accept_conn+0x1ac>)
 8011d2e:	f7fd fd59 	bl	800f7e4 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	601a      	str	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011d4a:	f043 0304 	orr.w	r3, r3, #4
 8011d4e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011d58:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011d5c:	b2d9      	uxtb	r1, r3
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8011d64:	f361 03c3 	bfi	r3, r1, #3, #1
 8011d68:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 8011d78:	68fa      	ldr	r2, [r7, #12]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f102 0408 	add.w	r4, r2, #8
 8011d80:	f103 0508 	add.w	r5, r3, #8
 8011d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d88:	682b      	ldr	r3, [r5, #0]
 8011d8a:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	67da      	str	r2, [r3, #124]	@ 0x7c
  c->is_tls = lsn->is_tls;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011dae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011db2:	b2d9      	uxtb	r1, r3
 8011db4:	68fa      	ldr	r2, [r7, #12]
 8011db6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011dba:	f361 1386 	bfi	r3, r1, #6, #1
 8011dbe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_call(c, MG_EV_OPEN, NULL);
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	2101      	movs	r1, #1
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f7f7 fda6 	bl	8009918 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8011dcc:	2200      	movs	r2, #0
 8011dce:	2105      	movs	r1, #5
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f7f7 fda1 	bl	8009918 <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011ddc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d106      	bne.n	8011df4 <accept_conn+0x18c>
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011df0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  return c;
 8011df4:	68fb      	ldr	r3, [r7, #12]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	2400025c 	.word	0x2400025c
 8011e04:	08031244 	.word	0x08031244
 8011e08:	0802d330 	.word	0x0802d330
 8011e0c:	0802e528 	.word	0x0802e528
 8011e10:	080141ed 	.word	0x080141ed
 8011e14:	0802e92c 	.word	0x0802e92c

08011e18 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b08a      	sub	sp, #40	@ 0x28
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e28:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 8011e2a:	230e      	movs	r3, #14
 8011e2c:	623b      	str	r3, [r7, #32]
 8011e2e:	2318      	movs	r3, #24
 8011e30:	61fb      	str	r3, [r7, #28]
 8011e32:	233c      	movs	r3, #60	@ 0x3c
 8011e34:	61bb      	str	r3, [r7, #24]
 8011e36:	2308      	movs	r3, #8
 8011e38:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8011e3a:	6a3a      	ldr	r2, [r7, #32]
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	441a      	add	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011e46:	f003 0301 	and.w	r3, r3, #1
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d001      	beq.n	8011e54 <trim_len+0x3c>
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	e000      	b.n	8011e56 <trim_len+0x3e>
 8011e54:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 8011e56:	4413      	add	r3, r2
 8011e58:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011e60:	f003 0301 	and.w	r3, r3, #1
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d103      	bne.n	8011e72 <trim_len+0x5a>
 8011e6a:	693a      	ldr	r2, [r7, #16]
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	1ad3      	subs	r3, r2, r3
 8011e70:	e000      	b.n	8011e74 <trim_len+0x5c>
 8011e72:	2344      	movs	r3, #68	@ 0x44
 8011e74:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 8011e76:	683a      	ldr	r2, [r7, #0]
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	441a      	add	r2, r3
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d904      	bls.n	8011e8e <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 8011e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e86:	699a      	ldr	r2, [r3, #24]
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	1ad3      	subs	r3, r2, r3
 8011e8c:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011e94:	461a      	mov	r2, r3
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d913      	bls.n	8011ec4 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 8011e9c:	4b20      	ldr	r3, [pc, #128]	@ (8011f20 <trim_len+0x108>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dd0a      	ble.n	8011eba <trim_len+0xa2>
 8011ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8011f24 <trim_len+0x10c>)
 8011ea6:	f241 22c4 	movw	r2, #4804	@ 0x12c4
 8011eaa:	491f      	ldr	r1, [pc, #124]	@ (8011f28 <trim_len+0x110>)
 8011eac:	2001      	movs	r0, #1
 8011eae:	f7fd fc49 	bl	800f744 <mg_log_prefix>
 8011eb2:	68f9      	ldr	r1, [r7, #12]
 8011eb4:	481d      	ldr	r0, [pc, #116]	@ (8011f2c <trim_len+0x114>)
 8011eb6:	f7fd fc95 	bl	800f7e4 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 8011ec4:	683a      	ldr	r2, [r7, #0]
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	441a      	add	r2, r3
 8011eca:	6a3b      	ldr	r3, [r7, #32]
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ed0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d91e      	bls.n	8011f16 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011ede:	461a      	mov	r2, r3
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	6a3a      	ldr	r2, [r7, #32]
 8011ee6:	4413      	add	r3, r2
 8011ee8:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011ef0:	f003 0301 	and.w	r3, r3, #1
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00d      	beq.n	8011f16 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8011efa:	4b09      	ldr	r3, [pc, #36]	@ (8011f20 <trim_len+0x108>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	dd09      	ble.n	8011f16 <trim_len+0xfe>
 8011f02:	4b08      	ldr	r3, [pc, #32]	@ (8011f24 <trim_len+0x10c>)
 8011f04:	f241 22cb 	movw	r2, #4811	@ 0x12cb
 8011f08:	4907      	ldr	r1, [pc, #28]	@ (8011f28 <trim_len+0x110>)
 8011f0a:	2001      	movs	r0, #1
 8011f0c:	f7fd fc1a 	bl	800f744 <mg_log_prefix>
 8011f10:	4807      	ldr	r0, [pc, #28]	@ (8011f30 <trim_len+0x118>)
 8011f12:	f7fd fc67 	bl	800f7e4 <mg_log>
    }
  }

  return len;
 8011f16:	683b      	ldr	r3, [r7, #0]
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3728      	adds	r7, #40	@ 0x28
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	2400025c 	.word	0x2400025c
 8011f24:	08031250 	.word	0x08031250
 8011f28:	0802d330 	.word	0x0802d330
 8011f2c:	0802e93c 	.word	0x0802e93c
 8011f30:	0802e968 	.word	0x0802e968

08011f34 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8011f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f36:	b08f      	sub	sp, #60	@ 0x3c
 8011f38:	af06      	add	r7, sp, #24
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f46:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	33b0      	adds	r3, #176	@ 0xb0
 8011f4c:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	331c      	adds	r3, #28
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 8011f56:	6879      	ldr	r1, [r7, #4]
 8011f58:	68f8      	ldr	r0, [r7, #12]
 8011f5a:	f7ff ff5d 	bl	8011e18 <trim_len>
 8011f5e:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011f66:	f003 0301 	and.w	r3, r3, #1
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d015      	beq.n	8011f9c <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8011f70:	69bb      	ldr	r3, [r7, #24]
 8011f72:	f103 011a 	add.w	r1, r3, #26
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	6898      	ldr	r0, [r3, #8]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	8b1c      	ldrh	r4, [r3, #24]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	9203      	str	r2, [sp, #12]
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	9202      	str	r2, [sp, #8]
 8011f8a:	9301      	str	r3, [sp, #4]
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	4623      	mov	r3, r4
 8011f92:	4602      	mov	r2, r0
 8011f94:	69f8      	ldr	r0, [r7, #28]
 8011f96:	f7fe fcc8 	bl	801092a <tx_udp>
 8011f9a:	e047      	b.n	801202c <mg_io_send+0xf8>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	8b1b      	ldrh	r3, [r3, #24]
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d902      	bls.n	8011fae <mg_io_send+0x7a>
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	8b1b      	ldrh	r3, [r3, #24]
 8011fac:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	f103 061a 	add.w	r6, r3, #26
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	8b1c      	ldrh	r4, [r3, #24]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f010 fe70 	bl	8022ca6 <mg_ntohl>
 8011fc6:	6038      	str	r0, [r7, #0]
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f010 fe6a 	bl	8022ca6 <mg_ntohl>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	9305      	str	r3, [sp, #20]
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	9304      	str	r3, [sp, #16]
 8011fdc:	9203      	str	r2, [sp, #12]
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	9302      	str	r3, [sp, #8]
 8011fe2:	9501      	str	r5, [sp, #4]
 8011fe4:	9400      	str	r4, [sp, #0]
 8011fe6:	2318      	movs	r3, #24
 8011fe8:	697a      	ldr	r2, [r7, #20]
 8011fea:	4631      	mov	r1, r6
 8011fec:	69f8      	ldr	r0, [r7, #28]
 8011fee:	f7ff fd03 	bl	80119f8 <tx_tcp>
 8011ff2:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d102      	bne.n	8012000 <mg_io_send+0xcc>
      return MG_IO_WAIT;
 8011ffa:	f06f 0301 	mvn.w	r3, #1
 8011ffe:	e016      	b.n	801202e <mg_io_send+0xfa>
    } else if (sent == (size_t) -1) {
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012006:	d102      	bne.n	801200e <mg_io_send+0xda>
      return MG_IO_ERR;
 8012008:	f04f 33ff 	mov.w	r3, #4294967295
 801200c:	e00f      	b.n	801202e <mg_io_send+0xfa>
    } else {
      s->seq += (uint32_t) len;
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	441a      	add	r2, r3
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801201a:	69bb      	ldr	r3, [r7, #24]
 801201c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d103      	bne.n	801202c <mg_io_send+0xf8>
 8012024:	2100      	movs	r1, #0
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f7fe fa96 	bl	8010558 <settmout>
    }
  }
  return (long) len;
 801202c:	687b      	ldr	r3, [r7, #4]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3724      	adds	r7, #36	@ 0x24
 8012032:	46bd      	mov	sp, r7
 8012034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012038 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 8012038:	b580      	push	{r7, lr}
 801203a:	b086      	sub	sp, #24
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f00a f9bd 	bl	801c3c0 <mg_tls_pending>
 8012046:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801204e:	bf28      	it	cs
 8012050:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 8012054:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	3338      	adds	r3, #56	@ 0x38
 801205a:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	685a      	ldr	r2, [r3, #4]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	693a      	ldr	r2, [r7, #16]
 8012068:	429a      	cmp	r2, r3
 801206a:	d90f      	bls.n	801208c <handle_tls_recv+0x54>
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	689a      	ldr	r2, [r3, #8]
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	4413      	add	r3, r2
 8012074:	4619      	mov	r1, r3
 8012076:	68f8      	ldr	r0, [r7, #12]
 8012078:	f7fc fa6e 	bl	800e558 <mg_iobuf_resize>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d104      	bne.n	801208c <handle_tls_recv+0x54>
    mg_error(c, "oom");
 8012082:	491c      	ldr	r1, [pc, #112]	@ (80120f4 <handle_tls_recv+0xbc>)
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7f7 fc67 	bl	8009958 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 801208a:	e02f      	b.n	80120ec <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d005      	beq.n	80120a0 <handle_tls_recv+0x68>
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	4413      	add	r3, r2
 801209e:	e001      	b.n	80120a4 <handle_tls_recv+0x6c>
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	6851      	ldr	r1, [r2, #4]
 80120a8:	68fa      	ldr	r2, [r7, #12]
 80120aa:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 80120ac:	1a8a      	subs	r2, r1, r2
 80120ae:	4619      	mov	r1, r3
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f00a f931 	bl	801c318 <mg_tls_recv>
 80120b6:	4603      	mov	r3, r0
 80120b8:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c0:	d104      	bne.n	80120cc <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 80120c2:	490d      	ldr	r1, [pc, #52]	@ (80120f8 <handle_tls_recv+0xc0>)
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f7f7 fc47 	bl	8009958 <mg_error>
}
 80120ca:	e00f      	b.n	80120ec <handle_tls_recv+0xb4>
    } else if (n > 0) {
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	dd0c      	ble.n	80120ec <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	68ba      	ldr	r2, [r7, #8]
 80120d8:	441a      	add	r2, r3
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 80120de:	f107 0308 	add.w	r3, r7, #8
 80120e2:	461a      	mov	r2, r3
 80120e4:	2107      	movs	r1, #7
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7f7 fc16 	bl	8009918 <mg_call>
}
 80120ec:	bf00      	nop
 80120ee:	3718      	adds	r7, #24
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	0802e904 	.word	0x0802e904
 80120f8:	0802e994 	.word	0x0802e994

080120fc <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 80120fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012100:	b090      	sub	sp, #64	@ 0x40
 8012102:	af06      	add	r7, sp, #24
 8012104:	60f8      	str	r0, [r7, #12]
 8012106:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	33b0      	adds	r3, #176	@ 0xb0
 801210c:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b00      	cmp	r3, #0
 801211c:	d002      	beq.n	8012124 <read_conn+0x28>
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	3368      	adds	r3, #104	@ 0x68
 8012122:	e001      	b.n	8012128 <read_conn+0x2c>
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	3338      	adds	r3, #56	@ 0x38
 8012128:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	f010 fdb8 	bl	8022ca6 <mg_ntohl>
 8012136:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	331c      	adds	r3, #28
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012144:	7b5b      	ldrb	r3, [r3, #13]
 8012146:	f003 0301 	and.w	r3, r3, #1
 801214a:	2b00      	cmp	r3, #0
 801214c:	d07e      	beq.n	801224c <read_conn+0x150>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 801214e:	2310      	movs	r3, #16
 8012150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	4618      	mov	r0, r3
 801215c:	f010 fda3 	bl	8022ca6 <mg_ntohl>
 8012160:	4602      	mov	r2, r0
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	4413      	add	r3, r2
 8012168:	1c5a      	adds	r2, r3, #1
 801216a:	6a3b      	ldr	r3, [r7, #32]
 801216c:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	2201      	movs	r2, #1
 8012172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801217c:	f003 0310 	and.w	r3, r3, #16
 8012180:	b2db      	uxtb	r3, r3
 8012182:	2b00      	cmp	r3, #0
 8012184:	d023      	beq.n	80121ce <read_conn+0xd2>
 8012186:	6a3b      	ldr	r3, [r7, #32]
 8012188:	f893 3020 	ldrb.w	r3, [r3, #32]
 801218c:	2b04      	cmp	r3, #4
 801218e:	d11e      	bne.n	80121ce <read_conn+0xd2>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	681c      	ldr	r4, [r3, #0]
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	4618      	mov	r0, r3
 801219c:	f010 fd83 	bl	8022ca6 <mg_ntohl>
 80121a0:	4603      	mov	r3, r0
 80121a2:	429c      	cmp	r4, r3
 80121a4:	d105      	bne.n	80121b2 <read_conn+0xb6>
        s->seq++;                               // Yes. Increment our SEQ
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	1c5a      	adds	r2, r3, #1
 80121ac:	6a3b      	ldr	r3, [r7, #32]
 80121ae:	601a      	str	r2, [r3, #0]
 80121b0:	e008      	b.n	80121c4 <read_conn+0xc8>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f010 fd74 	bl	8022ca6 <mg_ntohl>
 80121be:	4602      	mov	r2, r0
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	2201      	movs	r2, #1
 80121c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80121cc:	e010      	b.n	80121f0 <read_conn+0xf4>
    } else {
      flags |= TH_FIN;
 80121ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121d2:	f043 0301 	orr.w	r3, r3, #1
 80121d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80121e0:	f043 0310 	orr.w	r3, r3, #16
 80121e4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 80121e8:	2104      	movs	r1, #4
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f7fe f9b4 	bl	8010558 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80121f6:	6a3b      	ldr	r3, [r7, #32]
 80121f8:	f103 081a 	add.w	r8, r3, #26
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	607b      	str	r3, [r7, #4]
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	8b1c      	ldrh	r4, [r3, #24]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8012208:	6a3b      	ldr	r3, [r7, #32]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4618      	mov	r0, r3
 801220e:	f010 fd4a 	bl	8022ca6 <mg_ntohl>
 8012212:	6038      	str	r0, [r7, #0]
 8012214:	6a3b      	ldr	r3, [r7, #32]
 8012216:	685b      	ldr	r3, [r3, #4]
 8012218:	4618      	mov	r0, r3
 801221a:	f010 fd44 	bl	8022ca6 <mg_ntohl>
 801221e:	4602      	mov	r2, r0
 8012220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012224:	2100      	movs	r1, #0
 8012226:	9105      	str	r1, [sp, #20]
 8012228:	499b      	ldr	r1, [pc, #620]	@ (8012498 <read_conn+0x39c>)
 801222a:	9104      	str	r1, [sp, #16]
 801222c:	9203      	str	r2, [sp, #12]
 801222e:	6839      	ldr	r1, [r7, #0]
 8012230:	9102      	str	r1, [sp, #8]
 8012232:	9501      	str	r5, [sp, #4]
 8012234:	9400      	str	r4, [sp, #0]
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	4641      	mov	r1, r8
 801223a:	4630      	mov	r0, r6
 801223c:	f7ff fbdc 	bl	80119f8 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	f040 808f 	bne.w	8012368 <read_conn+0x26c>
 801224a:	e16b      	b.n	8012524 <read_conn+0x428>
  } else if (pkt->pay.len == 0) {   // this is an ACK
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d110      	bne.n	8012276 <read_conn+0x17a>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801225a:	2b00      	cmp	r3, #0
 801225c:	f000 815f 	beq.w	801251e <read_conn+0x422>
 8012260:	6a3b      	ldr	r3, [r7, #32]
 8012262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012266:	2b04      	cmp	r3, #4
 8012268:	f040 8159 	bne.w	801251e <read_conn+0x422>
 801226c:	6a3b      	ldr	r3, [r7, #32]
 801226e:	2201      	movs	r2, #1
 8012270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 8012274:	e153      	b.n	801251e <read_conn+0x422>
  } else if (seq != s->ack) {
 8012276:	6a3b      	ldr	r3, [r7, #32]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	69ba      	ldr	r2, [r7, #24]
 801227c:	429a      	cmp	r2, r3
 801227e:	d059      	beq.n	8012334 <read_conn+0x238>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	4618      	mov	r0, r3
 8012288:	f010 fd0d 	bl	8022ca6 <mg_ntohl>
 801228c:	4602      	mov	r2, r0
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	4413      	add	r3, r2
 8012294:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 8012296:	6a3b      	ldr	r3, [r7, #32]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	697a      	ldr	r2, [r7, #20]
 801229c:	429a      	cmp	r2, r3
 801229e:	d10f      	bne.n	80122c0 <read_conn+0x1c4>
      MG_VERBOSE(("ignoring duplicate pkt"));
 80122a0:	4b7e      	ldr	r3, [pc, #504]	@ (801249c <read_conn+0x3a0>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	2b03      	cmp	r3, #3
 80122a6:	f340 813c 	ble.w	8012522 <read_conn+0x426>
 80122aa:	4b7d      	ldr	r3, [pc, #500]	@ (80124a0 <read_conn+0x3a4>)
 80122ac:	f44f 5299 	mov.w	r2, #4896	@ 0x1320
 80122b0:	497c      	ldr	r1, [pc, #496]	@ (80124a4 <read_conn+0x3a8>)
 80122b2:	2004      	movs	r0, #4
 80122b4:	f7fd fa46 	bl	800f744 <mg_log_prefix>
 80122b8:	487b      	ldr	r0, [pc, #492]	@ (80124a8 <read_conn+0x3ac>)
 80122ba:	f7fd fa93 	bl	800f7e4 <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 80122be:	e130      	b.n	8012522 <read_conn+0x426>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80122c0:	4b76      	ldr	r3, [pc, #472]	@ (801249c <read_conn+0x3a0>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b03      	cmp	r3, #3
 80122c6:	dd0d      	ble.n	80122e4 <read_conn+0x1e8>
 80122c8:	4b75      	ldr	r3, [pc, #468]	@ (80124a0 <read_conn+0x3a4>)
 80122ca:	f241 3222 	movw	r2, #4898	@ 0x1322
 80122ce:	4975      	ldr	r1, [pc, #468]	@ (80124a4 <read_conn+0x3a8>)
 80122d0:	2004      	movs	r0, #4
 80122d2:	f7fd fa37 	bl	800f744 <mg_log_prefix>
 80122d6:	6a3b      	ldr	r3, [r7, #32]
 80122d8:	685a      	ldr	r2, [r3, #4]
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	69b9      	ldr	r1, [r7, #24]
 80122de:	4873      	ldr	r0, [pc, #460]	@ (80124ac <read_conn+0x3b0>)
 80122e0:	f7fd fa80 	bl	800f7e4 <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80122ea:	6a3b      	ldr	r3, [r7, #32]
 80122ec:	f103 081a 	add.w	r8, r3, #26
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	607b      	str	r3, [r7, #4]
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	8b1c      	ldrh	r4, [r3, #24]
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80122fc:	6a3b      	ldr	r3, [r7, #32]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4618      	mov	r0, r3
 8012302:	f010 fcd0 	bl	8022ca6 <mg_ntohl>
 8012306:	6038      	str	r0, [r7, #0]
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	4618      	mov	r0, r3
 801230e:	f010 fcca 	bl	8022ca6 <mg_ntohl>
 8012312:	4603      	mov	r3, r0
 8012314:	2200      	movs	r2, #0
 8012316:	9205      	str	r2, [sp, #20]
 8012318:	4a5f      	ldr	r2, [pc, #380]	@ (8012498 <read_conn+0x39c>)
 801231a:	9204      	str	r2, [sp, #16]
 801231c:	9303      	str	r3, [sp, #12]
 801231e:	6839      	ldr	r1, [r7, #0]
 8012320:	9102      	str	r1, [sp, #8]
 8012322:	9501      	str	r5, [sp, #4]
 8012324:	9400      	str	r4, [sp, #0]
 8012326:	2310      	movs	r3, #16
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	4641      	mov	r1, r8
 801232c:	4630      	mov	r0, r6
 801232e:	f7ff fb63 	bl	80119f8 <tx_tcp>
    return;  // drop it
 8012332:	e0f6      	b.n	8012522 <read_conn+0x426>
  } else if (io->size - io->len < pkt->pay.len &&
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	685a      	ldr	r2, [r3, #4]
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	689b      	ldr	r3, [r3, #8]
 801233c:	1ad2      	subs	r2, r2, r3
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	429a      	cmp	r2, r3
 8012344:	d210      	bcs.n	8012368 <read_conn+0x26c>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	689a      	ldr	r2, [r3, #8]
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	4413      	add	r3, r2
 8012350:	4619      	mov	r1, r3
 8012352:	69f8      	ldr	r0, [r7, #28]
 8012354:	f7fc f900 	bl	800e558 <mg_iobuf_resize>
 8012358:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801235a:	2b00      	cmp	r3, #0
 801235c:	d104      	bne.n	8012368 <read_conn+0x26c>
    mg_error(c, "oom");
 801235e:	4954      	ldr	r1, [pc, #336]	@ (80124b0 <read_conn+0x3b4>)
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f7f7 faf9 	bl	8009958 <mg_error>
    return;  // drop it
 8012366:	e0dd      	b.n	8012524 <read_conn+0x428>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	18d0      	adds	r0, r2, r3
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	6899      	ldr	r1, [r3, #8]
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	461a      	mov	r2, r3
 801237c:	f017 fc3f 	bl	8029bfe <memcpy>
  io->len += pkt->pay.len;
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	689a      	ldr	r2, [r3, #8]
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	441a      	add	r2, r3
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 801238e:	4b43      	ldr	r3, [pc, #268]	@ (801249c <read_conn+0x3a0>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b03      	cmp	r3, #3
 8012394:	dd15      	ble.n	80123c2 <read_conn+0x2c6>
 8012396:	4b42      	ldr	r3, [pc, #264]	@ (80124a0 <read_conn+0x3a4>)
 8012398:	f241 3233 	movw	r2, #4915	@ 0x1333
 801239c:	4941      	ldr	r1, [pc, #260]	@ (80124a4 <read_conn+0x3a8>)
 801239e:	2004      	movs	r0, #4
 80123a0:	f7fd f9d0 	bl	800f744 <mg_log_prefix>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f010 fc79 	bl	8022ca6 <mg_ntohl>
 80123b4:	4602      	mov	r2, r0
 80123b6:	6a3b      	ldr	r3, [r7, #32]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	4621      	mov	r1, r4
 80123bc:	483d      	ldr	r0, [pc, #244]	@ (80124b4 <read_conn+0x3b8>)
 80123be:	f7fd fa11 	bl	800f7e4 <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	4618      	mov	r0, r3
 80123ca:	f010 fc6c 	bl	8022ca6 <mg_ntohl>
 80123ce:	4602      	mov	r2, r0
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	441a      	add	r2, r3
 80123d6:	6a3b      	ldr	r3, [r7, #32]
 80123d8:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 80123da:	6a3b      	ldr	r3, [r7, #32]
 80123dc:	695a      	ldr	r2, [r3, #20]
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	441a      	add	r2, r3
 80123e4:	6a3b      	ldr	r3, [r7, #32]
 80123e6:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 80123e8:	6a3b      	ldr	r3, [r7, #32]
 80123ea:	695b      	ldr	r3, [r3, #20]
 80123ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d963      	bls.n	80124bc <read_conn+0x3c0>
 80123f4:	6a3b      	ldr	r3, [r7, #32]
 80123f6:	691a      	ldr	r2, [r3, #16]
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d05d      	beq.n	80124bc <read_conn+0x3c0>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8012400:	4b26      	ldr	r3, [pc, #152]	@ (801249c <read_conn+0x3a0>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b03      	cmp	r3, #3
 8012406:	dd0e      	ble.n	8012426 <read_conn+0x32a>
 8012408:	4b25      	ldr	r3, [pc, #148]	@ (80124a0 <read_conn+0x3a4>)
 801240a:	f241 323a 	movw	r2, #4922	@ 0x133a
 801240e:	4925      	ldr	r1, [pc, #148]	@ (80124a4 <read_conn+0x3a8>)
 8012410:	2004      	movs	r0, #4
 8012412:	f7fd f997 	bl	800f744 <mg_log_prefix>
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801241a:	6a3b      	ldr	r3, [r7, #32]
 801241c:	691b      	ldr	r3, [r3, #16]
 801241e:	461a      	mov	r2, r3
 8012420:	4825      	ldr	r0, [pc, #148]	@ (80124b8 <read_conn+0x3bc>)
 8012422:	f7fd f9df 	bl	800f7e4 <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 801242c:	6a3b      	ldr	r3, [r7, #32]
 801242e:	f103 081a 	add.w	r8, r3, #26
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	607b      	str	r3, [r7, #4]
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	8b1c      	ldrh	r4, [r3, #24]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801243e:	6a3b      	ldr	r3, [r7, #32]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	4618      	mov	r0, r3
 8012444:	f010 fc2f 	bl	8022ca6 <mg_ntohl>
 8012448:	6038      	str	r0, [r7, #0]
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f010 fc29 	bl	8022ca6 <mg_ntohl>
 8012454:	4603      	mov	r3, r0
 8012456:	2200      	movs	r2, #0
 8012458:	9205      	str	r2, [sp, #20]
 801245a:	2200      	movs	r2, #0
 801245c:	9204      	str	r2, [sp, #16]
 801245e:	9303      	str	r3, [sp, #12]
 8012460:	6839      	ldr	r1, [r7, #0]
 8012462:	9102      	str	r1, [sp, #8]
 8012464:	9501      	str	r5, [sp, #4]
 8012466:	9400      	str	r4, [sp, #0]
 8012468:	2310      	movs	r3, #16
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	4641      	mov	r1, r8
 801246e:	4630      	mov	r0, r6
 8012470:	f7ff fac2 	bl	80119f8 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 8012474:	6a3b      	ldr	r3, [r7, #32]
 8012476:	2200      	movs	r2, #0
 8012478:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 801247a:	6a3b      	ldr	r3, [r7, #32]
 801247c:	685a      	ldr	r2, [r3, #4]
 801247e:	6a3b      	ldr	r3, [r7, #32]
 8012480:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8012482:	6a3b      	ldr	r3, [r7, #32]
 8012484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d020      	beq.n	80124ce <read_conn+0x3d2>
 801248c:	2100      	movs	r1, #0
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f7fe f862 	bl	8010558 <settmout>
 8012494:	e01b      	b.n	80124ce <read_conn+0x3d2>
 8012496:	bf00      	nop
 8012498:	0802db70 	.word	0x0802db70
 801249c:	2400025c 	.word	0x2400025c
 80124a0:	0803125c 	.word	0x0803125c
 80124a4:	0802d330 	.word	0x0802d330
 80124a8:	0802e9a4 	.word	0x0802e9a4
 80124ac:	0802e9bc 	.word	0x0802e9bc
 80124b0:	0802e904 	.word	0x0802e904
 80124b4:	0802e9d4 	.word	0x0802e9d4
 80124b8:	0802e9e8 	.word	0x0802e9e8
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 80124bc:	6a3b      	ldr	r3, [r7, #32]
 80124be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d003      	beq.n	80124ce <read_conn+0x3d2>
 80124c6:	2101      	movs	r1, #1
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f7fe f845 	bl	8010558 <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80124d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00b      	beq.n	80124f6 <read_conn+0x3fa>
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80124e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d003      	beq.n	80124f6 <read_conn+0x3fa>
    mg_tls_handshake(c);
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f009 fbf4 	bl	801bcdc <mg_tls_handshake>
 80124f4:	e016      	b.n	8012524 <read_conn+0x428>
  } else if (c->is_tls) {
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80124fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012500:	b2db      	uxtb	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	d003      	beq.n	801250e <read_conn+0x412>
    handle_tls_recv(c);
 8012506:	68f8      	ldr	r0, [r7, #12]
 8012508:	f7ff fd96 	bl	8012038 <handle_tls_recv>
 801250c:	e00a      	b.n	8012524 <read_conn+0x428>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	330c      	adds	r3, #12
 8012512:	461a      	mov	r2, r3
 8012514:	2107      	movs	r1, #7
 8012516:	68f8      	ldr	r0, [r7, #12]
 8012518:	f7f7 f9fe 	bl	8009918 <mg_call>
 801251c:	e002      	b.n	8012524 <read_conn+0x428>
    return;  // no data to process
 801251e:	bf00      	nop
 8012520:	e000      	b.n	8012524 <read_conn+0x428>
    return;  // drop it
 8012522:	bf00      	nop
  }
}
 8012524:	3728      	adds	r7, #40	@ 0x28
 8012526:	46bd      	mov	sp, r7
 8012528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801252c <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 801252c:	b580      	push	{r7, lr}
 801252e:	b086      	sub	sp, #24
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	3314      	adds	r3, #20
 801253a:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	7b1b      	ldrb	r3, [r3, #12]
 8012540:	091b      	lsrs	r3, r3, #4
 8012542:	b2db      	uxtb	r3, r3
 8012544:	3b05      	subs	r3, #5
 8012546:	009b      	lsls	r3, r3, #2
 8012548:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012550:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 8012552:	e038      	b.n	80125c6 <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	73bb      	strb	r3, [r7, #14]
 801255a:	2301      	movs	r3, #1
 801255c:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 801255e:	7bbb      	ldrb	r3, [r7, #14]
 8012560:	2b01      	cmp	r3, #1
 8012562:	d017      	beq.n	8012594 <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 8012564:	7bbb      	ldrb	r3, [r7, #14]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d031      	beq.n	80125ce <handle_opt+0xa2>
      optlen = opts[1];
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	785b      	ldrb	r3, [r3, #1]
 801256e:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 8012570:	7bbb      	ldrb	r3, [r7, #14]
 8012572:	2b02      	cmp	r3, #2
 8012574:	d10e      	bne.n	8012594 <handle_opt+0x68>
 8012576:	7bfb      	ldrb	r3, [r7, #15]
 8012578:	2b04      	cmp	r3, #4
 801257a:	d10b      	bne.n	8012594 <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	3302      	adds	r3, #2
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	021b      	lsls	r3, r3, #8
 8012584:	b29b      	uxth	r3, r3
 8012586:	697a      	ldr	r2, [r7, #20]
 8012588:	3203      	adds	r2, #3
 801258a:	7812      	ldrb	r2, [r2, #0]
 801258c:	4413      	add	r3, r2
 801258e:	b29a      	uxth	r2, r3
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 8012594:	4b10      	ldr	r3, [pc, #64]	@ (80125d8 <handle_opt+0xac>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b03      	cmp	r3, #3
 801259a:	dd0c      	ble.n	80125b6 <handle_opt+0x8a>
 801259c:	4b0f      	ldr	r3, [pc, #60]	@ (80125dc <handle_opt+0xb0>)
 801259e:	f241 325b 	movw	r2, #4955	@ 0x135b
 80125a2:	490f      	ldr	r1, [pc, #60]	@ (80125e0 <handle_opt+0xb4>)
 80125a4:	2004      	movs	r0, #4
 80125a6:	f7fd f8cd 	bl	800f744 <mg_log_prefix>
 80125aa:	7bb9      	ldrb	r1, [r7, #14]
 80125ac:	7bfa      	ldrb	r2, [r7, #15]
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	480c      	ldr	r0, [pc, #48]	@ (80125e4 <handle_opt+0xb8>)
 80125b2:	f7fd f917 	bl	800f7e4 <mg_log>
    opts += optlen;
 80125b6:	7bfb      	ldrb	r3, [r7, #15]
 80125b8:	697a      	ldr	r2, [r7, #20]
 80125ba:	4413      	add	r3, r2
 80125bc:	617b      	str	r3, [r7, #20]
    len -= optlen;
 80125be:	7bfb      	ldrb	r3, [r7, #15]
 80125c0:	693a      	ldr	r2, [r7, #16]
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	dcc3      	bgt.n	8012554 <handle_opt+0x28>
  }
}
 80125cc:	e000      	b.n	80125d0 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 80125ce:	bf00      	nop
}
 80125d0:	bf00      	nop
 80125d2:	3718      	adds	r7, #24
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	2400025c 	.word	0x2400025c
 80125dc:	08031268 	.word	0x08031268
 80125e0:	0802d330 	.word	0x0802d330
 80125e4:	0802e9f8 	.word	0x0802e9f8

080125e8 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80125e8:	b590      	push	{r4, r7, lr}
 80125ea:	b089      	sub	sp, #36	@ 0x24
 80125ec:	af02      	add	r7, sp, #8
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125f6:	2200      	movs	r2, #0
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fe fbd4 	bl	8010da8 <getpeer>
 8012600:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d002      	beq.n	801260e <rx_tcp+0x26>
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	33b0      	adds	r3, #176	@ 0xb0
 801260c:	e000      	b.n	8012610 <rx_tcp+0x28>
 801260e:	2300      	movs	r3, #0
 8012610:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d05d      	beq.n	80126d4 <rx_tcp+0xec>
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801261e:	f003 0320 	and.w	r3, r3, #32
 8012622:	b2db      	uxtb	r3, r3
 8012624:	2b00      	cmp	r3, #0
 8012626:	d055      	beq.n	80126d4 <rx_tcp+0xec>
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801262c:	7b5b      	ldrb	r3, [r3, #13]
 801262e:	2b12      	cmp	r3, #18
 8012630:	d150      	bne.n	80126d4 <rx_tcp+0xec>
    handle_opt(s, pkt->tcp);  // process options (MSS)
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012636:	4619      	mov	r1, r3
 8012638:	6938      	ldr	r0, [r7, #16]
 801263a:	f7ff ff77 	bl	801252c <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	4618      	mov	r0, r3
 8012646:	f010 fb2e 	bl	8022ca6 <mg_ntohl>
 801264a:	4602      	mov	r2, r0
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	f010 fb25 	bl	8022ca6 <mg_ntohl>
 801265c:	4603      	mov	r3, r0
 801265e:	1c5a      	adds	r2, r3, #1
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	2200      	movs	r2, #0
 801266c:	9201      	str	r2, [sp, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	9200      	str	r2, [sp, #0]
 8012672:	2210      	movs	r2, #16
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff fab0 	bl	8011bdc <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 801267c:	697a      	ldr	r2, [r7, #20]
 801267e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8012682:	f023 0320 	bic.w	r3, r3, #32
 8012686:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 801268a:	2100      	movs	r1, #0
 801268c:	6978      	ldr	r0, [r7, #20]
 801268e:	f7fd ff63 	bl	8010558 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8012692:	2200      	movs	r2, #0
 8012694:	2104      	movs	r1, #4
 8012696:	6978      	ldr	r0, [r7, #20]
 8012698:	f7f7 f93e 	bl	8009918 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80126a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d002      	beq.n	80126b2 <rx_tcp+0xca>
 80126ac:	6978      	ldr	r0, [r7, #20]
 80126ae:	f009 fb15 	bl	801bcdc <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80126b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f040 80d3 	bne.w	801286a <rx_tcp+0x282>
 80126c4:	697a      	ldr	r2, [r7, #20]
 80126c6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80126ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126ce:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 80126d2:	e0ca      	b.n	801286a <rx_tcp+0x282>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d019      	beq.n	801270e <rx_tcp+0x126>
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80126e0:	f003 0320 	and.w	r3, r3, #32
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d011      	beq.n	801270e <rx_tcp+0x126>
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126ee:	7b5b      	ldrb	r3, [r3, #13]
 80126f0:	2b10      	cmp	r3, #16
 80126f2:	d00c      	beq.n	801270e <rx_tcp+0x126>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	2200      	movs	r2, #0
 80126fc:	9201      	str	r2, [sp, #4]
 80126fe:	2200      	movs	r2, #0
 8012700:	9200      	str	r2, [sp, #0]
 8012702:	2214      	movs	r2, #20
 8012704:	6839      	ldr	r1, [r7, #0]
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff fa68 	bl	8011bdc <tx_tcp_pkt>
 801270c:	e0ad      	b.n	801286a <rx_tcp+0x282>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00b      	beq.n	801272c <rx_tcp+0x144>
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012718:	7b5b      	ldrb	r3, [r3, #13]
 801271a:	f003 0304 	and.w	r3, r3, #4
 801271e:	2b00      	cmp	r3, #0
 8012720:	d004      	beq.n	801272c <rx_tcp+0x144>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8012722:	4954      	ldr	r1, [pc, #336]	@ (8012874 <rx_tcp+0x28c>)
 8012724:	6978      	ldr	r0, [r7, #20]
 8012726:	f7f7 f917 	bl	8009958 <mg_error>
 801272a:	e09e      	b.n	801286a <rx_tcp+0x282>
  } else if (c != NULL) {
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d011      	beq.n	8012756 <rx_tcp+0x16e>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	2200      	movs	r2, #0
 8012736:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d103      	bne.n	801274c <rx_tcp+0x164>
      settmout(c,
 8012744:	2100      	movs	r1, #0
 8012746:	6978      	ldr	r0, [r7, #20]
 8012748:	f7fd ff06 	bl	8010558 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 801274c:	6839      	ldr	r1, [r7, #0]
 801274e:	6978      	ldr	r0, [r7, #20]
 8012750:	f7ff fcd4 	bl	80120fc <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 8012754:	e089      	b.n	801286a <rx_tcp+0x282>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801275a:	2201      	movs	r2, #1
 801275c:	6839      	ldr	r1, [r7, #0]
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe fb22 	bl	8010da8 <getpeer>
 8012764:	6178      	str	r0, [r7, #20]
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d10c      	bne.n	8012786 <rx_tcp+0x19e>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	2200      	movs	r2, #0
 8012774:	9201      	str	r2, [sp, #4]
 8012776:	2200      	movs	r2, #0
 8012778:	9200      	str	r2, [sp, #0]
 801277a:	2214      	movs	r2, #20
 801277c:	6839      	ldr	r1, [r7, #0]
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7ff fa2c 	bl	8011bdc <tx_tcp_pkt>
}
 8012784:	e071      	b.n	801286a <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_RST) {
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801278a:	7b5b      	ldrb	r3, [r3, #13]
 801278c:	f003 0304 	and.w	r3, r3, #4
 8012790:	2b00      	cmp	r3, #0
 8012792:	d00c      	beq.n	80127ae <rx_tcp+0x1c6>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801279a:	f003 0304 	and.w	r3, r3, #4
 801279e:	b2db      	uxtb	r3, r3
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d062      	beq.n	801286a <rx_tcp+0x282>
 80127a4:	4933      	ldr	r1, [pc, #204]	@ (8012874 <rx_tcp+0x28c>)
 80127a6:	6978      	ldr	r0, [r7, #20]
 80127a8:	f7f7 f8d6 	bl	8009958 <mg_error>
}
 80127ac:	e05d      	b.n	801286a <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_SYN) {
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127b2:	7b5b      	ldrb	r3, [r3, #13]
 80127b4:	f003 0302 	and.w	r3, r3, #2
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d016      	beq.n	80127ea <rx_tcp+0x202>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	4618      	mov	r0, r3
 80127c6:	f010 fa57 	bl	8022c78 <mg_ntohs>
 80127ca:	4603      	mov	r3, r0
 80127cc:	4618      	mov	r0, r3
 80127ce:	f010 fa6a 	bl	8022ca6 <mg_ntohl>
 80127d2:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 80127d4:	2300      	movs	r3, #0
 80127d6:	9301      	str	r3, [sp, #4]
 80127d8:	2300      	movs	r3, #0
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2212      	movs	r2, #18
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f7ff f9fa 	bl	8011bdc <tx_tcp_pkt>
}
 80127e8:	e03f      	b.n	801286a <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_FIN) {
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127ee:	7b5b      	ldrb	r3, [r3, #13]
 80127f0:	f003 0301 	and.w	r3, r3, #1
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d00c      	beq.n	8012812 <rx_tcp+0x22a>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127fc:	689b      	ldr	r3, [r3, #8]
 80127fe:	2200      	movs	r2, #0
 8012800:	9201      	str	r2, [sp, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	9200      	str	r2, [sp, #0]
 8012806:	2211      	movs	r2, #17
 8012808:	6839      	ldr	r1, [r7, #0]
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f7ff f9e6 	bl	8011bdc <tx_tcp_pkt>
}
 8012810:	e02b      	b.n	801286a <rx_tcp+0x282>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	4618      	mov	r0, r3
 801281a:	f010 fa44 	bl	8022ca6 <mg_ntohl>
 801281e:	4604      	mov	r4, r0
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012824:	881b      	ldrh	r3, [r3, #0]
 8012826:	b29b      	uxth	r3, r3
 8012828:	4618      	mov	r0, r3
 801282a:	f010 fa25 	bl	8022c78 <mg_ntohs>
 801282e:	4603      	mov	r3, r0
 8012830:	3301      	adds	r3, #1
 8012832:	429c      	cmp	r4, r3
 8012834:	d104      	bne.n	8012840 <rx_tcp+0x258>
    accept_conn(c, pkt);
 8012836:	6839      	ldr	r1, [r7, #0]
 8012838:	6978      	ldr	r0, [r7, #20]
 801283a:	f7ff fa15 	bl	8011c68 <accept_conn>
}
 801283e:	e014      	b.n	801286a <rx_tcp+0x282>
  } else if (!c->is_accepted) {  // no peer
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012846:	f003 0304 	and.w	r3, r3, #4
 801284a:	b2db      	uxtb	r3, r3
 801284c:	2b00      	cmp	r3, #0
 801284e:	d10c      	bne.n	801286a <rx_tcp+0x282>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012854:	689b      	ldr	r3, [r3, #8]
 8012856:	2200      	movs	r2, #0
 8012858:	9201      	str	r2, [sp, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	9200      	str	r2, [sp, #0]
 801285e:	2214      	movs	r2, #20
 8012860:	6839      	ldr	r1, [r7, #0]
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff f9ba 	bl	8011bdc <tx_tcp_pkt>
}
 8012868:	e7ff      	b.n	801286a <rx_tcp+0x282>
 801286a:	bf00      	nop
 801286c:	371c      	adds	r7, #28
 801286e:	46bd      	mov	sp, r7
 8012870:	bd90      	pop	{r4, r7, pc}
 8012872:	bf00      	nop
 8012874:	0802ea18 	.word	0x0802ea18

08012878 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8012878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801287a:	b08b      	sub	sp, #44	@ 0x2c
 801287c:	af04      	add	r7, sp, #16
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	69db      	ldr	r3, [r3, #28]
 8012886:	88db      	ldrh	r3, [r3, #6]
 8012888:	b29b      	uxth	r3, r3
 801288a:	4618      	mov	r0, r3
 801288c:	f010 f9f4 	bl	8022c78 <mg_ntohs>
 8012890:	4603      	mov	r3, r0
 8012892:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8012894:	8afb      	ldrh	r3, [r7, #22]
 8012896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801289a:	2b00      	cmp	r3, #0
 801289c:	d104      	bne.n	80128a8 <rx_ip+0x30>
 801289e:	8afb      	ldrh	r3, [r7, #22]
 80128a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d026      	beq.n	80128f6 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	69db      	ldr	r3, [r3, #28]
 80128ac:	7a5b      	ldrb	r3, [r3, #9]
 80128ae:	2b11      	cmp	r3, #17
 80128b0:	d105      	bne.n	80128be <rx_ip+0x46>
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	69db      	ldr	r3, [r3, #28]
 80128b6:	f103 0214 	add.w	r2, r3, #20
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	69db      	ldr	r3, [r3, #28]
 80128c2:	7a5b      	ldrb	r3, [r3, #9]
 80128c4:	2b06      	cmp	r3, #6
 80128c6:	d105      	bne.n	80128d4 <rx_ip+0x5c>
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	69db      	ldr	r3, [r3, #28]
 80128cc:	f103 0214 	add.w	r2, r3, #20
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128d8:	2200      	movs	r2, #0
 80128da:	6839      	ldr	r1, [r7, #0]
 80128dc:	4618      	mov	r0, r3
 80128de:	f7fe fa63 	bl	8010da8 <getpeer>
 80128e2:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	f000 811b 	beq.w	8012b22 <rx_ip+0x2aa>
 80128ec:	4992      	ldr	r1, [pc, #584]	@ (8012b38 <rx_ip+0x2c0>)
 80128ee:	68f8      	ldr	r0, [r7, #12]
 80128f0:	f7f7 f832 	bl	8009958 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 80128f4:	e115      	b.n	8012b22 <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	69db      	ldr	r3, [r3, #28]
 80128fa:	7a5b      	ldrb	r3, [r3, #9]
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d116      	bne.n	801292e <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	69db      	ldr	r3, [r3, #28]
 8012904:	f103 0214 	add.w	r2, r3, #20
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	2b03      	cmp	r3, #3
 8012912:	f240 8108 	bls.w	8012b26 <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801291a:	3304      	adds	r3, #4
 801291c:	4619      	mov	r1, r3
 801291e:	6838      	ldr	r0, [r7, #0]
 8012920:	f7fd fda2 	bl	8010468 <mkpay>
    rx_icmp(ifp, pkt);
 8012924:	6839      	ldr	r1, [r7, #0]
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7fe fbc2 	bl	80110b0 <rx_icmp>
 801292c:	e100      	b.n	8012b30 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	69db      	ldr	r3, [r3, #28]
 8012932:	7a5b      	ldrb	r3, [r3, #9]
 8012934:	2b11      	cmp	r3, #17
 8012936:	f040 808b 	bne.w	8012a50 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	69db      	ldr	r3, [r3, #28]
 801293e:	f103 0214 	add.w	r2, r3, #20
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	68db      	ldr	r3, [r3, #12]
 801294a:	2b07      	cmp	r3, #7
 801294c:	f240 80ed 	bls.w	8012b2a <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012954:	3308      	adds	r3, #8
 8012956:	4619      	mov	r1, r3
 8012958:	6838      	ldr	r0, [r7, #0]
 801295a:	f7fd fd85 	bl	8010468 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801295e:	4b77      	ldr	r3, [pc, #476]	@ (8012b3c <rx_ip+0x2c4>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	2b03      	cmp	r3, #3
 8012964:	dd2d      	ble.n	80129c2 <rx_ip+0x14a>
 8012966:	4b76      	ldr	r3, [pc, #472]	@ (8012b40 <rx_ip+0x2c8>)
 8012968:	f241 32a7 	movw	r2, #5031	@ 0x13a7
 801296c:	4975      	ldr	r1, [pc, #468]	@ (8012b44 <rx_ip+0x2cc>)
 801296e:	2004      	movs	r0, #4
 8012970:	f7fc fee8 	bl	800f744 <mg_log_prefix>
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	69db      	ldr	r3, [r3, #28]
 8012978:	f103 050c 	add.w	r5, r3, #12
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012980:	881b      	ldrh	r3, [r3, #0]
 8012982:	b29b      	uxth	r3, r3
 8012984:	4618      	mov	r0, r3
 8012986:	f010 f977 	bl	8022c78 <mg_ntohs>
 801298a:	4603      	mov	r3, r0
 801298c:	461e      	mov	r6, r3
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	69db      	ldr	r3, [r3, #28]
 8012992:	f103 0410 	add.w	r4, r3, #16
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801299a:	885b      	ldrh	r3, [r3, #2]
 801299c:	b29b      	uxth	r3, r3
 801299e:	4618      	mov	r0, r3
 80129a0:	f010 f96a 	bl	8022c78 <mg_ntohs>
 80129a4:	4603      	mov	r3, r0
 80129a6:	461a      	mov	r2, r3
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	9303      	str	r3, [sp, #12]
 80129ae:	9202      	str	r2, [sp, #8]
 80129b0:	9401      	str	r4, [sp, #4]
 80129b2:	4b65      	ldr	r3, [pc, #404]	@ (8012b48 <rx_ip+0x2d0>)
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	4633      	mov	r3, r6
 80129b8:	462a      	mov	r2, r5
 80129ba:	4963      	ldr	r1, [pc, #396]	@ (8012b48 <rx_ip+0x2d0>)
 80129bc:	4863      	ldr	r0, [pc, #396]	@ (8012b4c <rx_ip+0x2d4>)
 80129be:	f7fc ff11 	bl	800f7e4 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	7f1b      	ldrb	r3, [r3, #28]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d01c      	beq.n	8012a04 <rx_ip+0x18c>
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129ce:	885b      	ldrh	r3, [r3, #2]
 80129d0:	b29c      	uxth	r4, r3
 80129d2:	2044      	movs	r0, #68	@ 0x44
 80129d4:	f010 f950 	bl	8022c78 <mg_ntohs>
 80129d8:	4603      	mov	r3, r0
 80129da:	429c      	cmp	r4, r3
 80129dc:	d112      	bne.n	8012a04 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129e2:	f103 0208 	add.w	r2, r3, #8
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129ee:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 80129f2:	4619      	mov	r1, r3
 80129f4:	6838      	ldr	r0, [r7, #0]
 80129f6:	f7fd fd37 	bl	8010468 <mkpay>
      rx_dhcp_client(ifp, pkt);
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f7fe fbb3 	bl	8011168 <rx_dhcp_client>
 8012a02:	e095      	b.n	8012b30 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	7f5b      	ldrb	r3, [r3, #29]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d01c      	beq.n	8012a46 <rx_ip+0x1ce>
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a10:	885b      	ldrh	r3, [r3, #2]
 8012a12:	b29c      	uxth	r4, r3
 8012a14:	2043      	movs	r0, #67	@ 0x43
 8012a16:	f010 f92f 	bl	8022c78 <mg_ntohs>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	429c      	cmp	r4, r3
 8012a1e:	d112      	bne.n	8012a46 <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a24:	f103 0208 	add.w	r2, r3, #8
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a30:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8012a34:	4619      	mov	r1, r3
 8012a36:	6838      	ldr	r0, [r7, #0]
 8012a38:	f7fd fd16 	bl	8010468 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8012a3c:	6839      	ldr	r1, [r7, #0]
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7fe fd7a 	bl	8011538 <rx_dhcp_server>
 8012a44:	e074      	b.n	8012b30 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 8012a46:	6839      	ldr	r1, [r7, #0]
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f7fe ff63 	bl	8011914 <rx_udp>
 8012a4e:	e06f      	b.n	8012b30 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	69db      	ldr	r3, [r3, #28]
 8012a54:	7a5b      	ldrb	r3, [r3, #9]
 8012a56:	2b06      	cmp	r3, #6
 8012a58:	d16a      	bne.n	8012b30 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	69db      	ldr	r3, [r3, #28]
 8012a5e:	f103 0214 	add.w	r2, r3, #20
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	2b13      	cmp	r3, #19
 8012a6c:	d95f      	bls.n	8012b2e <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a72:	3314      	adds	r3, #20
 8012a74:	4619      	mov	r1, r3
 8012a76:	6838      	ldr	r0, [r7, #0]
 8012a78:	f7fd fcf6 	bl	8010468 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	69db      	ldr	r3, [r3, #28]
 8012a80:	885b      	ldrh	r3, [r3, #2]
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	4618      	mov	r0, r3
 8012a86:	f010 f8f7 	bl	8022c78 <mg_ntohs>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a92:	7b1b      	ldrb	r3, [r3, #12]
 8012a94:	091b      	lsrs	r3, r3, #4
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	3305      	adds	r3, #5
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8012aa0:	8aba      	ldrh	r2, [r7, #20]
 8012aa2:	8a7b      	ldrh	r3, [r7, #18]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d305      	bcc.n	8012ab4 <rx_ip+0x23c>
 8012aa8:	8aba      	ldrh	r2, [r7, #20]
 8012aaa:	8a7b      	ldrh	r3, [r7, #18]
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	461a      	mov	r2, r3
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8012ab4:	4b21      	ldr	r3, [pc, #132]	@ (8012b3c <rx_ip+0x2c4>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	2b03      	cmp	r3, #3
 8012aba:	dd2d      	ble.n	8012b18 <rx_ip+0x2a0>
 8012abc:	4b20      	ldr	r3, [pc, #128]	@ (8012b40 <rx_ip+0x2c8>)
 8012abe:	f241 32bc 	movw	r2, #5052	@ 0x13bc
 8012ac2:	4920      	ldr	r1, [pc, #128]	@ (8012b44 <rx_ip+0x2cc>)
 8012ac4:	2004      	movs	r0, #4
 8012ac6:	f7fc fe3d 	bl	800f744 <mg_log_prefix>
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	69db      	ldr	r3, [r3, #28]
 8012ace:	f103 050c 	add.w	r5, r3, #12
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ad6:	881b      	ldrh	r3, [r3, #0]
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	4618      	mov	r0, r3
 8012adc:	f010 f8cc 	bl	8022c78 <mg_ntohs>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	461e      	mov	r6, r3
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	69db      	ldr	r3, [r3, #28]
 8012ae8:	f103 0410 	add.w	r4, r3, #16
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012af0:	885b      	ldrh	r3, [r3, #2]
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4618      	mov	r0, r3
 8012af6:	f010 f8bf 	bl	8022c78 <mg_ntohs>
 8012afa:	4603      	mov	r3, r0
 8012afc:	461a      	mov	r2, r3
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	9303      	str	r3, [sp, #12]
 8012b04:	9202      	str	r2, [sp, #8]
 8012b06:	9401      	str	r4, [sp, #4]
 8012b08:	4b0f      	ldr	r3, [pc, #60]	@ (8012b48 <rx_ip+0x2d0>)
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	4633      	mov	r3, r6
 8012b0e:	462a      	mov	r2, r5
 8012b10:	490d      	ldr	r1, [pc, #52]	@ (8012b48 <rx_ip+0x2d0>)
 8012b12:	480f      	ldr	r0, [pc, #60]	@ (8012b50 <rx_ip+0x2d8>)
 8012b14:	f7fc fe66 	bl	800f7e4 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 8012b18:	6839      	ldr	r1, [r7, #0]
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7ff fd64 	bl	80125e8 <rx_tcp>
 8012b20:	e006      	b.n	8012b30 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8012b22:	bf00      	nop
 8012b24:	e004      	b.n	8012b30 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8012b26:	bf00      	nop
 8012b28:	e002      	b.n	8012b30 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8012b2a:	bf00      	nop
 8012b2c:	e000      	b.n	8012b30 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8012b2e:	bf00      	nop
  }
}
 8012b30:	371c      	adds	r7, #28
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b36:	bf00      	nop
 8012b38:	0802ea24 	.word	0x0802ea24
 8012b3c:	2400025c 	.word	0x2400025c
 8012b40:	08031274 	.word	0x08031274
 8012b44:	0802d330 	.word	0x0802d330
 8012b48:	08014175 	.word	0x08014175
 8012b4c:	0802ea40 	.word	0x0802ea40
 8012b50:	0802ea5c 	.word	0x0802ea5c

08012b54 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	6a1b      	ldr	r3, [r3, #32]
 8012b62:	799b      	ldrb	r3, [r3, #6]
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d004      	beq.n	8012b72 <rx_ip6+0x1e>
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	6a1b      	ldr	r3, [r3, #32]
 8012b6c:	799b      	ldrb	r3, [r3, #6]
 8012b6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012b70:	d115      	bne.n	8012b9e <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	6a1b      	ldr	r3, [r3, #32]
 8012b76:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	2b03      	cmp	r3, #3
 8012b84:	d922      	bls.n	8012bcc <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b8a:	3304      	adds	r3, #4
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	6838      	ldr	r0, [r7, #0]
 8012b90:	f7fd fc6a 	bl	8010468 <mkpay>
    rx_icmp(ifp, pkt);
 8012b94:	6839      	ldr	r1, [r7, #0]
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fe fa8a 	bl	80110b0 <rx_icmp>
 8012b9c:	e019      	b.n	8012bd2 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	6a1b      	ldr	r3, [r3, #32]
 8012ba2:	799b      	ldrb	r3, [r3, #6]
 8012ba4:	2b11      	cmp	r3, #17
 8012ba6:	d114      	bne.n	8012bd2 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	6a1b      	ldr	r3, [r3, #32]
 8012bac:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	2b07      	cmp	r3, #7
 8012bba:	d909      	bls.n	8012bd0 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bc0:	3308      	adds	r3, #8
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	6838      	ldr	r0, [r7, #0]
 8012bc6:	f7fd fc4f 	bl	8010468 <mkpay>
 8012bca:	e002      	b.n	8012bd2 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8012bcc:	bf00      	nop
 8012bce:	e000      	b.n	8012bd2 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8012bd0:	bf00      	nop
  }
}
 8012bd2:	3708      	adds	r7, #8
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8012bd8:	b590      	push	{r4, r7, lr}
 8012bda:	b093      	sub	sp, #76	@ 0x4c
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 8012be4:	f107 0314 	add.w	r3, r7, #20
 8012be8:	2234      	movs	r2, #52	@ 0x34
 8012bea:	2100      	movs	r1, #0
 8012bec:	4618      	mov	r0, r3
 8012bee:	f015 fdd7 	bl	80287a0 <memset>
  pkt.raw.buf = (char *) buf;
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	2b0d      	cmp	r3, #13
 8012c02:	f240 80df 	bls.w	8012dc4 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d013      	beq.n	8012c38 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8012c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c12:	4618      	mov	r0, r3
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2206      	movs	r2, #6
 8012c18:	4619      	mov	r1, r3
 8012c1a:	f015 fd97 	bl	802874c <memcmp>
 8012c1e:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d009      	beq.n	8012c38 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8012c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c26:	2206      	movs	r2, #6
 8012c28:	4970      	ldr	r1, [pc, #448]	@ (8012dec <mg_tcpip_rx+0x214>)
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f015 fd8e 	bl	802874c <memcmp>
 8012c30:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f040 80c8 	bne.w	8012dc8 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d01a      	beq.n	8012c78 <mg_tcpip_rx+0xa0>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b04      	cmp	r3, #4
 8012c46:	d917      	bls.n	8012c78 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	3b04      	subs	r3, #4
 8012c4c:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	68b9      	ldr	r1, [r7, #8]
 8012c52:	2000      	movs	r0, #0
 8012c54:	f00f ff90 	bl	8022b78 <mg_crc32>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	4413      	add	r3, r2
 8012c62:	4618      	mov	r0, r3
 8012c64:	f107 0310 	add.w	r3, r7, #16
 8012c68:	2204      	movs	r2, #4
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	f015 fd6e 	bl	802874c <memcmp>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	f040 80aa 	bne.w	8012dcc <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 8012c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c7a:	899b      	ldrh	r3, [r3, #12]
 8012c7c:	b29c      	uxth	r4, r3
 8012c7e:	f640 0006 	movw	r0, #2054	@ 0x806
 8012c82:	f00f fff9 	bl	8022c78 <mg_ntohs>
 8012c86:	4603      	mov	r3, r0
 8012c88:	429c      	cmp	r4, r3
 8012c8a:	d114      	bne.n	8012cb6 <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c8e:	330e      	adds	r3, #14
 8012c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	2b29      	cmp	r3, #41	@ 0x29
 8012c96:	f240 809b 	bls.w	8012dd0 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 8012c9a:	f107 0314 	add.w	r3, r7, #20
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	2103      	movs	r1, #3
 8012ca2:	68f8      	ldr	r0, [r7, #12]
 8012ca4:	f7fd fbcc 	bl	8010440 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 8012ca8:	f107 0314 	add.w	r3, r7, #20
 8012cac:	4619      	mov	r1, r3
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f7fe f8ec 	bl	8010e8c <rx_arp>
 8012cb4:	e097      	b.n	8012de6 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	b29c      	uxth	r4, r3
 8012cbc:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8012cc0:	f00f ffda 	bl	8022c78 <mg_ntohs>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	429c      	cmp	r4, r3
 8012cc8:	d11b      	bne.n	8012d02 <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8012cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ccc:	330e      	adds	r3, #14
 8012cce:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	2b35      	cmp	r3, #53	@ 0x35
 8012cd4:	d97e      	bls.n	8012dd4 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8012cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	091b      	lsrs	r3, r3, #4
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	2b06      	cmp	r3, #6
 8012ce0:	d17a      	bne.n	8012dd8 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 8012ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ce4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012ce8:	f107 0314 	add.w	r3, r7, #20
 8012cec:	4611      	mov	r1, r2
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7fd fbba 	bl	8010468 <mkpay>
    rx_ip6(ifp, &pkt);
 8012cf4:	f107 0314 	add.w	r3, r7, #20
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f7ff ff2a 	bl	8012b54 <rx_ip6>
 8012d00:	e071      	b.n	8012de6 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8012d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d04:	899b      	ldrh	r3, [r3, #12]
 8012d06:	b29c      	uxth	r4, r3
 8012d08:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012d0c:	f00f ffb4 	bl	8022c78 <mg_ntohs>
 8012d10:	4603      	mov	r3, r0
 8012d12:	429c      	cmp	r4, r3
 8012d14:	d133      	bne.n	8012d7e <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8012d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d18:	330e      	adds	r3, #14
 8012d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	2b21      	cmp	r3, #33	@ 0x21
 8012d20:	d95c      	bls.n	8012ddc <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8012d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d24:	885b      	ldrh	r3, [r3, #2]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f00f ffa5 	bl	8022c78 <mg_ntohs>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	f103 020e 	add.w	r2, r3, #14
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d208      	bcs.n	8012d4c <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8012d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3c:	885b      	ldrh	r3, [r3, #2]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	4618      	mov	r0, r3
 8012d42:	f00f ff99 	bl	8022c78 <mg_ntohs>
 8012d46:	4603      	mov	r3, r0
 8012d48:	330e      	adds	r3, #14
 8012d4a:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	2b21      	cmp	r3, #33	@ 0x21
 8012d50:	d946      	bls.n	8012de0 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8012d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	091b      	lsrs	r3, r3, #4
 8012d58:	b2db      	uxtb	r3, r3
 8012d5a:	2b04      	cmp	r3, #4
 8012d5c:	d142      	bne.n	8012de4 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d60:	f103 0214 	add.w	r2, r3, #20
 8012d64:	f107 0314 	add.w	r3, r7, #20
 8012d68:	4611      	mov	r1, r2
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fd fb7c 	bl	8010468 <mkpay>
    rx_ip(ifp, &pkt);
 8012d70:	f107 0314 	add.w	r3, r7, #20
 8012d74:	4619      	mov	r1, r3
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f7ff fd7e 	bl	8012878 <rx_ip>
 8012d7c:	e033      	b.n	8012de6 <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8012d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8012df0 <mg_tcpip_rx+0x218>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	2b02      	cmp	r3, #2
 8012d84:	dd11      	ble.n	8012daa <mg_tcpip_rx+0x1d2>
 8012d86:	4b1b      	ldr	r3, [pc, #108]	@ (8012df4 <mg_tcpip_rx+0x21c>)
 8012d88:	f241 32fb 	movw	r2, #5115	@ 0x13fb
 8012d8c:	491a      	ldr	r1, [pc, #104]	@ (8012df8 <mg_tcpip_rx+0x220>)
 8012d8e:	2003      	movs	r0, #3
 8012d90:	f7fc fcd8 	bl	800f744 <mg_log_prefix>
 8012d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d96:	899b      	ldrh	r3, [r3, #12]
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f00f ff6c 	bl	8022c78 <mg_ntohs>
 8012da0:	4603      	mov	r3, r0
 8012da2:	4619      	mov	r1, r3
 8012da4:	4815      	ldr	r0, [pc, #84]	@ (8012dfc <mg_tcpip_rx+0x224>)
 8012da6:	f7fc fd1d 	bl	800f7e4 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8012daa:	4b11      	ldr	r3, [pc, #68]	@ (8012df0 <mg_tcpip_rx+0x218>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	dd19      	ble.n	8012de6 <mg_tcpip_rx+0x20e>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2b20      	cmp	r3, #32
 8012db6:	bf28      	it	cs
 8012db8:	2320      	movcs	r3, #32
 8012dba:	4619      	mov	r1, r3
 8012dbc:	68b8      	ldr	r0, [r7, #8]
 8012dbe:	f7fc fd47 	bl	800f850 <mg_hexdump>
 8012dc2:	e010      	b.n	8012de6 <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8012dc4:	bf00      	nop
 8012dc6:	e00e      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    return;
 8012dc8:	bf00      	nop
 8012dca:	e00c      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8012dcc:	bf00      	nop
 8012dce:	e00a      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8012dd0:	bf00      	nop
 8012dd2:	e008      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8012dd4:	bf00      	nop
 8012dd6:	e006      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8012dd8:	bf00      	nop
 8012dda:	e004      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8012ddc:	bf00      	nop
 8012dde:	e002      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8012de0:	bf00      	nop
 8012de2:	e000      	b.n	8012de6 <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8012de4:	bf00      	nop
  }
}
 8012de6:	374c      	adds	r7, #76	@ 0x4c
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd90      	pop	{r4, r7, pc}
 8012dec:	08030ca0 	.word	0x08030ca0
 8012df0:	2400025c 	.word	0x2400025c
 8012df4:	0803127c 	.word	0x0803127c
 8012df8:	0802d330 	.word	0x0802d330
 8012dfc:	0802ea78 	.word	0x0802ea78

08012e00 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8012e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e02:	b095      	sub	sp, #84	@ 0x54
 8012e04:	af06      	add	r7, sp, #24
 8012e06:	6178      	str	r0, [r7, #20]
 8012e08:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8012e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012e16:	e9cd 2300 	strd	r2, r3, [sp]
 8012e1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012e1e:	f04f 0300 	mov.w	r3, #0
 8012e22:	4608      	mov	r0, r1
 8012e24:	f005 f966 	bl	80180f4 <mg_timer_expired>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 8012e2e:	6979      	ldr	r1, [r7, #20]
 8012e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012e34:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 8012e38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d00b      	beq.n	8012e58 <mg_tcpip_poll+0x58>
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012e46:	2b03      	cmp	r3, #3
 8012e48:	d106      	bne.n	8012e58 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	2204      	movs	r2, #4
 8012e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 8012e52:	6978      	ldr	r0, [r7, #20]
 8012e54:	f7fd fc68 	bl	8010728 <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e5c:	68db      	ldr	r3, [r3, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d075      	beq.n	8012f4e <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8012e6c:	4611      	mov	r1, r2
 8012e6e:	6978      	ldr	r0, [r7, #20]
 8012e70:	4798      	blx	r3
 8012e72:	4603      	mov	r3, r0
 8012e74:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 8012e78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d066      	beq.n	8012f4e <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	bf14      	ite	ne
 8012e8a:	2301      	movne	r3, #1
 8012e8c:	2300      	moveq	r3, #0
 8012e8e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8012e92:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8012e96:	f083 0301 	eor.w	r3, r3, #1
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d006      	beq.n	8012eae <mg_tcpip_poll+0xae>
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	7f1b      	ldrb	r3, [r3, #28]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d002      	beq.n	8012eae <mg_tcpip_poll+0xae>
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 8012eae:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8012eb2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d01a      	beq.n	8012ef0 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8012eba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8012ebe:	f083 0301 	eor.w	r3, r3, #1
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d001      	beq.n	8012ecc <mg_tcpip_poll+0xcc>
 8012ec8:	2300      	movs	r3, #0
 8012eca:	e00a      	b.n	8012ee2 <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d103      	bne.n	8012edc <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 8012edc:	2301      	movs	r3, #1
 8012ede:	e000      	b.n	8012ee2 <mg_tcpip_poll+0xe2>
 8012ee0:	2303      	movs	r3, #3
 8012ee2:	697a      	ldr	r2, [r7, #20]
 8012ee4:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 8012ee8:	6978      	ldr	r0, [r7, #20]
 8012eea:	f7fd fc1d 	bl	8010728 <onstatechange>
 8012eee:	e016      	b.n	8012f1e <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	7f1b      	ldrb	r3, [r3, #28]
 8012ef4:	f083 0301 	eor.w	r3, r3, #1
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00f      	beq.n	8012f1e <mg_tcpip_poll+0x11e>
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d10a      	bne.n	8012f1e <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d006      	beq.n	8012f1e <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	2203      	movs	r2, #3
 8012f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 8012f18:	6978      	ldr	r0, [r7, #20]
 8012f1a:	f7fd fc05 	bl	8010728 <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10d      	bne.n	8012f44 <mg_tcpip_poll+0x144>
 8012f28:	4ba4      	ldr	r3, [pc, #656]	@ (80131bc <mg_tcpip_poll+0x3bc>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	dd09      	ble.n	8012f44 <mg_tcpip_poll+0x144>
 8012f30:	4ba3      	ldr	r3, [pc, #652]	@ (80131c0 <mg_tcpip_poll+0x3c0>)
 8012f32:	f241 4224 	movw	r2, #5156	@ 0x1424
 8012f36:	49a3      	ldr	r1, [pc, #652]	@ (80131c4 <mg_tcpip_poll+0x3c4>)
 8012f38:	2001      	movs	r0, #1
 8012f3a:	f7fc fc03 	bl	800f744 <mg_log_prefix>
 8012f3e:	48a2      	ldr	r0, [pc, #648]	@ (80131c8 <mg_tcpip_poll+0x3c8>)
 8012f40:	f7fc fc50 	bl	800f7e4 <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 8012f44:	2200      	movs	r2, #0
 8012f46:	2104      	movs	r1, #4
 8012f48:	6978      	ldr	r0, [r7, #20]
 8012f4a:	f7fd fa79 	bl	8010440 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 81a5 	beq.w	80132a4 <mg_tcpip_poll+0x4a4>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	7f1b      	ldrb	r3, [r3, #28]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d055      	beq.n	801300e <mg_tcpip_poll+0x20e>
 8012f62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d051      	beq.n	801300e <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d103      	bne.n	8012f7c <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8012f74:	6978      	ldr	r0, [r7, #20]
 8012f76:	f7fd fedb 	bl	8010d30 <tx_dhcp_discover>
 8012f7a:	e048      	b.n	801300e <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012f82:	2b04      	cmp	r3, #4
 8012f84:	d143      	bne.n	801300e <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	d03e      	beq.n	801300e <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8012f9c:	4290      	cmp	r0, r2
 8012f9e:	eb71 0303 	sbcs.w	r3, r1, r3
 8012fa2:	d30a      	bcc.n	8012fba <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 8012fb2:	6978      	ldr	r0, [r7, #20]
 8012fb4:	f7fd fbb8 	bl	8010728 <onstatechange>
 8012fb8:	e029      	b.n	801300e <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8012fc0:	4982      	ldr	r1, [pc, #520]	@ (80131cc <mg_tcpip_poll+0x3cc>)
 8012fc2:	1854      	adds	r4, r2, r1
 8012fc4:	f143 0500 	adc.w	r5, r3, #0
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8012fce:	42a2      	cmp	r2, r4
 8012fd0:	41ab      	sbcs	r3, r5
 8012fd2:	d21c      	bcs.n	801300e <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8012fda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012fde:	f04f 0300 	mov.w	r3, #0
 8012fe2:	f7ed fc09 	bl	80007f8 <__aeabi_uldivmod>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	460b      	mov	r3, r1
 8012fea:	4610      	mov	r0, r2
 8012fec:	4619      	mov	r1, r3
 8012fee:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8012ff2:	f04f 0300 	mov.w	r3, #0
 8012ff6:	f7ed fbff 	bl	80007f8 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8012ffa:	4313      	orrs	r3, r2
 8012ffc:	d107      	bne.n	801300e <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	689a      	ldr	r2, [r3, #8]
 8013002:	f04f 33ff 	mov.w	r3, #4294967295
 8013006:	4972      	ldr	r1, [pc, #456]	@ (80131d0 <mg_tcpip_poll+0x3d0>)
 8013008:	6978      	ldr	r0, [r7, #20]
 801300a:	f7fd fe5f 	bl	8010ccc <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d019      	beq.n	801304c <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801301c:	689b      	ldr	r3, [r3, #8]
 801301e:	697a      	ldr	r2, [r7, #20]
 8013020:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8013022:	697a      	ldr	r2, [r7, #20]
 8013024:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8013026:	697a      	ldr	r2, [r7, #20]
 8013028:	4798      	blx	r3
 801302a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 801302c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801302e:	2b00      	cmp	r3, #0
 8013030:	d024      	beq.n	801307c <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013036:	1c5a      	adds	r2, r3, #1
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013042:	4619      	mov	r1, r3
 8013044:	6978      	ldr	r0, [r7, #20]
 8013046:	f7ff fdc7 	bl	8012bd8 <mg_tcpip_rx>
 801304a:	e017      	b.n	801307c <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	3334      	adds	r3, #52	@ 0x34
 8013050:	f107 0220 	add.w	r2, r7, #32
 8013054:	4611      	mov	r1, r2
 8013056:	4618      	mov	r0, r3
 8013058:	f001 faba 	bl	80145d0 <mg_queue_next>
 801305c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 801305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00b      	beq.n	801307c <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 8013064:	6a3b      	ldr	r3, [r7, #32]
 8013066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013068:	4619      	mov	r1, r3
 801306a:	6978      	ldr	r0, [r7, #20]
 801306c:	f7ff fdb4 	bl	8012bd8 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	3334      	adds	r3, #52	@ 0x34
 8013074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013076:	4618      	mov	r0, r3
 8013078:	f001 fb28 	bl	80146cc <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	637b      	str	r3, [r7, #52]	@ 0x34
 8013084:	e109      	b.n	801329a <mg_tcpip_poll+0x49a>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 8013086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013088:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801308c:	f003 0301 	and.w	r3, r3, #1
 8013090:	b2db      	uxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d008      	beq.n	80130a8 <mg_tcpip_poll+0x2a8>
 8013096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013098:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801309c:	f003 0310 	and.w	r3, r3, #16
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	f000 80f3 	beq.w	801328e <mg_tcpip_poll+0x48e>
 80130a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80130ae:	f003 0301 	and.w	r3, r3, #1
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	f040 80ea 	bne.w	801328e <mg_tcpip_poll+0x48e>
 80130ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130bc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80130c0:	f003 0308 	and.w	r3, r3, #8
 80130c4:	b2db      	uxtb	r3, r3
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	f040 80e1 	bne.w	801328e <mg_tcpip_poll+0x48e>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 80130cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130ce:	33b0      	adds	r3, #176	@ 0xb0
 80130d0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80130d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130d4:	331c      	adds	r3, #28
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80130e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80130e2:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80130e6:	4290      	cmp	r0, r2
 80130e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80130ec:	f080 80d2 	bcs.w	8013294 <mg_tcpip_poll+0x494>
      if (s->ttype == MIP_TTYPE_ARP) {
 80130f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	d104      	bne.n	8013104 <mg_tcpip_poll+0x304>
        mg_error(c, "ARP timeout");
 80130fa:	4936      	ldr	r1, [pc, #216]	@ (80131d4 <mg_tcpip_poll+0x3d4>)
 80130fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80130fe:	f7f6 fc2b 	bl	8009958 <mg_error>
 8013102:	e0bf      	b.n	8013284 <mg_tcpip_poll+0x484>
      } else if (c->is_udp) {
 8013104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013106:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801310a:	f003 0301 	and.w	r3, r3, #1
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	f040 80be 	bne.w	8013292 <mg_tcpip_poll+0x492>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8013116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013118:	f893 3020 	ldrb.w	r3, [r3, #32]
 801311c:	2b01      	cmp	r3, #1
 801311e:	d142      	bne.n	80131a6 <mg_tcpip_poll+0x3a6>
 8013120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013122:	691a      	ldr	r2, [r3, #16]
 8013124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013126:	685b      	ldr	r3, [r3, #4]
 8013128:	429a      	cmp	r2, r3
 801312a:	d03c      	beq.n	80131a6 <mg_tcpip_poll+0x3a6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 801312c:	4b23      	ldr	r3, [pc, #140]	@ (80131bc <mg_tcpip_poll+0x3bc>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	2b03      	cmp	r3, #3
 8013132:	dd0f      	ble.n	8013154 <mg_tcpip_poll+0x354>
 8013134:	4b22      	ldr	r3, [pc, #136]	@ (80131c0 <mg_tcpip_poll+0x3c0>)
 8013136:	f241 4259 	movw	r2, #5209	@ 0x1459
 801313a:	4922      	ldr	r1, [pc, #136]	@ (80131c4 <mg_tcpip_poll+0x3c4>)
 801313c:	2004      	movs	r0, #4
 801313e:	f7fc fb01 	bl	800f744 <mg_log_prefix>
 8013142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013144:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8013146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	4822      	ldr	r0, [pc, #136]	@ (80131d8 <mg_tcpip_poll+0x3d8>)
 8013150:	f7fc fb48 	bl	800f7e4 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8013154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013156:	f103 061a 	add.w	r6, r3, #26
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	613b      	str	r3, [r7, #16]
 801315e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013160:	8b1c      	ldrh	r4, [r3, #24]
 8013162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013164:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8013166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	4618      	mov	r0, r3
 801316c:	f00f fd9b 	bl	8022ca6 <mg_ntohl>
 8013170:	6078      	str	r0, [r7, #4]
 8013172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	4618      	mov	r0, r3
 8013178:	f00f fd95 	bl	8022ca6 <mg_ntohl>
 801317c:	4603      	mov	r3, r0
 801317e:	2200      	movs	r2, #0
 8013180:	9205      	str	r2, [sp, #20]
 8013182:	2200      	movs	r2, #0
 8013184:	9204      	str	r2, [sp, #16]
 8013186:	9303      	str	r3, [sp, #12]
 8013188:	6879      	ldr	r1, [r7, #4]
 801318a:	9102      	str	r1, [sp, #8]
 801318c:	9501      	str	r5, [sp, #4]
 801318e:	9400      	str	r4, [sp, #0]
 8013190:	2310      	movs	r3, #16
 8013192:	693a      	ldr	r2, [r7, #16]
 8013194:	4631      	mov	r1, r6
 8013196:	6978      	ldr	r0, [r7, #20]
 8013198:	f7fe fc2e 	bl	80119f8 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 801319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801319e:	685a      	ldr	r2, [r3, #4]
 80131a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a2:	611a      	str	r2, [r3, #16]
 80131a4:	e06e      	b.n	8013284 <mg_tcpip_poll+0x484>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80131a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80131ac:	2b03      	cmp	r3, #3
 80131ae:	d117      	bne.n	80131e0 <mg_tcpip_poll+0x3e0>
        mg_error(c, "Connection timeout");
 80131b0:	490a      	ldr	r1, [pc, #40]	@ (80131dc <mg_tcpip_poll+0x3dc>)
 80131b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80131b4:	f7f6 fbd0 	bl	8009958 <mg_error>
 80131b8:	e064      	b.n	8013284 <mg_tcpip_poll+0x484>
 80131ba:	bf00      	nop
 80131bc:	2400025c 	.word	0x2400025c
 80131c0:	08031288 	.word	0x08031288
 80131c4:	0802d330 	.word	0x0802d330
 80131c8:	0802ea8c 	.word	0x0802ea8c
 80131cc:	001b7740 	.word	0x001b7740
 80131d0:	08030ca0 	.word	0x08030ca0
 80131d4:	0802ea9c 	.word	0x0802ea9c
 80131d8:	0802eaa8 	.word	0x0802eaa8
 80131dc:	0802eab8 	.word	0x0802eab8
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80131e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80131e6:	2b04      	cmp	r3, #4
 80131e8:	d107      	bne.n	80131fa <mg_tcpip_poll+0x3fa>
        c->is_closing = 1;
 80131ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131ec:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80131f0:	f043 0320 	orr.w	r3, r3, #32
 80131f4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 80131f8:	e04c      	b.n	8013294 <mg_tcpip_poll+0x494>
      } else {
        if (s->tmiss++ > 2) {
 80131fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8013200:	1c5a      	adds	r2, r3, #1
 8013202:	b2d1      	uxtb	r1, r2
 8013204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013206:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 801320a:	2b02      	cmp	r3, #2
 801320c:	d904      	bls.n	8013218 <mg_tcpip_poll+0x418>
          mg_error(c, "keepalive");
 801320e:	4927      	ldr	r1, [pc, #156]	@ (80132ac <mg_tcpip_poll+0x4ac>)
 8013210:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013212:	f7f6 fba1 	bl	8009958 <mg_error>
 8013216:	e035      	b.n	8013284 <mg_tcpip_poll+0x484>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8013218:	4b25      	ldr	r3, [pc, #148]	@ (80132b0 <mg_tcpip_poll+0x4b0>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	2b03      	cmp	r3, #3
 801321e:	dd0c      	ble.n	801323a <mg_tcpip_poll+0x43a>
 8013220:	4b24      	ldr	r3, [pc, #144]	@ (80132b4 <mg_tcpip_poll+0x4b4>)
 8013222:	f241 4266 	movw	r2, #5222	@ 0x1466
 8013226:	4924      	ldr	r1, [pc, #144]	@ (80132b8 <mg_tcpip_poll+0x4b8>)
 8013228:	2004      	movs	r0, #4
 801322a:	f7fc fa8b 	bl	800f744 <mg_log_prefix>
 801322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013232:	4619      	mov	r1, r3
 8013234:	4821      	ldr	r0, [pc, #132]	@ (80132bc <mg_tcpip_poll+0x4bc>)
 8013236:	f7fc fad5 	bl	800f7e4 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801323c:	f103 061a 	add.w	r6, r3, #26
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	613b      	str	r3, [r7, #16]
 8013244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013246:	8b1c      	ldrh	r4, [r3, #24]
 8013248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801324a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 801324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801324e:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8013250:	3b01      	subs	r3, #1
 8013252:	4618      	mov	r0, r3
 8013254:	f00f fd27 	bl	8022ca6 <mg_ntohl>
 8013258:	6078      	str	r0, [r7, #4]
 801325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	4618      	mov	r0, r3
 8013260:	f00f fd21 	bl	8022ca6 <mg_ntohl>
 8013264:	4603      	mov	r3, r0
 8013266:	2200      	movs	r2, #0
 8013268:	9205      	str	r2, [sp, #20]
 801326a:	2200      	movs	r2, #0
 801326c:	9204      	str	r2, [sp, #16]
 801326e:	9303      	str	r3, [sp, #12]
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	9102      	str	r1, [sp, #8]
 8013274:	9501      	str	r5, [sp, #4]
 8013276:	9400      	str	r4, [sp, #0]
 8013278:	2310      	movs	r3, #16
 801327a:	693a      	ldr	r2, [r7, #16]
 801327c:	4631      	mov	r1, r6
 801327e:	6978      	ldr	r0, [r7, #20]
 8013280:	f7fe fbba 	bl	80119f8 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8013284:	2100      	movs	r1, #0
 8013286:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013288:	f7fd f966 	bl	8010558 <settmout>
 801328c:	e002      	b.n	8013294 <mg_tcpip_poll+0x494>
      continue;
 801328e:	bf00      	nop
 8013290:	e000      	b.n	8013294 <mg_tcpip_poll+0x494>
        continue;
 8013292:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8013294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	637b      	str	r3, [r7, #52]	@ 0x34
 801329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801329c:	2b00      	cmp	r3, #0
 801329e:	f47f aef2 	bne.w	8013086 <mg_tcpip_poll+0x286>
 80132a2:	e000      	b.n	80132a6 <mg_tcpip_poll+0x4a6>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80132a4:	bf00      	nop
    }
  }
}
 80132a6:	373c      	adds	r7, #60	@ 0x3c
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ac:	0802eacc 	.word	0x0802eacc
 80132b0:	2400025c 	.word	0x2400025c
 80132b4:	08031288 	.word	0x08031288
 80132b8:	0802d330 	.word	0x0802d330
 80132bc:	0802ead8 	.word	0x0802ead8

080132c0 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b086      	sub	sp, #24
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	3334      	adds	r3, #52	@ 0x34
 80132d0:	f107 0114 	add.w	r1, r7, #20
 80132d4:	68ba      	ldr	r2, [r7, #8]
 80132d6:	4618      	mov	r0, r3
 80132d8:	f001 f922 	bl	8014520 <mg_queue_book>
 80132dc:	4602      	mov	r2, r0
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	4293      	cmp	r3, r2
 80132e2:	d811      	bhi.n	8013308 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	68f9      	ldr	r1, [r7, #12]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f016 fc87 	bl	8029bfe <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	3334      	adds	r3, #52	@ 0x34
 80132f4:	68b9      	ldr	r1, [r7, #8]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f001 f9b0 	bl	801465c <mg_queue_add>
    ifp->nrecv++;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013300:	1c5a      	adds	r2, r3, #1
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 8013306:	e004      	b.n	8013312 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013312:	bf00      	nop
 8013314:	3718      	adds	r7, #24
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	781b      	ldrb	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d12d      	bne.n	801338a <mg_tcpip_init+0x6e>
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	785b      	ldrb	r3, [r3, #1]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d129      	bne.n	801338a <mg_tcpip_init+0x6e>
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	789b      	ldrb	r3, [r3, #2]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d125      	bne.n	801338a <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8013342:	2b00      	cmp	r3, #0
 8013344:	d121      	bne.n	801338a <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	791b      	ldrb	r3, [r3, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d11d      	bne.n	801338a <mg_tcpip_init+0x6e>
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	795b      	ldrb	r3, [r3, #5]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d119      	bne.n	801338a <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	2202      	movs	r2, #2
 801335a:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	3301      	adds	r3, #1
 8013360:	2105      	movs	r1, #5
 8013362:	4618      	mov	r0, r3
 8013364:	f7ed fc16 	bl	8000b94 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 8013368:	4b59      	ldr	r3, [pc, #356]	@ (80134d0 <mg_tcpip_init+0x1b4>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2b01      	cmp	r3, #1
 801336e:	dd0c      	ble.n	801338a <mg_tcpip_init+0x6e>
 8013370:	4b58      	ldr	r3, [pc, #352]	@ (80134d4 <mg_tcpip_init+0x1b8>)
 8013372:	f241 4285 	movw	r2, #5253	@ 0x1485
 8013376:	4958      	ldr	r1, [pc, #352]	@ (80134d8 <mg_tcpip_init+0x1bc>)
 8013378:	2002      	movs	r0, #2
 801337a:	f7fc f9e3 	bl	800f744 <mg_log_prefix>
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	461a      	mov	r2, r3
 8013382:	4956      	ldr	r1, [pc, #344]	@ (80134dc <mg_tcpip_init+0x1c0>)
 8013384:	4856      	ldr	r0, [pc, #344]	@ (80134e0 <mg_tcpip_init+0x1c4>)
 8013386:	f7fc fa2d 	bl	800f7e4 <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013390:	2b00      	cmp	r3, #0
 8013392:	d106      	bne.n	80133a2 <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	3344      	adds	r3, #68	@ 0x44
 8013398:	2204      	movs	r2, #4
 801339a:	4952      	ldr	r1, [pc, #328]	@ (80134e4 <mg_tcpip_init+0x1c8>)
 801339c:	4618      	mov	r0, r3
 801339e:	f016 fc2e 	bl	8029bfe <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2200      	movs	r2, #0
 80133a6:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d019      	beq.n	80133e8 <mg_tcpip_init+0xcc>
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	6838      	ldr	r0, [r7, #0]
 80133bc:	4798      	blx	r3
 80133be:	4603      	mov	r3, r0
 80133c0:	f083 0301 	eor.w	r3, r3, #1
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00e      	beq.n	80133e8 <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 80133ca:	4b41      	ldr	r3, [pc, #260]	@ (80134d0 <mg_tcpip_init+0x1b4>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	dd7a      	ble.n	80134c8 <mg_tcpip_init+0x1ac>
 80133d2:	4b40      	ldr	r3, [pc, #256]	@ (80134d4 <mg_tcpip_init+0x1b8>)
 80133d4:	f241 428f 	movw	r2, #5263	@ 0x148f
 80133d8:	493f      	ldr	r1, [pc, #252]	@ (80134d8 <mg_tcpip_init+0x1bc>)
 80133da:	2001      	movs	r0, #1
 80133dc:	f7fc f9b2 	bl	800f744 <mg_log_prefix>
 80133e0:	4841      	ldr	r0, [pc, #260]	@ (80134e8 <mg_tcpip_init+0x1cc>)
 80133e2:	f7fc f9ff 	bl	800f7e4 <mg_log>
 80133e6:	e06f      	b.n	80134c8 <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 80133e8:	f240 6304 	movw	r3, #1540	@ 0x604
 80133ec:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 80133ee:	68f9      	ldr	r1, [r7, #12]
 80133f0:	2001      	movs	r0, #1
 80133f2:	f013 fa0b 	bl	802680c <calloc>
 80133f6:	4603      	mov	r3, r0
 80133f8:	461a      	mov	r2, r3
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	615a      	str	r2, [r3, #20]
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013408:	2b00      	cmp	r3, #0
 801340a:	d10a      	bne.n	8013422 <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d001      	beq.n	801341a <mg_tcpip_init+0xfe>
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	e001      	b.n	801341e <mg_tcpip_init+0x102>
 801341a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801341e:	683a      	ldr	r2, [r7, #0]
 8013420:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013426:	4619      	mov	r1, r3
 8013428:	2001      	movs	r0, #1
 801342a:	f013 f9ef 	bl	802680c <calloc>
 801342e:	4603      	mov	r3, r0
 8013430:	461a      	mov	r2, r3
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8013436:	f7ed fbdb 	bl	8000bf0 <mg_millis>
 801343a:	4602      	mov	r2, r0
 801343c:	460b      	mov	r3, r1
 801343e:	6839      	ldr	r1, [r7, #0]
 8013440:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	683a      	ldr	r2, [r7, #0]
 8013448:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	687a      	ldr	r2, [r7, #4]
 801344e:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8013456:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2238      	movs	r2, #56	@ 0x38
 801345e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	689b      	ldr	r3, [r3, #8]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d102      	bne.n	801346e <mg_tcpip_init+0x152>
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	2201      	movs	r2, #1
 801346c:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	3352      	adds	r3, #82	@ 0x52
 8013472:	2206      	movs	r2, #6
 8013474:	21ff      	movs	r1, #255	@ 0xff
 8013476:	4618      	mov	r0, r3
 8013478:	f015 f992 	bl	80287a0 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	3370      	adds	r3, #112	@ 0x70
 8013480:	2102      	movs	r1, #2
 8013482:	4618      	mov	r0, r3
 8013484:	f7ed fb86 	bl	8000b94 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 801348e:	4b17      	ldr	r3, [pc, #92]	@ (80134ec <mg_tcpip_init+0x1d0>)
 8013490:	4313      	orrs	r3, r2
 8013492:	b29a      	uxth	r2, r3
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	695b      	ldr	r3, [r3, #20]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d003      	beq.n	80134aa <mg_tcpip_init+0x18e>
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10e      	bne.n	80134c8 <mg_tcpip_init+0x1ac>
 80134aa:	4b09      	ldr	r3, [pc, #36]	@ (80134d0 <mg_tcpip_init+0x1b4>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	dd0a      	ble.n	80134c8 <mg_tcpip_init+0x1ac>
 80134b2:	4b08      	ldr	r3, [pc, #32]	@ (80134d4 <mg_tcpip_init+0x1b8>)
 80134b4:	f44f 52a5 	mov.w	r2, #5280	@ 0x14a0
 80134b8:	4907      	ldr	r1, [pc, #28]	@ (80134d8 <mg_tcpip_init+0x1bc>)
 80134ba:	2001      	movs	r0, #1
 80134bc:	f7fc f942 	bl	800f744 <mg_log_prefix>
 80134c0:	480b      	ldr	r0, [pc, #44]	@ (80134f0 <mg_tcpip_init+0x1d4>)
 80134c2:	f7fc f98f 	bl	800f7e4 <mg_log>
  }
}
 80134c6:	e7ff      	b.n	80134c8 <mg_tcpip_init+0x1ac>
 80134c8:	bf00      	nop
 80134ca:	3710      	adds	r7, #16
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	2400025c 	.word	0x2400025c
 80134d4:	08031298 	.word	0x08031298
 80134d8:	0802d330 	.word	0x0802d330
 80134dc:	08014239 	.word	0x08014239
 80134e0:	0802eae8 	.word	0x0802eae8
 80134e4:	0802eb0c 	.word	0x0802eb0c
 80134e8:	0802eb10 	.word	0x0802eb10
 80134ec:	ffff8000 	.word	0xffff8000
 80134f0:	0802e528 	.word	0x0802e528

080134f4 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 80134f4:	b5b0      	push	{r4, r5, r7, lr}
 80134f6:	b08c      	sub	sp, #48	@ 0x30
 80134f8:	af06      	add	r7, sp, #24
 80134fa:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	33b0      	adds	r3, #176	@ 0xb0
 8013500:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	8b1b      	ldrh	r3, [r3, #24]
 8013506:	4618      	mov	r0, r3
 8013508:	f00f fbb6 	bl	8022c78 <mg_ntohs>
 801350c:	4603      	mov	r3, r0
 801350e:	4618      	mov	r0, r3
 8013510:	f00f fbc9 	bl	8022ca6 <mg_ntohl>
 8013514:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	331c      	adds	r3, #28
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	f103 041a 	add.w	r4, r3, #26
 801352a:	68fd      	ldr	r5, [r7, #12]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	8b1b      	ldrh	r3, [r3, #24]
 8013530:	687a      	ldr	r2, [r7, #4]
 8013532:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8013534:	2100      	movs	r1, #0
 8013536:	9105      	str	r1, [sp, #20]
 8013538:	2100      	movs	r1, #0
 801353a:	9104      	str	r1, [sp, #16]
 801353c:	2100      	movs	r1, #0
 801353e:	9103      	str	r1, [sp, #12]
 8013540:	6939      	ldr	r1, [r7, #16]
 8013542:	9102      	str	r1, [sp, #8]
 8013544:	9201      	str	r2, [sp, #4]
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	2302      	movs	r3, #2
 801354a:	462a      	mov	r2, r5
 801354c:	4621      	mov	r1, r4
 801354e:	f7fe fa53 	bl	80119f8 <tx_tcp>
         NULL, 0);
}
 8013552:	bf00      	nop
 8013554:	3718      	adds	r7, #24
 8013556:	46bd      	mov	sp, r7
 8013558:	bdb0      	pop	{r4, r5, r7, pc}

0801355a <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 801355a:	b580      	push	{r7, lr}
 801355c:	b082      	sub	sp, #8
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d00c      	beq.n	801358c <mac_resolved+0x32>
    c->is_connecting = 0;
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8013578:	f023 0320 	bic.w	r3, r3, #32
 801357c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 8013580:	2200      	movs	r2, #0
 8013582:	2104      	movs	r1, #4
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7f6 f9c7 	bl	8009918 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 801358a:	e006      	b.n	801359a <mac_resolved+0x40>
    send_syn(c);
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7ff ffb1 	bl	80134f4 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 8013592:	2103      	movs	r1, #3
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7fc ffdf 	bl	8010558 <settmout>
}
 801359a:	bf00      	nop
 801359c:	3708      	adds	r7, #8
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
	...

080135a4 <ip4_mcastmac>:

static void ip4_mcastmac(uint8_t *mac, uint32_t *ip) {
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b084      	sub	sp, #16
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
  uint8_t mcastp[3] = {0x01, 0x00, 0x5E};  // multicast group MAC
 80135ae:	4a13      	ldr	r2, [pc, #76]	@ (80135fc <ip4_mcastmac+0x58>)
 80135b0:	f107 030c 	add.w	r3, r7, #12
 80135b4:	6812      	ldr	r2, [r2, #0]
 80135b6:	4611      	mov	r1, r2
 80135b8:	8019      	strh	r1, [r3, #0]
 80135ba:	3302      	adds	r3, #2
 80135bc:	0c12      	lsrs	r2, r2, #16
 80135be:	701a      	strb	r2, [r3, #0]
  memcpy(mac, mcastp, 3);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	461a      	mov	r2, r3
 80135c4:	f107 030c 	add.w	r3, r7, #12
 80135c8:	8819      	ldrh	r1, [r3, #0]
 80135ca:	789b      	ldrb	r3, [r3, #2]
 80135cc:	8011      	strh	r1, [r2, #0]
 80135ce:	7093      	strb	r3, [r2, #2]
  memcpy(mac + 3, ((uint8_t *) ip) + 1, 3);  // 23 LSb
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	1cd8      	adds	r0, r3, #3
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	3301      	adds	r3, #1
 80135d8:	2203      	movs	r2, #3
 80135da:	4619      	mov	r1, r3
 80135dc:	f016 fb0f 	bl	8029bfe <memcpy>
  mac[3] &= 0x7F;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	3303      	adds	r3, #3
 80135e4:	781a      	ldrb	r2, [r3, #0]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	3303      	adds	r3, #3
 80135ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80135ee:	b2d2      	uxtb	r2, r2
 80135f0:	701a      	strb	r2, [r3, #0]
}
 80135f2:	bf00      	nop
 80135f4:	3710      	adds	r7, #16
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	0802eb24 	.word	0x0802eb24

08013600 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8013600:	b580      	push	{r7, lr}
 8013602:	b08a      	sub	sp, #40	@ 0x28
 8013604:	af02      	add	r7, sp, #8
 8013606:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801360e:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	331c      	adds	r3, #28
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801361e:	f023 0308 	bic.w	r3, r3, #8
 8013622:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8013626:	69fb      	ldr	r3, [r7, #28]
 8013628:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801362c:	b21b      	sxth	r3, r3
 801362e:	2b00      	cmp	r3, #0
 8013630:	db04      	blt.n	801363c <mg_connect_resolved+0x3c>
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8013638:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	3308      	adds	r3, #8
 8013640:	69fa      	ldr	r2, [r7, #28]
 8013642:	3208      	adds	r2, #8
 8013644:	6812      	ldr	r2, [r2, #0]
 8013646:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801364e:	1c5a      	adds	r2, r3, #1
 8013650:	b291      	uxth	r1, r2
 8013652:	69fa      	ldr	r2, [r7, #28]
 8013654:	f8a2 1070 	strh.w	r1, [r2, #112]	@ 0x70
 8013658:	4618      	mov	r0, r3
 801365a:	f00f fb0d 	bl	8022c78 <mg_ntohs>
 801365e:	4603      	mov	r3, r0
 8013660:	461a      	mov	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8013666:	4b54      	ldr	r3, [pc, #336]	@ (80137b8 <mg_connect_resolved+0x1b8>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	2b02      	cmp	r3, #2
 801366c:	dd15      	ble.n	801369a <mg_connect_resolved+0x9a>
 801366e:	4b53      	ldr	r3, [pc, #332]	@ (80137bc <mg_connect_resolved+0x1bc>)
 8013670:	f241 42cb 	movw	r2, #5323	@ 0x14cb
 8013674:	4952      	ldr	r1, [pc, #328]	@ (80137c0 <mg_connect_resolved+0x1c0>)
 8013676:	2003      	movs	r0, #3
 8013678:	f7fc f864 	bl	800f744 <mg_log_prefix>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f103 0208 	add.w	r2, r3, #8
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	331c      	adds	r3, #28
 801368a:	9301      	str	r3, [sp, #4]
 801368c:	4b4d      	ldr	r3, [pc, #308]	@ (80137c4 <mg_connect_resolved+0x1c4>)
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	4613      	mov	r3, r2
 8013692:	4a4c      	ldr	r2, [pc, #304]	@ (80137c4 <mg_connect_resolved+0x1c4>)
 8013694:	484c      	ldr	r0, [pc, #304]	@ (80137c8 <mg_connect_resolved+0x1c8>)
 8013696:	f7fc f8a5 	bl	800f7e4 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 801369a:	2200      	movs	r2, #0
 801369c:	2103      	movs	r1, #3
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f7f6 f93a 	bl	8009918 <mg_call>
  c->is_connecting = 1;
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80136aa:	f043 0320 	orr.w	r3, r3, #32
 80136ae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d01a      	beq.n	80136f8 <mg_connect_resolved+0xf8>
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c8:	d008      	beq.n	80136dc <mg_connect_resolved+0xdc>
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	689a      	ldr	r2, [r3, #8]
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	43db      	mvns	r3, r3
 80136d4:	431a      	orrs	r2, r3
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d10d      	bne.n	80136f8 <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	33b0      	adds	r3, #176	@ 0xb0
 80136e0:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 80136e2:	69bb      	ldr	r3, [r7, #24]
 80136e4:	331a      	adds	r3, #26
 80136e6:	2206      	movs	r2, #6
 80136e8:	21ff      	movs	r1, #255	@ 0xff
 80136ea:	4618      	mov	r0, r3
 80136ec:	f015 f858 	bl	80287a0 <memset>
    mac_resolved(c);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ff ff32 	bl	801355a <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80136f6:	e05a      	b.n	80137ae <mg_connect_resolved+0x1ae>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 80136f8:	69fb      	ldr	r3, [r7, #28]
 80136fa:	689b      	ldr	r3, [r3, #8]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d030      	beq.n	8013762 <mg_connect_resolved+0x162>
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	689a      	ldr	r2, [r3, #8]
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	405a      	eors	r2, r3
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	4013      	ands	r3, r2
 801370e:	2b00      	cmp	r3, #0
 8013710:	d127      	bne.n	8013762 <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	691a      	ldr	r2, [r3, #16]
 8013716:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8013718:	429a      	cmp	r2, r3
 801371a:	d022      	beq.n	8013762 <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 801371c:	4b26      	ldr	r3, [pc, #152]	@ (80137b8 <mg_connect_resolved+0x1b8>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2b02      	cmp	r3, #2
 8013722:	dd0c      	ble.n	801373e <mg_connect_resolved+0x13e>
 8013724:	4b25      	ldr	r3, [pc, #148]	@ (80137bc <mg_connect_resolved+0x1bc>)
 8013726:	f241 42d6 	movw	r2, #5334	@ 0x14d6
 801372a:	4925      	ldr	r1, [pc, #148]	@ (80137c0 <mg_connect_resolved+0x1c0>)
 801372c:	2003      	movs	r0, #3
 801372e:	f7fc f809 	bl	800f744 <mg_log_prefix>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013736:	4619      	mov	r1, r3
 8013738:	4824      	ldr	r0, [pc, #144]	@ (80137cc <mg_connect_resolved+0x1cc>)
 801373a:	f7fc f853 	bl	800f7e4 <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2200      	movs	r2, #0
 8013742:	4619      	mov	r1, r3
 8013744:	69f8      	ldr	r0, [r7, #28]
 8013746:	f7fc ff87 	bl	8010658 <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 801374a:	2102      	movs	r1, #2
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7fc ff03 	bl	8010558 <settmout>
    c->is_arplooking = 1;
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8013758:	f043 0310 	orr.w	r3, r3, #16
 801375c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8013760:	e025      	b.n	80137ae <mg_connect_resolved+0x1ae>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8013762:	f107 030c 	add.w	r3, r7, #12
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 801376c:	2be0      	cmp	r3, #224	@ 0xe0
 801376e:	d10e      	bne.n	801378e <mg_connect_resolved+0x18e>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	33b0      	adds	r3, #176	@ 0xb0
 8013774:	613b      	str	r3, [r7, #16]
    ip4_mcastmac(s->mac, &rem_ip);                       // multicast group
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	331a      	adds	r3, #26
 801377a:	f107 020c 	add.w	r2, r7, #12
 801377e:	4611      	mov	r1, r2
 8013780:	4618      	mov	r0, r3
 8013782:	f7ff ff0f 	bl	80135a4 <ip4_mcastmac>
    mac_resolved(c);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f7ff fee7 	bl	801355a <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 801378c:	e00f      	b.n	80137ae <mg_connect_resolved+0x1ae>
    struct connstate *s = (struct connstate *) (c + 1);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	33b0      	adds	r3, #176	@ 0xb0
 8013792:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	f103 001a 	add.w	r0, r3, #26
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	3352      	adds	r3, #82	@ 0x52
 801379e:	2206      	movs	r2, #6
 80137a0:	4619      	mov	r1, r3
 80137a2:	f016 fa2c 	bl	8029bfe <memcpy>
    mac_resolved(c);
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f7ff fed7 	bl	801355a <mac_resolved>
}
 80137ac:	e7ff      	b.n	80137ae <mg_connect_resolved+0x1ae>
 80137ae:	bf00      	nop
 80137b0:	3720      	adds	r7, #32
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	2400025c 	.word	0x2400025c
 80137bc:	080312a8 	.word	0x080312a8
 80137c0:	0802d330 	.word	0x0802d330
 80137c4:	080141ed 	.word	0x080141ed
 80137c8:	0802eb28 	.word	0x0802eb28
 80137cc:	0802eb38 	.word	0x0802eb38

080137d0 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 80137da:	6838      	ldr	r0, [r7, #0]
 80137dc:	f00f f908 	bl	80229f0 <mg_url_port>
 80137e0:	4603      	mov	r3, r0
 80137e2:	4618      	mov	r0, r3
 80137e4:	f00f fa48 	bl	8022c78 <mg_ntohs>
 80137e8:	4603      	mov	r3, r0
 80137ea:	461a      	mov	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 80137f0:	f107 0308 	add.w	r3, r7, #8
 80137f4:	6839      	ldr	r1, [r7, #0]
 80137f6:	4618      	mov	r0, r3
 80137f8:	f00f f8c7 	bl	802298a <mg_url_host>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	3308      	adds	r3, #8
 8013800:	461a      	mov	r2, r3
 8013802:	f107 0308 	add.w	r3, r7, #8
 8013806:	e893 0003 	ldmia.w	r3, {r0, r1}
 801380a:	f7fc fb4a 	bl	800fea2 <mg_aton>
 801380e:	4603      	mov	r3, r0
 8013810:	f083 0301 	eor.w	r3, r3, #1
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b00      	cmp	r3, #0
 8013818:	d010      	beq.n	801383c <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 801381a:	4b0b      	ldr	r3, [pc, #44]	@ (8013848 <mg_open_listener+0x78>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	dd0a      	ble.n	8013838 <mg_open_listener+0x68>
 8013822:	4b0a      	ldr	r3, [pc, #40]	@ (801384c <mg_open_listener+0x7c>)
 8013824:	f241 42e8 	movw	r2, #5352	@ 0x14e8
 8013828:	4909      	ldr	r1, [pc, #36]	@ (8013850 <mg_open_listener+0x80>)
 801382a:	2001      	movs	r0, #1
 801382c:	f7fb ff8a 	bl	800f744 <mg_log_prefix>
 8013830:	6839      	ldr	r1, [r7, #0]
 8013832:	4808      	ldr	r0, [pc, #32]	@ (8013854 <mg_open_listener+0x84>)
 8013834:	f7fb ffd6 	bl	800f7e4 <mg_log>
    return false;
 8013838:	2300      	movs	r3, #0
 801383a:	e000      	b.n	801383e <mg_open_listener+0x6e>
  }
  return true;
 801383c:	2301      	movs	r3, #1
}
 801383e:	4618      	mov	r0, r3
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	2400025c 	.word	0x2400025c
 801384c:	080312bc 	.word	0x080312bc
 8013850:	0802d330 	.word	0x0802d330
 8013854:	0802eb4c 	.word	0x0802eb4c

08013858 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801386a:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 801386c:	2b00      	cmp	r3, #0
 801386e:	d009      	beq.n	8013884 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013878:	461a      	mov	r2, r3
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f008 fca8 	bl	801c1d0 <mg_tls_send>
 8013880:	4603      	mov	r3, r0
 8013882:	e008      	b.n	8013896 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801388c:	461a      	mov	r2, r3
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7fe fb50 	bl	8011f34 <mg_io_send>
 8013894:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8013896:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389e:	d104      	bne.n	80138aa <write_conn+0x52>
    mg_error(c, "tx err");
 80138a0:	490c      	ldr	r1, [pc, #48]	@ (80138d4 <write_conn+0x7c>)
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7f6 f858 	bl	8009958 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 80138a8:	e010      	b.n	80138cc <write_conn+0x74>
  } else if (len > 0) {
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	dd0d      	ble.n	80138cc <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	3348      	adds	r3, #72	@ 0x48
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	2100      	movs	r1, #0
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fa ff2b 	bl	800e714 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 80138be:	f107 030c 	add.w	r3, r7, #12
 80138c2:	461a      	mov	r2, r3
 80138c4:	2108      	movs	r1, #8
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7f6 f826 	bl	8009918 <mg_call>
}
 80138cc:	bf00      	nop
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	0802eb68 	.word	0x0802eb68

080138d8 <init_closure>:

static void init_closure(struct mg_connection *c) {
 80138d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138dc:	b08c      	sub	sp, #48	@ 0x30
 80138de:	af06      	add	r7, sp, #24
 80138e0:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	33b0      	adds	r3, #176	@ 0xb0
 80138e6:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80138ee:	f003 0301 	and.w	r3, r3, #1
 80138f2:	b2db      	uxtb	r3, r3
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d13e      	bne.n	8013976 <init_closure+0x9e>
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80138fe:	f003 0301 	and.w	r3, r3, #1
 8013902:	b2db      	uxtb	r3, r3
 8013904:	2b00      	cmp	r3, #0
 8013906:	d136      	bne.n	8013976 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801390e:	f003 0320 	and.w	r3, r3, #32
 8013912:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8013914:	2b00      	cmp	r3, #0
 8013916:	d12e      	bne.n	8013976 <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	331c      	adds	r3, #28
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	f103 081a 	add.w	r8, r3, #26
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	60bb      	str	r3, [r7, #8]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	8b1c      	ldrh	r4, [r3, #24]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4618      	mov	r0, r3
 801393e:	f00f f9b2 	bl	8022ca6 <mg_ntohl>
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	f00f f9ac 	bl	8022ca6 <mg_ntohl>
 801394e:	4603      	mov	r3, r0
 8013950:	2200      	movs	r2, #0
 8013952:	9205      	str	r2, [sp, #20]
 8013954:	2200      	movs	r2, #0
 8013956:	9204      	str	r2, [sp, #16]
 8013958:	9303      	str	r3, [sp, #12]
 801395a:	6879      	ldr	r1, [r7, #4]
 801395c:	9102      	str	r1, [sp, #8]
 801395e:	9501      	str	r5, [sp, #4]
 8013960:	9400      	str	r4, [sp, #0]
 8013962:	2311      	movs	r3, #17
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	4641      	mov	r1, r8
 8013968:	4630      	mov	r0, r6
 801396a:	f7fe f845 	bl	80119f8 <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 801396e:	2104      	movs	r1, #4
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f7fc fdf1 	bl	8010558 <settmout>
  }
}
 8013976:	bf00      	nop
 8013978:	3718      	adds	r7, #24
 801397a:	46bd      	mov	sp, r7
 801397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013980 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	33b0      	adds	r3, #176	@ 0xb0
 801398c:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	3324      	adds	r3, #36	@ 0x24
 8013992:	4618      	mov	r0, r3
 8013994:	f7fa ff09 	bl	800e7aa <mg_iobuf_free>
  mg_close_conn(c);
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f7fc fae9 	bl	800ff70 <mg_close_conn>
}
 801399e:	bf00      	nop
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <can_write>:

static bool can_write(struct mg_connection *c) {
 80139a6:	b480      	push	{r7}
 80139a8:	b083      	sub	sp, #12
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80139b4:	f003 0320 	and.w	r3, r3, #32
 80139b8:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d11d      	bne.n	80139fa <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80139c4:	f003 0308 	and.w	r3, r3, #8
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d115      	bne.n	80139fa <can_write+0x54>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d011      	beq.n	80139fa <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80139dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80139e0:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d109      	bne.n	80139fa <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80139ec:	f003 0310 	and.w	r3, r3, #16
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d101      	bne.n	80139fa <can_write+0x54>
 80139f6:	2301      	movs	r3, #1
 80139f8:	e000      	b.n	80139fc <can_write+0x56>
 80139fa:	2300      	movs	r3, #0
 80139fc:	f003 0301 	and.w	r3, r3, #1
 8013a00:	b2db      	uxtb	r3, r3
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	370c      	adds	r7, #12
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr
	...

08013a10 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8013a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a14:	b091      	sub	sp, #68	@ 0x44
 8013a16:	af06      	add	r7, sp, #24
 8013a18:	60f8      	str	r0, [r7, #12]
 8013a1a:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8013a1c:	f7ed f8e8 	bl	8000bf0 <mg_millis>
 8013a20:	4602      	mov	r2, r0
 8013a22:	460b      	mov	r3, r1
 8013a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013a2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013a32:	4608      	mov	r0, r1
 8013a34:	f004 fbc2 	bl	80181bc <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f000 810c 	beq.w	8013c5a <mg_mgr_poll+0x24a>
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f000 8106 	beq.w	8013c5a <mg_mgr_poll+0x24a>
  mg_tcpip_poll(mgr->ifp, now);
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013a56:	4608      	mov	r0, r1
 8013a58:	f7ff f9d2 	bl	8012e00 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a62:	e0f5      	b.n	8013c50 <mg_mgr_poll+0x240>
    tmp = c->next;
 8013a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6c:	33b0      	adds	r3, #176	@ 0xb0
 8013a6e:	61fb      	str	r3, [r7, #28]
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8013a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a72:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013a76:	f003 0308 	and.w	r3, r3, #8
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d119      	bne.n	8013ab4 <mg_mgr_poll+0xa4>
 8013a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a82:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013a86:	f003 0310 	and.w	r3, r3, #16
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d111      	bne.n	8013ab4 <mg_mgr_poll+0xa4>
 8013a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a92:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013a96:	f003 0301 	and.w	r3, r3, #1
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d109      	bne.n	8013ab4 <mg_mgr_poll+0xa4>
                  !c->is_connecting;
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013aa6:	f003 0320 	and.w	r3, r3, #32
 8013aaa:	b2db      	uxtb	r3, r3
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d101      	bne.n	8013ab4 <mg_mgr_poll+0xa4>
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e000      	b.n	8013ab6 <mg_mgr_poll+0xa6>
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	76fb      	strb	r3, [r7, #27]
 8013ab8:	7efb      	ldrb	r3, [r7, #27]
 8013aba:	f003 0301 	and.w	r3, r3, #1
 8013abe:	76fb      	strb	r3, [r7, #27]
    mg_call(c, MG_EV_POLL, &now);
 8013ac0:	f107 0310 	add.w	r3, r7, #16
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	2102      	movs	r1, #2
 8013ac8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013aca:	f7f5 ff25 	bl	8009918 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 8013ace:	4b65      	ldr	r3, [pc, #404]	@ (8013c64 <mg_mgr_poll+0x254>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b03      	cmp	r3, #3
 8013ad4:	dd55      	ble.n	8013b82 <mg_mgr_poll+0x172>
 8013ad6:	4b64      	ldr	r3, [pc, #400]	@ (8013c68 <mg_mgr_poll+0x258>)
 8013ad8:	f241 521c 	movw	r2, #5404	@ 0x151c
 8013adc:	4963      	ldr	r1, [pc, #396]	@ (8013c6c <mg_mgr_poll+0x25c>)
 8013ade:	2004      	movs	r0, #4
 8013ae0:	f7fb fe30 	bl	800f744 <mg_log_prefix>
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ae8:	607b      	str	r3, [r7, #4]
 8013aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013af4:	b2db      	uxtb	r3, r3
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d002      	beq.n	8013b00 <mg_mgr_poll+0xf0>
 8013afa:	f04f 0854 	mov.w	r8, #84	@ 0x54
 8013afe:	e001      	b.n	8013b04 <mg_mgr_poll+0xf4>
 8013b00:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8013b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b06:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013b0a:	f003 0320 	and.w	r3, r3, #32
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d002      	beq.n	8013b1a <mg_mgr_poll+0x10a>
 8013b14:	f04f 0943 	mov.w	r9, #67	@ 0x43
 8013b18:	e001      	b.n	8013b1e <mg_mgr_poll+0x10e>
 8013b1a:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8013b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b20:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013b24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013b28:	b2db      	uxtb	r3, r3
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <mg_mgr_poll+0x122>
 8013b2e:	2448      	movs	r4, #72	@ 0x48
 8013b30:	e000      	b.n	8013b34 <mg_mgr_poll+0x124>
 8013b32:	2468      	movs	r4, #104	@ 0x68
 8013b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b36:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013b3a:	f003 0308 	and.w	r3, r3, #8
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <mg_mgr_poll+0x138>
 8013b44:	2552      	movs	r5, #82	@ 0x52
 8013b46:	e000      	b.n	8013b4a <mg_mgr_poll+0x13a>
 8013b48:	2572      	movs	r5, #114	@ 0x72
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013b50:	f003 0320 	and.w	r3, r3, #32
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d001      	beq.n	8013b5e <mg_mgr_poll+0x14e>
 8013b5a:	2643      	movs	r6, #67	@ 0x43
 8013b5c:	e000      	b.n	8013b60 <mg_mgr_poll+0x150>
 8013b5e:	2663      	movs	r6, #99	@ 0x63
 8013b60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b62:	f008 fc2d 	bl	801c3c0 <mg_tls_pending>
 8013b66:	4602      	mov	r2, r0
 8013b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b6c:	9304      	str	r3, [sp, #16]
 8013b6e:	9203      	str	r2, [sp, #12]
 8013b70:	9602      	str	r6, [sp, #8]
 8013b72:	9501      	str	r5, [sp, #4]
 8013b74:	9400      	str	r4, [sp, #0]
 8013b76:	464b      	mov	r3, r9
 8013b78:	4642      	mov	r2, r8
 8013b7a:	6879      	ldr	r1, [r7, #4]
 8013b7c:	483c      	ldr	r0, [pc, #240]	@ (8013c70 <mg_mgr_poll+0x260>)
 8013b7e:	f7fb fe31 	bl	800f7e4 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 8013b82:	7efb      	ldrb	r3, [r7, #27]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d00c      	beq.n	8013ba2 <mg_mgr_poll+0x192>
 8013b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d105      	bne.n	8013b9c <mg_mgr_poll+0x18c>
 8013b90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b92:	f008 fc15 	bl	801c3c0 <mg_tls_pending>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d002      	beq.n	8013ba2 <mg_mgr_poll+0x192>
      handle_tls_recv(c);
 8013b9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b9e:	f7fe fa4b 	bl	8012038 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8013ba2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ba4:	f7ff feff 	bl	80139a6 <can_write>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d002      	beq.n	8013bb4 <mg_mgr_poll+0x1a4>
 8013bae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bb0:	f7ff fe52 	bl	8013858 <write_conn>
    if (is_tls && c->tls && c->send.len == 0) mg_tls_flush(c);
 8013bb4:	7efb      	ldrb	r3, [r7, #27]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00b      	beq.n	8013bd2 <mg_mgr_poll+0x1c2>
 8013bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d006      	beq.n	8013bd2 <mg_mgr_poll+0x1c2>
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d102      	bne.n	8013bd2 <mg_mgr_poll+0x1c2>
 8013bcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bce:	f008 fc0c 	bl	801c3ea <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8013bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013bd8:	f003 0310 	and.w	r3, r3, #16
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d00b      	beq.n	8013bfa <mg_mgr_poll+0x1ea>
 8013be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d107      	bne.n	8013bfa <mg_mgr_poll+0x1ea>
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bf0:	2b04      	cmp	r3, #4
 8013bf2:	d002      	beq.n	8013bfa <mg_mgr_poll+0x1ea>
      init_closure(c);
 8013bf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bf6:	f7ff fe6f 	bl	80138d8 <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d018      	beq.n	8013c36 <mg_mgr_poll+0x226>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8013c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c06:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013c0e:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d009      	beq.n	8013c28 <mg_mgr_poll+0x218>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8013c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10c      	bne.n	8013c36 <mg_mgr_poll+0x226>
 8013c1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c1e:	f008 fbcf 	bl	801c3c0 <mg_tls_pending>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d106      	bne.n	8013c36 <mg_mgr_poll+0x226>
      c->is_closing = 1;
 8013c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c2a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8013c2e:	f043 0320 	orr.w	r3, r3, #32
 8013c32:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 8013c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c38:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013c3c:	f003 0320 	and.w	r3, r3, #32
 8013c40:	b2db      	uxtb	r3, r3
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d002      	beq.n	8013c4c <mg_mgr_poll+0x23c>
 8013c46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c48:	f7ff fe9a 	bl	8013980 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8013c4c:	6a3b      	ldr	r3, [r7, #32]
 8013c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	f47f af06 	bne.w	8013a64 <mg_mgr_poll+0x54>
 8013c58:	e000      	b.n	8013c5c <mg_mgr_poll+0x24c>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 8013c5a:	bf00      	nop
  }
  (void) ms;
}
 8013c5c:	372c      	adds	r7, #44	@ 0x2c
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c64:	2400025c 	.word	0x2400025c
 8013c68:	080312d0 	.word	0x080312d0
 8013c6c:	0802d330 	.word	0x0802d330
 8013c70:	0802eb70 	.word	0x0802eb70

08013c74 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8013c74:	b5b0      	push	{r4, r5, r7, lr}
 8013c76:	b08c      	sub	sp, #48	@ 0x30
 8013c78:	af04      	add	r7, sp, #16
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c86:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	331c      	adds	r3, #28
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	689b      	ldr	r3, [r3, #8]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d004      	beq.n	8013ca6 <mg_send+0x32>
 8013c9c:	69bb      	ldr	r3, [r7, #24]
 8013c9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013ca2:	2b04      	cmp	r3, #4
 8013ca4:	d004      	beq.n	8013cb0 <mg_send+0x3c>
    mg_error(c, "net down");
 8013ca6:	4934      	ldr	r1, [pc, #208]	@ (8013d78 <mg_send+0x104>)
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f7f5 fe55 	bl	8009958 <mg_error>
 8013cae:	e05e      	b.n	8013d6e <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013cb6:	f003 0301 	and.w	r3, r3, #1
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d01e      	beq.n	8013cfe <mg_send+0x8a>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013cc6:	f003 0310 	and.w	r3, r3, #16
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d107      	bne.n	8013ce0 <mg_send+0x6c>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8013cd6:	f003 0308 	and.w	r3, r3, #8
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00e      	beq.n	8013cfe <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 8013ce0:	4b26      	ldr	r3, [pc, #152]	@ (8013d7c <mg_send+0x108>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2b03      	cmp	r3, #3
 8013ce6:	dd42      	ble.n	8013d6e <mg_send+0xfa>
 8013ce8:	4b25      	ldr	r3, [pc, #148]	@ (8013d80 <mg_send+0x10c>)
 8013cea:	f241 523a 	movw	r2, #5434	@ 0x153a
 8013cee:	4925      	ldr	r1, [pc, #148]	@ (8013d84 <mg_send+0x110>)
 8013cf0:	2004      	movs	r0, #4
 8013cf2:	f7fb fd27 	bl	800f744 <mg_log_prefix>
 8013cf6:	4824      	ldr	r0, [pc, #144]	@ (8013d88 <mg_send+0x114>)
 8013cf8:	f7fb fd74 	bl	800f7e4 <mg_log>
 8013cfc:	e037      	b.n	8013d6e <mg_send+0xfa>
  } else if (c->is_udp) {
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8013d04:	f003 0301 	and.w	r3, r3, #1
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d020      	beq.n	8013d50 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	33b0      	adds	r3, #176	@ 0xb0
 8013d12:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8013d14:	6879      	ldr	r1, [r7, #4]
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f7fe f87e 	bl	8011e18 <trim_len>
 8013d1c:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	f103 001a 	add.w	r0, r3, #26
 8013d24:	69bb      	ldr	r3, [r7, #24]
 8013d26:	689c      	ldr	r4, [r3, #8]
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	8b1d      	ldrh	r5, [r3, #24]
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	68fa      	ldr	r2, [r7, #12]
 8013d30:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8013d32:	6879      	ldr	r1, [r7, #4]
 8013d34:	9103      	str	r1, [sp, #12]
 8013d36:	68b9      	ldr	r1, [r7, #8]
 8013d38:	9102      	str	r1, [sp, #8]
 8013d3a:	9201      	str	r2, [sp, #4]
 8013d3c:	9300      	str	r3, [sp, #0]
 8013d3e:	462b      	mov	r3, r5
 8013d40:	4622      	mov	r2, r4
 8013d42:	4601      	mov	r1, r0
 8013d44:	69b8      	ldr	r0, [r7, #24]
 8013d46:	f7fc fdf0 	bl	801092a <tx_udp>
    res = true;
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	77fb      	strb	r3, [r7, #31]
 8013d4e:	e00e      	b.n	8013d6e <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68ba      	ldr	r2, [r7, #8]
 8013d5e:	f7fa fc87 	bl	800e670 <mg_iobuf_add>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bf14      	ite	ne
 8013d68:	2301      	movne	r3, #1
 8013d6a:	2300      	moveq	r3, #0
 8013d6c:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8013d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3720      	adds	r7, #32
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bdb0      	pop	{r4, r5, r7, pc}
 8013d78:	0802eb8c 	.word	0x0802eb8c
 8013d7c:	2400025c 	.word	0x2400025c
 8013d80:	080312dc 	.word	0x080312dc
 8013d84:	0802d330 	.word	0x0802d330
 8013d88:	0802eb98 	.word	0x0802eb98

08013d8c <mg_ota_begin>:
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
  }
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
}

bool mg_ota_begin(size_t new_firmware_size) {
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
  s_mg_flash_stm32h7.size = MG_REG(FLASH_SIZE_REG) * 1024;
 8013d94:	4b06      	ldr	r3, [pc, #24]	@ (8013db0 <mg_ota_begin+0x24>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	029b      	lsls	r3, r3, #10
 8013d9a:	4a06      	ldr	r2, [pc, #24]	@ (8013db4 <mg_ota_begin+0x28>)
 8013d9c:	6053      	str	r3, [r2, #4]
  if (IS_DUALCORE()) {
    // Using only the 1st bank (mapped to CM7)
    s_mg_flash_stm32h7.size /= 2;
  }
  return mg_ota_flash_begin(new_firmware_size, &s_mg_flash_stm32h7);
 8013d9e:	4905      	ldr	r1, [pc, #20]	@ (8013db4 <mg_ota_begin+0x28>)
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f7f5 fe1b 	bl	80099dc <mg_ota_flash_begin>
 8013da6:	4603      	mov	r3, r0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	1ff1e880 	.word	0x1ff1e880
 8013db4:	2400026c 	.word	0x2400026c

08013db8 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	6039      	str	r1, [r7, #0]
  return mg_ota_flash_write(buf, len, &s_mg_flash_stm32h7);
 8013dc2:	4a05      	ldr	r2, [pc, #20]	@ (8013dd8 <mg_ota_write+0x20>)
 8013dc4:	6839      	ldr	r1, [r7, #0]
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f7f5 fe84 	bl	8009ad4 <mg_ota_flash_write>
 8013dcc:	4603      	mov	r3, r0
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3708      	adds	r7, #8
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	2400026c 	.word	0x2400026c

08013ddc <mg_ota_end>:

bool mg_ota_end(void) {
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	af00      	add	r7, sp, #0
  if (mg_ota_flash_end(&s_mg_flash_stm32h7)) {
 8013de0:	4825      	ldr	r0, [pc, #148]	@ (8013e78 <mg_ota_end+0x9c>)
 8013de2:	f7f5 ff3b 	bl	8009c5c <mg_ota_flash_end>
 8013de6:	4603      	mov	r3, r0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d042      	beq.n	8013e72 <mg_ota_end+0x96>
    if (is_dualbank()) {
 8013dec:	f018 fec8 	bl	802cb80 <__is_dualbank_veneer>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d003      	beq.n	8013dfe <mg_ota_end+0x22>
      // Bank swap is deferred until reset, been executing in flash, reset
      *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 8013df6:	4b21      	ldr	r3, [pc, #132]	@ (8013e7c <mg_ota_end+0xa0>)
 8013df8:	4a21      	ldr	r2, [pc, #132]	@ (8013e80 <mg_ota_end+0xa4>)
 8013dfa:	601a      	str	r2, [r3, #0]
 8013dfc:	e039      	b.n	8013e72 <mg_ota_end+0x96>
    } else {
      // Swap partitions. Pray power does not go away
      MG_INFO(("Swapping partitions, size %u (%u sectors)",
 8013dfe:	4b21      	ldr	r3, [pc, #132]	@ (8013e84 <mg_ota_end+0xa8>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	dd12      	ble.n	8013e2c <mg_ota_end+0x50>
 8013e06:	4b20      	ldr	r3, [pc, #128]	@ (8013e88 <mg_ota_end+0xac>)
 8013e08:	f641 52a1 	movw	r2, #7585	@ 0x1da1
 8013e0c:	491f      	ldr	r1, [pc, #124]	@ (8013e8c <mg_ota_end+0xb0>)
 8013e0e:	2002      	movs	r0, #2
 8013e10:	f7fb fc98 	bl	800f744 <mg_log_prefix>
 8013e14:	4b18      	ldr	r3, [pc, #96]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e16:	6859      	ldr	r1, [r3, #4]
 8013e18:	4b17      	ldr	r3, [pc, #92]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e1a:	685a      	ldr	r2, [r3, #4]
 8013e1c:	4b16      	ldr	r3, [pc, #88]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e1e:	689b      	ldr	r3, [r3, #8]
 8013e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e24:	461a      	mov	r2, r3
 8013e26:	481a      	ldr	r0, [pc, #104]	@ (8013e90 <mg_ota_end+0xb4>)
 8013e28:	f7fb fcdc 	bl	800f7e4 <mg_log>
               s_mg_flash_stm32h7.size,
               s_mg_flash_stm32h7.size / s_mg_flash_stm32h7.secsz));
      MG_INFO(("Do NOT power off..."));
 8013e2c:	4b15      	ldr	r3, [pc, #84]	@ (8013e84 <mg_ota_end+0xa8>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	dd09      	ble.n	8013e48 <mg_ota_end+0x6c>
 8013e34:	4b14      	ldr	r3, [pc, #80]	@ (8013e88 <mg_ota_end+0xac>)
 8013e36:	f641 52a4 	movw	r2, #7588	@ 0x1da4
 8013e3a:	4914      	ldr	r1, [pc, #80]	@ (8013e8c <mg_ota_end+0xb0>)
 8013e3c:	2002      	movs	r0, #2
 8013e3e:	f7fb fc81 	bl	800f744 <mg_log_prefix>
 8013e42:	4814      	ldr	r0, [pc, #80]	@ (8013e94 <mg_ota_end+0xb8>)
 8013e44:	f7fb fcce 	bl	800f7e4 <mg_log>
      mg_log_level = MG_LL_NONE;
 8013e48:	4b0e      	ldr	r3, [pc, #56]	@ (8013e84 <mg_ota_end+0xa8>)
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	601a      	str	r2, [r3, #0]
      s_flash_irq_disabled = true;
 8013e4e:	4b12      	ldr	r3, [pc, #72]	@ (8013e98 <mg_ota_end+0xbc>)
 8013e50:	2201      	movs	r2, #1
 8013e52:	701a      	strb	r2, [r3, #0]
      // Runs in RAM, will reset when finished
      single_bank_swap(
          (char *) s_mg_flash_stm32h7.start,
 8013e54:	4b08      	ldr	r3, [pc, #32]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e56:	6818      	ldr	r0, [r3, #0]
          (char *) s_mg_flash_stm32h7.start + s_mg_flash_stm32h7.size / 2,
 8013e58:	4b07      	ldr	r3, [pc, #28]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	4b06      	ldr	r3, [pc, #24]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	085b      	lsrs	r3, r3, #1
      single_bank_swap(
 8013e62:	18d1      	adds	r1, r2, r3
          s_mg_flash_stm32h7.size / 2, s_mg_flash_stm32h7.secsz);
 8013e64:	4b04      	ldr	r3, [pc, #16]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e66:	685b      	ldr	r3, [r3, #4]
      single_bank_swap(
 8013e68:	085a      	lsrs	r2, r3, #1
 8013e6a:	4b03      	ldr	r3, [pc, #12]	@ (8013e78 <mg_ota_end+0x9c>)
 8013e6c:	689b      	ldr	r3, [r3, #8]
 8013e6e:	f018 fe83 	bl	802cb78 <__single_bank_swap_veneer>
    }
  }
  return false;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	2400026c 	.word	0x2400026c
 8013e7c:	e000ed0c 	.word	0xe000ed0c
 8013e80:	05fa0004 	.word	0x05fa0004
 8013e84:	2400025c 	.word	0x2400025c
 8013e88:	0803130c 	.word	0x0803130c
 8013e8c:	0802d330 	.word	0x0802d330
 8013e90:	0802ec44 	.word	0x0802ec44
 8013e94:	0802ec70 	.word	0x0802ec70
 8013e98:	24019d64 	.word	0x24019d64

08013e9c <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	6039      	str	r1, [r7, #0]
 8013ea6:	71fb      	strb	r3, [r7, #7]
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8013eb0:	79bb      	ldrb	r3, [r7, #6]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d00d      	beq.n	8013ed2 <mg_pfn_iobuf_private+0x36>
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	689b      	ldr	r3, [r3, #8]
 8013eba:	1c9a      	adds	r2, r3, #2
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d906      	bls.n	8013ed2 <mg_pfn_iobuf_private+0x36>
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	689b      	ldr	r3, [r3, #8]
 8013ec8:	3302      	adds	r3, #2
 8013eca:	4619      	mov	r1, r3
 8013ecc:	68f8      	ldr	r0, [r7, #12]
 8013ece:	f7fa fb43 	bl	800e558 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	1c9a      	adds	r2, r3, #2
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d811      	bhi.n	8013f04 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	1c58      	adds	r0, r3, #1
 8013eea:	68f9      	ldr	r1, [r7, #12]
 8013eec:	6088      	str	r0, [r1, #8]
 8013eee:	4413      	add	r3, r2
 8013ef0:	79fa      	ldrb	r2, [r7, #7]
 8013ef2:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	681a      	ldr	r2, [r3, #0]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	689b      	ldr	r3, [r3, #8]
 8013efc:	4413      	add	r3, r2
 8013efe:	2200      	movs	r2, #0
 8013f00:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8013f02:	e00f      	b.n	8013f24 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	689a      	ldr	r2, [r3, #8]
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	685b      	ldr	r3, [r3, #4]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d209      	bcs.n	8013f24 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	1c58      	adds	r0, r3, #1
 8013f1a:	68f9      	ldr	r1, [r7, #12]
 8013f1c:	6088      	str	r0, [r1, #8]
 8013f1e:	4413      	add	r3, r2
 8013f20:	2200      	movs	r2, #0
 8013f22:	701a      	strb	r2, [r3, #0]
}
 8013f24:	bf00      	nop
 8013f26:	3710      	adds	r7, #16
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	4603      	mov	r3, r0
 8013f34:	6039      	str	r1, [r7, #0]
 8013f36:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8013f38:	79fb      	ldrb	r3, [r7, #7]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	6839      	ldr	r1, [r7, #0]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff ffac 	bl	8013e9c <mg_pfn_iobuf_private>
}
 8013f44:	bf00      	nop
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	4603      	mov	r3, r0
 8013f54:	6039      	str	r1, [r7, #0]
 8013f56:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8013f58:	79fb      	ldrb	r3, [r7, #7]
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	6839      	ldr	r1, [r7, #0]
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7ff ff9c 	bl	8013e9c <mg_pfn_iobuf_private>
}
 8013f64:	bf00      	nop
 8013f66:	3708      	adds	r7, #8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b08a      	sub	sp, #40	@ 0x28
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	60f8      	str	r0, [r7, #12]
 8013f74:	60b9      	str	r1, [r7, #8]
 8013f76:	607a      	str	r2, [r7, #4]
 8013f78:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	617b      	str	r3, [r7, #20]
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	61bb      	str	r3, [r7, #24]
 8013f82:	2300      	movs	r3, #0
 8013f84:	61fb      	str	r3, [r7, #28]
 8013f86:	2300      	movs	r3, #0
 8013f88:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8013f8a:	f107 0114 	add.w	r1, r7, #20
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	4809      	ldr	r0, [pc, #36]	@ (8013fb8 <mg_vsnprintf+0x4c>)
 8013f94:	f7f6 fb74 	bl	800a680 <mg_vxprintf>
 8013f98:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 8013f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d204      	bcs.n	8013fac <mg_vsnprintf+0x40>
 8013fa2:	68fa      	ldr	r2, [r7, #12]
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa6:	4413      	add	r3, r2
 8013fa8:	2200      	movs	r2, #0
 8013faa:	701a      	strb	r2, [r3, #0]
  return n;
 8013fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3728      	adds	r7, #40	@ 0x28
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	08013f2d 	.word	0x08013f2d

08013fbc <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8013fbc:	b40c      	push	{r2, r3}
 8013fbe:	b580      	push	{r7, lr}
 8013fc0:	b084      	sub	sp, #16
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
 8013fc6:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8013fc8:	f107 031c 	add.w	r3, r7, #28
 8013fcc:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8013fce:	f107 0308 	add.w	r3, r7, #8
 8013fd2:	69ba      	ldr	r2, [r7, #24]
 8013fd4:	6839      	ldr	r1, [r7, #0]
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7ff ffc8 	bl	8013f6c <mg_vsnprintf>
 8013fdc:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8013fde:	68fb      	ldr	r3, [r7, #12]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013fea:	b002      	add	sp, #8
 8013fec:	4770      	bx	lr
	...

08013ff0 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	60bb      	str	r3, [r7, #8]
 8013ffe:	2300      	movs	r3, #0
 8014000:	60fb      	str	r3, [r7, #12]
 8014002:	2300      	movs	r3, #0
 8014004:	613b      	str	r3, [r7, #16]
 8014006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801400a:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 801400c:	f107 0108 	add.w	r1, r7, #8
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	4803      	ldr	r0, [pc, #12]	@ (8014024 <mg_vmprintf+0x34>)
 8014016:	f7f6 fb33 	bl	800a680 <mg_vxprintf>
  return (char *) io.buf;
 801401a:	68bb      	ldr	r3, [r7, #8]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3718      	adds	r7, #24
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	08013f4d 	.word	0x08013f4d

08014028 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 8014028:	b40f      	push	{r0, r1, r2, r3}
 801402a:	b580      	push	{r7, lr}
 801402c:	b082      	sub	sp, #8
 801402e:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8014030:	f107 0314 	add.w	r3, r7, #20
 8014034:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 8014036:	463b      	mov	r3, r7
 8014038:	4619      	mov	r1, r3
 801403a:	6938      	ldr	r0, [r7, #16]
 801403c:	f7ff ffd8 	bl	8013ff0 <mg_vmprintf>
 8014040:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 8014042:	687b      	ldr	r3, [r7, #4]
}
 8014044:	4618      	mov	r0, r3
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801404e:	b004      	add	sp, #16
 8014050:	4770      	bx	lr

08014052 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 8014052:	b580      	push	{r7, lr}
 8014054:	b082      	sub	sp, #8
 8014056:	af00      	add	r7, sp, #0
 8014058:	4603      	mov	r3, r0
 801405a:	6039      	str	r1, [r7, #0]
 801405c:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 801405e:	79fb      	ldrb	r3, [r7, #7]
 8014060:	4618      	mov	r0, r3
 8014062:	f014 f9d1 	bl	8028408 <putchar>
  (void) param;
}
 8014066:	bf00      	nop
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
	...

08014070 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8014070:	b580      	push	{r7, lr}
 8014072:	b088      	sub	sp, #32
 8014074:	af04      	add	r7, sp, #16
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	4618      	mov	r0, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	3301      	adds	r3, #1
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	461a      	mov	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	3302      	adds	r3, #2
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	4619      	mov	r1, r3
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	3303      	adds	r3, #3
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	9302      	str	r3, [sp, #8]
 801409a:	9101      	str	r1, [sp, #4]
 801409c:	9200      	str	r2, [sp, #0]
 801409e:	4603      	mov	r3, r0
 80140a0:	4a04      	ldr	r2, [pc, #16]	@ (80140b4 <print_ip4+0x44>)
 80140a2:	68b9      	ldr	r1, [r7, #8]
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f7f6 fad0 	bl	800a64a <mg_xprintf>
 80140aa:	4603      	mov	r3, r0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3710      	adds	r7, #16
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	0802ec84 	.word	0x0802ec84

080140b8 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 80140b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140bc:	b08e      	sub	sp, #56	@ 0x38
 80140be:	af08      	add	r7, sp, #32
 80140c0:	6178      	str	r0, [r7, #20]
 80140c2:	6139      	str	r1, [r7, #16]
 80140c4:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f00e fdd4 	bl	8022c78 <mg_ntohs>
 80140d0:	4603      	mov	r3, r0
 80140d2:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	3302      	adds	r3, #2
 80140d8:	881b      	ldrh	r3, [r3, #0]
 80140da:	4618      	mov	r0, r3
 80140dc:	f00e fdcc 	bl	8022c78 <mg_ntohs>
 80140e0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80140e2:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	3304      	adds	r3, #4
 80140e8:	881b      	ldrh	r3, [r3, #0]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f00e fdc4 	bl	8022c78 <mg_ntohs>
 80140f0:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80140f2:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	3306      	adds	r3, #6
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	4618      	mov	r0, r3
 80140fc:	f00e fdbc 	bl	8022c78 <mg_ntohs>
 8014100:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8014102:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	3308      	adds	r3, #8
 8014108:	881b      	ldrh	r3, [r3, #0]
 801410a:	4618      	mov	r0, r3
 801410c:	f00e fdb4 	bl	8022c78 <mg_ntohs>
 8014110:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8014112:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	330a      	adds	r3, #10
 8014118:	881b      	ldrh	r3, [r3, #0]
 801411a:	4618      	mov	r0, r3
 801411c:	f00e fdac 	bl	8022c78 <mg_ntohs>
 8014120:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8014122:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	330c      	adds	r3, #12
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	4618      	mov	r0, r3
 801412c:	f00e fda4 	bl	8022c78 <mg_ntohs>
 8014130:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8014132:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	330e      	adds	r3, #14
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	4618      	mov	r0, r3
 801413c:	f00e fd9c 	bl	8022c78 <mg_ntohs>
 8014140:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8014142:	9306      	str	r3, [sp, #24]
 8014144:	683a      	ldr	r2, [r7, #0]
 8014146:	9205      	str	r2, [sp, #20]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	9204      	str	r2, [sp, #16]
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	9303      	str	r3, [sp, #12]
 8014150:	9602      	str	r6, [sp, #8]
 8014152:	9501      	str	r5, [sp, #4]
 8014154:	9400      	str	r4, [sp, #0]
 8014156:	4643      	mov	r3, r8
 8014158:	4a05      	ldr	r2, [pc, #20]	@ (8014170 <print_ip6+0xb8>)
 801415a:	6939      	ldr	r1, [r7, #16]
 801415c:	6978      	ldr	r0, [r7, #20]
 801415e:	f7f6 fa74 	bl	800a64a <mg_xprintf>
 8014162:	4603      	mov	r3, r0
}
 8014164:	4618      	mov	r0, r3
 8014166:	3718      	adds	r7, #24
 8014168:	46bd      	mov	sp, r7
 801416a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416e:	bf00      	nop
 8014170:	0802ec90 	.word	0x0802ec90

08014174 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	1d19      	adds	r1, r3, #4
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	6011      	str	r1, [r2, #0]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 801418e:	697a      	ldr	r2, [r7, #20]
 8014190:	68b9      	ldr	r1, [r7, #8]
 8014192:	68f8      	ldr	r0, [r7, #12]
 8014194:	f7ff ff6c 	bl	8014070 <print_ip4>
 8014198:	4603      	mov	r3, r0
}
 801419a:	4618      	mov	r0, r3
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b086      	sub	sp, #24
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	60f8      	str	r0, [r7, #12]
 80141aa:	60b9      	str	r1, [r7, #8]
 80141ac:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	1d19      	adds	r1, r3, #4
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	6011      	str	r1, [r2, #0]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	7cdb      	ldrb	r3, [r3, #19]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d007      	beq.n	80141d4 <mg_print_ip+0x32>
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	461a      	mov	r2, r3
 80141c8:	68b9      	ldr	r1, [r7, #8]
 80141ca:	68f8      	ldr	r0, [r7, #12]
 80141cc:	f7ff ff74 	bl	80140b8 <print_ip6>
 80141d0:	4603      	mov	r3, r0
 80141d2:	e006      	b.n	80141e2 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	461a      	mov	r2, r3
 80141d8:	68b9      	ldr	r1, [r7, #8]
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f7ff ff48 	bl	8014070 <print_ip4>
 80141e0:	4603      	mov	r3, r0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3718      	adds	r7, #24
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
	...

080141ec <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b088      	sub	sp, #32
 80141f0:	af02      	add	r7, sp, #8
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	1d19      	adds	r1, r3, #4
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	6011      	str	r1, [r2, #0]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	8a1b      	ldrh	r3, [r3, #16]
 801420a:	4618      	mov	r0, r3
 801420c:	f00e fd34 	bl	8022c78 <mg_ntohs>
 8014210:	4603      	mov	r3, r0
 8014212:	9301      	str	r3, [sp, #4]
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	4b05      	ldr	r3, [pc, #20]	@ (8014230 <mg_print_ip_port+0x44>)
 801421a:	4a06      	ldr	r2, [pc, #24]	@ (8014234 <mg_print_ip_port+0x48>)
 801421c:	68b9      	ldr	r1, [r7, #8]
 801421e:	68f8      	ldr	r0, [r7, #12]
 8014220:	f7f6 fa13 	bl	800a64a <mg_xprintf>
 8014224:	4603      	mov	r3, r0
}
 8014226:	4618      	mov	r0, r3
 8014228:	3718      	adds	r7, #24
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	bf00      	nop
 8014230:	080141a3 	.word	0x080141a3
 8014234:	0802ecac 	.word	0x0802ecac

08014238 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8014238:	b5b0      	push	{r4, r5, r7, lr}
 801423a:	b08c      	sub	sp, #48	@ 0x30
 801423c:	af06      	add	r7, sp, #24
 801423e:	60f8      	str	r0, [r7, #12]
 8014240:	60b9      	str	r1, [r7, #8]
 8014242:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	1d19      	adds	r1, r3, #4
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	6011      	str	r1, [r2, #0]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	461d      	mov	r5, r3
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	3301      	adds	r3, #1
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	461a      	mov	r2, r3
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	3302      	adds	r3, #2
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	3303      	adds	r3, #3
 801426c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801426e:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	3304      	adds	r3, #4
 8014274:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8014276:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	3305      	adds	r3, #5
 801427c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801427e:	9304      	str	r3, [sp, #16]
 8014280:	9403      	str	r4, [sp, #12]
 8014282:	9002      	str	r0, [sp, #8]
 8014284:	9101      	str	r1, [sp, #4]
 8014286:	9200      	str	r2, [sp, #0]
 8014288:	462b      	mov	r3, r5
 801428a:	4a05      	ldr	r2, [pc, #20]	@ (80142a0 <mg_print_mac+0x68>)
 801428c:	68b9      	ldr	r1, [r7, #8]
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f7f6 f9db 	bl	800a64a <mg_xprintf>
 8014294:	4603      	mov	r3, r0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3718      	adds	r7, #24
 801429a:	46bd      	mov	sp, r7
 801429c:	bdb0      	pop	{r4, r5, r7, pc}
 801429e:	bf00      	nop
 80142a0:	0802ecb4 	.word	0x0802ecb4

080142a4 <mg_esc>:

static char mg_esc(int c, bool esc) {
 80142a4:	b480      	push	{r7}
 80142a6:	b087      	sub	sp, #28
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	460b      	mov	r3, r1
 80142ae:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 80142b0:	4b19      	ldr	r3, [pc, #100]	@ (8014318 <mg_esc+0x74>)
 80142b2:	613b      	str	r3, [r7, #16]
 80142b4:	4b19      	ldr	r3, [pc, #100]	@ (801431c <mg_esc+0x78>)
 80142b6:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80142b8:	78fb      	ldrb	r3, [r7, #3]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d001      	beq.n	80142c2 <mg_esc+0x1e>
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	e000      	b.n	80142c4 <mg_esc+0x20>
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	617b      	str	r3, [r7, #20]
 80142c6:	e01b      	b.n	8014300 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	461a      	mov	r2, r3
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4293      	cmp	r3, r2
 80142d2:	d112      	bne.n	80142fa <mg_esc+0x56>
 80142d4:	78fb      	ldrb	r3, [r7, #3]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d007      	beq.n	80142ea <mg_esc+0x46>
 80142da:	697a      	ldr	r2, [r7, #20]
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	1ad3      	subs	r3, r2, r3
 80142e0:	461a      	mov	r2, r3
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	4413      	add	r3, r2
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	e00f      	b.n	801430a <mg_esc+0x66>
 80142ea:	697a      	ldr	r2, [r7, #20]
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	1ad3      	subs	r3, r2, r3
 80142f0:	461a      	mov	r2, r3
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	4413      	add	r3, r2
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	e007      	b.n	801430a <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	3301      	adds	r3, #1
 80142fe:	617b      	str	r3, [r7, #20]
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d1df      	bne.n	80142c8 <mg_esc+0x24>
  }
  return 0;
 8014308:	2300      	movs	r3, #0
}
 801430a:	4618      	mov	r0, r3
 801430c:	371c      	adds	r7, #28
 801430e:	46bd      	mov	sp, r7
 8014310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	0802e418 	.word	0x0802e418
 801431c:	0802e420 	.word	0x0802e420

08014320 <mg_escape>:

static char mg_escape(int c) {
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8014328:	2101      	movs	r1, #1
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff ffba 	bl	80142a4 <mg_esc>
 8014330:	4603      	mov	r3, r0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 801433a:	b580      	push	{r7, lr}
 801433c:	b088      	sub	sp, #32
 801433e:	af00      	add	r7, sp, #0
 8014340:	60f8      	str	r0, [r7, #12]
 8014342:	60b9      	str	r1, [r7, #8]
 8014344:	607a      	str	r2, [r7, #4]
 8014346:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8014348:	2300      	movs	r3, #0
 801434a:	61fb      	str	r3, [r7, #28]
 801434c:	2300      	movs	r3, #0
 801434e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8014350:	2300      	movs	r3, #0
 8014352:	61fb      	str	r3, [r7, #28]
 8014354:	e023      	b.n	801439e <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	4413      	add	r3, r2
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	4618      	mov	r0, r3
 8014360:	f7ff ffde 	bl	8014320 <mg_escape>
 8014364:	4603      	mov	r3, r0
 8014366:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8014368:	7dfb      	ldrb	r3, [r7, #23]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d00c      	beq.n	8014388 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	68b9      	ldr	r1, [r7, #8]
 8014372:	205c      	movs	r0, #92	@ 0x5c
 8014374:	4798      	blx	r3
 8014376:	7dfa      	ldrb	r2, [r7, #23]
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	68b9      	ldr	r1, [r7, #8]
 801437c:	4610      	mov	r0, r2
 801437e:	4798      	blx	r3
 8014380:	69bb      	ldr	r3, [r7, #24]
 8014382:	3301      	adds	r3, #1
 8014384:	61bb      	str	r3, [r7, #24]
 8014386:	e007      	b.n	8014398 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	69fb      	ldr	r3, [r7, #28]
 801438c:	4413      	add	r3, r2
 801438e:	781a      	ldrb	r2, [r3, #0]
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	68b9      	ldr	r1, [r7, #8]
 8014394:	4610      	mov	r0, r2
 8014396:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	3301      	adds	r3, #1
 801439c:	61fb      	str	r3, [r7, #28]
 801439e:	69fa      	ldr	r2, [r7, #28]
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d205      	bcs.n	80143b2 <qcpy+0x78>
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	4413      	add	r3, r2
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1d1      	bne.n	8014356 <qcpy+0x1c>
    }
  }
  return i + extra;
 80143b2:	69fa      	ldr	r2, [r7, #28]
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	4413      	add	r3, r2
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3720      	adds	r7, #32
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b088      	sub	sp, #32
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	1d19      	adds	r1, r3, #4
 80143d2:	687a      	ldr	r2, [r7, #4]
 80143d4:	6011      	str	r1, [r2, #0]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	1d19      	adds	r1, r3, #4
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	6011      	str	r1, [r2, #0]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 80143e8:	4b16      	ldr	r3, [pc, #88]	@ (8014444 <mg_print_hex+0x84>)
 80143ea:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 80143ec:	2300      	movs	r3, #0
 80143ee:	61fb      	str	r3, [r7, #28]
 80143f0:	e01e      	b.n	8014430 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 80143f2:	697a      	ldr	r2, [r7, #20]
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	4413      	add	r3, r2
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	091b      	lsrs	r3, r3, #4
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	f003 030f 	and.w	r3, r3, #15
 8014402:	693a      	ldr	r2, [r7, #16]
 8014404:	4413      	add	r3, r2
 8014406:	781a      	ldrb	r2, [r3, #0]
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	68b9      	ldr	r1, [r7, #8]
 801440c:	4610      	mov	r0, r2
 801440e:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8014410:	697a      	ldr	r2, [r7, #20]
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	4413      	add	r3, r2
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	f003 030f 	and.w	r3, r3, #15
 801441c:	693a      	ldr	r2, [r7, #16]
 801441e:	4413      	add	r3, r2
 8014420:	781a      	ldrb	r2, [r3, #0]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	68b9      	ldr	r1, [r7, #8]
 8014426:	4610      	mov	r0, r2
 8014428:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	3301      	adds	r3, #1
 801442e:	61fb      	str	r3, [r7, #28]
 8014430:	69fa      	ldr	r2, [r7, #28]
 8014432:	69bb      	ldr	r3, [r7, #24]
 8014434:	429a      	cmp	r2, r3
 8014436:	d3dc      	bcc.n	80143f2 <mg_print_hex+0x32>
  }
  return 2 * bl;
 8014438:	69bb      	ldr	r3, [r7, #24]
 801443a:	005b      	lsls	r3, r3, #1
}
 801443c:	4618      	mov	r0, r3
 801443e:	3720      	adds	r7, #32
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	0802d618 	.word	0x0802d618

08014448 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af00      	add	r7, sp, #0
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	1d19      	adds	r1, r3, #4
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	6011      	str	r1, [r2, #0]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	1d19      	adds	r1, r3, #4
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	6011      	str	r1, [r2, #0]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d109      	bne.n	801448a <mg_print_esc+0x42>
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d004      	beq.n	8014486 <mg_print_esc+0x3e>
 801447c:	6938      	ldr	r0, [r7, #16]
 801447e:	f7eb ffa7 	bl	80003d0 <strlen>
 8014482:	4603      	mov	r3, r0
 8014484:	e000      	b.n	8014488 <mg_print_esc+0x40>
 8014486:	2300      	movs	r3, #0
 8014488:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	693a      	ldr	r2, [r7, #16]
 801448e:	68b9      	ldr	r1, [r7, #8]
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f7ff ff52 	bl	801433a <qcpy>
 8014496:	4603      	mov	r3, r0
}
 8014498:	4618      	mov	r0, r3
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80144a8:	2300      	movs	r3, #0
 80144aa:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80144ac:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	4413      	add	r3, r2
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	689a      	ldr	r2, [r3, #8]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	4413      	add	r3, r2
 80144c6:	1d1a      	adds	r2, r3, #4
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d906      	bls.n	80144de <mg_queue_read_len+0x3e>
 80144d0:	4b05      	ldr	r3, [pc, #20]	@ (80144e8 <mg_queue_read_len+0x48>)
 80144d2:	4a06      	ldr	r2, [pc, #24]	@ (80144ec <mg_queue_read_len+0x4c>)
 80144d4:	f641 6195 	movw	r1, #7829	@ 0x1e95
 80144d8:	4805      	ldr	r0, [pc, #20]	@ (80144f0 <mg_queue_read_len+0x50>)
 80144da:	f012 f971 	bl	80267c0 <__assert_func>
  return n;
 80144de:	68fb      	ldr	r3, [r7, #12]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	0802ed18 	.word	0x0802ed18
 80144ec:	08031318 	.word	0x08031318
 80144f0:	0802d330 	.word	0x0802d330

080144f4 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 80144f4:	b480      	push	{r7}
 80144f6:	b085      	sub	sp, #20
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	4413      	add	r3, r2
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8014510:	f3bf 8f5b 	dmb	ish
}
 8014514:	bf00      	nop
 8014516:	3714      	adds	r7, #20
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr

08014520 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8014520:	b580      	push	{r7, lr}
 8014522:	b086      	sub	sp, #24
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 801452c:	2300      	movs	r3, #0
 801452e:	617b      	str	r3, [r7, #20]
 8014530:	2308      	movs	r3, #8
 8014532:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	68da      	ldr	r2, [r3, #12]
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	689b      	ldr	r3, [r3, #8]
 801453c:	429a      	cmp	r2, r3
 801453e:	d312      	bcc.n	8014566 <mg_queue_book+0x46>
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	68da      	ldr	r2, [r3, #12]
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	441a      	add	r2, r3
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	441a      	add	r2, r3
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	429a      	cmp	r2, r3
 8014552:	d808      	bhi.n	8014566 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	685a      	ldr	r2, [r3, #4]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	1ad2      	subs	r2, r2, r3
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	617b      	str	r3, [r7, #20]
 8014564:	e011      	b.n	801458a <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	68da      	ldr	r2, [r3, #12]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	689b      	ldr	r3, [r3, #8]
 801456e:	429a      	cmp	r2, r3
 8014570:	d30b      	bcc.n	801458a <mg_queue_book+0x6a>
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	693a      	ldr	r2, [r7, #16]
 8014578:	429a      	cmp	r2, r3
 801457a:	d206      	bcs.n	801458a <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 801457c:	2100      	movs	r1, #0
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f7ff ffb8 	bl	80144f4 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	2200      	movs	r2, #0
 8014588:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	68da      	ldr	r2, [r3, #12]
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	441a      	add	r2, r3
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	441a      	add	r2, r3
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	689b      	ldr	r3, [r3, #8]
 801459a:	429a      	cmp	r2, r3
 801459c:	d207      	bcs.n	80145ae <mg_queue_book+0x8e>
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	689a      	ldr	r2, [r3, #8]
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	68db      	ldr	r3, [r3, #12]
 80145a6:	1ad2      	subs	r2, r2, r3
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	1ad3      	subs	r3, r2, r3
 80145ac:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d007      	beq.n	80145c4 <mg_queue_book+0xa4>
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	3304      	adds	r3, #4
 80145be:	441a      	add	r2, r3
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	601a      	str	r2, [r3, #0]
  return space;
 80145c4:	697b      	ldr	r3, [r7, #20]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3718      	adds	r7, #24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
	...

080145d0 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80145da:	2300      	movs	r3, #0
 80145dc:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	689a      	ldr	r2, [r3, #8]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d013      	beq.n	8014612 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f7ff ff58 	bl	80144a0 <mg_queue_read_len>
 80145f0:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d10c      	bne.n	8014612 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2200      	movs	r2, #0
 80145fc:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	68da      	ldr	r2, [r3, #12]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	429a      	cmp	r2, r3
 8014608:	d903      	bls.n	8014612 <mg_queue_next+0x42>
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f7ff ff48 	bl	80144a0 <mg_queue_read_len>
 8014610:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d007      	beq.n	8014628 <mg_queue_next+0x58>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	3304      	adds	r3, #4
 8014622:	441a      	add	r2, r3
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	689a      	ldr	r2, [r3, #8]
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	441a      	add	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	429a      	cmp	r2, r3
 8014636:	d906      	bls.n	8014646 <mg_queue_next+0x76>
 8014638:	4b05      	ldr	r3, [pc, #20]	@ (8014650 <mg_queue_next+0x80>)
 801463a:	4a06      	ldr	r2, [pc, #24]	@ (8014654 <mg_queue_next+0x84>)
 801463c:	f641 61b6 	movw	r1, #7862	@ 0x1eb6
 8014640:	4805      	ldr	r0, [pc, #20]	@ (8014658 <mg_queue_next+0x88>)
 8014642:	f012 f8bd 	bl	80267c0 <__assert_func>
  return len;
 8014646:	68fb      	ldr	r3, [r7, #12]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3710      	adds	r7, #16
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	0802ed3c 	.word	0x0802ed3c
 8014654:	0803132c 	.word	0x0803132c
 8014658:	0802d330 	.word	0x0802d330

0801465c <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d106      	bne.n	801467a <mg_queue_add+0x1e>
 801466c:	4b13      	ldr	r3, [pc, #76]	@ (80146bc <mg_queue_add+0x60>)
 801466e:	4a14      	ldr	r2, [pc, #80]	@ (80146c0 <mg_queue_add+0x64>)
 8014670:	f641 61bb 	movw	r1, #7867	@ 0x1ebb
 8014674:	4813      	ldr	r0, [pc, #76]	@ (80146c4 <mg_queue_add+0x68>)
 8014676:	f012 f8a3 	bl	80267c0 <__assert_func>
  mg_queue_write_len(q, len);
 801467a:	6839      	ldr	r1, [r7, #0]
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7ff ff39 	bl	80144f4 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	68da      	ldr	r2, [r3, #12]
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	4413      	add	r3, r2
 801468a:	f103 0208 	add.w	r2, r3, #8
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	429a      	cmp	r2, r3
 8014694:	d906      	bls.n	80146a4 <mg_queue_add+0x48>
 8014696:	4b0c      	ldr	r3, [pc, #48]	@ (80146c8 <mg_queue_add+0x6c>)
 8014698:	4a09      	ldr	r2, [pc, #36]	@ (80146c0 <mg_queue_add+0x64>)
 801469a:	f641 61bd 	movw	r1, #7869	@ 0x1ebd
 801469e:	4809      	ldr	r0, [pc, #36]	@ (80146c4 <mg_queue_add+0x68>)
 80146a0:	f012 f88e 	bl	80267c0 <__assert_func>
  q->head += len + sizeof(uint32_t);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	68da      	ldr	r2, [r3, #12]
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	4413      	add	r3, r2
 80146ac:	1d1a      	adds	r2, r3, #4
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	60da      	str	r2, [r3, #12]
}
 80146b2:	bf00      	nop
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	0802ed58 	.word	0x0802ed58
 80146c0:	0803133c 	.word	0x0803133c
 80146c4:	0802d330 	.word	0x0802d330
 80146c8:	0802ed60 	.word	0x0802ed60

080146cc <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	689a      	ldr	r2, [r3, #8]
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	4413      	add	r3, r2
 80146de:	1d1a      	adds	r2, r3, #4
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	689b      	ldr	r3, [r3, #8]
 80146e8:	1d1a      	adds	r2, r3, #4
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	685b      	ldr	r3, [r3, #4]
 80146ee:	429a      	cmp	r2, r3
 80146f0:	d906      	bls.n	8014700 <mg_queue_del+0x34>
 80146f2:	4b05      	ldr	r3, [pc, #20]	@ (8014708 <mg_queue_del+0x3c>)
 80146f4:	4a05      	ldr	r2, [pc, #20]	@ (801470c <mg_queue_del+0x40>)
 80146f6:	f641 61c3 	movw	r1, #7875	@ 0x1ec3
 80146fa:	4805      	ldr	r0, [pc, #20]	@ (8014710 <mg_queue_del+0x44>)
 80146fc:	f012 f860 	bl	80267c0 <__assert_func>
}
 8014700:	bf00      	nop
 8014702:	3708      	adds	r7, #8
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}
 8014708:	0802ed90 	.word	0x0802ed90
 801470c:	0803134c 	.word	0x0803134c
 8014710:	0802d330 	.word	0x0802d330

08014714 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8014714:	b480      	push	{r7}
 8014716:	b083      	sub	sp, #12
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801471e:	4b12      	ldr	r3, [pc, #72]	@ (8014768 <blk0+0x54>)
 8014720:	881b      	ldrh	r3, [r3, #0]
 8014722:	2bff      	cmp	r3, #255	@ 0xff
 8014724:	d915      	bls.n	8014752 <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	683a      	ldr	r2, [r7, #0]
 801472a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801472e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8014732:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6839      	ldr	r1, [r7, #0]
 801473a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801473e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8014742:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8014746:	ea42 0103 	orr.w	r1, r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	683a      	ldr	r2, [r7, #0]
 801474e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	683a      	ldr	r2, [r7, #0]
 8014756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 801475a:	4618      	mov	r0, r3
 801475c:	370c      	adds	r7, #12
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop
 8014768:	0802e460 	.word	0x0802e460

0801476c <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 801476c:	b590      	push	{r4, r7, lr}
 801476e:	b099      	sub	sp, #100	@ 0x64
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 8014776:	f107 030c 	add.w	r3, r7, #12
 801477a:	2240      	movs	r2, #64	@ 0x40
 801477c:	6839      	ldr	r1, [r7, #0]
 801477e:	4618      	mov	r0, r3
 8014780:	f015 fa3d 	bl	8029bfe <memcpy>
  a = state[0];
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	691b      	ldr	r3, [r3, #16]
 80147a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 80147a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80147a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147a6:	405a      	eors	r2, r3
 80147a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80147aa:	401a      	ands	r2, r3
 80147ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147ae:	ea82 0403 	eor.w	r4, r2, r3
 80147b2:	f107 030c 	add.w	r3, r7, #12
 80147b6:	2100      	movs	r1, #0
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7ff ffab 	bl	8014714 <blk0>
 80147be:	4603      	mov	r3, r0
 80147c0:	18e2      	adds	r2, r4, r3
 80147c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147c4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80147c8:	441a      	add	r2, r3
 80147ca:	4bbd      	ldr	r3, [pc, #756]	@ (8014ac0 <mg_sha1_transform+0x354>)
 80147cc:	4413      	add	r3, r2
 80147ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80147d0:	4413      	add	r3, r2
 80147d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80147d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80147d6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80147da:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 80147dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80147de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147e0:	405a      	eors	r2, r3
 80147e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80147e4:	401a      	ands	r2, r3
 80147e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147e8:	ea82 0403 	eor.w	r4, r2, r3
 80147ec:	f107 030c 	add.w	r3, r7, #12
 80147f0:	2101      	movs	r1, #1
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7ff ff8e 	bl	8014714 <blk0>
 80147f8:	4603      	mov	r3, r0
 80147fa:	18e2      	adds	r2, r4, r3
 80147fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147fe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014802:	441a      	add	r2, r3
 8014804:	4bae      	ldr	r3, [pc, #696]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014806:	4413      	add	r3, r2
 8014808:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801480a:	4413      	add	r3, r2
 801480c:	653b      	str	r3, [r7, #80]	@ 0x50
 801480e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014810:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014814:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 8014816:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801481a:	405a      	eors	r2, r3
 801481c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801481e:	401a      	ands	r2, r3
 8014820:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014822:	ea82 0403 	eor.w	r4, r2, r3
 8014826:	f107 030c 	add.w	r3, r7, #12
 801482a:	2102      	movs	r1, #2
 801482c:	4618      	mov	r0, r3
 801482e:	f7ff ff71 	bl	8014714 <blk0>
 8014832:	4603      	mov	r3, r0
 8014834:	18e2      	adds	r2, r4, r3
 8014836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014838:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801483c:	441a      	add	r2, r3
 801483e:	4ba0      	ldr	r3, [pc, #640]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014840:	4413      	add	r3, r2
 8014842:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014844:	4413      	add	r3, r2
 8014846:	657b      	str	r3, [r7, #84]	@ 0x54
 8014848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801484a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801484e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 8014850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014854:	405a      	eors	r2, r3
 8014856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014858:	401a      	ands	r2, r3
 801485a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801485c:	ea82 0403 	eor.w	r4, r2, r3
 8014860:	f107 030c 	add.w	r3, r7, #12
 8014864:	2103      	movs	r1, #3
 8014866:	4618      	mov	r0, r3
 8014868:	f7ff ff54 	bl	8014714 <blk0>
 801486c:	4603      	mov	r3, r0
 801486e:	18e2      	adds	r2, r4, r3
 8014870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014872:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014876:	441a      	add	r2, r3
 8014878:	4b91      	ldr	r3, [pc, #580]	@ (8014ac0 <mg_sha1_transform+0x354>)
 801487a:	4413      	add	r3, r2
 801487c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801487e:	4413      	add	r3, r2
 8014880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014884:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014888:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 801488a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801488c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801488e:	405a      	eors	r2, r3
 8014890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014892:	401a      	ands	r2, r3
 8014894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014896:	ea82 0403 	eor.w	r4, r2, r3
 801489a:	f107 030c 	add.w	r3, r7, #12
 801489e:	2104      	movs	r1, #4
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff ff37 	bl	8014714 <blk0>
 80148a6:	4603      	mov	r3, r0
 80148a8:	18e2      	adds	r2, r4, r3
 80148aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148ac:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80148b0:	441a      	add	r2, r3
 80148b2:	4b83      	ldr	r3, [pc, #524]	@ (8014ac0 <mg_sha1_transform+0x354>)
 80148b4:	4413      	add	r3, r2
 80148b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80148b8:	4413      	add	r3, r2
 80148ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80148bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148be:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80148c2:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 80148c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80148c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148c8:	405a      	eors	r2, r3
 80148ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148cc:	401a      	ands	r2, r3
 80148ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148d0:	ea82 0403 	eor.w	r4, r2, r3
 80148d4:	f107 030c 	add.w	r3, r7, #12
 80148d8:	2105      	movs	r1, #5
 80148da:	4618      	mov	r0, r3
 80148dc:	f7ff ff1a 	bl	8014714 <blk0>
 80148e0:	4603      	mov	r3, r0
 80148e2:	18e2      	adds	r2, r4, r3
 80148e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80148ea:	441a      	add	r2, r3
 80148ec:	4b74      	ldr	r3, [pc, #464]	@ (8014ac0 <mg_sha1_transform+0x354>)
 80148ee:	4413      	add	r3, r2
 80148f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80148f2:	4413      	add	r3, r2
 80148f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80148f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80148f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80148fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 80148fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014902:	405a      	eors	r2, r3
 8014904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014906:	401a      	ands	r2, r3
 8014908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801490a:	ea82 0403 	eor.w	r4, r2, r3
 801490e:	f107 030c 	add.w	r3, r7, #12
 8014912:	2106      	movs	r1, #6
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff fefd 	bl	8014714 <blk0>
 801491a:	4603      	mov	r3, r0
 801491c:	18e2      	adds	r2, r4, r3
 801491e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014920:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014924:	441a      	add	r2, r3
 8014926:	4b66      	ldr	r3, [pc, #408]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014928:	4413      	add	r3, r2
 801492a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801492c:	4413      	add	r3, r2
 801492e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014932:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014936:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 8014938:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801493a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801493c:	405a      	eors	r2, r3
 801493e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014940:	401a      	ands	r2, r3
 8014942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014944:	ea82 0403 	eor.w	r4, r2, r3
 8014948:	f107 030c 	add.w	r3, r7, #12
 801494c:	2107      	movs	r1, #7
 801494e:	4618      	mov	r0, r3
 8014950:	f7ff fee0 	bl	8014714 <blk0>
 8014954:	4603      	mov	r3, r0
 8014956:	18e2      	adds	r2, r4, r3
 8014958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801495a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801495e:	441a      	add	r2, r3
 8014960:	4b57      	ldr	r3, [pc, #348]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014962:	4413      	add	r3, r2
 8014964:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014966:	4413      	add	r3, r2
 8014968:	657b      	str	r3, [r7, #84]	@ 0x54
 801496a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801496c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014970:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 8014972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014976:	405a      	eors	r2, r3
 8014978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801497a:	401a      	ands	r2, r3
 801497c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801497e:	ea82 0403 	eor.w	r4, r2, r3
 8014982:	f107 030c 	add.w	r3, r7, #12
 8014986:	2108      	movs	r1, #8
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff fec3 	bl	8014714 <blk0>
 801498e:	4603      	mov	r3, r0
 8014990:	18e2      	adds	r2, r4, r3
 8014992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014994:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014998:	441a      	add	r2, r3
 801499a:	4b49      	ldr	r3, [pc, #292]	@ (8014ac0 <mg_sha1_transform+0x354>)
 801499c:	4413      	add	r3, r2
 801499e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80149a0:	4413      	add	r3, r2
 80149a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80149a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149a6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80149aa:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 80149ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80149ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149b0:	405a      	eors	r2, r3
 80149b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149b4:	401a      	ands	r2, r3
 80149b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149b8:	ea82 0403 	eor.w	r4, r2, r3
 80149bc:	f107 030c 	add.w	r3, r7, #12
 80149c0:	2109      	movs	r1, #9
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7ff fea6 	bl	8014714 <blk0>
 80149c8:	4603      	mov	r3, r0
 80149ca:	18e2      	adds	r2, r4, r3
 80149cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80149ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80149d2:	441a      	add	r2, r3
 80149d4:	4b3a      	ldr	r3, [pc, #232]	@ (8014ac0 <mg_sha1_transform+0x354>)
 80149d6:	4413      	add	r3, r2
 80149d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80149da:	4413      	add	r3, r2
 80149dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80149de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80149e4:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 80149e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80149e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149ea:	405a      	eors	r2, r3
 80149ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80149ee:	401a      	ands	r2, r3
 80149f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149f2:	ea82 0403 	eor.w	r4, r2, r3
 80149f6:	f107 030c 	add.w	r3, r7, #12
 80149fa:	210a      	movs	r1, #10
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff fe89 	bl	8014714 <blk0>
 8014a02:	4603      	mov	r3, r0
 8014a04:	18e2      	adds	r2, r4, r3
 8014a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a08:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a0c:	441a      	add	r2, r3
 8014a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014a10:	4413      	add	r3, r2
 8014a12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014a14:	4413      	add	r3, r2
 8014a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a1a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 8014a20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a24:	405a      	eors	r2, r3
 8014a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a28:	401a      	ands	r2, r3
 8014a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a2c:	ea82 0403 	eor.w	r4, r2, r3
 8014a30:	f107 030c 	add.w	r3, r7, #12
 8014a34:	210b      	movs	r1, #11
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7ff fe6c 	bl	8014714 <blk0>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	18e2      	adds	r2, r4, r3
 8014a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a42:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a46:	441a      	add	r2, r3
 8014a48:	4b1d      	ldr	r3, [pc, #116]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014a4a:	4413      	add	r3, r2
 8014a4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a4e:	4413      	add	r3, r2
 8014a50:	653b      	str	r3, [r7, #80]	@ 0x50
 8014a52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a54:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 8014a5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a5e:	405a      	eors	r2, r3
 8014a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a62:	401a      	ands	r2, r3
 8014a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014a66:	ea82 0403 	eor.w	r4, r2, r3
 8014a6a:	f107 030c 	add.w	r3, r7, #12
 8014a6e:	210c      	movs	r1, #12
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7ff fe4f 	bl	8014714 <blk0>
 8014a76:	4603      	mov	r3, r0
 8014a78:	18e2      	adds	r2, r4, r3
 8014a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a7c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014a80:	441a      	add	r2, r3
 8014a82:	4b0f      	ldr	r3, [pc, #60]	@ (8014ac0 <mg_sha1_transform+0x354>)
 8014a84:	4413      	add	r3, r2
 8014a86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a88:	4413      	add	r3, r2
 8014a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a8e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8014a94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a98:	405a      	eors	r2, r3
 8014a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a9c:	401a      	ands	r2, r3
 8014a9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014aa0:	ea82 0403 	eor.w	r4, r2, r3
 8014aa4:	f107 030c 	add.w	r3, r7, #12
 8014aa8:	210d      	movs	r1, #13
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7ff fe32 	bl	8014714 <blk0>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	18e2      	adds	r2, r4, r3
 8014ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ab6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014aba:	441a      	add	r2, r3
 8014abc:	e002      	b.n	8014ac4 <mg_sha1_transform+0x358>
 8014abe:	bf00      	nop
 8014ac0:	5a827999 	.word	0x5a827999
 8014ac4:	4bac      	ldr	r3, [pc, #688]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014ac6:	4413      	add	r3, r2
 8014ac8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014aca:	4413      	add	r3, r2
 8014acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ad0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 8014ad6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ada:	405a      	eors	r2, r3
 8014adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ade:	401a      	ands	r2, r3
 8014ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ae2:	ea82 0403 	eor.w	r4, r2, r3
 8014ae6:	f107 030c 	add.w	r3, r7, #12
 8014aea:	210e      	movs	r1, #14
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7ff fe11 	bl	8014714 <blk0>
 8014af2:	4603      	mov	r3, r0
 8014af4:	18e2      	adds	r2, r4, r3
 8014af6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014af8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014afc:	441a      	add	r2, r3
 8014afe:	4b9e      	ldr	r3, [pc, #632]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014b00:	4413      	add	r3, r2
 8014b02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b04:	4413      	add	r3, r2
 8014b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b0a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 8014b10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b14:	405a      	eors	r2, r3
 8014b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b18:	401a      	ands	r2, r3
 8014b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b1c:	ea82 0403 	eor.w	r4, r2, r3
 8014b20:	f107 030c 	add.w	r3, r7, #12
 8014b24:	210f      	movs	r1, #15
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7ff fdf4 	bl	8014714 <blk0>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	18e2      	adds	r2, r4, r3
 8014b30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b32:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b36:	441a      	add	r2, r3
 8014b38:	4b8f      	ldr	r3, [pc, #572]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014b3a:	4413      	add	r3, r2
 8014b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014b3e:	4413      	add	r3, r2
 8014b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014b42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b44:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b48:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 8014b4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b4e:	405a      	eors	r2, r3
 8014b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b52:	401a      	ands	r2, r3
 8014b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b56:	405a      	eors	r2, r3
 8014b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b5c:	4059      	eors	r1, r3
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	4059      	eors	r1, r3
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	404b      	eors	r3, r1
 8014b66:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014b6a:	60fb      	str	r3, [r7, #12]
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	441a      	add	r2, r3
 8014b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b72:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014b76:	441a      	add	r2, r3
 8014b78:	4b7f      	ldr	r3, [pc, #508]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014b7a:	4413      	add	r3, r2
 8014b7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014b7e:	4413      	add	r3, r2
 8014b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b84:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 8014b8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b8e:	405a      	eors	r2, r3
 8014b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014b92:	401a      	ands	r2, r3
 8014b94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b96:	405a      	eors	r2, r3
 8014b98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9c:	4059      	eors	r1, r3
 8014b9e:	69bb      	ldr	r3, [r7, #24]
 8014ba0:	4059      	eors	r1, r3
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	404b      	eors	r3, r1
 8014ba6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014baa:	613b      	str	r3, [r7, #16]
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	441a      	add	r2, r3
 8014bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bb2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014bb6:	441a      	add	r2, r3
 8014bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014bba:	4413      	add	r3, r2
 8014bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014bbe:	4413      	add	r3, r2
 8014bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8014bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014bc4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 8014bca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bce:	405a      	eors	r2, r3
 8014bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bd2:	401a      	ands	r2, r3
 8014bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bd6:	405a      	eors	r2, r3
 8014bd8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bdc:	4059      	eors	r1, r3
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	4059      	eors	r1, r3
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	404b      	eors	r3, r1
 8014be6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014bea:	617b      	str	r3, [r7, #20]
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	441a      	add	r2, r3
 8014bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014bf2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014bf6:	441a      	add	r2, r3
 8014bf8:	4b5f      	ldr	r3, [pc, #380]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014bfa:	4413      	add	r3, r2
 8014bfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014bfe:	4413      	add	r3, r2
 8014c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c04:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c08:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 8014c0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c0e:	405a      	eors	r2, r3
 8014c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c12:	401a      	ands	r2, r3
 8014c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c16:	405a      	eors	r2, r3
 8014c18:	68f9      	ldr	r1, [r7, #12]
 8014c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c1c:	4059      	eors	r1, r3
 8014c1e:	6a3b      	ldr	r3, [r7, #32]
 8014c20:	4059      	eors	r1, r3
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	404b      	eors	r3, r1
 8014c26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c2a:	61bb      	str	r3, [r7, #24]
 8014c2c:	69bb      	ldr	r3, [r7, #24]
 8014c2e:	441a      	add	r2, r3
 8014c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c32:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c36:	441a      	add	r2, r3
 8014c38:	4b4f      	ldr	r3, [pc, #316]	@ (8014d78 <mg_sha1_transform+0x60c>)
 8014c3a:	4413      	add	r3, r2
 8014c3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014c3e:	4413      	add	r3, r2
 8014c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c44:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c48:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 8014c4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c4e:	405a      	eors	r2, r3
 8014c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c52:	405a      	eors	r2, r3
 8014c54:	6939      	ldr	r1, [r7, #16]
 8014c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c58:	4059      	eors	r1, r3
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c5c:	4059      	eors	r1, r3
 8014c5e:	69fb      	ldr	r3, [r7, #28]
 8014c60:	404b      	eors	r3, r1
 8014c62:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014c66:	61fb      	str	r3, [r7, #28]
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	441a      	add	r2, r3
 8014c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c6e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014c72:	441a      	add	r2, r3
 8014c74:	4b41      	ldr	r3, [pc, #260]	@ (8014d7c <mg_sha1_transform+0x610>)
 8014c76:	4413      	add	r3, r2
 8014c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014c7a:	4413      	add	r3, r2
 8014c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014c84:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 8014c86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c8a:	405a      	eors	r2, r3
 8014c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c8e:	405a      	eors	r2, r3
 8014c90:	6979      	ldr	r1, [r7, #20]
 8014c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c94:	4059      	eors	r1, r3
 8014c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c98:	4059      	eors	r1, r3
 8014c9a:	6a3b      	ldr	r3, [r7, #32]
 8014c9c:	404b      	eors	r3, r1
 8014c9e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014ca2:	623b      	str	r3, [r7, #32]
 8014ca4:	6a3b      	ldr	r3, [r7, #32]
 8014ca6:	441a      	add	r2, r3
 8014ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014caa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014cae:	441a      	add	r2, r3
 8014cb0:	4b32      	ldr	r3, [pc, #200]	@ (8014d7c <mg_sha1_transform+0x610>)
 8014cb2:	4413      	add	r3, r2
 8014cb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014cb6:	4413      	add	r3, r2
 8014cb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8014cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014cbc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 8014cc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014cc6:	405a      	eors	r2, r3
 8014cc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014cca:	405a      	eors	r2, r3
 8014ccc:	69b9      	ldr	r1, [r7, #24]
 8014cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014cd0:	4059      	eors	r1, r3
 8014cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd4:	4059      	eors	r1, r3
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd8:	404b      	eors	r3, r1
 8014cda:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce2:	441a      	add	r2, r3
 8014ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ce6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014cea:	441a      	add	r2, r3
 8014cec:	4b23      	ldr	r3, [pc, #140]	@ (8014d7c <mg_sha1_transform+0x610>)
 8014cee:	4413      	add	r3, r2
 8014cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014cf2:	4413      	add	r3, r2
 8014cf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8014cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014cf8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 8014cfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d02:	405a      	eors	r2, r3
 8014d04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d06:	405a      	eors	r2, r3
 8014d08:	69f9      	ldr	r1, [r7, #28]
 8014d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d0c:	4059      	eors	r1, r3
 8014d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d10:	4059      	eors	r1, r3
 8014d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d14:	404b      	eors	r3, r1
 8014d16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d1e:	441a      	add	r2, r3
 8014d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014d26:	441a      	add	r2, r3
 8014d28:	4b14      	ldr	r3, [pc, #80]	@ (8014d7c <mg_sha1_transform+0x610>)
 8014d2a:	4413      	add	r3, r2
 8014d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014d2e:	4413      	add	r3, r2
 8014d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014d38:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 8014d3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d3e:	405a      	eors	r2, r3
 8014d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d42:	405a      	eors	r2, r3
 8014d44:	6a39      	ldr	r1, [r7, #32]
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	4059      	eors	r1, r3
 8014d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d4c:	4059      	eors	r1, r3
 8014d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d50:	404b      	eors	r3, r1
 8014d52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d5a:	441a      	add	r2, r3
 8014d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014d5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014d62:	441a      	add	r2, r3
 8014d64:	4b05      	ldr	r3, [pc, #20]	@ (8014d7c <mg_sha1_transform+0x610>)
 8014d66:	4413      	add	r3, r2
 8014d68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014d6a:	4413      	add	r3, r2
 8014d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014d74:	e004      	b.n	8014d80 <mg_sha1_transform+0x614>
 8014d76:	bf00      	nop
 8014d78:	5a827999 	.word	0x5a827999
 8014d7c:	6ed9eba1 	.word	0x6ed9eba1
 8014d80:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 8014d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d86:	405a      	eors	r2, r3
 8014d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d8a:	405a      	eors	r2, r3
 8014d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	4059      	eors	r1, r3
 8014d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d94:	4059      	eors	r1, r3
 8014d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d98:	404b      	eors	r3, r1
 8014d9a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da2:	441a      	add	r2, r3
 8014da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014da6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014daa:	441a      	add	r2, r3
 8014dac:	4ba9      	ldr	r3, [pc, #676]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014dae:	4413      	add	r3, r2
 8014db0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014db2:	4413      	add	r3, r2
 8014db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014db6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014db8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 8014dbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014dc2:	405a      	eors	r2, r3
 8014dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014dc6:	405a      	eors	r2, r3
 8014dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	4059      	eors	r1, r3
 8014dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dd0:	4059      	eors	r1, r3
 8014dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dd4:	404b      	eors	r3, r1
 8014dd6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8014ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dde:	441a      	add	r2, r3
 8014de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014de2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014de6:	441a      	add	r2, r3
 8014de8:	4b9a      	ldr	r3, [pc, #616]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014dea:	4413      	add	r3, r2
 8014dec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014dee:	4413      	add	r3, r2
 8014df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8014df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014df4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 8014dfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014dfe:	405a      	eors	r2, r3
 8014e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e02:	405a      	eors	r2, r3
 8014e04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	4059      	eors	r1, r3
 8014e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e0c:	4059      	eors	r1, r3
 8014e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e10:	404b      	eors	r3, r1
 8014e12:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e1a:	441a      	add	r2, r3
 8014e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e1e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014e22:	441a      	add	r2, r3
 8014e24:	4b8b      	ldr	r3, [pc, #556]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014e26:	4413      	add	r3, r2
 8014e28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014e2a:	4413      	add	r3, r2
 8014e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8014e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e30:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 8014e36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e3a:	405a      	eors	r2, r3
 8014e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e3e:	405a      	eors	r2, r3
 8014e40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014e42:	69fb      	ldr	r3, [r7, #28]
 8014e44:	4059      	eors	r1, r3
 8014e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e48:	4059      	eors	r1, r3
 8014e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e4c:	404b      	eors	r3, r1
 8014e4e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e56:	441a      	add	r2, r3
 8014e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e5a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014e5e:	441a      	add	r2, r3
 8014e60:	4b7c      	ldr	r3, [pc, #496]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014e62:	4413      	add	r3, r2
 8014e64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014e66:	4413      	add	r3, r2
 8014e68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e6c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014e70:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 8014e72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e76:	405a      	eors	r2, r3
 8014e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e7a:	405a      	eors	r2, r3
 8014e7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014e7e:	6a3b      	ldr	r3, [r7, #32]
 8014e80:	4059      	eors	r1, r3
 8014e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014e84:	4059      	eors	r1, r3
 8014e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e88:	404b      	eors	r3, r1
 8014e8a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014e8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8014e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014e92:	441a      	add	r2, r3
 8014e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014e96:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014e9a:	441a      	add	r2, r3
 8014e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014e9e:	4413      	add	r3, r2
 8014ea0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014ea2:	4413      	add	r3, r2
 8014ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ea8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014eac:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 8014eae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014eb2:	405a      	eors	r2, r3
 8014eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014eb6:	405a      	eors	r2, r3
 8014eb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ebc:	4059      	eors	r1, r3
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	4059      	eors	r1, r3
 8014ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ec4:	404b      	eors	r3, r1
 8014ec6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8014ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ece:	441a      	add	r2, r3
 8014ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ed2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014ed6:	441a      	add	r2, r3
 8014ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014eda:	4413      	add	r3, r2
 8014edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014ede:	4413      	add	r3, r2
 8014ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ee4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 8014eea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014eee:	405a      	eors	r2, r3
 8014ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ef2:	405a      	eors	r2, r3
 8014ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ef8:	4059      	eors	r1, r3
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	4059      	eors	r1, r3
 8014efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014f00:	404b      	eors	r3, r1
 8014f02:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014f0a:	441a      	add	r2, r3
 8014f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f0e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014f12:	441a      	add	r2, r3
 8014f14:	4b4f      	ldr	r3, [pc, #316]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014f16:	4413      	add	r3, r2
 8014f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014f1a:	4413      	add	r3, r2
 8014f1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8014f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014f20:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 8014f26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014f2a:	405a      	eors	r2, r3
 8014f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014f2e:	405a      	eors	r2, r3
 8014f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f34:	4059      	eors	r1, r3
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	4059      	eors	r1, r3
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	404b      	eors	r3, r1
 8014f3e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014f42:	60fb      	str	r3, [r7, #12]
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	441a      	add	r2, r3
 8014f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f4a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014f4e:	441a      	add	r2, r3
 8014f50:	4b40      	ldr	r3, [pc, #256]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014f52:	4413      	add	r3, r2
 8014f54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014f56:	4413      	add	r3, r2
 8014f58:	657b      	str	r3, [r7, #84]	@ 0x54
 8014f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f5c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 8014f62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f66:	405a      	eors	r2, r3
 8014f68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014f6a:	405a      	eors	r2, r3
 8014f6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f70:	4059      	eors	r1, r3
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	4059      	eors	r1, r3
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	404b      	eors	r3, r1
 8014f7a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014f7e:	613b      	str	r3, [r7, #16]
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	441a      	add	r2, r3
 8014f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f86:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014f8a:	441a      	add	r2, r3
 8014f8c:	4b31      	ldr	r3, [pc, #196]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014f8e:	4413      	add	r3, r2
 8014f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014f92:	4413      	add	r3, r2
 8014f94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f98:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 8014f9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fa2:	405a      	eors	r2, r3
 8014fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fa6:	405a      	eors	r2, r3
 8014fa8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fac:	4059      	eors	r1, r3
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	4059      	eors	r1, r3
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	404b      	eors	r3, r1
 8014fb6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014fba:	617b      	str	r3, [r7, #20]
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	441a      	add	r2, r3
 8014fc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014fc2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014fc6:	441a      	add	r2, r3
 8014fc8:	4b22      	ldr	r3, [pc, #136]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8014fca:	4413      	add	r3, r2
 8014fcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014fce:	4413      	add	r3, r2
 8014fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014fd4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014fd8:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 8014fda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014fde:	405a      	eors	r2, r3
 8014fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fe2:	405a      	eors	r2, r3
 8014fe4:	68f9      	ldr	r1, [r7, #12]
 8014fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe8:	4059      	eors	r1, r3
 8014fea:	6a3b      	ldr	r3, [r7, #32]
 8014fec:	4059      	eors	r1, r3
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	404b      	eors	r3, r1
 8014ff2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014ff6:	61bb      	str	r3, [r7, #24]
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	441a      	add	r2, r3
 8014ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ffe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015002:	441a      	add	r2, r3
 8015004:	4b13      	ldr	r3, [pc, #76]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8015006:	4413      	add	r3, r2
 8015008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801500a:	4413      	add	r3, r2
 801500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801500e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015010:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015014:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 8015016:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801501a:	405a      	eors	r2, r3
 801501c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801501e:	405a      	eors	r2, r3
 8015020:	6939      	ldr	r1, [r7, #16]
 8015022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015024:	4059      	eors	r1, r3
 8015026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015028:	4059      	eors	r1, r3
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	404b      	eors	r3, r1
 801502e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015032:	61fb      	str	r3, [r7, #28]
 8015034:	69fb      	ldr	r3, [r7, #28]
 8015036:	441a      	add	r2, r3
 8015038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801503a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801503e:	441a      	add	r2, r3
 8015040:	4b04      	ldr	r3, [pc, #16]	@ (8015054 <mg_sha1_transform+0x8e8>)
 8015042:	4413      	add	r3, r2
 8015044:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015046:	4413      	add	r3, r2
 8015048:	653b      	str	r3, [r7, #80]	@ 0x50
 801504a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801504c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015050:	e002      	b.n	8015058 <mg_sha1_transform+0x8ec>
 8015052:	bf00      	nop
 8015054:	6ed9eba1 	.word	0x6ed9eba1
 8015058:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 801505a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801505c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801505e:	405a      	eors	r2, r3
 8015060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015062:	405a      	eors	r2, r3
 8015064:	6979      	ldr	r1, [r7, #20]
 8015066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015068:	4059      	eors	r1, r3
 801506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801506c:	4059      	eors	r1, r3
 801506e:	6a3b      	ldr	r3, [r7, #32]
 8015070:	404b      	eors	r3, r1
 8015072:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015076:	623b      	str	r3, [r7, #32]
 8015078:	6a3b      	ldr	r3, [r7, #32]
 801507a:	441a      	add	r2, r3
 801507c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801507e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015082:	441a      	add	r2, r3
 8015084:	4ba9      	ldr	r3, [pc, #676]	@ (801532c <mg_sha1_transform+0xbc0>)
 8015086:	4413      	add	r3, r2
 8015088:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801508a:	4413      	add	r3, r2
 801508c:	657b      	str	r3, [r7, #84]	@ 0x54
 801508e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015090:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015094:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 8015096:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801509a:	405a      	eors	r2, r3
 801509c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801509e:	405a      	eors	r2, r3
 80150a0:	69b9      	ldr	r1, [r7, #24]
 80150a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80150a4:	4059      	eors	r1, r3
 80150a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a8:	4059      	eors	r1, r3
 80150aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ac:	404b      	eors	r3, r1
 80150ae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80150b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80150b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b6:	441a      	add	r2, r3
 80150b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80150ba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80150be:	441a      	add	r2, r3
 80150c0:	4b9a      	ldr	r3, [pc, #616]	@ (801532c <mg_sha1_transform+0xbc0>)
 80150c2:	4413      	add	r3, r2
 80150c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80150c6:	4413      	add	r3, r2
 80150c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80150ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80150cc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80150d0:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 80150d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80150d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80150d6:	405a      	eors	r2, r3
 80150d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150da:	405a      	eors	r2, r3
 80150dc:	69f9      	ldr	r1, [r7, #28]
 80150de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80150e0:	4059      	eors	r1, r3
 80150e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150e4:	4059      	eors	r1, r3
 80150e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150e8:	404b      	eors	r3, r1
 80150ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80150ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80150f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150f2:	441a      	add	r2, r3
 80150f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80150fa:	441a      	add	r2, r3
 80150fc:	4b8b      	ldr	r3, [pc, #556]	@ (801532c <mg_sha1_transform+0xbc0>)
 80150fe:	4413      	add	r3, r2
 8015100:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015102:	4413      	add	r3, r2
 8015104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015108:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801510c:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 801510e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015112:	431a      	orrs	r2, r3
 8015114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015116:	401a      	ands	r2, r3
 8015118:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801511a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801511c:	400b      	ands	r3, r1
 801511e:	431a      	orrs	r2, r3
 8015120:	6a39      	ldr	r1, [r7, #32]
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	4059      	eors	r1, r3
 8015126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015128:	4059      	eors	r1, r3
 801512a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512c:	404b      	eors	r3, r1
 801512e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015136:	441a      	add	r2, r3
 8015138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801513a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801513e:	441a      	add	r2, r3
 8015140:	4b7b      	ldr	r3, [pc, #492]	@ (8015330 <mg_sha1_transform+0xbc4>)
 8015142:	4413      	add	r3, r2
 8015144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015146:	4413      	add	r3, r2
 8015148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801514a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801514c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015150:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 8015152:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015156:	431a      	orrs	r2, r3
 8015158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801515a:	401a      	ands	r2, r3
 801515c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801515e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015160:	400b      	ands	r3, r1
 8015162:	431a      	orrs	r2, r3
 8015164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	4059      	eors	r1, r3
 801516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801516c:	4059      	eors	r1, r3
 801516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015170:	404b      	eors	r3, r1
 8015172:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015176:	633b      	str	r3, [r7, #48]	@ 0x30
 8015178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801517a:	441a      	add	r2, r3
 801517c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801517e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015182:	441a      	add	r2, r3
 8015184:	4b6a      	ldr	r3, [pc, #424]	@ (8015330 <mg_sha1_transform+0xbc4>)
 8015186:	4413      	add	r3, r2
 8015188:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801518a:	4413      	add	r3, r2
 801518c:	653b      	str	r3, [r7, #80]	@ 0x50
 801518e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015190:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015194:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 8015196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801519a:	431a      	orrs	r2, r3
 801519c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801519e:	401a      	ands	r2, r3
 80151a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80151a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151a4:	400b      	ands	r3, r1
 80151a6:	431a      	orrs	r2, r3
 80151a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	4059      	eors	r1, r3
 80151ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80151b0:	4059      	eors	r1, r3
 80151b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151b4:	404b      	eors	r3, r1
 80151b6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80151ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80151bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151be:	441a      	add	r2, r3
 80151c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80151c2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80151c6:	441a      	add	r2, r3
 80151c8:	4b59      	ldr	r3, [pc, #356]	@ (8015330 <mg_sha1_transform+0xbc4>)
 80151ca:	4413      	add	r3, r2
 80151cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80151ce:	4413      	add	r3, r2
 80151d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80151d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151d4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80151d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 80151da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80151dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151de:	431a      	orrs	r2, r3
 80151e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80151e2:	401a      	ands	r2, r3
 80151e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80151e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80151e8:	400b      	ands	r3, r1
 80151ea:	431a      	orrs	r2, r3
 80151ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80151ee:	69bb      	ldr	r3, [r7, #24]
 80151f0:	4059      	eors	r1, r3
 80151f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80151f4:	4059      	eors	r1, r3
 80151f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151f8:	404b      	eors	r3, r1
 80151fa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80151fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015202:	441a      	add	r2, r3
 8015204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015206:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801520a:	441a      	add	r2, r3
 801520c:	4b48      	ldr	r3, [pc, #288]	@ (8015330 <mg_sha1_transform+0xbc4>)
 801520e:	4413      	add	r3, r2
 8015210:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015212:	4413      	add	r3, r2
 8015214:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015218:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801521c:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 801521e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015222:	431a      	orrs	r2, r3
 8015224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015226:	401a      	ands	r2, r3
 8015228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801522a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801522c:	400b      	ands	r3, r1
 801522e:	431a      	orrs	r2, r3
 8015230:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015232:	69fb      	ldr	r3, [r7, #28]
 8015234:	4059      	eors	r1, r3
 8015236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015238:	4059      	eors	r1, r3
 801523a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801523c:	404b      	eors	r3, r1
 801523e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015246:	441a      	add	r2, r3
 8015248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801524a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801524e:	441a      	add	r2, r3
 8015250:	4b37      	ldr	r3, [pc, #220]	@ (8015330 <mg_sha1_transform+0xbc4>)
 8015252:	4413      	add	r3, r2
 8015254:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015256:	4413      	add	r3, r2
 8015258:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801525a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801525c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015260:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 8015262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015266:	431a      	orrs	r2, r3
 8015268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801526a:	401a      	ands	r2, r3
 801526c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801526e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015270:	400b      	ands	r3, r1
 8015272:	431a      	orrs	r2, r3
 8015274:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	4059      	eors	r1, r3
 801527a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801527c:	4059      	eors	r1, r3
 801527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015280:	404b      	eors	r3, r1
 8015282:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015286:	643b      	str	r3, [r7, #64]	@ 0x40
 8015288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801528a:	441a      	add	r2, r3
 801528c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801528e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015292:	441a      	add	r2, r3
 8015294:	4b26      	ldr	r3, [pc, #152]	@ (8015330 <mg_sha1_transform+0xbc4>)
 8015296:	4413      	add	r3, r2
 8015298:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801529a:	4413      	add	r3, r2
 801529c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801529e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152a0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80152a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 80152a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80152a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152aa:	431a      	orrs	r2, r3
 80152ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80152ae:	401a      	ands	r2, r3
 80152b0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80152b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152b4:	400b      	ands	r3, r1
 80152b6:	431a      	orrs	r2, r3
 80152b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80152ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152bc:	4059      	eors	r1, r3
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	4059      	eors	r1, r3
 80152c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152c4:	404b      	eors	r3, r1
 80152c6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80152ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80152cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152ce:	441a      	add	r2, r3
 80152d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80152d2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80152d6:	441a      	add	r2, r3
 80152d8:	4b15      	ldr	r3, [pc, #84]	@ (8015330 <mg_sha1_transform+0xbc4>)
 80152da:	4413      	add	r3, r2
 80152dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152de:	4413      	add	r3, r2
 80152e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80152e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152e4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80152e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 80152ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80152ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152ee:	431a      	orrs	r2, r3
 80152f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80152f2:	401a      	ands	r2, r3
 80152f4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80152f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80152f8:	400b      	ands	r3, r1
 80152fa:	431a      	orrs	r2, r3
 80152fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80152fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015300:	4059      	eors	r1, r3
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	4059      	eors	r1, r3
 8015306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015308:	404b      	eors	r3, r1
 801530a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801530e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015312:	441a      	add	r2, r3
 8015314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015316:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801531a:	441a      	add	r2, r3
 801531c:	4b04      	ldr	r3, [pc, #16]	@ (8015330 <mg_sha1_transform+0xbc4>)
 801531e:	4413      	add	r3, r2
 8015320:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015322:	4413      	add	r3, r2
 8015324:	657b      	str	r3, [r7, #84]	@ 0x54
 8015326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015328:	e004      	b.n	8015334 <mg_sha1_transform+0xbc8>
 801532a:	bf00      	nop
 801532c:	6ed9eba1 	.word	0x6ed9eba1
 8015330:	8f1bbcdc 	.word	0x8f1bbcdc
 8015334:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 801533a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801533c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801533e:	431a      	orrs	r2, r3
 8015340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015342:	401a      	ands	r2, r3
 8015344:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015348:	400b      	ands	r3, r1
 801534a:	431a      	orrs	r2, r3
 801534c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015350:	4059      	eors	r1, r3
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	4059      	eors	r1, r3
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	404b      	eors	r3, r1
 801535a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801535e:	60fb      	str	r3, [r7, #12]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	441a      	add	r2, r3
 8015364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015366:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801536a:	441a      	add	r2, r3
 801536c:	4ba8      	ldr	r3, [pc, #672]	@ (8015610 <mg_sha1_transform+0xea4>)
 801536e:	4413      	add	r3, r2
 8015370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015372:	4413      	add	r3, r2
 8015374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015378:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801537c:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 801537e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015382:	431a      	orrs	r2, r3
 8015384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015386:	401a      	ands	r2, r3
 8015388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801538a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801538c:	400b      	ands	r3, r1
 801538e:	431a      	orrs	r2, r3
 8015390:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015394:	4059      	eors	r1, r3
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	4059      	eors	r1, r3
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	404b      	eors	r3, r1
 801539e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80153a2:	613b      	str	r3, [r7, #16]
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	441a      	add	r2, r3
 80153a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80153aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80153ae:	441a      	add	r2, r3
 80153b0:	4b97      	ldr	r3, [pc, #604]	@ (8015610 <mg_sha1_transform+0xea4>)
 80153b2:	4413      	add	r3, r2
 80153b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80153b6:	4413      	add	r3, r2
 80153b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80153ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80153c0:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 80153c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80153c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153c6:	431a      	orrs	r2, r3
 80153c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153ca:	401a      	ands	r2, r3
 80153cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80153ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80153d0:	400b      	ands	r3, r1
 80153d2:	431a      	orrs	r2, r3
 80153d4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80153d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153d8:	4059      	eors	r1, r3
 80153da:	69fb      	ldr	r3, [r7, #28]
 80153dc:	4059      	eors	r1, r3
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	404b      	eors	r3, r1
 80153e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80153e6:	617b      	str	r3, [r7, #20]
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	441a      	add	r2, r3
 80153ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80153ee:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80153f2:	441a      	add	r2, r3
 80153f4:	4b86      	ldr	r3, [pc, #536]	@ (8015610 <mg_sha1_transform+0xea4>)
 80153f6:	4413      	add	r3, r2
 80153f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80153fa:	4413      	add	r3, r2
 80153fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80153fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015400:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015404:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 8015406:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801540a:	431a      	orrs	r2, r3
 801540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801540e:	401a      	ands	r2, r3
 8015410:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8015412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015414:	400b      	ands	r3, r1
 8015416:	431a      	orrs	r2, r3
 8015418:	68f9      	ldr	r1, [r7, #12]
 801541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801541c:	4059      	eors	r1, r3
 801541e:	6a3b      	ldr	r3, [r7, #32]
 8015420:	4059      	eors	r1, r3
 8015422:	69bb      	ldr	r3, [r7, #24]
 8015424:	404b      	eors	r3, r1
 8015426:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801542a:	61bb      	str	r3, [r7, #24]
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	441a      	add	r2, r3
 8015430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015432:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015436:	441a      	add	r2, r3
 8015438:	4b75      	ldr	r3, [pc, #468]	@ (8015610 <mg_sha1_transform+0xea4>)
 801543a:	4413      	add	r3, r2
 801543c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801543e:	4413      	add	r3, r2
 8015440:	653b      	str	r3, [r7, #80]	@ 0x50
 8015442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015444:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015448:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 801544a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801544c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801544e:	431a      	orrs	r2, r3
 8015450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015452:	401a      	ands	r2, r3
 8015454:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015458:	400b      	ands	r3, r1
 801545a:	431a      	orrs	r2, r3
 801545c:	6939      	ldr	r1, [r7, #16]
 801545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015460:	4059      	eors	r1, r3
 8015462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015464:	4059      	eors	r1, r3
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	404b      	eors	r3, r1
 801546a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801546e:	61fb      	str	r3, [r7, #28]
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	441a      	add	r2, r3
 8015474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015476:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801547a:	441a      	add	r2, r3
 801547c:	4b64      	ldr	r3, [pc, #400]	@ (8015610 <mg_sha1_transform+0xea4>)
 801547e:	4413      	add	r3, r2
 8015480:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015482:	4413      	add	r3, r2
 8015484:	657b      	str	r3, [r7, #84]	@ 0x54
 8015486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015488:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801548c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 801548e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015492:	431a      	orrs	r2, r3
 8015494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015496:	401a      	ands	r2, r3
 8015498:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801549c:	400b      	ands	r3, r1
 801549e:	431a      	orrs	r2, r3
 80154a0:	6979      	ldr	r1, [r7, #20]
 80154a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80154a4:	4059      	eors	r1, r3
 80154a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154a8:	4059      	eors	r1, r3
 80154aa:	6a3b      	ldr	r3, [r7, #32]
 80154ac:	404b      	eors	r3, r1
 80154ae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80154b2:	623b      	str	r3, [r7, #32]
 80154b4:	6a3b      	ldr	r3, [r7, #32]
 80154b6:	441a      	add	r2, r3
 80154b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80154ba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80154be:	441a      	add	r2, r3
 80154c0:	4b53      	ldr	r3, [pc, #332]	@ (8015610 <mg_sha1_transform+0xea4>)
 80154c2:	4413      	add	r3, r2
 80154c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80154c6:	4413      	add	r3, r2
 80154c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80154cc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80154d0:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 80154d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80154d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80154d6:	431a      	orrs	r2, r3
 80154d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80154da:	401a      	ands	r2, r3
 80154dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80154de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80154e0:	400b      	ands	r3, r1
 80154e2:	431a      	orrs	r2, r3
 80154e4:	69b9      	ldr	r1, [r7, #24]
 80154e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80154e8:	4059      	eors	r1, r3
 80154ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ec:	4059      	eors	r1, r3
 80154ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f0:	404b      	eors	r3, r1
 80154f2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80154f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80154f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154fa:	441a      	add	r2, r3
 80154fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80154fe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015502:	441a      	add	r2, r3
 8015504:	4b42      	ldr	r3, [pc, #264]	@ (8015610 <mg_sha1_transform+0xea4>)
 8015506:	4413      	add	r3, r2
 8015508:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801550a:	4413      	add	r3, r2
 801550c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801550e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015510:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015514:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 8015516:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801551a:	431a      	orrs	r2, r3
 801551c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801551e:	401a      	ands	r2, r3
 8015520:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015524:	400b      	ands	r3, r1
 8015526:	431a      	orrs	r2, r3
 8015528:	69f9      	ldr	r1, [r7, #28]
 801552a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801552c:	4059      	eors	r1, r3
 801552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015530:	4059      	eors	r1, r3
 8015532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015534:	404b      	eors	r3, r1
 8015536:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801553a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801553e:	441a      	add	r2, r3
 8015540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015542:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015546:	441a      	add	r2, r3
 8015548:	4b31      	ldr	r3, [pc, #196]	@ (8015610 <mg_sha1_transform+0xea4>)
 801554a:	4413      	add	r3, r2
 801554c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801554e:	4413      	add	r3, r2
 8015550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015554:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015558:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 801555a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801555c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801555e:	431a      	orrs	r2, r3
 8015560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015562:	401a      	ands	r2, r3
 8015564:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8015566:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015568:	400b      	ands	r3, r1
 801556a:	431a      	orrs	r2, r3
 801556c:	6a39      	ldr	r1, [r7, #32]
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	4059      	eors	r1, r3
 8015572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015574:	4059      	eors	r1, r3
 8015576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015578:	404b      	eors	r3, r1
 801557a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015582:	441a      	add	r2, r3
 8015584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015586:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801558a:	441a      	add	r2, r3
 801558c:	4b20      	ldr	r3, [pc, #128]	@ (8015610 <mg_sha1_transform+0xea4>)
 801558e:	4413      	add	r3, r2
 8015590:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015592:	4413      	add	r3, r2
 8015594:	653b      	str	r3, [r7, #80]	@ 0x50
 8015596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015598:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801559c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 801559e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80155a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80155a2:	431a      	orrs	r2, r3
 80155a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80155a6:	401a      	ands	r2, r3
 80155a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80155aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80155ac:	400b      	ands	r3, r1
 80155ae:	431a      	orrs	r2, r3
 80155b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	4059      	eors	r1, r3
 80155b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155b8:	4059      	eors	r1, r3
 80155ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155bc:	404b      	eors	r3, r1
 80155be:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80155c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80155c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155c6:	441a      	add	r2, r3
 80155c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80155ca:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80155ce:	441a      	add	r2, r3
 80155d0:	4b0f      	ldr	r3, [pc, #60]	@ (8015610 <mg_sha1_transform+0xea4>)
 80155d2:	4413      	add	r3, r2
 80155d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80155d6:	4413      	add	r3, r2
 80155d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80155da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80155e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 80155e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80155e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155e6:	431a      	orrs	r2, r3
 80155e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80155ea:	401a      	ands	r2, r3
 80155ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80155ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80155f0:	400b      	ands	r3, r1
 80155f2:	431a      	orrs	r2, r3
 80155f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	4059      	eors	r1, r3
 80155fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155fc:	4059      	eors	r1, r3
 80155fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015600:	404b      	eors	r3, r1
 8015602:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015606:	637b      	str	r3, [r7, #52]	@ 0x34
 8015608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801560a:	441a      	add	r2, r3
 801560c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801560e:	e001      	b.n	8015614 <mg_sha1_transform+0xea8>
 8015610:	8f1bbcdc 	.word	0x8f1bbcdc
 8015614:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015618:	441a      	add	r2, r3
 801561a:	4ba9      	ldr	r3, [pc, #676]	@ (80158c0 <mg_sha1_transform+0x1154>)
 801561c:	4413      	add	r3, r2
 801561e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015620:	4413      	add	r3, r2
 8015622:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015626:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801562a:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 801562c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801562e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015630:	431a      	orrs	r2, r3
 8015632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015634:	401a      	ands	r2, r3
 8015636:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8015638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801563a:	400b      	ands	r3, r1
 801563c:	431a      	orrs	r2, r3
 801563e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	4059      	eors	r1, r3
 8015644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015646:	4059      	eors	r1, r3
 8015648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801564a:	404b      	eors	r3, r1
 801564c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015654:	441a      	add	r2, r3
 8015656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015658:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801565c:	441a      	add	r2, r3
 801565e:	4b98      	ldr	r3, [pc, #608]	@ (80158c0 <mg_sha1_transform+0x1154>)
 8015660:	4413      	add	r3, r2
 8015662:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015664:	4413      	add	r3, r2
 8015666:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801566a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801566e:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 8015670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015674:	405a      	eors	r2, r3
 8015676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015678:	405a      	eors	r2, r3
 801567a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	4059      	eors	r1, r3
 8015680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015682:	4059      	eors	r1, r3
 8015684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015686:	404b      	eors	r3, r1
 8015688:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801568c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801568e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015690:	441a      	add	r2, r3
 8015692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015694:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015698:	441a      	add	r2, r3
 801569a:	4b8a      	ldr	r3, [pc, #552]	@ (80158c4 <mg_sha1_transform+0x1158>)
 801569c:	4413      	add	r3, r2
 801569e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80156a0:	4413      	add	r3, r2
 80156a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80156a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80156a6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80156aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 80156ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80156ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80156b0:	405a      	eors	r2, r3
 80156b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156b4:	405a      	eors	r2, r3
 80156b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80156b8:	6a3b      	ldr	r3, [r7, #32]
 80156ba:	4059      	eors	r1, r3
 80156bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156be:	4059      	eors	r1, r3
 80156c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156c2:	404b      	eors	r3, r1
 80156c4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80156c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80156ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156cc:	441a      	add	r2, r3
 80156ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156d0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80156d4:	441a      	add	r2, r3
 80156d6:	4b7b      	ldr	r3, [pc, #492]	@ (80158c4 <mg_sha1_transform+0x1158>)
 80156d8:	4413      	add	r3, r2
 80156da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80156dc:	4413      	add	r3, r2
 80156de:	653b      	str	r3, [r7, #80]	@ 0x50
 80156e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80156e2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80156e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 80156e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80156ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80156ec:	405a      	eors	r2, r3
 80156ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80156f0:	405a      	eors	r2, r3
 80156f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80156f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156f6:	4059      	eors	r1, r3
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	4059      	eors	r1, r3
 80156fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80156fe:	404b      	eors	r3, r1
 8015700:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015704:	647b      	str	r3, [r7, #68]	@ 0x44
 8015706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015708:	441a      	add	r2, r3
 801570a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801570c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015710:	441a      	add	r2, r3
 8015712:	4b6c      	ldr	r3, [pc, #432]	@ (80158c4 <mg_sha1_transform+0x1158>)
 8015714:	4413      	add	r3, r2
 8015716:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015718:	4413      	add	r3, r2
 801571a:	657b      	str	r3, [r7, #84]	@ 0x54
 801571c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801571e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 8015724:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015728:	405a      	eors	r2, r3
 801572a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801572c:	405a      	eors	r2, r3
 801572e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015732:	4059      	eors	r1, r3
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	4059      	eors	r1, r3
 8015738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801573a:	404b      	eors	r3, r1
 801573c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015744:	441a      	add	r2, r3
 8015746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015748:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801574c:	441a      	add	r2, r3
 801574e:	4b5d      	ldr	r3, [pc, #372]	@ (80158c4 <mg_sha1_transform+0x1158>)
 8015750:	4413      	add	r3, r2
 8015752:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015754:	4413      	add	r3, r2
 8015756:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801575a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801575e:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 8015760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015764:	405a      	eors	r2, r3
 8015766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015768:	405a      	eors	r2, r3
 801576a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801576c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801576e:	4059      	eors	r1, r3
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	4059      	eors	r1, r3
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	404b      	eors	r3, r1
 8015778:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801577c:	60fb      	str	r3, [r7, #12]
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	441a      	add	r2, r3
 8015782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015784:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015788:	441a      	add	r2, r3
 801578a:	4b4e      	ldr	r3, [pc, #312]	@ (80158c4 <mg_sha1_transform+0x1158>)
 801578c:	4413      	add	r3, r2
 801578e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015790:	4413      	add	r3, r2
 8015792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015796:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801579a:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 801579c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801579e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157a0:	405a      	eors	r2, r3
 80157a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157a4:	405a      	eors	r2, r3
 80157a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80157a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157aa:	4059      	eors	r1, r3
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	4059      	eors	r1, r3
 80157b0:	693b      	ldr	r3, [r7, #16]
 80157b2:	404b      	eors	r3, r1
 80157b4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80157b8:	613b      	str	r3, [r7, #16]
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	441a      	add	r2, r3
 80157be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80157c0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80157c4:	441a      	add	r2, r3
 80157c6:	4b3f      	ldr	r3, [pc, #252]	@ (80158c4 <mg_sha1_transform+0x1158>)
 80157c8:	4413      	add	r3, r2
 80157ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80157cc:	4413      	add	r3, r2
 80157ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80157d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80157d2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80157d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 80157d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80157da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80157dc:	405a      	eors	r2, r3
 80157de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157e0:	405a      	eors	r2, r3
 80157e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80157e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157e6:	4059      	eors	r1, r3
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	4059      	eors	r1, r3
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	404b      	eors	r3, r1
 80157f0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80157f4:	617b      	str	r3, [r7, #20]
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	441a      	add	r2, r3
 80157fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157fc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015800:	441a      	add	r2, r3
 8015802:	4b30      	ldr	r3, [pc, #192]	@ (80158c4 <mg_sha1_transform+0x1158>)
 8015804:	4413      	add	r3, r2
 8015806:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015808:	4413      	add	r3, r2
 801580a:	653b      	str	r3, [r7, #80]	@ 0x50
 801580c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801580e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 8015814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015818:	405a      	eors	r2, r3
 801581a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801581c:	405a      	eors	r2, r3
 801581e:	68f9      	ldr	r1, [r7, #12]
 8015820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015822:	4059      	eors	r1, r3
 8015824:	6a3b      	ldr	r3, [r7, #32]
 8015826:	4059      	eors	r1, r3
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	404b      	eors	r3, r1
 801582c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015830:	61bb      	str	r3, [r7, #24]
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	441a      	add	r2, r3
 8015836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015838:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801583c:	441a      	add	r2, r3
 801583e:	4b21      	ldr	r3, [pc, #132]	@ (80158c4 <mg_sha1_transform+0x1158>)
 8015840:	4413      	add	r3, r2
 8015842:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015844:	4413      	add	r3, r2
 8015846:	657b      	str	r3, [r7, #84]	@ 0x54
 8015848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801584a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 8015850:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015854:	405a      	eors	r2, r3
 8015856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015858:	405a      	eors	r2, r3
 801585a:	6939      	ldr	r1, [r7, #16]
 801585c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801585e:	4059      	eors	r1, r3
 8015860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015862:	4059      	eors	r1, r3
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	404b      	eors	r3, r1
 8015868:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801586c:	61fb      	str	r3, [r7, #28]
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	441a      	add	r2, r3
 8015872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015874:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015878:	441a      	add	r2, r3
 801587a:	4b12      	ldr	r3, [pc, #72]	@ (80158c4 <mg_sha1_transform+0x1158>)
 801587c:	4413      	add	r3, r2
 801587e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015880:	4413      	add	r3, r2
 8015882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015886:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801588a:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 801588c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801588e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015890:	405a      	eors	r2, r3
 8015892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015894:	405a      	eors	r2, r3
 8015896:	6979      	ldr	r1, [r7, #20]
 8015898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801589a:	4059      	eors	r1, r3
 801589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801589e:	4059      	eors	r1, r3
 80158a0:	6a3b      	ldr	r3, [r7, #32]
 80158a2:	404b      	eors	r3, r1
 80158a4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80158a8:	623b      	str	r3, [r7, #32]
 80158aa:	6a3b      	ldr	r3, [r7, #32]
 80158ac:	441a      	add	r2, r3
 80158ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80158b0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80158b4:	441a      	add	r2, r3
 80158b6:	4b03      	ldr	r3, [pc, #12]	@ (80158c4 <mg_sha1_transform+0x1158>)
 80158b8:	4413      	add	r3, r2
 80158ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80158bc:	4413      	add	r3, r2
 80158be:	e003      	b.n	80158c8 <mg_sha1_transform+0x115c>
 80158c0:	8f1bbcdc 	.word	0x8f1bbcdc
 80158c4:	ca62c1d6 	.word	0xca62c1d6
 80158c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80158ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80158cc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80158d0:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 80158d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80158d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80158d6:	405a      	eors	r2, r3
 80158d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158da:	405a      	eors	r2, r3
 80158dc:	69b9      	ldr	r1, [r7, #24]
 80158de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80158e0:	4059      	eors	r1, r3
 80158e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158e4:	4059      	eors	r1, r3
 80158e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158e8:	404b      	eors	r3, r1
 80158ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80158ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80158f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f2:	441a      	add	r2, r3
 80158f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80158f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80158fa:	441a      	add	r2, r3
 80158fc:	4ba7      	ldr	r3, [pc, #668]	@ (8015b9c <mg_sha1_transform+0x1430>)
 80158fe:	4413      	add	r3, r2
 8015900:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015902:	4413      	add	r3, r2
 8015904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015908:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801590c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 801590e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015912:	405a      	eors	r2, r3
 8015914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015916:	405a      	eors	r2, r3
 8015918:	69f9      	ldr	r1, [r7, #28]
 801591a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801591c:	4059      	eors	r1, r3
 801591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015920:	4059      	eors	r1, r3
 8015922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015924:	404b      	eors	r3, r1
 8015926:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801592a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801592e:	441a      	add	r2, r3
 8015930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015932:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015936:	441a      	add	r2, r3
 8015938:	4b98      	ldr	r3, [pc, #608]	@ (8015b9c <mg_sha1_transform+0x1430>)
 801593a:	4413      	add	r3, r2
 801593c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801593e:	4413      	add	r3, r2
 8015940:	653b      	str	r3, [r7, #80]	@ 0x50
 8015942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015944:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015948:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 801594a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801594c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801594e:	405a      	eors	r2, r3
 8015950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015952:	405a      	eors	r2, r3
 8015954:	6a39      	ldr	r1, [r7, #32]
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	4059      	eors	r1, r3
 801595a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801595c:	4059      	eors	r1, r3
 801595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015960:	404b      	eors	r3, r1
 8015962:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801596a:	441a      	add	r2, r3
 801596c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801596e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015972:	441a      	add	r2, r3
 8015974:	4b89      	ldr	r3, [pc, #548]	@ (8015b9c <mg_sha1_transform+0x1430>)
 8015976:	4413      	add	r3, r2
 8015978:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801597a:	4413      	add	r3, r2
 801597c:	657b      	str	r3, [r7, #84]	@ 0x54
 801597e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015980:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015984:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 8015986:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801598a:	405a      	eors	r2, r3
 801598c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801598e:	405a      	eors	r2, r3
 8015990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	4059      	eors	r1, r3
 8015996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015998:	4059      	eors	r1, r3
 801599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801599c:	404b      	eors	r3, r1
 801599e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80159a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80159a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159a6:	441a      	add	r2, r3
 80159a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80159aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80159ae:	441a      	add	r2, r3
 80159b0:	4b7a      	ldr	r3, [pc, #488]	@ (8015b9c <mg_sha1_transform+0x1430>)
 80159b2:	4413      	add	r3, r2
 80159b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80159b6:	4413      	add	r3, r2
 80159b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80159ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80159bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80159c0:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 80159c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80159c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80159c6:	405a      	eors	r2, r3
 80159c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159ca:	405a      	eors	r2, r3
 80159cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	4059      	eors	r1, r3
 80159d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159d4:	4059      	eors	r1, r3
 80159d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159d8:	404b      	eors	r3, r1
 80159da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80159de:	637b      	str	r3, [r7, #52]	@ 0x34
 80159e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159e2:	441a      	add	r2, r3
 80159e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80159e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80159ea:	441a      	add	r2, r3
 80159ec:	4b6b      	ldr	r3, [pc, #428]	@ (8015b9c <mg_sha1_transform+0x1430>)
 80159ee:	4413      	add	r3, r2
 80159f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80159f2:	4413      	add	r3, r2
 80159f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80159f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80159f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80159fc:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 80159fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a02:	405a      	eors	r2, r3
 8015a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a06:	405a      	eors	r2, r3
 8015a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	4059      	eors	r1, r3
 8015a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a10:	4059      	eors	r1, r3
 8015a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a14:	404b      	eors	r3, r1
 8015a16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a1e:	441a      	add	r2, r3
 8015a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015a26:	441a      	add	r2, r3
 8015a28:	4b5c      	ldr	r3, [pc, #368]	@ (8015b9c <mg_sha1_transform+0x1430>)
 8015a2a:	4413      	add	r3, r2
 8015a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015a2e:	4413      	add	r3, r2
 8015a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015a34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015a38:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 8015a3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015a3e:	405a      	eors	r2, r3
 8015a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a42:	405a      	eors	r2, r3
 8015a44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015a46:	69fb      	ldr	r3, [r7, #28]
 8015a48:	4059      	eors	r1, r3
 8015a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015a4c:	4059      	eors	r1, r3
 8015a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a50:	404b      	eors	r3, r1
 8015a52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a5a:	441a      	add	r2, r3
 8015a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015a62:	441a      	add	r2, r3
 8015a64:	4b4d      	ldr	r3, [pc, #308]	@ (8015b9c <mg_sha1_transform+0x1430>)
 8015a66:	4413      	add	r3, r2
 8015a68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015a6a:	4413      	add	r3, r2
 8015a6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8015a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 8015a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a7a:	405a      	eors	r2, r3
 8015a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015a7e:	405a      	eors	r2, r3
 8015a80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015a82:	6a3b      	ldr	r3, [r7, #32]
 8015a84:	4059      	eors	r1, r3
 8015a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015a88:	4059      	eors	r1, r3
 8015a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a8c:	404b      	eors	r3, r1
 8015a8e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8015a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a96:	441a      	add	r2, r3
 8015a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a9a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015a9e:	441a      	add	r2, r3
 8015aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8015b9c <mg_sha1_transform+0x1430>)
 8015aa2:	4413      	add	r3, r2
 8015aa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015aa6:	4413      	add	r3, r2
 8015aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8015aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015aac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 8015ab2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ab6:	405a      	eors	r2, r3
 8015ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015aba:	405a      	eors	r2, r3
 8015abc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac0:	4059      	eors	r1, r3
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	4059      	eors	r1, r3
 8015ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ac8:	404b      	eors	r3, r1
 8015aca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8015ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015ad2:	441a      	add	r2, r3
 8015ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ad6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015ada:	441a      	add	r2, r3
 8015adc:	4b2f      	ldr	r3, [pc, #188]	@ (8015b9c <mg_sha1_transform+0x1430>)
 8015ade:	4413      	add	r3, r2
 8015ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015ae2:	4413      	add	r3, r2
 8015ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ae8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015aec:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 8015aee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015af2:	405a      	eors	r2, r3
 8015af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015af6:	405a      	eors	r2, r3
 8015af8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015afc:	4059      	eors	r1, r3
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	4059      	eors	r1, r3
 8015b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b04:	404b      	eors	r3, r1
 8015b06:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b0e:	441a      	add	r2, r3
 8015b10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015b12:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8015b16:	441a      	add	r2, r3
 8015b18:	4b20      	ldr	r3, [pc, #128]	@ (8015b9c <mg_sha1_transform+0x1430>)
 8015b1a:	4413      	add	r3, r2
 8015b1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8015b1e:	4413      	add	r3, r2
 8015b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b24:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8015b28:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015b30:	441a      	add	r2, r3
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	601a      	str	r2, [r3, #0]
  state[1] += b;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3304      	adds	r3, #4
 8015b3a:	6819      	ldr	r1, [r3, #0]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	3304      	adds	r3, #4
 8015b40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015b42:	440a      	add	r2, r1
 8015b44:	601a      	str	r2, [r3, #0]
  state[2] += c;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	3308      	adds	r3, #8
 8015b4a:	6819      	ldr	r1, [r3, #0]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	3308      	adds	r3, #8
 8015b50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015b52:	440a      	add	r2, r1
 8015b54:	601a      	str	r2, [r3, #0]
  state[3] += d;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	330c      	adds	r3, #12
 8015b5a:	6819      	ldr	r1, [r3, #0]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	330c      	adds	r3, #12
 8015b60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015b62:	440a      	add	r2, r1
 8015b64:	601a      	str	r2, [r3, #0]
  state[4] += e;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	3310      	adds	r3, #16
 8015b6a:	6819      	ldr	r1, [r3, #0]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	3310      	adds	r3, #16
 8015b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015b72:	440a      	add	r2, r1
 8015b74:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8015b76:	f107 030c 	add.w	r3, r7, #12
 8015b7a:	2240      	movs	r2, #64	@ 0x40
 8015b7c:	2100      	movs	r1, #0
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f012 fe0e 	bl	80287a0 <memset>
  a = b = c = d = e = 0;
 8015b84:	2300      	movs	r3, #0
 8015b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8015b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8015b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015b94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015b98:	e002      	b.n	8015ba0 <mg_sha1_transform+0x1434>
 8015b9a:	bf00      	nop
 8015b9c:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 8015ba0:	bf00      	nop
 8015ba2:	3764      	adds	r7, #100	@ 0x64
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd90      	pop	{r4, r7, pc}

08015ba8 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8015ba8:	b480      	push	{r7}
 8015baa:	b083      	sub	sp, #12
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8015be8 <mg_sha1_init+0x40>)
 8015bb4:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8015bec <mg_sha1_init+0x44>)
 8015bba:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8015bf0 <mg_sha1_init+0x48>)
 8015bc0:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8015bf4 <mg_sha1_init+0x4c>)
 8015bc6:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	4a0b      	ldr	r2, [pc, #44]	@ (8015bf8 <mg_sha1_init+0x50>)
 8015bcc:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	619a      	str	r2, [r3, #24]
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	699a      	ldr	r2, [r3, #24]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	615a      	str	r2, [r3, #20]
}
 8015bdc:	bf00      	nop
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr
 8015be8:	67452301 	.word	0x67452301
 8015bec:	efcdab89 	.word	0xefcdab89
 8015bf0:	98badcfe 	.word	0x98badcfe
 8015bf4:	10325476 	.word	0x10325476
 8015bf8:	c3d2e1f0 	.word	0xc3d2e1f0

08015bfc <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b086      	sub	sp, #24
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	60f8      	str	r0, [r7, #12]
 8015c04:	60b9      	str	r1, [r7, #8]
 8015c06:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	695b      	ldr	r3, [r3, #20]
 8015c0c:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	695a      	ldr	r2, [r3, #20]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	00db      	lsls	r3, r3, #3
 8015c16:	441a      	add	r2, r3
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	615a      	str	r2, [r3, #20]
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	695b      	ldr	r3, [r3, #20]
 8015c20:	693a      	ldr	r2, [r7, #16]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d904      	bls.n	8015c30 <mg_sha1_update+0x34>
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	699b      	ldr	r3, [r3, #24]
 8015c2a:	1c5a      	adds	r2, r3, #1
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	699a      	ldr	r2, [r3, #24]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	0f5b      	lsrs	r3, r3, #29
 8015c38:	441a      	add	r2, r3
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	08db      	lsrs	r3, r3, #3
 8015c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015c46:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 8015c48:	693a      	ldr	r2, [r7, #16]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8015c50:	d926      	bls.n	8015ca0 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	3318      	adds	r3, #24
 8015c56:	68fa      	ldr	r2, [r7, #12]
 8015c58:	4413      	add	r3, r2
 8015c5a:	1d18      	adds	r0, r3, #4
 8015c5c:	693b      	ldr	r3, [r7, #16]
 8015c5e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8015c62:	617b      	str	r3, [r7, #20]
 8015c64:	697a      	ldr	r2, [r7, #20]
 8015c66:	68b9      	ldr	r1, [r7, #8]
 8015c68:	f013 ffc9 	bl	8029bfe <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8015c6c:	68fa      	ldr	r2, [r7, #12]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	331c      	adds	r3, #28
 8015c72:	4619      	mov	r1, r3
 8015c74:	4610      	mov	r0, r2
 8015c76:	f7fe fd79 	bl	801476c <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8015c7a:	e009      	b.n	8015c90 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8015c7c:	68f8      	ldr	r0, [r7, #12]
 8015c7e:	68ba      	ldr	r2, [r7, #8]
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	4413      	add	r3, r2
 8015c84:	4619      	mov	r1, r3
 8015c86:	f7fe fd71 	bl	801476c <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	3340      	adds	r3, #64	@ 0x40
 8015c8e:	617b      	str	r3, [r7, #20]
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	333f      	adds	r3, #63	@ 0x3f
 8015c94:	687a      	ldr	r2, [r7, #4]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d8f0      	bhi.n	8015c7c <mg_sha1_update+0x80>
    }
    j = 0;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	613b      	str	r3, [r7, #16]
 8015c9e:	e001      	b.n	8015ca4 <mg_sha1_update+0xa8>
  } else
    i = 0;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	3318      	adds	r3, #24
 8015ca8:	68fa      	ldr	r2, [r7, #12]
 8015caa:	4413      	add	r3, r2
 8015cac:	1d18      	adds	r0, r3, #4
 8015cae:	68ba      	ldr	r2, [r7, #8]
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	18d1      	adds	r1, r2, r3
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	1ad3      	subs	r3, r2, r3
 8015cba:	461a      	mov	r2, r3
 8015cbc:	f013 ff9f 	bl	8029bfe <memcpy>
}
 8015cc0:	bf00      	nop
 8015cc2:	3718      	adds	r7, #24
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b086      	sub	sp, #24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	617b      	str	r3, [r7, #20]
 8015cd6:	e01b      	b.n	8015d10 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8015cd8:	697b      	ldr	r3, [r7, #20]
 8015cda:	2b03      	cmp	r3, #3
 8015cdc:	bf94      	ite	ls
 8015cde:	2301      	movls	r3, #1
 8015ce0:	2300      	movhi	r3, #0
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	683a      	ldr	r2, [r7, #0]
 8015ce6:	3304      	adds	r3, #4
 8015ce8:	009b      	lsls	r3, r3, #2
 8015cea:	4413      	add	r3, r2
 8015cec:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	43db      	mvns	r3, r3
 8015cf2:	f003 0303 	and.w	r3, r3, #3
 8015cf6:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8015cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8015cfc:	b2d9      	uxtb	r1, r3
 8015cfe:	f107 020c 	add.w	r2, r7, #12
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	4413      	add	r3, r2
 8015d06:	460a      	mov	r2, r1
 8015d08:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	617b      	str	r3, [r7, #20]
 8015d10:	697b      	ldr	r3, [r7, #20]
 8015d12:	2b07      	cmp	r3, #7
 8015d14:	d9e0      	bls.n	8015cd8 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 8015d16:	2380      	movs	r3, #128	@ 0x80
 8015d18:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 8015d1a:	f107 030b 	add.w	r3, r7, #11
 8015d1e:	2201      	movs	r2, #1
 8015d20:	4619      	mov	r1, r3
 8015d22:	6838      	ldr	r0, [r7, #0]
 8015d24:	f7ff ff6a 	bl	8015bfc <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8015d28:	e008      	b.n	8015d3c <mg_sha1_final+0x74>
    c = 0000;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8015d2e:	f107 030b 	add.w	r3, r7, #11
 8015d32:	2201      	movs	r2, #1
 8015d34:	4619      	mov	r1, r3
 8015d36:	6838      	ldr	r0, [r7, #0]
 8015d38:	f7ff ff60 	bl	8015bfc <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	695b      	ldr	r3, [r3, #20]
 8015d40:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8015d44:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8015d48:	d1ef      	bne.n	8015d2a <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 8015d4a:	f107 030c 	add.w	r3, r7, #12
 8015d4e:	2208      	movs	r2, #8
 8015d50:	4619      	mov	r1, r3
 8015d52:	6838      	ldr	r0, [r7, #0]
 8015d54:	f7ff ff52 	bl	8015bfc <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8015d58:	2300      	movs	r3, #0
 8015d5a:	617b      	str	r3, [r7, #20]
 8015d5c:	e013      	b.n	8015d86 <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	089a      	lsrs	r2, r3, #2
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	43db      	mvns	r3, r3
 8015d6c:	f003 0303 	and.w	r3, r3, #3
 8015d70:	00db      	lsls	r3, r3, #3
 8015d72:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8015d76:	687a      	ldr	r2, [r7, #4]
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8015d7c:	b2ca      	uxtb	r2, r1
    digest[i] =
 8015d7e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	3301      	adds	r3, #1
 8015d84:	617b      	str	r3, [r7, #20]
 8015d86:	697b      	ldr	r3, [r7, #20]
 8015d88:	2b13      	cmp	r3, #19
 8015d8a:	d9e8      	bls.n	8015d5e <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8015d8c:	225c      	movs	r2, #92	@ 0x5c
 8015d8e:	2100      	movs	r1, #0
 8015d90:	6838      	ldr	r0, [r7, #0]
 8015d92:	f012 fd05 	bl	80287a0 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8015d96:	f107 030c 	add.w	r3, r7, #12
 8015d9a:	2208      	movs	r2, #8
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f012 fcfe 	bl	80287a0 <memset>
}
 8015da4:	bf00      	nop
 8015da6:	3718      	adds	r7, #24
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2200      	movs	r2, #0
 8015db8:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 8015dba:	6879      	ldr	r1, [r7, #4]
 8015dbc:	f04f 0200 	mov.w	r2, #0
 8015dc0:	f04f 0300 	mov.w	r3, #0
 8015dc4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	4a0e      	ldr	r2, [pc, #56]	@ (8015e04 <mg_sha256_init+0x58>)
 8015dcc:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8015e08 <mg_sha256_init+0x5c>)
 8015dd2:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8015e0c <mg_sha256_init+0x60>)
 8015dd8:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8015e10 <mg_sha256_init+0x64>)
 8015dde:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	4a0c      	ldr	r2, [pc, #48]	@ (8015e14 <mg_sha256_init+0x68>)
 8015de4:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	4a0b      	ldr	r2, [pc, #44]	@ (8015e18 <mg_sha256_init+0x6c>)
 8015dea:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	4a0b      	ldr	r2, [pc, #44]	@ (8015e1c <mg_sha256_init+0x70>)
 8015df0:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	4a0a      	ldr	r2, [pc, #40]	@ (8015e20 <mg_sha256_init+0x74>)
 8015df6:	61da      	str	r2, [r3, #28]
}
 8015df8:	bf00      	nop
 8015dfa:	370c      	adds	r7, #12
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	6a09e667 	.word	0x6a09e667
 8015e08:	bb67ae85 	.word	0xbb67ae85
 8015e0c:	3c6ef372 	.word	0x3c6ef372
 8015e10:	a54ff53a 	.word	0xa54ff53a
 8015e14:	510e527f 	.word	0x510e527f
 8015e18:	9b05688c 	.word	0x9b05688c
 8015e1c:	1f83d9ab 	.word	0x1f83d9ab
 8015e20:	5be0cd19 	.word	0x5be0cd19

08015e24 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 8015e24:	b480      	push	{r7}
 8015e26:	b0cf      	sub	sp, #316	@ 0x13c
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015e2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015e32:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8015e34:	2300      	movs	r3, #0
 8015e36:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8015e40:	e043      	b.n	8015eca <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8015e42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015e46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015e4a:	681a      	ldr	r2, [r3, #0]
 8015e4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015e50:	4413      	add	r3, r2
 8015e52:	332c      	adds	r3, #44	@ 0x2c
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8015e58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015e62:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8015e66:	6809      	ldr	r1, [r1, #0]
 8015e68:	440b      	add	r3, r1
 8015e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015e6e:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8015e70:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 8015e72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015e76:	3302      	adds	r3, #2
 8015e78:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015e7c:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8015e80:	6809      	ldr	r1, [r1, #0]
 8015e82:	440b      	add	r3, r1
 8015e84:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015e88:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8015e8a:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 8015e8c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015e90:	3203      	adds	r2, #3
 8015e92:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015e96:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8015e9a:	6809      	ldr	r1, [r1, #0]
 8015e9c:	440a      	add	r2, r1
 8015e9e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8015ea2:	ea43 0102 	orr.w	r1, r3, r2
 8015ea6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015eaa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015eae:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8015eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015eba:	3301      	adds	r3, #1
 8015ebc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015ec0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8015eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015ece:	2b0f      	cmp	r3, #15
 8015ed0:	ddb7      	ble.n	8015e42 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 8015ed2:	e069      	b.n	8015fa8 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 8015ed4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015ed8:	1e9a      	subs	r2, r3, #2
 8015eda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015ede:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ee6:	ea4f 4273 	mov.w	r2, r3, ror #17
 8015eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015eee:	1e99      	subs	r1, r3, #2
 8015ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015ef4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015ef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015efc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8015f00:	405a      	eors	r2, r3
 8015f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f06:	1e99      	subs	r1, r3, #2
 8015f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f14:	0a9b      	lsrs	r3, r3, #10
 8015f16:	405a      	eors	r2, r3
 8015f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f1c:	1fd9      	subs	r1, r3, #7
 8015f1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f2a:	441a      	add	r2, r3
 8015f2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f30:	f1a3 010f 	sub.w	r1, r3, #15
 8015f34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f38:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f40:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8015f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f48:	f1a3 000f 	sub.w	r0, r3, #15
 8015f4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f50:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015f58:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8015f5c:	4059      	eors	r1, r3
 8015f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f62:	f1a3 000f 	sub.w	r0, r3, #15
 8015f66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015f72:	08db      	lsrs	r3, r3, #3
 8015f74:	404b      	eors	r3, r1
 8015f76:	441a      	add	r2, r3
 8015f78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015f7c:	f1a3 0110 	sub.w	r1, r3, #16
 8015f80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f84:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f8c:	18d1      	adds	r1, r2, r3
 8015f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015f92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015f96:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 8015f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015fa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015fac:	2b3f      	cmp	r3, #63	@ 0x3f
 8015fae:	dd91      	ble.n	8015ed4 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 8015fb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fb4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 8015fc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fc4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 8015fd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	689b      	ldr	r3, [r3, #8]
 8015fdc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 8015fe0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015fe4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	68db      	ldr	r3, [r3, #12]
 8015fec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 8015ff0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015ff4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	691b      	ldr	r3, [r3, #16]
 8015ffc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8016000:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016004:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	695b      	ldr	r3, [r3, #20]
 801600c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8016010:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016014:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	699b      	ldr	r3, [r3, #24]
 801601c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 8016020:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016024:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	69db      	ldr	r3, [r3, #28]
 801602c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 8016030:	2300      	movs	r3, #0
 8016032:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8016036:	e078      	b.n	801612a <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 8016038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801603c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8016040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016044:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8016048:	405a      	eors	r2, r3
 801604a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801604e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8016052:	405a      	eors	r2, r3
 8016054:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8016058:	441a      	add	r2, r3
 801605a:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801605e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8016062:	4019      	ands	r1, r3
 8016064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016068:	43d8      	mvns	r0, r3
 801606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801606e:	4003      	ands	r3, r0
 8016070:	404b      	eors	r3, r1
 8016072:	441a      	add	r2, r3
 8016074:	496e      	ldr	r1, [pc, #440]	@ (8016230 <mg_sha256_chunk+0x40c>)
 8016076:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801607a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801607e:	441a      	add	r2, r3
 8016080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016084:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016088:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 801608c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016090:	4413      	add	r3, r2
 8016092:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 8016096:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801609a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801609e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80160a2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80160a6:	405a      	eors	r2, r3
 80160a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80160ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80160b0:	405a      	eors	r2, r3
 80160b2:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80160b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80160ba:	4059      	eors	r1, r3
 80160bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80160c0:	4019      	ands	r1, r3
 80160c2:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80160c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80160ca:	4003      	ands	r3, r0
 80160cc:	404b      	eors	r3, r1
 80160ce:	4413      	add	r3, r2
 80160d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 80160d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 80160dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80160e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 80160e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80160e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 80160ec:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80160f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80160f4:	4413      	add	r3, r2
 80160f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 80160fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80160fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 8016102:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016106:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 801610a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801610e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 8016112:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8016116:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801611a:	4413      	add	r3, r2
 801611c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8016120:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016124:	3301      	adds	r3, #1
 8016126:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801612a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801612e:	2b3f      	cmp	r3, #63	@ 0x3f
 8016130:	dd82      	ble.n	8016038 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 8016132:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016136:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	681a      	ldr	r2, [r3, #0]
 801613e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016142:	441a      	add	r2, r3
 8016144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016148:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 8016150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016154:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	685a      	ldr	r2, [r3, #4]
 801615c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016160:	441a      	add	r2, r3
 8016162:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016166:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 801616e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016172:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	689a      	ldr	r2, [r3, #8]
 801617a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801617e:	441a      	add	r2, r3
 8016180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016184:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 801618c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016190:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	68da      	ldr	r2, [r3, #12]
 8016198:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801619c:	441a      	add	r2, r3
 801619e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 80161aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	691a      	ldr	r2, [r3, #16]
 80161b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80161ba:	441a      	add	r2, r3
 80161bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 80161c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	695a      	ldr	r2, [r3, #20]
 80161d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80161d8:	441a      	add	r2, r3
 80161da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 80161e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	699a      	ldr	r2, [r3, #24]
 80161f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161f6:	441a      	add	r2, r3
 80161f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80161fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 8016204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016208:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	69da      	ldr	r2, [r3, #28]
 8016210:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8016214:	441a      	add	r2, r3
 8016216:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801621a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	61da      	str	r2, [r3, #28]
}
 8016222:	bf00      	nop
 8016224:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8016228:	46bd      	mov	sp, r7
 801622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622e:	4770      	bx	lr
 8016230:	08030ca8 	.word	0x08030ca8

08016234 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 8016234:	b5b0      	push	{r4, r5, r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
 801623a:	60f8      	str	r0, [r7, #12]
 801623c:	60b9      	str	r1, [r7, #8]
 801623e:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 8016240:	2300      	movs	r3, #0
 8016242:	617b      	str	r3, [r7, #20]
 8016244:	e026      	b.n	8016294 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 8016246:	68ba      	ldr	r2, [r7, #8]
 8016248:	697b      	ldr	r3, [r7, #20]
 801624a:	441a      	add	r2, r3
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016250:	7811      	ldrb	r1, [r2, #0]
 8016252:	68fa      	ldr	r2, [r7, #12]
 8016254:	4413      	add	r3, r2
 8016256:	460a      	mov	r2, r1
 8016258:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016260:	1c5a      	adds	r2, r3, #1
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	629a      	str	r2, [r3, #40]	@ 0x28
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801626a:	2b40      	cmp	r3, #64	@ 0x40
 801626c:	d10f      	bne.n	801628e <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 801626e:	68f8      	ldr	r0, [r7, #12]
 8016270:	f7ff fdd8 	bl	8015e24 <mg_sha256_chunk>
      ctx->bits += 512;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801627a:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 801627e:	f143 0500 	adc.w	r5, r3, #0
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	2200      	movs	r2, #0
 801628c:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	3301      	adds	r3, #1
 8016292:	617b      	str	r3, [r7, #20]
 8016294:	697a      	ldr	r2, [r7, #20]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	429a      	cmp	r2, r3
 801629a:	d3d4      	bcc.n	8016246 <mg_sha256_update+0x12>
    }
  }
}
 801629c:	bf00      	nop
 801629e:	bf00      	nop
 80162a0:	3718      	adds	r7, #24
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bdb0      	pop	{r4, r5, r7, pc}

080162a6 <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 80162a6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162b6:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	2b37      	cmp	r3, #55	@ 0x37
 80162bc:	d814      	bhi.n	80162e8 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	1c5a      	adds	r2, r3, #1
 80162c2:	60fa      	str	r2, [r7, #12]
 80162c4:	683a      	ldr	r2, [r7, #0]
 80162c6:	4413      	add	r3, r2
 80162c8:	2280      	movs	r2, #128	@ 0x80
 80162ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 80162ce:	e007      	b.n	80162e0 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	1c5a      	adds	r2, r3, #1
 80162d4:	60fa      	str	r2, [r7, #12]
 80162d6:	683a      	ldr	r2, [r7, #0]
 80162d8:	4413      	add	r3, r2
 80162da:	2200      	movs	r2, #0
 80162dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2b37      	cmp	r3, #55	@ 0x37
 80162e4:	d9f4      	bls.n	80162d0 <mg_sha256_final+0x2a>
 80162e6:	e01d      	b.n	8016324 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	1c5a      	adds	r2, r3, #1
 80162ec:	60fa      	str	r2, [r7, #12]
 80162ee:	683a      	ldr	r2, [r7, #0]
 80162f0:	4413      	add	r3, r2
 80162f2:	2280      	movs	r2, #128	@ 0x80
 80162f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 80162f8:	e007      	b.n	801630a <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	1c5a      	adds	r2, r3, #1
 80162fe:	60fa      	str	r2, [r7, #12]
 8016300:	683a      	ldr	r2, [r7, #0]
 8016302:	4413      	add	r3, r2
 8016304:	2200      	movs	r2, #0
 8016306:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2b3f      	cmp	r3, #63	@ 0x3f
 801630e:	d9f4      	bls.n	80162fa <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8016310:	6838      	ldr	r0, [r7, #0]
 8016312:	f7ff fd87 	bl	8015e24 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	332c      	adds	r3, #44	@ 0x2c
 801631a:	2238      	movs	r2, #56	@ 0x38
 801631c:	2100      	movs	r1, #0
 801631e:	4618      	mov	r0, r3
 8016320:	f012 fa3e 	bl	80287a0 <memset>
  }

  ctx->bits += ctx->len * 8;
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801632a:	6839      	ldr	r1, [r7, #0]
 801632c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801632e:	00c9      	lsls	r1, r1, #3
 8016330:	2000      	movs	r0, #0
 8016332:	460c      	mov	r4, r1
 8016334:	4605      	mov	r5, r0
 8016336:	eb12 0804 	adds.w	r8, r2, r4
 801633a:	eb43 0905 	adc.w	r9, r3, r5
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801634a:	b2d2      	uxtb	r2, r2
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 8016352:	683b      	ldr	r3, [r7, #0]
 8016354:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8016358:	f04f 0200 	mov.w	r2, #0
 801635c:	f04f 0300 	mov.w	r3, #0
 8016360:	0a02      	lsrs	r2, r0, #8
 8016362:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016366:	0a0b      	lsrs	r3, r1, #8
 8016368:	b2d2      	uxtb	r2, r2
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8016376:	f04f 0200 	mov.w	r2, #0
 801637a:	f04f 0300 	mov.w	r3, #0
 801637e:	0c02      	lsrs	r2, r0, #16
 8016380:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016384:	0c0b      	lsrs	r3, r1, #16
 8016386:	b2d2      	uxtb	r2, r2
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8016394:	f04f 0200 	mov.w	r2, #0
 8016398:	f04f 0300 	mov.w	r3, #0
 801639c:	0e02      	lsrs	r2, r0, #24
 801639e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80163a2:	0e0b      	lsrs	r3, r1, #24
 80163a4:	b2d2      	uxtb	r2, r2
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80163b2:	f04f 0200 	mov.w	r2, #0
 80163b6:	f04f 0300 	mov.w	r3, #0
 80163ba:	000a      	movs	r2, r1
 80163bc:	2300      	movs	r3, #0
 80163be:	b2d2      	uxtb	r2, r2
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80163cc:	f04f 0200 	mov.w	r2, #0
 80163d0:	f04f 0300 	mov.w	r3, #0
 80163d4:	0a0a      	lsrs	r2, r1, #8
 80163d6:	2300      	movs	r3, #0
 80163d8:	b2d2      	uxtb	r2, r2
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80163e6:	f04f 0200 	mov.w	r2, #0
 80163ea:	f04f 0300 	mov.w	r3, #0
 80163ee:	0c0a      	lsrs	r2, r1, #16
 80163f0:	2300      	movs	r3, #0
 80163f2:	b2d2      	uxtb	r2, r2
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8016400:	f04f 0200 	mov.w	r2, #0
 8016404:	f04f 0300 	mov.w	r3, #0
 8016408:	0e0a      	lsrs	r2, r1, #24
 801640a:	2300      	movs	r3, #0
 801640c:	b2d2      	uxtb	r2, r2
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 8016414:	6838      	ldr	r0, [r7, #0]
 8016416:	f7ff fd05 	bl	8015e24 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 801641a:	2300      	movs	r3, #0
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	e071      	b.n	8016504 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	681a      	ldr	r2, [r3, #0]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	f1c3 0303 	rsb	r3, r3, #3
 801642a:	00db      	lsls	r3, r3, #3
 801642c:	fa22 f103 	lsr.w	r1, r2, r3
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	4413      	add	r3, r2
 8016436:	b2ca      	uxtb	r2, r1
 8016438:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	685a      	ldr	r2, [r3, #4]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	f1c3 0303 	rsb	r3, r3, #3
 8016444:	00db      	lsls	r3, r3, #3
 8016446:	fa22 f103 	lsr.w	r1, r2, r3
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	3304      	adds	r3, #4
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	4413      	add	r3, r2
 8016452:	b2ca      	uxtb	r2, r1
 8016454:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	689a      	ldr	r2, [r3, #8]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	f1c3 0303 	rsb	r3, r3, #3
 8016460:	00db      	lsls	r3, r3, #3
 8016462:	fa22 f103 	lsr.w	r1, r2, r3
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	3308      	adds	r3, #8
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	4413      	add	r3, r2
 801646e:	b2ca      	uxtb	r2, r1
 8016470:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	68da      	ldr	r2, [r3, #12]
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	f1c3 0303 	rsb	r3, r3, #3
 801647c:	00db      	lsls	r3, r3, #3
 801647e:	fa22 f103 	lsr.w	r1, r2, r3
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	330c      	adds	r3, #12
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	4413      	add	r3, r2
 801648a:	b2ca      	uxtb	r2, r1
 801648c:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	691a      	ldr	r2, [r3, #16]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	f1c3 0303 	rsb	r3, r3, #3
 8016498:	00db      	lsls	r3, r3, #3
 801649a:	fa22 f103 	lsr.w	r1, r2, r3
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	3310      	adds	r3, #16
 80164a2:	687a      	ldr	r2, [r7, #4]
 80164a4:	4413      	add	r3, r2
 80164a6:	b2ca      	uxtb	r2, r1
 80164a8:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	695a      	ldr	r2, [r3, #20]
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	f1c3 0303 	rsb	r3, r3, #3
 80164b4:	00db      	lsls	r3, r3, #3
 80164b6:	fa22 f103 	lsr.w	r1, r2, r3
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	3314      	adds	r3, #20
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	4413      	add	r3, r2
 80164c2:	b2ca      	uxtb	r2, r1
 80164c4:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	699a      	ldr	r2, [r3, #24]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	f1c3 0303 	rsb	r3, r3, #3
 80164d0:	00db      	lsls	r3, r3, #3
 80164d2:	fa22 f103 	lsr.w	r1, r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	3318      	adds	r3, #24
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	4413      	add	r3, r2
 80164de:	b2ca      	uxtb	r2, r1
 80164e0:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	69da      	ldr	r2, [r3, #28]
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	f1c3 0303 	rsb	r3, r3, #3
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	fa22 f103 	lsr.w	r1, r2, r3
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	331c      	adds	r3, #28
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	4413      	add	r3, r2
 80164fa:	b2ca      	uxtb	r2, r1
 80164fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	3301      	adds	r3, #1
 8016502:	60fb      	str	r3, [r7, #12]
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	2b03      	cmp	r3, #3
 8016508:	d98a      	bls.n	8016420 <mg_sha256_final+0x17a>
  }
}
 801650a:	bf00      	nop
 801650c:	bf00      	nop
 801650e:	3710      	adds	r7, #16
 8016510:	46bd      	mov	sp, r7
 8016512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08016516 <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 8016516:	b580      	push	{r7, lr}
 8016518:	b0a0      	sub	sp, #128	@ 0x80
 801651a:	af00      	add	r7, sp, #0
 801651c:	60f8      	str	r0, [r7, #12]
 801651e:	60b9      	str	r1, [r7, #8]
 8016520:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 8016522:	f107 0310 	add.w	r3, r7, #16
 8016526:	4618      	mov	r0, r3
 8016528:	f7ff fc40 	bl	8015dac <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 801652c:	f107 0310 	add.w	r3, r7, #16
 8016530:	687a      	ldr	r2, [r7, #4]
 8016532:	68b9      	ldr	r1, [r7, #8]
 8016534:	4618      	mov	r0, r3
 8016536:	f7ff fe7d 	bl	8016234 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 801653a:	f107 0310 	add.w	r3, r7, #16
 801653e:	4619      	mov	r1, r3
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	f7ff feb0 	bl	80162a6 <mg_sha256_final>
}
 8016546:	bf00      	nop
 8016548:	3780      	adds	r7, #128	@ 0x80
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 801654e:	b590      	push	{r4, r7, lr}
 8016550:	b0d3      	sub	sp, #332	@ 0x14c
 8016552:	af00      	add	r7, sp, #0
 8016554:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8016558:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 801655c:	6020      	str	r0, [r4, #0]
 801655e:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8016562:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8016566:	6001      	str	r1, [r0, #0]
 8016568:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 801656c:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8016570:	600a      	str	r2, [r1, #0]
 8016572:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8016576:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 801657a:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 801657c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8016580:	2240      	movs	r2, #64	@ 0x40
 8016582:	2100      	movs	r1, #0
 8016584:	4618      	mov	r0, r3
 8016586:	f012 f90b 	bl	80287a0 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 801658a:	f107 0310 	add.w	r3, r7, #16
 801658e:	2240      	movs	r2, #64	@ 0x40
 8016590:	2136      	movs	r1, #54	@ 0x36
 8016592:	4618      	mov	r0, r3
 8016594:	f012 f904 	bl	80287a0 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 8016598:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801659c:	2240      	movs	r2, #64	@ 0x40
 801659e:	215c      	movs	r1, #92	@ 0x5c
 80165a0:	4618      	mov	r0, r3
 80165a2:	f012 f8fd 	bl	80287a0 <memset>
  if (keysz < 64) {
 80165a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80165aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80165b2:	d815      	bhi.n	80165e0 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 80165b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80165b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d029      	beq.n	8016616 <mg_hmac_sha256+0xc8>
 80165c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80165c6:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80165ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80165ce:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80165d2:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80165d6:	6812      	ldr	r2, [r2, #0]
 80165d8:	6819      	ldr	r1, [r3, #0]
 80165da:	f012 f8c7 	bl	802876c <memmove>
 80165de:	e01a      	b.n	8016616 <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 80165e0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7ff fbe1 	bl	8015dac <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 80165ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80165ee:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 80165f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80165f6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80165fa:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80165fe:	6812      	ldr	r2, [r2, #0]
 8016600:	6819      	ldr	r1, [r3, #0]
 8016602:	f7ff fe17 	bl	8016234 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 8016606:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801660a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801660e:	4611      	mov	r1, r2
 8016610:	4618      	mov	r0, r3
 8016612:	f7ff fe48 	bl	80162a6 <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8016616:	2300      	movs	r3, #0
 8016618:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801661c:	e032      	b.n	8016684 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 801661e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8016622:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8016626:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801662a:	4413      	add	r3, r2
 801662c:	781a      	ldrb	r2, [r3, #0]
 801662e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8016632:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016636:	440b      	add	r3, r1
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	4053      	eors	r3, r2
 801663c:	b2d9      	uxtb	r1, r3
 801663e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8016642:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8016646:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801664a:	4413      	add	r3, r2
 801664c:	460a      	mov	r2, r1
 801664e:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 8016650:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016654:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016658:	4413      	add	r3, r2
 801665a:	781a      	ldrb	r2, [r3, #0]
 801665c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8016660:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016664:	440b      	add	r3, r1
 8016666:	781b      	ldrb	r3, [r3, #0]
 8016668:	4053      	eors	r3, r2
 801666a:	b2d9      	uxtb	r1, r3
 801666c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016670:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016674:	4413      	add	r3, r2
 8016676:	460a      	mov	r2, r1
 8016678:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 801667a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801667e:	3301      	adds	r3, #1
 8016680:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8016684:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8016688:	2b3f      	cmp	r3, #63	@ 0x3f
 801668a:	d9c8      	bls.n	801661e <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 801668c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8016690:	4618      	mov	r0, r3
 8016692:	f7ff fb8b 	bl	8015dac <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 8016696:	f107 0110 	add.w	r1, r7, #16
 801669a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801669e:	2240      	movs	r2, #64	@ 0x40
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7ff fdc7 	bl	8016234 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 80166a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80166aa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80166ae:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80166b2:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80166b6:	6819      	ldr	r1, [r3, #0]
 80166b8:	f7ff fdbc 	bl	8016234 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 80166bc:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80166c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80166c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80166c8:	4611      	mov	r1, r2
 80166ca:	6818      	ldr	r0, [r3, #0]
 80166cc:	f7ff fdeb 	bl	80162a6 <mg_sha256_final>
  mg_sha256_init(&ctx);
 80166d0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7ff fb69 	bl	8015dac <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 80166da:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80166de:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80166e2:	2240      	movs	r2, #64	@ 0x40
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff fda5 	bl	8016234 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 80166ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80166ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80166f2:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80166f6:	2220      	movs	r2, #32
 80166f8:	6819      	ldr	r1, [r3, #0]
 80166fa:	f7ff fd9b 	bl	8016234 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 80166fe:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8016702:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8016706:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801670a:	4611      	mov	r1, r2
 801670c:	6818      	ldr	r0, [r3, #0]
 801670e:	f7ff fdca 	bl	80162a6 <mg_sha256_final>
}
 8016712:	bf00      	nop
 8016714:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8016718:	46bd      	mov	sp, r7
 801671a:	bd90      	pop	{r4, r7, pc}

0801671c <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 801671c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016720:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8016724:	af00      	add	r7, sp, #0
 8016726:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801672a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801672e:	6018      	str	r0, [r3, #0]
 8016730:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016734:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016738:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 801673a:	2300      	movs	r3, #0
 801673c:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8016740:	2300      	movs	r3, #0
 8016742:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8016746:	e113      	b.n	8016970 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8016748:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 801674c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016750:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	4413      	add	r3, r2
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	b2db      	uxtb	r3, r3
 801675c:	2200      	movs	r2, #0
 801675e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8016762:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8016766:	f04f 0000 	mov.w	r0, #0
 801676a:	f04f 0100 	mov.w	r1, #0
 801676e:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8016772:	0619      	lsls	r1, r3, #24
 8016774:	2000      	movs	r0, #0
 8016776:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 801677a:	1c5a      	adds	r2, r3, #1
 801677c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016780:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4413      	add	r3, r2
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2200      	movs	r2, #0
 801678e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8016792:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8016796:	f04f 0200 	mov.w	r2, #0
 801679a:	f04f 0300 	mov.w	r3, #0
 801679e:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 80167a2:	0433      	lsls	r3, r6, #16
 80167a4:	2200      	movs	r2, #0
 80167a6:	ea40 0602 	orr.w	r6, r0, r2
 80167aa:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 80167ae:	430b      	orrs	r3, r1
 80167b0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 80167b4:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80167b8:	1c9a      	adds	r2, r3, #2
 80167ba:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80167be:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4413      	add	r3, r2
 80167c6:	781b      	ldrb	r3, [r3, #0]
 80167c8:	b2db      	uxtb	r3, r3
 80167ca:	2200      	movs	r2, #0
 80167cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80167d0:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 80167d4:	f04f 0200 	mov.w	r2, #0
 80167d8:	f04f 0300 	mov.w	r3, #0
 80167dc:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 80167e0:	020b      	lsls	r3, r1, #8
 80167e2:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 80167e4:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 80167e8:	4311      	orrs	r1, r2
 80167ea:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 80167ee:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 80167f2:	430b      	orrs	r3, r1
 80167f4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 80167f8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80167fc:	1cda      	adds	r2, r3, #3
 80167fe:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016802:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4413      	add	r3, r2
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	b2db      	uxtb	r3, r3
 801680e:	2200      	movs	r2, #0
 8016810:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8016814:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8016818:	f04f 0200 	mov.w	r2, #0
 801681c:	f04f 0300 	mov.w	r3, #0
 8016820:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8016824:	000b      	movs	r3, r1
 8016826:	2200      	movs	r2, #0
 8016828:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 801682c:	4311      	orrs	r1, r2
 801682e:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8016832:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8016836:	430b      	orrs	r3, r1
 8016838:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 801683c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8016840:	1d1a      	adds	r2, r3, #4
 8016842:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016846:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	4413      	add	r3, r2
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	b2db      	uxtb	r3, r3
 8016852:	2200      	movs	r2, #0
 8016854:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8016858:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 801685c:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 8016860:	460b      	mov	r3, r1
 8016862:	0a1b      	lsrs	r3, r3, #8
 8016864:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8016868:	460b      	mov	r3, r1
 801686a:	061b      	lsls	r3, r3, #24
 801686c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8016870:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8016874:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8016878:	4602      	mov	r2, r0
 801687a:	ea43 0a02 	orr.w	sl, r3, r2
 801687e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8016882:	460a      	mov	r2, r1
 8016884:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8016888:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 801688c:	1d5a      	adds	r2, r3, #5
 801688e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016892:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	4413      	add	r3, r2
 801689a:	781b      	ldrb	r3, [r3, #0]
 801689c:	b2db      	uxtb	r3, r3
 801689e:	2200      	movs	r2, #0
 80168a0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80168a4:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80168a8:	f04f 0200 	mov.w	r2, #0
 80168ac:	f04f 0300 	mov.w	r3, #0
 80168b0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 80168b4:	040b      	lsls	r3, r1, #16
 80168b6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 80168ba:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80168be:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 80168c2:	040a      	lsls	r2, r1, #16
 80168c4:	ea4a 0802 	orr.w	r8, sl, r2
 80168c8:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 80168cc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80168d0:	1d9a      	adds	r2, r3, #6
 80168d2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80168d6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	4413      	add	r3, r2
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	b2db      	uxtb	r3, r3
 80168e2:	2200      	movs	r2, #0
 80168e4:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80168e8:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80168ec:	f04f 0200 	mov.w	r2, #0
 80168f0:	f04f 0300 	mov.w	r3, #0
 80168f4:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 80168f8:	020b      	lsls	r3, r1, #8
 80168fa:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 80168fe:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8016902:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8016906:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8016908:	ea48 0402 	orr.w	r4, r8, r2
 801690c:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8016910:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8016914:	1dda      	adds	r2, r3, #7
 8016916:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801691a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4413      	add	r3, r2
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	b2db      	uxtb	r3, r3
 8016926:	2200      	movs	r2, #0
 8016928:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801692c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8016930:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8016934:	460b      	mov	r3, r1
 8016936:	4323      	orrs	r3, r4
 8016938:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 801693c:	4613      	mov	r3, r2
 801693e:	432b      	orrs	r3, r5
 8016940:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8016944:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016948:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801694c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	4413      	add	r3, r2
 8016954:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8016958:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 801695c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016960:	3301      	adds	r3, #1
 8016962:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8016966:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 801696a:	3308      	adds	r3, #8
 801696c:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8016970:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016974:	2b0f      	cmp	r3, #15
 8016976:	f77f aee7 	ble.w	8016748 <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 801697a:	e0f8      	b.n	8016b6e <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 801697c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016980:	1e99      	subs	r1, r3, #2
 8016982:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016986:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801698a:	00cb      	lsls	r3, r1, #3
 801698c:	4413      	add	r3, r2
 801698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016992:	0358      	lsls	r0, r3, #13
 8016994:	0cd1      	lsrs	r1, r2, #19
 8016996:	4301      	orrs	r1, r0
 8016998:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 801699c:	0351      	lsls	r1, r2, #13
 801699e:	0cdb      	lsrs	r3, r3, #19
 80169a0:	430b      	orrs	r3, r1
 80169a2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80169a6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80169aa:	1e99      	subs	r1, r3, #2
 80169ac:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80169b0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80169b4:	00cb      	lsls	r3, r1, #3
 80169b6:	4413      	add	r3, r2
 80169b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169bc:	0f50      	lsrs	r0, r2, #29
 80169be:	00d9      	lsls	r1, r3, #3
 80169c0:	4301      	orrs	r1, r0
 80169c2:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 80169c6:	0f59      	lsrs	r1, r3, #29
 80169c8:	00d3      	lsls	r3, r2, #3
 80169ca:	430b      	orrs	r3, r1
 80169cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80169d0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80169d4:	4623      	mov	r3, r4
 80169d6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 80169da:	4602      	mov	r2, r0
 80169dc:	4053      	eors	r3, r2
 80169de:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80169e2:	462b      	mov	r3, r5
 80169e4:	460a      	mov	r2, r1
 80169e6:	4053      	eors	r3, r2
 80169e8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80169ec:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80169f0:	1e99      	subs	r1, r3, #2
 80169f2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80169f6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80169fa:	00cb      	lsls	r3, r1, #3
 80169fc:	4413      	add	r3, r2
 80169fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a02:	f04f 0000 	mov.w	r0, #0
 8016a06:	f04f 0100 	mov.w	r1, #0
 8016a0a:	0990      	lsrs	r0, r2, #6
 8016a0c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8016a10:	0999      	lsrs	r1, r3, #6
 8016a12:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8016a16:	4623      	mov	r3, r4
 8016a18:	4043      	eors	r3, r0
 8016a1a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8016a1e:	462b      	mov	r3, r5
 8016a20:	404b      	eors	r3, r1
 8016a22:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8016a26:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016a2a:	1fd9      	subs	r1, r3, #7
 8016a2c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016a30:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016a34:	00cb      	lsls	r3, r1, #3
 8016a36:	4413      	add	r3, r2
 8016a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8016a40:	4621      	mov	r1, r4
 8016a42:	1889      	adds	r1, r1, r2
 8016a44:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 8016a48:	4629      	mov	r1, r5
 8016a4a:	eb41 0303 	adc.w	r3, r1, r3
 8016a4e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8016a52:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016a56:	f1a3 010f 	sub.w	r1, r3, #15
 8016a5a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016a5e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016a62:	00cb      	lsls	r3, r1, #3
 8016a64:	4413      	add	r3, r2
 8016a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6a:	07d8      	lsls	r0, r3, #31
 8016a6c:	0851      	lsrs	r1, r2, #1
 8016a6e:	4301      	orrs	r1, r0
 8016a70:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8016a74:	07d1      	lsls	r1, r2, #31
 8016a76:	085b      	lsrs	r3, r3, #1
 8016a78:	430b      	orrs	r3, r1
 8016a7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8016a7e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016a82:	f1a3 010f 	sub.w	r1, r3, #15
 8016a86:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016a8a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016a8e:	00cb      	lsls	r3, r1, #3
 8016a90:	4413      	add	r3, r2
 8016a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a96:	0618      	lsls	r0, r3, #24
 8016a98:	0a11      	lsrs	r1, r2, #8
 8016a9a:	4301      	orrs	r1, r0
 8016a9c:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8016aa0:	0611      	lsls	r1, r2, #24
 8016aa2:	0a1b      	lsrs	r3, r3, #8
 8016aa4:	430b      	orrs	r3, r1
 8016aa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8016aaa:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8016aae:	4623      	mov	r3, r4
 8016ab0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	4053      	eors	r3, r2
 8016ab8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8016abc:	462b      	mov	r3, r5
 8016abe:	460a      	mov	r2, r1
 8016ac0:	4053      	eors	r3, r2
 8016ac2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8016ac6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016aca:	f1a3 010f 	sub.w	r1, r3, #15
 8016ace:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016ad2:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016ad6:	00cb      	lsls	r3, r1, #3
 8016ad8:	4413      	add	r3, r2
 8016ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ade:	f04f 0000 	mov.w	r0, #0
 8016ae2:	f04f 0100 	mov.w	r1, #0
 8016ae6:	09d0      	lsrs	r0, r2, #7
 8016ae8:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8016aec:	09d9      	lsrs	r1, r3, #7
 8016aee:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8016af2:	4623      	mov	r3, r4
 8016af4:	4043      	eors	r3, r0
 8016af6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8016afa:	462b      	mov	r3, r5
 8016afc:	404b      	eors	r3, r1
 8016afe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8016b02:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8016b06:	4623      	mov	r3, r4
 8016b08:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	189b      	adds	r3, r3, r2
 8016b10:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8016b14:	462b      	mov	r3, r5
 8016b16:	460a      	mov	r2, r1
 8016b18:	4153      	adcs	r3, r2
 8016b1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8016b1e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016b22:	f1a3 0110 	sub.w	r1, r3, #16
 8016b26:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016b2a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016b2e:	00cb      	lsls	r3, r1, #3
 8016b30:	4413      	add	r3, r2
 8016b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b36:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8016b3a:	4621      	mov	r1, r4
 8016b3c:	1889      	adds	r1, r1, r2
 8016b3e:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8016b42:	4629      	mov	r1, r5
 8016b44:	eb41 0303 	adc.w	r3, r1, r3
 8016b48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8016b4c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016b50:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016b54:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016b58:	00db      	lsls	r3, r3, #3
 8016b5a:	4413      	add	r3, r2
 8016b5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8016b60:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 8016b64:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016b68:	3301      	adds	r3, #1
 8016b6a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8016b6e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016b72:	2b4f      	cmp	r3, #79	@ 0x4f
 8016b74:	f77f af02 	ble.w	801697c <mg_sha384_transform+0x260>

  a = ctx->state[0];
 8016b78:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016b7c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b86:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 8016b8a:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 8016b8e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016b92:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016b9c:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8016ba0:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 8016ba4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016ba8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016bb2:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8016bb6:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 8016bba:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016bbe:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016bc8:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8016bcc:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 8016bd0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016bd4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016bde:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8016be2:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 8016be6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016bea:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8016bf4:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8016bf8:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8016bfc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016c00:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8016c0a:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8016c0e:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 8016c12:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016c16:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8016c20:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8016c24:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 8016c28:	2300      	movs	r3, #0
 8016c2a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8016c2e:	e1c3      	b.n	8016fb8 <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 8016c30:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8016c34:	049a      	lsls	r2, r3, #18
 8016c36:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8016c3a:	0b9b      	lsrs	r3, r3, #14
 8016c3c:	4313      	orrs	r3, r2
 8016c3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8016c42:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8016c46:	049a      	lsls	r2, r3, #18
 8016c48:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8016c4c:	0b9b      	lsrs	r3, r3, #14
 8016c4e:	4313      	orrs	r3, r2
 8016c50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8016c54:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8016c58:	039a      	lsls	r2, r3, #14
 8016c5a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8016c5e:	0c9b      	lsrs	r3, r3, #18
 8016c60:	4313      	orrs	r3, r2
 8016c62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8016c66:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8016c6a:	039a      	lsls	r2, r3, #14
 8016c6c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8016c70:	0c9b      	lsrs	r3, r3, #18
 8016c72:	4313      	orrs	r3, r2
 8016c74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8016c78:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8016c7c:	4623      	mov	r3, r4
 8016c7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8016c82:	4602      	mov	r2, r0
 8016c84:	4053      	eors	r3, r2
 8016c86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8016c8a:	462b      	mov	r3, r5
 8016c8c:	460a      	mov	r2, r1
 8016c8e:	4053      	eors	r3, r2
 8016c90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8016c94:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8016c98:	0a5a      	lsrs	r2, r3, #9
 8016c9a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8016c9e:	05db      	lsls	r3, r3, #23
 8016ca0:	4313      	orrs	r3, r2
 8016ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8016ca6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8016caa:	0a5a      	lsrs	r2, r3, #9
 8016cac:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8016cb0:	05db      	lsls	r3, r3, #23
 8016cb2:	4313      	orrs	r3, r2
 8016cb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8016cb8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8016cbc:	4623      	mov	r3, r4
 8016cbe:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8016cc2:	4602      	mov	r2, r0
 8016cc4:	4053      	eors	r3, r2
 8016cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8016cca:	462b      	mov	r3, r5
 8016ccc:	460a      	mov	r2, r1
 8016cce:	4053      	eors	r3, r2
 8016cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8016cd4:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8016cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cdc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8016ce0:	4621      	mov	r1, r4
 8016ce2:	1889      	adds	r1, r1, r2
 8016ce4:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8016ce8:	4629      	mov	r1, r5
 8016cea:	eb41 0303 	adc.w	r3, r1, r3
 8016cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8016cf2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8016cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016cfa:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8016cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d02:	ea00 0402 	and.w	r4, r0, r2
 8016d06:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8016d0a:	400b      	ands	r3, r1
 8016d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8016d10:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8016d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d18:	43d1      	mvns	r1, r2
 8016d1a:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8016d1e:	43db      	mvns	r3, r3
 8016d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8016d24:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8016d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d2c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8016d30:	4621      	mov	r1, r4
 8016d32:	4011      	ands	r1, r2
 8016d34:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8016d38:	4629      	mov	r1, r5
 8016d3a:	400b      	ands	r3, r1
 8016d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8016d40:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8016d44:	4623      	mov	r3, r4
 8016d46:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	4053      	eors	r3, r2
 8016d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016d52:	462b      	mov	r3, r5
 8016d54:	460a      	mov	r2, r1
 8016d56:	4053      	eors	r3, r2
 8016d58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8016d5c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8016d60:	4623      	mov	r3, r4
 8016d62:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8016d66:	4602      	mov	r2, r0
 8016d68:	189b      	adds	r3, r3, r2
 8016d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8016d6e:	462b      	mov	r3, r5
 8016d70:	460a      	mov	r2, r1
 8016d72:	4153      	adcs	r3, r2
 8016d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8016d78:	4a8e      	ldr	r2, [pc, #568]	@ (8016fb4 <mg_sha384_transform+0x898>)
 8016d7a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016d7e:	00db      	lsls	r3, r3, #3
 8016d80:	4413      	add	r3, r2
 8016d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d86:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8016d8a:	4621      	mov	r1, r4
 8016d8c:	1889      	adds	r1, r1, r2
 8016d8e:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8016d92:	4629      	mov	r1, r5
 8016d94:	eb41 0303 	adc.w	r3, r1, r3
 8016d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016d9c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016da0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8016da4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016da8:	00db      	lsls	r3, r3, #3
 8016daa:	4413      	add	r3, r2
 8016dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8016db4:	4621      	mov	r1, r4
 8016db6:	1889      	adds	r1, r1, r2
 8016db8:	61b9      	str	r1, [r7, #24]
 8016dba:	4629      	mov	r1, r5
 8016dbc:	eb41 0303 	adc.w	r3, r1, r3
 8016dc0:	61fb      	str	r3, [r7, #28]
 8016dc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8016dc6:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8016dca:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 8016dce:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016dd2:	011a      	lsls	r2, r3, #4
 8016dd4:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016dd8:	0f1b      	lsrs	r3, r3, #28
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016de0:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016de4:	011a      	lsls	r2, r3, #4
 8016de6:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016dea:	0f1b      	lsrs	r3, r3, #28
 8016dec:	4313      	orrs	r3, r2
 8016dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016df2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016df6:	089a      	lsrs	r2, r3, #2
 8016df8:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016dfc:	079b      	lsls	r3, r3, #30
 8016dfe:	4313      	orrs	r3, r2
 8016e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8016e04:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016e08:	089a      	lsrs	r2, r3, #2
 8016e0a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016e0e:	079b      	lsls	r3, r3, #30
 8016e10:	4313      	orrs	r3, r2
 8016e12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8016e16:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8016e1a:	4623      	mov	r3, r4
 8016e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8016e20:	4602      	mov	r2, r0
 8016e22:	4053      	eors	r3, r2
 8016e24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8016e28:	462b      	mov	r3, r5
 8016e2a:	460a      	mov	r2, r1
 8016e2c:	4053      	eors	r3, r2
 8016e2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8016e32:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016e36:	09da      	lsrs	r2, r3, #7
 8016e38:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016e3c:	065b      	lsls	r3, r3, #25
 8016e3e:	4313      	orrs	r3, r2
 8016e40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016e44:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8016e48:	09da      	lsrs	r2, r3, #7
 8016e4a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8016e4e:	065b      	lsls	r3, r3, #25
 8016e50:	4313      	orrs	r3, r2
 8016e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8016e5a:	4623      	mov	r3, r4
 8016e5c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8016e60:	4602      	mov	r2, r0
 8016e62:	4053      	eors	r3, r2
 8016e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016e68:	462b      	mov	r3, r5
 8016e6a:	460a      	mov	r2, r1
 8016e6c:	4053      	eors	r3, r2
 8016e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016e72:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8016e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e7a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8016e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e82:	ea80 0402 	eor.w	r4, r0, r2
 8016e86:	67bc      	str	r4, [r7, #120]	@ 0x78
 8016e88:	404b      	eors	r3, r1
 8016e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016e8c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8016e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e94:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8016e98:	4621      	mov	r1, r4
 8016e9a:	4011      	ands	r1, r2
 8016e9c:	6739      	str	r1, [r7, #112]	@ 0x70
 8016e9e:	4629      	mov	r1, r5
 8016ea0:	400b      	ands	r3, r1
 8016ea2:	677b      	str	r3, [r7, #116]	@ 0x74
 8016ea4:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8016ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016eac:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8016eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb4:	ea00 0402 	and.w	r4, r0, r2
 8016eb8:	66bc      	str	r4, [r7, #104]	@ 0x68
 8016eba:	400b      	ands	r3, r1
 8016ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016ebe:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8016ec2:	4623      	mov	r3, r4
 8016ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8016ec8:	4602      	mov	r2, r0
 8016eca:	4053      	eors	r3, r2
 8016ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8016ece:	462b      	mov	r3, r5
 8016ed0:	460a      	mov	r2, r1
 8016ed2:	4053      	eors	r3, r2
 8016ed4:	667b      	str	r3, [r7, #100]	@ 0x64
 8016ed6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8016eda:	4623      	mov	r3, r4
 8016edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8016ee0:	4602      	mov	r2, r0
 8016ee2:	189b      	adds	r3, r3, r2
 8016ee4:	613b      	str	r3, [r7, #16]
 8016ee6:	462b      	mov	r3, r5
 8016ee8:	460a      	mov	r2, r1
 8016eea:	4153      	adcs	r3, r2
 8016eec:	617b      	str	r3, [r7, #20]
 8016eee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016ef2:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8016ef6:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 8016efa:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8016efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f02:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8016f06:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 8016f0a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8016f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f12:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8016f16:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 8016f1a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8016f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f22:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8016f26:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 8016f2a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8016f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016f32:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8016f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f3a:	1884      	adds	r4, r0, r2
 8016f3c:	60bc      	str	r4, [r7, #8]
 8016f3e:	eb41 0303 	adc.w	r3, r1, r3
 8016f42:	60fb      	str	r3, [r7, #12]
 8016f44:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016f48:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 8016f4c:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 8016f50:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8016f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f58:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8016f5c:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 8016f60:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8016f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f68:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8016f6c:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 8016f70:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8016f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f78:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8016f7c:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 8016f80:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8016f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016f88:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8016f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f90:	1884      	adds	r4, r0, r2
 8016f92:	603c      	str	r4, [r7, #0]
 8016f94:	eb41 0303 	adc.w	r3, r1, r3
 8016f98:	607b      	str	r3, [r7, #4]
 8016f9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016f9e:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8016fa2:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 8016fa6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016faa:	3301      	adds	r3, #1
 8016fac:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8016fb0:	e002      	b.n	8016fb8 <mg_sha384_transform+0x89c>
 8016fb2:	bf00      	nop
 8016fb4:	08030da8 	.word	0x08030da8
 8016fb8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8016fbc:	2b4f      	cmp	r3, #79	@ 0x4f
 8016fbe:	f77f ae37 	ble.w	8016c30 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 8016fc2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016fc6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016fd0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8016fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd8:	1884      	adds	r4, r0, r2
 8016fda:	65bc      	str	r4, [r7, #88]	@ 0x58
 8016fdc:	eb41 0303 	adc.w	r3, r1, r3
 8016fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016fe2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016fe6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8016ff0:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 8016ff4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8016ff8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8017002:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8017006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700a:	1884      	adds	r4, r0, r2
 801700c:	653c      	str	r4, [r7, #80]	@ 0x50
 801700e:	eb41 0303 	adc.w	r3, r1, r3
 8017012:	657b      	str	r3, [r7, #84]	@ 0x54
 8017014:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8017018:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8017022:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 8017026:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801702a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8017034:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8017038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703c:	1884      	adds	r4, r0, r2
 801703e:	64bc      	str	r4, [r7, #72]	@ 0x48
 8017040:	eb41 0303 	adc.w	r3, r1, r3
 8017044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017046:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801704a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8017054:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 8017058:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801705c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8017066:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801706e:	1884      	adds	r4, r0, r2
 8017070:	643c      	str	r4, [r7, #64]	@ 0x40
 8017072:	eb41 0303 	adc.w	r3, r1, r3
 8017076:	647b      	str	r3, [r7, #68]	@ 0x44
 8017078:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801707c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8017086:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 801708a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801708e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8017098:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 801709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a0:	1884      	adds	r4, r0, r2
 80170a2:	63bc      	str	r4, [r7, #56]	@ 0x38
 80170a4:	eb41 0303 	adc.w	r3, r1, r3
 80170a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80170aa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80170ae:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80170b8:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 80170bc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80170c0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80170ca:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80170ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d2:	1884      	adds	r4, r0, r2
 80170d4:	633c      	str	r4, [r7, #48]	@ 0x30
 80170d6:	eb41 0303 	adc.w	r3, r1, r3
 80170da:	637b      	str	r3, [r7, #52]	@ 0x34
 80170dc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80170e0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80170ea:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 80170ee:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80170f2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80170fc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8017100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017104:	1884      	adds	r4, r0, r2
 8017106:	62bc      	str	r4, [r7, #40]	@ 0x28
 8017108:	eb41 0303 	adc.w	r3, r1, r3
 801710c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801710e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8017112:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801711c:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 8017120:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8017124:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 801712e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8017132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017136:	1884      	adds	r4, r0, r2
 8017138:	623c      	str	r4, [r7, #32]
 801713a:	eb41 0303 	adc.w	r3, r1, r3
 801713e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017140:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8017144:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801714e:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 8017152:	bf00      	nop
 8017154:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8017158:	46bd      	mov	sp, r7
 801715a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801715e:	4770      	bx	lr

08017160 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 8017160:	b480      	push	{r7}
 8017162:	b083      	sub	sp, #12
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2200      	movs	r2, #0
 801716c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 8017170:	6879      	ldr	r1, [r7, #4]
 8017172:	f04f 0200 	mov.w	r2, #0
 8017176:	f04f 0300 	mov.w	r3, #0
 801717a:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 801717e:	6879      	ldr	r1, [r7, #4]
 8017180:	f04f 0200 	mov.w	r2, #0
 8017184:	f04f 0300 	mov.w	r3, #0
 8017188:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 801718c:	6879      	ldr	r1, [r7, #4]
 801718e:	a31a      	add	r3, pc, #104	@ (adr r3, 80171f8 <mg_sha384_init+0x98>)
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 8017198:	6879      	ldr	r1, [r7, #4]
 801719a:	a319      	add	r3, pc, #100	@ (adr r3, 8017200 <mg_sha384_init+0xa0>)
 801719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 80171a4:	6879      	ldr	r1, [r7, #4]
 80171a6:	a318      	add	r3, pc, #96	@ (adr r3, 8017208 <mg_sha384_init+0xa8>)
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 80171b0:	6879      	ldr	r1, [r7, #4]
 80171b2:	a317      	add	r3, pc, #92	@ (adr r3, 8017210 <mg_sha384_init+0xb0>)
 80171b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 80171bc:	6879      	ldr	r1, [r7, #4]
 80171be:	a316      	add	r3, pc, #88	@ (adr r3, 8017218 <mg_sha384_init+0xb8>)
 80171c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 80171c8:	6879      	ldr	r1, [r7, #4]
 80171ca:	a315      	add	r3, pc, #84	@ (adr r3, 8017220 <mg_sha384_init+0xc0>)
 80171cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 80171d4:	6879      	ldr	r1, [r7, #4]
 80171d6:	a314      	add	r3, pc, #80	@ (adr r3, 8017228 <mg_sha384_init+0xc8>)
 80171d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 80171e0:	6879      	ldr	r1, [r7, #4]
 80171e2:	a313      	add	r3, pc, #76	@ (adr r3, 8017230 <mg_sha384_init+0xd0>)
 80171e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 80171ec:	bf00      	nop
 80171ee:	370c      	adds	r7, #12
 80171f0:	46bd      	mov	sp, r7
 80171f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f6:	4770      	bx	lr
 80171f8:	c1059ed8 	.word	0xc1059ed8
 80171fc:	cbbb9d5d 	.word	0xcbbb9d5d
 8017200:	367cd507 	.word	0x367cd507
 8017204:	629a292a 	.word	0x629a292a
 8017208:	3070dd17 	.word	0x3070dd17
 801720c:	9159015a 	.word	0x9159015a
 8017210:	f70e5939 	.word	0xf70e5939
 8017214:	152fecd8 	.word	0x152fecd8
 8017218:	ffc00b31 	.word	0xffc00b31
 801721c:	67332667 	.word	0x67332667
 8017220:	68581511 	.word	0x68581511
 8017224:	8eb44a87 	.word	0x8eb44a87
 8017228:	64f98fa7 	.word	0x64f98fa7
 801722c:	db0c2e0d 	.word	0xdb0c2e0d
 8017230:	befa4fa4 	.word	0xbefa4fa4
 8017234:	47b5481d 	.word	0x47b5481d

08017238 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8017238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801723c:	b086      	sub	sp, #24
 801723e:	af00      	add	r7, sp, #0
 8017240:	60f8      	str	r0, [r7, #12]
 8017242:	60b9      	str	r1, [r7, #8]
 8017244:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 8017246:	2300      	movs	r3, #0
 8017248:	617b      	str	r3, [r7, #20]
 801724a:	e040      	b.n	80172ce <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 801724c:	68ba      	ldr	r2, [r7, #8]
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	441a      	add	r2, r3
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8017258:	7811      	ldrb	r1, [r2, #0]
 801725a:	68fa      	ldr	r2, [r7, #12]
 801725c:	4413      	add	r3, r2
 801725e:	460a      	mov	r2, r1
 8017260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801726a:	1c5a      	adds	r2, r3, #1
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8017278:	2b80      	cmp	r3, #128	@ 0x80
 801727a:	d125      	bne.n	80172c8 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	3340      	adds	r3, #64	@ 0x40
 8017280:	4619      	mov	r1, r3
 8017282:	68f8      	ldr	r0, [r7, #12]
 8017284:	f7ff fa4a 	bl	801671c <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801728e:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 8017292:	f143 0500 	adc.w	r5, r3, #0
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80172a2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80172a6:	f173 0300 	sbcs.w	r3, r3, #0
 80172aa:	d209      	bcs.n	80172c0 <mg_sha384_update+0x88>
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80172b2:	f112 0801 	adds.w	r8, r2, #1
 80172b6:	f143 0900 	adc.w	r9, r3, #0
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	2200      	movs	r2, #0
 80172c4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	3301      	adds	r3, #1
 80172cc:	617b      	str	r3, [r7, #20]
 80172ce:	697a      	ldr	r2, [r7, #20]
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	429a      	cmp	r2, r3
 80172d4:	d3ba      	bcc.n	801724c <mg_sha384_update+0x14>
    }
  }
}
 80172d6:	bf00      	nop
 80172d8:	bf00      	nop
 80172da:	3718      	adds	r7, #24
 80172dc:	46bd      	mov	sp, r7
 80172de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080172e2 <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 80172e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80172e6:	b086      	sub	sp, #24
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80172f4:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80172fc:	2b6f      	cmp	r3, #111	@ 0x6f
 80172fe:	d814      	bhi.n	801732a <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	1c5a      	adds	r2, r3, #1
 8017304:	617a      	str	r2, [r7, #20]
 8017306:	68ba      	ldr	r2, [r7, #8]
 8017308:	4413      	add	r3, r2
 801730a:	2280      	movs	r2, #128	@ 0x80
 801730c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8017310:	e007      	b.n	8017322 <mg_sha384_final+0x40>
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	1c5a      	adds	r2, r3, #1
 8017316:	617a      	str	r2, [r7, #20]
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	4413      	add	r3, r2
 801731c:	2200      	movs	r2, #0
 801731e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	2b6f      	cmp	r3, #111	@ 0x6f
 8017326:	d9f4      	bls.n	8017312 <mg_sha384_final+0x30>
 8017328:	e020      	b.n	801736c <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	1c5a      	adds	r2, r3, #1
 801732e:	617a      	str	r2, [r7, #20]
 8017330:	68ba      	ldr	r2, [r7, #8]
 8017332:	4413      	add	r3, r2
 8017334:	2280      	movs	r2, #128	@ 0x80
 8017336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 801733a:	e007      	b.n	801734c <mg_sha384_final+0x6a>
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	1c5a      	adds	r2, r3, #1
 8017340:	617a      	str	r2, [r7, #20]
 8017342:	68ba      	ldr	r2, [r7, #8]
 8017344:	4413      	add	r3, r2
 8017346:	2200      	movs	r2, #0
 8017348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017350:	d9f4      	bls.n	801733c <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	3340      	adds	r3, #64	@ 0x40
 8017356:	4619      	mov	r1, r3
 8017358:	68b8      	ldr	r0, [r7, #8]
 801735a:	f7ff f9df 	bl	801671c <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 801735e:	68bb      	ldr	r3, [r7, #8]
 8017360:	3340      	adds	r3, #64	@ 0x40
 8017362:	2270      	movs	r2, #112	@ 0x70
 8017364:	2100      	movs	r1, #0
 8017366:	4618      	mov	r0, r3
 8017368:	f011 fa1a 	bl	80287a0 <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 801736c:	68bb      	ldr	r3, [r7, #8]
 801736e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8017372:	68b9      	ldr	r1, [r7, #8]
 8017374:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8017378:	00c9      	lsls	r1, r1, #3
 801737a:	2000      	movs	r0, #0
 801737c:	4688      	mov	r8, r1
 801737e:	4681      	mov	r9, r0
 8017380:	eb12 0108 	adds.w	r1, r2, r8
 8017384:	6039      	str	r1, [r7, #0]
 8017386:	eb43 0309 	adc.w	r3, r3, r9
 801738a:	607b      	str	r3, [r7, #4]
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017392:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801739c:	68b9      	ldr	r1, [r7, #8]
 801739e:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80173a2:	00c9      	lsls	r1, r1, #3
 80173a4:	2000      	movs	r0, #0
 80173a6:	460c      	mov	r4, r1
 80173a8:	4605      	mov	r5, r0
 80173aa:	42a2      	cmp	r2, r4
 80173ac:	41ab      	sbcs	r3, r5
 80173ae:	d209      	bcs.n	80173c4 <mg_sha384_final+0xe2>
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80173b6:	f112 0a01 	adds.w	sl, r2, #1
 80173ba:	f143 0b00 	adc.w	fp, r3, #0
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80173ca:	b2d2      	uxtb	r2, r2
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80173d8:	f04f 0200 	mov.w	r2, #0
 80173dc:	f04f 0300 	mov.w	r3, #0
 80173e0:	0a02      	lsrs	r2, r0, #8
 80173e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80173e6:	0a0b      	lsrs	r3, r1, #8
 80173e8:	b2d2      	uxtb	r2, r2
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80173f6:	f04f 0200 	mov.w	r2, #0
 80173fa:	f04f 0300 	mov.w	r3, #0
 80173fe:	0c02      	lsrs	r2, r0, #16
 8017400:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8017404:	0c0b      	lsrs	r3, r1, #16
 8017406:	b2d2      	uxtb	r2, r2
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8017414:	f04f 0200 	mov.w	r2, #0
 8017418:	f04f 0300 	mov.w	r3, #0
 801741c:	0e02      	lsrs	r2, r0, #24
 801741e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8017422:	0e0b      	lsrs	r3, r1, #24
 8017424:	b2d2      	uxtb	r2, r2
 8017426:	68bb      	ldr	r3, [r7, #8]
 8017428:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8017432:	f04f 0200 	mov.w	r2, #0
 8017436:	f04f 0300 	mov.w	r3, #0
 801743a:	000a      	movs	r2, r1
 801743c:	2300      	movs	r3, #0
 801743e:	b2d2      	uxtb	r2, r2
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801744c:	f04f 0200 	mov.w	r2, #0
 8017450:	f04f 0300 	mov.w	r3, #0
 8017454:	0a0a      	lsrs	r2, r1, #8
 8017456:	2300      	movs	r3, #0
 8017458:	b2d2      	uxtb	r2, r2
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8017466:	f04f 0200 	mov.w	r2, #0
 801746a:	f04f 0300 	mov.w	r3, #0
 801746e:	0c0a      	lsrs	r2, r1, #16
 8017470:	2300      	movs	r3, #0
 8017472:	b2d2      	uxtb	r2, r2
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8017480:	f04f 0200 	mov.w	r2, #0
 8017484:	f04f 0300 	mov.w	r3, #0
 8017488:	0e0a      	lsrs	r2, r1, #24
 801748a:	2300      	movs	r3, #0
 801748c:	b2d2      	uxtb	r2, r2
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 801749a:	b2d2      	uxtb	r2, r2
 801749c:	68bb      	ldr	r3, [r7, #8]
 801749e:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80174a8:	f04f 0200 	mov.w	r2, #0
 80174ac:	f04f 0300 	mov.w	r3, #0
 80174b0:	0a02      	lsrs	r2, r0, #8
 80174b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80174b6:	0a0b      	lsrs	r3, r1, #8
 80174b8:	b2d2      	uxtb	r2, r2
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80174c6:	f04f 0200 	mov.w	r2, #0
 80174ca:	f04f 0300 	mov.w	r3, #0
 80174ce:	0c02      	lsrs	r2, r0, #16
 80174d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80174d4:	0c0b      	lsrs	r3, r1, #16
 80174d6:	b2d2      	uxtb	r2, r2
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80174e4:	f04f 0200 	mov.w	r2, #0
 80174e8:	f04f 0300 	mov.w	r3, #0
 80174ec:	0e02      	lsrs	r2, r0, #24
 80174ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80174f2:	0e0b      	lsrs	r3, r1, #24
 80174f4:	b2d2      	uxtb	r2, r2
 80174f6:	68bb      	ldr	r3, [r7, #8]
 80174f8:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 80174fc:	68bb      	ldr	r3, [r7, #8]
 80174fe:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8017502:	f04f 0200 	mov.w	r2, #0
 8017506:	f04f 0300 	mov.w	r3, #0
 801750a:	000a      	movs	r2, r1
 801750c:	2300      	movs	r3, #0
 801750e:	b2d2      	uxtb	r2, r2
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801751c:	f04f 0200 	mov.w	r2, #0
 8017520:	f04f 0300 	mov.w	r3, #0
 8017524:	0a0a      	lsrs	r2, r1, #8
 8017526:	2300      	movs	r3, #0
 8017528:	b2d2      	uxtb	r2, r2
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8017536:	f04f 0200 	mov.w	r2, #0
 801753a:	f04f 0300 	mov.w	r3, #0
 801753e:	0c0a      	lsrs	r2, r1, #16
 8017540:	2300      	movs	r3, #0
 8017542:	b2d2      	uxtb	r2, r2
 8017544:	68bb      	ldr	r3, [r7, #8]
 8017546:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8017550:	f04f 0200 	mov.w	r2, #0
 8017554:	f04f 0300 	mov.w	r3, #0
 8017558:	0e0a      	lsrs	r2, r1, #24
 801755a:	2300      	movs	r3, #0
 801755c:	b2d2      	uxtb	r2, r2
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	3340      	adds	r3, #64	@ 0x40
 8017568:	4619      	mov	r1, r3
 801756a:	68b8      	ldr	r0, [r7, #8]
 801756c:	f7ff f8d6 	bl	801671c <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 8017570:	2300      	movs	r3, #0
 8017572:	617b      	str	r3, [r7, #20]
 8017574:	e099      	b.n	80176aa <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 8017576:	68ba      	ldr	r2, [r7, #8]
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	00db      	lsls	r3, r3, #3
 801757c:	4413      	add	r3, r2
 801757e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017582:	f04f 0200 	mov.w	r2, #0
 8017586:	f04f 0300 	mov.w	r3, #0
 801758a:	0e0a      	lsrs	r2, r1, #24
 801758c:	2300      	movs	r3, #0
 801758e:	6979      	ldr	r1, [r7, #20]
 8017590:	00c9      	lsls	r1, r1, #3
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	4401      	add	r1, r0
 8017596:	b2d3      	uxtb	r3, r2
 8017598:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 801759a:	68ba      	ldr	r2, [r7, #8]
 801759c:	697b      	ldr	r3, [r7, #20]
 801759e:	00db      	lsls	r3, r3, #3
 80175a0:	4413      	add	r3, r2
 80175a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80175a6:	f04f 0200 	mov.w	r2, #0
 80175aa:	f04f 0300 	mov.w	r3, #0
 80175ae:	0c0a      	lsrs	r2, r1, #16
 80175b0:	2300      	movs	r3, #0
 80175b2:	6979      	ldr	r1, [r7, #20]
 80175b4:	00c9      	lsls	r1, r1, #3
 80175b6:	3101      	adds	r1, #1
 80175b8:	68f8      	ldr	r0, [r7, #12]
 80175ba:	4401      	add	r1, r0
 80175bc:	b2d3      	uxtb	r3, r2
 80175be:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 80175c0:	68ba      	ldr	r2, [r7, #8]
 80175c2:	697b      	ldr	r3, [r7, #20]
 80175c4:	00db      	lsls	r3, r3, #3
 80175c6:	4413      	add	r3, r2
 80175c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80175cc:	f04f 0200 	mov.w	r2, #0
 80175d0:	f04f 0300 	mov.w	r3, #0
 80175d4:	0a0a      	lsrs	r2, r1, #8
 80175d6:	2300      	movs	r3, #0
 80175d8:	6979      	ldr	r1, [r7, #20]
 80175da:	00c9      	lsls	r1, r1, #3
 80175dc:	3102      	adds	r1, #2
 80175de:	68f8      	ldr	r0, [r7, #12]
 80175e0:	4401      	add	r1, r0
 80175e2:	b2d3      	uxtb	r3, r2
 80175e4:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 80175e6:	68ba      	ldr	r2, [r7, #8]
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	00db      	lsls	r3, r3, #3
 80175ec:	4413      	add	r3, r2
 80175ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80175f2:	f04f 0200 	mov.w	r2, #0
 80175f6:	f04f 0300 	mov.w	r3, #0
 80175fa:	000a      	movs	r2, r1
 80175fc:	2300      	movs	r3, #0
 80175fe:	6979      	ldr	r1, [r7, #20]
 8017600:	00c9      	lsls	r1, r1, #3
 8017602:	3103      	adds	r1, #3
 8017604:	68f8      	ldr	r0, [r7, #12]
 8017606:	4401      	add	r1, r0
 8017608:	b2d3      	uxtb	r3, r2
 801760a:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 801760c:	68ba      	ldr	r2, [r7, #8]
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	00db      	lsls	r3, r3, #3
 8017612:	4413      	add	r3, r2
 8017614:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017618:	f04f 0200 	mov.w	r2, #0
 801761c:	f04f 0300 	mov.w	r3, #0
 8017620:	0e02      	lsrs	r2, r0, #24
 8017622:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8017626:	0e0b      	lsrs	r3, r1, #24
 8017628:	6979      	ldr	r1, [r7, #20]
 801762a:	00c9      	lsls	r1, r1, #3
 801762c:	3104      	adds	r1, #4
 801762e:	68f8      	ldr	r0, [r7, #12]
 8017630:	4401      	add	r1, r0
 8017632:	b2d3      	uxtb	r3, r2
 8017634:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 8017636:	68ba      	ldr	r2, [r7, #8]
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	00db      	lsls	r3, r3, #3
 801763c:	4413      	add	r3, r2
 801763e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017642:	f04f 0200 	mov.w	r2, #0
 8017646:	f04f 0300 	mov.w	r3, #0
 801764a:	0c02      	lsrs	r2, r0, #16
 801764c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8017650:	0c0b      	lsrs	r3, r1, #16
 8017652:	6979      	ldr	r1, [r7, #20]
 8017654:	00c9      	lsls	r1, r1, #3
 8017656:	3105      	adds	r1, #5
 8017658:	68f8      	ldr	r0, [r7, #12]
 801765a:	4401      	add	r1, r0
 801765c:	b2d3      	uxtb	r3, r2
 801765e:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 8017660:	68ba      	ldr	r2, [r7, #8]
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	00db      	lsls	r3, r3, #3
 8017666:	4413      	add	r3, r2
 8017668:	e9d3 0100 	ldrd	r0, r1, [r3]
 801766c:	f04f 0200 	mov.w	r2, #0
 8017670:	f04f 0300 	mov.w	r3, #0
 8017674:	0a02      	lsrs	r2, r0, #8
 8017676:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801767a:	0a0b      	lsrs	r3, r1, #8
 801767c:	6979      	ldr	r1, [r7, #20]
 801767e:	00c9      	lsls	r1, r1, #3
 8017680:	3106      	adds	r1, #6
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	4401      	add	r1, r0
 8017686:	b2d3      	uxtb	r3, r2
 8017688:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 801768a:	68ba      	ldr	r2, [r7, #8]
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	00db      	lsls	r3, r3, #3
 8017690:	4413      	add	r3, r2
 8017692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017696:	6979      	ldr	r1, [r7, #20]
 8017698:	00c9      	lsls	r1, r1, #3
 801769a:	3107      	adds	r1, #7
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	4401      	add	r1, r0
 80176a0:	b2d3      	uxtb	r3, r2
 80176a2:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 80176a4:	697b      	ldr	r3, [r7, #20]
 80176a6:	3301      	adds	r3, #1
 80176a8:	617b      	str	r3, [r7, #20]
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	2b05      	cmp	r3, #5
 80176ae:	f67f af62 	bls.w	8017576 <mg_sha384_final+0x294>
  }
}
 80176b2:	bf00      	nop
 80176b4:	bf00      	nop
 80176b6:	3718      	adds	r7, #24
 80176b8:	46bd      	mov	sp, r7
 80176ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080176be <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 80176be:	b580      	push	{r7, lr}
 80176c0:	b0ba      	sub	sp, #232	@ 0xe8
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	60f8      	str	r0, [r7, #12]
 80176c6:	60b9      	str	r1, [r7, #8]
 80176c8:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 80176ca:	f107 0310 	add.w	r3, r7, #16
 80176ce:	4618      	mov	r0, r3
 80176d0:	f7ff fd46 	bl	8017160 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 80176d4:	f107 0310 	add.w	r3, r7, #16
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	68b9      	ldr	r1, [r7, #8]
 80176dc:	4618      	mov	r0, r3
 80176de:	f7ff fdab 	bl	8017238 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 80176e2:	f107 0310 	add.w	r3, r7, #16
 80176e6:	4619      	mov	r1, r3
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f7ff fdfa 	bl	80172e2 <mg_sha384_final>
}
 80176ee:	bf00      	nop
 80176f0:	37e8      	adds	r7, #232	@ 0xe8
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}
	...

080176f8 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 80176f8:	b5b0      	push	{r4, r5, r7, lr}
 80176fa:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 80176fc:	f7e9 fa78 	bl	8000bf0 <mg_millis>
 8017700:	4b05      	ldr	r3, [pc, #20]	@ (8017718 <mg_now+0x20>)
 8017702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017706:	1884      	adds	r4, r0, r2
 8017708:	eb41 0503 	adc.w	r5, r1, r3
 801770c:	4622      	mov	r2, r4
 801770e:	462b      	mov	r3, r5
}
 8017710:	4610      	mov	r0, r2
 8017712:	4619      	mov	r1, r3
 8017714:	bdb0      	pop	{r4, r5, r7, pc}
 8017716:	bf00      	nop
 8017718:	24019d68 	.word	0x24019d68

0801771c <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 801771c:	b580      	push	{r7, lr}
 801771e:	b084      	sub	sp, #16
 8017720:	af00      	add	r7, sp, #0
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8017728:	4b05      	ldr	r3, [pc, #20]	@ (8017740 <mg_http_serve_ssi+0x24>)
 801772a:	2200      	movs	r2, #0
 801772c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8017730:	68f8      	ldr	r0, [r7, #12]
 8017732:	f7f5 f893 	bl	800c85c <mg_http_reply>
  (void) root, (void) fullpath;
}
 8017736:	bf00      	nop
 8017738:	3710      	adds	r7, #16
 801773a:	46bd      	mov	sp, r7
 801773c:	bd80      	pop	{r7, pc}
 801773e:	bf00      	nop
 8017740:	0802ef18 	.word	0x0802ef18

08017744 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8017744:	b580      	push	{r7, lr}
 8017746:	b084      	sub	sp, #16
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	60bb      	str	r3, [r7, #8]
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d004      	beq.n	8017762 <mg_str_s+0x1e>
 8017758:	6838      	ldr	r0, [r7, #0]
 801775a:	f7e8 fe39 	bl	80003d0 <strlen>
 801775e:	4603      	mov	r3, r0
 8017760:	e000      	b.n	8017764 <mg_str_s+0x20>
 8017762:	2300      	movs	r3, #0
 8017764:	60fb      	str	r3, [r7, #12]
  return str;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	461a      	mov	r2, r3
 801776a:	f107 0308 	add.w	r3, r7, #8
 801776e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017772:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	3710      	adds	r7, #16
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}

0801777e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 801777e:	b480      	push	{r7}
 8017780:	b087      	sub	sp, #28
 8017782:	af00      	add	r7, sp, #0
 8017784:	60f8      	str	r0, [r7, #12]
 8017786:	60b9      	str	r1, [r7, #8]
 8017788:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	613b      	str	r3, [r7, #16]
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	617b      	str	r3, [r7, #20]
  return str;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	461a      	mov	r2, r3
 8017796:	f107 0310 	add.w	r3, r7, #16
 801779a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801779e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80177a2:	68f8      	ldr	r0, [r7, #12]
 80177a4:	371c      	adds	r7, #28
 80177a6:	46bd      	mov	sp, r7
 80177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ac:	4770      	bx	lr

080177ae <mg_tolc>:

static int mg_tolc(char c) {
 80177ae:	b480      	push	{r7}
 80177b0:	b083      	sub	sp, #12
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	4603      	mov	r3, r0
 80177b6:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80177b8:	79fb      	ldrb	r3, [r7, #7]
 80177ba:	2b40      	cmp	r3, #64	@ 0x40
 80177bc:	d905      	bls.n	80177ca <mg_tolc+0x1c>
 80177be:	79fb      	ldrb	r3, [r7, #7]
 80177c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80177c2:	d802      	bhi.n	80177ca <mg_tolc+0x1c>
 80177c4:	79fb      	ldrb	r3, [r7, #7]
 80177c6:	3320      	adds	r3, #32
 80177c8:	e000      	b.n	80177cc <mg_tolc+0x1e>
 80177ca:	79fb      	ldrb	r3, [r7, #7]
}
 80177cc:	4618      	mov	r0, r3
 80177ce:	370c      	adds	r7, #12
 80177d0:	46bd      	mov	sp, r7
 80177d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d6:	4770      	bx	lr

080177d8 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 80177d8:	b580      	push	{r7, lr}
 80177da:	b088      	sub	sp, #32
 80177dc:	af00      	add	r7, sp, #0
 80177de:	60f8      	str	r0, [r7, #12]
 80177e0:	1d3b      	adds	r3, r7, #4
 80177e2:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 80177e6:	2300      	movs	r3, #0
 80177e8:	617b      	str	r3, [r7, #20]
 80177ea:	2300      	movs	r3, #0
 80177ec:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d01c      	beq.n	801782e <mg_strdup+0x56>
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d019      	beq.n	801782e <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 80177fa:	68bb      	ldr	r3, [r7, #8]
 80177fc:	3301      	adds	r3, #1
 80177fe:	4619      	mov	r1, r3
 8017800:	2001      	movs	r0, #1
 8017802:	f00f f803 	bl	802680c <calloc>
 8017806:	4603      	mov	r3, r0
 8017808:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 801780a:	69fb      	ldr	r3, [r7, #28]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d00e      	beq.n	801782e <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	68ba      	ldr	r2, [r7, #8]
 8017814:	4619      	mov	r1, r3
 8017816:	69f8      	ldr	r0, [r7, #28]
 8017818:	f012 f9f1 	bl	8029bfe <memcpy>
      sc[s.len] = '\0';
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	69fa      	ldr	r2, [r7, #28]
 8017820:	4413      	add	r3, r2
 8017822:	2200      	movs	r2, #0
 8017824:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 8017826:	69fb      	ldr	r3, [r7, #28]
 8017828:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	461a      	mov	r2, r3
 8017832:	f107 0314 	add.w	r3, r7, #20
 8017836:	e893 0003 	ldmia.w	r3, {r0, r1}
 801783a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801783e:	68f8      	ldr	r0, [r7, #12]
 8017840:	3720      	adds	r7, #32
 8017842:	46bd      	mov	sp, r7
 8017844:	bd80      	pop	{r7, pc}

08017846 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8017846:	b490      	push	{r4, r7}
 8017848:	b088      	sub	sp, #32
 801784a:	af00      	add	r7, sp, #0
 801784c:	f107 0408 	add.w	r4, r7, #8
 8017850:	e884 0003 	stmia.w	r4, {r0, r1}
 8017854:	4639      	mov	r1, r7
 8017856:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801785e:	e019      	b.n	8017894 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	69fb      	ldr	r3, [r7, #28]
 8017864:	4413      	add	r3, r2
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 801786a:	683a      	ldr	r2, [r7, #0]
 801786c:	69fb      	ldr	r3, [r7, #28]
 801786e:	4413      	add	r3, r2
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8017874:	69ba      	ldr	r2, [r7, #24]
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	429a      	cmp	r2, r3
 801787a:	da02      	bge.n	8017882 <mg_strcmp+0x3c>
 801787c:	f04f 33ff 	mov.w	r3, #4294967295
 8017880:	e01e      	b.n	80178c0 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8017882:	69ba      	ldr	r2, [r7, #24]
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	429a      	cmp	r2, r3
 8017888:	dd01      	ble.n	801788e <mg_strcmp+0x48>
 801788a:	2301      	movs	r3, #1
 801788c:	e018      	b.n	80178c0 <mg_strcmp+0x7a>
    i++;
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	3301      	adds	r3, #1
 8017892:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	69fa      	ldr	r2, [r7, #28]
 8017898:	429a      	cmp	r2, r3
 801789a:	d203      	bcs.n	80178a4 <mg_strcmp+0x5e>
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	69fa      	ldr	r2, [r7, #28]
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d3dd      	bcc.n	8017860 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	69fa      	ldr	r2, [r7, #28]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d201      	bcs.n	80178b0 <mg_strcmp+0x6a>
 80178ac:	2301      	movs	r3, #1
 80178ae:	e007      	b.n	80178c0 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	69fa      	ldr	r2, [r7, #28]
 80178b4:	429a      	cmp	r2, r3
 80178b6:	d202      	bcs.n	80178be <mg_strcmp+0x78>
 80178b8:	f04f 33ff 	mov.w	r3, #4294967295
 80178bc:	e000      	b.n	80178c0 <mg_strcmp+0x7a>
  return 0;
 80178be:	2300      	movs	r3, #0
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3720      	adds	r7, #32
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bc90      	pop	{r4, r7}
 80178c8:	4770      	bx	lr

080178ca <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 80178ca:	b590      	push	{r4, r7, lr}
 80178cc:	b089      	sub	sp, #36	@ 0x24
 80178ce:	af00      	add	r7, sp, #0
 80178d0:	f107 0408 	add.w	r4, r7, #8
 80178d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80178d8:	4639      	mov	r1, r7
 80178da:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80178de:	2300      	movs	r3, #0
 80178e0:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80178e2:	e01f      	b.n	8017924 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 80178e4:	68ba      	ldr	r2, [r7, #8]
 80178e6:	69fb      	ldr	r3, [r7, #28]
 80178e8:	4413      	add	r3, r2
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	4618      	mov	r0, r3
 80178ee:	f7ff ff5e 	bl	80177ae <mg_tolc>
 80178f2:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 80178f4:	683a      	ldr	r2, [r7, #0]
 80178f6:	69fb      	ldr	r3, [r7, #28]
 80178f8:	4413      	add	r3, r2
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7ff ff56 	bl	80177ae <mg_tolc>
 8017902:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8017904:	69ba      	ldr	r2, [r7, #24]
 8017906:	697b      	ldr	r3, [r7, #20]
 8017908:	429a      	cmp	r2, r3
 801790a:	da02      	bge.n	8017912 <mg_strcasecmp+0x48>
 801790c:	f04f 33ff 	mov.w	r3, #4294967295
 8017910:	e01e      	b.n	8017950 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8017912:	69ba      	ldr	r2, [r7, #24]
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	429a      	cmp	r2, r3
 8017918:	dd01      	ble.n	801791e <mg_strcasecmp+0x54>
 801791a:	2301      	movs	r3, #1
 801791c:	e018      	b.n	8017950 <mg_strcasecmp+0x86>
    i++;
 801791e:	69fb      	ldr	r3, [r7, #28]
 8017920:	3301      	adds	r3, #1
 8017922:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	69fa      	ldr	r2, [r7, #28]
 8017928:	429a      	cmp	r2, r3
 801792a:	d203      	bcs.n	8017934 <mg_strcasecmp+0x6a>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	69fa      	ldr	r2, [r7, #28]
 8017930:	429a      	cmp	r2, r3
 8017932:	d3d7      	bcc.n	80178e4 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	69fa      	ldr	r2, [r7, #28]
 8017938:	429a      	cmp	r2, r3
 801793a:	d201      	bcs.n	8017940 <mg_strcasecmp+0x76>
 801793c:	2301      	movs	r3, #1
 801793e:	e007      	b.n	8017950 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	69fa      	ldr	r2, [r7, #28]
 8017944:	429a      	cmp	r2, r3
 8017946:	d202      	bcs.n	801794e <mg_strcasecmp+0x84>
 8017948:	f04f 33ff 	mov.w	r3, #4294967295
 801794c:	e000      	b.n	8017950 <mg_strcasecmp+0x86>
  return 0;
 801794e:	2300      	movs	r3, #0
}
 8017950:	4618      	mov	r0, r3
 8017952:	3724      	adds	r7, #36	@ 0x24
 8017954:	46bd      	mov	sp, r7
 8017956:	bd90      	pop	{r4, r7, pc}

08017958 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8017958:	b490      	push	{r4, r7}
 801795a:	b088      	sub	sp, #32
 801795c:	af00      	add	r7, sp, #0
 801795e:	f107 0408 	add.w	r4, r7, #8
 8017962:	e884 0003 	stmia.w	r4, {r0, r1}
 8017966:	4639      	mov	r1, r7
 8017968:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 801796c:	2300      	movs	r3, #0
 801796e:	61fb      	str	r3, [r7, #28]
 8017970:	2300      	movs	r3, #0
 8017972:	61bb      	str	r3, [r7, #24]
 8017974:	2300      	movs	r3, #0
 8017976:	617b      	str	r3, [r7, #20]
 8017978:	2300      	movs	r3, #0
 801797a:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 801797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801797e:	2b00      	cmp	r3, #0
 8017980:	f000 80ba 	beq.w	8017af8 <mg_match+0x1a0>
 8017984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017986:	2200      	movs	r2, #0
 8017988:	601a      	str	r2, [r3, #0]
 801798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801798c:	2200      	movs	r2, #0
 801798e:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8017990:	e0b2      	b.n	8017af8 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	69fa      	ldr	r2, [r7, #28]
 8017996:	429a      	cmp	r2, r3
 8017998:	d25b      	bcs.n	8017a52 <mg_match+0xfa>
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	69ba      	ldr	r2, [r7, #24]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d257      	bcs.n	8017a52 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 80179a2:	683a      	ldr	r2, [r7, #0]
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	4413      	add	r3, r2
 80179a8:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 80179aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80179ac:	d015      	beq.n	80179da <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80179ae:	683a      	ldr	r2, [r7, #0]
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	4413      	add	r3, r2
 80179b4:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 80179b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80179b8:	d04b      	beq.n	8017a52 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80179ba:	683a      	ldr	r2, [r7, #0]
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	4413      	add	r3, r2
 80179c0:	781b      	ldrb	r3, [r3, #0]
 80179c2:	2b23      	cmp	r3, #35	@ 0x23
 80179c4:	d045      	beq.n	8017a52 <mg_match+0xfa>
 80179c6:	68ba      	ldr	r2, [r7, #8]
 80179c8:	69bb      	ldr	r3, [r7, #24]
 80179ca:	4413      	add	r3, r2
 80179cc:	781a      	ldrb	r2, [r3, #0]
 80179ce:	6839      	ldr	r1, [r7, #0]
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	440b      	add	r3, r1
 80179d4:	781b      	ldrb	r3, [r3, #0]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d13b      	bne.n	8017a52 <mg_match+0xfa>
      if (caps == NULL) {
 80179da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d031      	beq.n	8017a44 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 80179e0:	683a      	ldr	r2, [r7, #0]
 80179e2:	69fb      	ldr	r3, [r7, #28]
 80179e4:	4413      	add	r3, r2
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80179ea:	d111      	bne.n	8017a10 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 80179ec:	68ba      	ldr	r2, [r7, #8]
 80179ee:	69bb      	ldr	r3, [r7, #24]
 80179f0:	441a      	add	r2, r3
 80179f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179f8:	2201      	movs	r2, #1
 80179fa:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 80179fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179fe:	3308      	adds	r3, #8
 8017a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a04:	2200      	movs	r2, #0
 8017a06:	601a      	str	r2, [r3, #0]
 8017a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	605a      	str	r2, [r3, #4]
 8017a0e:	e019      	b.n	8017a44 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8017a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d015      	beq.n	8017a44 <mg_match+0xec>
 8017a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a1a:	685b      	ldr	r3, [r3, #4]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d111      	bne.n	8017a44 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8017a20:	68ba      	ldr	r2, [r7, #8]
 8017a22:	69bb      	ldr	r3, [r7, #24]
 8017a24:	441a      	add	r2, r3
 8017a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	1ad3      	subs	r3, r2, r3
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a30:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8017a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a34:	3308      	adds	r3, #8
 8017a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	605a      	str	r2, [r3, #4]
 8017a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a40:	2200      	movs	r2, #0
 8017a42:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	3301      	adds	r3, #1
 8017a48:	61fb      	str	r3, [r7, #28]
 8017a4a:	69bb      	ldr	r3, [r7, #24]
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	61bb      	str	r3, [r7, #24]
 8017a50:	e052      	b.n	8017af8 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	69fa      	ldr	r2, [r7, #28]
 8017a56:	429a      	cmp	r2, r3
 8017a58:	d222      	bcs.n	8017aa0 <mg_match+0x148>
 8017a5a:	683a      	ldr	r2, [r7, #0]
 8017a5c:	69fb      	ldr	r3, [r7, #28]
 8017a5e:	4413      	add	r3, r2
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a64:	d005      	beq.n	8017a72 <mg_match+0x11a>
 8017a66:	683a      	ldr	r2, [r7, #0]
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	4413      	add	r3, r2
 8017a6c:	781b      	ldrb	r3, [r3, #0]
 8017a6e:	2b23      	cmp	r3, #35	@ 0x23
 8017a70:	d116      	bne.n	8017aa0 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8017a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d00b      	beq.n	8017a90 <mg_match+0x138>
 8017a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d107      	bne.n	8017a90 <mg_match+0x138>
 8017a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a82:	2200      	movs	r2, #0
 8017a84:	605a      	str	r2, [r3, #4]
 8017a86:	68ba      	ldr	r2, [r7, #8]
 8017a88:	69bb      	ldr	r3, [r7, #24]
 8017a8a:	441a      	add	r2, r3
 8017a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a8e:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8017a90:	69fb      	ldr	r3, [r7, #28]
 8017a92:	1c5a      	adds	r2, r3, #1
 8017a94:	61fa      	str	r2, [r7, #28]
 8017a96:	617b      	str	r3, [r7, #20]
 8017a98:	69bb      	ldr	r3, [r7, #24]
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	613b      	str	r3, [r7, #16]
 8017a9e:	e02b      	b.n	8017af8 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8017aa0:	693b      	ldr	r3, [r7, #16]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d025      	beq.n	8017af2 <mg_match+0x19a>
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	693a      	ldr	r2, [r7, #16]
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d821      	bhi.n	8017af2 <mg_match+0x19a>
 8017aae:	683a      	ldr	r2, [r7, #0]
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	4413      	add	r3, r2
 8017ab4:	781b      	ldrb	r3, [r3, #0]
 8017ab6:	2b23      	cmp	r3, #35	@ 0x23
 8017ab8:	d005      	beq.n	8017ac6 <mg_match+0x16e>
 8017aba:	68ba      	ldr	r2, [r7, #8]
 8017abc:	69bb      	ldr	r3, [r7, #24]
 8017abe:	4413      	add	r3, r2
 8017ac0:	781b      	ldrb	r3, [r3, #0]
 8017ac2:	2b2f      	cmp	r3, #47	@ 0x2f
 8017ac4:	d015      	beq.n	8017af2 <mg_match+0x19a>
      i = ni, j = nj;
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	61fb      	str	r3, [r7, #28]
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8017ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d010      	beq.n	8017af6 <mg_match+0x19e>
 8017ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d10c      	bne.n	8017af6 <mg_match+0x19e>
 8017adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ade:	685b      	ldr	r3, [r3, #4]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d108      	bne.n	8017af6 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8017ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ae6:	3b08      	subs	r3, #8
 8017ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aec:	2200      	movs	r2, #0
 8017aee:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8017af0:	e001      	b.n	8017af6 <mg_match+0x19e>
      }
    } else {
      return false;
 8017af2:	2300      	movs	r3, #0
 8017af4:	e01f      	b.n	8017b36 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8017af6:	bf00      	nop
  while (i < p.len || j < s.len) {
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	69fa      	ldr	r2, [r7, #28]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	f4ff af48 	bcc.w	8017992 <mg_match+0x3a>
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	69ba      	ldr	r2, [r7, #24]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	f4ff af43 	bcc.w	8017992 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8017b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d010      	beq.n	8017b34 <mg_match+0x1dc>
 8017b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d00c      	beq.n	8017b34 <mg_match+0x1dc>
 8017b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b1c:	685b      	ldr	r3, [r3, #4]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d108      	bne.n	8017b34 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8017b22:	68ba      	ldr	r2, [r7, #8]
 8017b24:	69bb      	ldr	r3, [r7, #24]
 8017b26:	441a      	add	r2, r3
 8017b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	1ad3      	subs	r3, r2, r3
 8017b2e:	461a      	mov	r2, r3
 8017b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b32:	605a      	str	r2, [r3, #4]
  }
  return true;
 8017b34:	2301      	movs	r3, #1
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3720      	adds	r7, #32
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bc90      	pop	{r4, r7}
 8017b3e:	4770      	bx	lr

08017b40 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8017b40:	b590      	push	{r4, r7, lr}
 8017b42:	b089      	sub	sp, #36	@ 0x24
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	f107 0410 	add.w	r4, r7, #16
 8017b4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8017b4e:	60fa      	str	r2, [r7, #12]
 8017b50:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d002      	beq.n	8017b5e <mg_span+0x1e>
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d101      	bne.n	8017b62 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8017b5e:	2300      	movs	r3, #0
 8017b60:	e047      	b.n	8017bf2 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8017b62:	2300      	movs	r3, #0
 8017b64:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8017b66:	e002      	b.n	8017b6e <mg_span+0x2e>
 8017b68:	69fb      	ldr	r3, [r7, #28]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	61fb      	str	r3, [r7, #28]
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	69fa      	ldr	r2, [r7, #28]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d207      	bcs.n	8017b86 <mg_span+0x46>
 8017b76:	693a      	ldr	r2, [r7, #16]
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	4413      	add	r3, r2
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d1f0      	bne.n	8017b68 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d00c      	beq.n	8017ba6 <mg_span+0x66>
 8017b8c:	6939      	ldr	r1, [r7, #16]
 8017b8e:	68fc      	ldr	r4, [r7, #12]
 8017b90:	463b      	mov	r3, r7
 8017b92:	69fa      	ldr	r2, [r7, #28]
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7ff fdf2 	bl	801777e <mg_str_n>
 8017b9a:	4622      	mov	r2, r4
 8017b9c:	463b      	mov	r3, r7
 8017b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ba2:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8017ba6:	68bb      	ldr	r3, [r7, #8]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d010      	beq.n	8017bce <mg_span+0x8e>
 8017bac:	693a      	ldr	r2, [r7, #16]
 8017bae:	69fb      	ldr	r3, [r7, #28]
 8017bb0:	18d1      	adds	r1, r2, r3
 8017bb2:	697a      	ldr	r2, [r7, #20]
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	1ad2      	subs	r2, r2, r3
 8017bb8:	68bc      	ldr	r4, [r7, #8]
 8017bba:	463b      	mov	r3, r7
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7ff fdde 	bl	801777e <mg_str_n>
 8017bc2:	4622      	mov	r2, r4
 8017bc4:	463b      	mov	r3, r7
 8017bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017bca:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8017bce:	68bb      	ldr	r3, [r7, #8]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d00d      	beq.n	8017bf0 <mg_span+0xb0>
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	69fa      	ldr	r2, [r7, #28]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d209      	bcs.n	8017bf0 <mg_span+0xb0>
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	1c5a      	adds	r2, r3, #1
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	601a      	str	r2, [r3, #0]
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	1e5a      	subs	r2, r3, #1
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	605a      	str	r2, [r3, #4]
    return true;
 8017bf0:	2301      	movs	r3, #1
  }
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3724      	adds	r7, #36	@ 0x24
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd90      	pop	{r4, r7, pc}

08017bfa <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8017bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfe:	b0a5      	sub	sp, #148	@ 0x94
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8017c06:	e884 0003 	stmia.w	r4, {r0, r1}
 8017c0a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8017c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017c14:	2300      	movs	r3, #0
 8017c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8017c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	d016      	beq.n	8017c50 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8017c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017c26:	2b02      	cmp	r3, #2
 8017c28:	d00d      	beq.n	8017c46 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8017c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017c2e:	2b04      	cmp	r3, #4
 8017c30:	d104      	bne.n	8017c3c <mg_str_to_num+0x42>
 8017c32:	f04f 32ff 	mov.w	r2, #4294967295
 8017c36:	f04f 0300 	mov.w	r3, #0
 8017c3a:	e00d      	b.n	8017c58 <mg_str_to_num+0x5e>
 8017c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8017c40:	f04f 33ff 	mov.w	r3, #4294967295
 8017c44:	e008      	b.n	8017c58 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8017c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c4a:	f04f 0300 	mov.w	r3, #0
 8017c4e:	e003      	b.n	8017c58 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8017c50:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8017c54:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8017c58:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8017c5c:	f04f 0200 	mov.w	r2, #0
 8017c60:	f04f 0300 	mov.w	r3, #0
 8017c64:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8017c68:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8017c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c70:	bf08      	it	eq
 8017c72:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8017c76:	d105      	bne.n	8017c84 <mg_str_to_num+0x8a>
 8017c78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017c7c:	2b08      	cmp	r3, #8
 8017c7e:	d001      	beq.n	8017c84 <mg_str_to_num+0x8a>
 8017c80:	2300      	movs	r3, #0
 8017c82:	e1e8      	b.n	8018056 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8017c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d12d      	bne.n	8017ce6 <mg_str_to_num+0xec>
 8017c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017c8c:	2b01      	cmp	r3, #1
 8017c8e:	d92a      	bls.n	8017ce6 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8017c90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017c96:	4413      	add	r3, r2
 8017c98:	781b      	ldrb	r3, [r3, #0]
 8017c9a:	2b30      	cmp	r3, #48	@ 0x30
 8017c9c:	d121      	bne.n	8017ce2 <mg_str_to_num+0xe8>
      i++;
 8017c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017ca2:	3301      	adds	r3, #1
 8017ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8017ca8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017cae:	4413      	add	r3, r2
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	2b62      	cmp	r3, #98	@ 0x62
 8017cb4:	d00a      	beq.n	8017ccc <mg_str_to_num+0xd2>
 8017cb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017cbc:	4413      	add	r3, r2
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	2b78      	cmp	r3, #120	@ 0x78
 8017cc2:	d101      	bne.n	8017cc8 <mg_str_to_num+0xce>
 8017cc4:	2310      	movs	r3, #16
 8017cc6:	e002      	b.n	8017cce <mg_str_to_num+0xd4>
 8017cc8:	230a      	movs	r3, #10
 8017cca:	e000      	b.n	8017cce <mg_str_to_num+0xd4>
 8017ccc:	2302      	movs	r3, #2
 8017cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8017cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cd2:	2b0a      	cmp	r3, #10
 8017cd4:	d007      	beq.n	8017ce6 <mg_str_to_num+0xec>
 8017cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017cda:	3301      	adds	r3, #1
 8017cdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017ce0:	e001      	b.n	8017ce6 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8017ce2:	230a      	movs	r3, #10
 8017ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8017ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ce8:	2b10      	cmp	r3, #16
 8017cea:	f000 8178 	beq.w	8017fde <mg_str_to_num+0x3e4>
 8017cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cf0:	2b10      	cmp	r3, #16
 8017cf2:	f300 817d 	bgt.w	8017ff0 <mg_str_to_num+0x3f6>
 8017cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cf8:	2b02      	cmp	r3, #2
 8017cfa:	d052      	beq.n	8017da2 <mg_str_to_num+0x1a8>
 8017cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cfe:	2b0a      	cmp	r3, #10
 8017d00:	f000 80cd 	beq.w	8017e9e <mg_str_to_num+0x2a4>
 8017d04:	e174      	b.n	8017ff0 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8017d06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017d0c:	4413      	add	r3, r2
 8017d0e:	781b      	ldrb	r3, [r3, #0]
 8017d10:	3b30      	subs	r3, #48	@ 0x30
 8017d12:	17da      	asrs	r2, r3, #31
 8017d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8017d16:	637a      	str	r2, [r7, #52]	@ 0x34
 8017d18:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8017d1c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8017d20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017d24:	f04f 0200 	mov.w	r2, #0
 8017d28:	f04f 0300 	mov.w	r3, #0
 8017d2c:	0842      	lsrs	r2, r0, #1
 8017d2e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8017d32:	084b      	lsrs	r3, r1, #1
 8017d34:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017d38:	4282      	cmp	r2, r0
 8017d3a:	418b      	sbcs	r3, r1
 8017d3c:	d201      	bcs.n	8017d42 <mg_str_to_num+0x148>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	e189      	b.n	8018056 <mg_str_to_num+0x45c>
        result *= 2;
 8017d42:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017d46:	1891      	adds	r1, r2, r2
 8017d48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017d4a:	415b      	adcs	r3, r3
 8017d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017d4e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8017d52:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8017d56:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8017d5e:	1a85      	subs	r5, r0, r2
 8017d60:	eb61 0603 	sbc.w	r6, r1, r3
 8017d64:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017d68:	4295      	cmp	r5, r2
 8017d6a:	eb76 0303 	sbcs.w	r3, r6, r3
 8017d6e:	d201      	bcs.n	8017d74 <mg_str_to_num+0x17a>
 8017d70:	2300      	movs	r3, #0
 8017d72:	e170      	b.n	8018056 <mg_str_to_num+0x45c>
        result += digit;
 8017d74:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017d78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8017d7c:	1884      	adds	r4, r0, r2
 8017d7e:	623c      	str	r4, [r7, #32]
 8017d80:	eb41 0303 	adc.w	r3, r1, r3
 8017d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8017d8a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8017d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017d92:	3301      	adds	r3, #1
 8017d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8017da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017da4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017da8:	429a      	cmp	r2, r3
 8017daa:	f080 8123 	bcs.w	8017ff4 <mg_str_to_num+0x3fa>
 8017dae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017db4:	4413      	add	r3, r2
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	2b30      	cmp	r3, #48	@ 0x30
 8017dba:	d0a4      	beq.n	8017d06 <mg_str_to_num+0x10c>
 8017dbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017dc2:	4413      	add	r3, r2
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	2b31      	cmp	r3, #49	@ 0x31
 8017dc8:	d09d      	beq.n	8017d06 <mg_str_to_num+0x10c>
      }
      break;
 8017dca:	e113      	b.n	8017ff4 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8017dcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017dd2:	4413      	add	r3, r2
 8017dd4:	781b      	ldrb	r3, [r3, #0]
 8017dd6:	3b30      	subs	r3, #48	@ 0x30
 8017dd8:	17da      	asrs	r2, r3, #31
 8017dda:	61bb      	str	r3, [r7, #24]
 8017ddc:	61fa      	str	r2, [r7, #28]
 8017dde:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8017de2:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8017de6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017dea:	f04f 020a 	mov.w	r2, #10
 8017dee:	f04f 0300 	mov.w	r3, #0
 8017df2:	f7e8 fd01 	bl	80007f8 <__aeabi_uldivmod>
 8017df6:	4602      	mov	r2, r0
 8017df8:	460b      	mov	r3, r1
 8017dfa:	4610      	mov	r0, r2
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017e02:	4290      	cmp	r0, r2
 8017e04:	eb71 0303 	sbcs.w	r3, r1, r3
 8017e08:	d201      	bcs.n	8017e0e <mg_str_to_num+0x214>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	e123      	b.n	8018056 <mg_str_to_num+0x45c>
        result *= 10;
 8017e0e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8017e12:	4622      	mov	r2, r4
 8017e14:	462b      	mov	r3, r5
 8017e16:	f04f 0000 	mov.w	r0, #0
 8017e1a:	f04f 0100 	mov.w	r1, #0
 8017e1e:	0099      	lsls	r1, r3, #2
 8017e20:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8017e24:	0090      	lsls	r0, r2, #2
 8017e26:	4602      	mov	r2, r0
 8017e28:	460b      	mov	r3, r1
 8017e2a:	eb12 0804 	adds.w	r8, r2, r4
 8017e2e:	eb43 0905 	adc.w	r9, r3, r5
 8017e32:	eb18 0308 	adds.w	r3, r8, r8
 8017e36:	613b      	str	r3, [r7, #16]
 8017e38:	eb49 0309 	adc.w	r3, r9, r9
 8017e3c:	617b      	str	r3, [r7, #20]
 8017e3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8017e42:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8017e46:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017e4a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8017e4e:	1a84      	subs	r4, r0, r2
 8017e50:	63bc      	str	r4, [r7, #56]	@ 0x38
 8017e52:	eb61 0303 	sbc.w	r3, r1, r3
 8017e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017e58:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017e5c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8017e60:	4621      	mov	r1, r4
 8017e62:	4291      	cmp	r1, r2
 8017e64:	4629      	mov	r1, r5
 8017e66:	eb71 0303 	sbcs.w	r3, r1, r3
 8017e6a:	d201      	bcs.n	8017e70 <mg_str_to_num+0x276>
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	e0f2      	b.n	8018056 <mg_str_to_num+0x45c>
        result += digit;
 8017e70:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017e74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8017e78:	1884      	adds	r4, r0, r2
 8017e7a:	60bc      	str	r4, [r7, #8]
 8017e7c:	eb41 0303 	adc.w	r3, r1, r3
 8017e80:	60fb      	str	r3, [r7, #12]
 8017e82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8017e86:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8017e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017e8e:	3301      	adds	r3, #1
 8017e90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017e98:	3301      	adds	r3, #1
 8017e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8017e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ea0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	f080 80a7 	bcs.w	8017ff8 <mg_str_to_num+0x3fe>
 8017eaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017eb0:	4413      	add	r3, r2
 8017eb2:	781b      	ldrb	r3, [r3, #0]
 8017eb4:	2b2f      	cmp	r3, #47	@ 0x2f
 8017eb6:	f240 809f 	bls.w	8017ff8 <mg_str_to_num+0x3fe>
 8017eba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017ec0:	4413      	add	r3, r2
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	2b39      	cmp	r3, #57	@ 0x39
 8017ec6:	d981      	bls.n	8017dcc <mg_str_to_num+0x1d2>
      }
      break;
 8017ec8:	e096      	b.n	8017ff8 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8017eca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017ed0:	4413      	add	r3, r2
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017ed8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017edc:	2b2f      	cmp	r3, #47	@ 0x2f
 8017ede:	d90a      	bls.n	8017ef6 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8017ee0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017ee4:	2b39      	cmp	r3, #57	@ 0x39
 8017ee6:	d806      	bhi.n	8017ef6 <mg_str_to_num+0x2fc>
 8017ee8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017eec:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017eee:	17da      	asrs	r2, r3, #31
 8017ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8017ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8017ef4:	e023      	b.n	8017f3e <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8017ef6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017efa:	2b40      	cmp	r3, #64	@ 0x40
 8017efc:	d90a      	bls.n	8017f14 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8017efe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017f02:	2b46      	cmp	r3, #70	@ 0x46
 8017f04:	d806      	bhi.n	8017f14 <mg_str_to_num+0x31a>
 8017f06:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017f0a:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8017f0c:	17da      	asrs	r2, r3, #31
 8017f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8017f10:	647a      	str	r2, [r7, #68]	@ 0x44
 8017f12:	e014      	b.n	8017f3e <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8017f14:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017f18:	2b60      	cmp	r3, #96	@ 0x60
 8017f1a:	d90a      	bls.n	8017f32 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8017f1c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017f20:	2b66      	cmp	r3, #102	@ 0x66
 8017f22:	d806      	bhi.n	8017f32 <mg_str_to_num+0x338>
 8017f24:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8017f28:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8017f2a:	17da      	asrs	r2, r3, #31
 8017f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8017f2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8017f30:	e005      	b.n	8017f3e <mg_str_to_num+0x344>
 8017f32:	f04f 33ff 	mov.w	r3, #4294967295
 8017f36:	f04f 34ff 	mov.w	r4, #4294967295
 8017f3a:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8017f3e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8017f42:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8017f46:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8017f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f4e:	bf08      	it	eq
 8017f50:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8017f54:	d04a      	beq.n	8017fec <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8017f56:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017f5a:	f04f 0200 	mov.w	r2, #0
 8017f5e:	f04f 0300 	mov.w	r3, #0
 8017f62:	0902      	lsrs	r2, r0, #4
 8017f64:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8017f68:	090b      	lsrs	r3, r1, #4
 8017f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017f6e:	4282      	cmp	r2, r0
 8017f70:	418b      	sbcs	r3, r1
 8017f72:	d201      	bcs.n	8017f78 <mg_str_to_num+0x37e>
 8017f74:	2300      	movs	r3, #0
 8017f76:	e06e      	b.n	8018056 <mg_str_to_num+0x45c>
        result *= 16;
 8017f78:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017f7c:	f04f 0200 	mov.w	r2, #0
 8017f80:	f04f 0300 	mov.w	r3, #0
 8017f84:	010b      	lsls	r3, r1, #4
 8017f86:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8017f8a:	0102      	lsls	r2, r0, #4
 8017f8c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8017f90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8017f94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8017f98:	ebb0 0a02 	subs.w	sl, r0, r2
 8017f9c:	eb61 0b03 	sbc.w	fp, r1, r3
 8017fa0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8017fa4:	4592      	cmp	sl, r2
 8017fa6:	eb7b 0303 	sbcs.w	r3, fp, r3
 8017faa:	d201      	bcs.n	8017fb0 <mg_str_to_num+0x3b6>
 8017fac:	2300      	movs	r3, #0
 8017fae:	e052      	b.n	8018056 <mg_str_to_num+0x45c>
        result += digit;
 8017fb0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8017fb4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8017fb8:	1884      	adds	r4, r0, r2
 8017fba:	603c      	str	r4, [r7, #0]
 8017fbc:	eb41 0303 	adc.w	r3, r1, r3
 8017fc0:	607b      	str	r3, [r7, #4]
 8017fc2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017fc6:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8017fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017fce:	3301      	adds	r3, #1
 8017fd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017fd8:	3301      	adds	r3, #1
 8017fda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8017fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fe0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	f4ff af70 	bcc.w	8017eca <mg_str_to_num+0x2d0>
      }
      break;
 8017fea:	e006      	b.n	8017ffa <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 8017fec:	bf00      	nop
      break;
 8017fee:	e004      	b.n	8017ffa <mg_str_to_num+0x400>
    default:
      return false;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	e030      	b.n	8018056 <mg_str_to_num+0x45c>
      break;
 8017ff4:	bf00      	nop
 8017ff6:	e000      	b.n	8017ffa <mg_str_to_num+0x400>
      break;
 8017ff8:	bf00      	nop
  }
  if (ndigits == 0) return false;
 8017ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d101      	bne.n	8018006 <mg_str_to_num+0x40c>
 8018002:	2300      	movs	r3, #0
 8018004:	e027      	b.n	8018056 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8018006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018008:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801800c:	429a      	cmp	r2, r3
 801800e:	d001      	beq.n	8018014 <mg_str_to_num+0x41a>
 8018010:	2300      	movs	r3, #0
 8018012:	e020      	b.n	8018056 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8018014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018018:	2b01      	cmp	r3, #1
 801801a:	d104      	bne.n	8018026 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 801801c:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8018020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018022:	701a      	strb	r2, [r3, #0]
 8018024:	e016      	b.n	8018054 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8018026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801802a:	2b02      	cmp	r3, #2
 801802c:	d104      	bne.n	8018038 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 801802e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8018032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018034:	801a      	strh	r2, [r3, #0]
 8018036:	e00d      	b.n	8018054 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 8018038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801803c:	2b04      	cmp	r3, #4
 801803e:	d104      	bne.n	801804a <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8018040:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018046:	601a      	str	r2, [r3, #0]
 8018048:	e004      	b.n	8018054 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 801804a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801804c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8018050:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 8018054:	2301      	movs	r3, #1
}
 8018056:	4618      	mov	r0, r3
 8018058:	3794      	adds	r7, #148	@ 0x94
 801805a:	46bd      	mov	sp, r7
 801805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018060 <mg_timer_init>:
#endif



void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8018060:	b480      	push	{r7}
 8018062:	b085      	sub	sp, #20
 8018064:	af00      	add	r7, sp, #0
 8018066:	60f8      	str	r0, [r7, #12]
 8018068:	60b9      	str	r1, [r7, #8]
 801806a:	e9c7 2300 	strd	r2, r3, [r7]
  t->period_ms = ms, t->expire = 0;
 801806e:	68b9      	ldr	r1, [r7, #8]
 8018070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018074:	e9c1 2300 	strd	r2, r3, [r1]
 8018078:	68b9      	ldr	r1, [r7, #8]
 801807a:	f04f 0200 	mov.w	r2, #0
 801807e:	f04f 0300 	mov.w	r3, #0
 8018082:	e9c1 2302 	strd	r2, r3, [r1, #8]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	69ba      	ldr	r2, [r7, #24]
 801808a:	611a      	str	r2, [r3, #16]
 801808c:	68bb      	ldr	r3, [r7, #8]
 801808e:	69fa      	ldr	r2, [r7, #28]
 8018090:	615a      	str	r2, [r3, #20]
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	6a3a      	ldr	r2, [r7, #32]
 8018096:	619a      	str	r2, [r3, #24]
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	681a      	ldr	r2, [r3, #0]
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	61da      	str	r2, [r3, #28]
  *head = t;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	68ba      	ldr	r2, [r7, #8]
 80180a4:	601a      	str	r2, [r3, #0]
}
 80180a6:	bf00      	nop
 80180a8:	3714      	adds	r7, #20
 80180aa:	46bd      	mov	sp, r7
 80180ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b0:	4770      	bx	lr

080180b2 <mg_timer_free>:

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 80180b2:	b480      	push	{r7}
 80180b4:	b083      	sub	sp, #12
 80180b6:	af00      	add	r7, sp, #0
 80180b8:	6078      	str	r0, [r7, #4]
 80180ba:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 80180bc:	e003      	b.n	80180c6 <mg_timer_free+0x14>
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	331c      	adds	r3, #28
 80180c4:	607b      	str	r3, [r7, #4]
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d004      	beq.n	80180d8 <mg_timer_free+0x26>
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	683a      	ldr	r2, [r7, #0]
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d1f2      	bne.n	80180be <mg_timer_free+0xc>
  if (*head) *head = t->next;
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d003      	beq.n	80180e8 <mg_timer_free+0x36>
 80180e0:	683b      	ldr	r3, [r7, #0]
 80180e2:	69da      	ldr	r2, [r3, #28]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	601a      	str	r2, [r3, #0]
}
 80180e8:	bf00      	nop
 80180ea:	370c      	adds	r7, #12
 80180ec:	46bd      	mov	sp, r7
 80180ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f2:	4770      	bx	lr

080180f4 <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80180f4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80180f8:	b086      	sub	sp, #24
 80180fa:	af00      	add	r7, sp, #0
 80180fc:	6178      	str	r0, [r7, #20]
 80180fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8018102:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8018106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801810a:	eb10 0a02 	adds.w	sl, r0, r2
 801810e:	eb41 0b03 	adc.w	fp, r1, r3
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018118:	4592      	cmp	sl, r2
 801811a:	eb7b 0303 	sbcs.w	r3, fp, r3
 801811e:	d206      	bcs.n	801812e <mg_timer_expired+0x3a>
 8018120:	6979      	ldr	r1, [r7, #20]
 8018122:	f04f 0200 	mov.w	r2, #0
 8018126:	f04f 0300 	mov.w	r3, #0
 801812a:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 801812e:	697b      	ldr	r3, [r7, #20]
 8018130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018134:	4313      	orrs	r3, r2
 8018136:	d10d      	bne.n	8018154 <mg_timer_expired+0x60>
 8018138:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801813c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018140:	1886      	adds	r6, r0, r2
 8018142:	603e      	str	r6, [r7, #0]
 8018144:	eb41 0303 	adc.w	r3, r1, r3
 8018148:	607b      	str	r3, [r7, #4]
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018150:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801815a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801815e:	4290      	cmp	r0, r2
 8018160:	eb71 0303 	sbcs.w	r3, r1, r3
 8018164:	d201      	bcs.n	801816a <mg_timer_expired+0x76>
 8018166:	2300      	movs	r3, #0
 8018168:	e022      	b.n	80181b0 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018170:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8018174:	ebb0 0802 	subs.w	r8, r0, r2
 8018178:	eb61 0903 	sbc.w	r9, r1, r3
 801817c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018180:	4542      	cmp	r2, r8
 8018182:	eb73 0309 	sbcs.w	r3, r3, r9
 8018186:	d207      	bcs.n	8018198 <mg_timer_expired+0xa4>
 8018188:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801818c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018190:	1884      	adds	r4, r0, r2
 8018192:	eb41 0503 	adc.w	r5, r1, r3
 8018196:	e007      	b.n	80181a8 <mg_timer_expired+0xb4>
 8018198:	697b      	ldr	r3, [r7, #20]
 801819a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801819e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80181a2:	1884      	adds	r4, r0, r2
 80181a4:	eb41 0503 	adc.w	r5, r1, r3
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80181ae:	2301      	movs	r3, #1
}
 80181b0:	4618      	mov	r0, r3
 80181b2:	3718      	adds	r7, #24
 80181b4:	46bd      	mov	sp, r7
 80181b6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80181ba:	4770      	bx	lr

080181bc <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80181bc:	b590      	push	{r4, r7, lr}
 80181be:	b08b      	sub	sp, #44	@ 0x2c
 80181c0:	af02      	add	r7, sp, #8
 80181c2:	60f8      	str	r0, [r7, #12]
 80181c4:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	61fb      	str	r3, [r7, #28]
 80181ce:	e067      	b.n	80182a0 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80181d0:	69fb      	ldr	r3, [r7, #28]
 80181d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80181d6:	4313      	orrs	r3, r2
 80181d8:	d10d      	bne.n	80181f6 <mg_timer_poll+0x3a>
 80181da:	69fb      	ldr	r3, [r7, #28]
 80181dc:	691b      	ldr	r3, [r3, #16]
 80181de:	f003 0302 	and.w	r3, r3, #2
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d007      	beq.n	80181f6 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	691b      	ldr	r3, [r3, #16]
 80181ea:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d101      	bne.n	80181f6 <mg_timer_poll+0x3a>
 80181f2:	2301      	movs	r3, #1
 80181f4:	e000      	b.n	80181f8 <mg_timer_poll+0x3c>
 80181f6:	2300      	movs	r3, #0
 80181f8:	76fb      	strb	r3, [r7, #27]
 80181fa:	7efb      	ldrb	r3, [r7, #27]
 80181fc:	f003 0301 	and.w	r3, r3, #1
 8018200:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8018202:	69fb      	ldr	r3, [r7, #28]
 8018204:	f103 0408 	add.w	r4, r3, #8
 8018208:	69fb      	ldr	r3, [r7, #28]
 801820a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801820e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018212:	e9cd 2300 	strd	r2, r3, [sp]
 8018216:	4602      	mov	r2, r0
 8018218:	460b      	mov	r3, r1
 801821a:	4620      	mov	r0, r4
 801821c:	f7ff ff6a 	bl	80180f4 <mg_timer_expired>
 8018220:	4603      	mov	r3, r0
 8018222:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8018224:	69fb      	ldr	r3, [r7, #28]
 8018226:	69db      	ldr	r3, [r3, #28]
 8018228:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 801822a:	7efb      	ldrb	r3, [r7, #27]
 801822c:	f083 0301 	eor.w	r3, r3, #1
 8018230:	b2db      	uxtb	r3, r3
 8018232:	2b00      	cmp	r3, #0
 8018234:	d005      	beq.n	8018242 <mg_timer_poll+0x86>
 8018236:	7ebb      	ldrb	r3, [r7, #26]
 8018238:	f083 0301 	eor.w	r3, r3, #1
 801823c:	b2db      	uxtb	r3, r3
 801823e:	2b00      	cmp	r3, #0
 8018240:	d12b      	bne.n	801829a <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8018242:	69fb      	ldr	r3, [r7, #28]
 8018244:	691b      	ldr	r3, [r3, #16]
 8018246:	f003 0301 	and.w	r3, r3, #1
 801824a:	2b00      	cmp	r3, #0
 801824c:	d105      	bne.n	801825a <mg_timer_poll+0x9e>
 801824e:	69fb      	ldr	r3, [r7, #28]
 8018250:	691b      	ldr	r3, [r3, #16]
 8018252:	f003 0304 	and.w	r3, r3, #4
 8018256:	2b00      	cmp	r3, #0
 8018258:	d105      	bne.n	8018266 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 801825a:	69fb      	ldr	r3, [r7, #28]
 801825c:	695b      	ldr	r3, [r3, #20]
 801825e:	69fa      	ldr	r2, [r7, #28]
 8018260:	6992      	ldr	r2, [r2, #24]
 8018262:	4610      	mov	r0, r2
 8018264:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8018266:	69fb      	ldr	r3, [r7, #28]
 8018268:	691b      	ldr	r3, [r3, #16]
 801826a:	f043 0204 	orr.w	r2, r3, #4
 801826e:	69fb      	ldr	r3, [r7, #28]
 8018270:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 8018272:	69fb      	ldr	r3, [r7, #28]
 8018274:	691b      	ldr	r3, [r3, #16]
 8018276:	f003 0301 	and.w	r3, r3, #1
 801827a:	2b00      	cmp	r3, #0
 801827c:	d10e      	bne.n	801829c <mg_timer_poll+0xe0>
 801827e:	69fb      	ldr	r3, [r7, #28]
 8018280:	691b      	ldr	r3, [r3, #16]
 8018282:	f003 0308 	and.w	r3, r3, #8
 8018286:	2b00      	cmp	r3, #0
 8018288:	d008      	beq.n	801829c <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 801828a:	69f9      	ldr	r1, [r7, #28]
 801828c:	68f8      	ldr	r0, [r7, #12]
 801828e:	f7ff ff10 	bl	80180b2 <mg_timer_free>
      free(t);
 8018292:	69f8      	ldr	r0, [r7, #28]
 8018294:	f00e fade 	bl	8026854 <free>
 8018298:	e000      	b.n	801829c <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 801829a:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	61fb      	str	r3, [r7, #28]
 80182a0:	69fb      	ldr	r3, [r7, #28]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d194      	bne.n	80181d0 <mg_timer_poll+0x14>
    }
  }
}
 80182a6:	bf00      	nop
 80182a8:	bf00      	nop
 80182aa:	3724      	adds	r7, #36	@ 0x24
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd90      	pop	{r4, r7, pc}

080182b0 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b086      	sub	sp, #24
 80182b4:	af02      	add	r7, sp, #8
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 80182bc:	4b0b      	ldr	r3, [pc, #44]	@ (80182ec <mg_tls_hexdump+0x3c>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	2b03      	cmp	r3, #3
 80182c2:	dd0e      	ble.n	80182e2 <mg_tls_hexdump+0x32>
 80182c4:	4b0a      	ldr	r3, [pc, #40]	@ (80182f0 <mg_tls_hexdump+0x40>)
 80182c6:	f642 22f0 	movw	r2, #10992	@ 0x2af0
 80182ca:	490a      	ldr	r1, [pc, #40]	@ (80182f4 <mg_tls_hexdump+0x44>)
 80182cc:	2004      	movs	r0, #4
 80182ce:	f7f7 fa39 	bl	800f744 <mg_log_prefix>
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	9300      	str	r3, [sp, #0]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	4a07      	ldr	r2, [pc, #28]	@ (80182f8 <mg_tls_hexdump+0x48>)
 80182da:	68f9      	ldr	r1, [r7, #12]
 80182dc:	4807      	ldr	r0, [pc, #28]	@ (80182fc <mg_tls_hexdump+0x4c>)
 80182de:	f7f7 fa81 	bl	800f7e4 <mg_log>
}
 80182e2:	bf00      	nop
 80182e4:	3710      	adds	r7, #16
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
 80182ea:	bf00      	nop
 80182ec:	2400025c 	.word	0x2400025c
 80182f0:	0803135c 	.word	0x0803135c
 80182f4:	0802d330 	.word	0x0802d330
 80182f8:	080143c1 	.word	0x080143c1
 80182fc:	0802ef28 	.word	0x0802ef28

08018300 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8018300:	b480      	push	{r7}
 8018302:	b089      	sub	sp, #36	@ 0x24
 8018304:	af00      	add	r7, sp, #0
 8018306:	60f8      	str	r0, [r7, #12]
 8018308:	60b9      	str	r1, [r7, #8]
 801830a:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 801830c:	2302      	movs	r3, #2
 801830e:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	2b01      	cmp	r3, #1
 8018314:	d903      	bls.n	801831e <mg_der_parse+0x1e>
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	3301      	adds	r3, #1
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	e000      	b.n	8018320 <mg_der_parse+0x20>
 801831e:	2300      	movs	r3, #0
 8018320:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	2b01      	cmp	r3, #1
 8018326:	d802      	bhi.n	801832e <mg_der_parse+0x2e>
 8018328:	f04f 33ff 	mov.w	r3, #4294967295
 801832c:	e042      	b.n	80183b4 <mg_der_parse+0xb4>
  tlv->type = der[0];
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	781a      	ldrb	r2, [r3, #0]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	2b7f      	cmp	r3, #127	@ 0x7f
 801833a:	d927      	bls.n	801838c <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	b2db      	uxtb	r3, r3
 8018340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018344:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 8018346:	7dbb      	ldrb	r3, [r7, #22]
 8018348:	3302      	adds	r3, #2
 801834a:	461a      	mov	r2, r3
 801834c:	68bb      	ldr	r3, [r7, #8]
 801834e:	4293      	cmp	r3, r2
 8018350:	d202      	bcs.n	8018358 <mg_der_parse+0x58>
 8018352:	f04f 33ff 	mov.w	r3, #4294967295
 8018356:	e02d      	b.n	80183b4 <mg_der_parse+0xb4>
    len = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 801835c:	2300      	movs	r3, #0
 801835e:	75fb      	strb	r3, [r7, #23]
 8018360:	e00c      	b.n	801837c <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 8018362:	69bb      	ldr	r3, [r7, #24]
 8018364:	021b      	lsls	r3, r3, #8
 8018366:	7dfa      	ldrb	r2, [r7, #23]
 8018368:	3202      	adds	r2, #2
 801836a:	4611      	mov	r1, r2
 801836c:	68fa      	ldr	r2, [r7, #12]
 801836e:	440a      	add	r2, r1
 8018370:	7812      	ldrb	r2, [r2, #0]
 8018372:	4313      	orrs	r3, r2
 8018374:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8018376:	7dfb      	ldrb	r3, [r7, #23]
 8018378:	3301      	adds	r3, #1
 801837a:	75fb      	strb	r3, [r7, #23]
 801837c:	7dfa      	ldrb	r2, [r7, #23]
 801837e:	7dbb      	ldrb	r3, [r7, #22]
 8018380:	429a      	cmp	r2, r3
 8018382:	d3ee      	bcc.n	8018362 <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 8018384:	7dbb      	ldrb	r3, [r7, #22]
 8018386:	69fa      	ldr	r2, [r7, #28]
 8018388:	4413      	add	r3, r2
 801838a:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 801838c:	69fa      	ldr	r2, [r7, #28]
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	4413      	add	r3, r2
 8018392:	68ba      	ldr	r2, [r7, #8]
 8018394:	429a      	cmp	r2, r3
 8018396:	d202      	bcs.n	801839e <mg_der_parse+0x9e>
 8018398:	f04f 33ff 	mov.w	r3, #4294967295
 801839c:	e00a      	b.n	80183b4 <mg_der_parse+0xb4>
  tlv->len = len;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	69ba      	ldr	r2, [r7, #24]
 80183a2:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 80183a4:	68fa      	ldr	r2, [r7, #12]
 80183a6:	69fb      	ldr	r3, [r7, #28]
 80183a8:	441a      	add	r2, r3
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 80183ae:	69fa      	ldr	r2, [r7, #28]
 80183b0:	69bb      	ldr	r3, [r7, #24]
 80183b2:	4413      	add	r3, r2
}
 80183b4:	4618      	mov	r0, r3
 80183b6:	3724      	adds	r7, #36	@ 0x24
 80183b8:	46bd      	mov	sp, r7
 80183ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183be:	4770      	bx	lr

080183c0 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b084      	sub	sp, #16
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
 80183c8:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	685b      	ldr	r3, [r3, #4]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d101      	bne.n	80183d6 <mg_der_next+0x16>
 80183d2:	2300      	movs	r3, #0
 80183d4:	e01b      	b.n	801840e <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6898      	ldr	r0, [r3, #8]
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	685b      	ldr	r3, [r3, #4]
 80183de:	683a      	ldr	r2, [r7, #0]
 80183e0:	4619      	mov	r1, r3
 80183e2:	f7ff ff8d 	bl	8018300 <mg_der_parse>
 80183e6:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	da02      	bge.n	80183f4 <mg_der_next+0x34>
 80183ee:	f04f 33ff 	mov.w	r3, #4294967295
 80183f2:	e00c      	b.n	801840e <mg_der_next+0x4e>
  parent->value += consumed;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	689a      	ldr	r2, [r3, #8]
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	441a      	add	r2, r3
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	685a      	ldr	r2, [r3, #4]
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	1ad2      	subs	r2, r2, r3
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	605a      	str	r2, [r3, #4]
  return 1;
 801840c:	2301      	movs	r3, #1
}
 801840e:	4618      	mov	r0, r3
 8018410:	3710      	adds	r7, #16
 8018412:	46bd      	mov	sp, r7
 8018414:	bd80      	pop	{r7, pc}

08018416 <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 8018416:	b580      	push	{r7, lr}
 8018418:	b08e      	sub	sp, #56	@ 0x38
 801841a:	af00      	add	r7, sp, #0
 801841c:	60f8      	str	r0, [r7, #12]
 801841e:	60b9      	str	r1, [r7, #8]
 8018420:	607a      	str	r2, [r7, #4]
 8018422:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 8018424:	68fa      	ldr	r2, [r7, #12]
 8018426:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801842a:	ca07      	ldmia	r2, {r0, r1, r2}
 801842c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8018430:	e031      	b.n	8018496 <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 8018432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018436:	2b06      	cmp	r3, #6
 8018438:	d114      	bne.n	8018464 <mg_der_find_oid+0x4e>
 801843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801843c:	687a      	ldr	r2, [r7, #4]
 801843e:	429a      	cmp	r2, r3
 8018440:	d110      	bne.n	8018464 <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 8018442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018444:	687a      	ldr	r2, [r7, #4]
 8018446:	68b9      	ldr	r1, [r7, #8]
 8018448:	4618      	mov	r0, r3
 801844a:	f010 f97f 	bl	802874c <memcmp>
 801844e:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8018450:	2b00      	cmp	r3, #0
 8018452:	d107      	bne.n	8018464 <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 8018454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018458:	6839      	ldr	r1, [r7, #0]
 801845a:	4618      	mov	r0, r3
 801845c:	f7ff ffb0 	bl	80183c0 <mg_der_next>
 8018460:	4603      	mov	r3, r0
 8018462:	e024      	b.n	80184ae <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 8018464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018468:	f003 0320 	and.w	r3, r3, #32
 801846c:	2b00      	cmp	r3, #0
 801846e:	d012      	beq.n	8018496 <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8018470:	f107 0314 	add.w	r3, r7, #20
 8018474:	f107 0220 	add.w	r2, r7, #32
 8018478:	ca07      	ldmia	r2, {r0, r1, r2}
 801847a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 801847e:	f107 0014 	add.w	r0, r7, #20
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	687a      	ldr	r2, [r7, #4]
 8018486:	68b9      	ldr	r1, [r7, #8]
 8018488:	f7ff ffc5 	bl	8018416 <mg_der_find_oid>
 801848c:	4603      	mov	r3, r0
 801848e:	2b00      	cmp	r3, #0
 8018490:	d001      	beq.n	8018496 <mg_der_find_oid+0x80>
 8018492:	2301      	movs	r3, #1
 8018494:	e00b      	b.n	80184ae <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 8018496:	f107 0220 	add.w	r2, r7, #32
 801849a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801849e:	4611      	mov	r1, r2
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7ff ff8d 	bl	80183c0 <mg_der_next>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	dcc2      	bgt.n	8018432 <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 80184ac:	2300      	movs	r3, #0
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3738      	adds	r7, #56	@ 0x38
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 80184b6:	b480      	push	{r7}
 80184b8:	b087      	sub	sp, #28
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	60f8      	str	r0, [r7, #12]
 80184be:	60b9      	str	r1, [r7, #8]
 80184c0:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	2b01      	cmp	r3, #1
 80184c6:	d802      	bhi.n	80184ce <mg_der_to_tlv+0x18>
    return -1;
 80184c8:	f04f 33ff 	mov.w	r3, #4294967295
 80184cc:	e041      	b.n	8018552 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	781a      	ldrb	r2, [r3, #0]
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	3301      	adds	r3, #1
 80184da:	781b      	ldrb	r3, [r3, #0]
 80184dc:	461a      	mov	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	1c9a      	adds	r2, r3, #2
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	685b      	ldr	r3, [r3, #4]
 80184ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80184f0:	d921      	bls.n	8018536 <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	3b80      	subs	r3, #128	@ 0x80
 80184f8:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2200      	movs	r2, #0
 80184fe:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8018500:	2300      	movs	r3, #0
 8018502:	617b      	str	r3, [r7, #20]
 8018504:	e00d      	b.n	8018522 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	685b      	ldr	r3, [r3, #4]
 801850a:	021b      	lsls	r3, r3, #8
 801850c:	697a      	ldr	r2, [r7, #20]
 801850e:	3202      	adds	r2, #2
 8018510:	68f9      	ldr	r1, [r7, #12]
 8018512:	440a      	add	r2, r1
 8018514:	7812      	ldrb	r2, [r2, #0]
 8018516:	431a      	orrs	r2, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 801851c:	697b      	ldr	r3, [r7, #20]
 801851e:	3301      	adds	r3, #1
 8018520:	617b      	str	r3, [r7, #20]
 8018522:	697a      	ldr	r2, [r7, #20]
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	429a      	cmp	r2, r3
 8018528:	d3ed      	bcc.n	8018506 <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	3302      	adds	r3, #2
 801852e:	68fa      	ldr	r2, [r7, #12]
 8018530:	441a      	add	r2, r3
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 8018536:	68fa      	ldr	r2, [r7, #12]
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	441a      	add	r2, r3
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6899      	ldr	r1, [r3, #8]
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	685b      	ldr	r3, [r3, #4]
 8018544:	440b      	add	r3, r1
 8018546:	429a      	cmp	r2, r3
 8018548:	d202      	bcs.n	8018550 <mg_der_to_tlv+0x9a>
    return -1;
 801854a:	f04f 33ff 	mov.w	r3, #4294967295
 801854e:	e000      	b.n	8018552 <mg_der_to_tlv+0x9c>
  }
  return 0;
 8018550:	2300      	movs	r3, #0
}
 8018552:	4618      	mov	r0, r3
 8018554:	371c      	adds	r7, #28
 8018556:	46bd      	mov	sp, r7
 8018558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855c:	4770      	bx	lr

0801855e <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 801855e:	b480      	push	{r7}
 8018560:	b083      	sub	sp, #12
 8018562:	af00      	add	r7, sp, #0
 8018564:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801856a:	2b04      	cmp	r3, #4
 801856c:	d915      	bls.n	801859a <mg_tls_got_record+0x3c>
         c->rtls.len >=
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8018576:	3203      	adds	r2, #3
 8018578:	7812      	ldrb	r2, [r2, #0]
 801857a:	b212      	sxth	r2, r2
 801857c:	0212      	lsls	r2, r2, #8
 801857e:	b211      	sxth	r1, r2
 8018580:	687a      	ldr	r2, [r7, #4]
 8018582:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8018584:	3204      	adds	r2, #4
 8018586:	7812      	ldrb	r2, [r2, #0]
 8018588:	b212      	sxth	r2, r2
 801858a:	430a      	orrs	r2, r1
 801858c:	b212      	sxth	r2, r2
 801858e:	b292      	uxth	r2, r2
 8018590:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8018592:	4293      	cmp	r3, r2
 8018594:	d301      	bcc.n	801859a <mg_tls_got_record+0x3c>
 8018596:	2301      	movs	r3, #1
 8018598:	e000      	b.n	801859c <mg_tls_got_record+0x3e>
 801859a:	2300      	movs	r3, #0
 801859c:	f003 0301 	and.w	r3, r3, #1
 80185a0:	b2db      	uxtb	r3, r3
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	370c      	adds	r7, #12
 80185a6:	46bd      	mov	sp, r7
 80185a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ac:	4770      	bx	lr

080185ae <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 80185ae:	b580      	push	{r7, lr}
 80185b0:	b084      	sub	sp, #16
 80185b2:	af00      	add	r7, sp, #0
 80185b4:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	3368      	adds	r3, #104	@ 0x68
 80185ba:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	3303      	adds	r3, #3
 80185c2:	781b      	ldrb	r3, [r3, #0]
 80185c4:	b21b      	sxth	r3, r3
 80185c6:	021b      	lsls	r3, r3, #8
 80185c8:	b21a      	sxth	r2, r3
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	3304      	adds	r3, #4
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	b21b      	sxth	r3, r3
 80185d4:	4313      	orrs	r3, r2
 80185d6:	b21b      	sxth	r3, r3
 80185d8:	b29b      	uxth	r3, r3
 80185da:	3305      	adds	r3, #5
 80185dc:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 80185de:	897b      	ldrh	r3, [r7, #10]
 80185e0:	461a      	mov	r2, r3
 80185e2:	2100      	movs	r1, #0
 80185e4:	68f8      	ldr	r0, [r7, #12]
 80185e6:	f7f6 f895 	bl	800e714 <mg_iobuf_del>
}
 80185ea:	bf00      	nop
 80185ec:	3710      	adds	r7, #16
 80185ee:	46bd      	mov	sp, r7
 80185f0:	bd80      	pop	{r7, pc}
	...

080185f4 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b086      	sub	sp, #24
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018602:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	695b      	ldr	r3, [r3, #20]
 801860c:	4413      	add	r3, r2
 801860e:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	699b      	ldr	r3, [r3, #24]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d033      	beq.n	8018680 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	3301      	adds	r3, #1
 801861c:	781b      	ldrb	r3, [r3, #0]
 801861e:	041a      	lsls	r2, r3, #16
 8018620:	693b      	ldr	r3, [r7, #16]
 8018622:	3302      	adds	r3, #2
 8018624:	781b      	ldrb	r3, [r3, #0]
 8018626:	021b      	lsls	r3, r3, #8
 8018628:	4313      	orrs	r3, r2
 801862a:	693a      	ldr	r2, [r7, #16]
 801862c:	3203      	adds	r2, #3
 801862e:	7812      	ldrb	r2, [r2, #0]
 8018630:	4313      	orrs	r3, r2
 8018632:	3304      	adds	r3, #4
 8018634:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	699b      	ldr	r3, [r3, #24]
 801863a:	68fa      	ldr	r2, [r7, #12]
 801863c:	429a      	cmp	r2, r3
 801863e:	d904      	bls.n	801864a <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 8018640:	4911      	ldr	r1, [pc, #68]	@ (8018688 <mg_tls_drop_message+0x94>)
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f7f1 f988 	bl	8009958 <mg_error>
    return;
 8018648:	e01b      	b.n	8018682 <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	3320      	adds	r3, #32
 801864e:	68fa      	ldr	r2, [r7, #12]
 8018650:	6939      	ldr	r1, [r7, #16]
 8018652:	4618      	mov	r0, r3
 8018654:	f7fd fdee 	bl	8016234 <mg_sha256_update>
  tls->recv_offset += len;
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	695a      	ldr	r2, [r3, #20]
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	441a      	add	r2, r3
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 8018664:	697b      	ldr	r3, [r7, #20]
 8018666:	699a      	ldr	r2, [r3, #24]
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	1ad2      	subs	r2, r2, r3
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	699b      	ldr	r3, [r3, #24]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d104      	bne.n	8018682 <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	f7ff ff98 	bl	80185ae <mg_tls_drop_record>
 801867e:	e000      	b.n	8018682 <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 8018680:	bf00      	nop
  }
}
 8018682:	3718      	adds	r7, #24
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}
 8018688:	0802ef30 	.word	0x0802ef30

0801868c <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 801868c:	b590      	push	{r4, r7, lr}
 801868e:	b0d1      	sub	sp, #324	@ 0x144
 8018690:	af02      	add	r7, sp, #8
 8018692:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8018696:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 801869a:	6020      	str	r0, [r4, #0]
 801869c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80186a0:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 80186a4:	6001      	str	r1, [r0, #0]
 80186a6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80186aa:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80186ae:	600a      	str	r2, [r1, #0]
 80186b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80186b4:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80186b8:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 80186ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80186be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80186c2:	6818      	ldr	r0, [r3, #0]
 80186c4:	f7e7 fe84 	bl	80003d0 <strlen>
 80186c8:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 80186cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80186d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186d4:	4618      	mov	r0, r3
 80186d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80186da:	461a      	mov	r2, r3
 80186dc:	2100      	movs	r1, #0
 80186de:	f010 f85f 	bl	80287a0 <memset>
 80186e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80186e6:	b2da      	uxtb	r2, r3
 80186e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80186ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80186f0:	705a      	strb	r2, [r3, #1]
 80186f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80186f6:	b2da      	uxtb	r2, r3
 80186f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80186fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018700:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 8018702:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018706:	2b00      	cmp	r3, #0
 8018708:	d00c      	beq.n	8018724 <mg_tls_derive_secret+0x98>
 801870a:	f107 0314 	add.w	r3, r7, #20
 801870e:	3303      	adds	r3, #3
 8018710:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018714:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8018718:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801871c:	6809      	ldr	r1, [r1, #0]
 801871e:	4618      	mov	r0, r3
 8018720:	f010 f824 	bl	802876c <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 8018724:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018728:	3303      	adds	r3, #3
 801872a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801872e:	b2d1      	uxtb	r1, r2
 8018730:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018734:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8018738:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 801873a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801873e:	2b00      	cmp	r3, #0
 8018740:	d00e      	beq.n	8018760 <mg_tls_derive_secret+0xd4>
 8018742:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8018746:	3304      	adds	r3, #4
 8018748:	f107 0214 	add.w	r2, r7, #20
 801874c:	18d0      	adds	r0, r2, r3
 801874e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8018752:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8018756:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801875a:	6819      	ldr	r1, [r3, #0]
 801875c:	f010 f806 	bl	802876c <memmove>
  packed[4 + labelsz + datasz] = 1;
 8018760:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8018764:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8018768:	4413      	add	r3, r2
 801876a:	3304      	adds	r3, #4
 801876c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8018770:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8018774:	2101      	movs	r1, #1
 8018776:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 8018778:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801877c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8018780:	4413      	add	r3, r2
 8018782:	3305      	adds	r3, #5
 8018784:	f107 0414 	add.w	r4, r7, #20
 8018788:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801878c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8018790:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8018794:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8018798:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 801879c:	9300      	str	r3, [sp, #0]
 801879e:	4623      	mov	r3, r4
 80187a0:	6812      	ldr	r2, [r2, #0]
 80187a2:	6809      	ldr	r1, [r1, #0]
 80187a4:	f7fd fed3 	bl	801654e <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 80187a8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80187ac:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80187b0:	4619      	mov	r1, r3
 80187b2:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80187b6:	f00f ffd9 	bl	802876c <memmove>
}
 80187ba:	bf00      	nop
 80187bc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd90      	pop	{r4, r7, pc}

080187c4 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b0cc      	sub	sp, #304	@ 0x130
 80187c8:	af04      	add	r7, sp, #16
 80187ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80187ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80187d2:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80187d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80187d8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80187e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 80187e6:	2320      	movs	r3, #32
 80187e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 80187ec:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80187f0:	2320      	movs	r3, #32
 80187f2:	9300      	str	r3, [sp, #0]
 80187f4:	4b89      	ldr	r3, [pc, #548]	@ (8018a1c <mg_tls_generate_handshake_keys+0x258>)
 80187f6:	2200      	movs	r2, #0
 80187f8:	2100      	movs	r1, #0
 80187fa:	f7fd fea8 	bl	801654e <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 80187fe:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8018802:	2320      	movs	r3, #32
 8018804:	9302      	str	r3, [sp, #8]
 8018806:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801880a:	9301      	str	r3, [sp, #4]
 801880c:	2320      	movs	r3, #32
 801880e:	9300      	str	r3, [sp, #0]
 8018810:	4b83      	ldr	r3, [pc, #524]	@ (8018a20 <mg_tls_generate_handshake_keys+0x25c>)
 8018812:	2220      	movs	r2, #32
 8018814:	4883      	ldr	r0, [pc, #524]	@ (8018a24 <mg_tls_generate_handshake_keys+0x260>)
 8018816:	f7ff ff39 	bl	801868c <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 801881a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801881e:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 8018822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018826:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8018828:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 801882c:	2220      	movs	r2, #32
 801882e:	9200      	str	r2, [sp, #0]
 8018830:	2220      	movs	r2, #32
 8018832:	f7fd fe8c 	bl	801654e <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 8018836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801883a:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 801883e:	2220      	movs	r2, #32
 8018840:	4619      	mov	r1, r3
 8018842:	4879      	ldr	r0, [pc, #484]	@ (8018a28 <mg_tls_generate_handshake_keys+0x264>)
 8018844:	f7ff fd34 	bl	80182b0 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8018848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801884c:	f103 0120 	add.w	r1, r3, #32
 8018850:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8018854:	2270      	movs	r2, #112	@ 0x70
 8018856:	4618      	mov	r0, r3
 8018858:	f00f ff88 	bl	802876c <memmove>
  mg_sha256_final(hello_hash, &sha256);
 801885c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8018860:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8018864:	4611      	mov	r1, r2
 8018866:	4618      	mov	r0, r3
 8018868:	f7fd fd1d 	bl	80162a6 <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 801886c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8018870:	2220      	movs	r2, #32
 8018872:	4619      	mov	r1, r3
 8018874:	486d      	ldr	r0, [pc, #436]	@ (8018a2c <mg_tls_generate_handshake_keys+0x268>)
 8018876:	f7ff fd1b 	bl	80182b0 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 801887a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801887e:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8018882:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8018886:	2320      	movs	r3, #32
 8018888:	9302      	str	r3, [sp, #8]
 801888a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801888e:	9301      	str	r3, [sp, #4]
 8018890:	2320      	movs	r3, #32
 8018892:	9300      	str	r3, [sp, #0]
 8018894:	4613      	mov	r3, r2
 8018896:	2220      	movs	r2, #32
 8018898:	4865      	ldr	r0, [pc, #404]	@ (8018a30 <mg_tls_generate_handshake_keys+0x26c>)
 801889a:	f7ff fef7 	bl	801868c <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 801889e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80188a2:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 80188a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80188aa:	2320      	movs	r3, #32
 80188ac:	9302      	str	r3, [sp, #8]
 80188ae:	f107 0308 	add.w	r3, r7, #8
 80188b2:	9301      	str	r3, [sp, #4]
 80188b4:	2320      	movs	r3, #32
 80188b6:	9300      	str	r3, [sp, #0]
 80188b8:	4613      	mov	r3, r2
 80188ba:	2220      	movs	r2, #32
 80188bc:	485d      	ldr	r0, [pc, #372]	@ (8018a34 <mg_tls_generate_handshake_keys+0x270>)
 80188be:	f7ff fee5 	bl	801868c <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 80188c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80188c6:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 80188ca:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80188ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80188d2:	9202      	str	r2, [sp, #8]
 80188d4:	9301      	str	r3, [sp, #4]
 80188d6:	2300      	movs	r3, #0
 80188d8:	9300      	str	r3, [sp, #0]
 80188da:	2300      	movs	r3, #0
 80188dc:	2220      	movs	r2, #32
 80188de:	4856      	ldr	r0, [pc, #344]	@ (8018a38 <mg_tls_generate_handshake_keys+0x274>)
 80188e0:	f7ff fed4 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 80188e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80188e8:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 80188ec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80188f0:	220c      	movs	r2, #12
 80188f2:	9202      	str	r2, [sp, #8]
 80188f4:	9301      	str	r3, [sp, #4]
 80188f6:	2300      	movs	r3, #0
 80188f8:	9300      	str	r3, [sp, #0]
 80188fa:	2300      	movs	r3, #0
 80188fc:	2220      	movs	r2, #32
 80188fe:	484f      	ldr	r0, [pc, #316]	@ (8018a3c <mg_tls_generate_handshake_keys+0x278>)
 8018900:	f7ff fec4 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8018904:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018908:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 801890c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8018910:	2220      	movs	r2, #32
 8018912:	9202      	str	r2, [sp, #8]
 8018914:	9301      	str	r3, [sp, #4]
 8018916:	2300      	movs	r3, #0
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	2300      	movs	r3, #0
 801891c:	2220      	movs	r2, #32
 801891e:	4848      	ldr	r0, [pc, #288]	@ (8018a40 <mg_tls_generate_handshake_keys+0x27c>)
 8018920:	f7ff feb4 	bl	801868c <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8018924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018928:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 801892c:	f107 0108 	add.w	r1, r7, #8
 8018930:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8018934:	9202      	str	r2, [sp, #8]
 8018936:	9301      	str	r3, [sp, #4]
 8018938:	2300      	movs	r3, #0
 801893a:	9300      	str	r3, [sp, #0]
 801893c:	2300      	movs	r3, #0
 801893e:	2220      	movs	r2, #32
 8018940:	483d      	ldr	r0, [pc, #244]	@ (8018a38 <mg_tls_generate_handshake_keys+0x274>)
 8018942:	f7ff fea3 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8018946:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801894a:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 801894e:	f107 0108 	add.w	r1, r7, #8
 8018952:	220c      	movs	r2, #12
 8018954:	9202      	str	r2, [sp, #8]
 8018956:	9301      	str	r3, [sp, #4]
 8018958:	2300      	movs	r3, #0
 801895a:	9300      	str	r3, [sp, #0]
 801895c:	2300      	movs	r3, #0
 801895e:	2220      	movs	r2, #32
 8018960:	4836      	ldr	r0, [pc, #216]	@ (8018a3c <mg_tls_generate_handshake_keys+0x278>)
 8018962:	f7ff fe93 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 8018966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801896a:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 801896e:	f107 0108 	add.w	r1, r7, #8
 8018972:	2220      	movs	r2, #32
 8018974:	9202      	str	r2, [sp, #8]
 8018976:	9301      	str	r3, [sp, #4]
 8018978:	2300      	movs	r3, #0
 801897a:	9300      	str	r3, [sp, #0]
 801897c:	2300      	movs	r3, #0
 801897e:	2220      	movs	r2, #32
 8018980:	482f      	ldr	r0, [pc, #188]	@ (8018a40 <mg_tls_generate_handshake_keys+0x27c>)
 8018982:	f7ff fe83 	bl	801868c <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8018986:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801898a:	2220      	movs	r2, #32
 801898c:	4619      	mov	r1, r3
 801898e:	482d      	ldr	r0, [pc, #180]	@ (8018a44 <mg_tls_generate_handshake_keys+0x280>)
 8018990:	f7ff fc8e 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8018994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018998:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 801899c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80189a0:	4619      	mov	r1, r3
 80189a2:	4829      	ldr	r0, [pc, #164]	@ (8018a48 <mg_tls_generate_handshake_keys+0x284>)
 80189a4:	f7ff fc84 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 80189a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80189ac:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 80189b0:	220c      	movs	r2, #12
 80189b2:	4619      	mov	r1, r3
 80189b4:	4825      	ldr	r0, [pc, #148]	@ (8018a4c <mg_tls_generate_handshake_keys+0x288>)
 80189b6:	f7ff fc7b 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 80189ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80189be:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 80189c2:	2220      	movs	r2, #32
 80189c4:	4619      	mov	r1, r3
 80189c6:	4822      	ldr	r0, [pc, #136]	@ (8018a50 <mg_tls_generate_handshake_keys+0x28c>)
 80189c8:	f7ff fc72 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 80189cc:	f107 0308 	add.w	r3, r7, #8
 80189d0:	2220      	movs	r2, #32
 80189d2:	4619      	mov	r1, r3
 80189d4:	481f      	ldr	r0, [pc, #124]	@ (8018a54 <mg_tls_generate_handshake_keys+0x290>)
 80189d6:	f7ff fc6b 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 80189da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80189de:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 80189e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80189e6:	4619      	mov	r1, r3
 80189e8:	481b      	ldr	r0, [pc, #108]	@ (8018a58 <mg_tls_generate_handshake_keys+0x294>)
 80189ea:	f7ff fc61 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 80189ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80189f2:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80189f6:	220c      	movs	r2, #12
 80189f8:	4619      	mov	r1, r3
 80189fa:	4818      	ldr	r0, [pc, #96]	@ (8018a5c <mg_tls_generate_handshake_keys+0x298>)
 80189fc:	f7ff fc58 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8018a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018a04:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8018a08:	2220      	movs	r2, #32
 8018a0a:	4619      	mov	r1, r3
 8018a0c:	4814      	ldr	r0, [pc, #80]	@ (8018a60 <mg_tls_generate_handshake_keys+0x29c>)
 8018a0e:	f7ff fc4f 	bl	80182b0 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 8018a12:	bf00      	nop
 8018a14:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	bd80      	pop	{r7, pc}
 8018a1c:	24019d70 	.word	0x24019d70
 8018a20:	24000284 	.word	0x24000284
 8018a24:	0802ef3c 	.word	0x0802ef3c
 8018a28:	0802ef4c 	.word	0x0802ef4c
 8018a2c:	0802ef58 	.word	0x0802ef58
 8018a30:	0802ef64 	.word	0x0802ef64
 8018a34:	0802ef78 	.word	0x0802ef78
 8018a38:	0802ef8c 	.word	0x0802ef8c
 8018a3c:	0802ef98 	.word	0x0802ef98
 8018a40:	0802efa4 	.word	0x0802efa4
 8018a44:	0802efb4 	.word	0x0802efb4
 8018a48:	0802efc4 	.word	0x0802efc4
 8018a4c:	0802efcc 	.word	0x0802efcc
 8018a50:	0802efd4 	.word	0x0802efd4
 8018a54:	0802efe0 	.word	0x0802efe0
 8018a58:	0802eff0 	.word	0x0802eff0
 8018a5c:	0802eff8 	.word	0x0802eff8
 8018a60:	0802f000 	.word	0x0802f000

08018a64 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b0cc      	sub	sp, #304	@ 0x130
 8018a68:	af04      	add	r7, sp, #16
 8018a6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8018a6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8018a72:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018a74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8018a78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018a82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8018a86:	2320      	movs	r3, #32
 8018a88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8018a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018a90:	f103 0120 	add.w	r1, r3, #32
 8018a94:	f107 0308 	add.w	r3, r7, #8
 8018a98:	2270      	movs	r2, #112	@ 0x70
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f00f fe66 	bl	802876c <memmove>
  mg_sha256_final(hash, &sha256);
 8018aa0:	f107 0208 	add.w	r2, r7, #8
 8018aa4:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8018aa8:	4611      	mov	r1, r2
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7fd fbfb 	bl	80162a6 <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8018ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018ab4:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8018ab8:	2320      	movs	r3, #32
 8018aba:	9302      	str	r3, [sp, #8]
 8018abc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8018ac0:	9301      	str	r3, [sp, #4]
 8018ac2:	2320      	movs	r3, #32
 8018ac4:	9300      	str	r3, [sp, #0]
 8018ac6:	4b64      	ldr	r3, [pc, #400]	@ (8018c58 <mg_tls_generate_application_keys+0x1f4>)
 8018ac8:	2220      	movs	r2, #32
 8018aca:	4864      	ldr	r0, [pc, #400]	@ (8018c5c <mg_tls_generate_application_keys+0x1f8>)
 8018acc:	f7ff fdde 	bl	801868c <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8018ad0:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8018ad4:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8018ad8:	2320      	movs	r3, #32
 8018ada:	9300      	str	r3, [sp, #0]
 8018adc:	4b60      	ldr	r3, [pc, #384]	@ (8018c60 <mg_tls_generate_application_keys+0x1fc>)
 8018ade:	2220      	movs	r2, #32
 8018ae0:	f7fd fd35 	bl	801654e <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8018ae4:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8018ae8:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8018aec:	2320      	movs	r3, #32
 8018aee:	9302      	str	r3, [sp, #8]
 8018af0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8018af4:	9301      	str	r3, [sp, #4]
 8018af6:	2320      	movs	r3, #32
 8018af8:	9300      	str	r3, [sp, #0]
 8018afa:	4613      	mov	r3, r2
 8018afc:	2220      	movs	r2, #32
 8018afe:	4859      	ldr	r0, [pc, #356]	@ (8018c64 <mg_tls_generate_application_keys+0x200>)
 8018b00:	f7ff fdc4 	bl	801868c <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8018b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018b08:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8018b0c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8018b10:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8018b14:	9202      	str	r2, [sp, #8]
 8018b16:	9301      	str	r3, [sp, #4]
 8018b18:	2300      	movs	r3, #0
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	2220      	movs	r2, #32
 8018b20:	4851      	ldr	r0, [pc, #324]	@ (8018c68 <mg_tls_generate_application_keys+0x204>)
 8018b22:	f7ff fdb3 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8018b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018b2a:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8018b2e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8018b32:	220c      	movs	r2, #12
 8018b34:	9202      	str	r2, [sp, #8]
 8018b36:	9301      	str	r3, [sp, #4]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	9300      	str	r3, [sp, #0]
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	2220      	movs	r2, #32
 8018b40:	484a      	ldr	r0, [pc, #296]	@ (8018c6c <mg_tls_generate_application_keys+0x208>)
 8018b42:	f7ff fda3 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 8018b46:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8018b4a:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8018b4e:	2320      	movs	r3, #32
 8018b50:	9302      	str	r3, [sp, #8]
 8018b52:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018b56:	9301      	str	r3, [sp, #4]
 8018b58:	2320      	movs	r3, #32
 8018b5a:	9300      	str	r3, [sp, #0]
 8018b5c:	4613      	mov	r3, r2
 8018b5e:	2220      	movs	r2, #32
 8018b60:	4843      	ldr	r0, [pc, #268]	@ (8018c70 <mg_tls_generate_application_keys+0x20c>)
 8018b62:	f7ff fd93 	bl	801868c <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8018b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018b6a:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8018b6e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8018b72:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8018b76:	9202      	str	r2, [sp, #8]
 8018b78:	9301      	str	r3, [sp, #4]
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	9300      	str	r3, [sp, #0]
 8018b7e:	2300      	movs	r3, #0
 8018b80:	2220      	movs	r2, #32
 8018b82:	4839      	ldr	r0, [pc, #228]	@ (8018c68 <mg_tls_generate_application_keys+0x204>)
 8018b84:	f7ff fd82 	bl	801868c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8018b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018b8c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8018b90:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8018b94:	220c      	movs	r2, #12
 8018b96:	9202      	str	r2, [sp, #8]
 8018b98:	9301      	str	r3, [sp, #4]
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	2220      	movs	r2, #32
 8018ba2:	4832      	ldr	r0, [pc, #200]	@ (8018c6c <mg_tls_generate_application_keys+0x208>)
 8018ba4:	f7ff fd72 	bl	801868c <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8018ba8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8018bac:	2220      	movs	r2, #32
 8018bae:	4619      	mov	r1, r3
 8018bb0:	4830      	ldr	r0, [pc, #192]	@ (8018c74 <mg_tls_generate_application_keys+0x210>)
 8018bb2:	f7ff fb7d 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8018bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018bba:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8018bbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8018bc2:	4619      	mov	r1, r3
 8018bc4:	482c      	ldr	r0, [pc, #176]	@ (8018c78 <mg_tls_generate_application_keys+0x214>)
 8018bc6:	f7ff fb73 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8018bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018bce:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8018bd2:	220c      	movs	r2, #12
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	4829      	ldr	r0, [pc, #164]	@ (8018c7c <mg_tls_generate_application_keys+0x218>)
 8018bd8:	f7ff fb6a 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8018bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018be0:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8018be4:	2220      	movs	r2, #32
 8018be6:	4619      	mov	r1, r3
 8018be8:	4825      	ldr	r0, [pc, #148]	@ (8018c80 <mg_tls_generate_application_keys+0x21c>)
 8018bea:	f7ff fb61 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8018bee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018bf2:	2220      	movs	r2, #32
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	4823      	ldr	r0, [pc, #140]	@ (8018c84 <mg_tls_generate_application_keys+0x220>)
 8018bf8:	f7ff fb5a 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8018bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018c00:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8018c04:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8018c08:	4619      	mov	r1, r3
 8018c0a:	481f      	ldr	r0, [pc, #124]	@ (8018c88 <mg_tls_generate_application_keys+0x224>)
 8018c0c:	f7ff fb50 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8018c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018c14:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8018c18:	220c      	movs	r2, #12
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	481b      	ldr	r0, [pc, #108]	@ (8018c8c <mg_tls_generate_application_keys+0x228>)
 8018c1e:	f7ff fb47 	bl	80182b0 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8018c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018c26:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8018c2a:	2220      	movs	r2, #32
 8018c2c:	4619      	mov	r1, r3
 8018c2e:	4818      	ldr	r0, [pc, #96]	@ (8018c90 <mg_tls_generate_application_keys+0x22c>)
 8018c30:	f7ff fb3e 	bl	80182b0 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 8018c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018c38:	2200      	movs	r2, #0
 8018c3a:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8018c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018c42:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8018c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018c4a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8018c4e:	bf00      	nop
 8018c50:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}
 8018c58:	24000284 	.word	0x24000284
 8018c5c:	0802ef3c 	.word	0x0802ef3c
 8018c60:	24019d70 	.word	0x24019d70
 8018c64:	0802f00c 	.word	0x0802f00c
 8018c68:	0802ef8c 	.word	0x0802ef8c
 8018c6c:	0802ef98 	.word	0x0802ef98
 8018c70:	0802f020 	.word	0x0802f020
 8018c74:	0802f034 	.word	0x0802f034
 8018c78:	0802efc4 	.word	0x0802efc4
 8018c7c:	0802efcc 	.word	0x0802efcc
 8018c80:	0802efd4 	.word	0x0802efd4
 8018c84:	0802f044 	.word	0x0802f044
 8018c88:	0802eff0 	.word	0x0802eff0
 8018c8c:	0802eff8 	.word	0x0802eff8
 8018c90:	0802f000 	.word	0x0802f000

08018c94 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b09a      	sub	sp, #104	@ 0x68
 8018c98:	af04      	add	r7, sp, #16
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	607a      	str	r2, [r7, #4]
 8018ca0:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018ca8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8018caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018cac:	3304      	adds	r3, #4
 8018cae:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	3311      	adds	r3, #17
 8018cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8018cb6:	2317      	movs	r3, #23
 8018cb8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8018cbc:	2303      	movs	r3, #3
 8018cbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8018cc2:	2303      	movs	r3, #3
 8018cc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8018cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018cca:	0a1b      	lsrs	r3, r3, #8
 8018ccc:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8018cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8018cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018cd4:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8018cd6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8018cda:	2317      	movs	r3, #23
 8018cdc:	773b      	strb	r3, [r7, #28]
 8018cde:	2303      	movs	r3, #3
 8018ce0:	777b      	strb	r3, [r7, #29]
 8018ce2:	2303      	movs	r3, #3
 8018ce4:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8018ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ce8:	0a1b      	lsrs	r3, r3, #8
 8018cea:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8018cec:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8018cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018cf0:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8018cf2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018cfc:	f003 0302 	and.w	r3, r3, #2
 8018d00:	b2db      	uxtb	r3, r3
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d003      	beq.n	8018d0e <mg_tls_encrypt+0x7a>
 8018d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d08:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8018d0c:	e002      	b.n	8018d14 <mg_tls_encrypt+0x80>
 8018d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d10:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8018d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018d1c:	f003 0302 	and.w	r3, r3, #2
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d003      	beq.n	8018d2e <mg_tls_encrypt+0x9a>
 8018d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d28:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8018d2c:	e002      	b.n	8018d34 <mg_tls_encrypt+0xa0>
 8018d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d30:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 8018d34:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018d3c:	f003 0302 	and.w	r3, r3, #2
 8018d40:	b2db      	uxtb	r3, r3
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d003      	beq.n	8018d4e <mg_tls_encrypt+0xba>
 8018d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d48:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8018d4c:	e002      	b.n	8018d54 <mg_tls_encrypt+0xc0>
 8018d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d50:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 8018d54:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8018d56:	f107 0310 	add.w	r3, r7, #16
 8018d5a:	220c      	movs	r2, #12
 8018d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f00f fd04 	bl	802876c <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8018d64:	7e3a      	ldrb	r2, [r7, #24]
 8018d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d68:	0e1b      	lsrs	r3, r3, #24
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	4053      	eors	r3, r2
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8018d72:	7e7a      	ldrb	r2, [r7, #25]
 8018d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d76:	0c1b      	lsrs	r3, r3, #16
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	4053      	eors	r3, r2
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8018d80:	7eba      	ldrb	r2, [r7, #26]
 8018d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d84:	0a1b      	lsrs	r3, r3, #8
 8018d86:	b2db      	uxtb	r3, r3
 8018d88:	4053      	eors	r3, r2
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8018d8e:	7efa      	ldrb	r2, [r7, #27]
 8018d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	4053      	eors	r3, r2
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8018d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d9c:	6899      	ldr	r1, [r3, #8]
 8018d9e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018da2:	2305      	movs	r3, #5
 8018da4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018da6:	f7f5 fc63 	bl	800e670 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8018daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dac:	689a      	ldr	r2, [r3, #8]
 8018dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018db0:	4413      	add	r3, r2
 8018db2:	4619      	mov	r1, r3
 8018db4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018db6:	f7f5 fbcf 	bl	800e558 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8018dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dbc:	681a      	ldr	r2, [r3, #0]
 8018dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dc0:	689b      	ldr	r3, [r3, #8]
 8018dc2:	4413      	add	r3, r2
 8018dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8018dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dc8:	681a      	ldr	r2, [r3, #0]
 8018dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dcc:	6899      	ldr	r1, [r3, #8]
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	440b      	add	r3, r1
 8018dd2:	3301      	adds	r3, #1
 8018dd4:	4413      	add	r3, r2
 8018dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018dde:	f00f fcc5 	bl	802876c <memmove>
  outmsg[msgsz] = msgtype;
 8018de2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	4413      	add	r3, r2
 8018de8:	78fa      	ldrb	r2, [r7, #3]
 8018dea:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8018dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018df0:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 8018df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018df4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8018df8:	4619      	mov	r1, r3
 8018dfa:	2001      	movs	r0, #1
 8018dfc:	f00d fd06 	bl	802680c <calloc>
 8018e00:	4603      	mov	r3, r0
 8018e02:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8018e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d104      	bne.n	8018e14 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8018e0a:	491f      	ldr	r1, [pc, #124]	@ (8018e88 <mg_tls_encrypt+0x1f4>)
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7f0 fda3 	bl	8009958 <mg_error>
 8018e12:	e035      	b.n	8018e80 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	3301      	adds	r3, #1
 8018e18:	f107 011c 	add.w	r1, r7, #28
 8018e1c:	f107 0210 	add.w	r2, r7, #16
 8018e20:	9302      	str	r3, [sp, #8]
 8018e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e24:	9301      	str	r3, [sp, #4]
 8018e26:	2305      	movs	r3, #5
 8018e28:	9300      	str	r3, [sp, #0]
 8018e2a:	460b      	mov	r3, r1
 8018e2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e30:	f005 fa61 	bl	801e2f6 <mg_chacha20_poly1305_encrypt>
 8018e34:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 8018e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018e38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018e3a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018e3c:	f00f fc96 	bl	802876c <memmove>
      free(enc);
 8018e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e42:	f00d fd07 	bl	8026854 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018e4c:	f003 0302 	and.w	r3, r3, #2
 8018e50:	b2db      	uxtb	r3, r3
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d007      	beq.n	8018e66 <mg_tls_encrypt+0x1d2>
 8018e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e58:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8018e5c:	1c5a      	adds	r2, r3, #1
 8018e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e60:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8018e64:	e006      	b.n	8018e74 <mg_tls_encrypt+0x1e0>
 8018e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e68:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8018e6c:	1c5a      	adds	r2, r3, #1
 8018e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e70:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 8018e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e76:	689a      	ldr	r2, [r3, #8]
 8018e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e7a:	441a      	add	r2, r3
 8018e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e7e:	609a      	str	r2, [r3, #8]
}
 8018e80:	3758      	adds	r7, #88	@ 0x58
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	0802f054 	.word	0x0802f054

08018e8c <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b092      	sub	sp, #72	@ 0x48
 8018e90:	af02      	add	r7, sp, #8
 8018e92:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	3368      	adds	r3, #104	@ 0x68
 8018ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018ea8:	f003 0302 	and.w	r3, r3, #2
 8018eac:	b2db      	uxtb	r3, r3
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d003      	beq.n	8018eba <mg_tls_recv_record+0x2e>
 8018eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018eb4:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8018eb8:	e002      	b.n	8018ec0 <mg_tls_recv_record+0x34>
 8018eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ebc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8018ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018ec8:	f003 0302 	and.w	r3, r3, #2
 8018ecc:	b2db      	uxtb	r3, r3
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d003      	beq.n	8018eda <mg_tls_recv_record+0x4e>
 8018ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ed4:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8018ed8:	e002      	b.n	8018ee0 <mg_tls_recv_record+0x54>
 8018eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018edc:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 8018ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018ee8:	f003 0302 	and.w	r3, r3, #2
 8018eec:	b2db      	uxtb	r3, r3
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d003      	beq.n	8018efa <mg_tls_recv_record+0x6e>
 8018ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ef4:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8018ef8:	e002      	b.n	8018f00 <mg_tls_recv_record+0x74>
 8018efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018efc:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8018f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8018f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f04:	699b      	ldr	r3, [r3, #24]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d001      	beq.n	8018f0e <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	e0c7      	b.n	801909e <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f7ff fb25 	bl	801855e <mg_tls_got_record>
 8018f14:	4603      	mov	r3, r0
 8018f16:	f083 0301 	eor.w	r3, r3, #1
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d002      	beq.n	8018f26 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8018f20:	f06f 0301 	mvn.w	r3, #1
 8018f24:	e0bb      	b.n	801909e <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 8018f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	781b      	ldrb	r3, [r3, #0]
 8018f2c:	2b17      	cmp	r3, #23
 8018f2e:	d026      	beq.n	8018f7e <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8018f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	2b14      	cmp	r3, #20
 8018f38:	d103      	bne.n	8018f42 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f7ff fb37 	bl	80185ae <mg_tls_drop_record>
 8018f40:	e7e5      	b.n	8018f0e <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 8018f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	781b      	ldrb	r3, [r3, #0]
 8018f48:	2b15      	cmp	r3, #21
 8018f4a:	d111      	bne.n	8018f70 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8018f4c:	4b56      	ldr	r3, [pc, #344]	@ (80190a8 <mg_tls_recv_record+0x21c>)
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	2b01      	cmp	r3, #1
 8018f52:	dd09      	ble.n	8018f68 <mg_tls_recv_record+0xdc>
 8018f54:	4b55      	ldr	r3, [pc, #340]	@ (80190ac <mg_tls_recv_record+0x220>)
 8018f56:	f642 424e 	movw	r2, #11342	@ 0x2c4e
 8018f5a:	4955      	ldr	r1, [pc, #340]	@ (80190b0 <mg_tls_recv_record+0x224>)
 8018f5c:	2002      	movs	r0, #2
 8018f5e:	f7f6 fbf1 	bl	800f744 <mg_log_prefix>
 8018f62:	4854      	ldr	r0, [pc, #336]	@ (80190b4 <mg_tls_recv_record+0x228>)
 8018f64:	f7f6 fc3e 	bl	800f7e4 <mg_log>
      mg_tls_drop_record(c);
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f7ff fb20 	bl	80185ae <mg_tls_drop_record>
 8018f6e:	e7ce      	b.n	8018f0e <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8018f70:	4951      	ldr	r1, [pc, #324]	@ (80190b8 <mg_tls_recv_record+0x22c>)
 8018f72:	6878      	ldr	r0, [r7, #4]
 8018f74:	f7f0 fcf0 	bl	8009958 <mg_error>
      return -1;
 8018f78:	f04f 33ff 	mov.w	r3, #4294967295
 8018f7c:	e08f      	b.n	801909e <mg_tls_recv_record+0x212>
      break;
 8018f7e:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8018f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	3303      	adds	r3, #3
 8018f86:	781b      	ldrb	r3, [r3, #0]
 8018f88:	b21b      	sxth	r3, r3
 8018f8a:	021b      	lsls	r3, r3, #8
 8018f8c:	b21a      	sxth	r2, r3
 8018f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	3304      	adds	r3, #4
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	b21b      	sxth	r3, r3
 8018f98:	4313      	orrs	r3, r2
 8018f9a:	b21b      	sxth	r3, r3
 8018f9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 8018f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	3305      	adds	r3, #5
 8018fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 8018fa6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018fa8:	2b0f      	cmp	r3, #15
 8018faa:	d806      	bhi.n	8018fba <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 8018fac:	4943      	ldr	r1, [pc, #268]	@ (80190bc <mg_tls_recv_record+0x230>)
 8018fae:	6878      	ldr	r0, [r7, #4]
 8018fb0:	f7f0 fcd2 	bl	8009958 <mg_error>
    return -1;
 8018fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8018fb8:	e071      	b.n	801909e <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 8018fba:	f107 030c 	add.w	r3, r7, #12
 8018fbe:	220c      	movs	r2, #12
 8018fc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f00f fbd2 	bl	802876c <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8018fc8:	7d3a      	ldrb	r2, [r7, #20]
 8018fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fcc:	0e1b      	lsrs	r3, r3, #24
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	4053      	eors	r3, r2
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8018fd6:	7d7a      	ldrb	r2, [r7, #21]
 8018fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fda:	0c1b      	lsrs	r3, r3, #16
 8018fdc:	b2db      	uxtb	r3, r3
 8018fde:	4053      	eors	r3, r2
 8018fe0:	b2db      	uxtb	r3, r3
 8018fe2:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8018fe4:	7dba      	ldrb	r2, [r7, #22]
 8018fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fe8:	0a1b      	lsrs	r3, r3, #8
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	4053      	eors	r3, r2
 8018fee:	b2db      	uxtb	r3, r3
 8018ff0:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8018ff2:	7dfa      	ldrb	r2, [r7, #23]
 8018ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	4053      	eors	r3, r2
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8018ffe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019000:	4619      	mov	r1, r3
 8019002:	2001      	movs	r0, #1
 8019004:	f00d fc02 	bl	802680c <calloc>
 8019008:	4603      	mov	r3, r0
 801900a:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 801900c:	6a3b      	ldr	r3, [r7, #32]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d106      	bne.n	8019020 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 8019012:	492b      	ldr	r1, [pc, #172]	@ (80190c0 <mg_tls_recv_record+0x234>)
 8019014:	6878      	ldr	r0, [r7, #4]
 8019016:	f7f0 fc9f 	bl	8009958 <mg_error>
      return -1;
 801901a:	f04f 33ff 	mov.w	r3, #4294967295
 801901e:	e03e      	b.n	801909e <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8019020:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019022:	f107 020c 	add.w	r2, r7, #12
 8019026:	9300      	str	r3, [sp, #0]
 8019028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801902a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801902c:	6a38      	ldr	r0, [r7, #32]
 801902e:	f005 f99a 	bl	801e366 <mg_chacha20_poly1305_decrypt>
 8019032:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 8019034:	69fa      	ldr	r2, [r7, #28]
 8019036:	6a39      	ldr	r1, [r7, #32]
 8019038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801903a:	f00f fb97 	bl	802876c <memmove>
    free(dec);
 801903e:	6a38      	ldr	r0, [r7, #32]
 8019040:	f00d fc08 	bl	8026854 <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 8019044:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019046:	3b11      	subs	r3, #17
 8019048:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 801904a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801904c:	3b11      	subs	r3, #17
 801904e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019050:	4413      	add	r3, r2
 8019052:	781a      	ldrb	r2, [r3, #0]
 8019054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019056:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 8019058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801905a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801905c:	6812      	ldr	r2, [r2, #0]
 801905e:	1a9a      	subs	r2, r3, r2
 8019060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019062:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 8019064:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019066:	f1a3 0211 	sub.w	r2, r3, #17
 801906a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801906c:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019074:	f003 0302 	and.w	r3, r3, #2
 8019078:	b2db      	uxtb	r3, r3
 801907a:	2b00      	cmp	r3, #0
 801907c:	d007      	beq.n	801908e <mg_tls_recv_record+0x202>
 801907e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019080:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8019084:	1c5a      	adds	r2, r3, #1
 8019086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019088:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 801908c:	e006      	b.n	801909c <mg_tls_recv_record+0x210>
 801908e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019090:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8019094:	1c5a      	adds	r2, r3, #1
 8019096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019098:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 801909c:	69bb      	ldr	r3, [r7, #24]
}
 801909e:	4618      	mov	r0, r3
 80190a0:	3740      	adds	r7, #64	@ 0x40
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd80      	pop	{r7, pc}
 80190a6:	bf00      	nop
 80190a8:	2400025c 	.word	0x2400025c
 80190ac:	0803136c 	.word	0x0803136c
 80190b0:	0802d330 	.word	0x0802d330
 80190b4:	0802f05c 	.word	0x0802f05c
 80190b8:	0802f078 	.word	0x0802f078
 80190bc:	0802ef30 	.word	0x0802ef30
 80190c0:	0802f054 	.word	0x0802f054

080190c4 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 80190c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190c6:	b0d5      	sub	sp, #340	@ 0x154
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80190ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80190d2:	6018      	str	r0, [r3, #0]
 80190d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80190d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80190dc:	6019      	str	r1, [r3, #0]
 80190de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80190e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80190e6:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80190e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80190ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80190f6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 80190fa:	4b41      	ldr	r3, [pc, #260]	@ (8019200 <mg_tls_calc_cert_verify_hash+0x13c>)
 80190fc:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8019100:	461d      	mov	r5, r3
 8019102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801910a:	682b      	ldr	r3, [r5, #0]
 801910c:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 801910e:	4b3d      	ldr	r3, [pc, #244]	@ (8019204 <mg_tls_calc_cert_verify_hash+0x140>)
 8019110:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8019114:	461d      	mov	r5, r3
 8019116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801911a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801911c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801911e:	682b      	ldr	r3, [r5, #0]
 8019120:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 8019122:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8019126:	2240      	movs	r2, #64	@ 0x40
 8019128:	2120      	movs	r1, #32
 801912a:	4618      	mov	r0, r3
 801912c:	f00f fb38 	bl	80287a0 <memset>
  if (is_client) {
 8019130:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8019134:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d018      	beq.n	8019170 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 801913e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8019142:	3340      	adds	r3, #64	@ 0x40
 8019144:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8019148:	469c      	mov	ip, r3
 801914a:	f104 0e20 	add.w	lr, r4, #32
 801914e:	4665      	mov	r5, ip
 8019150:	4626      	mov	r6, r4
 8019152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019154:	6028      	str	r0, [r5, #0]
 8019156:	6069      	str	r1, [r5, #4]
 8019158:	60aa      	str	r2, [r5, #8]
 801915a:	60eb      	str	r3, [r5, #12]
 801915c:	3410      	adds	r4, #16
 801915e:	f10c 0c10 	add.w	ip, ip, #16
 8019162:	4574      	cmp	r4, lr
 8019164:	d1f3      	bne.n	801914e <mg_tls_calc_cert_verify_hash+0x8a>
 8019166:	4662      	mov	r2, ip
 8019168:	4623      	mov	r3, r4
 801916a:	881b      	ldrh	r3, [r3, #0]
 801916c:	8013      	strh	r3, [r2, #0]
 801916e:	e017      	b.n	80191a0 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8019170:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8019174:	3340      	adds	r3, #64	@ 0x40
 8019176:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 801917a:	469c      	mov	ip, r3
 801917c:	f104 0e20 	add.w	lr, r4, #32
 8019180:	4665      	mov	r5, ip
 8019182:	4626      	mov	r6, r4
 8019184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019186:	6028      	str	r0, [r5, #0]
 8019188:	6069      	str	r1, [r5, #4]
 801918a:	60aa      	str	r2, [r5, #8]
 801918c:	60eb      	str	r3, [r5, #12]
 801918e:	3410      	adds	r4, #16
 8019190:	f10c 0c10 	add.w	ip, ip, #16
 8019194:	4574      	cmp	r4, lr
 8019196:	d1f3      	bne.n	8019180 <mg_tls_calc_cert_verify_hash+0xbc>
 8019198:	4662      	mov	r2, ip
 801919a:	4623      	mov	r3, r4
 801919c:	881b      	ldrh	r3, [r3, #0]
 801919e:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80191a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80191a4:	f103 0120 	add.w	r1, r3, #32
 80191a8:	f107 0310 	add.w	r3, r7, #16
 80191ac:	2270      	movs	r2, #112	@ 0x70
 80191ae:	4618      	mov	r0, r3
 80191b0:	f00f fadc 	bl	802876c <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 80191b4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80191b8:	3362      	adds	r3, #98	@ 0x62
 80191ba:	f107 0210 	add.w	r2, r7, #16
 80191be:	4611      	mov	r1, r2
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7fd f870 	bl	80162a6 <mg_sha256_final>

  mg_sha256_init(&sha256);
 80191c6:	f107 0310 	add.w	r3, r7, #16
 80191ca:	4618      	mov	r0, r3
 80191cc:	f7fc fdee 	bl	8015dac <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 80191d0:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80191d4:	f107 0310 	add.w	r3, r7, #16
 80191d8:	2282      	movs	r2, #130	@ 0x82
 80191da:	4618      	mov	r0, r3
 80191dc:	f7fd f82a 	bl	8016234 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 80191e0:	f107 0210 	add.w	r2, r7, #16
 80191e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80191e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80191ec:	4611      	mov	r1, r2
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	f7fd f859 	bl	80162a6 <mg_sha256_final>
}
 80191f4:	bf00      	nop
 80191f6:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191fe:	bf00      	nop
 8019200:	0802f08c 	.word	0x0802f08c
 8019204:	0802f0b0 	.word	0x0802f0b0

08019208 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8019208:	b580      	push	{r7, lr}
 801920a:	b08c      	sub	sp, #48	@ 0x30
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019216:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	3368      	adds	r3, #104	@ 0x68
 801921c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 801921e:	6878      	ldr	r0, [r7, #4]
 8019220:	f7ff f99d 	bl	801855e <mg_tls_got_record>
 8019224:	4603      	mov	r3, r0
 8019226:	f083 0301 	eor.w	r3, r3, #1
 801922a:	b2db      	uxtb	r3, r3
 801922c:	2b00      	cmp	r3, #0
 801922e:	d002      	beq.n	8019236 <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8019230:	f06f 0301 	mvn.w	r3, #1
 8019234:	e16d      	b.n	8019512 <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 8019236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	2b16      	cmp	r3, #22
 801923e:	d105      	bne.n	801924c <mg_tls_server_recv_hello+0x44>
 8019240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	3305      	adds	r3, #5
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	2b01      	cmp	r3, #1
 801924a:	d006      	beq.n	801925a <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 801924c:	4998      	ldr	r1, [pc, #608]	@ (80194b0 <mg_tls_server_recv_hello+0x2a8>)
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f7f0 fb82 	bl	8009958 <mg_error>
    return -1;
 8019254:	f04f 33ff 	mov.w	r3, #4294967295
 8019258:	e15b      	b.n	8019512 <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->len < 50) goto fail;
 801925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801925c:	689b      	ldr	r3, [r3, #8]
 801925e:	2b31      	cmp	r3, #49	@ 0x31
 8019260:	f240 8146 	bls.w	80194f0 <mg_tls_server_recv_hello+0x2e8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8019264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	3303      	adds	r3, #3
 801926a:	781b      	ldrb	r3, [r3, #0]
 801926c:	b21b      	sxth	r3, r3
 801926e:	021b      	lsls	r3, r3, #8
 8019270:	b21a      	sxth	r2, r3
 8019272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	3304      	adds	r3, #4
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	b21b      	sxth	r3, r3
 801927c:	4313      	orrs	r3, r2
 801927e:	b21b      	sxth	r3, r3
 8019280:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8019282:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019284:	1d1a      	adds	r2, r3, #4
 8019286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019288:	689b      	ldr	r3, [r3, #8]
 801928a:	429a      	cmp	r2, r3
 801928c:	f200 8132 	bhi.w	80194f4 <mg_tls_server_recv_hello+0x2ec>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8019290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019292:	f103 0020 	add.w	r0, r3, #32
 8019296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	3305      	adds	r3, #5
 801929c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801929e:	4619      	mov	r1, r3
 80192a0:	f7fc ffc8 	bl	8016234 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80192a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192a6:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80192aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	330b      	adds	r3, #11
 80192b0:	2220      	movs	r2, #32
 80192b2:	4619      	mov	r1, r3
 80192b4:	f00f fa5a 	bl	802876c <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80192b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80192c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80192c4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80192c8:	2b20      	cmp	r3, #32
 80192ca:	d10b      	bne.n	80192e4 <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 80192cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192ce:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80192d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	332c      	adds	r3, #44	@ 0x2c
 80192d8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80192dc:	4619      	mov	r1, r3
 80192de:	f00f fa45 	bl	802876c <memmove>
 80192e2:	e011      	b.n	8019308 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 80192e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d00d      	beq.n	8019308 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 80192ec:	4b71      	ldr	r3, [pc, #452]	@ (80194b4 <mg_tls_server_recv_hello+0x2ac>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2b01      	cmp	r3, #1
 80192f2:	dd09      	ble.n	8019308 <mg_tls_server_recv_hello+0x100>
 80192f4:	4b70      	ldr	r3, [pc, #448]	@ (80194b8 <mg_tls_server_recv_hello+0x2b0>)
 80192f6:	f642 42af 	movw	r2, #11439	@ 0x2caf
 80192fa:	4970      	ldr	r1, [pc, #448]	@ (80194bc <mg_tls_server_recv_hello+0x2b4>)
 80192fc:	2002      	movs	r0, #2
 80192fe:	f7f6 fa21 	bl	800f744 <mg_log_prefix>
 8019302:	486f      	ldr	r0, [pc, #444]	@ (80194c0 <mg_tls_server_recv_hello+0x2b8>)
 8019304:	f7f6 fa6e 	bl	800f7e4 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8019308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019310:	332c      	adds	r3, #44	@ 0x2c
 8019312:	4413      	add	r3, r2
 8019314:	781b      	ldrb	r3, [r3, #0]
 8019316:	b21b      	sxth	r3, r3
 8019318:	021b      	lsls	r3, r3, #8
 801931a:	b21a      	sxth	r2, r3
 801931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801931e:	6819      	ldr	r1, [r3, #0]
 8019320:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019324:	332d      	adds	r3, #45	@ 0x2d
 8019326:	440b      	add	r3, r1
 8019328:	781b      	ldrb	r3, [r3, #0]
 801932a:	b21b      	sxth	r3, r3
 801932c:	4313      	orrs	r3, r2
 801932e:	b21b      	sxth	r3, r3
 8019330:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 8019332:	8bfa      	ldrh	r2, [r7, #30]
 8019334:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019338:	4413      	add	r3, r2
 801933a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 801933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019340:	689b      	ldr	r3, [r3, #8]
 8019342:	429a      	cmp	r2, r3
 8019344:	f200 80d8 	bhi.w	80194f8 <mg_tls_server_recv_hello+0x2f0>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8019348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801934a:	681a      	ldr	r2, [r3, #0]
 801934c:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8019350:	8bfb      	ldrh	r3, [r7, #30]
 8019352:	440b      	add	r3, r1
 8019354:	3330      	adds	r3, #48	@ 0x30
 8019356:	4413      	add	r3, r2
 8019358:	781b      	ldrb	r3, [r3, #0]
 801935a:	b21b      	sxth	r3, r3
 801935c:	021b      	lsls	r3, r3, #8
 801935e:	b21a      	sxth	r2, r3
 8019360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019362:	6819      	ldr	r1, [r3, #0]
 8019364:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8019368:	8bfb      	ldrh	r3, [r7, #30]
 801936a:	4403      	add	r3, r0
 801936c:	3331      	adds	r3, #49	@ 0x31
 801936e:	440b      	add	r3, r1
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	b21b      	sxth	r3, r3
 8019374:	4313      	orrs	r3, r2
 8019376:	b21b      	sxth	r3, r3
 8019378:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 801937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801937c:	681a      	ldr	r2, [r3, #0]
 801937e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8019382:	8bfb      	ldrh	r3, [r7, #30]
 8019384:	440b      	add	r3, r1
 8019386:	3332      	adds	r3, #50	@ 0x32
 8019388:	4413      	add	r3, r2
 801938a:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 801938c:	8bbb      	ldrh	r3, [r7, #28]
 801938e:	69ba      	ldr	r2, [r7, #24]
 8019390:	441a      	add	r2, r3
 8019392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019394:	6819      	ldr	r1, [r3, #0]
 8019396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019398:	689b      	ldr	r3, [r3, #8]
 801939a:	440b      	add	r3, r1
 801939c:	429a      	cmp	r2, r3
 801939e:	f200 80ad 	bhi.w	80194fc <mg_tls_server_recv_hello+0x2f4>
  for (j = 0; j < ext_len;) {
 80193a2:	2300      	movs	r3, #0
 80193a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80193a6:	e09d      	b.n	80194e4 <mg_tls_server_recv_hello+0x2dc>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80193a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80193aa:	3302      	adds	r3, #2
 80193ac:	69ba      	ldr	r2, [r7, #24]
 80193ae:	4413      	add	r3, r2
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	b21b      	sxth	r3, r3
 80193b4:	021b      	lsls	r3, r3, #8
 80193b6:	b21a      	sxth	r2, r3
 80193b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80193ba:	3303      	adds	r3, #3
 80193bc:	69b9      	ldr	r1, [r7, #24]
 80193be:	440b      	add	r3, r1
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	b21b      	sxth	r3, r3
 80193c4:	4313      	orrs	r3, r2
 80193c6:	b21b      	sxth	r3, r3
 80193c8:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 80193ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80193cc:	69ba      	ldr	r2, [r7, #24]
 80193ce:	4413      	add	r3, r2
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	b21b      	sxth	r3, r3
 80193d4:	021b      	lsls	r3, r3, #8
 80193d6:	b21a      	sxth	r2, r3
 80193d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80193da:	3301      	adds	r3, #1
 80193dc:	69b9      	ldr	r1, [r7, #24]
 80193de:	440b      	add	r3, r1
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	b21b      	sxth	r3, r3
 80193e4:	4313      	orrs	r3, r2
 80193e6:	b21b      	sxth	r3, r3
 80193e8:	2b33      	cmp	r3, #51	@ 0x33
 80193ea:	d006      	beq.n	80193fa <mg_tls_server_recv_hello+0x1f2>
      j += (uint16_t) (n + 4);
 80193ec:	8afa      	ldrh	r2, [r7, #22]
 80193ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80193f0:	4413      	add	r3, r2
 80193f2:	b29b      	uxth	r3, r3
 80193f4:	3304      	adds	r3, #4
 80193f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 80193f8:	e074      	b.n	80194e4 <mg_tls_server_recv_hello+0x2dc>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 80193fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80193fc:	3304      	adds	r3, #4
 80193fe:	69ba      	ldr	r2, [r7, #24]
 8019400:	4413      	add	r3, r2
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	b21b      	sxth	r3, r3
 8019406:	021b      	lsls	r3, r3, #8
 8019408:	b21a      	sxth	r2, r3
 801940a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801940c:	3305      	adds	r3, #5
 801940e:	69b9      	ldr	r1, [r7, #24]
 8019410:	440b      	add	r3, r1
 8019412:	781b      	ldrb	r3, [r3, #0]
 8019414:	b21b      	sxth	r3, r3
 8019416:	4313      	orrs	r3, r2
 8019418:	b21b      	sxth	r3, r3
 801941a:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 801941c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801941e:	3306      	adds	r3, #6
 8019420:	69ba      	ldr	r2, [r7, #24]
 8019422:	4413      	add	r3, r2
 8019424:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 8019426:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801942c:	6809      	ldr	r1, [r1, #0]
 801942e:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8019430:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8019432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019434:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 8019436:	429a      	cmp	r2, r3
 8019438:	d862      	bhi.n	8019500 <mg_tls_server_recv_hello+0x2f8>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 801943a:	2300      	movs	r3, #0
 801943c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801943e:	e047      	b.n	80194d0 <mg_tls_server_recv_hello+0x2c8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8019440:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019442:	3302      	adds	r3, #2
 8019444:	693a      	ldr	r2, [r7, #16]
 8019446:	4413      	add	r3, r2
 8019448:	781b      	ldrb	r3, [r3, #0]
 801944a:	b21b      	sxth	r3, r3
 801944c:	021b      	lsls	r3, r3, #8
 801944e:	b21a      	sxth	r2, r3
 8019450:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019452:	3303      	adds	r3, #3
 8019454:	6939      	ldr	r1, [r7, #16]
 8019456:	440b      	add	r3, r1
 8019458:	781b      	ldrb	r3, [r3, #0]
 801945a:	b21b      	sxth	r3, r3
 801945c:	4313      	orrs	r3, r2
 801945e:	b21b      	sxth	r3, r3
 8019460:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8019462:	89fa      	ldrh	r2, [r7, #14]
 8019464:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019466:	4413      	add	r3, r2
 8019468:	1d1a      	adds	r2, r3, #4
 801946a:	8abb      	ldrh	r3, [r7, #20]
 801946c:	429a      	cmp	r2, r3
 801946e:	d849      	bhi.n	8019504 <mg_tls_server_recv_hello+0x2fc>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8019470:	89fb      	ldrh	r3, [r7, #14]
 8019472:	2b20      	cmp	r3, #32
 8019474:	d126      	bne.n	80194c4 <mg_tls_server_recv_hello+0x2bc>
 8019476:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019478:	693a      	ldr	r2, [r7, #16]
 801947a:	4413      	add	r3, r2
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d120      	bne.n	80194c4 <mg_tls_server_recv_hello+0x2bc>
 8019482:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019484:	3301      	adds	r3, #1
 8019486:	693a      	ldr	r2, [r7, #16]
 8019488:	4413      	add	r3, r2
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	2b1d      	cmp	r3, #29
 801948e:	d119      	bne.n	80194c4 <mg_tls_server_recv_hello+0x2bc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 8019490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019492:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8019496:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019498:	3304      	adds	r3, #4
 801949a:	693a      	ldr	r2, [r7, #16]
 801949c:	4413      	add	r3, r2
 801949e:	89fa      	ldrh	r2, [r7, #14]
 80194a0:	4619      	mov	r1, r3
 80194a2:	f00f f963 	bl	802876c <memmove>
        mg_tls_drop_record(c);
 80194a6:	6878      	ldr	r0, [r7, #4]
 80194a8:	f7ff f881 	bl	80185ae <mg_tls_drop_record>
        return 0;
 80194ac:	2300      	movs	r3, #0
 80194ae:	e030      	b.n	8019512 <mg_tls_server_recv_hello+0x30a>
 80194b0:	0802f0d4 	.word	0x0802f0d4
 80194b4:	2400025c 	.word	0x2400025c
 80194b8:	08031380 	.word	0x08031380
 80194bc:	0802d330 	.word	0x0802d330
 80194c0:	0802f0f0 	.word	0x0802f0f0
      }
      k += (uint16_t) (m + 4);
 80194c4:	89fa      	ldrh	r2, [r7, #14]
 80194c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80194c8:	4413      	add	r3, r2
 80194ca:	b29b      	uxth	r3, r3
 80194cc:	3304      	adds	r3, #4
 80194ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 80194d0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80194d2:	8abb      	ldrh	r3, [r7, #20]
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d3b3      	bcc.n	8019440 <mg_tls_server_recv_hello+0x238>
    }
    j += (uint16_t) (n + 4);
 80194d8:	8afa      	ldrh	r2, [r7, #22]
 80194da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80194dc:	4413      	add	r3, r2
 80194de:	b29b      	uxth	r3, r3
 80194e0:	3304      	adds	r3, #4
 80194e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 80194e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80194e6:	8bbb      	ldrh	r3, [r7, #28]
 80194e8:	429a      	cmp	r2, r3
 80194ea:	f4ff af5d 	bcc.w	80193a8 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 80194ee:	e00a      	b.n	8019506 <mg_tls_server_recv_hello+0x2fe>
  if (rio->len < 50) goto fail;
 80194f0:	bf00      	nop
 80194f2:	e008      	b.n	8019506 <mg_tls_server_recv_hello+0x2fe>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 80194f4:	bf00      	nop
 80194f6:	e006      	b.n	8019506 <mg_tls_server_recv_hello+0x2fe>
    goto fail;
 80194f8:	bf00      	nop
 80194fa:	e004      	b.n	8019506 <mg_tls_server_recv_hello+0x2fe>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 80194fc:	bf00      	nop
 80194fe:	e002      	b.n	8019506 <mg_tls_server_recv_hello+0x2fe>
      goto fail;
 8019500:	bf00      	nop
 8019502:	e000      	b.n	8019506 <mg_tls_server_recv_hello+0x2fe>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8019504:	bf00      	nop
  mg_error(c, "bad client hello");
 8019506:	4905      	ldr	r1, [pc, #20]	@ (801951c <mg_tls_server_recv_hello+0x314>)
 8019508:	6878      	ldr	r0, [r7, #4]
 801950a:	f7f0 fa25 	bl	8009958 <mg_error>
  return -1;
 801950e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019512:	4618      	mov	r0, r3
 8019514:	3730      	adds	r7, #48	@ 0x30
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}
 801951a:	bf00      	nop
 801951c:	0802f104 	.word	0x0802f104

08019520 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8019520:	b5b0      	push	{r4, r5, r7, lr}
 8019522:	b0b4      	sub	sp, #208	@ 0xd0
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801952e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8019532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019536:	3304      	adds	r3, #4
 8019538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 801953c:	4a4c      	ldr	r2, [pc, #304]	@ (8019670 <mg_tls_server_send_hello+0x150>)
 801953e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019542:	4611      	mov	r1, r2
 8019544:	227a      	movs	r2, #122	@ 0x7a
 8019546:	4618      	mov	r0, r3
 8019548:	f010 fb59 	bl	8029bfe <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 801954c:	f107 030c 	add.w	r3, r7, #12
 8019550:	2120      	movs	r1, #32
 8019552:	4618      	mov	r0, r3
 8019554:	f7e7 fb1e 	bl	8000b94 <mg_random>
 8019558:	4603      	mov	r3, r0
 801955a:	f083 0301 	eor.w	r3, r3, #1
 801955e:	b2db      	uxtb	r3, r3
 8019560:	2b00      	cmp	r3, #0
 8019562:	d003      	beq.n	801956c <mg_tls_server_send_hello+0x4c>
 8019564:	4943      	ldr	r1, [pc, #268]	@ (8019674 <mg_tls_server_send_hello+0x154>)
 8019566:	6878      	ldr	r0, [r7, #4]
 8019568:	f7f0 f9f6 	bl	8009958 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 801956c:	f107 010c 	add.w	r1, r7, #12
 8019570:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8019574:	2301      	movs	r3, #1
 8019576:	4a40      	ldr	r2, [pc, #256]	@ (8019678 <mg_tls_server_send_hello+0x158>)
 8019578:	f009 f872 	bl	8022660 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 801957c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019580:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8019584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019588:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 801958c:	f107 010c 	add.w	r1, r7, #12
 8019590:	2301      	movs	r3, #1
 8019592:	f009 f865 	bl	8022660 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 8019596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801959a:	33f0      	adds	r3, #240	@ 0xf0
 801959c:	2220      	movs	r2, #32
 801959e:	4619      	mov	r1, r3
 80195a0:	4836      	ldr	r0, [pc, #216]	@ (801967c <mg_tls_server_send_hello+0x15c>)
 80195a2:	f7fe fe85 	bl	80182b0 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 80195a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80195aa:	3306      	adds	r3, #6
 80195ac:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80195b0:	3290      	adds	r2, #144	@ 0x90
 80195b2:	6815      	ldr	r5, [r2, #0]
 80195b4:	6854      	ldr	r4, [r2, #4]
 80195b6:	6890      	ldr	r0, [r2, #8]
 80195b8:	68d1      	ldr	r1, [r2, #12]
 80195ba:	601d      	str	r5, [r3, #0]
 80195bc:	605c      	str	r4, [r3, #4]
 80195be:	6098      	str	r0, [r3, #8]
 80195c0:	60d9      	str	r1, [r3, #12]
 80195c2:	6915      	ldr	r5, [r2, #16]
 80195c4:	6954      	ldr	r4, [r2, #20]
 80195c6:	6990      	ldr	r0, [r2, #24]
 80195c8:	69d1      	ldr	r1, [r2, #28]
 80195ca:	611d      	str	r5, [r3, #16]
 80195cc:	615c      	str	r4, [r3, #20]
 80195ce:	6198      	str	r0, [r3, #24]
 80195d0:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 80195d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80195d6:	3327      	adds	r3, #39	@ 0x27
 80195d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80195dc:	32b0      	adds	r2, #176	@ 0xb0
 80195de:	6815      	ldr	r5, [r2, #0]
 80195e0:	6854      	ldr	r4, [r2, #4]
 80195e2:	6890      	ldr	r0, [r2, #8]
 80195e4:	68d1      	ldr	r1, [r2, #12]
 80195e6:	601d      	str	r5, [r3, #0]
 80195e8:	605c      	str	r4, [r3, #4]
 80195ea:	6098      	str	r0, [r3, #8]
 80195ec:	60d9      	str	r1, [r3, #12]
 80195ee:	6915      	ldr	r5, [r2, #16]
 80195f0:	6954      	ldr	r4, [r2, #20]
 80195f2:	6990      	ldr	r0, [r2, #24]
 80195f4:	69d1      	ldr	r1, [r2, #28]
 80195f6:	611d      	str	r5, [r3, #16]
 80195f8:	615c      	str	r4, [r3, #20]
 80195fa:	6198      	str	r0, [r3, #24]
 80195fc:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 80195fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019602:	3354      	adds	r3, #84	@ 0x54
 8019604:	461d      	mov	r5, r3
 8019606:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 801960a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801960c:	6028      	str	r0, [r5, #0]
 801960e:	6069      	str	r1, [r5, #4]
 8019610:	60aa      	str	r2, [r5, #8]
 8019612:	60eb      	str	r3, [r5, #12]
 8019614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019616:	6128      	str	r0, [r5, #16]
 8019618:	6169      	str	r1, [r5, #20]
 801961a:	61aa      	str	r2, [r5, #24]
 801961c:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 801961e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8019622:	6899      	ldr	r1, [r3, #8]
 8019624:	2305      	movs	r3, #5
 8019626:	4a16      	ldr	r2, [pc, #88]	@ (8019680 <mg_tls_server_send_hello+0x160>)
 8019628:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 801962c:	f7f5 f820 	bl	800e670 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8019630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8019634:	6899      	ldr	r1, [r3, #8]
 8019636:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801963a:	237a      	movs	r3, #122	@ 0x7a
 801963c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8019640:	f7f5 f816 	bl	800e670 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8019644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019648:	3320      	adds	r3, #32
 801964a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801964e:	227a      	movs	r2, #122	@ 0x7a
 8019650:	4618      	mov	r0, r3
 8019652:	f7fc fdef 	bl	8016234 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8019656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801965a:	6899      	ldr	r1, [r3, #8]
 801965c:	2306      	movs	r3, #6
 801965e:	4a09      	ldr	r2, [pc, #36]	@ (8019684 <mg_tls_server_send_hello+0x164>)
 8019660:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8019664:	f7f5 f804 	bl	800e670 <mg_iobuf_add>
}
 8019668:	bf00      	nop
 801966a:	37d0      	adds	r7, #208	@ 0xd0
 801966c:	46bd      	mov	sp, r7
 801966e:	bdb0      	pop	{r4, r5, r7, pc}
 8019670:	0802f13c 	.word	0x0802f13c
 8019674:	0802f118 	.word	0x0802f118
 8019678:	080310dc 	.word	0x080310dc
 801967c:	0802f11c 	.word	0x0802f11c
 8019680:	0802f12c 	.word	0x0802f12c
 8019684:	0802f134 	.word	0x0802f134

08019688 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8019688:	b580      	push	{r7, lr}
 801968a:	b086      	sub	sp, #24
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019696:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8019698:	4b0b      	ldr	r3, [pc, #44]	@ (80196c8 <mg_tls_server_send_ext+0x40>)
 801969a:	60fb      	str	r3, [r7, #12]
 801969c:	2300      	movs	r3, #0
 801969e:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	3320      	adds	r3, #32
 80196a4:	f107 010c 	add.w	r1, r7, #12
 80196a8:	2206      	movs	r2, #6
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7fc fdc2 	bl	8016234 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 80196b0:	f107 010c 	add.w	r1, r7, #12
 80196b4:	2316      	movs	r3, #22
 80196b6:	2206      	movs	r2, #6
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	f7ff faeb 	bl	8018c94 <mg_tls_encrypt>
}
 80196be:	bf00      	nop
 80196c0:	3718      	adds	r7, #24
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	02000008 	.word	0x02000008

080196cc <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b088      	sub	sp, #32
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80196da:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80196e2:	f003 0302 	and.w	r3, r3, #2
 80196e6:	b2db      	uxtb	r3, r3
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d106      	bne.n	80196fa <mg_tls_server_send_cert+0x2e>
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d001      	beq.n	80196fa <mg_tls_server_send_cert+0x2e>
 80196f6:	2301      	movs	r3, #1
 80196f8:	e000      	b.n	80196fc <mg_tls_server_send_cert+0x30>
 80196fa:	2300      	movs	r3, #0
 80196fc:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 80196fe:	69fb      	ldr	r3, [r7, #28]
 8019700:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8019704:	69bb      	ldr	r3, [r7, #24]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d004      	beq.n	8019714 <mg_tls_server_send_cert+0x48>
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8019710:	3305      	adds	r3, #5
 8019712:	e000      	b.n	8019716 <mg_tls_server_send_cert+0x4a>
 8019714:	2300      	movs	r3, #0
 8019716:	4413      	add	r3, r2
 8019718:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 801971a:	697b      	ldr	r3, [r7, #20]
 801971c:	330d      	adds	r3, #13
 801971e:	4619      	mov	r1, r3
 8019720:	2001      	movs	r0, #1
 8019722:	f00d f873 	bl	802680c <calloc>
 8019726:	4603      	mov	r3, r0
 8019728:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 801972a:	693b      	ldr	r3, [r7, #16]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d104      	bne.n	801973a <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 8019730:	495e      	ldr	r1, [pc, #376]	@ (80198ac <mg_tls_server_send_cert+0x1e0>)
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f7f0 f910 	bl	8009958 <mg_error>
    return;
 8019738:	e0b4      	b.n	80198a4 <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 801973a:	693b      	ldr	r3, [r7, #16]
 801973c:	220b      	movs	r2, #11
 801973e:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	3309      	adds	r3, #9
 8019744:	0c1a      	lsrs	r2, r3, #16
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	3301      	adds	r3, #1
 801974a:	b2d2      	uxtb	r2, r2
 801974c:	701a      	strb	r2, [r3, #0]
 801974e:	697b      	ldr	r3, [r7, #20]
 8019750:	3309      	adds	r3, #9
 8019752:	0a1a      	lsrs	r2, r3, #8
 8019754:	693b      	ldr	r3, [r7, #16]
 8019756:	3302      	adds	r3, #2
 8019758:	b2d2      	uxtb	r2, r2
 801975a:	701a      	strb	r2, [r3, #0]
 801975c:	697b      	ldr	r3, [r7, #20]
 801975e:	b2da      	uxtb	r2, r3
 8019760:	693b      	ldr	r3, [r7, #16]
 8019762:	3303      	adds	r3, #3
 8019764:	3209      	adds	r2, #9
 8019766:	b2d2      	uxtb	r2, r2
 8019768:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 801976a:	693b      	ldr	r3, [r7, #16]
 801976c:	3304      	adds	r3, #4
 801976e:	2200      	movs	r2, #0
 8019770:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 8019772:	697b      	ldr	r3, [r7, #20]
 8019774:	3305      	adds	r3, #5
 8019776:	0c1a      	lsrs	r2, r3, #16
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	3305      	adds	r3, #5
 801977c:	b2d2      	uxtb	r2, r2
 801977e:	701a      	strb	r2, [r3, #0]
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	3305      	adds	r3, #5
 8019784:	0a1a      	lsrs	r2, r3, #8
 8019786:	693b      	ldr	r3, [r7, #16]
 8019788:	3306      	adds	r3, #6
 801978a:	b2d2      	uxtb	r2, r2
 801978c:	701a      	strb	r2, [r3, #0]
 801978e:	697b      	ldr	r3, [r7, #20]
 8019790:	b2da      	uxtb	r2, r3
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	3307      	adds	r3, #7
 8019796:	3205      	adds	r2, #5
 8019798:	b2d2      	uxtb	r2, r2
 801979a:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 801979c:	69fb      	ldr	r3, [r7, #28]
 801979e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80197a2:	0c1a      	lsrs	r2, r3, #16
 80197a4:	693b      	ldr	r3, [r7, #16]
 80197a6:	3308      	adds	r3, #8
 80197a8:	b2d2      	uxtb	r2, r2
 80197aa:	701a      	strb	r2, [r3, #0]
 80197ac:	69fb      	ldr	r3, [r7, #28]
 80197ae:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80197b2:	0a1a      	lsrs	r2, r3, #8
 80197b4:	693b      	ldr	r3, [r7, #16]
 80197b6:	3309      	adds	r3, #9
 80197b8:	b2d2      	uxtb	r2, r2
 80197ba:	701a      	strb	r2, [r3, #0]
 80197bc:	69fb      	ldr	r3, [r7, #28]
 80197be:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80197c2:	693b      	ldr	r3, [r7, #16]
 80197c4:	330a      	adds	r3, #10
 80197c6:	b2d2      	uxtb	r2, r2
 80197c8:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 80197ca:	693b      	ldr	r3, [r7, #16]
 80197cc:	f103 000b 	add.w	r0, r3, #11
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80197d6:	69fb      	ldr	r3, [r7, #28]
 80197d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80197dc:	461a      	mov	r2, r3
 80197de:	f00e ffc5 	bl	802876c <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 80197e2:	69fb      	ldr	r3, [r7, #28]
 80197e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80197e8:	330b      	adds	r3, #11
 80197ea:	693a      	ldr	r2, [r7, #16]
 80197ec:	4413      	add	r3, r2
 80197ee:	2200      	movs	r2, #0
 80197f0:	701a      	strb	r2, [r3, #0]
 80197f2:	69fb      	ldr	r3, [r7, #28]
 80197f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80197f8:	330c      	adds	r3, #12
 80197fa:	693a      	ldr	r2, [r7, #16]
 80197fc:	4413      	add	r3, r2
 80197fe:	2200      	movs	r2, #0
 8019800:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 8019802:	69bb      	ldr	r3, [r7, #24]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d039      	beq.n	801987c <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 8019808:	69fb      	ldr	r3, [r7, #28]
 801980a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801980e:	330d      	adds	r3, #13
 8019810:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8019818:	0c19      	lsrs	r1, r3, #16
 801981a:	693a      	ldr	r2, [r7, #16]
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	4413      	add	r3, r2
 8019820:	b2ca      	uxtb	r2, r1
 8019822:	701a      	strb	r2, [r3, #0]
 8019824:	69fb      	ldr	r3, [r7, #28]
 8019826:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801982a:	0a19      	lsrs	r1, r3, #8
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	3301      	adds	r3, #1
 8019830:	693a      	ldr	r2, [r7, #16]
 8019832:	4413      	add	r3, r2
 8019834:	b2ca      	uxtb	r2, r1
 8019836:	701a      	strb	r2, [r3, #0]
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	3302      	adds	r3, #2
 8019842:	693a      	ldr	r2, [r7, #16]
 8019844:	4413      	add	r3, r2
 8019846:	b2ca      	uxtb	r2, r1
 8019848:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	3303      	adds	r3, #3
 801984e:	693a      	ldr	r2, [r7, #16]
 8019850:	18d0      	adds	r0, r2, r3
 8019852:	69fb      	ldr	r3, [r7, #28]
 8019854:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 8019858:	69fb      	ldr	r3, [r7, #28]
 801985a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801985e:	461a      	mov	r2, r3
 8019860:	f00e ff84 	bl	802876c <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	330b      	adds	r3, #11
 8019868:	693a      	ldr	r2, [r7, #16]
 801986a:	4413      	add	r3, r2
 801986c:	2200      	movs	r2, #0
 801986e:	701a      	strb	r2, [r3, #0]
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	330c      	adds	r3, #12
 8019874:	693a      	ldr	r2, [r7, #16]
 8019876:	4413      	add	r3, r2
 8019878:	2200      	movs	r2, #0
 801987a:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 801987c:	69fb      	ldr	r3, [r7, #28]
 801987e:	f103 0020 	add.w	r0, r3, #32
 8019882:	697b      	ldr	r3, [r7, #20]
 8019884:	330d      	adds	r3, #13
 8019886:	461a      	mov	r2, r3
 8019888:	6939      	ldr	r1, [r7, #16]
 801988a:	f7fc fcd3 	bl	8016234 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 801988e:	697b      	ldr	r3, [r7, #20]
 8019890:	f103 020d 	add.w	r2, r3, #13
 8019894:	2316      	movs	r3, #22
 8019896:	6939      	ldr	r1, [r7, #16]
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f7ff f9fb 	bl	8018c94 <mg_tls_encrypt>
  free(cert);
 801989e:	6938      	ldr	r0, [r7, #16]
 80198a0:	f00c ffd8 	bl	8026854 <free>
}
 80198a4:	3720      	adds	r7, #32
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}
 80198aa:	bf00      	nop
 80198ac:	0802f1b8 	.word	0x0802f1b8

080198b0 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 80198b0:	b580      	push	{r7, lr}
 80198b2:	b084      	sub	sp, #16
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	3318      	adds	r3, #24
 80198c0:	4618      	mov	r0, r3
 80198c2:	f7fc fa73 	bl	8015dac <mg_sha256_init>
}
 80198c6:	bf00      	nop
 80198c8:	3710      	adds	r7, #16
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}

080198ce <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 80198ce:	b580      	push	{r7, lr}
 80198d0:	b086      	sub	sp, #24
 80198d2:	af00      	add	r7, sp, #0
 80198d4:	60f8      	str	r0, [r7, #12]
 80198d6:	60b9      	str	r1, [r7, #8]
 80198d8:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 80198de:	697b      	ldr	r3, [r7, #20]
 80198e0:	3318      	adds	r3, #24
 80198e2:	687a      	ldr	r2, [r7, #4]
 80198e4:	68b9      	ldr	r1, [r7, #8]
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7fc fca4 	bl	8016234 <mg_sha256_update>
}
 80198ec:	bf00      	nop
 80198ee:	3718      	adds	r7, #24
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}

080198f4 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b084      	sub	sp, #16
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
 80198fc:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	3318      	adds	r3, #24
 8019906:	4619      	mov	r1, r3
 8019908:	6838      	ldr	r0, [r7, #0]
 801990a:	f7fc fccc 	bl	80162a6 <mg_sha256_final>
}
 801990e:	bf00      	nop
 8019910:	3710      	adds	r7, #16
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}
	...

08019918 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 8019918:	b590      	push	{r4, r7, lr}
 801991a:	b0f9      	sub	sp, #484	@ 0x1e4
 801991c:	af02      	add	r7, sp, #8
 801991e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019922:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8019926:	6018      	str	r0, [r3, #0]
 8019928:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801992c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8019930:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019932:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019936:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019940:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8019944:	4a8a      	ldr	r2, [pc, #552]	@ (8019b70 <mg_tls_send_cert_verify+0x258>)
 8019946:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 801994a:	6810      	ldr	r0, [r2, #0]
 801994c:	6851      	ldr	r1, [r2, #4]
 801994e:	c303      	stmia	r3!, {r0, r1}
 8019950:	7a12      	ldrb	r2, [r2, #8]
 8019952:	701a      	strb	r2, [r3, #0]
 8019954:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8019958:	2249      	movs	r2, #73	@ 0x49
 801995a:	2100      	movs	r1, #0
 801995c:	4618      	mov	r0, r3
 801995e:	f00e ff1f 	bl	80287a0 <memset>
  size_t sigsz, verifysz = 0;
 8019962:	2300      	movs	r3, #0
 8019964:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8019968:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801996c:	2220      	movs	r2, #32
 801996e:	2100      	movs	r1, #0
 8019970:	4618      	mov	r0, r3
 8019972:	f00e ff15 	bl	80287a0 <memset>
 8019976:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801997a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801997e:	4618      	mov	r0, r3
 8019980:	2380      	movs	r3, #128	@ 0x80
 8019982:	461a      	mov	r2, r3
 8019984:	2100      	movs	r1, #0
 8019986:	f00e ff0b 	bl	80287a0 <memset>
  struct SHA256_HashContext ctx = {
 801998a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801998e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019992:	4618      	mov	r0, r3
 8019994:	2388      	movs	r3, #136	@ 0x88
 8019996:	461a      	mov	r2, r3
 8019998:	2100      	movs	r1, #0
 801999a:	f00e ff01 	bl	80287a0 <memset>
 801999e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80199a6:	4a73      	ldr	r2, [pc, #460]	@ (8019b74 <mg_tls_send_cert_verify+0x25c>)
 80199a8:	601a      	str	r2, [r3, #0]
 80199aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80199b2:	4a71      	ldr	r2, [pc, #452]	@ (8019b78 <mg_tls_send_cert_verify+0x260>)
 80199b4:	605a      	str	r2, [r3, #4]
 80199b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80199be:	4a6f      	ldr	r2, [pc, #444]	@ (8019b7c <mg_tls_send_cert_verify+0x264>)
 80199c0:	609a      	str	r2, [r3, #8]
 80199c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80199ca:	2240      	movs	r2, #64	@ 0x40
 80199cc:	60da      	str	r2, [r3, #12]
 80199ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80199d6:	2220      	movs	r2, #32
 80199d8:	611a      	str	r2, [r3, #16]
 80199da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80199e2:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80199e6:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 80199e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80199ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80199f0:	4618      	mov	r0, r3
 80199f2:	2340      	movs	r3, #64	@ 0x40
 80199f4:	461a      	mov	r2, r3
 80199f6:	2100      	movs	r1, #0
 80199f8:	f00e fed2 	bl	80287a0 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 80199fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019a00:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8019a04:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8019a08:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019a0c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8019a10:	6812      	ldr	r2, [r2, #0]
 8019a12:	6818      	ldr	r0, [r3, #0]
 8019a14:	f7ff fb56 	bl	80190c4 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8019a18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8019a1c:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 8019a20:	f006 fdca 	bl	80205b8 <mg_uecc_secp256r1>
 8019a24:	4603      	mov	r3, r0
 8019a26:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8019a2a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8019a2e:	9301      	str	r3, [sp, #4]
 8019a30:	f107 0308 	add.w	r3, r7, #8
 8019a34:	9300      	str	r3, [sp, #0]
 8019a36:	4613      	mov	r3, r2
 8019a38:	2220      	movs	r2, #32
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	f007 fe2c 	bl	8021698 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8019a40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019a44:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8019a48:	781b      	ldrb	r3, [r3, #0]
 8019a4a:	b25b      	sxtb	r3, r3
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	09db      	lsrs	r3, r3, #7
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 8019a56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019a5a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8019a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019a62:	b25b      	sxtb	r3, r3
 8019a64:	b2db      	uxtb	r3, r3
 8019a66:	09db      	lsrs	r3, r3, #7
 8019a68:	b2db      	uxtb	r3, r3
 8019a6a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8019a6e:	2330      	movs	r3, #48	@ 0x30
 8019a70:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8019a74:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8019a78:	b2da      	uxtb	r2, r3
 8019a7a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8019a7e:	b2db      	uxtb	r3, r3
 8019a80:	4413      	add	r3, r2
 8019a82:	b2db      	uxtb	r3, r3
 8019a84:	3344      	adds	r3, #68	@ 0x44
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8019a8c:	2302      	movs	r3, #2
 8019a8e:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8019a92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8019a96:	b2db      	uxtb	r3, r3
 8019a98:	3320      	adds	r3, #32
 8019a9a:	b2db      	uxtb	r3, r3
 8019a9c:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8019aa0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8019aa4:	330c      	adds	r3, #12
 8019aa6:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8019aaa:	4413      	add	r3, r2
 8019aac:	f107 0108 	add.w	r1, r7, #8
 8019ab0:	2220      	movs	r2, #32
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f00e fe5a 	bl	802876c <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8019ab8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8019abc:	332c      	adds	r3, #44	@ 0x2c
 8019abe:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8019ac2:	443b      	add	r3, r7
 8019ac4:	2202      	movs	r2, #2
 8019ac6:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8019aca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8019ace:	b2da      	uxtb	r2, r3
 8019ad0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8019ad4:	332d      	adds	r3, #45	@ 0x2d
 8019ad6:	3220      	adds	r2, #32
 8019ad8:	b2d2      	uxtb	r2, r2
 8019ada:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8019ade:	443b      	add	r3, r7
 8019ae0:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8019ae4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8019ae8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8019aec:	4413      	add	r3, r2
 8019aee:	332e      	adds	r3, #46	@ 0x2e
 8019af0:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8019af4:	18d0      	adds	r0, r2, r3
 8019af6:	f107 0308 	add.w	r3, r7, #8
 8019afa:	3320      	adds	r3, #32
 8019afc:	2220      	movs	r2, #32
 8019afe:	4619      	mov	r1, r3
 8019b00:	f00e fe34 	bl	802876c <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8019b04:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8019b08:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8019b0c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8019b10:	4413      	add	r3, r2
 8019b12:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 8019b16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8019b1a:	3308      	adds	r3, #8
 8019b1c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8019b20:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8019b24:	b2db      	uxtb	r3, r3
 8019b26:	3304      	adds	r3, #4
 8019b28:	b2db      	uxtb	r3, r3
 8019b2a:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8019b2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8019b32:	b2db      	uxtb	r3, r3
 8019b34:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8019b38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8019b3c:	3320      	adds	r3, #32
 8019b3e:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8019b42:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fc fb74 	bl	8016234 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8019b4c:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8019b50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8019b54:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8019b58:	2316      	movs	r3, #22
 8019b5a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8019b5e:	6800      	ldr	r0, [r0, #0]
 8019b60:	f7ff f898 	bl	8018c94 <mg_tls_encrypt>
}
 8019b64:	bf00      	nop
 8019b66:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd90      	pop	{r4, r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	0802f1c8 	.word	0x0802f1c8
 8019b74:	080198b1 	.word	0x080198b1
 8019b78:	080198cf 	.word	0x080198cf
 8019b7c:	080198f5 	.word	0x080198f5

08019b80 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b0b4      	sub	sp, #208	@ 0xd0
 8019b84:	af02      	add	r7, sp, #8
 8019b86:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8019b92:	4b1e      	ldr	r3, [pc, #120]	@ (8019c0c <mg_tls_server_send_finish+0x8c>)
 8019b94:	60fb      	str	r3, [r7, #12]
 8019b96:	f107 0310 	add.w	r3, r7, #16
 8019b9a:	2220      	movs	r2, #32
 8019b9c:	2100      	movs	r1, #0
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f00e fdfe 	bl	80287a0 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8019ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019ba8:	f103 0120 	add.w	r1, r3, #32
 8019bac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019bb0:	2270      	movs	r2, #112	@ 0x70
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f00e fdda 	bl	802876c <memmove>
  mg_sha256_final(hash, &sha256);
 8019bb8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8019bbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019bc0:	4611      	mov	r1, r2
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7fc fb6f 	bl	80162a6 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8019bc8:	f107 000c 	add.w	r0, r7, #12
 8019bcc:	3004      	adds	r0, #4
 8019bce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019bd2:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 8019bd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019bda:	2220      	movs	r2, #32
 8019bdc:	9200      	str	r2, [sp, #0]
 8019bde:	2220      	movs	r2, #32
 8019be0:	f7fc fcb5 	bl	801654e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8019be4:	f107 010c 	add.w	r1, r7, #12
 8019be8:	2316      	movs	r3, #22
 8019bea:	2224      	movs	r2, #36	@ 0x24
 8019bec:	6878      	ldr	r0, [r7, #4]
 8019bee:	f7ff f851 	bl	8018c94 <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8019bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019bf6:	3320      	adds	r3, #32
 8019bf8:	f107 010c 	add.w	r1, r7, #12
 8019bfc:	2224      	movs	r2, #36	@ 0x24
 8019bfe:	4618      	mov	r0, r3
 8019c00:	f7fc fb18 	bl	8016234 <mg_sha256_update>
}
 8019c04:	bf00      	nop
 8019c06:	37c8      	adds	r7, #200	@ 0xc8
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	20000014 	.word	0x20000014

08019c10 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b0a0      	sub	sp, #128	@ 0x80
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019c1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8019c20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019c22:	f107 0008 	add.w	r0, r7, #8
 8019c26:	3320      	adds	r3, #32
 8019c28:	2270      	movs	r2, #112	@ 0x70
 8019c2a:	4619      	mov	r1, r3
 8019c2c:	f00f ffe7 	bl	8029bfe <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8019c30:	6878      	ldr	r0, [r7, #4]
 8019c32:	f7ff f92b 	bl	8018e8c <mg_tls_recv_record>
 8019c36:	4603      	mov	r3, r0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	da02      	bge.n	8019c42 <mg_tls_server_recv_finish+0x32>
    return -1;
 8019c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8019c40:	e01f      	b.n	8019c82 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8019c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019c48:	695b      	ldr	r3, [r3, #20]
 8019c4a:	4413      	add	r3, r2
 8019c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8019c4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c50:	781b      	ldrb	r3, [r3, #0]
 8019c52:	2b14      	cmp	r3, #20
 8019c54:	d009      	beq.n	8019c6a <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8019c56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	461a      	mov	r2, r3
 8019c5c:	490b      	ldr	r1, [pc, #44]	@ (8019c8c <mg_tls_server_recv_finish+0x7c>)
 8019c5e:	6878      	ldr	r0, [r7, #4]
 8019c60:	f7ef fe7a 	bl	8009958 <mg_error>
    return -1;
 8019c64:	f04f 33ff 	mov.w	r3, #4294967295
 8019c68:	e00b      	b.n	8019c82 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f7fe fcc2 	bl	80185f4 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8019c70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019c72:	3320      	adds	r3, #32
 8019c74:	f107 0108 	add.w	r1, r7, #8
 8019c78:	2270      	movs	r2, #112	@ 0x70
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f00f ffbf 	bl	8029bfe <memcpy>
  return 0;
 8019c80:	2300      	movs	r3, #0
}
 8019c82:	4618      	mov	r0, r3
 8019c84:	3780      	adds	r7, #128	@ 0x80
 8019c86:	46bd      	mov	sp, r7
 8019c88:	bd80      	pop	{r7, pc}
 8019c8a:	bf00      	nop
 8019c8c:	0802f1d4 	.word	0x0802f1d4

08019c90 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8019c90:	b5b0      	push	{r4, r5, r7, lr}
 8019c92:	b0c6      	sub	sp, #280	@ 0x118
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019c9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019c9e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019ca0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019ca4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019cae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 8019cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019cb6:	3304      	adds	r3, #4
 8019cb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 8019cbc:	4a27      	ldr	r2, [pc, #156]	@ (8019d5c <mg_tls_client_send_hello+0xcc>)
 8019cbe:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8019cc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8019cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8019cc8:	4b25      	ldr	r3, [pc, #148]	@ (8019d60 <mg_tls_client_send_hello+0xd0>)
 8019cca:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8019cce:	461d      	mov	r5, r3
 8019cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019cd8:	682b      	ldr	r3, [r5, #0]
 8019cda:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8019cdc:	4a21      	ldr	r2, [pc, #132]	@ (8019d64 <mg_tls_client_send_hello+0xd4>)
 8019cde:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8019ce2:	ca07      	ldmia	r2, {r0, r1, r2}
 8019ce4:	c303      	stmia	r3!, {r0, r1}
 8019ce6:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8019ce8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8019d68 <mg_tls_client_send_hello+0xd8>)
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	4611      	mov	r1, r2
 8019cf6:	2391      	movs	r3, #145	@ 0x91
 8019cf8:	461a      	mov	r2, r3
 8019cfa:	f00f ff80 	bl	8029bfe <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8019cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019d02:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8019d06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 8019d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019d0e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8019d12:	4618      	mov	r0, r3
 8019d14:	f7e6 fb5c 	bl	80003d0 <strlen>
 8019d18:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8019d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d003      	beq.n	8019d2c <mg_tls_client_send_hello+0x9c>
 8019d24:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019d28:	3309      	adds	r3, #9
 8019d2a:	e000      	b.n	8019d2e <mg_tls_client_send_hello+0x9e>
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 8019d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019d36:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d002      	beq.n	8019d44 <mg_tls_client_send_hello+0xb4>
 8019d3e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8019d42:	e001      	b.n	8019d48 <mg_tls_client_send_hello+0xb8>
 8019d44:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8019d48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8019d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019d50:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d009      	beq.n	8019d6c <mg_tls_client_send_hello+0xdc>
 8019d58:	2322      	movs	r3, #34	@ 0x22
 8019d5a:	e008      	b.n	8019d6e <mg_tls_client_send_hello+0xde>
 8019d5c:	0802f1f8 	.word	0x0802f1f8
 8019d60:	0802f204 	.word	0x0802f204
 8019d64:	0802f228 	.word	0x0802f228
 8019d68:	0802f234 	.word	0x0802f234
 8019d6c:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8019d6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8019d72:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8019d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019d7a:	4413      	add	r3, r2
 8019d7c:	338c      	adds	r3, #140	@ 0x8c
 8019d7e:	0a1b      	lsrs	r3, r3, #8
 8019d80:	b2da      	uxtb	r2, r3
 8019d82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019d86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019d8a:	70da      	strb	r2, [r3, #3]
 8019d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019d90:	b2da      	uxtb	r2, r3
 8019d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	4413      	add	r3, r2
 8019d9a:	b2db      	uxtb	r3, r3
 8019d9c:	3b74      	subs	r3, #116	@ 0x74
 8019d9e:	b2da      	uxtb	r2, r3
 8019da0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019da4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019da8:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8019daa:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8019dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019db2:	4413      	add	r3, r2
 8019db4:	3388      	adds	r3, #136	@ 0x88
 8019db6:	0a1b      	lsrs	r3, r3, #8
 8019db8:	b2da      	uxtb	r2, r3
 8019dba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019dc2:	71da      	strb	r2, [r3, #7]
 8019dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019dc8:	b2da      	uxtb	r2, r3
 8019dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	4413      	add	r3, r2
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	3b78      	subs	r3, #120	@ 0x78
 8019dd6:	b2da      	uxtb	r2, r3
 8019dd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019ddc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019de0:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 8019de2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8019de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019dea:	4413      	add	r3, r2
 8019dec:	333d      	adds	r3, #61	@ 0x3d
 8019dee:	0a1b      	lsrs	r3, r3, #8
 8019df0:	b2da      	uxtb	r2, r3
 8019df2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019df6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019dfa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8019dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8019e02:	b2da      	uxtb	r2, r3
 8019e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019e08:	b2db      	uxtb	r3, r3
 8019e0a:	4413      	add	r3, r2
 8019e0c:	b2db      	uxtb	r3, r3
 8019e0e:	333d      	adds	r3, #61	@ 0x3d
 8019e10:	b2da      	uxtb	r2, r3
 8019e12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019e16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8019e1a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8019e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d026      	beq.n	8019e74 <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 8019e26:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e2a:	3305      	adds	r3, #5
 8019e2c:	0a1b      	lsrs	r3, r3, #8
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8019e34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e38:	b2db      	uxtb	r3, r3
 8019e3a:	3305      	adds	r3, #5
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 8019e42:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e46:	3303      	adds	r3, #3
 8019e48:	0a1b      	lsrs	r3, r3, #8
 8019e4a:	b2db      	uxtb	r3, r3
 8019e4c:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8019e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e54:	b2db      	uxtb	r3, r3
 8019e56:	3303      	adds	r3, #3
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8019e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e62:	0a1b      	lsrs	r3, r3, #8
 8019e64:	b2db      	uxtb	r3, r3
 8019e66:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8019e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019e6e:	b2db      	uxtb	r3, r3
 8019e70:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 8019e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019e78:	33d0      	adds	r3, #208	@ 0xd0
 8019e7a:	2120      	movs	r1, #32
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f7e6 fe89 	bl	8000b94 <mg_random>
 8019e82:	4603      	mov	r3, r0
 8019e84:	f083 0301 	eor.w	r3, r3, #1
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d007      	beq.n	8019e9e <mg_tls_client_send_hello+0x20e>
 8019e8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019e92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019e96:	496c      	ldr	r1, [pc, #432]	@ (801a048 <mg_tls_client_send_hello+0x3b8>)
 8019e98:	6818      	ldr	r0, [r3, #0]
 8019e9a:	f7ef fd5d 	bl	8009958 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 8019e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019ea2:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8019ea6:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8019eaa:	2301      	movs	r3, #1
 8019eac:	4a67      	ldr	r2, [pc, #412]	@ (801a04c <mg_tls_client_send_hello+0x3bc>)
 8019eae:	f008 fbd7 	bl	8022660 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 8019eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019eb6:	33b0      	adds	r3, #176	@ 0xb0
 8019eb8:	2120      	movs	r1, #32
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f7e6 fe6a 	bl	8000b94 <mg_random>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	f083 0301 	eor.w	r3, r3, #1
 8019ec6:	b2db      	uxtb	r3, r3
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d007      	beq.n	8019edc <mg_tls_client_send_hello+0x24c>
 8019ecc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019ed0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019ed4:	495c      	ldr	r1, [pc, #368]	@ (801a048 <mg_tls_client_send_hello+0x3b8>)
 8019ed6:	6818      	ldr	r0, [r3, #0]
 8019ed8:	f7ef fd3e 	bl	8009958 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 8019edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019ee0:	3390      	adds	r3, #144	@ 0x90
 8019ee2:	2120      	movs	r1, #32
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f7e6 fe55 	bl	8000b94 <mg_random>
 8019eea:	4603      	mov	r3, r0
 8019eec:	f083 0301 	eor.w	r3, r3, #1
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d007      	beq.n	8019f06 <mg_tls_client_send_hello+0x276>
 8019ef6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8019efa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8019efe:	4952      	ldr	r1, [pc, #328]	@ (801a048 <mg_tls_client_send_hello+0x3b8>)
 8019f00:	6818      	ldr	r0, [r3, #0]
 8019f02:	f7ef fd29 	bl	8009958 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 8019f06:	f107 030c 	add.w	r3, r7, #12
 8019f0a:	330b      	adds	r3, #11
 8019f0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019f10:	3290      	adds	r2, #144	@ 0x90
 8019f12:	6815      	ldr	r5, [r2, #0]
 8019f14:	6854      	ldr	r4, [r2, #4]
 8019f16:	6890      	ldr	r0, [r2, #8]
 8019f18:	68d1      	ldr	r1, [r2, #12]
 8019f1a:	601d      	str	r5, [r3, #0]
 8019f1c:	605c      	str	r4, [r3, #4]
 8019f1e:	6098      	str	r0, [r3, #8]
 8019f20:	60d9      	str	r1, [r3, #12]
 8019f22:	6915      	ldr	r5, [r2, #16]
 8019f24:	6954      	ldr	r4, [r2, #20]
 8019f26:	6990      	ldr	r0, [r2, #24]
 8019f28:	69d1      	ldr	r1, [r2, #28]
 8019f2a:	611d      	str	r5, [r3, #16]
 8019f2c:	615c      	str	r4, [r3, #20]
 8019f2e:	6198      	str	r0, [r3, #24]
 8019f30:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 8019f32:	f107 030c 	add.w	r3, r7, #12
 8019f36:	332c      	adds	r3, #44	@ 0x2c
 8019f38:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019f3c:	32b0      	adds	r2, #176	@ 0xb0
 8019f3e:	6815      	ldr	r5, [r2, #0]
 8019f40:	6854      	ldr	r4, [r2, #4]
 8019f42:	6890      	ldr	r0, [r2, #8]
 8019f44:	68d1      	ldr	r1, [r2, #12]
 8019f46:	601d      	str	r5, [r3, #0]
 8019f48:	605c      	str	r4, [r3, #4]
 8019f4a:	6098      	str	r0, [r3, #8]
 8019f4c:	60d9      	str	r1, [r3, #12]
 8019f4e:	6915      	ldr	r5, [r2, #16]
 8019f50:	6954      	ldr	r4, [r2, #20]
 8019f52:	6990      	ldr	r0, [r2, #24]
 8019f54:	69d1      	ldr	r1, [r2, #28]
 8019f56:	611d      	str	r5, [r3, #16]
 8019f58:	615c      	str	r4, [r3, #20]
 8019f5a:	6198      	str	r0, [r3, #24]
 8019f5c:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 8019f5e:	f107 030c 	add.w	r3, r7, #12
 8019f62:	335e      	adds	r3, #94	@ 0x5e
 8019f64:	461d      	mov	r5, r3
 8019f66:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8019f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f6c:	6028      	str	r0, [r5, #0]
 8019f6e:	6069      	str	r1, [r5, #4]
 8019f70:	60aa      	str	r2, [r5, #8]
 8019f72:	60eb      	str	r3, [r5, #12]
 8019f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f76:	6128      	str	r0, [r5, #16]
 8019f78:	6169      	str	r1, [r5, #20]
 8019f7a:	61aa      	str	r2, [r5, #24]
 8019f7c:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 8019f7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019f82:	6899      	ldr	r1, [r3, #8]
 8019f84:	f107 020c 	add.w	r2, r7, #12
 8019f88:	2391      	movs	r3, #145	@ 0x91
 8019f8a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019f8e:	f7f4 fb6f 	bl	800e670 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 8019f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019f96:	f103 0020 	add.w	r0, r3, #32
 8019f9a:	f107 030c 	add.w	r3, r7, #12
 8019f9e:	3305      	adds	r3, #5
 8019fa0:	228c      	movs	r2, #140	@ 0x8c
 8019fa2:	4619      	mov	r1, r3
 8019fa4:	f7fc f946 	bl	8016234 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8019fa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019fac:	6899      	ldr	r1, [r3, #8]
 8019fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8019fb2:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8019fb6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019fba:	f7f4 fb59 	bl	800e670 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 8019fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8019fc2:	3320      	adds	r3, #32
 8019fc4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8019fc8:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f7fc f931 	bl	8016234 <mg_sha256_update>
  if (hostnamesz > 0) {
 8019fd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d027      	beq.n	801a02a <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 8019fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019fde:	6899      	ldr	r1, [r3, #8]
 8019fe0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8019fe4:	2309      	movs	r3, #9
 8019fe6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8019fea:	f7f4 fb41 	bl	800e670 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 8019fee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8019ff2:	6899      	ldr	r1, [r3, #8]
 8019ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8019ff8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8019ffc:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801a000:	f7f4 fb36 	bl	800e670 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 801a004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a008:	3320      	adds	r3, #32
 801a00a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801a00e:	2209      	movs	r2, #9
 801a010:	4618      	mov	r0, r3
 801a012:	f7fc f90f 	bl	8016234 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 801a016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a01a:	3320      	adds	r3, #32
 801a01c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a020:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 801a024:	4618      	mov	r0, r3
 801a026:	f7fc f905 	bl	8016234 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 801a02a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a02e:	6899      	ldr	r1, [r3, #8]
 801a030:	2306      	movs	r3, #6
 801a032:	4a07      	ldr	r2, [pc, #28]	@ (801a050 <mg_tls_client_send_hello+0x3c0>)
 801a034:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801a038:	f7f4 fb1a 	bl	800e670 <mg_iobuf_add>
}
 801a03c:	bf00      	nop
 801a03e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801a042:	46bd      	mov	sp, r7
 801a044:	bdb0      	pop	{r4, r5, r7, pc}
 801a046:	bf00      	nop
 801a048:	0802f118 	.word	0x0802f118
 801a04c:	080310dc 	.word	0x080310dc
 801a050:	0802f134 	.word	0x0802f134

0801a054 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 801a054:	b580      	push	{r7, lr}
 801a056:	b08a      	sub	sp, #40	@ 0x28
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a062:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	3368      	adds	r3, #104	@ 0x68
 801a068:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 801a06a:	6878      	ldr	r0, [r7, #4]
 801a06c:	f7fe fa77 	bl	801855e <mg_tls_got_record>
 801a070:	4603      	mov	r3, r0
 801a072:	f083 0301 	eor.w	r3, r3, #1
 801a076:	b2db      	uxtb	r3, r3
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d002      	beq.n	801a082 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 801a07c:	f06f 0301 	mvn.w	r3, #1
 801a080:	e109      	b.n	801a296 <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 801a082:	69fb      	ldr	r3, [r7, #28]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	2b16      	cmp	r3, #22
 801a08a:	d105      	bne.n	801a098 <mg_tls_client_recv_hello+0x44>
 801a08c:	69fb      	ldr	r3, [r7, #28]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	3305      	adds	r3, #5
 801a092:	781b      	ldrb	r3, [r3, #0]
 801a094:	2b02      	cmp	r3, #2
 801a096:	d032      	beq.n	801a0fe <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 801a098:	69fb      	ldr	r3, [r7, #28]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	781b      	ldrb	r3, [r3, #0]
 801a09e:	2b15      	cmp	r3, #21
 801a0a0:	d10f      	bne.n	801a0c2 <mg_tls_client_recv_hello+0x6e>
 801a0a2:	69fb      	ldr	r3, [r7, #28]
 801a0a4:	689b      	ldr	r3, [r3, #8]
 801a0a6:	2b06      	cmp	r3, #6
 801a0a8:	d90b      	bls.n	801a0c2 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	3306      	adds	r3, #6
 801a0b0:	781b      	ldrb	r3, [r3, #0]
 801a0b2:	461a      	mov	r2, r3
 801a0b4:	497a      	ldr	r1, [pc, #488]	@ (801a2a0 <mg_tls_client_recv_hello+0x24c>)
 801a0b6:	6878      	ldr	r0, [r7, #4]
 801a0b8:	f7ef fc4e 	bl	8009958 <mg_error>
      return -1;
 801a0bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a0c0:	e0e9      	b.n	801a296 <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 801a0c2:	4b78      	ldr	r3, [pc, #480]	@ (801a2a4 <mg_tls_client_recv_hello+0x250>)
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	2b01      	cmp	r3, #1
 801a0c8:	dd12      	ble.n	801a0f0 <mg_tls_client_recv_hello+0x9c>
 801a0ca:	4b77      	ldr	r3, [pc, #476]	@ (801a2a8 <mg_tls_client_recv_hello+0x254>)
 801a0cc:	f642 6205 	movw	r2, #11781	@ 0x2e05
 801a0d0:	4976      	ldr	r1, [pc, #472]	@ (801a2ac <mg_tls_client_recv_hello+0x258>)
 801a0d2:	2002      	movs	r0, #2
 801a0d4:	f7f5 fb36 	bl	800f744 <mg_log_prefix>
 801a0d8:	69fb      	ldr	r3, [r7, #28]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	781b      	ldrb	r3, [r3, #0]
 801a0de:	4619      	mov	r1, r3
 801a0e0:	69fb      	ldr	r3, [r7, #28]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	3305      	adds	r3, #5
 801a0e6:	781b      	ldrb	r3, [r3, #0]
 801a0e8:	461a      	mov	r2, r3
 801a0ea:	4871      	ldr	r0, [pc, #452]	@ (801a2b0 <mg_tls_client_recv_hello+0x25c>)
 801a0ec:	f7f5 fb7a 	bl	800f7e4 <mg_log>
    mg_error(c, "not a server hello packet");
 801a0f0:	4970      	ldr	r1, [pc, #448]	@ (801a2b4 <mg_tls_client_recv_hello+0x260>)
 801a0f2:	6878      	ldr	r0, [r7, #4]
 801a0f4:	f7ef fc30 	bl	8009958 <mg_error>
    return -1;
 801a0f8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0fc:	e0cb      	b.n	801a296 <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801a0fe:	69fb      	ldr	r3, [r7, #28]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	3303      	adds	r3, #3
 801a104:	781b      	ldrb	r3, [r3, #0]
 801a106:	b21b      	sxth	r3, r3
 801a108:	021b      	lsls	r3, r3, #8
 801a10a:	b21a      	sxth	r2, r3
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	3304      	adds	r3, #4
 801a112:	781b      	ldrb	r3, [r3, #0]
 801a114:	b21b      	sxth	r3, r3
 801a116:	4313      	orrs	r3, r2
 801a118:	b21b      	sxth	r3, r3
 801a11a:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 801a11c:	6a3b      	ldr	r3, [r7, #32]
 801a11e:	f103 0020 	add.w	r0, r3, #32
 801a122:	69fb      	ldr	r3, [r7, #28]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	3305      	adds	r3, #5
 801a128:	8b7a      	ldrh	r2, [r7, #26]
 801a12a:	4619      	mov	r1, r3
 801a12c:	f7fc f882 	bl	8016234 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 801a130:	69fb      	ldr	r3, [r7, #28]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	334f      	adds	r3, #79	@ 0x4f
 801a136:	781b      	ldrb	r3, [r3, #0]
 801a138:	b21b      	sxth	r3, r3
 801a13a:	021b      	lsls	r3, r3, #8
 801a13c:	b21a      	sxth	r2, r3
 801a13e:	69fb      	ldr	r3, [r7, #28]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	3350      	adds	r3, #80	@ 0x50
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	b21b      	sxth	r3, r3
 801a148:	4313      	orrs	r3, r2
 801a14a:	b21b      	sxth	r3, r3
 801a14c:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 801a14e:	69fb      	ldr	r3, [r7, #28]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	3351      	adds	r3, #81	@ 0x51
 801a154:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 801a156:	8b3a      	ldrh	r2, [r7, #24]
 801a158:	69fb      	ldr	r3, [r7, #28]
 801a15a:	689b      	ldr	r3, [r3, #8]
 801a15c:	3b51      	subs	r3, #81	@ 0x51
 801a15e:	429a      	cmp	r2, r3
 801a160:	f200 8090 	bhi.w	801a284 <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 801a164:	2300      	movs	r3, #0
 801a166:	627b      	str	r3, [r7, #36]	@ 0x24
 801a168:	e086      	b.n	801a278 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 801a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16c:	697a      	ldr	r2, [r7, #20]
 801a16e:	4413      	add	r3, r2
 801a170:	781b      	ldrb	r3, [r3, #0]
 801a172:	b21b      	sxth	r3, r3
 801a174:	021b      	lsls	r3, r3, #8
 801a176:	b21a      	sxth	r2, r3
 801a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a17a:	3301      	adds	r3, #1
 801a17c:	6979      	ldr	r1, [r7, #20]
 801a17e:	440b      	add	r3, r1
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	b21b      	sxth	r3, r3
 801a184:	4313      	orrs	r3, r2
 801a186:	b21b      	sxth	r3, r3
 801a188:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 801a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a18c:	3302      	adds	r3, #2
 801a18e:	697a      	ldr	r2, [r7, #20]
 801a190:	4413      	add	r3, r2
 801a192:	781b      	ldrb	r3, [r3, #0]
 801a194:	b21b      	sxth	r3, r3
 801a196:	021b      	lsls	r3, r3, #8
 801a198:	b21a      	sxth	r2, r3
 801a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a19c:	3303      	adds	r3, #3
 801a19e:	6979      	ldr	r1, [r7, #20]
 801a1a0:	440b      	add	r3, r1
 801a1a2:	781b      	ldrb	r3, [r3, #0]
 801a1a4:	b21b      	sxth	r3, r3
 801a1a6:	4313      	orrs	r3, r2
 801a1a8:	b21b      	sxth	r3, r3
 801a1aa:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801a1ac:	8b3a      	ldrh	r2, [r7, #24]
 801a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1b0:	1ad3      	subs	r3, r2, r3
 801a1b2:	1eda      	subs	r2, r3, #3
 801a1b4:	8a3b      	ldrh	r3, [r7, #16]
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	dd66      	ble.n	801a288 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 801a1ba:	8a7b      	ldrh	r3, [r7, #18]
 801a1bc:	2b33      	cmp	r3, #51	@ 0x33
 801a1be:	d007      	beq.n	801a1d0 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 801a1c0:	8a3b      	ldrh	r3, [r7, #16]
 801a1c2:	3304      	adds	r3, #4
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	461a      	mov	r2, r3
 801a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1ca:	4413      	add	r3, r2
 801a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 801a1ce:	e053      	b.n	801a278 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 801a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d2:	3304      	adds	r3, #4
 801a1d4:	697a      	ldr	r2, [r7, #20]
 801a1d6:	4413      	add	r3, r2
 801a1d8:	781b      	ldrb	r3, [r3, #0]
 801a1da:	b21b      	sxth	r3, r3
 801a1dc:	021b      	lsls	r3, r3, #8
 801a1de:	b21a      	sxth	r2, r3
 801a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1e2:	3305      	adds	r3, #5
 801a1e4:	6979      	ldr	r1, [r7, #20]
 801a1e6:	440b      	add	r3, r1
 801a1e8:	781b      	ldrb	r3, [r3, #0]
 801a1ea:	b21b      	sxth	r3, r3
 801a1ec:	4313      	orrs	r3, r2
 801a1ee:	b21b      	sxth	r3, r3
 801a1f0:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 801a1f2:	89fb      	ldrh	r3, [r7, #14]
 801a1f4:	2b1d      	cmp	r3, #29
 801a1f6:	d006      	beq.n	801a206 <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 801a1f8:	492f      	ldr	r1, [pc, #188]	@ (801a2b8 <mg_tls_client_recv_hello+0x264>)
 801a1fa:	6878      	ldr	r0, [r7, #4]
 801a1fc:	f7ef fbac 	bl	8009958 <mg_error>
      return -1;
 801a200:	f04f 33ff 	mov.w	r3, #4294967295
 801a204:	e047      	b.n	801a296 <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 801a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a208:	3306      	adds	r3, #6
 801a20a:	697a      	ldr	r2, [r7, #20]
 801a20c:	4413      	add	r3, r2
 801a20e:	781b      	ldrb	r3, [r3, #0]
 801a210:	b21b      	sxth	r3, r3
 801a212:	021b      	lsls	r3, r3, #8
 801a214:	b21a      	sxth	r2, r3
 801a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a218:	3307      	adds	r3, #7
 801a21a:	6979      	ldr	r1, [r7, #20]
 801a21c:	440b      	add	r3, r1
 801a21e:	781b      	ldrb	r3, [r3, #0]
 801a220:	b21b      	sxth	r3, r3
 801a222:	4313      	orrs	r3, r2
 801a224:	b21b      	sxth	r3, r3
 801a226:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	3308      	adds	r3, #8
 801a22c:	697a      	ldr	r2, [r7, #20]
 801a22e:	4413      	add	r3, r2
 801a230:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 801a232:	89bb      	ldrh	r3, [r7, #12]
 801a234:	2b20      	cmp	r3, #32
 801a236:	d006      	beq.n	801a246 <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 801a238:	4920      	ldr	r1, [pc, #128]	@ (801a2bc <mg_tls_client_recv_hello+0x268>)
 801a23a:	6878      	ldr	r0, [r7, #4]
 801a23c:	f7ef fb8c 	bl	8009958 <mg_error>
      return -1;
 801a240:	f04f 33ff 	mov.w	r3, #4294967295
 801a244:	e027      	b.n	801a296 <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 801a246:	6a3b      	ldr	r3, [r7, #32]
 801a248:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 801a24c:	6a3b      	ldr	r3, [r7, #32]
 801a24e:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 801a252:	2301      	movs	r3, #1
 801a254:	68ba      	ldr	r2, [r7, #8]
 801a256:	f008 fa03 	bl	8022660 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 801a25a:	6a3b      	ldr	r3, [r7, #32]
 801a25c:	33f0      	adds	r3, #240	@ 0xf0
 801a25e:	2220      	movs	r2, #32
 801a260:	4619      	mov	r1, r3
 801a262:	4817      	ldr	r0, [pc, #92]	@ (801a2c0 <mg_tls_client_recv_hello+0x26c>)
 801a264:	f7fe f824 	bl	80182b0 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 801a268:	6878      	ldr	r0, [r7, #4]
 801a26a:	f7fe f9a0 	bl	80185ae <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 801a26e:	6878      	ldr	r0, [r7, #4]
 801a270:	f7fe faa8 	bl	80187c4 <mg_tls_generate_handshake_keys>
    return 0;
 801a274:	2300      	movs	r3, #0
 801a276:	e00e      	b.n	801a296 <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 801a278:	8b3b      	ldrh	r3, [r7, #24]
 801a27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a27c:	429a      	cmp	r2, r3
 801a27e:	f6ff af74 	blt.w	801a16a <mg_tls_client_recv_hello+0x116>
  }
fail:
 801a282:	e002      	b.n	801a28a <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 801a284:	bf00      	nop
 801a286:	e000      	b.n	801a28a <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 801a288:	bf00      	nop
  mg_error(c, "bad server hello");
 801a28a:	490e      	ldr	r1, [pc, #56]	@ (801a2c4 <mg_tls_client_recv_hello+0x270>)
 801a28c:	6878      	ldr	r0, [r7, #4]
 801a28e:	f7ef fb63 	bl	8009958 <mg_error>
  return -1;
 801a292:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a296:	4618      	mov	r0, r3
 801a298:	3728      	adds	r7, #40	@ 0x28
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}
 801a29e:	bf00      	nop
 801a2a0:	0802f2c8 	.word	0x0802f2c8
 801a2a4:	2400025c 	.word	0x2400025c
 801a2a8:	0803139c 	.word	0x0803139c
 801a2ac:	0802d330 	.word	0x0802d330
 801a2b0:	0802f2d8 	.word	0x0802f2d8
 801a2b4:	0802f2f8 	.word	0x0802f2f8
 801a2b8:	0802f314 	.word	0x0802f314
 801a2bc:	0802f32c 	.word	0x0802f32c
 801a2c0:	0802f344 	.word	0x0802f344
 801a2c4:	0802f354 	.word	0x0802f354

0801a2c8 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b084      	sub	sp, #16
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a2d6:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801a2d8:	6878      	ldr	r0, [r7, #4]
 801a2da:	f7fe fdd7 	bl	8018e8c <mg_tls_recv_record>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	da02      	bge.n	801a2ea <mg_tls_client_recv_ext+0x22>
    return -1;
 801a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a2e8:	e017      	b.n	801a31a <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	695b      	ldr	r3, [r3, #20]
 801a2f2:	4413      	add	r3, r2
 801a2f4:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	781b      	ldrb	r3, [r3, #0]
 801a2fa:	2b08      	cmp	r3, #8
 801a2fc:	d009      	beq.n	801a312 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 801a2fe:	68bb      	ldr	r3, [r7, #8]
 801a300:	781b      	ldrb	r3, [r3, #0]
 801a302:	461a      	mov	r2, r3
 801a304:	4907      	ldr	r1, [pc, #28]	@ (801a324 <mg_tls_client_recv_ext+0x5c>)
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f7ef fb26 	bl	8009958 <mg_error>
    return -1;
 801a30c:	f04f 33ff 	mov.w	r3, #4294967295
 801a310:	e003      	b.n	801a31a <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 801a312:	6878      	ldr	r0, [r7, #4]
 801a314:	f7fe f96e 	bl	80185f4 <mg_tls_drop_message>
  return 0;
 801a318:	2300      	movs	r3, #0
}
 801a31a:	4618      	mov	r0, r3
 801a31c:	3710      	adds	r7, #16
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}
 801a322:	bf00      	nop
 801a324:	0802f368 	.word	0x0802f368

0801a328 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 801a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a32a:	b099      	sub	sp, #100	@ 0x64
 801a32c:	af06      	add	r7, sp, #24
 801a32e:	6178      	str	r0, [r7, #20]
 801a330:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 801a332:	f107 031c 	add.w	r3, r7, #28
 801a336:	4946      	ldr	r1, [pc, #280]	@ (801a450 <mg_der_debug_cert_name+0x128>)
 801a338:	4618      	mov	r0, r3
 801a33a:	f7fd fa03 	bl	8017744 <mg_str_s>
 801a33e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a342:	f107 021c 	add.w	r2, r7, #28
 801a346:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a34a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a34e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a352:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801a356:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a35a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a35e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a362:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801a366:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a36a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 801a36e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801a372:	2203      	movs	r2, #3
 801a374:	4937      	ldr	r1, [pc, #220]	@ (801a454 <mg_der_debug_cert_name+0x12c>)
 801a376:	6938      	ldr	r0, [r7, #16]
 801a378:	f7fe f84d 	bl	8018416 <mg_der_find_oid>
 801a37c:	4603      	mov	r3, r0
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d006      	beq.n	801a390 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 801a382:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a386:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7fd f9f7 	bl	801777e <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 801a390:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801a394:	2203      	movs	r2, #3
 801a396:	4930      	ldr	r1, [pc, #192]	@ (801a458 <mg_der_debug_cert_name+0x130>)
 801a398:	6938      	ldr	r0, [r7, #16]
 801a39a:	f7fe f83c 	bl	8018416 <mg_der_find_oid>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d006      	beq.n	801a3b2 <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 801a3a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a3a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	f7fd f9e6 	bl	801777e <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 801a3b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801a3b6:	2203      	movs	r2, #3
 801a3b8:	4928      	ldr	r1, [pc, #160]	@ (801a45c <mg_der_debug_cert_name+0x134>)
 801a3ba:	6938      	ldr	r0, [r7, #16]
 801a3bc:	f7fe f82b 	bl	8018416 <mg_der_find_oid>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d006      	beq.n	801a3d4 <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 801a3c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a3c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a3ce:	4618      	mov	r0, r3
 801a3d0:	f7fd f9d5 	bl	801777e <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 801a3d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801a3d8:	2203      	movs	r2, #3
 801a3da:	4921      	ldr	r1, [pc, #132]	@ (801a460 <mg_der_debug_cert_name+0x138>)
 801a3dc:	6938      	ldr	r0, [r7, #16]
 801a3de:	f7fe f81a 	bl	8018416 <mg_der_find_oid>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d00e      	beq.n	801a406 <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 801a3e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a3ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3ec:	f107 0308 	add.w	r3, r7, #8
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	f7fd f9c4 	bl	801777e <mg_str_n>
 801a3f6:	f107 031c 	add.w	r3, r7, #28
 801a3fa:	f107 0208 	add.w	r2, r7, #8
 801a3fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a402:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 801a406:	4b17      	ldr	r3, [pc, #92]	@ (801a464 <mg_der_debug_cert_name+0x13c>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2b03      	cmp	r3, #3
 801a40c:	dd1b      	ble.n	801a446 <mg_der_debug_cert_name+0x11e>
 801a40e:	4b16      	ldr	r3, [pc, #88]	@ (801a468 <mg_der_debug_cert_name+0x140>)
 801a410:	f642 6257 	movw	r2, #11863	@ 0x2e57
 801a414:	4915      	ldr	r1, [pc, #84]	@ (801a46c <mg_der_debug_cert_name+0x144>)
 801a416:	2004      	movs	r0, #4
 801a418:	f7f5 f994 	bl	800f744 <mg_log_prefix>
 801a41c:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 801a41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a420:	607b      	str	r3, [r7, #4]
 801a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a42a:	6a3c      	ldr	r4, [r7, #32]
 801a42c:	69fd      	ldr	r5, [r7, #28]
 801a42e:	9505      	str	r5, [sp, #20]
 801a430:	9404      	str	r4, [sp, #16]
 801a432:	9003      	str	r0, [sp, #12]
 801a434:	9102      	str	r1, [sp, #8]
 801a436:	9201      	str	r2, [sp, #4]
 801a438:	9300      	str	r3, [sp, #0]
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	4632      	mov	r2, r6
 801a43e:	6979      	ldr	r1, [r7, #20]
 801a440:	480b      	ldr	r0, [pc, #44]	@ (801a470 <mg_der_debug_cert_name+0x148>)
 801a442:	f7f5 f9cf 	bl	800f7e4 <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 801a446:	bf00      	nop
 801a448:	374c      	adds	r7, #76	@ 0x4c
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a44e:	bf00      	nop
 801a450:	0802db70 	.word	0x0802db70
 801a454:	0802f398 	.word	0x0802f398
 801a458:	0802f39c 	.word	0x0802f39c
 801a45c:	0802f3a0 	.word	0x0802f3a0
 801a460:	0802f3a4 	.word	0x0802f3a4
 801a464:	2400025c 	.word	0x2400025c
 801a468:	080313b8 	.word	0x080313b8
 801a46c:	0802d330 	.word	0x0802d330
 801a470:	0802f3a8 	.word	0x0802f3a8

0801a474 <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 801a474:	b590      	push	{r4, r7, lr}
 801a476:	b0af      	sub	sp, #188	@ 0xbc
 801a478:	af04      	add	r7, sp, #16
 801a47a:	6178      	str	r0, [r7, #20]
 801a47c:	6139      	str	r1, [r7, #16]
 801a47e:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 801a486:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801a48a:	461a      	mov	r2, r3
 801a48c:	6939      	ldr	r1, [r7, #16]
 801a48e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801a492:	f7fd ff35 	bl	8018300 <mg_der_parse>
 801a496:	4603      	mov	r3, r0
 801a498:	2b00      	cmp	r3, #0
 801a49a:	dd03      	ble.n	801a4a4 <mg_tls_parse_cert_der+0x30>
 801a49c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 801a4a0:	2b30      	cmp	r3, #48	@ 0x30
 801a4a2:	d002      	beq.n	801a4aa <mg_tls_parse_cert_der+0x36>
 801a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 801a4a8:	e38a      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 801a4aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 801a4b2:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 801a4b6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801a4ba:	4611      	mov	r1, r2
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7fd ff7f 	bl	80183c0 <mg_der_next>
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	dd03      	ble.n	801a4d0 <mg_tls_parse_cert_der+0x5c>
 801a4c8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801a4cc:	2b30      	cmp	r3, #48	@ 0x30
 801a4ce:	d002      	beq.n	801a4d6 <mg_tls_parse_cert_der+0x62>
 801a4d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a4d4:	e374      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 801a4d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a4da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a4de:	441a      	add	r2, r3
 801a4e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4e4:	1ad3      	subs	r3, r2, r3
 801a4e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 801a4ea:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a4ee:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a4f2:	4611      	mov	r1, r2
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f7fd ff63 	bl	80183c0 <mg_der_next>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	dc02      	bgt.n	801a506 <mg_tls_parse_cert_der+0x92>
 801a500:	f04f 33ff 	mov.w	r3, #4294967295
 801a504:	e35c      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 801a506:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a50a:	2ba0      	cmp	r3, #160	@ 0xa0
 801a50c:	d123      	bne.n	801a556 <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 801a50e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a512:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a514:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a518:	4618      	mov	r0, r3
 801a51a:	f7fd fef1 	bl	8018300 <mg_der_parse>
 801a51e:	4603      	mov	r3, r0
 801a520:	2b00      	cmp	r3, #0
 801a522:	dd07      	ble.n	801a534 <mg_tls_parse_cert_der+0xc0>
 801a524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a526:	2b01      	cmp	r3, #1
 801a528:	d104      	bne.n	801a534 <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 801a52a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a52e:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 801a530:	2b02      	cmp	r3, #2
 801a532:	d002      	beq.n	801a53a <mg_tls_parse_cert_der+0xc6>
      return -1;
 801a534:	f04f 33ff 	mov.w	r3, #4294967295
 801a538:	e342      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 801a53a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a53e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a542:	4611      	mov	r1, r2
 801a544:	4618      	mov	r0, r3
 801a546:	f7fd ff3b 	bl	80183c0 <mg_der_next>
 801a54a:	4603      	mov	r3, r0
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	dc02      	bgt.n	801a556 <mg_tls_parse_cert_der+0xe2>
 801a550:	f04f 33ff 	mov.w	r3, #4294967295
 801a554:	e334      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 801a556:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a55a:	2b02      	cmp	r3, #2
 801a55c:	d002      	beq.n	801a564 <mg_tls_parse_cert_der+0xf0>
 801a55e:	f04f 33ff 	mov.w	r3, #4294967295
 801a562:	e32d      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 801a564:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801a568:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a56a:	68fc      	ldr	r4, [r7, #12]
 801a56c:	463b      	mov	r3, r7
 801a56e:	4618      	mov	r0, r3
 801a570:	f7fd f905 	bl	801777e <mg_str_n>
 801a574:	1d23      	adds	r3, r4, #4
 801a576:	463a      	mov	r2, r7
 801a578:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a57c:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 801a580:	4bae      	ldr	r3, [pc, #696]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2b03      	cmp	r3, #3
 801a586:	dd0e      	ble.n	801a5a6 <mg_tls_parse_cert_der+0x132>
 801a588:	4bad      	ldr	r3, [pc, #692]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a58a:	f642 6276 	movw	r2, #11894	@ 0x2e76
 801a58e:	49ad      	ldr	r1, [pc, #692]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a590:	2004      	movs	r0, #4
 801a592:	f7f5 f8d7 	bl	800f744 <mg_log_prefix>
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	689a      	ldr	r2, [r3, #8]
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	685b      	ldr	r3, [r3, #4]
 801a59e:	49aa      	ldr	r1, [pc, #680]	@ (801a848 <mg_tls_parse_cert_der+0x3d4>)
 801a5a0:	48aa      	ldr	r0, [pc, #680]	@ (801a84c <mg_tls_parse_cert_der+0x3d8>)
 801a5a2:	f7f5 f91f 	bl	800f7e4 <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801a5a6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a5aa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a5ae:	4611      	mov	r1, r2
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f7fd ff05 	bl	80183c0 <mg_der_next>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	dd03      	ble.n	801a5c4 <mg_tls_parse_cert_der+0x150>
 801a5bc:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a5c0:	2b30      	cmp	r3, #48	@ 0x30
 801a5c2:	d002      	beq.n	801a5ca <mg_tls_parse_cert_der+0x156>
 801a5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c8:	e2fa      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 801a5ca:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 801a5ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a5d2:	4611      	mov	r1, r2
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	f7fd fef3 	bl	80183c0 <mg_der_next>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	dd03      	ble.n	801a5e8 <mg_tls_parse_cert_der+0x174>
 801a5e0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 801a5e4:	2b06      	cmp	r3, #6
 801a5e6:	d002      	beq.n	801a5ee <mg_tls_parse_cert_der+0x17a>
 801a5e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a5ec:	e2e8      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 801a5ee:	4b93      	ldr	r3, [pc, #588]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	2b03      	cmp	r3, #3
 801a5f4:	dd0c      	ble.n	801a610 <mg_tls_parse_cert_der+0x19c>
 801a5f6:	4b92      	ldr	r3, [pc, #584]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a5f8:	f642 627c 	movw	r2, #11900	@ 0x2e7c
 801a5fc:	4991      	ldr	r1, [pc, #580]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a5fe:	2004      	movs	r0, #4
 801a600:	f7f5 f8a0 	bl	800f744 <mg_log_prefix>
 801a604:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801a606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a608:	498f      	ldr	r1, [pc, #572]	@ (801a848 <mg_tls_parse_cert_der+0x3d4>)
 801a60a:	4891      	ldr	r0, [pc, #580]	@ (801a850 <mg_tls_parse_cert_der+0x3dc>)
 801a60c:	f7f5 f8ea 	bl	800f7e4 <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 801a610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a612:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801a614:	498f      	ldr	r1, [pc, #572]	@ (801a854 <mg_tls_parse_cert_der+0x3e0>)
 801a616:	4618      	mov	r0, r3
 801a618:	f00e f898 	bl	802874c <memcmp>
 801a61c:	4603      	mov	r3, r0
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d11a      	bne.n	801a658 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 801a622:	4b86      	ldr	r3, [pc, #536]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	2b03      	cmp	r3, #3
 801a628:	dd09      	ble.n	801a63e <mg_tls_parse_cert_der+0x1ca>
 801a62a:	4b85      	ldr	r3, [pc, #532]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a62c:	f642 627f 	movw	r2, #11903	@ 0x2e7f
 801a630:	4984      	ldr	r1, [pc, #528]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a632:	2004      	movs	r0, #4
 801a634:	f7f5 f886 	bl	800f744 <mg_log_prefix>
 801a638:	4887      	ldr	r0, [pc, #540]	@ (801a858 <mg_tls_parse_cert_der+0x3e4>)
 801a63a:	f7f5 f8d3 	bl	800f7e4 <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	331c      	adds	r3, #28
 801a642:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801a646:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7fb ff63 	bl	8016516 <mg_sha256>
    cert->tbshashsz = 32;
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	2220      	movs	r2, #32
 801a654:	64da      	str	r2, [r3, #76]	@ 0x4c
 801a656:	e07f      	b.n	801a758 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 801a658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 801a65a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 801a65c:	497f      	ldr	r1, [pc, #508]	@ (801a85c <mg_tls_parse_cert_der+0x3e8>)
 801a65e:	4618      	mov	r0, r3
 801a660:	f00e f874 	bl	802874c <memcmp>
 801a664:	4603      	mov	r3, r0
 801a666:	2b00      	cmp	r3, #0
 801a668:	d11a      	bne.n	801a6a0 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 801a66a:	4b74      	ldr	r3, [pc, #464]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	2b03      	cmp	r3, #3
 801a670:	dd09      	ble.n	801a686 <mg_tls_parse_cert_der+0x212>
 801a672:	4b73      	ldr	r3, [pc, #460]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a674:	f642 6284 	movw	r2, #11908	@ 0x2e84
 801a678:	4972      	ldr	r1, [pc, #456]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a67a:	2004      	movs	r0, #4
 801a67c:	f7f5 f862 	bl	800f744 <mg_log_prefix>
 801a680:	4877      	ldr	r0, [pc, #476]	@ (801a860 <mg_tls_parse_cert_der+0x3ec>)
 801a682:	f7f5 f8af 	bl	800f7e4 <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	331c      	adds	r3, #28
 801a68a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801a68e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801a692:	4618      	mov	r0, r3
 801a694:	f7fb ff3f 	bl	8016516 <mg_sha256>
    cert->tbshashsz = 32;
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	2220      	movs	r2, #32
 801a69c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801a69e:	e05b      	b.n	801a758 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 801a6a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a6a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801a6a4:	496f      	ldr	r1, [pc, #444]	@ (801a864 <mg_tls_parse_cert_der+0x3f0>)
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	f00e f850 	bl	802874c <memcmp>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d11a      	bne.n	801a6e8 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 801a6b2:	4b62      	ldr	r3, [pc, #392]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	2b03      	cmp	r3, #3
 801a6b8:	dd09      	ble.n	801a6ce <mg_tls_parse_cert_der+0x25a>
 801a6ba:	4b61      	ldr	r3, [pc, #388]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a6bc:	f642 6289 	movw	r2, #11913	@ 0x2e89
 801a6c0:	4960      	ldr	r1, [pc, #384]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a6c2:	2004      	movs	r0, #4
 801a6c4:	f7f5 f83e 	bl	800f744 <mg_log_prefix>
 801a6c8:	4867      	ldr	r0, [pc, #412]	@ (801a868 <mg_tls_parse_cert_der+0x3f4>)
 801a6ca:	f7f5 f88b 	bl	800f7e4 <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	331c      	adds	r3, #28
 801a6d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801a6d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7fc ffef 	bl	80176be <mg_sha384>
    cert->tbshashsz = 48;
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	2230      	movs	r2, #48	@ 0x30
 801a6e4:	64da      	str	r2, [r3, #76]	@ 0x4c
 801a6e6:	e037      	b.n	801a758 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 801a6e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 801a6ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 801a6ec:	495f      	ldr	r1, [pc, #380]	@ (801a86c <mg_tls_parse_cert_der+0x3f8>)
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	f00e f82c 	bl	802874c <memcmp>
 801a6f4:	4603      	mov	r3, r0
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d11a      	bne.n	801a730 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 801a6fa:	4b50      	ldr	r3, [pc, #320]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	2b03      	cmp	r3, #3
 801a700:	dd09      	ble.n	801a716 <mg_tls_parse_cert_der+0x2a2>
 801a702:	4b4f      	ldr	r3, [pc, #316]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a704:	f642 628e 	movw	r2, #11918	@ 0x2e8e
 801a708:	494e      	ldr	r1, [pc, #312]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a70a:	2004      	movs	r0, #4
 801a70c:	f7f5 f81a 	bl	800f744 <mg_log_prefix>
 801a710:	4857      	ldr	r0, [pc, #348]	@ (801a870 <mg_tls_parse_cert_der+0x3fc>)
 801a712:	f7f5 f867 	bl	800f7e4 <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	331c      	adds	r3, #28
 801a71a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801a71e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801a722:	4618      	mov	r0, r3
 801a724:	f7fc ffcb 	bl	80176be <mg_sha384>
    cert->tbshashsz = 48;
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	2230      	movs	r2, #48	@ 0x30
 801a72c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801a72e:	e013      	b.n	801a758 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 801a730:	4b42      	ldr	r3, [pc, #264]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	2b00      	cmp	r3, #0
 801a736:	dd0c      	ble.n	801a752 <mg_tls_parse_cert_der+0x2de>
 801a738:	4b41      	ldr	r3, [pc, #260]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a73a:	f642 6292 	movw	r2, #11922	@ 0x2e92
 801a73e:	4941      	ldr	r1, [pc, #260]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a740:	2001      	movs	r0, #1
 801a742:	f7f4 ffff 	bl	800f744 <mg_log_prefix>
 801a746:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801a748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a74a:	493f      	ldr	r1, [pc, #252]	@ (801a848 <mg_tls_parse_cert_der+0x3d4>)
 801a74c:	4849      	ldr	r0, [pc, #292]	@ (801a874 <mg_tls_parse_cert_der+0x400>)
 801a74e:	f7f5 f849 	bl	800f7e4 <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 801a752:	f04f 33ff 	mov.w	r3, #4294967295
 801a756:	e233      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 801a758:	4b38      	ldr	r3, [pc, #224]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	2b03      	cmp	r3, #3
 801a75e:	dd0e      	ble.n	801a77e <mg_tls_parse_cert_der+0x30a>
 801a760:	4b37      	ldr	r3, [pc, #220]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a762:	f642 6296 	movw	r2, #11926	@ 0x2e96
 801a766:	4937      	ldr	r1, [pc, #220]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a768:	2004      	movs	r0, #4
 801a76a:	f7f4 ffeb 	bl	800f744 <mg_log_prefix>
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	331c      	adds	r3, #28
 801a776:	4934      	ldr	r1, [pc, #208]	@ (801a848 <mg_tls_parse_cert_der+0x3d4>)
 801a778:	483f      	ldr	r0, [pc, #252]	@ (801a878 <mg_tls_parse_cert_der+0x404>)
 801a77a:	f7f5 f833 	bl	800f7e4 <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801a77e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a782:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a786:	4611      	mov	r1, r2
 801a788:	4618      	mov	r0, r3
 801a78a:	f7fd fe19 	bl	80183c0 <mg_der_next>
 801a78e:	4603      	mov	r3, r0
 801a790:	2b00      	cmp	r3, #0
 801a792:	dd03      	ble.n	801a79c <mg_tls_parse_cert_der+0x328>
 801a794:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a798:	2b30      	cmp	r3, #48	@ 0x30
 801a79a:	d002      	beq.n	801a7a2 <mg_tls_parse_cert_der+0x32e>
 801a79c:	f04f 33ff 	mov.w	r3, #4294967295
 801a7a0:	e20e      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 801a7a2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a7a6:	4619      	mov	r1, r3
 801a7a8:	4834      	ldr	r0, [pc, #208]	@ (801a87c <mg_tls_parse_cert_der+0x408>)
 801a7aa:	f7ff fdbd 	bl	801a328 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801a7ae:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a7b2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a7b6:	4611      	mov	r1, r2
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7fd fe01 	bl	80183c0 <mg_der_next>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	dd03      	ble.n	801a7cc <mg_tls_parse_cert_der+0x358>
 801a7c4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a7c8:	2b30      	cmp	r3, #48	@ 0x30
 801a7ca:	d002      	beq.n	801a7d2 <mg_tls_parse_cert_der+0x35e>
 801a7cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a7d0:	e1f6      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 801a7d2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801a7d6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a7da:	4611      	mov	r1, r2
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f7fd fdef 	bl	80183c0 <mg_der_next>
    mg_der_next(&field, &after);
 801a7e2:	f107 0218 	add.w	r2, r7, #24
 801a7e6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a7ea:	4611      	mov	r1, r2
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f7fd fde7 	bl	80183c0 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 801a7f2:	6a3b      	ldr	r3, [r7, #32]
 801a7f4:	69fa      	ldr	r2, [r7, #28]
 801a7f6:	4922      	ldr	r1, [pc, #136]	@ (801a880 <mg_tls_parse_cert_der+0x40c>)
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f00d ffa7 	bl	802874c <memcmp>
 801a7fe:	4603      	mov	r3, r0
 801a800:	2b00      	cmp	r3, #0
 801a802:	da41      	bge.n	801a888 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 801a804:	4b0d      	ldr	r3, [pc, #52]	@ (801a83c <mg_tls_parse_cert_der+0x3c8>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	dd14      	ble.n	801a836 <mg_tls_parse_cert_der+0x3c2>
 801a80c:	4b0c      	ldr	r3, [pc, #48]	@ (801a840 <mg_tls_parse_cert_der+0x3cc>)
 801a80e:	f642 62a3 	movw	r2, #11939	@ 0x2ea3
 801a812:	490c      	ldr	r1, [pc, #48]	@ (801a844 <mg_tls_parse_cert_der+0x3d0>)
 801a814:	2001      	movs	r0, #1
 801a816:	f7f4 ff95 	bl	800f744 <mg_log_prefix>
 801a81a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a81c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a81e:	69fb      	ldr	r3, [r7, #28]
 801a820:	6a3a      	ldr	r2, [r7, #32]
 801a822:	9202      	str	r2, [sp, #8]
 801a824:	9301      	str	r3, [sp, #4]
 801a826:	4b08      	ldr	r3, [pc, #32]	@ (801a848 <mg_tls_parse_cert_der+0x3d4>)
 801a828:	9300      	str	r3, [sp, #0]
 801a82a:	4603      	mov	r3, r0
 801a82c:	460a      	mov	r2, r1
 801a82e:	4906      	ldr	r1, [pc, #24]	@ (801a848 <mg_tls_parse_cert_der+0x3d4>)
 801a830:	4814      	ldr	r0, [pc, #80]	@ (801a884 <mg_tls_parse_cert_der+0x410>)
 801a832:	f7f4 ffd7 	bl	800f7e4 <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 801a836:	f04f 33ff 	mov.w	r3, #4294967295
 801a83a:	e1c1      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
 801a83c:	2400025c 	.word	0x2400025c
 801a840:	080313d0 	.word	0x080313d0
 801a844:	0802d330 	.word	0x0802d330
 801a848:	080143c1 	.word	0x080143c1
 801a84c:	0802f3d0 	.word	0x0802f3d0
 801a850:	0802f3e0 	.word	0x0802f3e0
 801a854:	0802f3f4 	.word	0x0802f3f4
 801a858:	0802f400 	.word	0x0802f400
 801a85c:	0802f41c 	.word	0x0802f41c
 801a860:	0802f428 	.word	0x0802f428
 801a864:	0802f444 	.word	0x0802f444
 801a868:	0802f450 	.word	0x0802f450
 801a86c:	0802f46c 	.word	0x0802f46c
 801a870:	0802f478 	.word	0x0802f478
 801a874:	0802f494 	.word	0x0802f494
 801a878:	0802f4b4 	.word	0x0802f4b4
 801a87c:	0802f4c4 	.word	0x0802f4c4
 801a880:	0802f4cc 	.word	0x0802f4cc
 801a884:	0802f4dc 	.word	0x0802f4dc
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801a888:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a88c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a890:	4611      	mov	r1, r2
 801a892:	4618      	mov	r0, r3
 801a894:	f7fd fd94 	bl	80183c0 <mg_der_next>
 801a898:	4603      	mov	r3, r0
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	dd03      	ble.n	801a8a6 <mg_tls_parse_cert_der+0x432>
 801a89e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a8a2:	2b30      	cmp	r3, #48	@ 0x30
 801a8a4:	d002      	beq.n	801a8ac <mg_tls_parse_cert_der+0x438>
 801a8a6:	f04f 33ff 	mov.w	r3, #4294967295
 801a8aa:	e189      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 801a8ac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a8b0:	4619      	mov	r1, r3
 801a8b2:	48a2      	ldr	r0, [pc, #648]	@ (801ab3c <mg_tls_parse_cert_der+0x6c8>)
 801a8b4:	f7ff fd38 	bl	801a328 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801a8b8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801a8bc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801a8c0:	4611      	mov	r1, r2
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f7fd fd7c 	bl	80183c0 <mg_der_next>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	dd03      	ble.n	801a8d6 <mg_tls_parse_cert_der+0x462>
 801a8ce:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801a8d2:	2b30      	cmp	r3, #48	@ 0x30
 801a8d4:	d002      	beq.n	801a8dc <mg_tls_parse_cert_der+0x468>
 801a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 801a8da:	e171      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 801a8dc:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 801a8e0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801a8e4:	4611      	mov	r1, r2
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f7fd fd6a 	bl	80183c0 <mg_der_next>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	dd03      	ble.n	801a8fa <mg_tls_parse_cert_der+0x486>
 801a8f2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 801a8f6:	2b30      	cmp	r3, #48	@ 0x30
 801a8f8:	d002      	beq.n	801a900 <mg_tls_parse_cert_der+0x48c>
 801a8fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a8fe:	e15f      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 801a900:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801a904:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a908:	4611      	mov	r1, r2
 801a90a:	4618      	mov	r0, r3
 801a90c:	f7fd fd58 	bl	80183c0 <mg_der_next>
 801a910:	4603      	mov	r3, r0
 801a912:	2b00      	cmp	r3, #0
 801a914:	dd03      	ble.n	801a91e <mg_tls_parse_cert_der+0x4aa>
 801a916:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801a91a:	2b06      	cmp	r3, #6
 801a91c:	d002      	beq.n	801a924 <mg_tls_parse_cert_der+0x4b0>
 801a91e:	f04f 33ff 	mov.w	r3, #4294967295
 801a922:	e14d      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 801a924:	4b86      	ldr	r3, [pc, #536]	@ (801ab40 <mg_tls_parse_cert_der+0x6cc>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	2b03      	cmp	r3, #3
 801a92a:	dd0c      	ble.n	801a946 <mg_tls_parse_cert_der+0x4d2>
 801a92c:	4b85      	ldr	r3, [pc, #532]	@ (801ab44 <mg_tls_parse_cert_der+0x6d0>)
 801a92e:	f642 62b5 	movw	r2, #11957	@ 0x2eb5
 801a932:	4985      	ldr	r1, [pc, #532]	@ (801ab48 <mg_tls_parse_cert_der+0x6d4>)
 801a934:	2004      	movs	r0, #4
 801a936:	f7f4 ff05 	bl	800f744 <mg_log_prefix>
 801a93a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a93c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a93e:	4983      	ldr	r1, [pc, #524]	@ (801ab4c <mg_tls_parse_cert_der+0x6d8>)
 801a940:	4883      	ldr	r0, [pc, #524]	@ (801ab50 <mg_tls_parse_cert_der+0x6dc>)
 801a942:	f7f4 ff4f 	bl	800f7e4 <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 801a946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 801a948:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 801a94a:	4982      	ldr	r1, [pc, #520]	@ (801ab54 <mg_tls_parse_cert_der+0x6e0>)
 801a94c:	4618      	mov	r0, r3
 801a94e:	f00d fefd 	bl	802874c <memcmp>
 801a952:	4603      	mov	r3, r0
 801a954:	2b00      	cmp	r3, #0
 801a956:	d111      	bne.n	801a97c <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	2201      	movs	r2, #1
 801a95c:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 801a95e:	4b78      	ldr	r3, [pc, #480]	@ (801ab40 <mg_tls_parse_cert_der+0x6cc>)
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	2b03      	cmp	r3, #3
 801a964:	dd6f      	ble.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
 801a966:	4b77      	ldr	r3, [pc, #476]	@ (801ab44 <mg_tls_parse_cert_der+0x6d0>)
 801a968:	f642 62b9 	movw	r2, #11961	@ 0x2eb9
 801a96c:	4976      	ldr	r1, [pc, #472]	@ (801ab48 <mg_tls_parse_cert_der+0x6d4>)
 801a96e:	2004      	movs	r0, #4
 801a970:	f7f4 fee8 	bl	800f744 <mg_log_prefix>
 801a974:	4878      	ldr	r0, [pc, #480]	@ (801ab58 <mg_tls_parse_cert_der+0x6e4>)
 801a976:	f7f4 ff35 	bl	800f7e4 <mg_log>
 801a97a:	e064      	b.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 801a97c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801a97e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 801a980:	4976      	ldr	r1, [pc, #472]	@ (801ab5c <mg_tls_parse_cert_der+0x6e8>)
 801a982:	4618      	mov	r0, r3
 801a984:	f00d fee2 	bl	802874c <memcmp>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d111      	bne.n	801a9b2 <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	2201      	movs	r2, #1
 801a992:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 801a994:	4b6a      	ldr	r3, [pc, #424]	@ (801ab40 <mg_tls_parse_cert_der+0x6cc>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	2b03      	cmp	r3, #3
 801a99a:	dd54      	ble.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
 801a99c:	4b69      	ldr	r3, [pc, #420]	@ (801ab44 <mg_tls_parse_cert_der+0x6d0>)
 801a99e:	f642 62bd 	movw	r2, #11965	@ 0x2ebd
 801a9a2:	4969      	ldr	r1, [pc, #420]	@ (801ab48 <mg_tls_parse_cert_der+0x6d4>)
 801a9a4:	2004      	movs	r0, #4
 801a9a6:	f7f4 fecd 	bl	800f744 <mg_log_prefix>
 801a9aa:	486d      	ldr	r0, [pc, #436]	@ (801ab60 <mg_tls_parse_cert_der+0x6ec>)
 801a9ac:	f7f4 ff1a 	bl	800f7e4 <mg_log>
 801a9b0:	e049      	b.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 801a9b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801a9b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 801a9b6:	496b      	ldr	r1, [pc, #428]	@ (801ab64 <mg_tls_parse_cert_der+0x6f0>)
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f00d fec7 	bl	802874c <memcmp>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d111      	bne.n	801a9e8 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	2201      	movs	r2, #1
 801a9c8:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 801a9ca:	4b5d      	ldr	r3, [pc, #372]	@ (801ab40 <mg_tls_parse_cert_der+0x6cc>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	2b03      	cmp	r3, #3
 801a9d0:	dd39      	ble.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
 801a9d2:	4b5c      	ldr	r3, [pc, #368]	@ (801ab44 <mg_tls_parse_cert_der+0x6d0>)
 801a9d4:	f642 62c1 	movw	r2, #11969	@ 0x2ec1
 801a9d8:	495b      	ldr	r1, [pc, #364]	@ (801ab48 <mg_tls_parse_cert_der+0x6d4>)
 801a9da:	2004      	movs	r0, #4
 801a9dc:	f7f4 feb2 	bl	800f744 <mg_log_prefix>
 801a9e0:	4861      	ldr	r0, [pc, #388]	@ (801ab68 <mg_tls_parse_cert_der+0x6f4>)
 801a9e2:	f7f4 feff 	bl	800f7e4 <mg_log>
 801a9e6:	e02e      	b.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 801a9e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801a9ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 801a9ec:	495f      	ldr	r1, [pc, #380]	@ (801ab6c <mg_tls_parse_cert_der+0x6f8>)
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f00d feac 	bl	802874c <memcmp>
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d111      	bne.n	801aa1e <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 801aa00:	4b4f      	ldr	r3, [pc, #316]	@ (801ab40 <mg_tls_parse_cert_der+0x6cc>)
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	2b03      	cmp	r3, #3
 801aa06:	dd1e      	ble.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
 801aa08:	4b4e      	ldr	r3, [pc, #312]	@ (801ab44 <mg_tls_parse_cert_der+0x6d0>)
 801aa0a:	f642 62c5 	movw	r2, #11973	@ 0x2ec5
 801aa0e:	494e      	ldr	r1, [pc, #312]	@ (801ab48 <mg_tls_parse_cert_der+0x6d4>)
 801aa10:	2004      	movs	r0, #4
 801aa12:	f7f4 fe97 	bl	800f744 <mg_log_prefix>
 801aa16:	4856      	ldr	r0, [pc, #344]	@ (801ab70 <mg_tls_parse_cert_der+0x6fc>)
 801aa18:	f7f4 fee4 	bl	800f7e4 <mg_log>
 801aa1c:	e013      	b.n	801aa46 <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 801aa1e:	4b48      	ldr	r3, [pc, #288]	@ (801ab40 <mg_tls_parse_cert_der+0x6cc>)
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	dd0c      	ble.n	801aa40 <mg_tls_parse_cert_der+0x5cc>
 801aa26:	4b47      	ldr	r3, [pc, #284]	@ (801ab44 <mg_tls_parse_cert_der+0x6d0>)
 801aa28:	f642 62c7 	movw	r2, #11975	@ 0x2ec7
 801aa2c:	4946      	ldr	r1, [pc, #280]	@ (801ab48 <mg_tls_parse_cert_der+0x6d4>)
 801aa2e:	2001      	movs	r0, #1
 801aa30:	f7f4 fe88 	bl	800f744 <mg_log_prefix>
 801aa34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aa38:	4944      	ldr	r1, [pc, #272]	@ (801ab4c <mg_tls_parse_cert_der+0x6d8>)
 801aa3a:	484e      	ldr	r0, [pc, #312]	@ (801ab74 <mg_tls_parse_cert_der+0x700>)
 801aa3c:	f7f4 fed2 	bl	800f7e4 <mg_log>
              pki_algo.value));
    return -1;
 801aa40:	f04f 33ff 	mov.w	r3, #4294967295
 801aa44:	e0bc      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d011      	beq.n	801aa72 <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 801aa4e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801aa52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801aa56:	4611      	mov	r1, r2
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7fd fcb1 	bl	80183c0 <mg_der_next>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	dd03      	ble.n	801aa6c <mg_tls_parse_cert_der+0x5f8>
 801aa64:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801aa68:	2b06      	cmp	r3, #6
 801aa6a:	d002      	beq.n	801aa72 <mg_tls_parse_cert_der+0x5fe>
 801aa6c:	f04f 33ff 	mov.w	r3, #4294967295
 801aa70:	e0a6      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 801aa72:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801aa76:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801aa7a:	4611      	mov	r1, r2
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	f7fd fc9f 	bl	80183c0 <mg_der_next>
 801aa82:	4603      	mov	r3, r0
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	dd03      	ble.n	801aa90 <mg_tls_parse_cert_der+0x61c>
 801aa88:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801aa8c:	2b03      	cmp	r3, #3
 801aa8e:	d002      	beq.n	801aa96 <mg_tls_parse_cert_der+0x622>
 801aa90:	f04f 33ff 	mov.w	r3, #4294967295
 801aa94:	e094      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d010      	beq.n	801aac0 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 801aa9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aaa0:	1c99      	adds	r1, r3, #2
 801aaa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aaa4:	1e9a      	subs	r2, r3, #2
 801aaa6:	68fc      	ldr	r4, [r7, #12]
 801aaa8:	463b      	mov	r3, r7
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f7fc fe67 	bl	801777e <mg_str_n>
 801aab0:	f104 030c 	add.w	r3, r4, #12
 801aab4:	463a      	mov	r2, r7
 801aab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aaba:	e883 0003 	stmia.w	r3, {r0, r1}
 801aabe:	e00f      	b.n	801aae0 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 801aac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aac2:	1c59      	adds	r1, r3, #1
 801aac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aac6:	1e5a      	subs	r2, r3, #1
 801aac8:	68fc      	ldr	r4, [r7, #12]
 801aaca:	463b      	mov	r3, r7
 801aacc:	4618      	mov	r0, r3
 801aace:	f7fc fe56 	bl	801777e <mg_str_n>
 801aad2:	f104 030c 	add.w	r3, r4, #12
 801aad6:	463a      	mov	r2, r7
 801aad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aadc:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 801aae0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801aae4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801aae8:	4611      	mov	r1, r2
 801aaea:	4618      	mov	r0, r3
 801aaec:	f7fd fc68 	bl	80183c0 <mg_der_next>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	dd03      	ble.n	801aafe <mg_tls_parse_cert_der+0x68a>
 801aaf6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801aafa:	2b30      	cmp	r3, #48	@ 0x30
 801aafc:	d002      	beq.n	801ab04 <mg_tls_parse_cert_der+0x690>
 801aafe:	f04f 33ff 	mov.w	r3, #4294967295
 801ab02:	e05d      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 801ab04:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ab08:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801ab0c:	4611      	mov	r1, r2
 801ab0e:	4618      	mov	r0, r3
 801ab10:	f7fd fc56 	bl	80183c0 <mg_der_next>
 801ab14:	4603      	mov	r3, r0
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	dd03      	ble.n	801ab22 <mg_tls_parse_cert_der+0x6ae>
 801ab1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801ab1e:	2b03      	cmp	r3, #3
 801ab20:	d002      	beq.n	801ab28 <mg_tls_parse_cert_der+0x6b4>
 801ab22:	f04f 33ff 	mov.w	r3, #4294967295
 801ab26:	e04b      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 801ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d003      	beq.n	801ab36 <mg_tls_parse_cert_der+0x6c2>
 801ab2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab30:	781b      	ldrb	r3, [r3, #0]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d020      	beq.n	801ab78 <mg_tls_parse_cert_der+0x704>
 801ab36:	f04f 33ff 	mov.w	r3, #4294967295
 801ab3a:	e041      	b.n	801abc0 <mg_tls_parse_cert_der+0x74c>
 801ab3c:	0802f508 	.word	0x0802f508
 801ab40:	2400025c 	.word	0x2400025c
 801ab44:	080313d0 	.word	0x080313d0
 801ab48:	0802d330 	.word	0x0802d330
 801ab4c:	080143c1 	.word	0x080143c1
 801ab50:	0802f510 	.word	0x0802f510
 801ab54:	0802f524 	.word	0x0802f524
 801ab58:	0802f530 	.word	0x0802f530
 801ab5c:	0802f54c 	.word	0x0802f54c
 801ab60:	0802f558 	.word	0x0802f558
 801ab64:	0802f574 	.word	0x0802f574
 801ab68:	0802f57c 	.word	0x0802f57c
 801ab6c:	0802f594 	.word	0x0802f594
 801ab70:	0802f5a0 	.word	0x0802f5a0
 801ab74:	0802f5b0 	.word	0x0802f5b0

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 801ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab7a:	1c59      	adds	r1, r3, #1
 801ab7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab7e:	1e5a      	subs	r2, r3, #1
 801ab80:	68fc      	ldr	r4, [r7, #12]
 801ab82:	463b      	mov	r3, r7
 801ab84:	4618      	mov	r0, r3
 801ab86:	f7fc fdfa 	bl	801777e <mg_str_n>
 801ab8a:	f104 0314 	add.w	r3, r4, #20
 801ab8e:	463a      	mov	r2, r7
 801ab90:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab94:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 801ab98:	4b0b      	ldr	r3, [pc, #44]	@ (801abc8 <mg_tls_parse_cert_der+0x754>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	2b03      	cmp	r3, #3
 801ab9e:	dd0e      	ble.n	801abbe <mg_tls_parse_cert_der+0x74a>
 801aba0:	4b0a      	ldr	r3, [pc, #40]	@ (801abcc <mg_tls_parse_cert_der+0x758>)
 801aba2:	f642 62de 	movw	r2, #11998	@ 0x2ede
 801aba6:	490a      	ldr	r1, [pc, #40]	@ (801abd0 <mg_tls_parse_cert_der+0x75c>)
 801aba8:	2004      	movs	r0, #4
 801abaa:	f7f4 fdcb 	bl	800f744 <mg_log_prefix>
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	699a      	ldr	r2, [r3, #24]
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	695b      	ldr	r3, [r3, #20]
 801abb6:	4907      	ldr	r1, [pc, #28]	@ (801abd4 <mg_tls_parse_cert_der+0x760>)
 801abb8:	4807      	ldr	r0, [pc, #28]	@ (801abd8 <mg_tls_parse_cert_der+0x764>)
 801abba:	f7f4 fe13 	bl	800f7e4 <mg_log>

  return 0;
 801abbe:	2300      	movs	r3, #0
}
 801abc0:	4618      	mov	r0, r3
 801abc2:	37ac      	adds	r7, #172	@ 0xac
 801abc4:	46bd      	mov	sp, r7
 801abc6:	bd90      	pop	{r4, r7, pc}
 801abc8:	2400025c 	.word	0x2400025c
 801abcc:	080313d0 	.word	0x080313d0
 801abd0:	0802d330 	.word	0x0802d330
 801abd4:	080143c1 	.word	0x080143c1
 801abd8:	0802f5c8 	.word	0x0802f5c8

0801abdc <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 801abdc:	b580      	push	{r7, lr}
 801abde:	b094      	sub	sp, #80	@ 0x50
 801abe0:	af02      	add	r7, sp, #8
 801abe2:	60f8      	str	r0, [r7, #12]
 801abe4:	60b9      	str	r1, [r7, #8]
 801abe6:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 801abe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801abec:	461a      	mov	r2, r3
 801abee:	68b9      	ldr	r1, [r7, #8]
 801abf0:	68f8      	ldr	r0, [r7, #12]
 801abf2:	f7fd fb85 	bl	8018300 <mg_der_parse>
 801abf6:	4603      	mov	r3, r0
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	db0a      	blt.n	801ac12 <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 801abfc:	f107 0320 	add.w	r3, r7, #32
 801ac00:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801ac04:	2203      	movs	r2, #3
 801ac06:	492f      	ldr	r1, [pc, #188]	@ (801acc4 <mg_tls_verify_cert_san+0xe8>)
 801ac08:	f7fd fc05 	bl	8018416 <mg_der_find_oid>
 801ac0c:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	da10      	bge.n	801ac34 <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 801ac12:	4b2d      	ldr	r3, [pc, #180]	@ (801acc8 <mg_tls_verify_cert_san+0xec>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	dd09      	ble.n	801ac2e <mg_tls_verify_cert_san+0x52>
 801ac1a:	4b2c      	ldr	r3, [pc, #176]	@ (801accc <mg_tls_verify_cert_san+0xf0>)
 801ac1c:	f642 62e8 	movw	r2, #12008	@ 0x2ee8
 801ac20:	492b      	ldr	r1, [pc, #172]	@ (801acd0 <mg_tls_verify_cert_san+0xf4>)
 801ac22:	2001      	movs	r0, #1
 801ac24:	f7f4 fd8e 	bl	800f744 <mg_log_prefix>
 801ac28:	482a      	ldr	r0, [pc, #168]	@ (801acd4 <mg_tls_verify_cert_san+0xf8>)
 801ac2a:	f7f4 fddb 	bl	800f7e4 <mg_log>
    return -1;
 801ac2e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac32:	e043      	b.n	801acbc <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 801ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ac38:	f107 0220 	add.w	r2, r7, #32
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7fd fb5f 	bl	8018300 <mg_der_parse>
 801ac42:	4603      	mov	r3, r0
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	da2c      	bge.n	801aca2 <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 801ac48:	4b1f      	ldr	r3, [pc, #124]	@ (801acc8 <mg_tls_verify_cert_san+0xec>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	dd09      	ble.n	801ac64 <mg_tls_verify_cert_san+0x88>
 801ac50:	4b1e      	ldr	r3, [pc, #120]	@ (801accc <mg_tls_verify_cert_san+0xf0>)
 801ac52:	f642 62ec 	movw	r2, #12012	@ 0x2eec
 801ac56:	491e      	ldr	r1, [pc, #120]	@ (801acd0 <mg_tls_verify_cert_san+0xf4>)
 801ac58:	2001      	movs	r0, #1
 801ac5a:	f7f4 fd73 	bl	800f744 <mg_log_prefix>
 801ac5e:	481e      	ldr	r0, [pc, #120]	@ (801acd8 <mg_tls_verify_cert_san+0xfc>)
 801ac60:	f7f4 fdc0 	bl	800f7e4 <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 801ac64:	f04f 33ff 	mov.w	r3, #4294967295
 801ac68:	e028      	b.n	801acbc <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 801ac6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801ac6e:	6879      	ldr	r1, [r7, #4]
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7fc fd67 	bl	8017744 <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 801ac76:	69f9      	ldr	r1, [r7, #28]
 801ac78:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 801ac7a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ac7e:	4618      	mov	r0, r3
 801ac80:	f7fc fd7d 	bl	801777e <mg_str_n>
 801ac84:	2300      	movs	r3, #0
 801ac86:	9300      	str	r3, [sp, #0]
 801ac88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ac8c:	cb0c      	ldmia	r3, {r2, r3}
 801ac8e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801ac92:	c903      	ldmia	r1, {r0, r1}
 801ac94:	f7fc fe60 	bl	8017958 <mg_match>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d001      	beq.n	801aca2 <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 801ac9e:	2301      	movs	r3, #1
 801aca0:	e00c      	b.n	801acbc <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 801aca2:	f107 0214 	add.w	r2, r7, #20
 801aca6:	f107 0320 	add.w	r3, r7, #32
 801acaa:	4611      	mov	r1, r2
 801acac:	4618      	mov	r0, r3
 801acae:	f7fd fb87 	bl	80183c0 <mg_der_next>
 801acb2:	4603      	mov	r3, r0
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	dcd8      	bgt.n	801ac6a <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 801acb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801acbc:	4618      	mov	r0, r3
 801acbe:	3748      	adds	r7, #72	@ 0x48
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bd80      	pop	{r7, pc}
 801acc4:	0802f5d0 	.word	0x0802f5d0
 801acc8:	2400025c 	.word	0x2400025c
 801accc:	080313e8 	.word	0x080313e8
 801acd0:	0802d330 	.word	0x0802d330
 801acd4:	0802f5d4 	.word	0x0802f5d4
 801acd8:	0802f600 	.word	0x0802f600

0801acdc <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 801acdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acde:	b0db      	sub	sp, #364	@ 0x16c
 801ace0:	af04      	add	r7, sp, #16
 801ace2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ace6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801acea:	6018      	str	r0, [r3, #0]
 801acec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801acf0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801acf4:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 801acf6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801acfa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	f000 80eb 	beq.w	801aede <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 801ad08:	2300      	movs	r3, #0
 801ad0a:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 801ad0e:	2300      	movs	r3, #0
 801ad10:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801ad14:	2300      	movs	r3, #0
 801ad16:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 801ad20:	2300      	movs	r3, #0
 801ad22:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801ad26:	2300      	movs	r3, #0
 801ad28:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 801ad32:	2300      	movs	r3, #0
 801ad34:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801ad38:	2300      	movs	r3, #0
 801ad3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 801ad3e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ad42:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	6958      	ldr	r0, [r3, #20]
 801ad4a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ad4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	699b      	ldr	r3, [r3, #24]
 801ad56:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	f7fd fad0 	bl	8018300 <mg_der_parse>
    mg_der_next(&seq, &a);
 801ad60:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801ad64:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 801ad68:	4611      	mov	r1, r2
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	f7fd fb28 	bl	80183c0 <mg_der_next>
    mg_der_next(&seq, &b);
 801ad70:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 801ad74:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 801ad78:	4611      	mov	r1, r2
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f7fd fb20 	bl	80183c0 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 801ad80:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d003      	beq.n	801ad90 <mg_tls_verify_cert_signature+0xb4>
 801ad88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d10f      	bne.n	801adb0 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 801ad90:	4b92      	ldr	r3, [pc, #584]	@ (801afdc <mg_tls_verify_cert_signature+0x300>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	dd09      	ble.n	801adac <mg_tls_verify_cert_signature+0xd0>
 801ad98:	4b91      	ldr	r3, [pc, #580]	@ (801afe0 <mg_tls_verify_cert_signature+0x304>)
 801ad9a:	f642 7203 	movw	r2, #12035	@ 0x2f03
 801ad9e:	4991      	ldr	r1, [pc, #580]	@ (801afe4 <mg_tls_verify_cert_signature+0x308>)
 801ada0:	2001      	movs	r0, #1
 801ada2:	f7f4 fccf 	bl	800f744 <mg_log_prefix>
 801ada6:	4890      	ldr	r0, [pc, #576]	@ (801afe8 <mg_tls_verify_cert_signature+0x30c>)
 801ada8:	f7f4 fd1c 	bl	800f7e4 <mg_log>
      return 0;
 801adac:	2300      	movs	r3, #0
 801adae:	e110      	b.n	801afd2 <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 801adb0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801adb4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	691b      	ldr	r3, [r3, #16]
 801adbc:	2b40      	cmp	r3, #64	@ 0x40
 801adbe:	d15f      	bne.n	801ae80 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 801adc0:	2320      	movs	r3, #32
 801adc2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 801adc6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801adca:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801adce:	429a      	cmp	r2, r3
 801add0:	d20d      	bcs.n	801adee <mg_tls_verify_cert_signature+0x112>
 801add2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801add6:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 801adda:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801adde:	1acb      	subs	r3, r1, r3
 801ade0:	4413      	add	r3, r2
 801ade2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801ade6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801adea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 801adee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801adf2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801adf6:	429a      	cmp	r2, r3
 801adf8:	d20d      	bcs.n	801ae16 <mg_tls_verify_cert_signature+0x13a>
 801adfa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801adfe:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801ae02:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801ae06:	1acb      	subs	r3, r1, r3
 801ae08:	4413      	add	r3, r2
 801ae0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801ae0e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801ae12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 801ae16:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 801ae1a:	f107 0308 	add.w	r3, r7, #8
 801ae1e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801ae22:	4618      	mov	r0, r3
 801ae24:	f00d fca2 	bl	802876c <memmove>
      memmove(sig + N, b.value, N);
 801ae28:	f107 0208 	add.w	r2, r7, #8
 801ae2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801ae30:	4413      	add	r3, r2
 801ae32:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 801ae36:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f00d fc96 	bl	802876c <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 801ae40:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ae44:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	68dc      	ldr	r4, [r3, #12]
 801ae4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ae50:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 801ae5a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ae5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 801ae66:	f005 fba7 	bl	80205b8 <mg_uecc_secp256r1>
 801ae6a:	4602      	mov	r2, r0
 801ae6c:	f107 0308 	add.w	r3, r7, #8
 801ae70:	9200      	str	r2, [sp, #0]
 801ae72:	4632      	mov	r2, r6
 801ae74:	4629      	mov	r1, r5
 801ae76:	4620      	mov	r0, r4
 801ae78:	f006 fd3a 	bl	80218f0 <mg_uecc_verify>
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	e0a8      	b.n	801afd2 <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 801ae80:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801ae84:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	691b      	ldr	r3, [r3, #16]
 801ae8c:	2b60      	cmp	r3, #96	@ 0x60
 801ae8e:	d10f      	bne.n	801aeb0 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 801ae90:	4b52      	ldr	r3, [pc, #328]	@ (801afdc <mg_tls_verify_cert_signature+0x300>)
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	2b02      	cmp	r3, #2
 801ae96:	dd09      	ble.n	801aeac <mg_tls_verify_cert_signature+0x1d0>
 801ae98:	4b51      	ldr	r3, [pc, #324]	@ (801afe0 <mg_tls_verify_cert_signature+0x304>)
 801ae9a:	f642 7210 	movw	r2, #12048	@ 0x2f10
 801ae9e:	4951      	ldr	r1, [pc, #324]	@ (801afe4 <mg_tls_verify_cert_signature+0x308>)
 801aea0:	2003      	movs	r0, #3
 801aea2:	f7f4 fc4f 	bl	800f744 <mg_log_prefix>
 801aea6:	4851      	ldr	r0, [pc, #324]	@ (801afec <mg_tls_verify_cert_signature+0x310>)
 801aea8:	f7f4 fc9c 	bl	800f7e4 <mg_log>
      return 1;
 801aeac:	2301      	movs	r3, #1
 801aeae:	e090      	b.n	801afd2 <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 801aeb0:	4b4a      	ldr	r3, [pc, #296]	@ (801afdc <mg_tls_verify_cert_signature+0x300>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	dd10      	ble.n	801aeda <mg_tls_verify_cert_signature+0x1fe>
 801aeb8:	4b49      	ldr	r3, [pc, #292]	@ (801afe0 <mg_tls_verify_cert_signature+0x304>)
 801aeba:	f642 7213 	movw	r2, #12051	@ 0x2f13
 801aebe:	4949      	ldr	r1, [pc, #292]	@ (801afe4 <mg_tls_verify_cert_signature+0x308>)
 801aec0:	2001      	movs	r0, #1
 801aec2:	f7f4 fc3f 	bl	800f744 <mg_log_prefix>
 801aec6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801aeca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	691b      	ldr	r3, [r3, #16]
 801aed2:	4619      	mov	r1, r3
 801aed4:	4846      	ldr	r0, [pc, #280]	@ (801aff0 <mg_tls_verify_cert_signature+0x314>)
 801aed6:	f7f4 fc85 	bl	800f7e4 <mg_log>
      return 0;
 801aeda:	2300      	movs	r3, #0
 801aedc:	e079      	b.n	801afd2 <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 801aede:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801aee2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	68d8      	ldr	r0, [r3, #12]
 801aeea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801aeee:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	691b      	ldr	r3, [r3, #16]
 801aef6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801aefa:	4619      	mov	r1, r3
 801aefc:	f7fd fa00 	bl	8018300 <mg_der_parse>
 801af00:	4603      	mov	r3, r0
 801af02:	2b00      	cmp	r3, #0
 801af04:	dd1d      	ble.n	801af42 <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801af06:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 801af0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801af0e:	4611      	mov	r1, r2
 801af10:	4618      	mov	r0, r3
 801af12:	f7fd fa55 	bl	80183c0 <mg_der_next>
 801af16:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 801af18:	2b00      	cmp	r3, #0
 801af1a:	dd12      	ble.n	801af42 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801af1c:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 801af20:	2b02      	cmp	r3, #2
 801af22:	d10e      	bne.n	801af42 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801af24:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801af28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801af2c:	4611      	mov	r1, r2
 801af2e:	4618      	mov	r0, r3
 801af30:	f7fd fa46 	bl	80183c0 <mg_der_next>
 801af34:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801af36:	2b00      	cmp	r3, #0
 801af38:	dd03      	ble.n	801af42 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801af3a:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 801af3e:	2b02      	cmp	r3, #2
 801af40:	d002      	beq.n	801af48 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 801af42:	f04f 33ff 	mov.w	r3, #4294967295
 801af46:	e044      	b.n	801afd2 <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801af48:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 801af4c:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 801af50:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 801af54:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 801af58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801af5c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	695b      	ldr	r3, [r3, #20]
 801af64:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 801af68:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 801af6c:	6812      	ldr	r2, [r2, #0]
 801af6e:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801af70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801af74:	9103      	str	r1, [sp, #12]
 801af76:	f107 0108 	add.w	r1, r7, #8
 801af7a:	9102      	str	r1, [sp, #8]
 801af7c:	9201      	str	r2, [sp, #4]
 801af7e:	9300      	str	r3, [sp, #0]
 801af80:	4633      	mov	r3, r6
 801af82:	462a      	mov	r2, r5
 801af84:	4621      	mov	r1, r4
 801af86:	f004 fae8 	bl	801f55a <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801af8a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801af8e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801af96:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801af9a:	f107 0208 	add.w	r2, r7, #8
 801af9e:	18d0      	adds	r0, r2, r3
 801afa0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801afa4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 801afae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801afb2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801afba:	461a      	mov	r2, r3
 801afbc:	f00d fbc6 	bl	802874c <memcmp>
 801afc0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 801afc4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801afc8:	2b00      	cmp	r3, #0
 801afca:	bf0c      	ite	eq
 801afcc:	2301      	moveq	r3, #1
 801afce:	2300      	movne	r3, #0
 801afd0:	b2db      	uxtb	r3, r3
  }
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 801afd8:	46bd      	mov	sp, r7
 801afda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afdc:	2400025c 	.word	0x2400025c
 801afe0:	08031400 	.word	0x08031400
 801afe4:	0802d330 	.word	0x0802d330
 801afe8:	0802f644 	.word	0x0802f644
 801afec:	0802f65c 	.word	0x0802f65c
 801aff0:	0802f674 	.word	0x0802f674

0801aff4 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 801aff4:	b580      	push	{r7, lr}
 801aff6:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 801affa:	af00      	add	r7, sp, #0
 801affc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b000:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b004:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 801b006:	2300      	movs	r3, #0
 801b008:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b00c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b010:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b01a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 801b01e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b022:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b026:	6818      	ldr	r0, [r3, #0]
 801b028:	f7fd ff30 	bl	8018e8c <mg_tls_recv_record>
 801b02c:	4603      	mov	r3, r0
 801b02e:	2b00      	cmp	r3, #0
 801b030:	da02      	bge.n	801b038 <mg_tls_client_recv_cert+0x44>
    return -1;
 801b032:	f04f 33ff 	mov.w	r3, #4294967295
 801b036:	e24a      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 801b038:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b03c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b044:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b048:	695b      	ldr	r3, [r3, #20]
 801b04a:	4413      	add	r3, r2
 801b04c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 801b050:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b054:	781b      	ldrb	r3, [r3, #0]
 801b056:	2b0d      	cmp	r3, #13
 801b058:	d11c      	bne.n	801b094 <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 801b05a:	4bcb      	ldr	r3, [pc, #812]	@ (801b388 <mg_tls_client_recv_cert+0x394>)
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	2b03      	cmp	r3, #3
 801b060:	dd09      	ble.n	801b076 <mg_tls_client_recv_cert+0x82>
 801b062:	4bca      	ldr	r3, [pc, #808]	@ (801b38c <mg_tls_client_recv_cert+0x398>)
 801b064:	f642 7237 	movw	r2, #12087	@ 0x2f37
 801b068:	49c9      	ldr	r1, [pc, #804]	@ (801b390 <mg_tls_client_recv_cert+0x39c>)
 801b06a:	2004      	movs	r0, #4
 801b06c:	f7f4 fb6a 	bl	800f744 <mg_log_prefix>
 801b070:	48c8      	ldr	r0, [pc, #800]	@ (801b394 <mg_tls_client_recv_cert+0x3a0>)
 801b072:	f7f4 fbb7 	bl	800f7e4 <mg_log>
    mg_tls_drop_message(c);
 801b076:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b07a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b07e:	6818      	ldr	r0, [r3, #0]
 801b080:	f7fd fab8 	bl	80185f4 <mg_tls_drop_message>
    tls->cert_requested = 1;
 801b084:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b088:	2201      	movs	r2, #1
 801b08a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 801b08e:	f04f 33ff 	mov.w	r3, #4294967295
 801b092:	e21c      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 801b094:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	2b0b      	cmp	r3, #11
 801b09c:	d00e      	beq.n	801b0bc <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 801b09e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b0a2:	781b      	ldrb	r3, [r3, #0]
 801b0a4:	461a      	mov	r2, r3
 801b0a6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b0aa:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b0ae:	49ba      	ldr	r1, [pc, #744]	@ (801b398 <mg_tls_client_recv_cert+0x3a4>)
 801b0b0:	6818      	ldr	r0, [r3, #0]
 801b0b2:	f7ee fc51 	bl	8009958 <mg_error>
    return -1;
 801b0b6:	f04f 33ff 	mov.w	r3, #4294967295
 801b0ba:	e208      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 801b0bc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b0c0:	699b      	ldr	r3, [r3, #24]
 801b0c2:	2b0a      	cmp	r3, #10
 801b0c4:	d80a      	bhi.n	801b0dc <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 801b0c6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b0ca:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b0ce:	49b3      	ldr	r1, [pc, #716]	@ (801b39c <mg_tls_client_recv_cert+0x3a8>)
 801b0d0:	6818      	ldr	r0, [r3, #0]
 801b0d2:	f7ee fc41 	bl	8009958 <mg_error>
    return -1;
 801b0d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b0da:	e1f8      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 801b0dc:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b0e0:	3301      	adds	r3, #1
 801b0e2:	781b      	ldrb	r3, [r3, #0]
 801b0e4:	041a      	lsls	r2, r3, #16
 801b0e6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b0ea:	3302      	adds	r3, #2
 801b0ec:	781b      	ldrb	r3, [r3, #0]
 801b0ee:	021b      	lsls	r3, r3, #8
 801b0f0:	4313      	orrs	r3, r2
 801b0f2:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801b0f6:	3203      	adds	r2, #3
 801b0f8:	7812      	ldrb	r2, [r2, #0]
 801b0fa:	4313      	orrs	r3, r2
 801b0fc:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 801b100:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b104:	3305      	adds	r3, #5
 801b106:	781b      	ldrb	r3, [r3, #0]
 801b108:	041a      	lsls	r2, r3, #16
 801b10a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b10e:	3306      	adds	r3, #6
 801b110:	781b      	ldrb	r3, [r3, #0]
 801b112:	021b      	lsls	r3, r3, #8
 801b114:	4313      	orrs	r3, r2
 801b116:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801b11a:	3207      	adds	r2, #7
 801b11c:	7812      	ldrb	r2, [r2, #0]
 801b11e:	4313      	orrs	r3, r2
 801b120:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 801b124:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801b128:	3b04      	subs	r3, #4
 801b12a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801b12e:	429a      	cmp	r2, r3
 801b130:	d01c      	beq.n	801b16c <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 801b132:	4b95      	ldr	r3, [pc, #596]	@ (801b388 <mg_tls_client_recv_cert+0x394>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	2b00      	cmp	r3, #0
 801b138:	dd0d      	ble.n	801b156 <mg_tls_client_recv_cert+0x162>
 801b13a:	4b94      	ldr	r3, [pc, #592]	@ (801b38c <mg_tls_client_recv_cert+0x398>)
 801b13c:	f642 724a 	movw	r2, #12106	@ 0x2f4a
 801b140:	4993      	ldr	r1, [pc, #588]	@ (801b390 <mg_tls_client_recv_cert+0x39c>)
 801b142:	2001      	movs	r0, #1
 801b144:	f7f4 fafe 	bl	800f744 <mg_log_prefix>
 801b148:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 801b14c:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 801b150:	4893      	ldr	r0, [pc, #588]	@ (801b3a0 <mg_tls_client_recv_cert+0x3ac>)
 801b152:	f7f4 fb47 	bl	800f7e4 <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 801b156:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b15a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b15e:	4991      	ldr	r1, [pc, #580]	@ (801b3a4 <mg_tls_client_recv_cert+0x3b0>)
 801b160:	6818      	ldr	r0, [r3, #0]
 801b162:	f7ee fbf9 	bl	8009958 <mg_error>
    return -1;
 801b166:	f04f 33ff 	mov.w	r3, #4294967295
 801b16a:	e1b0      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 801b16c:	2300      	movs	r3, #0
 801b16e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 801b172:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b176:	3308      	adds	r3, #8
 801b178:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 801b17c:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 801b180:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801b184:	4413      	add	r3, r2
 801b186:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 801b18a:	2300      	movs	r3, #0
 801b18c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 801b190:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801b194:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b198:	2100      	movs	r1, #0
 801b19a:	4618      	mov	r0, r3
 801b19c:	f00d fb00 	bl	80287a0 <memset>
  memset(&ca, 0, sizeof(ca));
 801b1a0:	f107 030c 	add.w	r3, r7, #12
 801b1a4:	2250      	movs	r2, #80	@ 0x50
 801b1a6:	2100      	movs	r1, #0
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f00d faf9 	bl	80287a0 <memset>

  if (tls->ca_der.len > 0) {
 801b1ae:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b1b2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	f000 8134 	beq.w	801b424 <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 801b1bc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b1c0:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 801b1c4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b1c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801b1cc:	f107 020c 	add.w	r2, r7, #12
 801b1d0:	4619      	mov	r1, r3
 801b1d2:	f7ff f94f 	bl	801a474 <mg_tls_parse_cert_der>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	da0a      	bge.n	801b1f2 <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 801b1dc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b1e0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b1e4:	4970      	ldr	r1, [pc, #448]	@ (801b3a8 <mg_tls_client_recv_cert+0x3b4>)
 801b1e6:	6818      	ldr	r0, [r3, #0]
 801b1e8:	f7ee fbb6 	bl	8009958 <mg_error>
      return -1;
 801b1ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b1f0:	e16d      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 801b1f2:	4b65      	ldr	r3, [pc, #404]	@ (801b388 <mg_tls_client_recv_cert+0x394>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2b03      	cmp	r3, #3
 801b1f8:	f340 8114 	ble.w	801b424 <mg_tls_client_recv_cert+0x430>
 801b1fc:	4b63      	ldr	r3, [pc, #396]	@ (801b38c <mg_tls_client_recv_cert+0x398>)
 801b1fe:	f642 7262 	movw	r2, #12130	@ 0x2f62
 801b202:	4963      	ldr	r1, [pc, #396]	@ (801b390 <mg_tls_client_recv_cert+0x39c>)
 801b204:	2004      	movs	r0, #4
 801b206:	f7f4 fa9d 	bl	800f744 <mg_log_prefix>
 801b20a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b20e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801b212:	689a      	ldr	r2, [r3, #8]
 801b214:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b218:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801b21c:	685b      	ldr	r3, [r3, #4]
 801b21e:	4963      	ldr	r1, [pc, #396]	@ (801b3ac <mg_tls_client_recv_cert+0x3b8>)
 801b220:	4863      	ldr	r0, [pc, #396]	@ (801b3b0 <mg_tls_client_recv_cert+0x3bc>)
 801b222:	f7f4 fadf 	bl	800f7e4 <mg_log>
  }

  while (p < endp) {
 801b226:	e0fd      	b.n	801b424 <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 801b228:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801b22c:	1c53      	adds	r3, r2, #1
 801b22e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801b232:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801b236:	4613      	mov	r3, r2
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	4413      	add	r3, r2
 801b23c:	011b      	lsls	r3, r3, #4
 801b23e:	440b      	add	r3, r1
 801b240:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 801b244:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801b248:	781b      	ldrb	r3, [r3, #0]
 801b24a:	041a      	lsls	r2, r3, #16
 801b24c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801b250:	3301      	adds	r3, #1
 801b252:	781b      	ldrb	r3, [r3, #0]
 801b254:	021b      	lsls	r3, r3, #8
 801b256:	4313      	orrs	r3, r2
 801b258:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801b25c:	3202      	adds	r2, #2
 801b25e:	7812      	ldrb	r2, [r2, #0]
 801b260:	4313      	orrs	r3, r2
 801b262:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 801b266:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801b26a:	3303      	adds	r3, #3
 801b26c:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 801b270:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801b274:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801b278:	4413      	add	r3, r2
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	b21b      	sxth	r3, r3
 801b27e:	021b      	lsls	r3, r3, #8
 801b280:	b21a      	sxth	r2, r3
 801b282:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801b286:	3301      	adds	r3, #1
 801b288:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 801b28c:	440b      	add	r3, r1
 801b28e:	781b      	ldrb	r3, [r3, #0]
 801b290:	b21b      	sxth	r3, r3
 801b292:	4313      	orrs	r3, r2
 801b294:	b21b      	sxth	r3, r3
 801b296:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 801b29a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d00a      	beq.n	801b2b8 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 801b2a2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b2a6:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b2aa:	4942      	ldr	r1, [pc, #264]	@ (801b3b4 <mg_tls_client_recv_cert+0x3c0>)
 801b2ac:	6818      	ldr	r0, [r3, #0]
 801b2ae:	f7ee fb53 	bl	8009958 <mg_error>
      return -1;
 801b2b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b2b6:	e10a      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 801b2b8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801b2bc:	3302      	adds	r3, #2
 801b2be:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801b2c2:	4413      	add	r3, r2
 801b2c4:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 801b2c8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 801b2cc:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801b2d0:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801b2d4:	f7ff f8ce 	bl	801a474 <mg_tls_parse_cert_der>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	da0a      	bge.n	801b2f4 <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 801b2de:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b2e2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b2e6:	4934      	ldr	r1, [pc, #208]	@ (801b3b8 <mg_tls_client_recv_cert+0x3c4>)
 801b2e8:	6818      	ldr	r0, [r3, #0]
 801b2ea:	f7ee fb35 	bl	8009958 <mg_error>
      return -1;
 801b2ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b2f2:	e0ec      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 801b2f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801b2f8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	d12d      	bne.n	801b35c <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 801b300:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b304:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801b308:	461a      	mov	r2, r3
 801b30a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 801b30e:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801b312:	f7ff fc63 	bl	801abdc <mg_tls_verify_cert_san>
 801b316:	4603      	mov	r3, r0
 801b318:	2b00      	cmp	r3, #0
 801b31a:	dc0a      	bgt.n	801b332 <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 801b31c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b320:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b324:	4925      	ldr	r1, [pc, #148]	@ (801b3bc <mg_tls_client_recv_cert+0x3c8>)
 801b326:	6818      	ldr	r0, [r3, #0]
 801b328:	f7ee fb16 	bl	8009958 <mg_error>
        return -1;
 801b32c:	f04f 33ff 	mov.w	r3, #4294967295
 801b330:	e0cd      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 801b332:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b336:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801b33a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801b33e:	68d9      	ldr	r1, [r3, #12]
 801b340:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801b344:	691b      	ldr	r3, [r3, #16]
 801b346:	461a      	mov	r2, r3
 801b348:	f00d fa10 	bl	802876c <memmove>
      tls->pubkeysz = ci->pubkey.len;
 801b34c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801b350:	691a      	ldr	r2, [r3, #16]
 801b352:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b356:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 801b35a:	e033      	b.n	801b3c4 <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 801b35c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801b360:	3b50      	subs	r3, #80	@ 0x50
 801b362:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801b366:	4618      	mov	r0, r3
 801b368:	f7ff fcb8 	bl	801acdc <mg_tls_verify_cert_signature>
 801b36c:	4603      	mov	r3, r0
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d128      	bne.n	801b3c4 <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 801b372:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b376:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b37a:	4911      	ldr	r1, [pc, #68]	@ (801b3c0 <mg_tls_client_recv_cert+0x3cc>)
 801b37c:	6818      	ldr	r0, [r3, #0]
 801b37e:	f7ee faeb 	bl	8009958 <mg_error>
        return -1;
 801b382:	f04f 33ff 	mov.w	r3, #4294967295
 801b386:	e0a2      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
 801b388:	2400025c 	.word	0x2400025c
 801b38c:	08031420 	.word	0x08031420
 801b390:	0802d330 	.word	0x0802d330
 801b394:	0802f698 	.word	0x0802f698
 801b398:	0802f6b0 	.word	0x0802f6b0
 801b39c:	0802f6e0 	.word	0x0802f6e0
 801b3a0:	0802f6fc 	.word	0x0802f6fc
 801b3a4:	0802f724 	.word	0x0802f724
 801b3a8:	0802f748 	.word	0x0802f748
 801b3ac:	080143c1 	.word	0x080143c1
 801b3b0:	0802f768 	.word	0x0802f768
 801b3b4:	0802f778 	.word	0x0802f778
 801b3b8:	0802f7a4 	.word	0x0802f7a4
 801b3bc:	0802f7c0 	.word	0x0802f7c0
 801b3c0:	0802f7dc 	.word	0x0802f7dc
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 801b3c4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b3c8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801b3cc:	691a      	ldr	r2, [r3, #16]
 801b3ce:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801b3d2:	691b      	ldr	r3, [r3, #16]
 801b3d4:	429a      	cmp	r2, r3
 801b3d6:	d116      	bne.n	801b406 <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 801b3d8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b3dc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801b3e0:	68d8      	ldr	r0, [r3, #12]
 801b3e2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801b3e6:	68d9      	ldr	r1, [r3, #12]
 801b3e8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b3ec:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801b3f0:	691b      	ldr	r3, [r3, #16]
 801b3f2:	461a      	mov	r2, r3
 801b3f4:	f00d f9aa 	bl	802874c <memcmp>
 801b3f8:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d103      	bne.n	801b406 <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 801b3fe:	2301      	movs	r3, #1
 801b400:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 801b404:	e015      	b.n	801b432 <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 801b406:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801b40a:	2b07      	cmp	r3, #7
 801b40c:	d10a      	bne.n	801b424 <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 801b40e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b412:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b416:	4930      	ldr	r1, [pc, #192]	@ (801b4d8 <mg_tls_client_recv_cert+0x4e4>)
 801b418:	6818      	ldr	r0, [r3, #0]
 801b41a:	f7ee fa9d 	bl	8009958 <mg_error>
      return -1;
 801b41e:	f04f 33ff 	mov.w	r3, #4294967295
 801b422:	e054      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 801b424:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801b428:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801b42c:	429a      	cmp	r2, r3
 801b42e:	f4ff aefb 	bcc.w	801b228 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 801b432:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801b436:	2b00      	cmp	r3, #0
 801b438:	d135      	bne.n	801b4a6 <mg_tls_client_recv_cert+0x4b2>
 801b43a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b43e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801b442:	2b00      	cmp	r3, #0
 801b444:	d02f      	beq.n	801b4a6 <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 801b446:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	dd12      	ble.n	801b474 <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 801b44e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801b452:	1e5a      	subs	r2, r3, #1
 801b454:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801b458:	4613      	mov	r3, r2
 801b45a:	009b      	lsls	r3, r3, #2
 801b45c:	4413      	add	r3, r2
 801b45e:	011b      	lsls	r3, r3, #4
 801b460:	440b      	add	r3, r1
 801b462:	f107 020c 	add.w	r2, r7, #12
 801b466:	4611      	mov	r1, r2
 801b468:	4618      	mov	r0, r3
 801b46a:	f7ff fc37 	bl	801acdc <mg_tls_verify_cert_signature>
 801b46e:	4603      	mov	r3, r0
    if (certnum < 1 ||
 801b470:	2b00      	cmp	r3, #0
 801b472:	d10a      	bne.n	801b48a <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 801b474:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b478:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b47c:	4917      	ldr	r1, [pc, #92]	@ (801b4dc <mg_tls_client_recv_cert+0x4e8>)
 801b47e:	6818      	ldr	r0, [r3, #0]
 801b480:	f7ee fa6a 	bl	8009958 <mg_error>
      return -1;
 801b484:	f04f 33ff 	mov.w	r3, #4294967295
 801b488:	e021      	b.n	801b4ce <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 801b48a:	4b15      	ldr	r3, [pc, #84]	@ (801b4e0 <mg_tls_client_recv_cert+0x4ec>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	2b03      	cmp	r3, #3
 801b490:	dd09      	ble.n	801b4a6 <mg_tls_client_recv_cert+0x4b2>
 801b492:	4b14      	ldr	r3, [pc, #80]	@ (801b4e4 <mg_tls_client_recv_cert+0x4f0>)
 801b494:	f642 7297 	movw	r2, #12183	@ 0x2f97
 801b498:	4913      	ldr	r1, [pc, #76]	@ (801b4e8 <mg_tls_client_recv_cert+0x4f4>)
 801b49a:	2004      	movs	r0, #4
 801b49c:	f7f4 f952 	bl	800f744 <mg_log_prefix>
 801b4a0:	4812      	ldr	r0, [pc, #72]	@ (801b4ec <mg_tls_client_recv_cert+0x4f8>)
 801b4a2:	f7f4 f99f 	bl	800f7e4 <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 801b4a6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b4aa:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b4ae:	6818      	ldr	r0, [r3, #0]
 801b4b0:	f7fd f8a0 	bl	80185f4 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 801b4b4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801b4b8:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 801b4bc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801b4c0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	6818      	ldr	r0, [r3, #0]
 801b4c8:	f7fd fdfc 	bl	80190c4 <mg_tls_calc_cert_verify_hash>
  return 0;
 801b4cc:	2300      	movs	r3, #0
}
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	bd80      	pop	{r7, pc}
 801b4d8:	0802f800 	.word	0x0802f800
 801b4dc:	0802f824 	.word	0x0802f824
 801b4e0:	2400025c 	.word	0x2400025c
 801b4e4:	08031420 	.word	0x08031420
 801b4e8:	0802d330 	.word	0x0802d330
 801b4ec:	0802f838 	.word	0x0802f838

0801b4f0 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 801b4f0:	b5b0      	push	{r4, r5, r7, lr}
 801b4f2:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 801b4f6:	af04      	add	r7, sp, #16
 801b4f8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b4fc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b500:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b502:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b506:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b510:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801b514:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b518:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b51c:	6818      	ldr	r0, [r3, #0]
 801b51e:	f7fd fcb5 	bl	8018e8c <mg_tls_recv_record>
 801b522:	4603      	mov	r3, r0
 801b524:	2b00      	cmp	r3, #0
 801b526:	da02      	bge.n	801b52e <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 801b528:	f04f 33ff 	mov.w	r3, #4294967295
 801b52c:	e1f9      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801b52e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b532:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b53a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b53e:	695b      	ldr	r3, [r3, #20]
 801b540:	4413      	add	r3, r2
 801b542:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 801b546:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b54a:	781b      	ldrb	r3, [r3, #0]
 801b54c:	2b0f      	cmp	r3, #15
 801b54e:	d00e      	beq.n	801b56e <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 801b550:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b554:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 801b556:	461a      	mov	r2, r3
 801b558:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b55c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b560:	49cb      	ldr	r1, [pc, #812]	@ (801b890 <mg_tls_client_recv_cert_verify+0x3a0>)
 801b562:	6818      	ldr	r0, [r3, #0]
 801b564:	f7ee f9f8 	bl	8009958 <mg_error>
    return -1;
 801b568:	f04f 33ff 	mov.w	r3, #4294967295
 801b56c:	e1d9      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 801b56e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b572:	699b      	ldr	r3, [r3, #24]
 801b574:	2b07      	cmp	r3, #7
 801b576:	d80d      	bhi.n	801b594 <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 801b578:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b57c:	699a      	ldr	r2, [r3, #24]
 801b57e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b582:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b586:	49c3      	ldr	r1, [pc, #780]	@ (801b894 <mg_tls_client_recv_cert_verify+0x3a4>)
 801b588:	6818      	ldr	r0, [r3, #0]
 801b58a:	f7ee f9e5 	bl	8009958 <mg_error>
             tls->recv_len);
    return -1;
 801b58e:	f04f 33ff 	mov.w	r3, #4294967295
 801b592:	e1c6      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 801b594:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b598:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d008      	beq.n	801b5b2 <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 801b5a0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b5a4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b5a8:	6818      	ldr	r0, [r3, #0]
 801b5aa:	f7fd f823 	bl	80185f4 <mg_tls_drop_message>
    return 0;
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	e1b7      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 801b5b2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b5b6:	3304      	adds	r3, #4
 801b5b8:	781b      	ldrb	r3, [r3, #0]
 801b5ba:	b21b      	sxth	r3, r3
 801b5bc:	021b      	lsls	r3, r3, #8
 801b5be:	b21a      	sxth	r2, r3
 801b5c0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b5c4:	3305      	adds	r3, #5
 801b5c6:	781b      	ldrb	r3, [r3, #0]
 801b5c8:	b21b      	sxth	r3, r3
 801b5ca:	4313      	orrs	r3, r2
 801b5cc:	b21b      	sxth	r3, r3
 801b5ce:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 801b5d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b5d6:	3306      	adds	r3, #6
 801b5d8:	781b      	ldrb	r3, [r3, #0]
 801b5da:	b21b      	sxth	r3, r3
 801b5dc:	021b      	lsls	r3, r3, #8
 801b5de:	b21a      	sxth	r2, r3
 801b5e0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b5e4:	3307      	adds	r3, #7
 801b5e6:	781b      	ldrb	r3, [r3, #0]
 801b5e8:	b21b      	sxth	r3, r3
 801b5ea:	4313      	orrs	r3, r2
 801b5ec:	b21b      	sxth	r3, r3
 801b5ee:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 801b5f2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801b5f6:	3308      	adds	r3, #8
 801b5f8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 801b5fc:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801b600:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b604:	699b      	ldr	r3, [r3, #24]
 801b606:	3b08      	subs	r3, #8
 801b608:	429a      	cmp	r2, r3
 801b60a:	d910      	bls.n	801b62e <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 801b60c:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 801b610:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b614:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 801b616:	3b08      	subs	r3, #8
 801b618:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 801b61c:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 801b620:	499d      	ldr	r1, [pc, #628]	@ (801b898 <mg_tls_client_recv_cert_verify+0x3a8>)
 801b622:	6800      	ldr	r0, [r0, #0]
 801b624:	f7ee f998 	bl	8009958 <mg_error>
    return -1;
 801b628:	f04f 33ff 	mov.w	r3, #4294967295
 801b62c:	e179      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 801b62e:	4b9b      	ldr	r3, [pc, #620]	@ (801b89c <mg_tls_client_recv_cert_verify+0x3ac>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	2b03      	cmp	r3, #3
 801b634:	dd0e      	ble.n	801b654 <mg_tls_client_recv_cert_verify+0x164>
 801b636:	4b9a      	ldr	r3, [pc, #616]	@ (801b8a0 <mg_tls_client_recv_cert_verify+0x3b0>)
 801b638:	f642 72c1 	movw	r2, #12225	@ 0x2fc1
 801b63c:	4999      	ldr	r1, [pc, #612]	@ (801b8a4 <mg_tls_client_recv_cert_verify+0x3b4>)
 801b63e:	2004      	movs	r0, #4
 801b640:	f7f4 f880 	bl	800f744 <mg_log_prefix>
 801b644:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801b648:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801b64c:	4619      	mov	r1, r3
 801b64e:	4896      	ldr	r0, [pc, #600]	@ (801b8a8 <mg_tls_client_recv_cert_verify+0x3b8>)
 801b650:	f7f4 f8c8 	bl	800f7e4 <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 801b654:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801b658:	f640 0204 	movw	r2, #2052	@ 0x804
 801b65c:	4293      	cmp	r3, r2
 801b65e:	d173      	bne.n	801b748 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801b660:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b664:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801b668:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b66c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 801b670:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 801b674:	4619      	mov	r1, r3
 801b676:	f7fc fe43 	bl	8018300 <mg_der_parse>
 801b67a:	4603      	mov	r3, r0
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	dd1d      	ble.n	801b6bc <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801b680:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 801b684:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801b688:	4611      	mov	r1, r2
 801b68a:	4618      	mov	r0, r3
 801b68c:	f7fc fe98 	bl	80183c0 <mg_der_next>
 801b690:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801b692:	2b00      	cmp	r3, #0
 801b694:	dd12      	ble.n	801b6bc <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801b696:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801b69a:	2b02      	cmp	r3, #2
 801b69c:	d10e      	bne.n	801b6bc <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801b69e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 801b6a2:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801b6a6:	4611      	mov	r1, r2
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7fc fe89 	bl	80183c0 <mg_der_next>
 801b6ae:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	dd03      	ble.n	801b6bc <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801b6b4:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 801b6b8:	2b02      	cmp	r3, #2
 801b6ba:	d00a      	beq.n	801b6d2 <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 801b6bc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b6c0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b6c4:	4979      	ldr	r1, [pc, #484]	@ (801b8ac <mg_tls_client_recv_cert_verify+0x3bc>)
 801b6c6:	6818      	ldr	r0, [r3, #0]
 801b6c8:	f7ee f946 	bl	8009958 <mg_error>
      return -1;
 801b6cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b6d0:	e127      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801b6d2:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 801b6d6:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 801b6da:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 801b6de:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 801b6e2:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801b6e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b6ea:	9203      	str	r2, [sp, #12]
 801b6ec:	f107 0208 	add.w	r2, r7, #8
 801b6f0:	9202      	str	r2, [sp, #8]
 801b6f2:	9301      	str	r3, [sp, #4]
 801b6f4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801b6f8:	9300      	str	r3, [sp, #0]
 801b6fa:	462b      	mov	r3, r5
 801b6fc:	4622      	mov	r2, r4
 801b6fe:	f003 ff2c 	bl	801f55a <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 801b702:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b706:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801b70a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 801b70e:	2bbc      	cmp	r3, #188	@ 0xbc
 801b710:	d00a      	beq.n	801b728 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 801b712:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b716:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b71a:	4965      	ldr	r1, [pc, #404]	@ (801b8b0 <mg_tls_client_recv_cert_verify+0x3c0>)
 801b71c:	6818      	ldr	r0, [r3, #0]
 801b71e:	f7ee f91b 	bl	8009958 <mg_error>
      return -1;
 801b722:	f04f 33ff 	mov.w	r3, #4294967295
 801b726:	e0fc      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 801b728:	4b5c      	ldr	r3, [pc, #368]	@ (801b89c <mg_tls_client_recv_cert_verify+0x3ac>)
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	2b02      	cmp	r3, #2
 801b72e:	f340 80f0 	ble.w	801b912 <mg_tls_client_recv_cert_verify+0x422>
 801b732:	4b5b      	ldr	r3, [pc, #364]	@ (801b8a0 <mg_tls_client_recv_cert_verify+0x3b0>)
 801b734:	f642 72d6 	movw	r2, #12246	@ 0x2fd6
 801b738:	495a      	ldr	r1, [pc, #360]	@ (801b8a4 <mg_tls_client_recv_cert_verify+0x3b4>)
 801b73a:	2003      	movs	r0, #3
 801b73c:	f7f4 f802 	bl	800f744 <mg_log_prefix>
 801b740:	485c      	ldr	r0, [pc, #368]	@ (801b8b4 <mg_tls_client_recv_cert_verify+0x3c4>)
 801b742:	f7f4 f84f 	bl	800f7e4 <mg_log>
 801b746:	e0e4      	b.n	801b912 <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 801b748:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801b74c:	f240 4203 	movw	r2, #1027	@ 0x403
 801b750:	4293      	cmp	r3, r2
 801b752:	f040 80c8 	bne.w	801b8e6 <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 801b756:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801b75a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801b75e:	4619      	mov	r1, r3
 801b760:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 801b764:	f7fc fea7 	bl	80184b6 <mg_der_to_tlv>
 801b768:	4603      	mov	r3, r0
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	da0a      	bge.n	801b784 <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 801b76e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b772:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b776:	4950      	ldr	r1, [pc, #320]	@ (801b8b8 <mg_tls_client_recv_cert_verify+0x3c8>)
 801b778:	6818      	ldr	r0, [r3, #0]
 801b77a:	f7ee f8ed 	bl	8009958 <mg_error>
      return -1;
 801b77e:	f04f 33ff 	mov.w	r3, #4294967295
 801b782:	e0ce      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 801b784:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 801b788:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 801b78c:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 801b790:	4618      	mov	r0, r3
 801b792:	f7fc fe90 	bl	80184b6 <mg_der_to_tlv>
 801b796:	4603      	mov	r3, r0
 801b798:	2b00      	cmp	r3, #0
 801b79a:	da0a      	bge.n	801b7b2 <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 801b79c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b7a0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b7a4:	4945      	ldr	r1, [pc, #276]	@ (801b8bc <mg_tls_client_recv_cert_verify+0x3cc>)
 801b7a6:	6818      	ldr	r0, [r3, #0]
 801b7a8:	f7ee f8d6 	bl	8009958 <mg_error>
      return -1;
 801b7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801b7b0:	e0b7      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 801b7b2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801b7b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801b7ba:	18d0      	adds	r0, r2, r3
 801b7bc:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801b7c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801b7c4:	1ad3      	subs	r3, r2, r3
 801b7c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801b7ca:	4619      	mov	r1, r3
 801b7cc:	f7fc fe73 	bl	80184b6 <mg_der_to_tlv>
 801b7d0:	4603      	mov	r3, r0
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	da0a      	bge.n	801b7ec <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 801b7d6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b7da:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b7de:	4938      	ldr	r1, [pc, #224]	@ (801b8c0 <mg_tls_client_recv_cert_verify+0x3d0>)
 801b7e0:	6818      	ldr	r0, [r3, #0]
 801b7e2:	f7ee f8b9 	bl	8009958 <mg_error>
      return -1;
 801b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ea:	e09a      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 801b7ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801b7f0:	2b20      	cmp	r3, #32
 801b7f2:	d90a      	bls.n	801b80a <mg_tls_client_recv_cert_verify+0x31a>
 801b7f4:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801b7f8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801b7fc:	3b20      	subs	r3, #32
 801b7fe:	4413      	add	r3, r2
 801b800:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801b804:	2320      	movs	r3, #32
 801b806:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 801b80a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801b80e:	2b20      	cmp	r3, #32
 801b810:	d90a      	bls.n	801b828 <mg_tls_client_recv_cert_verify+0x338>
 801b812:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801b816:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801b81a:	3b20      	subs	r3, #32
 801b81c:	4413      	add	r3, r2
 801b81e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801b822:	2320      	movs	r3, #32
 801b824:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 801b828:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 801b82c:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 801b830:	f107 0308 	add.w	r3, r7, #8
 801b834:	4618      	mov	r0, r3
 801b836:	f00c ff99 	bl	802876c <memmove>
    memmove(sig + 32, s.value, s.len);
 801b83a:	f107 0308 	add.w	r3, r7, #8
 801b83e:	3320      	adds	r3, #32
 801b840:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801b844:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 801b848:	4618      	mov	r0, r3
 801b84a:	f00c ff8f 	bl	802876c <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 801b84e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b852:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 801b856:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801b85a:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 801b85e:	f004 feab 	bl	80205b8 <mg_uecc_secp256r1>
 801b862:	4602      	mov	r2, r0
 801b864:	f107 0308 	add.w	r3, r7, #8
 801b868:	9200      	str	r2, [sp, #0]
 801b86a:	2220      	movs	r2, #32
 801b86c:	4629      	mov	r1, r5
 801b86e:	4620      	mov	r0, r4
 801b870:	f006 f83e 	bl	80218f0 <mg_uecc_verify>
 801b874:	4603      	mov	r3, r0
 801b876:	2b01      	cmp	r3, #1
 801b878:	d026      	beq.n	801b8c8 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 801b87a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b87e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b882:	4910      	ldr	r1, [pc, #64]	@ (801b8c4 <mg_tls_client_recv_cert_verify+0x3d4>)
 801b884:	6818      	ldr	r0, [r3, #0]
 801b886:	f7ee f867 	bl	8009958 <mg_error>
      return -1;
 801b88a:	f04f 33ff 	mov.w	r3, #4294967295
 801b88e:	e048      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
 801b890:	0802f87c 	.word	0x0802f87c
 801b894:	0802f8b4 	.word	0x0802f8b4
 801b898:	0802f8e8 	.word	0x0802f8e8
 801b89c:	2400025c 	.word	0x2400025c
 801b8a0:	08031438 	.word	0x08031438
 801b8a4:	0802d330 	.word	0x0802d330
 801b8a8:	0802f920 	.word	0x0802f920
 801b8ac:	0802f950 	.word	0x0802f950
 801b8b0:	0802f964 	.word	0x0802f964
 801b8b4:	0802f994 	.word	0x0802f994
 801b8b8:	0802f9c0 	.word	0x0802f9c0
 801b8bc:	0802f9f4 	.word	0x0802f9f4
 801b8c0:	0802fa18 	.word	0x0802fa18
 801b8c4:	0802fa40 	.word	0x0802fa40
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 801b8c8:	4b18      	ldr	r3, [pc, #96]	@ (801b92c <mg_tls_client_recv_cert_verify+0x43c>)
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	2b02      	cmp	r3, #2
 801b8ce:	dd20      	ble.n	801b912 <mg_tls_client_recv_cert_verify+0x422>
 801b8d0:	4b17      	ldr	r3, [pc, #92]	@ (801b930 <mg_tls_client_recv_cert_verify+0x440>)
 801b8d2:	f642 72f3 	movw	r2, #12275	@ 0x2ff3
 801b8d6:	4917      	ldr	r1, [pc, #92]	@ (801b934 <mg_tls_client_recv_cert_verify+0x444>)
 801b8d8:	2003      	movs	r0, #3
 801b8da:	f7f3 ff33 	bl	800f744 <mg_log_prefix>
 801b8de:	4816      	ldr	r0, [pc, #88]	@ (801b938 <mg_tls_client_recv_cert_verify+0x448>)
 801b8e0:	f7f3 ff80 	bl	800f7e4 <mg_log>
 801b8e4:	e015      	b.n	801b912 <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 801b8e6:	4b11      	ldr	r3, [pc, #68]	@ (801b92c <mg_tls_client_recv_cert_verify+0x43c>)
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	dd0e      	ble.n	801b90c <mg_tls_client_recv_cert_verify+0x41c>
 801b8ee:	4b10      	ldr	r3, [pc, #64]	@ (801b930 <mg_tls_client_recv_cert_verify+0x440>)
 801b8f0:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 801b8f4:	490f      	ldr	r1, [pc, #60]	@ (801b934 <mg_tls_client_recv_cert_verify+0x444>)
 801b8f6:	2001      	movs	r0, #1
 801b8f8:	f7f3 ff24 	bl	800f744 <mg_log_prefix>
 801b8fc:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801b900:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801b904:	4619      	mov	r1, r3
 801b906:	480d      	ldr	r0, [pc, #52]	@ (801b93c <mg_tls_client_recv_cert_verify+0x44c>)
 801b908:	f7f3 ff6c 	bl	800f7e4 <mg_log>
              siglen));
    return -1;
 801b90c:	f04f 33ff 	mov.w	r3, #4294967295
 801b910:	e007      	b.n	801b922 <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 801b912:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801b916:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801b91a:	6818      	ldr	r0, [r3, #0]
 801b91c:	f7fc fe6a 	bl	80185f4 <mg_tls_drop_message>
  return 0;
 801b920:	2300      	movs	r3, #0
}
 801b922:	4618      	mov	r0, r3
 801b924:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 801b928:	46bd      	mov	sp, r7
 801b92a:	bdb0      	pop	{r4, r5, r7, pc}
 801b92c:	2400025c 	.word	0x2400025c
 801b930:	08031438 	.word	0x08031438
 801b934:	0802d330 	.word	0x0802d330
 801b938:	0802fa70 	.word	0x0802fa70
 801b93c:	0802fa9c 	.word	0x0802fa9c

0801b940 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 801b940:	b580      	push	{r7, lr}
 801b942:	b084      	sub	sp, #16
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b94e:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f7fd fa9b 	bl	8018e8c <mg_tls_recv_record>
 801b956:	4603      	mov	r3, r0
 801b958:	2b00      	cmp	r3, #0
 801b95a:	da02      	bge.n	801b962 <mg_tls_client_recv_finish+0x22>
    return -1;
 801b95c:	f04f 33ff 	mov.w	r3, #4294967295
 801b960:	e017      	b.n	801b992 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	695b      	ldr	r3, [r3, #20]
 801b96a:	4413      	add	r3, r2
 801b96c:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 801b96e:	68bb      	ldr	r3, [r7, #8]
 801b970:	781b      	ldrb	r3, [r3, #0]
 801b972:	2b14      	cmp	r3, #20
 801b974:	d009      	beq.n	801b98a <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	461a      	mov	r2, r3
 801b97c:	4907      	ldr	r1, [pc, #28]	@ (801b99c <mg_tls_client_recv_finish+0x5c>)
 801b97e:	6878      	ldr	r0, [r7, #4]
 801b980:	f7ed ffea 	bl	8009958 <mg_error>
    return -1;
 801b984:	f04f 33ff 	mov.w	r3, #4294967295
 801b988:	e003      	b.n	801b992 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 801b98a:	6878      	ldr	r0, [r7, #4]
 801b98c:	f7fc fe32 	bl	80185f4 <mg_tls_drop_message>
  return 0;
 801b990:	2300      	movs	r3, #0
}
 801b992:	4618      	mov	r0, r3
 801b994:	3710      	adds	r7, #16
 801b996:	46bd      	mov	sp, r7
 801b998:	bd80      	pop	{r7, pc}
 801b99a:	bf00      	nop
 801b99c:	0802fad4 	.word	0x0802fad4

0801b9a0 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b0b4      	sub	sp, #208	@ 0xd0
 801b9a4:	af02      	add	r7, sp, #8
 801b9a6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801b9ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801b9b2:	4b1a      	ldr	r3, [pc, #104]	@ (801ba1c <mg_tls_client_send_finish+0x7c>)
 801b9b4:	60fb      	str	r3, [r7, #12]
 801b9b6:	f107 0310 	add.w	r3, r7, #16
 801b9ba:	2220      	movs	r2, #32
 801b9bc:	2100      	movs	r1, #0
 801b9be:	4618      	mov	r0, r3
 801b9c0:	f00c feee 	bl	80287a0 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801b9c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b9c8:	f103 0120 	add.w	r1, r3, #32
 801b9cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801b9d0:	2270      	movs	r2, #112	@ 0x70
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f00c feca 	bl	802876c <memmove>
  mg_sha256_final(hash, &sha256);
 801b9d8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801b9dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801b9e0:	4611      	mov	r1, r2
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	f7fa fc5f 	bl	80162a6 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 801b9e8:	f107 000c 	add.w	r0, r7, #12
 801b9ec:	3004      	adds	r0, #4
 801b9ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b9f2:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 801b9f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801b9fa:	2220      	movs	r2, #32
 801b9fc:	9200      	str	r2, [sp, #0]
 801b9fe:	2220      	movs	r2, #32
 801ba00:	f7fa fda5 	bl	801654e <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801ba04:	f107 010c 	add.w	r1, r7, #12
 801ba08:	2316      	movs	r3, #22
 801ba0a:	2224      	movs	r2, #36	@ 0x24
 801ba0c:	6878      	ldr	r0, [r7, #4]
 801ba0e:	f7fd f941 	bl	8018c94 <mg_tls_encrypt>
}
 801ba12:	bf00      	nop
 801ba14:	37c8      	adds	r7, #200	@ 0xc8
 801ba16:	46bd      	mov	sp, r7
 801ba18:	bd80      	pop	{r7, pc}
 801ba1a:	bf00      	nop
 801ba1c:	20000014 	.word	0x20000014

0801ba20 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b0e4      	sub	sp, #400	@ 0x190
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ba2a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ba2e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801ba30:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ba34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ba3e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 801ba42:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ba46:	781b      	ldrb	r3, [r3, #0]
 801ba48:	2b05      	cmp	r3, #5
 801ba4a:	f200 80da 	bhi.w	801bc02 <mg_tls_client_handshake+0x1e2>
 801ba4e:	a201      	add	r2, pc, #4	@ (adr r2, 801ba54 <mg_tls_client_handshake+0x34>)
 801ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba54:	0801ba6d 	.word	0x0801ba6d
 801ba58:	0801ba83 	.word	0x0801ba83
 801ba5c:	0801baa1 	.word	0x0801baa1
 801ba60:	0801babf 	.word	0x0801babf
 801ba64:	0801badd 	.word	0x0801badd
 801ba68:	0801bafb 	.word	0x0801bafb
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 801ba6c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ba70:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ba74:	6818      	ldr	r0, [r3, #0]
 801ba76:	f7fe f90b 	bl	8019c90 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801ba7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ba7e:	2201      	movs	r2, #1
 801ba80:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 801ba82:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801ba86:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801ba8a:	6818      	ldr	r0, [r3, #0]
 801ba8c:	f7fe fae2 	bl	801a054 <mg_tls_client_recv_hello>
 801ba90:	4603      	mov	r3, r0
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	f2c0 80c2 	blt.w	801bc1c <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 801ba98:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801ba9c:	2202      	movs	r2, #2
 801ba9e:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 801baa0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801baa4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801baa8:	6818      	ldr	r0, [r3, #0]
 801baaa:	f7fe fc0d 	bl	801a2c8 <mg_tls_client_recv_ext>
 801baae:	4603      	mov	r3, r0
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	f2c0 80b5 	blt.w	801bc20 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 801bab6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801baba:	2203      	movs	r2, #3
 801babc:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 801babe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bac2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bac6:	6818      	ldr	r0, [r3, #0]
 801bac8:	f7ff fa94 	bl	801aff4 <mg_tls_client_recv_cert>
 801bacc:	4603      	mov	r3, r0
 801bace:	2b00      	cmp	r3, #0
 801bad0:	f2c0 80a8 	blt.w	801bc24 <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 801bad4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bad8:	2204      	movs	r2, #4
 801bada:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 801badc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bae0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bae4:	6818      	ldr	r0, [r3, #0]
 801bae6:	f7ff fd03 	bl	801b4f0 <mg_tls_client_recv_cert_verify>
 801baea:	4603      	mov	r3, r0
 801baec:	2b00      	cmp	r3, #0
 801baee:	f2c0 809b 	blt.w	801bc28 <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 801baf2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801baf6:	2205      	movs	r2, #5
 801baf8:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 801bafa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bafe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bb02:	6818      	ldr	r0, [r3, #0]
 801bb04:	f7ff ff1c 	bl	801b940 <mg_tls_client_recv_finish>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	f2c0 808e 	blt.w	801bc2c <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 801bb10:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bb14:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d04b      	beq.n	801bbb4 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 801bb1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bb20:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 801bb24:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801bb28:	22c0      	movs	r2, #192	@ 0xc0
 801bb2a:	4619      	mov	r1, r3
 801bb2c:	f00e f867 	bl	8029bfe <memcpy>
        mg_tls_generate_application_keys(c);
 801bb30:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bb34:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bb38:	6818      	ldr	r0, [r3, #0]
 801bb3a:	f7fc ff93 	bl	8018a64 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 801bb3e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bb42:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 801bb46:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bb4a:	4610      	mov	r0, r2
 801bb4c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801bb50:	22c0      	movs	r2, #192	@ 0xc0
 801bb52:	4619      	mov	r1, r3
 801bb54:	f00e f853 	bl	8029bfe <memcpy>
        tls->enc = hs_keys;
 801bb58:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bb5c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801bb60:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 801bb64:	22c0      	movs	r2, #192	@ 0xc0
 801bb66:	4618      	mov	r0, r3
 801bb68:	f00e f849 	bl	8029bfe <memcpy>
        mg_tls_server_send_cert(c);
 801bb6c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bb70:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bb74:	6818      	ldr	r0, [r3, #0]
 801bb76:	f7fd fda9 	bl	80196cc <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801bb7a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bb7e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bb82:	2101      	movs	r1, #1
 801bb84:	6818      	ldr	r0, [r3, #0]
 801bb86:	f7fd fec7 	bl	8019918 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801bb8a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bb8e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bb92:	6818      	ldr	r0, [r3, #0]
 801bb94:	f7ff ff04 	bl	801b9a0 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 801bb98:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bb9c:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801bba0:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 801bba4:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801bba8:	4611      	mov	r1, r2
 801bbaa:	22c0      	movs	r2, #192	@ 0xc0
 801bbac:	4618      	mov	r0, r3
 801bbae:	f00e f826 	bl	8029bfe <memcpy>
 801bbb2:	e00d      	b.n	801bbd0 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 801bbb4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bbb8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bbbc:	6818      	ldr	r0, [r3, #0]
 801bbbe:	f7ff feef 	bl	801b9a0 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 801bbc2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bbc6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bbca:	6818      	ldr	r0, [r3, #0]
 801bbcc:	f7fc ff4a 	bl	8018a64 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 801bbd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bbd4:	2206      	movs	r2, #6
 801bbd6:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801bbd8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bbdc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bbe0:	681a      	ldr	r2, [r3, #0]
 801bbe2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801bbe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bbea:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 801bbee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bbf2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	2106      	movs	r1, #6
 801bbfa:	6818      	ldr	r0, [r3, #0]
 801bbfc:	f7ed fe8c 	bl	8009918 <mg_call>
      break;
 801bc00:	e015      	b.n	801bc2e <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 801bc02:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801bc06:	781b      	ldrb	r3, [r3, #0]
 801bc08:	461a      	mov	r2, r3
 801bc0a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801bc0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801bc12:	4909      	ldr	r1, [pc, #36]	@ (801bc38 <mg_tls_client_handshake+0x218>)
 801bc14:	6818      	ldr	r0, [r3, #0]
 801bc16:	f7ed fe9f 	bl	8009958 <mg_error>
      break;
 801bc1a:	e008      	b.n	801bc2e <mg_tls_client_handshake+0x20e>
        break;
 801bc1c:	bf00      	nop
 801bc1e:	e006      	b.n	801bc2e <mg_tls_client_handshake+0x20e>
        break;
 801bc20:	bf00      	nop
 801bc22:	e004      	b.n	801bc2e <mg_tls_client_handshake+0x20e>
        break;
 801bc24:	bf00      	nop
 801bc26:	e002      	b.n	801bc2e <mg_tls_client_handshake+0x20e>
        break;
 801bc28:	bf00      	nop
 801bc2a:	e000      	b.n	801bc2e <mg_tls_client_handshake+0x20e>
        break;
 801bc2c:	bf00      	nop
  }
}
 801bc2e:	bf00      	nop
 801bc30:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}
 801bc38:	0802fb00 	.word	0x0802fb00

0801bc3c <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b084      	sub	sp, #16
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801bc4a:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	781b      	ldrb	r3, [r3, #0]
 801bc50:	2b07      	cmp	r3, #7
 801bc52:	d002      	beq.n	801bc5a <mg_tls_server_handshake+0x1e>
 801bc54:	2b08      	cmp	r3, #8
 801bc56:	d01c      	beq.n	801bc92 <mg_tls_server_handshake+0x56>
 801bc58:	e02f      	b.n	801bcba <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 801bc5a:	6878      	ldr	r0, [r7, #4]
 801bc5c:	f7fd fad4 	bl	8019208 <mg_tls_server_recv_hello>
 801bc60:	4603      	mov	r3, r0
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	db31      	blt.n	801bcca <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f7fd fc5a 	bl	8019520 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 801bc6c:	6878      	ldr	r0, [r7, #4]
 801bc6e:	f7fc fda9 	bl	80187c4 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 801bc72:	6878      	ldr	r0, [r7, #4]
 801bc74:	f7fd fd08 	bl	8019688 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 801bc78:	6878      	ldr	r0, [r7, #4]
 801bc7a:	f7fd fd27 	bl	80196cc <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 801bc7e:	2100      	movs	r1, #0
 801bc80:	6878      	ldr	r0, [r7, #4]
 801bc82:	f7fd fe49 	bl	8019918 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 801bc86:	6878      	ldr	r0, [r7, #4]
 801bc88:	f7fd ff7a 	bl	8019b80 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	2208      	movs	r2, #8
 801bc90:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 801bc92:	6878      	ldr	r0, [r7, #4]
 801bc94:	f7fd ffbc 	bl	8019c10 <mg_tls_server_recv_finish>
 801bc98:	4603      	mov	r3, r0
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	db17      	blt.n	801bcce <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f7fc fee0 	bl	8018a64 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	2209      	movs	r2, #9
 801bca8:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801bcb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bcb4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 801bcb8:	e00a      	b.n	801bcd0 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	4905      	ldr	r1, [pc, #20]	@ (801bcd8 <mg_tls_server_handshake+0x9c>)
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f7ed fe48 	bl	8009958 <mg_error>
      break;
 801bcc8:	e002      	b.n	801bcd0 <mg_tls_server_handshake+0x94>
        return;
 801bcca:	bf00      	nop
 801bccc:	e000      	b.n	801bcd0 <mg_tls_server_handshake+0x94>
        return;
 801bcce:	bf00      	nop
  }
}
 801bcd0:	3710      	adds	r7, #16
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	bd80      	pop	{r7, pc}
 801bcd6:	bf00      	nop
 801bcd8:	0802fb1c 	.word	0x0802fb1c

0801bcdc <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801bcdc:	b580      	push	{r7, lr}
 801bcde:	b084      	sub	sp, #16
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801bcea:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801bcf2:	f003 0302 	and.w	r3, r3, #2
 801bcf6:	b2db      	uxtb	r3, r3
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d003      	beq.n	801bd04 <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 801bcfc:	6878      	ldr	r0, [r7, #4]
 801bcfe:	f7ff fe8f 	bl	801ba20 <mg_tls_client_handshake>
 801bd02:	e00a      	b.n	801bd1a <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 801bd04:	6878      	ldr	r0, [r7, #4]
 801bd06:	f7ff ff99 	bl	801bc3c <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 801bd0a:	e006      	b.n	801bd1a <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	3304      	adds	r3, #4
 801bd10:	68ba      	ldr	r2, [r7, #8]
 801bd12:	2100      	movs	r1, #0
 801bd14:	4618      	mov	r0, r3
 801bd16:	f7f2 fcfd 	bl	800e714 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	68db      	ldr	r3, [r3, #12]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d00b      	beq.n	801bd3a <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	6859      	ldr	r1, [r3, #4]
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	68db      	ldr	r3, [r3, #12]
 801bd2a:	461a      	mov	r2, r3
 801bd2c:	6878      	ldr	r0, [r7, #4]
 801bd2e:	f7f6 f901 	bl	8011f34 <mg_io_send>
 801bd32:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801bd34:	68bb      	ldr	r3, [r7, #8]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	dce8      	bgt.n	801bd0c <mg_tls_handshake+0x30>
  } // if last chunk fails to be sent, it will be sent with first app data,
    // otherwise, it needs to be flushed
}
 801bd3a:	bf00      	nop
 801bd3c:	3710      	adds	r7, #16
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	bd80      	pop	{r7, pc}
	...

0801bd44 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 801bd44:	b590      	push	{r4, r7, lr}
 801bd46:	b09b      	sub	sp, #108	@ 0x6c
 801bd48:	af02      	add	r7, sp, #8
 801bd4a:	f107 0410 	add.w	r4, r7, #16
 801bd4e:	e884 0003 	stmia.w	r4, {r0, r1}
 801bd52:	f107 0108 	add.w	r1, r7, #8
 801bd56:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bd5e:	2300      	movs	r3, #0
 801bd60:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801bd62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801bd66:	4946      	ldr	r1, [pc, #280]	@ (801be80 <mg_parse_pem+0x13c>)
 801bd68:	4618      	mov	r0, r3
 801bd6a:	f7fb fceb 	bl	8017744 <mg_str_s>
 801bd6e:	f107 0318 	add.w	r3, r7, #24
 801bd72:	9300      	str	r3, [sp, #0]
 801bd74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801bd78:	cb0c      	ldmia	r3, {r2, r3}
 801bd7a:	f107 0110 	add.w	r1, r7, #16
 801bd7e:	c903      	ldmia	r1, {r0, r1}
 801bd80:	f7fb fdea 	bl	8017958 <mg_match>
 801bd84:	4603      	mov	r3, r0
 801bd86:	f083 0301 	eor.w	r3, r3, #1
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d00f      	beq.n	801bdb0 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 801bd90:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801bd92:	4638      	mov	r0, r7
 801bd94:	f107 0310 	add.w	r3, r7, #16
 801bd98:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bd9c:	f7fb fd1c 	bl	80177d8 <mg_strdup>
 801bda0:	4622      	mov	r2, r4
 801bda2:	463b      	mov	r3, r7
 801bda4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bda8:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 801bdac:	2300      	movs	r3, #0
 801bdae:	e062      	b.n	801be76 <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 801bdb0:	f107 0308 	add.w	r3, r7, #8
 801bdb4:	cb0c      	ldmia	r3, {r2, r3}
 801bdb6:	f107 0120 	add.w	r1, r7, #32
 801bdba:	c903      	ldmia	r1, {r0, r1}
 801bdbc:	f7fb fd43 	bl	8017846 <mg_strcmp>
 801bdc0:	4603      	mov	r3, r0
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d10a      	bne.n	801bddc <mg_parse_pem+0x98>
 801bdc6:	f107 0308 	add.w	r3, r7, #8
 801bdca:	cb0c      	ldmia	r3, {r2, r3}
 801bdcc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801bdd0:	c903      	ldmia	r1, {r0, r1}
 801bdd2:	f7fb fd38 	bl	8017846 <mg_strcmp>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d002      	beq.n	801bde2 <mg_parse_pem+0x9e>
    return -1;  // bad label
 801bddc:	f04f 33ff 	mov.w	r3, #4294967295
 801bde0:	e049      	b.n	801be76 <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801bde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bde4:	4619      	mov	r1, r3
 801bde6:	2001      	movs	r0, #1
 801bde8:	f00a fd10 	bl	802680c <calloc>
 801bdec:	4603      	mov	r3, r0
 801bdee:	653b      	str	r3, [r7, #80]	@ 0x50
 801bdf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d102      	bne.n	801bdfc <mg_parse_pem+0xb8>
    return -1;
 801bdf6:	f04f 33ff 	mov.w	r3, #4294967295
 801bdfa:	e03c      	b.n	801be76 <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801bdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 801be00:	e01c      	b.n	801be3c <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801be02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801be04:	781b      	ldrb	r3, [r3, #0]
 801be06:	2b20      	cmp	r3, #32
 801be08:	d014      	beq.n	801be34 <mg_parse_pem+0xf0>
 801be0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801be0c:	781b      	ldrb	r3, [r3, #0]
 801be0e:	2b0a      	cmp	r3, #10
 801be10:	d010      	beq.n	801be34 <mg_parse_pem+0xf0>
 801be12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801be14:	781b      	ldrb	r3, [r3, #0]
 801be16:	2b0d      	cmp	r3, #13
 801be18:	d00c      	beq.n	801be34 <mg_parse_pem+0xf0>
 801be1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801be1c:	781b      	ldrb	r3, [r3, #0]
 801be1e:	2b09      	cmp	r3, #9
 801be20:	d008      	beq.n	801be34 <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 801be22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801be24:	1c5a      	adds	r2, r3, #1
 801be26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801be28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801be2a:	4413      	add	r3, r2
 801be2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801be2e:	7812      	ldrb	r2, [r2, #0]
 801be30:	701a      	strb	r2, [r3, #0]
 801be32:	e000      	b.n	801be36 <mg_parse_pem+0xf2>
      continue;
 801be34:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801be36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801be38:	3301      	adds	r3, #1
 801be3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801be3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801be3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be40:	4413      	add	r3, r2
 801be42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801be44:	429a      	cmp	r2, r3
 801be46:	d3dc      	bcc.n	801be02 <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 801be48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801be4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801be4c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801be4e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801be50:	f7ec fede 	bl	8008c10 <mg_base64_decode>
 801be54:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 801be56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d105      	bne.n	801be68 <mg_parse_pem+0x124>
    free(s);
 801be5c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801be5e:	f00a fcf9 	bl	8026854 <free>
    return -1;
 801be62:	f04f 33ff 	mov.w	r3, #4294967295
 801be66:	e006      	b.n	801be76 <mg_parse_pem+0x132>
  }
  der->buf = s;
 801be68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801be6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801be6c:	601a      	str	r2, [r3, #0]
  der->len = m;
 801be6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801be70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801be72:	605a      	str	r2, [r3, #4]
  return 0;
 801be74:	2300      	movs	r3, #0
}
 801be76:	4618      	mov	r0, r3
 801be78:	3764      	adds	r7, #100	@ 0x64
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bd90      	pop	{r4, r7, pc}
 801be7e:	bf00      	nop
 801be80:	0802fb38 	.word	0x0802fb38

0801be84 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801be84:	b580      	push	{r7, lr}
 801be86:	b090      	sub	sp, #64	@ 0x40
 801be88:	af02      	add	r7, sp, #8
 801be8a:	6078      	str	r0, [r7, #4]
 801be8c:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 801be8e:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 801be92:	2001      	movs	r0, #1
 801be94:	f00a fcba 	bl	802680c <calloc>
 801be98:	4603      	mov	r3, r0
 801be9a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 801be9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d104      	bne.n	801beac <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 801bea2:	49a5      	ldr	r1, [pc, #660]	@ (801c138 <mg_tls_init+0x2b4>)
 801bea4:	6878      	ldr	r0, [r7, #4]
 801bea6:	f7ed fd57 	bl	8009958 <mg_error>
    return;
 801beaa:	e141      	b.n	801c130 <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801beb2:	f003 0302 	and.w	r3, r3, #2
 801beb6:	b2db      	uxtb	r3, r3
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d001      	beq.n	801bec0 <mg_tls_init+0x3c>
 801bebc:	2200      	movs	r2, #0
 801bebe:	e000      	b.n	801bec2 <mg_tls_init+0x3e>
 801bec0:	2207      	movs	r2, #7
  tls->state =
 801bec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bec4:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801bec6:	683b      	ldr	r3, [r7, #0]
 801bec8:	6a1a      	ldr	r2, [r3, #32]
 801beca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801becc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bed4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 801bed8:	687a      	ldr	r2, [r7, #4]
 801beda:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801bede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bee2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801beec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801bef0:	b2d9      	uxtb	r1, r3
 801bef2:	687a      	ldr	r2, [r7, #4]
 801bef4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801bef8:	f361 1386 	bfi	r3, r1, #6, #1
 801befc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 801bf00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf02:	3320      	adds	r3, #32
 801bf04:	4618      	mov	r0, r3
 801bf06:	f7f9 ff51 	bl	8015dac <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801bf0a:	683b      	ldr	r3, [r7, #0]
 801bf0c:	69db      	ldr	r3, [r3, #28]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d018      	beq.n	801bf44 <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801bf12:	683b      	ldr	r3, [r7, #0]
 801bf14:	69db      	ldr	r3, [r3, #28]
 801bf16:	2bfc      	cmp	r3, #252	@ 0xfc
 801bf18:	d904      	bls.n	801bf24 <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 801bf1a:	4988      	ldr	r1, [pc, #544]	@ (801c13c <mg_tls_init+0x2b8>)
 801bf1c:	6878      	ldr	r0, [r7, #4]
 801bf1e:	f7ed fd1b 	bl	8009958 <mg_error>
      return;
 801bf22:	e105      	b.n	801c130 <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 801bf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf26:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 801bf2a:	683b      	ldr	r3, [r7, #0]
 801bf2c:	699b      	ldr	r3, [r3, #24]
 801bf2e:	22fd      	movs	r2, #253	@ 0xfd
 801bf30:	4619      	mov	r1, r3
 801bf32:	f00c fc5c 	bl	80287ee <strncpy>
    tls->hostname[opts->name.len] = 0;
 801bf36:	683b      	ldr	r3, [r7, #0]
 801bf38:	69db      	ldr	r3, [r3, #28]
 801bf3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bf3c:	4413      	add	r3, r2
 801bf3e:	2200      	movs	r2, #0
 801bf40:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 801bf44:	683b      	ldr	r3, [r7, #0]
 801bf46:	685b      	ldr	r3, [r3, #4]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d023      	beq.n	801bf94 <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 801bf4c:	f107 0314 	add.w	r3, r7, #20
 801bf50:	497b      	ldr	r1, [pc, #492]	@ (801c140 <mg_tls_init+0x2bc>)
 801bf52:	4618      	mov	r0, r3
 801bf54:	f7fb fbf6 	bl	8017744 <mg_str_s>
 801bf58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf5a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801bf5e:	6839      	ldr	r1, [r7, #0]
 801bf60:	9300      	str	r3, [sp, #0]
 801bf62:	f107 0314 	add.w	r3, r7, #20
 801bf66:	cb0c      	ldmia	r3, {r2, r3}
 801bf68:	c903      	ldmia	r1, {r0, r1}
 801bf6a:	f7ff feeb 	bl	801bd44 <mg_parse_pem>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	da0f      	bge.n	801bf94 <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 801bf74:	4b73      	ldr	r3, [pc, #460]	@ (801c144 <mg_tls_init+0x2c0>)
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	f340 80d0 	ble.w	801c11e <mg_tls_init+0x29a>
 801bf7e:	4b72      	ldr	r3, [pc, #456]	@ (801c148 <mg_tls_init+0x2c4>)
 801bf80:	f243 02ca 	movw	r2, #12490	@ 0x30ca
 801bf84:	4971      	ldr	r1, [pc, #452]	@ (801c14c <mg_tls_init+0x2c8>)
 801bf86:	2001      	movs	r0, #1
 801bf88:	f7f3 fbdc 	bl	800f744 <mg_log_prefix>
 801bf8c:	4870      	ldr	r0, [pc, #448]	@ (801c150 <mg_tls_init+0x2cc>)
 801bf8e:	f7f3 fc29 	bl	800f7e4 <mg_log>
      return;
 801bf92:	e0c4      	b.n	801c11e <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 801bf94:	683b      	ldr	r3, [r7, #0]
 801bf96:	689b      	ldr	r3, [r3, #8]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d10f      	bne.n	801bfbc <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 801bf9c:	4b69      	ldr	r3, [pc, #420]	@ (801c144 <mg_tls_init+0x2c0>)
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	2b03      	cmp	r3, #3
 801bfa2:	f340 80be 	ble.w	801c122 <mg_tls_init+0x29e>
 801bfa6:	4b68      	ldr	r3, [pc, #416]	@ (801c148 <mg_tls_init+0x2c4>)
 801bfa8:	f243 02d0 	movw	r2, #12496	@ 0x30d0
 801bfac:	4967      	ldr	r1, [pc, #412]	@ (801c14c <mg_tls_init+0x2c8>)
 801bfae:	2004      	movs	r0, #4
 801bfb0:	f7f3 fbc8 	bl	800f744 <mg_log_prefix>
 801bfb4:	4867      	ldr	r0, [pc, #412]	@ (801c154 <mg_tls_init+0x2d0>)
 801bfb6:	f7f3 fc15 	bl	800f7e4 <mg_log>
    return;
 801bfba:	e0b2      	b.n	801c122 <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801bfbc:	f107 031c 	add.w	r3, r7, #28
 801bfc0:	495f      	ldr	r1, [pc, #380]	@ (801c140 <mg_tls_init+0x2bc>)
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	f7fb fbbe 	bl	8017744 <mg_str_s>
 801bfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bfca:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801bfce:	6839      	ldr	r1, [r7, #0]
 801bfd0:	9300      	str	r3, [sp, #0]
 801bfd2:	f107 031c 	add.w	r3, r7, #28
 801bfd6:	cb0c      	ldmia	r3, {r2, r3}
 801bfd8:	3108      	adds	r1, #8
 801bfda:	c903      	ldmia	r1, {r0, r1}
 801bfdc:	f7ff feb2 	bl	801bd44 <mg_parse_pem>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	da0f      	bge.n	801c006 <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 801bfe6:	4b57      	ldr	r3, [pc, #348]	@ (801c144 <mg_tls_init+0x2c0>)
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	f340 809b 	ble.w	801c126 <mg_tls_init+0x2a2>
 801bff0:	4b55      	ldr	r3, [pc, #340]	@ (801c148 <mg_tls_init+0x2c4>)
 801bff2:	f243 02d6 	movw	r2, #12502	@ 0x30d6
 801bff6:	4955      	ldr	r1, [pc, #340]	@ (801c14c <mg_tls_init+0x2c8>)
 801bff8:	2001      	movs	r0, #1
 801bffa:	f7f3 fba3 	bl	800f744 <mg_log_prefix>
 801bffe:	4854      	ldr	r0, [pc, #336]	@ (801c150 <mg_tls_init+0x2cc>)
 801c000:	f7f3 fbf0 	bl	800f7e4 <mg_log>
    return;
 801c004:	e08f      	b.n	801c126 <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	691b      	ldr	r3, [r3, #16]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d104      	bne.n	801c018 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 801c00e:	4952      	ldr	r1, [pc, #328]	@ (801c158 <mg_tls_init+0x2d4>)
 801c010:	6878      	ldr	r0, [r7, #4]
 801c012:	f7ed fca1 	bl	8009958 <mg_error>
    return;
 801c016:	e08b      	b.n	801c130 <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 801c018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c01c:	494f      	ldr	r1, [pc, #316]	@ (801c15c <mg_tls_init+0x2d8>)
 801c01e:	4618      	mov	r0, r3
 801c020:	f7fb fb90 	bl	8017744 <mg_str_s>
 801c024:	6839      	ldr	r1, [r7, #0]
 801c026:	f107 030c 	add.w	r3, r7, #12
 801c02a:	9300      	str	r3, [sp, #0]
 801c02c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c030:	cb0c      	ldmia	r3, {r2, r3}
 801c032:	3110      	adds	r1, #16
 801c034:	c903      	ldmia	r1, {r0, r1}
 801c036:	f7ff fe85 	bl	801bd44 <mg_parse_pem>
 801c03a:	4603      	mov	r3, r0
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d150      	bne.n	801c0e2 <mg_tls_init+0x25e>
    if (key.len < 39) {
 801c040:	693b      	ldr	r3, [r7, #16]
 801c042:	2b26      	cmp	r3, #38	@ 0x26
 801c044:	d80e      	bhi.n	801c064 <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 801c046:	4b3f      	ldr	r3, [pc, #252]	@ (801c144 <mg_tls_init+0x2c0>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	dd6d      	ble.n	801c12a <mg_tls_init+0x2a6>
 801c04e:	4b3e      	ldr	r3, [pc, #248]	@ (801c148 <mg_tls_init+0x2c4>)
 801c050:	f243 02e2 	movw	r2, #12514	@ 0x30e2
 801c054:	493d      	ldr	r1, [pc, #244]	@ (801c14c <mg_tls_init+0x2c8>)
 801c056:	2001      	movs	r0, #1
 801c058:	f7f3 fb74 	bl	800f744 <mg_log_prefix>
 801c05c:	4840      	ldr	r0, [pc, #256]	@ (801c160 <mg_tls_init+0x2dc>)
 801c05e:	f7f3 fbc1 	bl	800f7e4 <mg_log>
      return;
 801c062:	e062      	b.n	801c12a <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	2b30      	cmp	r3, #48	@ 0x30
 801c06a:	d105      	bne.n	801c078 <mg_tls_init+0x1f4>
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	3301      	adds	r3, #1
 801c070:	781b      	ldrb	r3, [r3, #0]
 801c072:	b25b      	sxtb	r3, r3
 801c074:	2b00      	cmp	r3, #0
 801c076:	da0e      	bge.n	801c096 <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 801c078:	4b32      	ldr	r3, [pc, #200]	@ (801c144 <mg_tls_init+0x2c0>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	dd56      	ble.n	801c12e <mg_tls_init+0x2aa>
 801c080:	4b31      	ldr	r3, [pc, #196]	@ (801c148 <mg_tls_init+0x2c4>)
 801c082:	f243 02e8 	movw	r2, #12520	@ 0x30e8
 801c086:	4931      	ldr	r1, [pc, #196]	@ (801c14c <mg_tls_init+0x2c8>)
 801c088:	2001      	movs	r0, #1
 801c08a:	f7f3 fb5b 	bl	800f744 <mg_log_prefix>
 801c08e:	4835      	ldr	r0, [pc, #212]	@ (801c164 <mg_tls_init+0x2e0>)
 801c090:	f7f3 fba8 	bl	800f7e4 <mg_log>
      return;
 801c094:	e04b      	b.n	801c12e <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	3302      	adds	r3, #2
 801c09a:	2205      	movs	r2, #5
 801c09c:	4932      	ldr	r1, [pc, #200]	@ (801c168 <mg_tls_init+0x2e4>)
 801c09e:	4618      	mov	r0, r3
 801c0a0:	f00c fb54 	bl	802874c <memcmp>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d00d      	beq.n	801c0c6 <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801c0aa:	4b26      	ldr	r3, [pc, #152]	@ (801c144 <mg_tls_init+0x2c0>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	dd09      	ble.n	801c0c6 <mg_tls_init+0x242>
 801c0b2:	4b25      	ldr	r3, [pc, #148]	@ (801c148 <mg_tls_init+0x2c4>)
 801c0b4:	f243 02ec 	movw	r2, #12524	@ 0x30ec
 801c0b8:	4924      	ldr	r1, [pc, #144]	@ (801c14c <mg_tls_init+0x2c8>)
 801c0ba:	2001      	movs	r0, #1
 801c0bc:	f7f3 fb42 	bl	800f744 <mg_log_prefix>
 801c0c0:	482a      	ldr	r0, [pc, #168]	@ (801c16c <mg_tls_init+0x2e8>)
 801c0c2:	f7f3 fb8f 	bl	800f7e4 <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 801c0c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c0c8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	3307      	adds	r3, #7
 801c0d0:	2220      	movs	r2, #32
 801c0d2:	4619      	mov	r1, r3
 801c0d4:	f00c fb4a 	bl	802876c <memmove>
    free((void *) key.buf);
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	4618      	mov	r0, r3
 801c0dc:	f00a fbba 	bl	8026854 <free>
 801c0e0:	e026      	b.n	801c130 <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 801c0e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801c0e6:	4922      	ldr	r1, [pc, #136]	@ (801c170 <mg_tls_init+0x2ec>)
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f7fb fb2b 	bl	8017744 <mg_str_s>
 801c0ee:	6839      	ldr	r1, [r7, #0]
 801c0f0:	f107 030c 	add.w	r3, r7, #12
 801c0f4:	9300      	str	r3, [sp, #0]
 801c0f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801c0fa:	cb0c      	ldmia	r3, {r2, r3}
 801c0fc:	3110      	adds	r1, #16
 801c0fe:	c903      	ldmia	r1, {r0, r1}
 801c100:	f7ff fe20 	bl	801bd44 <mg_parse_pem>
 801c104:	4603      	mov	r3, r0
 801c106:	2b00      	cmp	r3, #0
 801c108:	d104      	bne.n	801c114 <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 801c10a:	491a      	ldr	r1, [pc, #104]	@ (801c174 <mg_tls_init+0x2f0>)
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f7ed fc23 	bl	8009958 <mg_error>
 801c112:	e00d      	b.n	801c130 <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 801c114:	4918      	ldr	r1, [pc, #96]	@ (801c178 <mg_tls_init+0x2f4>)
 801c116:	6878      	ldr	r0, [r7, #4]
 801c118:	f7ed fc1e 	bl	8009958 <mg_error>
 801c11c:	e008      	b.n	801c130 <mg_tls_init+0x2ac>
      return;
 801c11e:	bf00      	nop
 801c120:	e006      	b.n	801c130 <mg_tls_init+0x2ac>
    return;
 801c122:	bf00      	nop
 801c124:	e004      	b.n	801c130 <mg_tls_init+0x2ac>
    return;
 801c126:	bf00      	nop
 801c128:	e002      	b.n	801c130 <mg_tls_init+0x2ac>
      return;
 801c12a:	bf00      	nop
 801c12c:	e000      	b.n	801c130 <mg_tls_init+0x2ac>
      return;
 801c12e:	bf00      	nop
  }
}
 801c130:	3738      	adds	r7, #56	@ 0x38
 801c132:	46bd      	mov	sp, r7
 801c134:	bd80      	pop	{r7, pc}
 801c136:	bf00      	nop
 801c138:	0802fb5c 	.word	0x0802fb5c
 801c13c:	0802fb64 	.word	0x0802fb64
 801c140:	0802fb78 	.word	0x0802fb78
 801c144:	2400025c 	.word	0x2400025c
 801c148:	08031458 	.word	0x08031458
 801c14c:	0802d330 	.word	0x0802d330
 801c150:	0802fb84 	.word	0x0802fb84
 801c154:	0802fba0 	.word	0x0802fba0
 801c158:	0802fbb8 	.word	0x0802fbb8
 801c15c:	0802fbe4 	.word	0x0802fbe4
 801c160:	0802fbf4 	.word	0x0802fbf4
 801c164:	0802fc10 	.word	0x0802fc10
 801c168:	0802fc34 	.word	0x0802fc34
 801c16c:	0802fc3c 	.word	0x0802fc3c
 801c170:	0802fc5c 	.word	0x0802fc5c
 801c174:	0802fc68 	.word	0x0802fc68
 801c178:	0802fc94 	.word	0x0802fc94

0801c17c <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b084      	sub	sp, #16
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c18a:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d010      	beq.n	801c1b4 <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	3304      	adds	r3, #4
 801c196:	4618      	mov	r0, r3
 801c198:	f7f2 fb07 	bl	800e7aa <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f00a fb56 	bl	8026854 <free>
    free((void *) tls->ca_der.buf);
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	f00a fb50 	bl	8026854 <free>
  }
  free(c->tls);
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	f00a fb4a 	bl	8026854 <free>
  c->tls = NULL;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 801c1c8:	bf00      	nop
 801c1ca:	3710      	adds	r7, #16
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	bd80      	pop	{r7, pc}

0801c1d0 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 801c1d0:	b590      	push	{r4, r7, lr}
 801c1d2:	b08d      	sub	sp, #52	@ 0x34
 801c1d4:	af04      	add	r7, sp, #16
 801c1d6:	60f8      	str	r0, [r7, #12]
 801c1d8:	60b9      	str	r1, [r7, #8]
 801c1da:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c1e2:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 801c1e4:	f06f 0301 	mvn.w	r3, #1
 801c1e8:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801c1f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801c1f4:	b2db      	uxtb	r3, r3
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	bf14      	ite	ne
 801c1fa:	2301      	movne	r3, #1
 801c1fc:	2300      	moveq	r3, #0
 801c1fe:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 801c200:	7dfb      	ldrb	r3, [r7, #23]
 801c202:	f083 0301 	eor.w	r3, r3, #1
 801c206:	b2db      	uxtb	r3, r3
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d01b      	beq.n	801c244 <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c212:	d902      	bls.n	801c21a <mg_tls_send+0x4a>
 801c214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801c218:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c220:	d902      	bls.n	801c228 <mg_tls_send+0x58>
 801c222:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c226:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 801c228:	2317      	movs	r3, #23
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	68b9      	ldr	r1, [r7, #8]
 801c22e:	68f8      	ldr	r0, [r7, #12]
 801c230:	f7fc fd30 	bl	8018c94 <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 801c234:	e006      	b.n	801c244 <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801c236:	69bb      	ldr	r3, [r7, #24]
 801c238:	3304      	adds	r3, #4
 801c23a:	69fa      	ldr	r2, [r7, #28]
 801c23c:	2100      	movs	r1, #0
 801c23e:	4618      	mov	r0, r3
 801c240:	f7f2 fa68 	bl	800e714 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801c244:	69bb      	ldr	r3, [r7, #24]
 801c246:	68db      	ldr	r3, [r3, #12]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d00b      	beq.n	801c264 <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801c24c:	69bb      	ldr	r3, [r7, #24]
 801c24e:	6859      	ldr	r1, [r3, #4]
 801c250:	69bb      	ldr	r3, [r7, #24]
 801c252:	68db      	ldr	r3, [r3, #12]
 801c254:	461a      	mov	r2, r3
 801c256:	68f8      	ldr	r0, [r7, #12]
 801c258:	f7f5 fe6c 	bl	8011f34 <mg_io_send>
 801c25c:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 801c25e:	69fb      	ldr	r3, [r7, #28]
 801c260:	2b00      	cmp	r3, #0
 801c262:	dce8      	bgt.n	801c236 <mg_tls_send+0x66>
  } // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 801c264:	69bb      	ldr	r3, [r7, #24]
 801c266:	68db      	ldr	r3, [r3, #12]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d005      	beq.n	801c278 <mg_tls_send+0xa8>
 801c26c:	69fb      	ldr	r3, [r7, #28]
 801c26e:	f113 0f02 	cmn.w	r3, #2
 801c272:	d101      	bne.n	801c278 <mg_tls_send+0xa8>
 801c274:	2301      	movs	r3, #1
 801c276:	e000      	b.n	801c27a <mg_tls_send+0xaa>
 801c278:	2300      	movs	r3, #0
 801c27a:	f003 0301 	and.w	r3, r3, #1
 801c27e:	b2d9      	uxtb	r1, r3
 801c280:	68fa      	ldr	r2, [r7, #12]
 801c282:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c286:	f361 13c7 	bfi	r3, r1, #7, #1
 801c28a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 801c28e:	4b1e      	ldr	r3, [pc, #120]	@ (801c308 <mg_tls_send+0x138>)
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	2b03      	cmp	r3, #3
 801c294:	dd26      	ble.n	801c2e4 <mg_tls_send+0x114>
 801c296:	4b1d      	ldr	r3, [pc, #116]	@ (801c30c <mg_tls_send+0x13c>)
 801c298:	f243 1210 	movw	r2, #12560	@ 0x3110
 801c29c:	491c      	ldr	r1, [pc, #112]	@ (801c310 <mg_tls_send+0x140>)
 801c29e:	2004      	movs	r0, #4
 801c2a0:	f7f3 fa50 	bl	800f744 <mg_log_prefix>
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801c2a8:	6878      	ldr	r0, [r7, #4]
 801c2aa:	69bb      	ldr	r3, [r7, #24]
 801c2ac:	68db      	ldr	r3, [r3, #12]
 801c2ae:	461c      	mov	r4, r3
 801c2b0:	7dfb      	ldrb	r3, [r7, #23]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d001      	beq.n	801c2ba <mg_tls_send+0xea>
 801c2b6:	2354      	movs	r3, #84	@ 0x54
 801c2b8:	e000      	b.n	801c2bc <mg_tls_send+0xec>
 801c2ba:	2374      	movs	r3, #116	@ 0x74
 801c2bc:	68fa      	ldr	r2, [r7, #12]
 801c2be:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 801c2c2:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801c2c6:	b2d2      	uxtb	r2, r2
 801c2c8:	2a00      	cmp	r2, #0
 801c2ca:	d001      	beq.n	801c2d0 <mg_tls_send+0x100>
 801c2cc:	2254      	movs	r2, #84	@ 0x54
 801c2ce:	e000      	b.n	801c2d2 <mg_tls_send+0x102>
 801c2d0:	2274      	movs	r2, #116	@ 0x74
 801c2d2:	9202      	str	r2, [sp, #8]
 801c2d4:	9301      	str	r3, [sp, #4]
 801c2d6:	69fb      	ldr	r3, [r7, #28]
 801c2d8:	9300      	str	r3, [sp, #0]
 801c2da:	4623      	mov	r3, r4
 801c2dc:	4602      	mov	r2, r0
 801c2de:	480d      	ldr	r0, [pc, #52]	@ (801c314 <mg_tls_send+0x144>)
 801c2e0:	f7f3 fa80 	bl	800f7e4 <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 801c2e4:	69fb      	ldr	r3, [r7, #28]
 801c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2ea:	d102      	bne.n	801c2f2 <mg_tls_send+0x122>
 801c2ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c2f0:	e006      	b.n	801c300 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 801c2f2:	7dfb      	ldrb	r3, [r7, #23]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d002      	beq.n	801c2fe <mg_tls_send+0x12e>
 801c2f8:	f06f 0301 	mvn.w	r3, #1
 801c2fc:	e000      	b.n	801c300 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 801c2fe:	687b      	ldr	r3, [r7, #4]
}
 801c300:	4618      	mov	r0, r3
 801c302:	3724      	adds	r7, #36	@ 0x24
 801c304:	46bd      	mov	sp, r7
 801c306:	bd90      	pop	{r4, r7, pc}
 801c308:	2400025c 	.word	0x2400025c
 801c30c:	08031464 	.word	0x08031464
 801c310:	0802d330 	.word	0x0802d330
 801c314:	0802fcbc 	.word	0x0802fcbc

0801c318 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 801c318:	b580      	push	{r7, lr}
 801c31a:	b088      	sub	sp, #32
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	60f8      	str	r0, [r7, #12]
 801c320:	60b9      	str	r1, [r7, #8]
 801c322:	607a      	str	r2, [r7, #4]
  int r = 0;
 801c324:	2300      	movs	r3, #0
 801c326:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c32e:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 801c330:	68f8      	ldr	r0, [r7, #12]
 801c332:	f7fc fdab 	bl	8018e8c <mg_tls_recv_record>
 801c336:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 801c338:	69fb      	ldr	r3, [r7, #28]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	da01      	bge.n	801c342 <mg_tls_recv+0x2a>
    return r;
 801c33e:	69fb      	ldr	r3, [r7, #28]
 801c340:	e03a      	b.n	801c3b8 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801c342:	68fb      	ldr	r3, [r7, #12]
 801c344:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801c346:	69bb      	ldr	r3, [r7, #24]
 801c348:	695b      	ldr	r3, [r3, #20]
 801c34a:	4413      	add	r3, r2
 801c34c:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801c34e:	69bb      	ldr	r3, [r7, #24]
 801c350:	7f1b      	ldrb	r3, [r3, #28]
 801c352:	2b17      	cmp	r3, #23
 801c354:	d008      	beq.n	801c368 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801c356:	69bb      	ldr	r3, [r7, #24]
 801c358:	2200      	movs	r2, #0
 801c35a:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 801c35c:	68f8      	ldr	r0, [r7, #12]
 801c35e:	f7fc f926 	bl	80185ae <mg_tls_drop_record>
    return MG_IO_WAIT;
 801c362:	f06f 0301 	mvn.w	r3, #1
 801c366:	e027      	b.n	801c3b8 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d002      	beq.n	801c374 <mg_tls_recv+0x5c>
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d101      	bne.n	801c378 <mg_tls_recv+0x60>
 801c374:	2300      	movs	r3, #0
 801c376:	e01f      	b.n	801c3b8 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 801c378:	69bb      	ldr	r3, [r7, #24]
 801c37a:	699b      	ldr	r3, [r3, #24]
 801c37c:	687a      	ldr	r2, [r7, #4]
 801c37e:	4293      	cmp	r3, r2
 801c380:	bf28      	it	cs
 801c382:	4613      	movcs	r3, r2
 801c384:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 801c386:	693a      	ldr	r2, [r7, #16]
 801c388:	6979      	ldr	r1, [r7, #20]
 801c38a:	68b8      	ldr	r0, [r7, #8]
 801c38c:	f00c f9ee 	bl	802876c <memmove>
  tls->recv_offset += minlen;
 801c390:	69bb      	ldr	r3, [r7, #24]
 801c392:	695a      	ldr	r2, [r3, #20]
 801c394:	693b      	ldr	r3, [r7, #16]
 801c396:	441a      	add	r2, r3
 801c398:	69bb      	ldr	r3, [r7, #24]
 801c39a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 801c39c:	69bb      	ldr	r3, [r7, #24]
 801c39e:	699a      	ldr	r2, [r3, #24]
 801c3a0:	693b      	ldr	r3, [r7, #16]
 801c3a2:	1ad2      	subs	r2, r2, r3
 801c3a4:	69bb      	ldr	r3, [r7, #24]
 801c3a6:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 801c3a8:	69bb      	ldr	r3, [r7, #24]
 801c3aa:	699b      	ldr	r3, [r3, #24]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d102      	bne.n	801c3b6 <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 801c3b0:	68f8      	ldr	r0, [r7, #12]
 801c3b2:	f7fc f8fc 	bl	80185ae <mg_tls_drop_record>
  }
  return (long) minlen;
 801c3b6:	693b      	ldr	r3, [r7, #16]
}
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	3720      	adds	r7, #32
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}

0801c3c0 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 801c3c0:	b480      	push	{r7}
 801c3c2:	b085      	sub	sp, #20
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c3ce:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d002      	beq.n	801c3dc <mg_tls_pending+0x1c>
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	699b      	ldr	r3, [r3, #24]
 801c3da:	e000      	b.n	801c3de <mg_tls_pending+0x1e>
 801c3dc:	2300      	movs	r3, #0
}
 801c3de:	4618      	mov	r0, r3
 801c3e0:	3714      	adds	r7, #20
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e8:	4770      	bx	lr

0801c3ea <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 801c3ea:	b580      	push	{r7, lr}
 801c3ec:	b084      	sub	sp, #16
 801c3ee:	af00      	add	r7, sp, #0
 801c3f0:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c3f8:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 801c3fa:	e006      	b.n	801c40a <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	3304      	adds	r3, #4
 801c400:	68ba      	ldr	r2, [r7, #8]
 801c402:	2100      	movs	r1, #0
 801c404:	4618      	mov	r0, r3
 801c406:	f7f2 f985 	bl	800e714 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	68db      	ldr	r3, [r3, #12]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d00b      	beq.n	801c42a <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	6859      	ldr	r1, [r3, #4]
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	68db      	ldr	r3, [r3, #12]
 801c41a:	461a      	mov	r2, r3
 801c41c:	6878      	ldr	r0, [r7, #4]
 801c41e:	f7f5 fd89 	bl	8011f34 <mg_io_send>
 801c422:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	2b00      	cmp	r3, #0
 801c428:	dce8      	bgt.n	801c3fc <mg_tls_flush+0x12>
  }
}
 801c42a:	bf00      	nop
 801c42c:	3710      	adds	r7, #16
 801c42e:	46bd      	mov	sp, r7
 801c430:	bd80      	pop	{r7, pc}

0801c432 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 801c432:	b480      	push	{r7}
 801c434:	b083      	sub	sp, #12
 801c436:	af00      	add	r7, sp, #0
 801c438:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 801c43a:	bf00      	nop
 801c43c:	370c      	adds	r7, #12
 801c43e:	46bd      	mov	sp, r7
 801c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c444:	4770      	bx	lr
	...

0801c448 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 801c448:	b480      	push	{r7}
 801c44a:	b085      	sub	sp, #20
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	60f8      	str	r0, [r7, #12]
 801c450:	60b9      	str	r1, [r7, #8]
 801c452:	607a      	str	r2, [r7, #4]
 801c454:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	4a2b      	ldr	r2, [pc, #172]	@ (801c508 <initialize_state+0xc0>)
 801c45a:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	3304      	adds	r3, #4
 801c460:	4a2a      	ldr	r2, [pc, #168]	@ (801c50c <initialize_state+0xc4>)
 801c462:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	3308      	adds	r3, #8
 801c468:	4a29      	ldr	r2, [pc, #164]	@ (801c510 <initialize_state+0xc8>)
 801c46a:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	330c      	adds	r3, #12
 801c470:	4a28      	ldr	r2, [pc, #160]	@ (801c514 <initialize_state+0xcc>)
 801c472:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	3310      	adds	r3, #16
 801c478:	68ba      	ldr	r2, [r7, #8]
 801c47a:	6812      	ldr	r2, [r2, #0]
 801c47c:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	3314      	adds	r3, #20
 801c482:	68ba      	ldr	r2, [r7, #8]
 801c484:	3204      	adds	r2, #4
 801c486:	6812      	ldr	r2, [r2, #0]
 801c488:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	3318      	adds	r3, #24
 801c48e:	68ba      	ldr	r2, [r7, #8]
 801c490:	3208      	adds	r2, #8
 801c492:	6812      	ldr	r2, [r2, #0]
 801c494:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	331c      	adds	r3, #28
 801c49a:	68ba      	ldr	r2, [r7, #8]
 801c49c:	320c      	adds	r2, #12
 801c49e:	6812      	ldr	r2, [r2, #0]
 801c4a0:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	3320      	adds	r3, #32
 801c4a6:	68ba      	ldr	r2, [r7, #8]
 801c4a8:	3210      	adds	r2, #16
 801c4aa:	6812      	ldr	r2, [r2, #0]
 801c4ac:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	3324      	adds	r3, #36	@ 0x24
 801c4b2:	68ba      	ldr	r2, [r7, #8]
 801c4b4:	3214      	adds	r2, #20
 801c4b6:	6812      	ldr	r2, [r2, #0]
 801c4b8:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	3328      	adds	r3, #40	@ 0x28
 801c4be:	68ba      	ldr	r2, [r7, #8]
 801c4c0:	3218      	adds	r2, #24
 801c4c2:	6812      	ldr	r2, [r2, #0]
 801c4c4:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	332c      	adds	r3, #44	@ 0x2c
 801c4ca:	68ba      	ldr	r2, [r7, #8]
 801c4cc:	321c      	adds	r2, #28
 801c4ce:	6812      	ldr	r2, [r2, #0]
 801c4d0:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	3330      	adds	r3, #48	@ 0x30
 801c4d6:	683a      	ldr	r2, [r7, #0]
 801c4d8:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	3334      	adds	r3, #52	@ 0x34
 801c4de:	687a      	ldr	r2, [r7, #4]
 801c4e0:	6812      	ldr	r2, [r2, #0]
 801c4e2:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	3338      	adds	r3, #56	@ 0x38
 801c4e8:	687a      	ldr	r2, [r7, #4]
 801c4ea:	3204      	adds	r2, #4
 801c4ec:	6812      	ldr	r2, [r2, #0]
 801c4ee:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	333c      	adds	r3, #60	@ 0x3c
 801c4f4:	687a      	ldr	r2, [r7, #4]
 801c4f6:	3208      	adds	r2, #8
 801c4f8:	6812      	ldr	r2, [r2, #0]
 801c4fa:	601a      	str	r2, [r3, #0]
}
 801c4fc:	bf00      	nop
 801c4fe:	3714      	adds	r7, #20
 801c500:	46bd      	mov	sp, r7
 801c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c506:	4770      	bx	lr
 801c508:	61707865 	.word	0x61707865
 801c50c:	3320646e 	.word	0x3320646e
 801c510:	79622d32 	.word	0x79622d32
 801c514:	6b206574 	.word	0x6b206574

0801c518 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 801c518:	b480      	push	{r7}
 801c51a:	b095      	sub	sp, #84	@ 0x54
 801c51c:	af00      	add	r7, sp, #0
 801c51e:	6078      	str	r0, [r7, #4]
 801c520:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	3304      	adds	r3, #4
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	647b      	str	r3, [r7, #68]	@ 0x44
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	3308      	adds	r3, #8
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	643b      	str	r3, [r7, #64]	@ 0x40
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	330c      	adds	r3, #12
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	3310      	adds	r3, #16
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	3314      	adds	r3, #20
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	637b      	str	r3, [r7, #52]	@ 0x34
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	3318      	adds	r3, #24
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	633b      	str	r3, [r7, #48]	@ 0x30
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	331c      	adds	r3, #28
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	3320      	adds	r3, #32
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	3324      	adds	r3, #36	@ 0x24
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	627b      	str	r3, [r7, #36]	@ 0x24
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	3328      	adds	r3, #40	@ 0x28
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	623b      	str	r3, [r7, #32]
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	332c      	adds	r3, #44	@ 0x2c
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	61fb      	str	r3, [r7, #28]
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	3330      	adds	r3, #48	@ 0x30
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	61bb      	str	r3, [r7, #24]
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	3334      	adds	r3, #52	@ 0x34
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	617b      	str	r3, [r7, #20]
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	3338      	adds	r3, #56	@ 0x38
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	613b      	str	r3, [r7, #16]
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	333c      	adds	r3, #60	@ 0x3c
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c5a4:	e182      	b.n	801c8ac <core_block+0x394>
    __Q(0, 4, 8, 12);
 801c5a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5aa:	4413      	add	r3, r2
 801c5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c5ae:	69ba      	ldr	r2, [r7, #24]
 801c5b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5b2:	4053      	eors	r3, r2
 801c5b4:	61bb      	str	r3, [r7, #24]
 801c5b6:	69bb      	ldr	r3, [r7, #24]
 801c5b8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c5bc:	61bb      	str	r3, [r7, #24]
 801c5be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c5c0:	69bb      	ldr	r3, [r7, #24]
 801c5c2:	4413      	add	r3, r2
 801c5c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c5c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5ca:	4053      	eors	r3, r2
 801c5cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5d0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c5d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c5d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5da:	4413      	add	r3, r2
 801c5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c5de:	69ba      	ldr	r2, [r7, #24]
 801c5e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5e2:	4053      	eors	r3, r2
 801c5e4:	61bb      	str	r3, [r7, #24]
 801c5e6:	69bb      	ldr	r3, [r7, #24]
 801c5e8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c5ec:	61bb      	str	r3, [r7, #24]
 801c5ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c5f0:	69bb      	ldr	r3, [r7, #24]
 801c5f2:	4413      	add	r3, r2
 801c5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c5f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5fa:	4053      	eors	r3, r2
 801c5fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c600:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c604:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 801c606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c60a:	4413      	add	r3, r2
 801c60c:	647b      	str	r3, [r7, #68]	@ 0x44
 801c60e:	697a      	ldr	r2, [r7, #20]
 801c610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c612:	4053      	eors	r3, r2
 801c614:	617b      	str	r3, [r7, #20]
 801c616:	697b      	ldr	r3, [r7, #20]
 801c618:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c61c:	617b      	str	r3, [r7, #20]
 801c61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c620:	697b      	ldr	r3, [r7, #20]
 801c622:	4413      	add	r3, r2
 801c624:	627b      	str	r3, [r7, #36]	@ 0x24
 801c626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c62a:	4053      	eors	r3, r2
 801c62c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c62e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c630:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c634:	637b      	str	r3, [r7, #52]	@ 0x34
 801c636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c63a:	4413      	add	r3, r2
 801c63c:	647b      	str	r3, [r7, #68]	@ 0x44
 801c63e:	697a      	ldr	r2, [r7, #20]
 801c640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c642:	4053      	eors	r3, r2
 801c644:	617b      	str	r3, [r7, #20]
 801c646:	697b      	ldr	r3, [r7, #20]
 801c648:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c64c:	617b      	str	r3, [r7, #20]
 801c64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c650:	697b      	ldr	r3, [r7, #20]
 801c652:	4413      	add	r3, r2
 801c654:	627b      	str	r3, [r7, #36]	@ 0x24
 801c656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c65a:	4053      	eors	r3, r2
 801c65c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c660:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c664:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 801c666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c66a:	4413      	add	r3, r2
 801c66c:	643b      	str	r3, [r7, #64]	@ 0x40
 801c66e:	693a      	ldr	r2, [r7, #16]
 801c670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c672:	4053      	eors	r3, r2
 801c674:	613b      	str	r3, [r7, #16]
 801c676:	693b      	ldr	r3, [r7, #16]
 801c678:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c67c:	613b      	str	r3, [r7, #16]
 801c67e:	6a3a      	ldr	r2, [r7, #32]
 801c680:	693b      	ldr	r3, [r7, #16]
 801c682:	4413      	add	r3, r2
 801c684:	623b      	str	r3, [r7, #32]
 801c686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c688:	6a3b      	ldr	r3, [r7, #32]
 801c68a:	4053      	eors	r3, r2
 801c68c:	633b      	str	r3, [r7, #48]	@ 0x30
 801c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c690:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c694:	633b      	str	r3, [r7, #48]	@ 0x30
 801c696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c69a:	4413      	add	r3, r2
 801c69c:	643b      	str	r3, [r7, #64]	@ 0x40
 801c69e:	693a      	ldr	r2, [r7, #16]
 801c6a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c6a2:	4053      	eors	r3, r2
 801c6a4:	613b      	str	r3, [r7, #16]
 801c6a6:	693b      	ldr	r3, [r7, #16]
 801c6a8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c6ac:	613b      	str	r3, [r7, #16]
 801c6ae:	6a3a      	ldr	r2, [r7, #32]
 801c6b0:	693b      	ldr	r3, [r7, #16]
 801c6b2:	4413      	add	r3, r2
 801c6b4:	623b      	str	r3, [r7, #32]
 801c6b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c6b8:	6a3b      	ldr	r3, [r7, #32]
 801c6ba:	4053      	eors	r3, r2
 801c6bc:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6c0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c6c4:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801c6c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6ca:	4413      	add	r3, r2
 801c6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c6ce:	68fa      	ldr	r2, [r7, #12]
 801c6d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c6d2:	4053      	eors	r3, r2
 801c6d4:	60fb      	str	r3, [r7, #12]
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c6dc:	60fb      	str	r3, [r7, #12]
 801c6de:	69fa      	ldr	r2, [r7, #28]
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	4413      	add	r3, r2
 801c6e4:	61fb      	str	r3, [r7, #28]
 801c6e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c6e8:	69fb      	ldr	r3, [r7, #28]
 801c6ea:	4053      	eors	r3, r2
 801c6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6f0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c6f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6fa:	4413      	add	r3, r2
 801c6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c6fe:	68fa      	ldr	r2, [r7, #12]
 801c700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c702:	4053      	eors	r3, r2
 801c704:	60fb      	str	r3, [r7, #12]
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c70c:	60fb      	str	r3, [r7, #12]
 801c70e:	69fa      	ldr	r2, [r7, #28]
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	4413      	add	r3, r2
 801c714:	61fb      	str	r3, [r7, #28]
 801c716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c718:	69fb      	ldr	r3, [r7, #28]
 801c71a:	4053      	eors	r3, r2
 801c71c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c720:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 801c726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c72a:	4413      	add	r3, r2
 801c72c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c72e:	68fa      	ldr	r2, [r7, #12]
 801c730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c732:	4053      	eors	r3, r2
 801c734:	60fb      	str	r3, [r7, #12]
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c73c:	60fb      	str	r3, [r7, #12]
 801c73e:	6a3a      	ldr	r2, [r7, #32]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	4413      	add	r3, r2
 801c744:	623b      	str	r3, [r7, #32]
 801c746:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c748:	6a3b      	ldr	r3, [r7, #32]
 801c74a:	4053      	eors	r3, r2
 801c74c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c750:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c754:	637b      	str	r3, [r7, #52]	@ 0x34
 801c756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c75a:	4413      	add	r3, r2
 801c75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c75e:	68fa      	ldr	r2, [r7, #12]
 801c760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c762:	4053      	eors	r3, r2
 801c764:	60fb      	str	r3, [r7, #12]
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c76c:	60fb      	str	r3, [r7, #12]
 801c76e:	6a3a      	ldr	r2, [r7, #32]
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	4413      	add	r3, r2
 801c774:	623b      	str	r3, [r7, #32]
 801c776:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c778:	6a3b      	ldr	r3, [r7, #32]
 801c77a:	4053      	eors	r3, r2
 801c77c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c780:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c784:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801c786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c78a:	4413      	add	r3, r2
 801c78c:	647b      	str	r3, [r7, #68]	@ 0x44
 801c78e:	69ba      	ldr	r2, [r7, #24]
 801c790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c792:	4053      	eors	r3, r2
 801c794:	61bb      	str	r3, [r7, #24]
 801c796:	69bb      	ldr	r3, [r7, #24]
 801c798:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c79c:	61bb      	str	r3, [r7, #24]
 801c79e:	69fa      	ldr	r2, [r7, #28]
 801c7a0:	69bb      	ldr	r3, [r7, #24]
 801c7a2:	4413      	add	r3, r2
 801c7a4:	61fb      	str	r3, [r7, #28]
 801c7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c7a8:	69fb      	ldr	r3, [r7, #28]
 801c7aa:	4053      	eors	r3, r2
 801c7ac:	633b      	str	r3, [r7, #48]	@ 0x30
 801c7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7b0:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c7b4:	633b      	str	r3, [r7, #48]	@ 0x30
 801c7b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ba:	4413      	add	r3, r2
 801c7bc:	647b      	str	r3, [r7, #68]	@ 0x44
 801c7be:	69ba      	ldr	r2, [r7, #24]
 801c7c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c7c2:	4053      	eors	r3, r2
 801c7c4:	61bb      	str	r3, [r7, #24]
 801c7c6:	69bb      	ldr	r3, [r7, #24]
 801c7c8:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c7cc:	61bb      	str	r3, [r7, #24]
 801c7ce:	69fa      	ldr	r2, [r7, #28]
 801c7d0:	69bb      	ldr	r3, [r7, #24]
 801c7d2:	4413      	add	r3, r2
 801c7d4:	61fb      	str	r3, [r7, #28]
 801c7d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c7d8:	69fb      	ldr	r3, [r7, #28]
 801c7da:	4053      	eors	r3, r2
 801c7dc:	633b      	str	r3, [r7, #48]	@ 0x30
 801c7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7e0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c7e4:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801c7e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ea:	4413      	add	r3, r2
 801c7ec:	643b      	str	r3, [r7, #64]	@ 0x40
 801c7ee:	697a      	ldr	r2, [r7, #20]
 801c7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7f2:	4053      	eors	r3, r2
 801c7f4:	617b      	str	r3, [r7, #20]
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c7fc:	617b      	str	r3, [r7, #20]
 801c7fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c800:	697b      	ldr	r3, [r7, #20]
 801c802:	4413      	add	r3, r2
 801c804:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c80a:	4053      	eors	r3, r2
 801c80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c810:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c81a:	4413      	add	r3, r2
 801c81c:	643b      	str	r3, [r7, #64]	@ 0x40
 801c81e:	697a      	ldr	r2, [r7, #20]
 801c820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c822:	4053      	eors	r3, r2
 801c824:	617b      	str	r3, [r7, #20]
 801c826:	697b      	ldr	r3, [r7, #20]
 801c828:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c82c:	617b      	str	r3, [r7, #20]
 801c82e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	4413      	add	r3, r2
 801c834:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c83a:	4053      	eors	r3, r2
 801c83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c840:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 801c846:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c84a:	4413      	add	r3, r2
 801c84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c84e:	693a      	ldr	r2, [r7, #16]
 801c850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c852:	4053      	eors	r3, r2
 801c854:	613b      	str	r3, [r7, #16]
 801c856:	693b      	ldr	r3, [r7, #16]
 801c858:	ea4f 4333 	mov.w	r3, r3, ror #16
 801c85c:	613b      	str	r3, [r7, #16]
 801c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c860:	693b      	ldr	r3, [r7, #16]
 801c862:	4413      	add	r3, r2
 801c864:	627b      	str	r3, [r7, #36]	@ 0x24
 801c866:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c86a:	4053      	eors	r3, r2
 801c86c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c870:	ea4f 5333 	mov.w	r3, r3, ror #20
 801c874:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c876:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c87a:	4413      	add	r3, r2
 801c87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c87e:	693a      	ldr	r2, [r7, #16]
 801c880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c882:	4053      	eors	r3, r2
 801c884:	613b      	str	r3, [r7, #16]
 801c886:	693b      	ldr	r3, [r7, #16]
 801c888:	ea4f 6333 	mov.w	r3, r3, ror #24
 801c88c:	613b      	str	r3, [r7, #16]
 801c88e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c890:	693b      	ldr	r3, [r7, #16]
 801c892:	4413      	add	r3, r2
 801c894:	627b      	str	r3, [r7, #36]	@ 0x24
 801c896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c89a:	4053      	eors	r3, r2
 801c89c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 801c8a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801c8a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c8a8:	3301      	adds	r3, #1
 801c8aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c8ae:	2b09      	cmp	r3, #9
 801c8b0:	f77f ae79 	ble.w	801c5a6 <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	681a      	ldr	r2, [r3, #0]
 801c8b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c8ba:	441a      	add	r2, r3
 801c8bc:	683b      	ldr	r3, [r7, #0]
 801c8be:	601a      	str	r2, [r3, #0]
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	3304      	adds	r3, #4
 801c8c4:	6819      	ldr	r1, [r3, #0]
 801c8c6:	683b      	ldr	r3, [r7, #0]
 801c8c8:	3304      	adds	r3, #4
 801c8ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c8cc:	440a      	add	r2, r1
 801c8ce:	601a      	str	r2, [r3, #0]
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	3308      	adds	r3, #8
 801c8d4:	6819      	ldr	r1, [r3, #0]
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	3308      	adds	r3, #8
 801c8da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c8dc:	440a      	add	r2, r1
 801c8de:	601a      	str	r2, [r3, #0]
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	330c      	adds	r3, #12
 801c8e4:	6819      	ldr	r1, [r3, #0]
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	330c      	adds	r3, #12
 801c8ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c8ec:	440a      	add	r2, r1
 801c8ee:	601a      	str	r2, [r3, #0]
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	3310      	adds	r3, #16
 801c8f4:	6819      	ldr	r1, [r3, #0]
 801c8f6:	683b      	ldr	r3, [r7, #0]
 801c8f8:	3310      	adds	r3, #16
 801c8fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c8fc:	440a      	add	r2, r1
 801c8fe:	601a      	str	r2, [r3, #0]
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	3314      	adds	r3, #20
 801c904:	6819      	ldr	r1, [r3, #0]
 801c906:	683b      	ldr	r3, [r7, #0]
 801c908:	3314      	adds	r3, #20
 801c90a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c90c:	440a      	add	r2, r1
 801c90e:	601a      	str	r2, [r3, #0]
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	3318      	adds	r3, #24
 801c914:	6819      	ldr	r1, [r3, #0]
 801c916:	683b      	ldr	r3, [r7, #0]
 801c918:	3318      	adds	r3, #24
 801c91a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c91c:	440a      	add	r2, r1
 801c91e:	601a      	str	r2, [r3, #0]
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	331c      	adds	r3, #28
 801c924:	6819      	ldr	r1, [r3, #0]
 801c926:	683b      	ldr	r3, [r7, #0]
 801c928:	331c      	adds	r3, #28
 801c92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c92c:	440a      	add	r2, r1
 801c92e:	601a      	str	r2, [r3, #0]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	3320      	adds	r3, #32
 801c934:	6819      	ldr	r1, [r3, #0]
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	3320      	adds	r3, #32
 801c93a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c93c:	440a      	add	r2, r1
 801c93e:	601a      	str	r2, [r3, #0]
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	3324      	adds	r3, #36	@ 0x24
 801c944:	6819      	ldr	r1, [r3, #0]
 801c946:	683b      	ldr	r3, [r7, #0]
 801c948:	3324      	adds	r3, #36	@ 0x24
 801c94a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c94c:	440a      	add	r2, r1
 801c94e:	601a      	str	r2, [r3, #0]
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	3328      	adds	r3, #40	@ 0x28
 801c954:	6819      	ldr	r1, [r3, #0]
 801c956:	683b      	ldr	r3, [r7, #0]
 801c958:	3328      	adds	r3, #40	@ 0x28
 801c95a:	6a3a      	ldr	r2, [r7, #32]
 801c95c:	440a      	add	r2, r1
 801c95e:	601a      	str	r2, [r3, #0]
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	332c      	adds	r3, #44	@ 0x2c
 801c964:	6819      	ldr	r1, [r3, #0]
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	332c      	adds	r3, #44	@ 0x2c
 801c96a:	69fa      	ldr	r2, [r7, #28]
 801c96c:	440a      	add	r2, r1
 801c96e:	601a      	str	r2, [r3, #0]
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	3330      	adds	r3, #48	@ 0x30
 801c974:	6819      	ldr	r1, [r3, #0]
 801c976:	683b      	ldr	r3, [r7, #0]
 801c978:	3330      	adds	r3, #48	@ 0x30
 801c97a:	69ba      	ldr	r2, [r7, #24]
 801c97c:	440a      	add	r2, r1
 801c97e:	601a      	str	r2, [r3, #0]
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	3334      	adds	r3, #52	@ 0x34
 801c984:	6819      	ldr	r1, [r3, #0]
 801c986:	683b      	ldr	r3, [r7, #0]
 801c988:	3334      	adds	r3, #52	@ 0x34
 801c98a:	697a      	ldr	r2, [r7, #20]
 801c98c:	440a      	add	r2, r1
 801c98e:	601a      	str	r2, [r3, #0]
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	3338      	adds	r3, #56	@ 0x38
 801c994:	6819      	ldr	r1, [r3, #0]
 801c996:	683b      	ldr	r3, [r7, #0]
 801c998:	3338      	adds	r3, #56	@ 0x38
 801c99a:	693a      	ldr	r2, [r7, #16]
 801c99c:	440a      	add	r2, r1
 801c99e:	601a      	str	r2, [r3, #0]
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	333c      	adds	r3, #60	@ 0x3c
 801c9a4:	6819      	ldr	r1, [r3, #0]
 801c9a6:	683b      	ldr	r3, [r7, #0]
 801c9a8:	333c      	adds	r3, #60	@ 0x3c
 801c9aa:	68fa      	ldr	r2, [r7, #12]
 801c9ac:	440a      	add	r2, r1
 801c9ae:	601a      	str	r2, [r3, #0]
}
 801c9b0:	bf00      	nop
 801c9b2:	3754      	adds	r7, #84	@ 0x54
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ba:	4770      	bx	lr

0801c9bc <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 801c9bc:	b480      	push	{r7}
 801c9be:	b089      	sub	sp, #36	@ 0x24
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	60f8      	str	r0, [r7, #12]
 801c9c4:	60b9      	str	r1, [r7, #8]
 801c9c6:	607a      	str	r2, [r7, #4]
 801c9c8:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801c9ca:	683b      	ldr	r3, [r7, #0]
 801c9cc:	089b      	lsrs	r3, r3, #2
 801c9ce:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	61fb      	str	r3, [r7, #28]
 801c9d4:	e016      	b.n	801ca04 <xor_block+0x48>
 801c9d6:	69fb      	ldr	r3, [r7, #28]
 801c9d8:	009b      	lsls	r3, r3, #2
 801c9da:	68ba      	ldr	r2, [r7, #8]
 801c9dc:	4413      	add	r3, r2
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	617b      	str	r3, [r7, #20]
 801c9e2:	69fb      	ldr	r3, [r7, #28]
 801c9e4:	009b      	lsls	r3, r3, #2
 801c9e6:	687a      	ldr	r2, [r7, #4]
 801c9e8:	4413      	add	r3, r2
 801c9ea:	681a      	ldr	r2, [r3, #0]
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	4053      	eors	r3, r2
 801c9f0:	617b      	str	r3, [r7, #20]
 801c9f2:	69fb      	ldr	r3, [r7, #28]
 801c9f4:	009b      	lsls	r3, r3, #2
 801c9f6:	68fa      	ldr	r2, [r7, #12]
 801c9f8:	4413      	add	r3, r2
 801c9fa:	697a      	ldr	r2, [r7, #20]
 801c9fc:	601a      	str	r2, [r3, #0]
 801c9fe:	69fb      	ldr	r3, [r7, #28]
 801ca00:	3301      	adds	r3, #1
 801ca02:	61fb      	str	r3, [r7, #28]
 801ca04:	69fa      	ldr	r2, [r7, #28]
 801ca06:	69bb      	ldr	r3, [r7, #24]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d3e4      	bcc.n	801c9d6 <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 801ca0c:	69bb      	ldr	r3, [r7, #24]
 801ca0e:	009b      	lsls	r3, r3, #2
 801ca10:	68fa      	ldr	r2, [r7, #12]
 801ca12:	4413      	add	r3, r2
 801ca14:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801ca16:	69bb      	ldr	r3, [r7, #24]
 801ca18:	009b      	lsls	r3, r3, #2
 801ca1a:	68ba      	ldr	r2, [r7, #8]
 801ca1c:	4413      	add	r3, r2
 801ca1e:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 801ca20:	69bb      	ldr	r3, [r7, #24]
 801ca22:	009b      	lsls	r3, r3, #2
 801ca24:	687a      	ldr	r2, [r7, #4]
 801ca26:	4413      	add	r3, r2
 801ca28:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	f003 0303 	and.w	r3, r3, #3
 801ca30:	2b03      	cmp	r3, #3
 801ca32:	d026      	beq.n	801ca82 <xor_block+0xc6>
 801ca34:	2b03      	cmp	r3, #3
 801ca36:	d846      	bhi.n	801cac6 <xor_block+0x10a>
 801ca38:	2b01      	cmp	r3, #1
 801ca3a:	d002      	beq.n	801ca42 <xor_block+0x86>
 801ca3c:	2b02      	cmp	r3, #2
 801ca3e:	d00a      	beq.n	801ca56 <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 801ca40:	e041      	b.n	801cac6 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801ca42:	68bb      	ldr	r3, [r7, #8]
 801ca44:	781a      	ldrb	r2, [r3, #0]
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	4053      	eors	r3, r2
 801ca4e:	b2da      	uxtb	r2, r3
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	701a      	strb	r2, [r3, #0]
      break;
 801ca54:	e037      	b.n	801cac6 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801ca56:	68bb      	ldr	r3, [r7, #8]
 801ca58:	781a      	ldrb	r2, [r3, #0]
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	b2db      	uxtb	r3, r3
 801ca60:	4053      	eors	r3, r2
 801ca62:	b2da      	uxtb	r2, r3
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801ca68:	68bb      	ldr	r3, [r7, #8]
 801ca6a:	3301      	adds	r3, #1
 801ca6c:	7819      	ldrb	r1, [r3, #0]
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	0a1b      	lsrs	r3, r3, #8
 801ca74:	b2da      	uxtb	r2, r3
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	3301      	adds	r3, #1
 801ca7a:	404a      	eors	r2, r1
 801ca7c:	b2d2      	uxtb	r2, r2
 801ca7e:	701a      	strb	r2, [r3, #0]
      break;
 801ca80:	e021      	b.n	801cac6 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801ca82:	68bb      	ldr	r3, [r7, #8]
 801ca84:	781a      	ldrb	r2, [r3, #0]
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	b2db      	uxtb	r3, r3
 801ca8c:	4053      	eors	r3, r2
 801ca8e:	b2da      	uxtb	r2, r3
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801ca94:	68bb      	ldr	r3, [r7, #8]
 801ca96:	3301      	adds	r3, #1
 801ca98:	7819      	ldrb	r1, [r3, #0]
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	0a1b      	lsrs	r3, r3, #8
 801caa0:	b2da      	uxtb	r2, r3
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	3301      	adds	r3, #1
 801caa6:	404a      	eors	r2, r1
 801caa8:	b2d2      	uxtb	r2, r2
 801caaa:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 801caac:	68bb      	ldr	r3, [r7, #8]
 801caae:	3302      	adds	r3, #2
 801cab0:	7819      	ldrb	r1, [r3, #0]
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	0c1b      	lsrs	r3, r3, #16
 801cab8:	b2da      	uxtb	r2, r3
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	3302      	adds	r3, #2
 801cabe:	404a      	eors	r2, r1
 801cac0:	b2d2      	uxtb	r2, r2
 801cac2:	701a      	strb	r2, [r3, #0]
      break;
 801cac4:	bf00      	nop
}
 801cac6:	bf00      	nop
 801cac8:	3724      	adds	r7, #36	@ 0x24
 801caca:	46bd      	mov	sp, r7
 801cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad0:	4770      	bx	lr

0801cad2 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 801cad2:	b580      	push	{r7, lr}
 801cad4:	b0aa      	sub	sp, #168	@ 0xa8
 801cad6:	af00      	add	r7, sp, #0
 801cad8:	60f8      	str	r0, [r7, #12]
 801cada:	60b9      	str	r1, [r7, #8]
 801cadc:	607a      	str	r2, [r7, #4]
 801cade:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	099b      	lsrs	r3, r3, #6
 801cae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801cae8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801caec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801caf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801caf4:	6839      	ldr	r1, [r7, #0]
 801caf6:	f7ff fca7 	bl	801c448 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801cafa:	2300      	movs	r3, #0
 801cafc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801cb00:	e03c      	b.n	801cb7c <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 801cb02:	f107 0218 	add.w	r2, r7, #24
 801cb06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801cb0a:	4611      	mov	r1, r2
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f7ff fd03 	bl	801c518 <core_block>
    increment_counter(state);
 801cb12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801cb16:	3301      	adds	r3, #1
 801cb18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801cb22:	e01c      	b.n	801cb5e <chacha20_xor_stream+0x8c>
 801cb24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cb28:	009b      	lsls	r3, r3, #2
 801cb2a:	68ba      	ldr	r2, [r7, #8]
 801cb2c:	4413      	add	r3, r2
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	617b      	str	r3, [r7, #20]
 801cb32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cb36:	009b      	lsls	r3, r3, #2
 801cb38:	f107 0218 	add.w	r2, r7, #24
 801cb3c:	4413      	add	r3, r2
 801cb3e:	681a      	ldr	r2, [r3, #0]
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	4053      	eors	r3, r2
 801cb44:	617b      	str	r3, [r7, #20]
 801cb46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cb4a:	009b      	lsls	r3, r3, #2
 801cb4c:	68fa      	ldr	r2, [r7, #12]
 801cb4e:	4413      	add	r3, r2
 801cb50:	697a      	ldr	r2, [r7, #20]
 801cb52:	601a      	str	r2, [r3, #0]
 801cb54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cb58:	3301      	adds	r3, #1
 801cb5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801cb5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801cb62:	2b0f      	cmp	r3, #15
 801cb64:	d9de      	bls.n	801cb24 <chacha20_xor_stream+0x52>
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	3340      	adds	r3, #64	@ 0x40
 801cb6a:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 801cb6c:	68bb      	ldr	r3, [r7, #8]
 801cb6e:	3340      	adds	r3, #64	@ 0x40
 801cb70:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 801cb72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801cb76:	3301      	adds	r3, #1
 801cb78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801cb7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801cb80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801cb84:	429a      	cmp	r2, r3
 801cb86:	d3bc      	bcc.n	801cb02 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cb8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801cb92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d00f      	beq.n	801cbba <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801cb9a:	f107 0218 	add.w	r2, r7, #24
 801cb9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801cba2:	4611      	mov	r1, r2
 801cba4:	4618      	mov	r0, r3
 801cba6:	f7ff fcb7 	bl	801c518 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801cbaa:	f107 0218 	add.w	r2, r7, #24
 801cbae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801cbb2:	68b9      	ldr	r1, [r7, #8]
 801cbb4:	68f8      	ldr	r0, [r7, #12]
 801cbb6:	f7ff ff01 	bl	801c9bc <xor_block>
  }
}
 801cbba:	bf00      	nop
 801cbbc:	37a8      	adds	r7, #168	@ 0xa8
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	bd80      	pop	{r7, pc}

0801cbc2 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801cbc2:	b580      	push	{r7, lr}
 801cbc4:	b0a4      	sub	sp, #144	@ 0x90
 801cbc6:	af00      	add	r7, sp, #0
 801cbc8:	60f8      	str	r0, [r7, #12]
 801cbca:	60b9      	str	r1, [r7, #8]
 801cbcc:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 801cbce:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	687a      	ldr	r2, [r7, #4]
 801cbd6:	68b9      	ldr	r1, [r7, #8]
 801cbd8:	f7ff fc36 	bl	801c448 <initialize_state>
  core_block(state, result);
 801cbdc:	f107 0210 	add.w	r2, r7, #16
 801cbe0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801cbe4:	4611      	mov	r1, r2
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f7ff fc96 	bl	801c518 <core_block>
  serialize(poly_key, result);
 801cbec:	f107 0310 	add.w	r3, r7, #16
 801cbf0:	2220      	movs	r2, #32
 801cbf2:	4619      	mov	r1, r3
 801cbf4:	68f8      	ldr	r0, [r7, #12]
 801cbf6:	f00d f802 	bl	8029bfe <memcpy>
  (void) i;
}
 801cbfa:	bf00      	nop
 801cbfc:	3790      	adds	r7, #144	@ 0x90
 801cbfe:	46bd      	mov	sp, r7
 801cc00:	bd80      	pop	{r7, pc}

0801cc02 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 801cc02:	b480      	push	{r7}
 801cc04:	b083      	sub	sp, #12
 801cc06:	af00      	add	r7, sp, #0
 801cc08:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	781b      	ldrb	r3, [r3, #0]
 801cc0e:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	3301      	adds	r3, #1
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801cc18:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	3302      	adds	r3, #2
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 801cc22:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	3303      	adds	r3, #3
 801cc28:	781b      	ldrb	r3, [r3, #0]
 801cc2a:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 801cc2c:	4313      	orrs	r3, r2
}
 801cc2e:	4618      	mov	r0, r3
 801cc30:	370c      	adds	r7, #12
 801cc32:	46bd      	mov	sp, r7
 801cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc38:	4770      	bx	lr

0801cc3a <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 801cc3a:	b480      	push	{r7}
 801cc3c:	b083      	sub	sp, #12
 801cc3e:	af00      	add	r7, sp, #0
 801cc40:	6078      	str	r0, [r7, #4]
 801cc42:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 801cc44:	683b      	ldr	r3, [r7, #0]
 801cc46:	b2da      	uxtb	r2, r3
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	0a1a      	lsrs	r2, r3, #8
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	3301      	adds	r3, #1
 801cc54:	b2d2      	uxtb	r2, r2
 801cc56:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 801cc58:	683b      	ldr	r3, [r7, #0]
 801cc5a:	0c1a      	lsrs	r2, r3, #16
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	3302      	adds	r3, #2
 801cc60:	b2d2      	uxtb	r2, r2
 801cc62:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 801cc64:	683b      	ldr	r3, [r7, #0]
 801cc66:	0e1a      	lsrs	r2, r3, #24
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	3303      	adds	r3, #3
 801cc6c:	b2d2      	uxtb	r2, r2
 801cc6e:	701a      	strb	r2, [r3, #0]
}
 801cc70:	bf00      	nop
 801cc72:	370c      	adds	r7, #12
 801cc74:	46bd      	mov	sp, r7
 801cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc7a:	4770      	bx	lr

0801cc7c <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b084      	sub	sp, #16
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 801cc8a:	6838      	ldr	r0, [r7, #0]
 801cc8c:	f7ff ffb9 	bl	801cc02 <U8TO32>
 801cc90:	4603      	mov	r3, r0
 801cc92:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	3303      	adds	r3, #3
 801cc9e:	4618      	mov	r0, r3
 801cca0:	f7ff ffaf 	bl	801cc02 <U8TO32>
 801cca4:	4603      	mov	r3, r0
 801cca6:	089a      	lsrs	r2, r3, #2
 801cca8:	4b2f      	ldr	r3, [pc, #188]	@ (801cd68 <poly1305_init+0xec>)
 801ccaa:	4013      	ands	r3, r2
 801ccac:	68fa      	ldr	r2, [r7, #12]
 801ccae:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 801ccb0:	683b      	ldr	r3, [r7, #0]
 801ccb2:	3306      	adds	r3, #6
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f7ff ffa4 	bl	801cc02 <U8TO32>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	091a      	lsrs	r2, r3, #4
 801ccbe:	4b2b      	ldr	r3, [pc, #172]	@ (801cd6c <poly1305_init+0xf0>)
 801ccc0:	4013      	ands	r3, r2
 801ccc2:	68fa      	ldr	r2, [r7, #12]
 801ccc4:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	3309      	adds	r3, #9
 801ccca:	4618      	mov	r0, r3
 801cccc:	f7ff ff99 	bl	801cc02 <U8TO32>
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	099a      	lsrs	r2, r3, #6
 801ccd4:	4b26      	ldr	r3, [pc, #152]	@ (801cd70 <poly1305_init+0xf4>)
 801ccd6:	4013      	ands	r3, r2
 801ccd8:	68fa      	ldr	r2, [r7, #12]
 801ccda:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 801ccdc:	683b      	ldr	r3, [r7, #0]
 801ccde:	330c      	adds	r3, #12
 801cce0:	4618      	mov	r0, r3
 801cce2:	f7ff ff8e 	bl	801cc02 <U8TO32>
 801cce6:	4603      	mov	r3, r0
 801cce8:	0a1b      	lsrs	r3, r3, #8
 801ccea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	2200      	movs	r2, #0
 801cd02:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	2200      	movs	r2, #0
 801cd08:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 801cd10:	683b      	ldr	r3, [r7, #0]
 801cd12:	3310      	adds	r3, #16
 801cd14:	4618      	mov	r0, r3
 801cd16:	f7ff ff74 	bl	801cc02 <U8TO32>
 801cd1a:	4602      	mov	r2, r0
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 801cd20:	683b      	ldr	r3, [r7, #0]
 801cd22:	3314      	adds	r3, #20
 801cd24:	4618      	mov	r0, r3
 801cd26:	f7ff ff6c 	bl	801cc02 <U8TO32>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 801cd30:	683b      	ldr	r3, [r7, #0]
 801cd32:	3318      	adds	r3, #24
 801cd34:	4618      	mov	r0, r3
 801cd36:	f7ff ff64 	bl	801cc02 <U8TO32>
 801cd3a:	4602      	mov	r2, r0
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 801cd40:	683b      	ldr	r3, [r7, #0]
 801cd42:	331c      	adds	r3, #28
 801cd44:	4618      	mov	r0, r3
 801cd46:	f7ff ff5c 	bl	801cc02 <U8TO32>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	2200      	movs	r2, #0
 801cd54:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	2200      	movs	r2, #0
 801cd5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 801cd5e:	bf00      	nop
 801cd60:	3710      	adds	r7, #16
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}
 801cd66:	bf00      	nop
 801cd68:	03ffff03 	.word	0x03ffff03
 801cd6c:	03ffc0ff 	.word	0x03ffc0ff
 801cd70:	03f03fff 	.word	0x03f03fff

0801cd74 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 801cd74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cd78:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 801cd82:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801cd86:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 801cd8a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cd8e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d001      	beq.n	801cd9a <poly1305_blocks+0x26>
 801cd96:	2300      	movs	r3, #0
 801cd98:	e001      	b.n	801cd9e <poly1305_blocks+0x2a>
 801cd9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801cd9e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 801cda2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 801cdac:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801cdb6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cdba:	689b      	ldr	r3, [r3, #8]
 801cdbc:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 801cdc0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cdc4:	68db      	ldr	r3, [r3, #12]
 801cdc6:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801cdca:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801cdce:	691b      	ldr	r3, [r3, #16]
 801cdd0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 801cdd4:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 801cdd8:	4613      	mov	r3, r2
 801cdda:	009b      	lsls	r3, r3, #2
 801cddc:	4413      	add	r3, r2
 801cdde:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 801cde2:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801cde6:	4613      	mov	r3, r2
 801cde8:	009b      	lsls	r3, r3, #2
 801cdea:	4413      	add	r3, r2
 801cdec:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 801cdf0:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 801cdf4:	4613      	mov	r3, r2
 801cdf6:	009b      	lsls	r3, r3, #2
 801cdf8:	4413      	add	r3, r2
 801cdfa:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 801cdfe:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 801ce02:	4613      	mov	r3, r2
 801ce04:	009b      	lsls	r3, r3, #2
 801ce06:	4413      	add	r3, r2
 801ce08:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 801ce0c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ce10:	695b      	ldr	r3, [r3, #20]
 801ce12:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801ce16:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ce1a:	699b      	ldr	r3, [r3, #24]
 801ce1c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 801ce20:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ce24:	69db      	ldr	r3, [r3, #28]
 801ce26:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 801ce2a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ce2e:	6a1b      	ldr	r3, [r3, #32]
 801ce30:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 801ce34:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801ce38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce3a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 801ce3e:	f000 be78 	b.w	801db32 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 801ce42:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 801ce46:	f7ff fedc 	bl	801cc02 <U8TO32>
 801ce4a:	4603      	mov	r3, r0
 801ce4c:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801ce50:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801ce54:	4413      	add	r3, r2
 801ce56:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 801ce5a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801ce5e:	3303      	adds	r3, #3
 801ce60:	4618      	mov	r0, r3
 801ce62:	f7ff fece 	bl	801cc02 <U8TO32>
 801ce66:	4603      	mov	r3, r0
 801ce68:	089b      	lsrs	r3, r3, #2
 801ce6a:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801ce6e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801ce72:	4413      	add	r3, r2
 801ce74:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 801ce78:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801ce7c:	3306      	adds	r3, #6
 801ce7e:	4618      	mov	r0, r3
 801ce80:	f7ff febf 	bl	801cc02 <U8TO32>
 801ce84:	4603      	mov	r3, r0
 801ce86:	091b      	lsrs	r3, r3, #4
 801ce88:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801ce8c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801ce90:	4413      	add	r3, r2
 801ce92:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801ce96:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801ce9a:	3309      	adds	r3, #9
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	f7ff feb0 	bl	801cc02 <U8TO32>
 801cea2:	4603      	mov	r3, r0
 801cea4:	099b      	lsrs	r3, r3, #6
 801cea6:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801ceaa:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801ceae:	4413      	add	r3, r2
 801ceb0:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 801ceb4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801ceb8:	330c      	adds	r3, #12
 801ceba:	4618      	mov	r0, r3
 801cebc:	f7ff fea1 	bl	801cc02 <U8TO32>
 801cec0:	4603      	mov	r3, r0
 801cec2:	0a1a      	lsrs	r2, r3, #8
 801cec4:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801cec8:	431a      	orrs	r2, r3
 801ceca:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801cece:	4413      	add	r3, r2
 801ced0:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801ced4:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801ced8:	2200      	movs	r2, #0
 801ceda:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801cede:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 801cee2:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801cee6:	2200      	movs	r2, #0
 801cee8:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801ceec:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 801cef0:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 801cef4:	460b      	mov	r3, r1
 801cef6:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801cefa:	fb02 f203 	mul.w	r2, r2, r3
 801cefe:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801cf02:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801cf06:	4601      	mov	r1, r0
 801cf08:	fb01 f303 	mul.w	r3, r1, r3
 801cf0c:	4413      	add	r3, r2
 801cf0e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801cf12:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801cf16:	fba2 1201 	umull	r1, r2, r2, r1
 801cf1a:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 801cf1e:	460a      	mov	r2, r1
 801cf20:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 801cf24:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801cf28:	4413      	add	r3, r2
 801cf2a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801cf2e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801cf32:	2200      	movs	r2, #0
 801cf34:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801cf38:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 801cf3c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801cf40:	2200      	movs	r2, #0
 801cf42:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 801cf46:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 801cf4a:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 801cf4e:	460b      	mov	r3, r1
 801cf50:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 801cf54:	fb02 f203 	mul.w	r2, r2, r3
 801cf58:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801cf5c:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 801cf60:	4601      	mov	r1, r0
 801cf62:	fb01 f303 	mul.w	r3, r1, r3
 801cf66:	4413      	add	r3, r2
 801cf68:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801cf6c:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 801cf70:	fba2 1201 	umull	r1, r2, r2, r1
 801cf74:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801cf78:	460a      	mov	r2, r1
 801cf7a:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801cf7e:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801cf82:	4413      	add	r3, r2
 801cf84:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801cf88:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801cf8c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 801cf90:	4602      	mov	r2, r0
 801cf92:	189b      	adds	r3, r3, r2
 801cf94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801cf98:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801cf9c:	460a      	mov	r2, r1
 801cf9e:	4153      	adcs	r3, r2
 801cfa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801cfa4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801cfa8:	2200      	movs	r2, #0
 801cfaa:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801cfae:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801cfb2:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 801cfbc:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 801cfc0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 801cfc4:	460b      	mov	r3, r1
 801cfc6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801cfca:	fb02 f203 	mul.w	r2, r2, r3
 801cfce:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801cfd2:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801cfd6:	4601      	mov	r1, r0
 801cfd8:	fb01 f303 	mul.w	r3, r1, r3
 801cfdc:	4413      	add	r3, r2
 801cfde:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801cfe2:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801cfe6:	fba2 1201 	umull	r1, r2, r2, r1
 801cfea:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801cfee:	460a      	mov	r2, r1
 801cff0:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 801cff4:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801cff8:	4413      	add	r3, r2
 801cffa:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801cffe:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801d002:	2200      	movs	r2, #0
 801d004:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 801d008:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 801d00c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801d010:	2200      	movs	r2, #0
 801d012:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801d016:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 801d01a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 801d01e:	460b      	mov	r3, r1
 801d020:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 801d024:	fb02 f203 	mul.w	r2, r2, r3
 801d028:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 801d02c:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 801d030:	4601      	mov	r1, r0
 801d032:	fb01 f303 	mul.w	r3, r1, r3
 801d036:	4413      	add	r3, r2
 801d038:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 801d03c:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 801d040:	fba2 1201 	umull	r1, r2, r2, r1
 801d044:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 801d048:	460a      	mov	r2, r1
 801d04a:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 801d04e:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 801d052:	4413      	add	r3, r2
 801d054:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801d058:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801d05c:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 801d060:	4602      	mov	r2, r0
 801d062:	189b      	adds	r3, r3, r2
 801d064:	66bb      	str	r3, [r7, #104]	@ 0x68
 801d066:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801d06a:	460a      	mov	r2, r1
 801d06c:	4153      	adcs	r3, r2
 801d06e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801d074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801d078:	4602      	mov	r2, r0
 801d07a:	189b      	adds	r3, r3, r2
 801d07c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801d084:	460a      	mov	r2, r1
 801d086:	4153      	adcs	r3, r2
 801d088:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801d08c:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801d090:	2200      	movs	r2, #0
 801d092:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 801d096:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801d09a:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801d09e:	2200      	movs	r2, #0
 801d0a0:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 801d0a4:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801d0a8:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 801d0ac:	460b      	mov	r3, r1
 801d0ae:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 801d0b2:	fb02 f203 	mul.w	r2, r2, r3
 801d0b6:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801d0ba:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801d0be:	4601      	mov	r1, r0
 801d0c0:	fb01 f303 	mul.w	r3, r1, r3
 801d0c4:	4413      	add	r3, r2
 801d0c6:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801d0ca:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801d0ce:	fba2 1201 	umull	r1, r2, r2, r1
 801d0d2:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801d0d6:	460a      	mov	r2, r1
 801d0d8:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 801d0dc:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801d0e0:	4413      	add	r3, r2
 801d0e2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801d0e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801d0ea:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801d0ee:	4602      	mov	r2, r0
 801d0f0:	189b      	adds	r3, r3, r2
 801d0f2:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801d0f8:	460a      	mov	r2, r1
 801d0fa:	4153      	adcs	r3, r2
 801d0fc:	647b      	str	r3, [r7, #68]	@ 0x44
 801d0fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801d102:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801d106:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801d10a:	2200      	movs	r2, #0
 801d10c:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 801d110:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 801d114:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801d118:	2200      	movs	r2, #0
 801d11a:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 801d11e:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 801d122:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 801d126:	460b      	mov	r3, r1
 801d128:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 801d12c:	fb02 f203 	mul.w	r2, r2, r3
 801d130:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801d134:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 801d138:	4601      	mov	r1, r0
 801d13a:	fb01 f303 	mul.w	r3, r1, r3
 801d13e:	4413      	add	r3, r2
 801d140:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 801d144:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 801d148:	fba2 1201 	umull	r1, r2, r2, r1
 801d14c:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 801d150:	460a      	mov	r2, r1
 801d152:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 801d156:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801d15a:	4413      	add	r3, r2
 801d15c:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801d160:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801d164:	2200      	movs	r2, #0
 801d166:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801d16a:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 801d16e:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801d172:	2200      	movs	r2, #0
 801d174:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 801d178:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 801d17c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 801d180:	460b      	mov	r3, r1
 801d182:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801d186:	fb02 f203 	mul.w	r2, r2, r3
 801d18a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 801d18e:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 801d192:	4601      	mov	r1, r0
 801d194:	fb01 f303 	mul.w	r3, r1, r3
 801d198:	4413      	add	r3, r2
 801d19a:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 801d19e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801d1a2:	fba2 1201 	umull	r1, r2, r2, r1
 801d1a6:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801d1aa:	460a      	mov	r2, r1
 801d1ac:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 801d1b0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801d1b4:	4413      	add	r3, r2
 801d1b6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801d1ba:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801d1be:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 801d1c2:	4602      	mov	r2, r0
 801d1c4:	189b      	adds	r3, r3, r2
 801d1c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d1ca:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801d1ce:	460a      	mov	r2, r1
 801d1d0:	4153      	adcs	r3, r2
 801d1d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801d1d6:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801d1da:	2200      	movs	r2, #0
 801d1dc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 801d1e0:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 801d1e4:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 801d1ee:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 801d1f2:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801d1f6:	460b      	mov	r3, r1
 801d1f8:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801d1fc:	fb02 f203 	mul.w	r2, r2, r3
 801d200:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801d204:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 801d208:	4601      	mov	r1, r0
 801d20a:	fb01 f303 	mul.w	r3, r1, r3
 801d20e:	4413      	add	r3, r2
 801d210:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801d214:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 801d218:	fba2 1201 	umull	r1, r2, r2, r1
 801d21c:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 801d220:	460a      	mov	r2, r1
 801d222:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 801d226:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 801d22a:	4413      	add	r3, r2
 801d22c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801d230:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801d234:	2200      	movs	r2, #0
 801d236:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 801d23a:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 801d23e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801d242:	2200      	movs	r2, #0
 801d244:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 801d248:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 801d24c:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 801d250:	460b      	mov	r3, r1
 801d252:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801d256:	fb02 f203 	mul.w	r2, r2, r3
 801d25a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801d25e:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801d262:	4601      	mov	r1, r0
 801d264:	fb01 f303 	mul.w	r3, r1, r3
 801d268:	4413      	add	r3, r2
 801d26a:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801d26e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801d272:	fba2 1201 	umull	r1, r2, r2, r1
 801d276:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 801d27a:	460a      	mov	r2, r1
 801d27c:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801d280:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801d284:	4413      	add	r3, r2
 801d286:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801d28a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801d28e:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801d292:	4602      	mov	r2, r0
 801d294:	189b      	adds	r3, r3, r2
 801d296:	663b      	str	r3, [r7, #96]	@ 0x60
 801d298:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801d29c:	460a      	mov	r2, r1
 801d29e:	4153      	adcs	r3, r2
 801d2a0:	667b      	str	r3, [r7, #100]	@ 0x64
 801d2a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801d2a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801d2aa:	4602      	mov	r2, r0
 801d2ac:	189b      	adds	r3, r3, r2
 801d2ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d2b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d2b6:	460a      	mov	r2, r1
 801d2b8:	4153      	adcs	r3, r2
 801d2ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801d2be:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801d2c8:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 801d2cc:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801d2d6:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801d2da:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 801d2de:	460b      	mov	r3, r1
 801d2e0:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801d2e4:	fb02 f203 	mul.w	r2, r2, r3
 801d2e8:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801d2ec:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 801d2f0:	4601      	mov	r1, r0
 801d2f2:	fb01 f303 	mul.w	r3, r1, r3
 801d2f6:	4413      	add	r3, r2
 801d2f8:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801d2fc:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 801d300:	fba2 1201 	umull	r1, r2, r2, r1
 801d304:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801d308:	460a      	mov	r2, r1
 801d30a:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 801d30e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801d312:	4413      	add	r3, r2
 801d314:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801d318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801d31c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801d320:	4602      	mov	r2, r0
 801d322:	189b      	adds	r3, r3, r2
 801d324:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801d32a:	460a      	mov	r2, r1
 801d32c:	4153      	adcs	r3, r2
 801d32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801d334:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801d338:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801d33c:	2200      	movs	r2, #0
 801d33e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801d342:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 801d346:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801d34a:	2200      	movs	r2, #0
 801d34c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801d350:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 801d354:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801d358:	460b      	mov	r3, r1
 801d35a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801d35e:	fb02 f203 	mul.w	r2, r2, r3
 801d362:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801d366:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 801d36a:	4601      	mov	r1, r0
 801d36c:	fb01 f303 	mul.w	r3, r1, r3
 801d370:	4413      	add	r3, r2
 801d372:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801d376:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 801d37a:	fba2 1201 	umull	r1, r2, r2, r1
 801d37e:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801d382:	460a      	mov	r2, r1
 801d384:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801d388:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801d38c:	4413      	add	r3, r2
 801d38e:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801d392:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801d396:	2200      	movs	r2, #0
 801d398:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 801d39c:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801d3a0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801d3a4:	2200      	movs	r2, #0
 801d3a6:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801d3aa:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801d3ae:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801d3b2:	460b      	mov	r3, r1
 801d3b4:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801d3b8:	fb02 f203 	mul.w	r2, r2, r3
 801d3bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801d3c0:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 801d3c4:	4601      	mov	r1, r0
 801d3c6:	fb01 f303 	mul.w	r3, r1, r3
 801d3ca:	4413      	add	r3, r2
 801d3cc:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801d3d0:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 801d3d4:	fba2 1201 	umull	r1, r2, r2, r1
 801d3d8:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 801d3dc:	460a      	mov	r2, r1
 801d3de:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 801d3e2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801d3e6:	4413      	add	r3, r2
 801d3e8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801d3ec:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801d3f0:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 801d3f4:	4602      	mov	r2, r0
 801d3f6:	189b      	adds	r3, r3, r2
 801d3f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801d3fc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801d400:	460a      	mov	r2, r1
 801d402:	4153      	adcs	r3, r2
 801d404:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801d408:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801d40c:	2200      	movs	r2, #0
 801d40e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801d412:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 801d416:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801d41a:	2200      	movs	r2, #0
 801d41c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 801d420:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 801d424:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 801d428:	460b      	mov	r3, r1
 801d42a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801d42e:	fb02 f203 	mul.w	r2, r2, r3
 801d432:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801d436:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 801d43a:	4601      	mov	r1, r0
 801d43c:	fb01 f303 	mul.w	r3, r1, r3
 801d440:	4413      	add	r3, r2
 801d442:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 801d446:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 801d44a:	fba2 1201 	umull	r1, r2, r2, r1
 801d44e:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 801d452:	460a      	mov	r2, r1
 801d454:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 801d458:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801d45c:	4413      	add	r3, r2
 801d45e:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801d462:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801d466:	2200      	movs	r2, #0
 801d468:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801d46c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801d470:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801d474:	2200      	movs	r2, #0
 801d476:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801d47a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801d47e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801d482:	460b      	mov	r3, r1
 801d484:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801d488:	fb02 f203 	mul.w	r2, r2, r3
 801d48c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801d490:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 801d494:	4601      	mov	r1, r0
 801d496:	fb01 f303 	mul.w	r3, r1, r3
 801d49a:	4413      	add	r3, r2
 801d49c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801d4a0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801d4a4:	fba2 1201 	umull	r1, r2, r2, r1
 801d4a8:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 801d4ac:	460a      	mov	r2, r1
 801d4ae:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801d4b2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801d4b6:	4413      	add	r3, r2
 801d4b8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801d4bc:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801d4c0:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 801d4c4:	4602      	mov	r2, r0
 801d4c6:	189b      	adds	r3, r3, r2
 801d4c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d4ca:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801d4ce:	460a      	mov	r2, r1
 801d4d0:	4153      	adcs	r3, r2
 801d4d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d4d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801d4d8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801d4dc:	4602      	mov	r2, r0
 801d4de:	189b      	adds	r3, r3, r2
 801d4e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801d4e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801d4e8:	460a      	mov	r2, r1
 801d4ea:	4153      	adcs	r3, r2
 801d4ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801d4f0:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801d4fa:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 801d4fe:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801d502:	2200      	movs	r2, #0
 801d504:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801d508:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 801d50c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 801d510:	460b      	mov	r3, r1
 801d512:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801d516:	fb02 f203 	mul.w	r2, r2, r3
 801d51a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801d51e:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 801d522:	4601      	mov	r1, r0
 801d524:	fb01 f303 	mul.w	r3, r1, r3
 801d528:	4413      	add	r3, r2
 801d52a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801d52e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801d532:	fba2 1201 	umull	r1, r2, r2, r1
 801d536:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 801d53a:	460a      	mov	r2, r1
 801d53c:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801d540:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801d544:	4413      	add	r3, r2
 801d546:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801d54a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d54e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 801d552:	4602      	mov	r2, r0
 801d554:	189b      	adds	r3, r3, r2
 801d556:	633b      	str	r3, [r7, #48]	@ 0x30
 801d558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801d55c:	460a      	mov	r2, r1
 801d55e:	4153      	adcs	r3, r2
 801d560:	637b      	str	r3, [r7, #52]	@ 0x34
 801d562:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801d566:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801d56a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801d56e:	2200      	movs	r2, #0
 801d570:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801d574:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 801d578:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801d57c:	2200      	movs	r2, #0
 801d57e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801d582:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801d586:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801d58a:	460b      	mov	r3, r1
 801d58c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801d590:	fb02 f203 	mul.w	r2, r2, r3
 801d594:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801d598:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 801d59c:	4601      	mov	r1, r0
 801d59e:	fb01 f303 	mul.w	r3, r1, r3
 801d5a2:	4413      	add	r3, r2
 801d5a4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801d5a8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 801d5ac:	fba2 1201 	umull	r1, r2, r2, r1
 801d5b0:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 801d5b4:	460a      	mov	r2, r1
 801d5b6:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801d5ba:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801d5be:	4413      	add	r3, r2
 801d5c0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801d5c4:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801d5c8:	2200      	movs	r2, #0
 801d5ca:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801d5ce:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801d5d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801d5dc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801d5e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801d5e4:	460b      	mov	r3, r1
 801d5e6:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801d5ea:	fb02 f203 	mul.w	r2, r2, r3
 801d5ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801d5f2:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801d5f6:	4601      	mov	r1, r0
 801d5f8:	fb01 f303 	mul.w	r3, r1, r3
 801d5fc:	4413      	add	r3, r2
 801d5fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801d602:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 801d606:	fba2 1201 	umull	r1, r2, r2, r1
 801d60a:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 801d60e:	460a      	mov	r2, r1
 801d610:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 801d614:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801d618:	4413      	add	r3, r2
 801d61a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 801d61e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801d622:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801d626:	4602      	mov	r2, r0
 801d628:	189b      	adds	r3, r3, r2
 801d62a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801d62e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801d632:	460a      	mov	r2, r1
 801d634:	4153      	adcs	r3, r2
 801d636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801d63a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801d63e:	2200      	movs	r2, #0
 801d640:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801d644:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 801d648:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801d64c:	2200      	movs	r2, #0
 801d64e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801d652:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 801d656:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 801d65a:	460b      	mov	r3, r1
 801d65c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801d660:	fb02 f203 	mul.w	r2, r2, r3
 801d664:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d668:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 801d66c:	4601      	mov	r1, r0
 801d66e:	fb01 f303 	mul.w	r3, r1, r3
 801d672:	4413      	add	r3, r2
 801d674:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801d678:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 801d67c:	fba2 ab01 	umull	sl, fp, r2, r1
 801d680:	445b      	add	r3, fp
 801d682:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801d684:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801d688:	2200      	movs	r2, #0
 801d68a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801d68e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801d692:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801d696:	2200      	movs	r2, #0
 801d698:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801d69c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801d6a0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 801d6a4:	460b      	mov	r3, r1
 801d6a6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801d6aa:	fb02 f203 	mul.w	r2, r2, r3
 801d6ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d6b2:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801d6b6:	4601      	mov	r1, r0
 801d6b8:	fb01 f303 	mul.w	r3, r1, r3
 801d6bc:	4413      	add	r3, r2
 801d6be:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801d6c2:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801d6c6:	fba2 1201 	umull	r1, r2, r2, r1
 801d6ca:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801d6ce:	460a      	mov	r2, r1
 801d6d0:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 801d6d4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801d6d8:	4413      	add	r3, r2
 801d6da:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801d6de:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801d6e2:	460b      	mov	r3, r1
 801d6e4:	eb1a 0303 	adds.w	r3, sl, r3
 801d6e8:	653b      	str	r3, [r7, #80]	@ 0x50
 801d6ea:	4613      	mov	r3, r2
 801d6ec:	eb4b 0303 	adc.w	r3, fp, r3
 801d6f0:	657b      	str	r3, [r7, #84]	@ 0x54
 801d6f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801d6f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801d6fa:	4602      	mov	r2, r0
 801d6fc:	189b      	adds	r3, r3, r2
 801d6fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801d702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801d706:	460a      	mov	r2, r1
 801d708:	4153      	adcs	r3, r2
 801d70a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801d70e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801d712:	2200      	movs	r2, #0
 801d714:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801d718:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 801d71c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801d720:	2200      	movs	r2, #0
 801d722:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801d726:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801d72a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801d72e:	460b      	mov	r3, r1
 801d730:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801d734:	fb02 f203 	mul.w	r2, r2, r3
 801d738:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801d73c:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801d740:	4601      	mov	r1, r0
 801d742:	fb01 f303 	mul.w	r3, r1, r3
 801d746:	4413      	add	r3, r2
 801d748:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801d74c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801d750:	fba2 1201 	umull	r1, r2, r2, r1
 801d754:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801d758:	460a      	mov	r2, r1
 801d75a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801d75e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d762:	4413      	add	r3, r2
 801d764:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801d768:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801d76c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801d770:	4602      	mov	r2, r0
 801d772:	189b      	adds	r3, r3, r2
 801d774:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801d77a:	460a      	mov	r2, r1
 801d77c:	4153      	adcs	r3, r2
 801d77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801d784:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801d788:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801d78c:	2200      	movs	r2, #0
 801d78e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801d792:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801d796:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801d79a:	2200      	movs	r2, #0
 801d79c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801d7a0:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801d7a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801d7a8:	460b      	mov	r3, r1
 801d7aa:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801d7ae:	fb02 f203 	mul.w	r2, r2, r3
 801d7b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801d7b6:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801d7ba:	4601      	mov	r1, r0
 801d7bc:	fb01 f303 	mul.w	r3, r1, r3
 801d7c0:	4413      	add	r3, r2
 801d7c2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801d7c6:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801d7ca:	fba2 8901 	umull	r8, r9, r2, r1
 801d7ce:	444b      	add	r3, r9
 801d7d0:	4699      	mov	r9, r3
 801d7d2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801d7dc:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801d7e0:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801d7ea:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801d7ee:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801d7f2:	460b      	mov	r3, r1
 801d7f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801d7f8:	fb02 f203 	mul.w	r2, r2, r3
 801d7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d800:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801d804:	4601      	mov	r1, r0
 801d806:	fb01 f303 	mul.w	r3, r1, r3
 801d80a:	4413      	add	r3, r2
 801d80c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801d810:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801d814:	fba2 1201 	umull	r1, r2, r2, r1
 801d818:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801d81c:	460a      	mov	r2, r1
 801d81e:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801d822:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801d826:	4413      	add	r3, r2
 801d828:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801d82c:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801d830:	460b      	mov	r3, r1
 801d832:	eb18 0303 	adds.w	r3, r8, r3
 801d836:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801d83a:	4613      	mov	r3, r2
 801d83c:	eb49 0303 	adc.w	r3, r9, r3
 801d840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801d844:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801d848:	2200      	movs	r2, #0
 801d84a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801d84e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801d852:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801d856:	2200      	movs	r2, #0
 801d858:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801d85c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801d860:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801d864:	460b      	mov	r3, r1
 801d866:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801d86a:	fb02 f203 	mul.w	r2, r2, r3
 801d86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d872:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801d876:	4601      	mov	r1, r0
 801d878:	fb01 f303 	mul.w	r3, r1, r3
 801d87c:	4413      	add	r3, r2
 801d87e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801d882:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801d886:	fba2 4501 	umull	r4, r5, r2, r1
 801d88a:	442b      	add	r3, r5
 801d88c:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801d88e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801d892:	2200      	movs	r2, #0
 801d894:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d898:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801d89c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801d8a0:	2200      	movs	r2, #0
 801d8a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d8a6:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801d8aa:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801d8ae:	460b      	mov	r3, r1
 801d8b0:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801d8b4:	fb02 f203 	mul.w	r2, r2, r3
 801d8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d8bc:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801d8c0:	4601      	mov	r1, r0
 801d8c2:	fb01 f303 	mul.w	r3, r1, r3
 801d8c6:	4413      	add	r3, r2
 801d8c8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801d8cc:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801d8d0:	fba2 1201 	umull	r1, r2, r2, r1
 801d8d4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801d8d8:	460a      	mov	r2, r1
 801d8da:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801d8de:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801d8e2:	4413      	add	r3, r2
 801d8e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d8e8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d8ec:	460b      	mov	r3, r1
 801d8ee:	18e3      	adds	r3, r4, r3
 801d8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d8f2:	4613      	mov	r3, r2
 801d8f4:	eb45 0303 	adc.w	r3, r5, r3
 801d8f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d8fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801d8fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801d902:	4602      	mov	r2, r0
 801d904:	189b      	adds	r3, r3, r2
 801d906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801d90a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801d90e:	460a      	mov	r2, r1
 801d910:	4153      	adcs	r3, r2
 801d912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801d916:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801d91a:	2200      	movs	r2, #0
 801d91c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d920:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801d924:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801d928:	2200      	movs	r2, #0
 801d92a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d92e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801d932:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801d936:	460b      	mov	r3, r1
 801d938:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801d93c:	fb02 f203 	mul.w	r2, r2, r3
 801d940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801d944:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801d948:	4601      	mov	r1, r0
 801d94a:	fb01 f303 	mul.w	r3, r1, r3
 801d94e:	4413      	add	r3, r2
 801d950:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801d954:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801d958:	fba2 1201 	umull	r1, r2, r2, r1
 801d95c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801d960:	460a      	mov	r2, r1
 801d962:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801d966:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801d96a:	4413      	add	r3, r2
 801d96c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801d970:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801d974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801d978:	4602      	mov	r2, r0
 801d97a:	189b      	adds	r3, r3, r2
 801d97c:	623b      	str	r3, [r7, #32]
 801d97e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d982:	460a      	mov	r2, r1
 801d984:	4153      	adcs	r3, r2
 801d986:	627b      	str	r3, [r7, #36]	@ 0x24
 801d988:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d98c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801d990:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801d994:	f04f 0000 	mov.w	r0, #0
 801d998:	f04f 0100 	mov.w	r1, #0
 801d99c:	0e90      	lsrs	r0, r2, #26
 801d99e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801d9a2:	0e99      	lsrs	r1, r3, #26
 801d9a4:	4603      	mov	r3, r0
 801d9a6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801d9aa:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801d9ae:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801d9b2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801d9b6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801d9ba:	2200      	movs	r2, #0
 801d9bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801d9c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801d9c4:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801d9c8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801d9cc:	1851      	adds	r1, r2, r1
 801d9ce:	61b9      	str	r1, [r7, #24]
 801d9d0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801d9d4:	414b      	adcs	r3, r1
 801d9d6:	61fb      	str	r3, [r7, #28]
 801d9d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d9dc:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801d9e0:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801d9e4:	f04f 0000 	mov.w	r0, #0
 801d9e8:	f04f 0100 	mov.w	r1, #0
 801d9ec:	0e90      	lsrs	r0, r2, #26
 801d9ee:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801d9f2:	0e99      	lsrs	r1, r3, #26
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801d9fa:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801d9fe:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801da02:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801da06:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801da0a:	2200      	movs	r2, #0
 801da0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801da10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801da14:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801da18:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801da1c:	1851      	adds	r1, r2, r1
 801da1e:	6139      	str	r1, [r7, #16]
 801da20:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801da24:	414b      	adcs	r3, r1
 801da26:	617b      	str	r3, [r7, #20]
 801da28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801da2c:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801da30:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801da34:	f04f 0000 	mov.w	r0, #0
 801da38:	f04f 0100 	mov.w	r1, #0
 801da3c:	0e90      	lsrs	r0, r2, #26
 801da3e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801da42:	0e99      	lsrs	r1, r3, #26
 801da44:	4603      	mov	r3, r0
 801da46:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801da4a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801da4e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801da52:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801da56:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801da5a:	2200      	movs	r2, #0
 801da5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801da5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801da60:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801da64:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801da66:	1851      	adds	r1, r2, r1
 801da68:	60b9      	str	r1, [r7, #8]
 801da6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801da6c:	414b      	adcs	r3, r1
 801da6e:	60fb      	str	r3, [r7, #12]
 801da70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801da74:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801da78:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801da7c:	f04f 0000 	mov.w	r0, #0
 801da80:	f04f 0100 	mov.w	r1, #0
 801da84:	0e90      	lsrs	r0, r2, #26
 801da86:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801da8a:	0e99      	lsrs	r1, r3, #26
 801da8c:	4603      	mov	r3, r0
 801da8e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801da92:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801da96:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801da9a:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801da9e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801daa2:	2200      	movs	r2, #0
 801daa4:	673b      	str	r3, [r7, #112]	@ 0x70
 801daa6:	677a      	str	r2, [r7, #116]	@ 0x74
 801daa8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801daac:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801daae:	1851      	adds	r1, r2, r1
 801dab0:	6039      	str	r1, [r7, #0]
 801dab2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801dab4:	414b      	adcs	r3, r1
 801dab6:	607b      	str	r3, [r7, #4]
 801dab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dabc:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801dac0:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801dac4:	f04f 0000 	mov.w	r0, #0
 801dac8:	f04f 0100 	mov.w	r1, #0
 801dacc:	0e90      	lsrs	r0, r2, #26
 801dace:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801dad2:	0e99      	lsrs	r1, r3, #26
 801dad4:	4603      	mov	r3, r0
 801dad6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801dada:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801dade:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dae2:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801dae6:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801daea:	4613      	mov	r3, r2
 801daec:	009b      	lsls	r3, r3, #2
 801daee:	441a      	add	r2, r3
 801daf0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801daf4:	4413      	add	r3, r2
 801daf6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801dafa:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801dafe:	0e9b      	lsrs	r3, r3, #26
 801db00:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801db04:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801db08:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801db0c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801db10:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801db14:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801db18:	4413      	add	r3, r2
 801db1a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801db1e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801db22:	3310      	adds	r3, #16
 801db24:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801db28:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801db2c:	3b10      	subs	r3, #16
 801db2e:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801db32:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801db36:	2b0f      	cmp	r3, #15
 801db38:	f63f a983 	bhi.w	801ce42 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801db3c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801db40:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801db44:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801db46:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801db4a:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801db4e:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801db50:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801db54:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801db58:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801db5a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801db5e:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801db62:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801db64:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801db68:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801db6c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801db6e:	bf00      	nop
 801db70:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801db74:	46bd      	mov	sp, r7
 801db76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801db7a <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801db7a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801db7e:	b0aa      	sub	sp, #168	@ 0xa8
 801db80:	af00      	add	r7, sp, #0
 801db82:	6678      	str	r0, [r7, #100]	@ 0x64
 801db84:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801db86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801db88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801db8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801db90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db92:	2b00      	cmp	r3, #0
 801db94:	d030      	beq.n	801dbf8 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801db96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801db9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801dba0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801dba4:	1c53      	adds	r3, r2, #1
 801dba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801dbaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dbae:	441a      	add	r2, r3
 801dbb0:	2301      	movs	r3, #1
 801dbb2:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801dbb6:	e00d      	b.n	801dbd4 <poly1305_finish+0x5a>
 801dbb8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dbbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801dbc0:	4413      	add	r3, r2
 801dbc2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801dbc6:	2300      	movs	r3, #0
 801dbc8:	7013      	strb	r3, [r2, #0]
 801dbca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801dbce:	3301      	adds	r3, #1
 801dbd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801dbd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801dbd8:	2b0f      	cmp	r3, #15
 801dbda:	d9ed      	bls.n	801dbb8 <poly1305_finish+0x3e>
    st->final = 1;
 801dbdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dbe0:	2301      	movs	r3, #1
 801dbe2:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801dbe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dbea:	333c      	adds	r3, #60	@ 0x3c
 801dbec:	2210      	movs	r2, #16
 801dbee:	4619      	mov	r1, r3
 801dbf0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801dbf4:	f7ff f8be 	bl	801cd74 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801dbf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dbfc:	695b      	ldr	r3, [r3, #20]
 801dbfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801dc02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dc06:	699b      	ldr	r3, [r3, #24]
 801dc08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801dc0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dc10:	69db      	ldr	r3, [r3, #28]
 801dc12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801dc16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dc1a:	6a1b      	ldr	r3, [r3, #32]
 801dc1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801dc20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801dc2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801dc2e:	0e9b      	lsrs	r3, r3, #26
 801dc30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801dc34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801dc38:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dc3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801dc40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801dc44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dc48:	4413      	add	r3, r2
 801dc4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801dc4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801dc52:	0e9b      	lsrs	r3, r3, #26
 801dc54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801dc58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801dc5c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dc60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801dc64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801dc68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dc6c:	4413      	add	r3, r2
 801dc6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801dc72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801dc76:	0e9b      	lsrs	r3, r3, #26
 801dc78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801dc7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801dc80:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dc84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801dc88:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801dc8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dc90:	4413      	add	r3, r2
 801dc92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801dc96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801dc9a:	0e9b      	lsrs	r3, r3, #26
 801dc9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801dca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801dca4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801dcac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801dcb0:	4613      	mov	r3, r2
 801dcb2:	009b      	lsls	r3, r3, #2
 801dcb4:	441a      	add	r2, r3
 801dcb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dcba:	4413      	add	r3, r2
 801dcbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801dcc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dcc4:	0e9b      	lsrs	r3, r3, #26
 801dcc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801dcca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dcce:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dcd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801dcd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801dcda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dcde:	4413      	add	r3, r2
 801dce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801dce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dce8:	3305      	adds	r3, #5
 801dcea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801dcee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801dcf2:	0e9b      	lsrs	r3, r3, #26
 801dcf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801dcf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801dcfc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dd00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801dd04:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801dd08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dd0c:	4413      	add	r3, r2
 801dd0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801dd12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801dd16:	0e9b      	lsrs	r3, r3, #26
 801dd18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801dd1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801dd20:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dd24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801dd28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801dd2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dd30:	4413      	add	r3, r2
 801dd32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801dd34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd36:	0e9b      	lsrs	r3, r3, #26
 801dd38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801dd3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd3e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dd42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801dd44:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801dd48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dd4c:	4413      	add	r3, r2
 801dd4e:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801dd50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd52:	0e9b      	lsrs	r3, r3, #26
 801dd54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801dd58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd5a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801dd5e:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801dd60:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801dd64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801dd68:	4413      	add	r3, r2
 801dd6a:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801dd6e:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801dd70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dd72:	0fdb      	lsrs	r3, r3, #31
 801dd74:	3b01      	subs	r3, #1
 801dd76:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801dd78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801dd7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd7e:	4013      	ands	r3, r2
 801dd80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801dd84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801dd88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd8a:	4013      	ands	r3, r2
 801dd8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801dd90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801dd92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd94:	4013      	ands	r3, r2
 801dd96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801dd98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801dd9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd9c:	4013      	ands	r3, r2
 801dd9e:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801dda0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801dda2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dda4:	4013      	ands	r3, r2
 801dda6:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801dda8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddaa:	43db      	mvns	r3, r3
 801ddac:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801ddae:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801ddb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddb4:	401a      	ands	r2, r3
 801ddb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ddba:	4313      	orrs	r3, r2
 801ddbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801ddc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801ddc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddc6:	401a      	ands	r2, r3
 801ddc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ddcc:	4313      	orrs	r3, r2
 801ddce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801ddd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801ddd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddd8:	401a      	ands	r2, r3
 801ddda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dddc:	4313      	orrs	r3, r2
 801ddde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801dde2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801dde6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dde8:	401a      	ands	r2, r3
 801ddea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddec:	4313      	orrs	r3, r2
 801ddee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801ddf2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801ddf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ddf8:	401a      	ands	r2, r3
 801ddfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ddfc:	4313      	orrs	r3, r2
 801ddfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801de02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801de06:	069a      	lsls	r2, r3, #26
 801de08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801de0c:	4313      	orrs	r3, r2
 801de0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801de12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801de16:	099a      	lsrs	r2, r3, #6
 801de18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801de1c:	051b      	lsls	r3, r3, #20
 801de1e:	4313      	orrs	r3, r2
 801de20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801de24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801de28:	0b1a      	lsrs	r2, r3, #12
 801de2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801de2e:	039b      	lsls	r3, r3, #14
 801de30:	4313      	orrs	r3, r2
 801de32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801de36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801de3a:	0c9a      	lsrs	r2, r3, #18
 801de3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801de40:	021b      	lsls	r3, r3, #8
 801de42:	4313      	orrs	r3, r2
 801de44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801de48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801de4c:	2200      	movs	r2, #0
 801de4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801de50:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801de52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801de56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de58:	2200      	movs	r2, #0
 801de5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801de5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801de5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801de60:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801de64:	4602      	mov	r2, r0
 801de66:	189b      	adds	r3, r3, r2
 801de68:	61bb      	str	r3, [r7, #24]
 801de6a:	460b      	mov	r3, r1
 801de6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801de6e:	eb42 0303 	adc.w	r3, r2, r3
 801de72:	61fb      	str	r3, [r7, #28]
 801de74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801de78:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801de7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801de7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801de82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801de86:	2200      	movs	r2, #0
 801de88:	653b      	str	r3, [r7, #80]	@ 0x50
 801de8a:	657a      	str	r2, [r7, #84]	@ 0x54
 801de8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801de90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de92:	2200      	movs	r2, #0
 801de94:	643b      	str	r3, [r7, #64]	@ 0x40
 801de96:	647a      	str	r2, [r7, #68]	@ 0x44
 801de98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801de9a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801de9e:	4602      	mov	r2, r0
 801dea0:	189c      	adds	r4, r3, r2
 801dea2:	460b      	mov	r3, r1
 801dea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dea6:	eb42 0303 	adc.w	r3, r2, r3
 801deaa:	461d      	mov	r5, r3
 801deac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801deb0:	f04f 0000 	mov.w	r0, #0
 801deb4:	f04f 0100 	mov.w	r1, #0
 801deb8:	0018      	movs	r0, r3
 801deba:	2100      	movs	r1, #0
 801debc:	1823      	adds	r3, r4, r0
 801debe:	613b      	str	r3, [r7, #16]
 801dec0:	eb45 0301 	adc.w	r3, r5, r1
 801dec4:	617b      	str	r3, [r7, #20]
 801dec6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801deca:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801dece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ded0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801ded4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801ded8:	2200      	movs	r2, #0
 801deda:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dedc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801dede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dee4:	2200      	movs	r2, #0
 801dee6:	633b      	str	r3, [r7, #48]	@ 0x30
 801dee8:	637a      	str	r2, [r7, #52]	@ 0x34
 801deea:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801deee:	4623      	mov	r3, r4
 801def0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801def4:	4602      	mov	r2, r0
 801def6:	eb13 0a02 	adds.w	sl, r3, r2
 801defa:	462b      	mov	r3, r5
 801defc:	460a      	mov	r2, r1
 801defe:	eb43 0b02 	adc.w	fp, r3, r2
 801df02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801df06:	f04f 0200 	mov.w	r2, #0
 801df0a:	f04f 0300 	mov.w	r3, #0
 801df0e:	000a      	movs	r2, r1
 801df10:	2300      	movs	r3, #0
 801df12:	eb1a 0102 	adds.w	r1, sl, r2
 801df16:	60b9      	str	r1, [r7, #8]
 801df18:	eb4b 0303 	adc.w	r3, fp, r3
 801df1c:	60fb      	str	r3, [r7, #12]
 801df1e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801df22:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801df26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801df28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801df2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801df30:	2200      	movs	r2, #0
 801df32:	62bb      	str	r3, [r7, #40]	@ 0x28
 801df34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801df36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801df3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801df3c:	2200      	movs	r2, #0
 801df3e:	623b      	str	r3, [r7, #32]
 801df40:	627a      	str	r2, [r7, #36]	@ 0x24
 801df42:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801df46:	4623      	mov	r3, r4
 801df48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801df4c:	4602      	mov	r2, r0
 801df4e:	eb13 0802 	adds.w	r8, r3, r2
 801df52:	462b      	mov	r3, r5
 801df54:	460a      	mov	r2, r1
 801df56:	eb43 0902 	adc.w	r9, r3, r2
 801df5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801df5e:	f04f 0200 	mov.w	r2, #0
 801df62:	f04f 0300 	mov.w	r3, #0
 801df66:	000a      	movs	r2, r1
 801df68:	2300      	movs	r3, #0
 801df6a:	eb18 0102 	adds.w	r1, r8, r2
 801df6e:	6039      	str	r1, [r7, #0]
 801df70:	eb49 0303 	adc.w	r3, r9, r3
 801df74:	607b      	str	r3, [r7, #4]
 801df76:	e9d7 3400 	ldrd	r3, r4, [r7]
 801df7a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801df7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801df80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801df84:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801df88:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801df8a:	f7fe fe56 	bl	801cc3a <U32TO8>
  U32TO8(mac + 4, h1);
 801df8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801df90:	3304      	adds	r3, #4
 801df92:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801df96:	4618      	mov	r0, r3
 801df98:	f7fe fe4f 	bl	801cc3a <U32TO8>
  U32TO8(mac + 8, h2);
 801df9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801df9e:	3308      	adds	r3, #8
 801dfa0:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801dfa4:	4618      	mov	r0, r3
 801dfa6:	f7fe fe48 	bl	801cc3a <U32TO8>
  U32TO8(mac + 12, h3);
 801dfaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801dfac:	330c      	adds	r3, #12
 801dfae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	f7fe fe41 	bl	801cc3a <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801dfb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfbc:	2200      	movs	r2, #0
 801dfbe:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801dfc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801dfc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfcc:	2200      	movs	r2, #0
 801dfce:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801dfd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfd4:	2200      	movs	r2, #0
 801dfd6:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801dfd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfdc:	2200      	movs	r2, #0
 801dfde:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801dfe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfe4:	2200      	movs	r2, #0
 801dfe6:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801dfe8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dfec:	2200      	movs	r2, #0
 801dfee:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801dff0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dff4:	2200      	movs	r2, #0
 801dff6:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801dff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801dffc:	2200      	movs	r2, #0
 801dffe:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801e000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e004:	2200      	movs	r2, #0
 801e006:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801e008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e00c:	2200      	movs	r2, #0
 801e00e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801e010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e014:	2200      	movs	r2, #0
 801e016:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801e018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e01c:	2200      	movs	r2, #0
 801e01e:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801e020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e024:	2200      	movs	r2, #0
 801e026:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801e028:	bf00      	nop
 801e02a:	37a8      	adds	r7, #168	@ 0xa8
 801e02c:	46bd      	mov	sp, r7
 801e02e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e032 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801e032:	b580      	push	{r7, lr}
 801e034:	b088      	sub	sp, #32
 801e036:	af00      	add	r7, sp, #0
 801e038:	60f8      	str	r0, [r7, #12]
 801e03a:	60b9      	str	r1, [r7, #8]
 801e03c:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801e042:	697b      	ldr	r3, [r7, #20]
 801e044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e046:	2b00      	cmp	r3, #0
 801e048:	d03d      	beq.n	801e0c6 <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801e04a:	697b      	ldr	r3, [r7, #20]
 801e04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e04e:	f1c3 0310 	rsb	r3, r3, #16
 801e052:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801e054:	69ba      	ldr	r2, [r7, #24]
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	429a      	cmp	r2, r3
 801e05a:	d901      	bls.n	801e060 <poly1305_update+0x2e>
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801e060:	2300      	movs	r3, #0
 801e062:	61fb      	str	r3, [r7, #28]
 801e064:	e00f      	b.n	801e086 <poly1305_update+0x54>
 801e066:	68ba      	ldr	r2, [r7, #8]
 801e068:	69fb      	ldr	r3, [r7, #28]
 801e06a:	441a      	add	r2, r3
 801e06c:	697b      	ldr	r3, [r7, #20]
 801e06e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801e070:	69fb      	ldr	r3, [r7, #28]
 801e072:	440b      	add	r3, r1
 801e074:	7811      	ldrb	r1, [r2, #0]
 801e076:	697a      	ldr	r2, [r7, #20]
 801e078:	4413      	add	r3, r2
 801e07a:	460a      	mov	r2, r1
 801e07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801e080:	69fb      	ldr	r3, [r7, #28]
 801e082:	3301      	adds	r3, #1
 801e084:	61fb      	str	r3, [r7, #28]
 801e086:	69fa      	ldr	r2, [r7, #28]
 801e088:	69bb      	ldr	r3, [r7, #24]
 801e08a:	429a      	cmp	r2, r3
 801e08c:	d3eb      	bcc.n	801e066 <poly1305_update+0x34>
    bytes -= want;
 801e08e:	687a      	ldr	r2, [r7, #4]
 801e090:	69bb      	ldr	r3, [r7, #24]
 801e092:	1ad3      	subs	r3, r2, r3
 801e094:	607b      	str	r3, [r7, #4]
    m += want;
 801e096:	68ba      	ldr	r2, [r7, #8]
 801e098:	69bb      	ldr	r3, [r7, #24]
 801e09a:	4413      	add	r3, r2
 801e09c:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801e09e:	697b      	ldr	r3, [r7, #20]
 801e0a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e0a2:	69bb      	ldr	r3, [r7, #24]
 801e0a4:	441a      	add	r2, r3
 801e0a6:	697b      	ldr	r3, [r7, #20]
 801e0a8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801e0aa:	697b      	ldr	r3, [r7, #20]
 801e0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e0ae:	2b0f      	cmp	r3, #15
 801e0b0:	d93e      	bls.n	801e130 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801e0b2:	697b      	ldr	r3, [r7, #20]
 801e0b4:	333c      	adds	r3, #60	@ 0x3c
 801e0b6:	2210      	movs	r2, #16
 801e0b8:	4619      	mov	r1, r3
 801e0ba:	6978      	ldr	r0, [r7, #20]
 801e0bc:	f7fe fe5a 	bl	801cd74 <poly1305_blocks>
    st->leftover = 0;
 801e0c0:	697b      	ldr	r3, [r7, #20]
 801e0c2:	2200      	movs	r2, #0
 801e0c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	2b0f      	cmp	r3, #15
 801e0ca:	d910      	bls.n	801e0ee <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f023 030f 	bic.w	r3, r3, #15
 801e0d2:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801e0d4:	693a      	ldr	r2, [r7, #16]
 801e0d6:	68b9      	ldr	r1, [r7, #8]
 801e0d8:	6978      	ldr	r0, [r7, #20]
 801e0da:	f7fe fe4b 	bl	801cd74 <poly1305_blocks>
    m += want;
 801e0de:	68ba      	ldr	r2, [r7, #8]
 801e0e0:	693b      	ldr	r3, [r7, #16]
 801e0e2:	4413      	add	r3, r2
 801e0e4:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801e0e6:	687a      	ldr	r2, [r7, #4]
 801e0e8:	693b      	ldr	r3, [r7, #16]
 801e0ea:	1ad3      	subs	r3, r2, r3
 801e0ec:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d01e      	beq.n	801e132 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801e0f4:	2300      	movs	r3, #0
 801e0f6:	61fb      	str	r3, [r7, #28]
 801e0f8:	e00f      	b.n	801e11a <poly1305_update+0xe8>
 801e0fa:	68ba      	ldr	r2, [r7, #8]
 801e0fc:	69fb      	ldr	r3, [r7, #28]
 801e0fe:	441a      	add	r2, r3
 801e100:	697b      	ldr	r3, [r7, #20]
 801e102:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801e104:	69fb      	ldr	r3, [r7, #28]
 801e106:	440b      	add	r3, r1
 801e108:	7811      	ldrb	r1, [r2, #0]
 801e10a:	697a      	ldr	r2, [r7, #20]
 801e10c:	4413      	add	r3, r2
 801e10e:	460a      	mov	r2, r1
 801e110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801e114:	69fb      	ldr	r3, [r7, #28]
 801e116:	3301      	adds	r3, #1
 801e118:	61fb      	str	r3, [r7, #28]
 801e11a:	69fa      	ldr	r2, [r7, #28]
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	429a      	cmp	r2, r3
 801e120:	d3eb      	bcc.n	801e0fa <poly1305_update+0xc8>
    st->leftover += bytes;
 801e122:	697b      	ldr	r3, [r7, #20]
 801e124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	441a      	add	r2, r3
 801e12a:	697b      	ldr	r3, [r7, #20]
 801e12c:	639a      	str	r2, [r3, #56]	@ 0x38
 801e12e:	e000      	b.n	801e132 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801e130:	bf00      	nop
  }
}
 801e132:	3720      	adds	r7, #32
 801e134:	46bd      	mov	sp, r7
 801e136:	bd80      	pop	{r7, pc}

0801e138 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801e138:	b580      	push	{r7, lr}
 801e13a:	b084      	sub	sp, #16
 801e13c:	af00      	add	r7, sp, #0
 801e13e:	6078      	str	r0, [r7, #4]
 801e140:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801e142:	683b      	ldr	r3, [r7, #0]
 801e144:	f003 030f 	and.w	r3, r3, #15
 801e148:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d007      	beq.n	801e160 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	f1c3 0310 	rsb	r3, r3, #16
 801e156:	461a      	mov	r2, r3
 801e158:	4903      	ldr	r1, [pc, #12]	@ (801e168 <pad_if_needed+0x30>)
 801e15a:	6878      	ldr	r0, [r7, #4]
 801e15c:	f7ff ff69 	bl	801e032 <poly1305_update>
  }
}
 801e160:	bf00      	nop
 801e162:	3710      	adds	r7, #16
 801e164:	46bd      	mov	sp, r7
 801e166:	bd80      	pop	{r7, pc}
 801e168:	24019d90 	.word	0x24019d90

0801e16c <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801e16c:	b580      	push	{r7, lr}
 801e16e:	b086      	sub	sp, #24
 801e170:	af00      	add	r7, sp, #0
 801e172:	60f8      	str	r0, [r7, #12]
 801e174:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801e178:	783b      	ldrb	r3, [r7, #0]
 801e17a:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801e17c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e180:	f04f 0200 	mov.w	r2, #0
 801e184:	f04f 0300 	mov.w	r3, #0
 801e188:	0a02      	lsrs	r2, r0, #8
 801e18a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801e18e:	0a0b      	lsrs	r3, r1, #8
 801e190:	b2d3      	uxtb	r3, r2
 801e192:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801e194:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e198:	f04f 0200 	mov.w	r2, #0
 801e19c:	f04f 0300 	mov.w	r3, #0
 801e1a0:	0c02      	lsrs	r2, r0, #16
 801e1a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801e1a6:	0c0b      	lsrs	r3, r1, #16
 801e1a8:	b2d3      	uxtb	r3, r2
 801e1aa:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801e1ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e1b0:	f04f 0200 	mov.w	r2, #0
 801e1b4:	f04f 0300 	mov.w	r3, #0
 801e1b8:	0e02      	lsrs	r2, r0, #24
 801e1ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801e1be:	0e0b      	lsrs	r3, r1, #24
 801e1c0:	b2d3      	uxtb	r3, r2
 801e1c2:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801e1c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e1c8:	f04f 0200 	mov.w	r2, #0
 801e1cc:	f04f 0300 	mov.w	r3, #0
 801e1d0:	000a      	movs	r2, r1
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	b2d3      	uxtb	r3, r2
 801e1d6:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801e1d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e1dc:	f04f 0200 	mov.w	r2, #0
 801e1e0:	f04f 0300 	mov.w	r3, #0
 801e1e4:	0a0a      	lsrs	r2, r1, #8
 801e1e6:	2300      	movs	r3, #0
 801e1e8:	b2d3      	uxtb	r3, r2
 801e1ea:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801e1ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e1f0:	f04f 0200 	mov.w	r2, #0
 801e1f4:	f04f 0300 	mov.w	r3, #0
 801e1f8:	0c0a      	lsrs	r2, r1, #16
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	b2d3      	uxtb	r3, r2
 801e1fe:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801e200:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e204:	f04f 0200 	mov.w	r2, #0
 801e208:	f04f 0300 	mov.w	r3, #0
 801e20c:	0e0a      	lsrs	r2, r1, #24
 801e20e:	2300      	movs	r3, #0
 801e210:	b2d3      	uxtb	r3, r2
 801e212:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801e214:	f107 0310 	add.w	r3, r7, #16
 801e218:	2208      	movs	r2, #8
 801e21a:	4619      	mov	r1, r3
 801e21c:	68f8      	ldr	r0, [r7, #12]
 801e21e:	f7ff ff08 	bl	801e032 <poly1305_update>
}
 801e222:	bf00      	nop
 801e224:	3718      	adds	r7, #24
 801e226:	46bd      	mov	sp, r7
 801e228:	bd80      	pop	{r7, pc}

0801e22a <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801e22a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e22e:	b0b0      	sub	sp, #192	@ 0xc0
 801e230:	af00      	add	r7, sp, #0
 801e232:	60f8      	str	r0, [r7, #12]
 801e234:	60b9      	str	r1, [r7, #8]
 801e236:	607a      	str	r2, [r7, #4]
 801e238:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801e23a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801e23e:	2220      	movs	r2, #32
 801e240:	2100      	movs	r1, #0
 801e242:	4618      	mov	r0, r3
 801e244:	f00a faac 	bl	80287a0 <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801e248:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801e24c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801e250:	6839      	ldr	r1, [r7, #0]
 801e252:	4618      	mov	r0, r3
 801e254:	f7fe fcb5 	bl	801cbc2 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801e258:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e25c:	f107 0314 	add.w	r3, r7, #20
 801e260:	4611      	mov	r1, r2
 801e262:	4618      	mov	r0, r3
 801e264:	f7fe fd0a 	bl	801cc7c <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801e268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d013      	beq.n	801e298 <poly1305_calculate_mac+0x6e>
 801e270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e274:	2b00      	cmp	r3, #0
 801e276:	d00f      	beq.n	801e298 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801e278:	f107 0314 	add.w	r3, r7, #20
 801e27c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801e280:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801e284:	4618      	mov	r0, r3
 801e286:	f7ff fed4 	bl	801e032 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801e28a:	f107 0314 	add.w	r3, r7, #20
 801e28e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801e292:	4618      	mov	r0, r3
 801e294:	f7ff ff50 	bl	801e138 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801e298:	f107 0314 	add.w	r3, r7, #20
 801e29c:	687a      	ldr	r2, [r7, #4]
 801e29e:	68b9      	ldr	r1, [r7, #8]
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	f7ff fec6 	bl	801e032 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801e2a6:	f107 0314 	add.w	r3, r7, #20
 801e2aa:	6879      	ldr	r1, [r7, #4]
 801e2ac:	4618      	mov	r0, r3
 801e2ae:	f7ff ff43 	bl	801e138 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801e2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	4698      	mov	r8, r3
 801e2ba:	4691      	mov	r9, r2
 801e2bc:	f107 0114 	add.w	r1, r7, #20
 801e2c0:	4642      	mov	r2, r8
 801e2c2:	464b      	mov	r3, r9
 801e2c4:	4608      	mov	r0, r1
 801e2c6:	f7ff ff51 	bl	801e16c <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	461c      	mov	r4, r3
 801e2d0:	4615      	mov	r5, r2
 801e2d2:	f107 0114 	add.w	r1, r7, #20
 801e2d6:	4622      	mov	r2, r4
 801e2d8:	462b      	mov	r3, r5
 801e2da:	4608      	mov	r0, r1
 801e2dc:	f7ff ff46 	bl	801e16c <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801e2e0:	f107 0314 	add.w	r3, r7, #20
 801e2e4:	68f9      	ldr	r1, [r7, #12]
 801e2e6:	4618      	mov	r0, r3
 801e2e8:	f7ff fc47 	bl	801db7a <poly1305_finish>
}
 801e2ec:	bf00      	nop
 801e2ee:	37c0      	adds	r7, #192	@ 0xc0
 801e2f0:	46bd      	mov	sp, r7
 801e2f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801e2f6 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801e2f6:	b580      	push	{r7, lr}
 801e2f8:	b08a      	sub	sp, #40	@ 0x28
 801e2fa:	af04      	add	r7, sp, #16
 801e2fc:	60f8      	str	r0, [r7, #12]
 801e2fe:	60b9      	str	r1, [r7, #8]
 801e300:	607a      	str	r2, [r7, #4]
 801e302:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801e304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e306:	3310      	adds	r3, #16
 801e308:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801e30a:	68fa      	ldr	r2, [r7, #12]
 801e30c:	697b      	ldr	r3, [r7, #20]
 801e30e:	4413      	add	r3, r2
 801e310:	461a      	mov	r2, r3
 801e312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e314:	429a      	cmp	r2, r3
 801e316:	d909      	bls.n	801e32c <mg_chacha20_poly1305_encrypt+0x36>
 801e318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e31c:	4413      	add	r3, r2
 801e31e:	461a      	mov	r2, r3
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	429a      	cmp	r2, r3
 801e324:	d902      	bls.n	801e32c <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801e326:	f04f 33ff 	mov.w	r3, #4294967295
 801e32a:	e018      	b.n	801e35e <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801e32c:	2301      	movs	r3, #1
 801e32e:	9301      	str	r3, [sp, #4]
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	9300      	str	r3, [sp, #0]
 801e334:	68bb      	ldr	r3, [r7, #8]
 801e336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e33a:	68f8      	ldr	r0, [r7, #12]
 801e33c:	f7fe fbc9 	bl	801cad2 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801e340:	68fa      	ldr	r2, [r7, #12]
 801e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e344:	18d0      	adds	r0, r2, r3
 801e346:	6a3b      	ldr	r3, [r7, #32]
 801e348:	9302      	str	r3, [sp, #8]
 801e34a:	683b      	ldr	r3, [r7, #0]
 801e34c:	9301      	str	r3, [sp, #4]
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	9300      	str	r3, [sp, #0]
 801e352:	68bb      	ldr	r3, [r7, #8]
 801e354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e356:	68f9      	ldr	r1, [r7, #12]
 801e358:	f7ff ff67 	bl	801e22a <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801e35c:	697b      	ldr	r3, [r7, #20]
}
 801e35e:	4618      	mov	r0, r3
 801e360:	3718      	adds	r7, #24
 801e362:	46bd      	mov	sp, r7
 801e364:	bd80      	pop	{r7, pc}

0801e366 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801e366:	b580      	push	{r7, lr}
 801e368:	b088      	sub	sp, #32
 801e36a:	af02      	add	r7, sp, #8
 801e36c:	60f8      	str	r0, [r7, #12]
 801e36e:	60b9      	str	r1, [r7, #8]
 801e370:	607a      	str	r2, [r7, #4]
 801e372:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801e374:	6a3b      	ldr	r3, [r7, #32]
 801e376:	3b10      	subs	r3, #16
 801e378:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801e37a:	683a      	ldr	r2, [r7, #0]
 801e37c:	6a3b      	ldr	r3, [r7, #32]
 801e37e:	4413      	add	r3, r2
 801e380:	461a      	mov	r2, r3
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	429a      	cmp	r2, r3
 801e386:	d909      	bls.n	801e39c <mg_chacha20_poly1305_decrypt+0x36>
 801e388:	68fa      	ldr	r2, [r7, #12]
 801e38a:	697b      	ldr	r3, [r7, #20]
 801e38c:	4413      	add	r3, r2
 801e38e:	461a      	mov	r2, r3
 801e390:	683b      	ldr	r3, [r7, #0]
 801e392:	429a      	cmp	r2, r3
 801e394:	d902      	bls.n	801e39c <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801e396:	f04f 33ff 	mov.w	r3, #4294967295
 801e39a:	e00a      	b.n	801e3b2 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801e39c:	2301      	movs	r3, #1
 801e39e:	9301      	str	r3, [sp, #4]
 801e3a0:	687b      	ldr	r3, [r7, #4]
 801e3a2:	9300      	str	r3, [sp, #0]
 801e3a4:	68bb      	ldr	r3, [r7, #8]
 801e3a6:	697a      	ldr	r2, [r7, #20]
 801e3a8:	6839      	ldr	r1, [r7, #0]
 801e3aa:	68f8      	ldr	r0, [r7, #12]
 801e3ac:	f7fe fb91 	bl	801cad2 <chacha20_xor_stream>
  return actual_size;
 801e3b0:	697b      	ldr	r3, [r7, #20]
}
 801e3b2:	4618      	mov	r0, r3
 801e3b4:	3718      	adds	r7, #24
 801e3b6:	46bd      	mov	sp, r7
 801e3b8:	bd80      	pop	{r7, pc}

0801e3ba <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801e3ba:	b580      	push	{r7, lr}
 801e3bc:	b082      	sub	sp, #8
 801e3be:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 801e3c0:	2138      	movs	r1, #56	@ 0x38
 801e3c2:	2001      	movs	r0, #1
 801e3c4:	f008 fa22 	bl	802680c <calloc>
 801e3c8:	4603      	mov	r3, r0
 801e3ca:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801e3cc:	2102      	movs	r1, #2
 801e3ce:	6878      	ldr	r0, [r7, #4]
 801e3d0:	f000 fefe 	bl	801f1d0 <alloc>
 801e3d4:	4602      	mov	r2, r0
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	689b      	ldr	r3, [r3, #8]
 801e3de:	68db      	ldr	r3, [r3, #12]
 801e3e0:	2200      	movs	r2, #0
 801e3e2:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	689b      	ldr	r3, [r3, #8]
 801e3e8:	68db      	ldr	r3, [r3, #12]
 801e3ea:	3304      	adds	r3, #4
 801e3ec:	2201      	movs	r2, #1
 801e3ee:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	689b      	ldr	r3, [r3, #8]
 801e3f4:	4618      	mov	r0, r3
 801e3f6:	f000 f81d 	bl	801e434 <bi_permanent>
  return ctx;
 801e3fa:	687b      	ldr	r3, [r7, #4]
}
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	3708      	adds	r7, #8
 801e400:	46bd      	mov	sp, r7
 801e402:	bd80      	pop	{r7, pc}

0801e404 <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801e404:	b480      	push	{r7}
 801e406:	b083      	sub	sp, #12
 801e408:	af00      	add	r7, sp, #0
 801e40a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	689b      	ldr	r3, [r3, #8]
 801e410:	4a07      	ldr	r2, [pc, #28]	@ (801e430 <bi_copy+0x2c>)
 801e412:	4293      	cmp	r3, r2
 801e414:	d004      	beq.n	801e420 <bi_copy+0x1c>
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	689b      	ldr	r3, [r3, #8]
 801e41a:	1c5a      	adds	r2, r3, #1
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	609a      	str	r2, [r3, #8]
  return bi;
 801e420:	687b      	ldr	r3, [r7, #4]
}
 801e422:	4618      	mov	r0, r3
 801e424:	370c      	adds	r7, #12
 801e426:	46bd      	mov	sp, r7
 801e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e42c:	4770      	bx	lr
 801e42e:	bf00      	nop
 801e430:	7fff55aa 	.word	0x7fff55aa

0801e434 <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801e434:	b580      	push	{r7, lr}
 801e436:	b082      	sub	sp, #8
 801e438:	af00      	add	r7, sp, #0
 801e43a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	689b      	ldr	r3, [r3, #8]
 801e440:	2b01      	cmp	r3, #1
 801e442:	d001      	beq.n	801e448 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801e444:	f008 f9b4 	bl	80267b0 <abort>
  }

  bi->refs = PERMANENT;
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	4a03      	ldr	r2, [pc, #12]	@ (801e458 <bi_permanent+0x24>)
 801e44c:	609a      	str	r2, [r3, #8]
}
 801e44e:	bf00      	nop
 801e450:	3708      	adds	r7, #8
 801e452:	46bd      	mov	sp, r7
 801e454:	bd80      	pop	{r7, pc}
 801e456:	bf00      	nop
 801e458:	7fff55aa 	.word	0x7fff55aa

0801e45c <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801e45c:	b580      	push	{r7, lr}
 801e45e:	b082      	sub	sp, #8
 801e460:	af00      	add	r7, sp, #0
 801e462:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	689b      	ldr	r3, [r3, #8]
 801e468:	4a05      	ldr	r2, [pc, #20]	@ (801e480 <bi_depermanent+0x24>)
 801e46a:	4293      	cmp	r3, r2
 801e46c:	d001      	beq.n	801e472 <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801e46e:	f008 f99f 	bl	80267b0 <abort>
  }

  bi->refs = 1;
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	2201      	movs	r2, #1
 801e476:	609a      	str	r2, [r3, #8]
}
 801e478:	bf00      	nop
 801e47a:	3708      	adds	r7, #8
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}
 801e480:	7fff55aa 	.word	0x7fff55aa

0801e484 <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801e484:	b580      	push	{r7, lr}
 801e486:	b082      	sub	sp, #8
 801e488:	af00      	add	r7, sp, #0
 801e48a:	6078      	str	r0, [r7, #4]
 801e48c:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801e48e:	683b      	ldr	r3, [r7, #0]
 801e490:	689b      	ldr	r3, [r3, #8]
 801e492:	4a14      	ldr	r2, [pc, #80]	@ (801e4e4 <bi_free+0x60>)
 801e494:	4293      	cmp	r3, r2
 801e496:	d01f      	beq.n	801e4d8 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801e498:	683b      	ldr	r3, [r7, #0]
 801e49a:	689b      	ldr	r3, [r3, #8]
 801e49c:	1e5a      	subs	r2, r3, #1
 801e49e:	683b      	ldr	r3, [r7, #0]
 801e4a0:	609a      	str	r2, [r3, #8]
 801e4a2:	683b      	ldr	r3, [r7, #0]
 801e4a4:	689b      	ldr	r3, [r3, #8]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	dc18      	bgt.n	801e4dc <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	685a      	ldr	r2, [r3, #4]
 801e4ae:	683b      	ldr	r3, [r7, #0]
 801e4b0:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	683a      	ldr	r2, [r7, #0]
 801e4b6:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e4bc:	1c5a      	adds	r2, r3, #1
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4c6:	1e5a      	subs	r2, r3, #1
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	da04      	bge.n	801e4de <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801e4d4:	f008 f96c 	bl	80267b0 <abort>
    return;
 801e4d8:	bf00      	nop
 801e4da:	e000      	b.n	801e4de <bi_free+0x5a>
    return;
 801e4dc:	bf00      	nop
  }
}
 801e4de:	3708      	adds	r7, #8
 801e4e0:	46bd      	mov	sp, r7
 801e4e2:	bd80      	pop	{r7, pc}
 801e4e4:	7fff55aa 	.word	0x7fff55aa

0801e4e8 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b084      	sub	sp, #16
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
 801e4f0:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801e4f2:	2101      	movs	r1, #1
 801e4f4:	6878      	ldr	r0, [r7, #4]
 801e4f6:	f000 fe6b 	bl	801f1d0 <alloc>
 801e4fa:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	68db      	ldr	r3, [r3, #12]
 801e500:	683a      	ldr	r2, [r7, #0]
 801e502:	601a      	str	r2, [r3, #0]
  return biR;
 801e504:	68fb      	ldr	r3, [r7, #12]
}
 801e506:	4618      	mov	r0, r3
 801e508:	3710      	adds	r7, #16
 801e50a:	46bd      	mov	sp, r7
 801e50c:	bd80      	pop	{r7, pc}

0801e50e <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801e50e:	b580      	push	{r7, lr}
 801e510:	b084      	sub	sp, #16
 801e512:	af00      	add	r7, sp, #0
 801e514:	6078      	str	r0, [r7, #4]
 801e516:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801e518:	683b      	ldr	r3, [r7, #0]
 801e51a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e51e:	4619      	mov	r1, r3
 801e520:	6878      	ldr	r0, [r7, #4]
 801e522:	f000 fe55 	bl	801f1d0 <alloc>
 801e526:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	68d8      	ldr	r0, [r3, #12]
 801e52c:	683b      	ldr	r3, [r7, #0]
 801e52e:	68d9      	ldr	r1, [r3, #12]
 801e530:	683b      	ldr	r3, [r7, #0]
 801e532:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e536:	009b      	lsls	r3, r3, #2
 801e538:	461a      	mov	r2, r3
 801e53a:	f00b fb60 	bl	8029bfe <memcpy>
  return biR;
 801e53e:	68fb      	ldr	r3, [r7, #12]
}
 801e540:	4618      	mov	r0, r3
 801e542:	3710      	adds	r7, #16
 801e544:	46bd      	mov	sp, r7
 801e546:	bd80      	pop	{r7, pc}

0801e548 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801e548:	b580      	push	{r7, lr}
 801e54a:	b08c      	sub	sp, #48	@ 0x30
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	60f8      	str	r0, [r7, #12]
 801e550:	60b9      	str	r1, [r7, #8]
 801e552:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801e554:	2300      	movs	r3, #0
 801e556:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801e55e:	68bb      	ldr	r3, [r7, #8]
 801e560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e564:	4293      	cmp	r3, r2
 801e566:	bfb8      	it	lt
 801e568:	4613      	movlt	r3, r2
 801e56a:	b21b      	sxth	r3, r3
 801e56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801e56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e570:	3301      	adds	r3, #1
 801e572:	4619      	mov	r1, r3
 801e574:	68b8      	ldr	r0, [r7, #8]
 801e576:	f000 fdcf 	bl	801f118 <more_comps>
  more_comps(bib, n);
 801e57a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e57c:	6878      	ldr	r0, [r7, #4]
 801e57e:	f000 fdcb 	bl	801f118 <more_comps>
  pa = bia->comps;
 801e582:	68bb      	ldr	r3, [r7, #8]
 801e584:	68db      	ldr	r3, [r3, #12]
 801e586:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	68db      	ldr	r3, [r3, #12]
 801e58c:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801e58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e590:	681a      	ldr	r2, [r3, #0]
 801e592:	6a3b      	ldr	r3, [r7, #32]
 801e594:	1d19      	adds	r1, r3, #4
 801e596:	6239      	str	r1, [r7, #32]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	4413      	add	r3, r2
 801e59c:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801e59e:	69fa      	ldr	r2, [r7, #28]
 801e5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5a2:	4413      	add	r3, r2
 801e5a4:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801e5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	69fa      	ldr	r2, [r7, #28]
 801e5ac:	429a      	cmp	r2, r3
 801e5ae:	bf34      	ite	cc
 801e5b0:	2301      	movcc	r3, #1
 801e5b2:	2300      	movcs	r3, #0
 801e5b4:	b2db      	uxtb	r3, r3
 801e5b6:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801e5b8:	69ba      	ldr	r2, [r7, #24]
 801e5ba:	69fb      	ldr	r3, [r7, #28]
 801e5bc:	429a      	cmp	r2, r3
 801e5be:	bf34      	ite	cc
 801e5c0:	2301      	movcc	r3, #1
 801e5c2:	2300      	movcs	r3, #0
 801e5c4:	b2db      	uxtb	r3, r3
 801e5c6:	461a      	mov	r2, r3
 801e5c8:	697b      	ldr	r3, [r7, #20]
 801e5ca:	4313      	orrs	r3, r2
 801e5cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801e5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5d0:	1d1a      	adds	r2, r3, #4
 801e5d2:	627a      	str	r2, [r7, #36]	@ 0x24
 801e5d4:	69ba      	ldr	r2, [r7, #24]
 801e5d6:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801e5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e5da:	3b01      	subs	r3, #1
 801e5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d1d4      	bne.n	801e58e <bi_add+0x46>

  *pa = carry; /* do overflow */
 801e5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e5e8:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801e5ea:	6879      	ldr	r1, [r7, #4]
 801e5ec:	68f8      	ldr	r0, [r7, #12]
 801e5ee:	f7ff ff49 	bl	801e484 <bi_free>
  return trim(bia);
 801e5f2:	68b8      	ldr	r0, [r7, #8]
 801e5f4:	f000 fe9d 	bl	801f332 <trim>
 801e5f8:	4603      	mov	r3, r0
}
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	3730      	adds	r7, #48	@ 0x30
 801e5fe:	46bd      	mov	sp, r7
 801e600:	bd80      	pop	{r7, pc}

0801e602 <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801e602:	b580      	push	{r7, lr}
 801e604:	b08c      	sub	sp, #48	@ 0x30
 801e606:	af00      	add	r7, sp, #0
 801e608:	60f8      	str	r0, [r7, #12]
 801e60a:	60b9      	str	r1, [r7, #8]
 801e60c:	607a      	str	r2, [r7, #4]
 801e60e:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801e610:	68bb      	ldr	r3, [r7, #8]
 801e612:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801e618:	2300      	movs	r3, #0
 801e61a:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801e61c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e61e:	6878      	ldr	r0, [r7, #4]
 801e620:	f000 fd7a 	bl	801f118 <more_comps>
  pa = bia->comps;
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	68db      	ldr	r3, [r3, #12]
 801e628:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	68db      	ldr	r3, [r3, #12]
 801e62e:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801e630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e632:	681a      	ldr	r2, [r3, #0]
 801e634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e636:	1d19      	adds	r1, r3, #4
 801e638:	6279      	str	r1, [r7, #36]	@ 0x24
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	1ad3      	subs	r3, r2, r3
 801e63e:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801e640:	69fa      	ldr	r2, [r7, #28]
 801e642:	6a3b      	ldr	r3, [r7, #32]
 801e644:	1ad3      	subs	r3, r2, r3
 801e646:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801e648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	69fa      	ldr	r2, [r7, #28]
 801e64e:	429a      	cmp	r2, r3
 801e650:	bf8c      	ite	hi
 801e652:	2301      	movhi	r3, #1
 801e654:	2300      	movls	r3, #0
 801e656:	b2db      	uxtb	r3, r3
 801e658:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801e65a:	69ba      	ldr	r2, [r7, #24]
 801e65c:	69fb      	ldr	r3, [r7, #28]
 801e65e:	429a      	cmp	r2, r3
 801e660:	bf8c      	ite	hi
 801e662:	2301      	movhi	r3, #1
 801e664:	2300      	movls	r3, #0
 801e666:	b2db      	uxtb	r3, r3
 801e668:	461a      	mov	r2, r3
 801e66a:	697b      	ldr	r3, [r7, #20]
 801e66c:	4313      	orrs	r3, r2
 801e66e:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801e670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e672:	1d1a      	adds	r2, r3, #4
 801e674:	62ba      	str	r2, [r7, #40]	@ 0x28
 801e676:	69ba      	ldr	r2, [r7, #24]
 801e678:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801e67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e67c:	3b01      	subs	r3, #1
 801e67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e682:	2b00      	cmp	r3, #0
 801e684:	d1d4      	bne.n	801e630 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801e686:	683b      	ldr	r3, [r7, #0]
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d002      	beq.n	801e692 <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801e68c:	6a3a      	ldr	r2, [r7, #32]
 801e68e:	683b      	ldr	r3, [r7, #0]
 801e690:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801e692:	6878      	ldr	r0, [r7, #4]
 801e694:	f000 fe4d 	bl	801f332 <trim>
 801e698:	4603      	mov	r3, r0
 801e69a:	4619      	mov	r1, r3
 801e69c:	68f8      	ldr	r0, [r7, #12]
 801e69e:	f7ff fef1 	bl	801e484 <bi_free>
  return trim(bia);
 801e6a2:	68b8      	ldr	r0, [r7, #8]
 801e6a4:	f000 fe45 	bl	801f332 <trim>
 801e6a8:	4603      	mov	r3, r0
}
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	3730      	adds	r7, #48	@ 0x30
 801e6ae:	46bd      	mov	sp, r7
 801e6b0:	bd80      	pop	{r7, pc}

0801e6b2 <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801e6b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e6b6:	b094      	sub	sp, #80	@ 0x50
 801e6b8:	af00      	add	r7, sp, #0
 801e6ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e6bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e6be:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801e6c0:	2300      	movs	r3, #0
 801e6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e6ca:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801e6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e6ce:	3301      	adds	r3, #1
 801e6d0:	4619      	mov	r1, r3
 801e6d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e6d4:	f000 fd7c 	bl	801f1d0 <alloc>
 801e6d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801e6da:	2300      	movs	r3, #0
 801e6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801e6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e6e0:	68db      	ldr	r3, [r3, #12]
 801e6e2:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801e6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6e6:	68db      	ldr	r3, [r3, #12]
 801e6e8:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801e6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e6ec:	3301      	adds	r3, #1
 801e6ee:	009b      	lsls	r3, r3, #2
 801e6f0:	461a      	mov	r2, r3
 801e6f2:	2100      	movs	r1, #0
 801e6f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e6f6:	f00a f853 	bl	80287a0 <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801e6fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	2200      	movs	r2, #0
 801e700:	61bb      	str	r3, [r7, #24]
 801e702:	61fa      	str	r2, [r7, #28]
 801e704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e706:	009a      	lsls	r2, r3, #2
 801e708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e70a:	4413      	add	r3, r2
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	2200      	movs	r2, #0
 801e710:	613b      	str	r3, [r7, #16]
 801e712:	617a      	str	r2, [r7, #20]
 801e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e716:	2200      	movs	r2, #0
 801e718:	469a      	mov	sl, r3
 801e71a:	4693      	mov	fp, r2
 801e71c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801e720:	460b      	mov	r3, r1
 801e722:	fb0a f203 	mul.w	r2, sl, r3
 801e726:	4603      	mov	r3, r0
 801e728:	fb03 f30b 	mul.w	r3, r3, fp
 801e72c:	4413      	add	r3, r2
 801e72e:	4602      	mov	r2, r0
 801e730:	fba2 450a 	umull	r4, r5, r2, sl
 801e734:	442b      	add	r3, r5
 801e736:	461d      	mov	r5, r3
 801e738:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e73c:	460b      	mov	r3, r1
 801e73e:	eb13 0804 	adds.w	r8, r3, r4
 801e742:	4613      	mov	r3, r2
 801e744:	eb43 0905 	adc.w	r9, r3, r5
 801e748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e74a:	2200      	movs	r2, #0
 801e74c:	60bb      	str	r3, [r7, #8]
 801e74e:	60fa      	str	r2, [r7, #12]
 801e750:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e754:	460b      	mov	r3, r1
 801e756:	eb18 0303 	adds.w	r3, r8, r3
 801e75a:	603b      	str	r3, [r7, #0]
 801e75c:	4613      	mov	r3, r2
 801e75e:	eb49 0303 	adc.w	r3, r9, r3
 801e762:	607b      	str	r3, [r7, #4]
 801e764:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e768:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801e76c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e76e:	1d13      	adds	r3, r2, #4
 801e770:	647b      	str	r3, [r7, #68]	@ 0x44
 801e772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e774:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801e776:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801e77a:	f04f 0000 	mov.w	r0, #0
 801e77e:	f04f 0100 	mov.w	r1, #0
 801e782:	0018      	movs	r0, r3
 801e784:	2100      	movs	r1, #0
 801e786:	4603      	mov	r3, r0
 801e788:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801e78a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e78c:	3301      	adds	r3, #1
 801e78e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e794:	429a      	cmp	r2, r3
 801e796:	dbb0      	blt.n	801e6fa <bi_int_multiply+0x48>

  *r = carry;
 801e798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e79a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e79c:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801e79e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e7a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e7a2:	f7ff fe6f 	bl	801e484 <bi_free>
  return trim(biR);
 801e7a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801e7a8:	f000 fdc3 	bl	801f332 <trim>
 801e7ac:	4603      	mov	r3, r0
}
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	3750      	adds	r7, #80	@ 0x50
 801e7b2:	46bd      	mov	sp, r7
 801e7b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e7b8 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801e7b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e7bc:	b0a0      	sub	sp, #128	@ 0x80
 801e7be:	af00      	add	r7, sp, #0
 801e7c0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801e7c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 801e7c4:	647a      	str	r2, [r7, #68]	@ 0x44
 801e7c6:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801e7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e7ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e7ce:	673b      	str	r3, [r7, #112]	@ 0x70
 801e7d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e7d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e7d6:	461a      	mov	r2, r3
 801e7d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e7da:	1ad3      	subs	r3, r2, r3
 801e7dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801e7de:	2300      	movs	r3, #0
 801e7e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e7e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e7e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e7e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801e7ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e7ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801e7f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801e7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d00c      	beq.n	801e814 <bi_divide+0x5c>
 801e7fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801e7fc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e7fe:	f000 fc36 	bl	801f06e <bi_compare>
 801e802:	4603      	mov	r3, r0
 801e804:	2b00      	cmp	r3, #0
 801e806:	dd05      	ble.n	801e814 <bi_divide+0x5c>
    bi_free(ctx, v);
 801e808:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801e80a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801e80c:	f7ff fe3a 	bl	801e484 <bi_free>
    return u;
 801e810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e812:	e1fe      	b.n	801ec12 <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801e814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801e816:	3301      	adds	r3, #1
 801e818:	4619      	mov	r1, r3
 801e81a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801e81c:	f000 fcd8 	bl	801f1d0 <alloc>
 801e820:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801e822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e824:	3301      	adds	r3, #1
 801e826:	4619      	mov	r1, r3
 801e828:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801e82a:	f000 fcd1 	bl	801f1d0 <alloc>
 801e82e:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801e830:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801e832:	f000 fd7e 	bl	801f332 <trim>
 801e836:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801e838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e83a:	68d9      	ldr	r1, [r3, #12]
 801e83c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e83e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e842:	461a      	mov	r2, r3
 801e844:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e848:	4413      	add	r3, r2
 801e84a:	009b      	lsls	r3, r3, #2
 801e84c:	440b      	add	r3, r1
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	3301      	adds	r3, #1
 801e852:	2200      	movs	r2, #0
 801e854:	461c      	mov	r4, r3
 801e856:	4615      	mov	r5, r2
 801e858:	4622      	mov	r2, r4
 801e85a:	462b      	mov	r3, r5
 801e85c:	f04f 0000 	mov.w	r0, #0
 801e860:	f04f 0101 	mov.w	r1, #1
 801e864:	f7e1 ffc8 	bl	80007f8 <__aeabi_uldivmod>
 801e868:	4602      	mov	r2, r0
 801e86a:	460b      	mov	r3, r1
 801e86c:	4613      	mov	r3, r2
 801e86e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801e870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e872:	68d8      	ldr	r0, [r3, #12]
 801e874:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e87a:	009b      	lsls	r3, r3, #2
 801e87c:	461a      	mov	r2, r3
 801e87e:	2100      	movs	r1, #0
 801e880:	f009 ff8e 	bl	80287a0 <memset>

  /* normalise */
  if (d > 1) {
 801e884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e886:	2b01      	cmp	r3, #1
 801e888:	d916      	bls.n	801e8b8 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801e88a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801e88c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801e88e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801e890:	f7ff ff0f 	bl	801e6b2 <bi_int_multiply>
 801e894:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801e896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d007      	beq.n	801e8ac <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801e89c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801e8a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e8a2:	3306      	adds	r3, #6
 801e8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e8a8:	647b      	str	r3, [r7, #68]	@ 0x44
 801e8aa:	e005      	b.n	801e8b8 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801e8ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801e8ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801e8b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801e8b2:	f7ff fefe 	bl	801e6b2 <bi_int_multiply>
 801e8b6:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801e8b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e8ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e8be:	461a      	mov	r2, r3
 801e8c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e8c2:	4293      	cmp	r3, r2
 801e8c4:	d105      	bne.n	801e8d2 <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801e8c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e8c8:	3301      	adds	r3, #1
 801e8ca:	4619      	mov	r1, r3
 801e8cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801e8ce:	f000 fc23 	bl	801f118 <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801e8d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e8d4:	68d8      	ldr	r0, [r3, #12]
 801e8d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e8d8:	68d9      	ldr	r1, [r3, #12]
 801e8da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e8dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e8e0:	461a      	mov	r2, r3
 801e8e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e8e4:	1ad3      	subs	r3, r2, r3
 801e8e6:	1e5a      	subs	r2, r3, #1
 801e8e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e8ea:	1ad3      	subs	r3, r2, r3
 801e8ec:	009b      	lsls	r3, r3, #2
 801e8ee:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801e8f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e8f2:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801e8f4:	009b      	lsls	r3, r3, #2
 801e8f6:	461a      	mov	r2, r3
 801e8f8:	f00b f981 	bl	8029bfe <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801e8fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e8fe:	68d9      	ldr	r1, [r3, #12]
 801e900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e906:	461a      	mov	r2, r3
 801e908:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e90c:	4413      	add	r3, r2
 801e90e:	009b      	lsls	r3, r3, #2
 801e910:	440b      	add	r3, r1
 801e912:	6818      	ldr	r0, [r3, #0]
 801e914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e916:	68d9      	ldr	r1, [r3, #12]
 801e918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e91a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e91e:	461a      	mov	r2, r3
 801e920:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e924:	4413      	add	r3, r2
 801e926:	009b      	lsls	r3, r3, #2
 801e928:	440b      	add	r3, r1
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	4298      	cmp	r0, r3
 801e92e:	d103      	bne.n	801e938 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801e930:	f04f 33ff 	mov.w	r3, #4294967295
 801e934:	677b      	str	r3, [r7, #116]	@ 0x74
 801e936:	e0c2      	b.n	801eabe <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801e938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e93a:	68d9      	ldr	r1, [r3, #12]
 801e93c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e93e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e942:	461a      	mov	r2, r3
 801e944:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e948:	4413      	add	r3, r2
 801e94a:	009b      	lsls	r3, r3, #2
 801e94c:	440b      	add	r3, r1
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	2200      	movs	r2, #0
 801e952:	633b      	str	r3, [r7, #48]	@ 0x30
 801e954:	637a      	str	r2, [r7, #52]	@ 0x34
 801e956:	f04f 0000 	mov.w	r0, #0
 801e95a:	f04f 0100 	mov.w	r1, #0
 801e95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e960:	0019      	movs	r1, r3
 801e962:	2000      	movs	r0, #0
 801e964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e966:	68dc      	ldr	r4, [r3, #12]
 801e968:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e96a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e96e:	461a      	mov	r2, r3
 801e970:	4baa      	ldr	r3, [pc, #680]	@ (801ec1c <bi_divide+0x464>)
 801e972:	4413      	add	r3, r2
 801e974:	009b      	lsls	r3, r3, #2
 801e976:	4423      	add	r3, r4
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	2200      	movs	r2, #0
 801e97c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e97e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801e980:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801e984:	4623      	mov	r3, r4
 801e986:	18c3      	adds	r3, r0, r3
 801e988:	623b      	str	r3, [r7, #32]
 801e98a:	462b      	mov	r3, r5
 801e98c:	eb41 0303 	adc.w	r3, r1, r3
 801e990:	627b      	str	r3, [r7, #36]	@ 0x24
 801e992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e994:	68d9      	ldr	r1, [r3, #12]
 801e996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e998:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e99c:	461a      	mov	r2, r3
 801e99e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e9a2:	4413      	add	r3, r2
 801e9a4:	009b      	lsls	r3, r3, #2
 801e9a6:	440b      	add	r3, r1
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	2200      	movs	r2, #0
 801e9ac:	61bb      	str	r3, [r7, #24]
 801e9ae:	61fa      	str	r2, [r7, #28]
 801e9b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e9b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801e9b8:	f7e1 ff1e 	bl	80007f8 <__aeabi_uldivmod>
 801e9bc:	4602      	mov	r2, r0
 801e9be:	460b      	mov	r3, r1
 801e9c0:	4613      	mov	r3, r2
 801e9c2:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801e9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e9c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e9ca:	2b01      	cmp	r3, #1
 801e9cc:	dd77      	ble.n	801eabe <bi_divide+0x306>
 801e9ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e9d0:	68d9      	ldr	r1, [r3, #12]
 801e9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e9d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e9d8:	461a      	mov	r2, r3
 801e9da:	4b90      	ldr	r3, [pc, #576]	@ (801ec1c <bi_divide+0x464>)
 801e9dc:	4413      	add	r3, r2
 801e9de:	009b      	lsls	r3, r3, #2
 801e9e0:	440b      	add	r3, r1
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d06a      	beq.n	801eabe <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801e9e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e9ea:	68d9      	ldr	r1, [r3, #12]
 801e9ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e9ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e9f2:	461a      	mov	r2, r3
 801e9f4:	4b89      	ldr	r3, [pc, #548]	@ (801ec1c <bi_divide+0x464>)
 801e9f6:	4413      	add	r3, r2
 801e9f8:	009b      	lsls	r3, r3, #2
 801e9fa:	440b      	add	r3, r1
 801e9fc:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801e9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea00:	68d9      	ldr	r1, [r3, #12]
 801ea02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ea08:	461a      	mov	r2, r3
 801ea0a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ea0e:	4413      	add	r3, r2
 801ea10:	009b      	lsls	r3, r3, #2
 801ea12:	440b      	add	r3, r1
 801ea14:	681a      	ldr	r2, [r3, #0]
 801ea16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ea18:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801ea1c:	1ac3      	subs	r3, r0, r3
 801ea1e:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801ea20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea22:	68d9      	ldr	r1, [r3, #12]
 801ea24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ea26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ea2a:	461a      	mov	r2, r3
 801ea2c:	4b7b      	ldr	r3, [pc, #492]	@ (801ec1c <bi_divide+0x464>)
 801ea2e:	4413      	add	r3, r2
 801ea30:	009b      	lsls	r3, r3, #2
 801ea32:	440b      	add	r3, r1
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	2200      	movs	r2, #0
 801ea38:	613b      	str	r3, [r7, #16]
 801ea3a:	617a      	str	r2, [r7, #20]
 801ea3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ea3e:	2200      	movs	r2, #0
 801ea40:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ea42:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801ea44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801ea48:	462b      	mov	r3, r5
 801ea4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801ea4e:	4602      	mov	r2, r0
 801ea50:	fb02 f203 	mul.w	r2, r2, r3
 801ea54:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801ea58:	460b      	mov	r3, r1
 801ea5a:	4621      	mov	r1, r4
 801ea5c:	fb01 f303 	mul.w	r3, r1, r3
 801ea60:	4413      	add	r3, r2
 801ea62:	4622      	mov	r2, r4
 801ea64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ea66:	fba2 8901 	umull	r8, r9, r2, r1
 801ea6a:	444b      	add	r3, r9
 801ea6c:	4699      	mov	r9, r3
 801ea6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ea70:	2200      	movs	r2, #0
 801ea72:	60bb      	str	r3, [r7, #8]
 801ea74:	60fa      	str	r2, [r7, #12]
 801ea76:	f04f 0000 	mov.w	r0, #0
 801ea7a:	f04f 0100 	mov.w	r1, #0
 801ea7e:	68bb      	ldr	r3, [r7, #8]
 801ea80:	0019      	movs	r1, r3
 801ea82:	2000      	movs	r0, #0
 801ea84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ea86:	68dc      	ldr	r4, [r3, #12]
 801ea88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ea8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ea8e:	461a      	mov	r2, r3
 801ea90:	4b63      	ldr	r3, [pc, #396]	@ (801ec20 <bi_divide+0x468>)
 801ea92:	4413      	add	r3, r2
 801ea94:	009b      	lsls	r3, r3, #2
 801ea96:	4423      	add	r3, r4
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	603b      	str	r3, [r7, #0]
 801ea9e:	607a      	str	r2, [r7, #4]
 801eaa0:	e9d7 4500 	ldrd	r4, r5, [r7]
 801eaa4:	4623      	mov	r3, r4
 801eaa6:	eb10 0a03 	adds.w	sl, r0, r3
 801eaaa:	462b      	mov	r3, r5
 801eaac:	eb41 0b03 	adc.w	fp, r1, r3
 801eab0:	45c2      	cmp	sl, r8
 801eab2:	eb7b 0309 	sbcs.w	r3, fp, r9
 801eab6:	d202      	bcs.n	801eabe <bi_divide+0x306>
          q_dash--;
 801eab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801eaba:	3b01      	subs	r3, #1
 801eabc:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801eabe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d057      	beq.n	801eb74 <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801eac4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801eac6:	f7ff fc9d 	bl	801e404 <bi_copy>
 801eaca:	4603      	mov	r3, r0
 801eacc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801eace:	4619      	mov	r1, r3
 801ead0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ead2:	f7ff fdee 	bl	801e6b2 <bi_int_multiply>
 801ead6:	4602      	mov	r2, r0
 801ead8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801eadc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801eade:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801eae0:	f7ff fd8f 	bl	801e602 <bi_subtract>
 801eae4:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801eae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801eae8:	3301      	adds	r3, #1
 801eaea:	4619      	mov	r1, r3
 801eaec:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801eaee:	f000 fb13 	bl	801f118 <more_comps>

      Q(j) = q_dash;
 801eaf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eaf4:	68d9      	ldr	r1, [r3, #12]
 801eaf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eaf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eafc:	461a      	mov	r2, r3
 801eafe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801eb00:	1ad3      	subs	r3, r2, r3
 801eb02:	461a      	mov	r2, r3
 801eb04:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801eb08:	4413      	add	r3, r2
 801eb0a:	009b      	lsls	r3, r3, #2
 801eb0c:	18ca      	adds	r2, r1, r3
 801eb0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801eb10:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801eb12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d03d      	beq.n	801eb94 <bi_divide+0x3dc>
        Q(j)--;
 801eb18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb1a:	68d9      	ldr	r1, [r3, #12]
 801eb1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eb22:	461a      	mov	r2, r3
 801eb24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801eb26:	1ad3      	subs	r3, r2, r3
 801eb28:	461a      	mov	r2, r3
 801eb2a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801eb2e:	4413      	add	r3, r2
 801eb30:	009b      	lsls	r3, r3, #2
 801eb32:	18ca      	adds	r2, r1, r3
 801eb34:	6813      	ldr	r3, [r2, #0]
 801eb36:	3b01      	subs	r3, #1
 801eb38:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801eb3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801eb3c:	f7ff fc62 	bl	801e404 <bi_copy>
 801eb40:	4603      	mov	r3, r0
 801eb42:	461a      	mov	r2, r3
 801eb44:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801eb46:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801eb48:	f7ff fcfe 	bl	801e548 <bi_add>
 801eb4c:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801eb4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801eb50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	3b01      	subs	r3, #1
 801eb58:	b29b      	uxth	r3, r3
 801eb5a:	b21b      	sxth	r3, r3
 801eb5c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801eb5e:	8093      	strh	r3, [r2, #4]
        v->size--;
 801eb60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eb62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eb66:	b29b      	uxth	r3, r3
 801eb68:	3b01      	subs	r3, #1
 801eb6a:	b29b      	uxth	r3, r3
 801eb6c:	b21b      	sxth	r3, r3
 801eb6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801eb70:	8093      	strh	r3, [r2, #4]
 801eb72:	e00f      	b.n	801eb94 <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801eb74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb76:	68d9      	ldr	r1, [r3, #12]
 801eb78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eb7e:	461a      	mov	r2, r3
 801eb80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801eb82:	1ad3      	subs	r3, r2, r3
 801eb84:	461a      	mov	r2, r3
 801eb86:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801eb8a:	4413      	add	r3, r2
 801eb8c:	009b      	lsls	r3, r3, #2
 801eb8e:	18ca      	adds	r2, r1, r3
 801eb90:	2300      	movs	r3, #0
 801eb92:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801eb94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801eb96:	68d9      	ldr	r1, [r3, #12]
 801eb98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801eb9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eb9e:	461a      	mov	r2, r3
 801eba0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801eba2:	1ad3      	subs	r3, r2, r3
 801eba4:	1e5a      	subs	r2, r3, #1
 801eba6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801eba8:	1ad3      	subs	r3, r2, r3
 801ebaa:	009b      	lsls	r3, r3, #2
 801ebac:	18c8      	adds	r0, r1, r3
 801ebae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ebb0:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801ebb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ebb4:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801ebb6:	009b      	lsls	r3, r3, #2
 801ebb8:	461a      	mov	r2, r3
 801ebba:	f00b f820 	bl	8029bfe <memcpy>
  } while (++j <= m);
 801ebbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ebc0:	3301      	adds	r3, #1
 801ebc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ebc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801ebc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ebc8:	429a      	cmp	r2, r3
 801ebca:	f77f ae82 	ble.w	801e8d2 <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801ebce:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801ebd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ebd2:	f7ff fc57 	bl	801e484 <bi_free>
  bi_free(ctx, v);
 801ebd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ebd8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ebda:	f7ff fc53 	bl	801e484 <bi_free>

  if (is_mod) /* get the remainder */
 801ebde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d00e      	beq.n	801ec02 <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801ebe4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ebe6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ebe8:	f7ff fc4c 	bl	801e484 <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801ebec:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801ebee:	f000 fba0 	bl	801f332 <trim>
 801ebf2:	4603      	mov	r3, r0
 801ebf4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801ebf6:	4619      	mov	r1, r3
 801ebf8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ebfa:	f000 f813 	bl	801ec24 <bi_int_divide>
 801ebfe:	4603      	mov	r3, r0
 801ec00:	e007      	b.n	801ec12 <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801ec02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801ec04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ec06:	f7ff fc3d 	bl	801e484 <bi_free>
    return trim(quotient);
 801ec0a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801ec0c:	f000 fb91 	bl	801f332 <trim>
 801ec10:	4603      	mov	r3, r0
  }
}
 801ec12:	4618      	mov	r0, r3
 801ec14:	3780      	adds	r7, #128	@ 0x80
 801ec16:	46bd      	mov	sp, r7
 801ec18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ec1c:	3ffffffe 	.word	0x3ffffffe
 801ec20:	3ffffffd 	.word	0x3ffffffd

0801ec24 <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801ec24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ec28:	b08a      	sub	sp, #40	@ 0x28
 801ec2a:	af00      	add	r7, sp, #0
 801ec2c:	6178      	str	r0, [r7, #20]
 801ec2e:	6139      	str	r1, [r7, #16]
 801ec30:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801ec32:	693b      	ldr	r3, [r7, #16]
 801ec34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ec38:	3b01      	subs	r3, #1
 801ec3a:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801ec3c:	f04f 0200 	mov.w	r2, #0
 801ec40:	f04f 0300 	mov.w	r3, #0
 801ec44:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801ec48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ec4c:	f04f 0200 	mov.w	r2, #0
 801ec50:	f04f 0300 	mov.w	r3, #0
 801ec54:	0003      	movs	r3, r0
 801ec56:	2200      	movs	r2, #0
 801ec58:	6939      	ldr	r1, [r7, #16]
 801ec5a:	68c8      	ldr	r0, [r1, #12]
 801ec5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ec5e:	0089      	lsls	r1, r1, #2
 801ec60:	4401      	add	r1, r0
 801ec62:	6809      	ldr	r1, [r1, #0]
 801ec64:	2000      	movs	r0, #0
 801ec66:	460c      	mov	r4, r1
 801ec68:	4605      	mov	r5, r0
 801ec6a:	eb12 0804 	adds.w	r8, r2, r4
 801ec6e:	eb43 0905 	adc.w	r9, r3, r5
 801ec72:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801ec76:	68fb      	ldr	r3, [r7, #12]
 801ec78:	2200      	movs	r2, #0
 801ec7a:	603b      	str	r3, [r7, #0]
 801ec7c:	607a      	str	r2, [r7, #4]
 801ec7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ec82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ec86:	f7e1 fdb7 	bl	80007f8 <__aeabi_uldivmod>
 801ec8a:	4602      	mov	r2, r0
 801ec8c:	460b      	mov	r3, r1
 801ec8e:	4610      	mov	r0, r2
 801ec90:	4619      	mov	r1, r3
 801ec92:	693b      	ldr	r3, [r7, #16]
 801ec94:	68da      	ldr	r2, [r3, #12]
 801ec96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec98:	009b      	lsls	r3, r3, #2
 801ec9a:	4413      	add	r3, r2
 801ec9c:	4602      	mov	r2, r0
 801ec9e:	601a      	str	r2, [r3, #0]
    r %= denom;
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	2200      	movs	r2, #0
 801eca4:	469a      	mov	sl, r3
 801eca6:	4693      	mov	fp, r2
 801eca8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ecac:	4652      	mov	r2, sl
 801ecae:	465b      	mov	r3, fp
 801ecb0:	f7e1 fda2 	bl	80007f8 <__aeabi_uldivmod>
 801ecb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801ecb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecba:	3b01      	subs	r3, #1
 801ecbc:	627b      	str	r3, [r7, #36]	@ 0x24
 801ecbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecc0:	2b00      	cmp	r3, #0
 801ecc2:	dac1      	bge.n	801ec48 <bi_int_divide+0x24>

  return trim(biR);
 801ecc4:	6938      	ldr	r0, [r7, #16]
 801ecc6:	f000 fb34 	bl	801f332 <trim>
 801ecca:	4603      	mov	r3, r0
}
 801eccc:	4618      	mov	r0, r3
 801ecce:	3728      	adds	r7, #40	@ 0x28
 801ecd0:	46bd      	mov	sp, r7
 801ecd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801ecd6 <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801ecd6:	b580      	push	{r7, lr}
 801ecd8:	b088      	sub	sp, #32
 801ecda:	af00      	add	r7, sp, #0
 801ecdc:	60f8      	str	r0, [r7, #12]
 801ecde:	60b9      	str	r1, [r7, #8]
 801ece0:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	3303      	adds	r3, #3
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	da00      	bge.n	801ecec <bi_import+0x16>
 801ecea:	3303      	adds	r3, #3
 801ecec:	109b      	asrs	r3, r3, #2
 801ecee:	4619      	mov	r1, r3
 801ecf0:	68f8      	ldr	r0, [r7, #12]
 801ecf2:	f000 fa6d 	bl	801f1d0 <alloc>
 801ecf6:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	61bb      	str	r3, [r7, #24]
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801ed00:	693b      	ldr	r3, [r7, #16]
 801ed02:	68d8      	ldr	r0, [r3, #12]
 801ed04:	693b      	ldr	r3, [r7, #16]
 801ed06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ed0a:	009b      	lsls	r3, r3, #2
 801ed0c:	461a      	mov	r2, r3
 801ed0e:	2100      	movs	r1, #0
 801ed10:	f009 fd46 	bl	80287a0 <memset>

  for (i = size - 1; i >= 0; i--) {
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	3b01      	subs	r3, #1
 801ed18:	61fb      	str	r3, [r7, #28]
 801ed1a:	e022      	b.n	801ed62 <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801ed1c:	693b      	ldr	r3, [r7, #16]
 801ed1e:	68da      	ldr	r2, [r3, #12]
 801ed20:	697b      	ldr	r3, [r7, #20]
 801ed22:	009b      	lsls	r3, r3, #2
 801ed24:	4413      	add	r3, r2
 801ed26:	6819      	ldr	r1, [r3, #0]
 801ed28:	69fb      	ldr	r3, [r7, #28]
 801ed2a:	68ba      	ldr	r2, [r7, #8]
 801ed2c:	4413      	add	r3, r2
 801ed2e:	781b      	ldrb	r3, [r3, #0]
 801ed30:	461a      	mov	r2, r3
 801ed32:	69bb      	ldr	r3, [r7, #24]
 801ed34:	00db      	lsls	r3, r3, #3
 801ed36:	409a      	lsls	r2, r3
 801ed38:	693b      	ldr	r3, [r7, #16]
 801ed3a:	68d8      	ldr	r0, [r3, #12]
 801ed3c:	697b      	ldr	r3, [r7, #20]
 801ed3e:	009b      	lsls	r3, r3, #2
 801ed40:	4403      	add	r3, r0
 801ed42:	440a      	add	r2, r1
 801ed44:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801ed46:	69bb      	ldr	r3, [r7, #24]
 801ed48:	3301      	adds	r3, #1
 801ed4a:	61bb      	str	r3, [r7, #24]
 801ed4c:	69bb      	ldr	r3, [r7, #24]
 801ed4e:	2b04      	cmp	r3, #4
 801ed50:	d104      	bne.n	801ed5c <bi_import+0x86>
      j = 0;
 801ed52:	2300      	movs	r3, #0
 801ed54:	61bb      	str	r3, [r7, #24]
      offset++;
 801ed56:	697b      	ldr	r3, [r7, #20]
 801ed58:	3301      	adds	r3, #1
 801ed5a:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801ed5c:	69fb      	ldr	r3, [r7, #28]
 801ed5e:	3b01      	subs	r3, #1
 801ed60:	61fb      	str	r3, [r7, #28]
 801ed62:	69fb      	ldr	r3, [r7, #28]
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	dad9      	bge.n	801ed1c <bi_import+0x46>
    }
  }

  return trim(biR);
 801ed68:	6938      	ldr	r0, [r7, #16]
 801ed6a:	f000 fae2 	bl	801f332 <trim>
 801ed6e:	4603      	mov	r3, r0
}
 801ed70:	4618      	mov	r0, r3
 801ed72:	3720      	adds	r7, #32
 801ed74:	46bd      	mov	sp, r7
 801ed76:	bd80      	pop	{r7, pc}

0801ed78 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b08a      	sub	sp, #40	@ 0x28
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	60f8      	str	r0, [r7, #12]
 801ed80:	60b9      	str	r1, [r7, #8]
 801ed82:	607a      	str	r2, [r7, #4]
 801ed84:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801ed86:	683b      	ldr	r3, [r7, #0]
 801ed88:	3b01      	subs	r3, #1
 801ed8a:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801ed8c:	683b      	ldr	r3, [r7, #0]
 801ed8e:	461a      	mov	r2, r3
 801ed90:	2100      	movs	r1, #0
 801ed92:	6878      	ldr	r0, [r7, #4]
 801ed94:	f009 fd04 	bl	80287a0 <memset>

  for (i = 0; i < x->size; i++) {
 801ed98:	2300      	movs	r3, #0
 801ed9a:	627b      	str	r3, [r7, #36]	@ 0x24
 801ed9c:	e02b      	b.n	801edf6 <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801ed9e:	2300      	movs	r3, #0
 801eda0:	623b      	str	r3, [r7, #32]
 801eda2:	e022      	b.n	801edea <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801eda4:	6a3b      	ldr	r3, [r7, #32]
 801eda6:	00db      	lsls	r3, r3, #3
 801eda8:	22ff      	movs	r2, #255	@ 0xff
 801edaa:	fa02 f303 	lsl.w	r3, r2, r3
 801edae:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801edb0:	68bb      	ldr	r3, [r7, #8]
 801edb2:	68da      	ldr	r2, [r3, #12]
 801edb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edb6:	009b      	lsls	r3, r3, #2
 801edb8:	4413      	add	r3, r2
 801edba:	681a      	ldr	r2, [r3, #0]
 801edbc:	69bb      	ldr	r3, [r7, #24]
 801edbe:	4013      	ands	r3, r2
 801edc0:	461a      	mov	r2, r3
 801edc2:	6a3b      	ldr	r3, [r7, #32]
 801edc4:	00db      	lsls	r3, r3, #3
 801edc6:	fa42 f303 	asr.w	r3, r2, r3
 801edca:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801edcc:	69fb      	ldr	r3, [r7, #28]
 801edce:	1e5a      	subs	r2, r3, #1
 801edd0:	61fa      	str	r2, [r7, #28]
 801edd2:	461a      	mov	r2, r3
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	4413      	add	r3, r2
 801edd8:	697a      	ldr	r2, [r7, #20]
 801edda:	b2d2      	uxtb	r2, r2
 801eddc:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801edde:	69fb      	ldr	r3, [r7, #28]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	db10      	blt.n	801ee06 <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801ede4:	6a3b      	ldr	r3, [r7, #32]
 801ede6:	3301      	adds	r3, #1
 801ede8:	623b      	str	r3, [r7, #32]
 801edea:	6a3b      	ldr	r3, [r7, #32]
 801edec:	2b03      	cmp	r3, #3
 801edee:	ddd9      	ble.n	801eda4 <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801edf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edf2:	3301      	adds	r3, #1
 801edf4:	627b      	str	r3, [r7, #36]	@ 0x24
 801edf6:	68bb      	ldr	r3, [r7, #8]
 801edf8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801edfc:	461a      	mov	r2, r3
 801edfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee00:	4293      	cmp	r3, r2
 801ee02:	dbcc      	blt.n	801ed9e <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801ee04:	e000      	b.n	801ee08 <bi_export+0x90>
        goto buf_done;
 801ee06:	bf00      	nop

  bi_free(ctx, x);
 801ee08:	68b9      	ldr	r1, [r7, #8]
 801ee0a:	68f8      	ldr	r0, [r7, #12]
 801ee0c:	f7ff fb3a 	bl	801e484 <bi_free>
}
 801ee10:	bf00      	nop
 801ee12:	3728      	adds	r7, #40	@ 0x28
 801ee14:	46bd      	mov	sp, r7
 801ee16:	bd80      	pop	{r7, pc}

0801ee18 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801ee18:	b5b0      	push	{r4, r5, r7, lr}
 801ee1a:	b086      	sub	sp, #24
 801ee1c:	af00      	add	r7, sp, #0
 801ee1e:	60f8      	str	r0, [r7, #12]
 801ee20:	60b9      	str	r1, [r7, #8]
 801ee22:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801ee24:	68bb      	ldr	r3, [r7, #8]
 801ee26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ee2a:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801ee2c:	68bb      	ldr	r3, [r7, #8]
 801ee2e:	68da      	ldr	r2, [r3, #12]
 801ee30:	6979      	ldr	r1, [r7, #20]
 801ee32:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ee36:	440b      	add	r3, r1
 801ee38:	009b      	lsls	r3, r3, #2
 801ee3a:	4413      	add	r3, r2
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	3301      	adds	r3, #1
 801ee40:	2200      	movs	r2, #0
 801ee42:	461c      	mov	r4, r3
 801ee44:	4615      	mov	r5, r2
 801ee46:	4622      	mov	r2, r4
 801ee48:	462b      	mov	r3, r5
 801ee4a:	f04f 0000 	mov.w	r0, #0
 801ee4e:	f04f 0101 	mov.w	r1, #1
 801ee52:	f7e1 fcd1 	bl	80007f8 <__aeabi_uldivmod>
 801ee56:	4602      	mov	r2, r0
 801ee58:	460b      	mov	r3, r1
 801ee5a:	4613      	mov	r3, r2
 801ee5c:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801ee5e:	68fa      	ldr	r2, [r7, #12]
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	3302      	adds	r3, #2
 801ee64:	009b      	lsls	r3, r3, #2
 801ee66:	4413      	add	r3, r2
 801ee68:	68ba      	ldr	r2, [r7, #8]
 801ee6a:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801ee6c:	68fa      	ldr	r2, [r7, #12]
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	3302      	adds	r3, #2
 801ee72:	009b      	lsls	r3, r3, #2
 801ee74:	4413      	add	r3, r2
 801ee76:	685b      	ldr	r3, [r3, #4]
 801ee78:	4618      	mov	r0, r3
 801ee7a:	f7ff fadb 	bl	801e434 <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801ee7e:	693a      	ldr	r2, [r7, #16]
 801ee80:	68b9      	ldr	r1, [r7, #8]
 801ee82:	68f8      	ldr	r0, [r7, #12]
 801ee84:	f7ff fc15 	bl	801e6b2 <bi_int_multiply>
 801ee88:	4601      	mov	r1, r0
 801ee8a:	68fb      	ldr	r3, [r7, #12]
 801ee8c:	687a      	ldr	r2, [r7, #4]
 801ee8e:	3206      	adds	r2, #6
 801ee90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	687a      	ldr	r2, [r7, #4]
 801ee98:	3206      	adds	r2, #6
 801ee9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ee9e:	4618      	mov	r0, r3
 801eea0:	f7ff fac8 	bl	801e434 <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801eea4:	bf00      	nop
 801eea6:	3718      	adds	r7, #24
 801eea8:	46bd      	mov	sp, r7
 801eeaa:	bdb0      	pop	{r4, r5, r7, pc}

0801eeac <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801eeac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801eeb0:	b098      	sub	sp, #96	@ 0x60
 801eeb2:	af00      	add	r7, sp, #0
 801eeb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801eeb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 801eeb8:	627a      	str	r2, [r7, #36]	@ 0x24
 801eeba:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801eebc:	2300      	movs	r3, #0
 801eebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801eec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801eec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eeca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801eece:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801eed0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801eed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801eed4:	4413      	add	r3, r2
 801eed6:	4619      	mov	r1, r3
 801eed8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801eeda:	f000 f979 	bl	801f1d0 <alloc>
 801eede:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801eee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eee2:	68db      	ldr	r3, [r3, #12]
 801eee4:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801eee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eee8:	68db      	ldr	r3, [r3, #12]
 801eeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801eeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eeee:	68db      	ldr	r3, [r3, #12]
 801eef0:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801eef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eef4:	68d8      	ldr	r0, [r3, #12]
 801eef6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801eef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801eefa:	4413      	add	r3, r2
 801eefc:	009b      	lsls	r3, r3, #2
 801eefe:	461a      	mov	r2, r3
 801ef00:	2100      	movs	r1, #0
 801ef02:	f009 fc4d 	bl	80287a0 <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801ef06:	2300      	movs	r3, #0
 801ef08:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801ef0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ef0c:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801ef0e:	2300      	movs	r3, #0
 801ef10:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801ef12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d014      	beq.n	801ef44 <regular_multiply+0x98>
 801ef1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801ef1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ef20:	1ad3      	subs	r3, r2, r3
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	dd0e      	ble.n	801ef44 <regular_multiply+0x98>
 801ef26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801ef2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef2c:	429a      	cmp	r2, r3
 801ef2e:	da09      	bge.n	801ef44 <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801ef30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ef34:	3b01      	subs	r3, #1
 801ef36:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801ef38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801ef3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ef3e:	1ad3      	subs	r3, r2, r3
 801ef40:	3b01      	subs	r3, #1
 801ef42:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801ef44:	6a3b      	ldr	r3, [r7, #32]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d003      	beq.n	801ef52 <regular_multiply+0xa6>
 801ef4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ef4c:	6a3b      	ldr	r3, [r7, #32]
 801ef4e:	429a      	cmp	r2, r3
 801ef50:	da5a      	bge.n	801f008 <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801ef52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ef54:	009a      	lsls	r2, r3, #2
 801ef56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef58:	4413      	add	r3, r2
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	2200      	movs	r2, #0
 801ef5e:	61bb      	str	r3, [r7, #24]
 801ef60:	61fa      	str	r2, [r7, #28]
 801ef62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ef64:	009a      	lsls	r2, r3, #2
 801ef66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ef68:	4413      	add	r3, r2
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	469a      	mov	sl, r3
 801ef70:	4693      	mov	fp, r2
 801ef72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ef74:	009a      	lsls	r2, r3, #2
 801ef76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ef78:	4413      	add	r3, r2
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	2200      	movs	r2, #0
 801ef7e:	613b      	str	r3, [r7, #16]
 801ef80:	617a      	str	r2, [r7, #20]
 801ef82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ef86:	4603      	mov	r3, r0
 801ef88:	fb03 f20b 	mul.w	r2, r3, fp
 801ef8c:	460b      	mov	r3, r1
 801ef8e:	fb0a f303 	mul.w	r3, sl, r3
 801ef92:	4413      	add	r3, r2
 801ef94:	4602      	mov	r2, r0
 801ef96:	fbaa 4502 	umull	r4, r5, sl, r2
 801ef9a:	442b      	add	r3, r5
 801ef9c:	461d      	mov	r5, r3
 801ef9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801efa2:	460b      	mov	r3, r1
 801efa4:	eb13 0804 	adds.w	r8, r3, r4
 801efa8:	4613      	mov	r3, r2
 801efaa:	eb43 0905 	adc.w	r9, r3, r5
 801efae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801efb0:	2200      	movs	r2, #0
 801efb2:	60bb      	str	r3, [r7, #8]
 801efb4:	60fa      	str	r2, [r7, #12]
 801efb6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801efba:	460b      	mov	r3, r1
 801efbc:	eb18 0303 	adds.w	r3, r8, r3
 801efc0:	603b      	str	r3, [r7, #0]
 801efc2:	4613      	mov	r3, r2
 801efc4:	eb49 0303 	adc.w	r3, r9, r3
 801efc8:	607b      	str	r3, [r7, #4]
 801efca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801efce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801efd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801efd4:	1c53      	adds	r3, r2, #1
 801efd6:	653b      	str	r3, [r7, #80]	@ 0x50
 801efd8:	4613      	mov	r3, r2
 801efda:	009a      	lsls	r2, r3, #2
 801efdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efde:	441a      	add	r2, r3
 801efe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efe2:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801efe4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801efe8:	f04f 0000 	mov.w	r0, #0
 801efec:	f04f 0100 	mov.w	r1, #0
 801eff0:	0018      	movs	r0, r3
 801eff2:	2100      	movs	r1, #0
 801eff4:	4603      	mov	r3, r0
 801eff6:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801eff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801effa:	3301      	adds	r3, #1
 801effc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801effe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801f000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f002:	429a      	cmp	r2, r3
 801f004:	db9e      	blt.n	801ef44 <regular_multiply+0x98>
 801f006:	e000      	b.n	801f00a <regular_multiply+0x15e>
        break;
 801f008:	bf00      	nop

    sr[r_index] = carry;
 801f00a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f00c:	009a      	lsls	r2, r3, #2
 801f00e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f010:	441a      	add	r2, r3
 801f012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f014:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801f016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f018:	3301      	adds	r3, #1
 801f01a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f01c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801f01e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f020:	429a      	cmp	r2, r3
 801f022:	f6ff af70 	blt.w	801ef06 <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801f026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f028:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f02a:	f7ff fa2b 	bl	801e484 <bi_free>
  bi_free(ctx, bib);
 801f02e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f030:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f032:	f7ff fa27 	bl	801e484 <bi_free>
  return trim(biR);
 801f036:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801f038:	f000 f97b 	bl	801f332 <trim>
 801f03c:	4603      	mov	r3, r0
}
 801f03e:	4618      	mov	r0, r3
 801f040:	3760      	adds	r7, #96	@ 0x60
 801f042:	46bd      	mov	sp, r7
 801f044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801f048 <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801f048:	b580      	push	{r7, lr}
 801f04a:	b086      	sub	sp, #24
 801f04c:	af02      	add	r7, sp, #8
 801f04e:	60f8      	str	r0, [r7, #12]
 801f050:	60b9      	str	r1, [r7, #8]
 801f052:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801f054:	2300      	movs	r3, #0
 801f056:	9300      	str	r3, [sp, #0]
 801f058:	2300      	movs	r3, #0
 801f05a:	687a      	ldr	r2, [r7, #4]
 801f05c:	68b9      	ldr	r1, [r7, #8]
 801f05e:	68f8      	ldr	r0, [r7, #12]
 801f060:	f7ff ff24 	bl	801eeac <regular_multiply>
 801f064:	4603      	mov	r3, r0
#endif
}
 801f066:	4618      	mov	r0, r3
 801f068:	3710      	adds	r7, #16
 801f06a:	46bd      	mov	sp, r7
 801f06c:	bd80      	pop	{r7, pc}

0801f06e <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801f06e:	b480      	push	{r7}
 801f070:	b087      	sub	sp, #28
 801f072:	af00      	add	r7, sp, #0
 801f074:	6078      	str	r0, [r7, #4]
 801f076:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f07e:	683b      	ldr	r3, [r7, #0]
 801f080:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f084:	429a      	cmp	r2, r3
 801f086:	dd02      	ble.n	801f08e <bi_compare+0x20>
    r = 1;
 801f088:	2301      	movs	r3, #1
 801f08a:	617b      	str	r3, [r7, #20]
 801f08c:	e03d      	b.n	801f10a <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f094:	683b      	ldr	r3, [r7, #0]
 801f096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f09a:	429a      	cmp	r2, r3
 801f09c:	da03      	bge.n	801f0a6 <bi_compare+0x38>
    r = -1;
 801f09e:	f04f 33ff 	mov.w	r3, #4294967295
 801f0a2:	617b      	str	r3, [r7, #20]
 801f0a4:	e031      	b.n	801f10a <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	68db      	ldr	r3, [r3, #12]
 801f0aa:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801f0ac:	683b      	ldr	r3, [r7, #0]
 801f0ae:	68db      	ldr	r3, [r3, #12]
 801f0b0:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f0bc:	3b01      	subs	r3, #1
 801f0be:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801f0c0:	693b      	ldr	r3, [r7, #16]
 801f0c2:	009b      	lsls	r3, r3, #2
 801f0c4:	68fa      	ldr	r2, [r7, #12]
 801f0c6:	4413      	add	r3, r2
 801f0c8:	681a      	ldr	r2, [r3, #0]
 801f0ca:	693b      	ldr	r3, [r7, #16]
 801f0cc:	009b      	lsls	r3, r3, #2
 801f0ce:	68b9      	ldr	r1, [r7, #8]
 801f0d0:	440b      	add	r3, r1
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	429a      	cmp	r2, r3
 801f0d6:	d902      	bls.n	801f0de <bi_compare+0x70>
        r = 1;
 801f0d8:	2301      	movs	r3, #1
 801f0da:	617b      	str	r3, [r7, #20]
        break;
 801f0dc:	e015      	b.n	801f10a <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801f0de:	693b      	ldr	r3, [r7, #16]
 801f0e0:	009b      	lsls	r3, r3, #2
 801f0e2:	68fa      	ldr	r2, [r7, #12]
 801f0e4:	4413      	add	r3, r2
 801f0e6:	681a      	ldr	r2, [r3, #0]
 801f0e8:	693b      	ldr	r3, [r7, #16]
 801f0ea:	009b      	lsls	r3, r3, #2
 801f0ec:	68b9      	ldr	r1, [r7, #8]
 801f0ee:	440b      	add	r3, r1
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	429a      	cmp	r2, r3
 801f0f4:	d203      	bcs.n	801f0fe <bi_compare+0x90>
        r = -1;
 801f0f6:	f04f 33ff 	mov.w	r3, #4294967295
 801f0fa:	617b      	str	r3, [r7, #20]
        break;
 801f0fc:	e005      	b.n	801f10a <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801f0fe:	693b      	ldr	r3, [r7, #16]
 801f100:	3b01      	subs	r3, #1
 801f102:	613b      	str	r3, [r7, #16]
 801f104:	693b      	ldr	r3, [r7, #16]
 801f106:	2b00      	cmp	r3, #0
 801f108:	dada      	bge.n	801f0c0 <bi_compare+0x52>
  }

  return r;
 801f10a:	697b      	ldr	r3, [r7, #20]
}
 801f10c:	4618      	mov	r0, r3
 801f10e:	371c      	adds	r7, #28
 801f110:	46bd      	mov	sp, r7
 801f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f116:	4770      	bx	lr

0801f118 <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801f118:	b580      	push	{r7, lr}
 801f11a:	b084      	sub	sp, #16
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
 801f120:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f128:	461a      	mov	r2, r3
 801f12a:	683b      	ldr	r3, [r7, #0]
 801f12c:	4293      	cmp	r3, r2
 801f12e:	dd2e      	ble.n	801f18e <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f136:	005b      	lsls	r3, r3, #1
 801f138:	683a      	ldr	r2, [r7, #0]
 801f13a:	4293      	cmp	r3, r2
 801f13c:	bfb8      	it	lt
 801f13e:	4613      	movlt	r3, r2
 801f140:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	009b      	lsls	r3, r3, #2
 801f146:	4619      	mov	r1, r3
 801f148:	2001      	movs	r0, #1
 801f14a:	f007 fb5f 	bl	802680c <calloc>
 801f14e:	4603      	mov	r3, r0
 801f150:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801f152:	68bb      	ldr	r3, [r7, #8]
 801f154:	2b00      	cmp	r3, #0
 801f156:	d00e      	beq.n	801f176 <more_comps+0x5e>
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	dd09      	ble.n	801f176 <more_comps+0x5e>
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	68d9      	ldr	r1, [r3, #12]
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f16c:	009b      	lsls	r3, r3, #2
 801f16e:	461a      	mov	r2, r3
 801f170:	68b8      	ldr	r0, [r7, #8]
 801f172:	f00a fd44 	bl	8029bfe <memcpy>
    free(bi->comps);
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	68db      	ldr	r3, [r3, #12]
 801f17a:	4618      	mov	r0, r3
 801f17c:	f007 fb6a 	bl	8026854 <free>
    bi->max_comps = (short) max;
 801f180:	68fb      	ldr	r3, [r7, #12]
 801f182:	b21a      	sxth	r2, r3
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	68ba      	ldr	r2, [r7, #8]
 801f18c:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f194:	461a      	mov	r2, r3
 801f196:	683b      	ldr	r3, [r7, #0]
 801f198:	4293      	cmp	r3, r2
 801f19a:	dd11      	ble.n	801f1c0 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	68da      	ldr	r2, [r3, #12]
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f1a6:	009b      	lsls	r3, r3, #2
 801f1a8:	18d0      	adds	r0, r2, r3
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f1b0:	461a      	mov	r2, r3
 801f1b2:	683b      	ldr	r3, [r7, #0]
 801f1b4:	1a9b      	subs	r3, r3, r2
 801f1b6:	009b      	lsls	r3, r3, #2
 801f1b8:	461a      	mov	r2, r3
 801f1ba:	2100      	movs	r1, #0
 801f1bc:	f009 faf0 	bl	80287a0 <memset>
  }

  bi->size = (short) n;
 801f1c0:	683b      	ldr	r3, [r7, #0]
 801f1c2:	b21a      	sxth	r2, r3
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	809a      	strh	r2, [r3, #4]
}
 801f1c8:	bf00      	nop
 801f1ca:	3710      	adds	r7, #16
 801f1cc:	46bd      	mov	sp, r7
 801f1ce:	bd80      	pop	{r7, pc}

0801f1d0 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801f1d0:	b580      	push	{r7, lr}
 801f1d2:	b084      	sub	sp, #16
 801f1d4:	af00      	add	r7, sp, #0
 801f1d6:	6078      	str	r0, [r7, #4]
 801f1d8:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	685b      	ldr	r3, [r3, #4]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d016      	beq.n	801f210 <alloc+0x40>
    biR = ctx->free_list;
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	685b      	ldr	r3, [r3, #4]
 801f1e6:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	681a      	ldr	r2, [r3, #0]
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f1f4:	1e5a      	subs	r2, r3, #1
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801f1fa:	68fb      	ldr	r3, [r7, #12]
 801f1fc:	689b      	ldr	r3, [r3, #8]
 801f1fe:	2b00      	cmp	r3, #0
 801f200:	d001      	beq.n	801f206 <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801f202:	f007 fad5 	bl	80267b0 <abort>
    }

    more_comps(biR, size);
 801f206:	6839      	ldr	r1, [r7, #0]
 801f208:	68f8      	ldr	r0, [r7, #12]
 801f20a:	f7ff ff85 	bl	801f118 <more_comps>
 801f20e:	e013      	b.n	801f238 <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 801f210:	2110      	movs	r1, #16
 801f212:	2001      	movs	r0, #1
 801f214:	f007 fafa 	bl	802680c <calloc>
 801f218:	4603      	mov	r3, r0
 801f21a:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801f21c:	683b      	ldr	r3, [r7, #0]
 801f21e:	009b      	lsls	r3, r3, #2
 801f220:	4619      	mov	r1, r3
 801f222:	2001      	movs	r0, #1
 801f224:	f007 faf2 	bl	802680c <calloc>
 801f228:	4603      	mov	r3, r0
 801f22a:	461a      	mov	r2, r3
 801f22c:	68fb      	ldr	r3, [r7, #12]
 801f22e:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801f230:	683b      	ldr	r3, [r7, #0]
 801f232:	b21a      	sxth	r2, r3
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801f238:	683b      	ldr	r3, [r7, #0]
 801f23a:	b21a      	sxth	r2, r3
 801f23c:	68fb      	ldr	r3, [r7, #12]
 801f23e:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	2201      	movs	r2, #1
 801f244:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801f246:	68fb      	ldr	r3, [r7, #12]
 801f248:	2200      	movs	r2, #0
 801f24a:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f250:	1c5a      	adds	r2, r3, #1
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801f256:	68fb      	ldr	r3, [r7, #12]
}
 801f258:	4618      	mov	r0, r3
 801f25a:	3710      	adds	r7, #16
 801f25c:	46bd      	mov	sp, r7
 801f25e:	bd80      	pop	{r7, pc}

0801f260 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801f260:	b480      	push	{r7}
 801f262:	b087      	sub	sp, #28
 801f264:	af00      	add	r7, sp, #0
 801f266:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801f268:	231f      	movs	r3, #31
 801f26a:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801f26c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801f270:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	68da      	ldr	r2, [r3, #12]
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f27c:	4619      	mov	r1, r3
 801f27e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f282:	440b      	add	r3, r1
 801f284:	009b      	lsls	r3, r3, #2
 801f286:	4413      	add	r3, r2
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801f28c:	68fa      	ldr	r2, [r7, #12]
 801f28e:	693b      	ldr	r3, [r7, #16]
 801f290:	4013      	ands	r3, r2
 801f292:	2b00      	cmp	r3, #0
 801f294:	d007      	beq.n	801f2a6 <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f29c:	3b01      	subs	r3, #1
 801f29e:	015a      	lsls	r2, r3, #5
 801f2a0:	697b      	ldr	r3, [r7, #20]
 801f2a2:	4413      	add	r3, r2
 801f2a4:	e009      	b.n	801f2ba <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801f2a6:	693b      	ldr	r3, [r7, #16]
 801f2a8:	085b      	lsrs	r3, r3, #1
 801f2aa:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801f2ac:	697b      	ldr	r3, [r7, #20]
 801f2ae:	1e5a      	subs	r2, r3, #1
 801f2b0:	617a      	str	r2, [r7, #20]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d1ea      	bne.n	801f28c <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801f2b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	371c      	adds	r7, #28
 801f2be:	46bd      	mov	sp, r7
 801f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2c4:	4770      	bx	lr

0801f2c6 <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801f2c6:	b480      	push	{r7}
 801f2c8:	b087      	sub	sp, #28
 801f2ca:	af00      	add	r7, sp, #0
 801f2cc:	6078      	str	r0, [r7, #4]
 801f2ce:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	68da      	ldr	r2, [r3, #12]
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	da00      	bge.n	801f2dc <exp_bit_is_one+0x16>
 801f2da:	331f      	adds	r3, #31
 801f2dc:	115b      	asrs	r3, r3, #5
 801f2de:	009b      	lsls	r3, r3, #2
 801f2e0:	4413      	add	r3, r2
 801f2e2:	681b      	ldr	r3, [r3, #0]
 801f2e4:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801f2e6:	683b      	ldr	r3, [r7, #0]
 801f2e8:	425a      	negs	r2, r3
 801f2ea:	f003 031f 	and.w	r3, r3, #31
 801f2ee:	f002 021f 	and.w	r2, r2, #31
 801f2f2:	bf58      	it	pl
 801f2f4:	4253      	negpl	r3, r2
 801f2f6:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801f2f8:	2301      	movs	r3, #1
 801f2fa:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801f2fc:	2300      	movs	r3, #0
 801f2fe:	613b      	str	r3, [r7, #16]
 801f300:	e005      	b.n	801f30e <exp_bit_is_one+0x48>
    shift <<= 1;
 801f302:	697b      	ldr	r3, [r7, #20]
 801f304:	005b      	lsls	r3, r3, #1
 801f306:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801f308:	693b      	ldr	r3, [r7, #16]
 801f30a:	3301      	adds	r3, #1
 801f30c:	613b      	str	r3, [r7, #16]
 801f30e:	693a      	ldr	r2, [r7, #16]
 801f310:	68bb      	ldr	r3, [r7, #8]
 801f312:	429a      	cmp	r2, r3
 801f314:	dbf5      	blt.n	801f302 <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801f316:	68fa      	ldr	r2, [r7, #12]
 801f318:	697b      	ldr	r3, [r7, #20]
 801f31a:	4013      	ands	r3, r2
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	bf14      	ite	ne
 801f320:	2301      	movne	r3, #1
 801f322:	2300      	moveq	r3, #0
 801f324:	b2db      	uxtb	r3, r3
}
 801f326:	4618      	mov	r0, r3
 801f328:	371c      	adds	r7, #28
 801f32a:	46bd      	mov	sp, r7
 801f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f330:	4770      	bx	lr

0801f332 <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801f332:	b480      	push	{r7}
 801f334:	b083      	sub	sp, #12
 801f336:	af00      	add	r7, sp, #0
 801f338:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801f33a:	e008      	b.n	801f34e <trim+0x1c>
    bi->size--;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f342:	b29b      	uxth	r3, r3
 801f344:	3b01      	subs	r3, #1
 801f346:	b29b      	uxth	r3, r3
 801f348:	b21a      	sxth	r2, r3
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	68da      	ldr	r2, [r3, #12]
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f358:	4619      	mov	r1, r3
 801f35a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f35e:	440b      	add	r3, r1
 801f360:	009b      	lsls	r3, r3, #2
 801f362:	4413      	add	r3, r2
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	2b00      	cmp	r3, #0
 801f368:	d104      	bne.n	801f374 <trim+0x42>
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f370:	2b01      	cmp	r3, #1
 801f372:	dce3      	bgt.n	801f33c <trim+0xa>
  }

  return bi;
 801f374:	687b      	ldr	r3, [r7, #4]
}
 801f376:	4618      	mov	r0, r3
 801f378:	370c      	adds	r7, #12
 801f37a:	46bd      	mov	sp, r7
 801f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f380:	4770      	bx	lr

0801f382 <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801f382:	b590      	push	{r4, r7, lr}
 801f384:	b08b      	sub	sp, #44	@ 0x2c
 801f386:	af00      	add	r7, sp, #0
 801f388:	60f8      	str	r0, [r7, #12]
 801f38a:	60b9      	str	r1, [r7, #8]
 801f38c:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801f38e:	6878      	ldr	r0, [r7, #4]
 801f390:	f7ff ff66 	bl	801f260 <find_max_exp_index>
 801f394:	6278      	str	r0, [r7, #36]	@ 0x24
 801f396:	2301      	movs	r3, #1
 801f398:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801f39a:	2101      	movs	r1, #1
 801f39c:	68f8      	ldr	r0, [r7, #12]
 801f39e:	f7ff f8a3 	bl	801e4e8 <int_to_bi>
 801f3a2:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 801f3a4:	2104      	movs	r1, #4
 801f3a6:	2001      	movs	r0, #1
 801f3a8:	f007 fa30 	bl	802680c <calloc>
 801f3ac:	4603      	mov	r3, r0
 801f3ae:	461a      	mov	r2, r3
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801f3b8:	68b9      	ldr	r1, [r7, #8]
 801f3ba:	68f8      	ldr	r0, [r7, #12]
 801f3bc:	f7ff f8a7 	bl	801e50e <bi_clone>
 801f3c0:	4603      	mov	r3, r0
 801f3c2:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	2201      	movs	r2, #1
 801f3c8:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	4618      	mov	r0, r3
 801f3d2:	f7ff f82f 	bl	801e434 <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801f3d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f3d8:	6878      	ldr	r0, [r7, #4]
 801f3da:	f7ff ff74 	bl	801f2c6 <exp_bit_is_one>
 801f3de:	4603      	mov	r3, r0
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d06c      	beq.n	801f4be <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 801f3e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f3e6:	693b      	ldr	r3, [r7, #16]
 801f3e8:	1ad3      	subs	r3, r2, r3
 801f3ea:	3301      	adds	r3, #1
 801f3ec:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801f3ee:	2300      	movs	r3, #0
 801f3f0:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801f3f2:	69bb      	ldr	r3, [r7, #24]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	da05      	bge.n	801f404 <bi_mod_power+0x82>
        l = 0;
 801f3f8:	2300      	movs	r3, #0
 801f3fa:	61bb      	str	r3, [r7, #24]
 801f3fc:	e009      	b.n	801f412 <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801f3fe:	69bb      	ldr	r3, [r7, #24]
 801f400:	3301      	adds	r3, #1
 801f402:	61bb      	str	r3, [r7, #24]
 801f404:	69b9      	ldr	r1, [r7, #24]
 801f406:	6878      	ldr	r0, [r7, #4]
 801f408:	f7ff ff5d 	bl	801f2c6 <exp_bit_is_one>
 801f40c:	4603      	mov	r3, r0
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d0f5      	beq.n	801f3fe <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801f412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f414:	623b      	str	r3, [r7, #32]
 801f416:	e02a      	b.n	801f46e <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801f418:	69f8      	ldr	r0, [r7, #28]
 801f41a:	f7fe fff3 	bl	801e404 <bi_copy>
 801f41e:	4603      	mov	r3, r0
 801f420:	69fa      	ldr	r2, [r7, #28]
 801f422:	4619      	mov	r1, r3
 801f424:	68f8      	ldr	r0, [r7, #12]
 801f426:	f7ff fe0f 	bl	801f048 <bi_multiply>
 801f42a:	4601      	mov	r1, r0
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801f432:	68fa      	ldr	r2, [r7, #12]
 801f434:	3302      	adds	r3, #2
 801f436:	009b      	lsls	r3, r3, #2
 801f438:	4413      	add	r3, r2
 801f43a:	685a      	ldr	r2, [r3, #4]
 801f43c:	2301      	movs	r3, #1
 801f43e:	68f8      	ldr	r0, [r7, #12]
 801f440:	f7ff f9ba 	bl	801e7b8 <bi_divide>
 801f444:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801f446:	6a39      	ldr	r1, [r7, #32]
 801f448:	6878      	ldr	r0, [r7, #4]
 801f44a:	f7ff ff3c 	bl	801f2c6 <exp_bit_is_one>
 801f44e:	4603      	mov	r3, r0
 801f450:	2b00      	cmp	r3, #0
 801f452:	d002      	beq.n	801f45a <bi_mod_power+0xd8>
 801f454:	697b      	ldr	r3, [r7, #20]
 801f456:	3301      	adds	r3, #1
 801f458:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801f45a:	6a3a      	ldr	r2, [r7, #32]
 801f45c:	69bb      	ldr	r3, [r7, #24]
 801f45e:	429a      	cmp	r2, r3
 801f460:	d002      	beq.n	801f468 <bi_mod_power+0xe6>
 801f462:	697b      	ldr	r3, [r7, #20]
 801f464:	005b      	lsls	r3, r3, #1
 801f466:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801f468:	6a3b      	ldr	r3, [r7, #32]
 801f46a:	3b01      	subs	r3, #1
 801f46c:	623b      	str	r3, [r7, #32]
 801f46e:	6a3a      	ldr	r2, [r7, #32]
 801f470:	69bb      	ldr	r3, [r7, #24]
 801f472:	429a      	cmp	r2, r3
 801f474:	dad0      	bge.n	801f418 <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801f476:	697b      	ldr	r3, [r7, #20]
 801f478:	3b01      	subs	r3, #1
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	da00      	bge.n	801f480 <bi_mod_power+0xfe>
 801f47e:	3301      	adds	r3, #1
 801f480:	105b      	asrs	r3, r3, #1
 801f482:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f488:	697b      	ldr	r3, [r7, #20]
 801f48a:	009b      	lsls	r3, r3, #2
 801f48c:	4413      	add	r3, r2
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	461a      	mov	r2, r3
 801f492:	69f9      	ldr	r1, [r7, #28]
 801f494:	68f8      	ldr	r0, [r7, #12]
 801f496:	f7ff fdd7 	bl	801f048 <bi_multiply>
 801f49a:	4601      	mov	r1, r0
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801f4a2:	68fa      	ldr	r2, [r7, #12]
 801f4a4:	3302      	adds	r3, #2
 801f4a6:	009b      	lsls	r3, r3, #2
 801f4a8:	4413      	add	r3, r2
 801f4aa:	685a      	ldr	r2, [r3, #4]
 801f4ac:	2301      	movs	r3, #1
 801f4ae:	68f8      	ldr	r0, [r7, #12]
 801f4b0:	f7ff f982 	bl	801e7b8 <bi_divide>
 801f4b4:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801f4b6:	69bb      	ldr	r3, [r7, #24]
 801f4b8:	3b01      	subs	r3, #1
 801f4ba:	627b      	str	r3, [r7, #36]	@ 0x24
 801f4bc:	e019      	b.n	801f4f2 <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801f4be:	69f8      	ldr	r0, [r7, #28]
 801f4c0:	f7fe ffa0 	bl	801e404 <bi_copy>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	69fa      	ldr	r2, [r7, #28]
 801f4c8:	4619      	mov	r1, r3
 801f4ca:	68f8      	ldr	r0, [r7, #12]
 801f4cc:	f7ff fdbc 	bl	801f048 <bi_multiply>
 801f4d0:	4601      	mov	r1, r0
 801f4d2:	68fb      	ldr	r3, [r7, #12]
 801f4d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801f4d8:	68fa      	ldr	r2, [r7, #12]
 801f4da:	3302      	adds	r3, #2
 801f4dc:	009b      	lsls	r3, r3, #2
 801f4de:	4413      	add	r3, r2
 801f4e0:	685a      	ldr	r2, [r3, #4]
 801f4e2:	2301      	movs	r3, #1
 801f4e4:	68f8      	ldr	r0, [r7, #12]
 801f4e6:	f7ff f967 	bl	801e7b8 <bi_divide>
 801f4ea:	61f8      	str	r0, [r7, #28]
      i--;
 801f4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4ee:	3b01      	subs	r3, #1
 801f4f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801f4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	f6bf af6e 	bge.w	801f3d6 <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801f4fa:	2300      	movs	r3, #0
 801f4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 801f4fe:	e015      	b.n	801f52c <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f506:	009b      	lsls	r3, r3, #2
 801f508:	4413      	add	r3, r2
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	4618      	mov	r0, r3
 801f50e:	f7fe ffa5 	bl	801e45c <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801f512:	68fb      	ldr	r3, [r7, #12]
 801f514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f518:	009b      	lsls	r3, r3, #2
 801f51a:	4413      	add	r3, r2
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	4619      	mov	r1, r3
 801f520:	68f8      	ldr	r0, [r7, #12]
 801f522:	f7fe ffaf 	bl	801e484 <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801f526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f528:	3301      	adds	r3, #1
 801f52a:	627b      	str	r3, [r7, #36]	@ 0x24
 801f52c:	68fb      	ldr	r3, [r7, #12]
 801f52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f532:	429a      	cmp	r2, r3
 801f534:	dbe4      	blt.n	801f500 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f53a:	4618      	mov	r0, r3
 801f53c:	f007 f98a 	bl	8026854 <free>
  bi_free(ctx, bi);
 801f540:	68b9      	ldr	r1, [r7, #8]
 801f542:	68f8      	ldr	r0, [r7, #12]
 801f544:	f7fe ff9e 	bl	801e484 <bi_free>
  bi_free(ctx, biexp);
 801f548:	6879      	ldr	r1, [r7, #4]
 801f54a:	68f8      	ldr	r0, [r7, #12]
 801f54c:	f7fe ff9a 	bl	801e484 <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801f550:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801f552:	4618      	mov	r0, r3
 801f554:	372c      	adds	r7, #44	@ 0x2c
 801f556:	46bd      	mov	sp, r7
 801f558:	bd90      	pop	{r4, r7, pc}

0801f55a <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801f55a:	b580      	push	{r7, lr}
 801f55c:	b08a      	sub	sp, #40	@ 0x28
 801f55e:	af00      	add	r7, sp, #0
 801f560:	60f8      	str	r0, [r7, #12]
 801f562:	60b9      	str	r1, [r7, #8]
 801f564:	607a      	str	r2, [r7, #4]
 801f566:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801f568:	f7fe ff27 	bl	801e3ba <bi_initialize>
 801f56c:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801f56e:	68bb      	ldr	r3, [r7, #8]
 801f570:	461a      	mov	r2, r3
 801f572:	68f9      	ldr	r1, [r7, #12]
 801f574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f576:	f7ff fbae 	bl	801ecd6 <bi_import>
 801f57a:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801f57c:	683b      	ldr	r3, [r7, #0]
 801f57e:	461a      	mov	r2, r3
 801f580:	6879      	ldr	r1, [r7, #4]
 801f582:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f584:	f7ff fba7 	bl	801ecd6 <bi_import>
 801f588:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801f58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f58c:	461a      	mov	r2, r3
 801f58e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f590:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f592:	f7ff fba0 	bl	801ecd6 <bi_import>
 801f596:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801f598:	2200      	movs	r2, #0
 801f59a:	6a39      	ldr	r1, [r7, #32]
 801f59c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f59e:	f7ff fc3b 	bl	801ee18 <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 801f5a2:	69fa      	ldr	r2, [r7, #28]
 801f5a4:	69b9      	ldr	r1, [r7, #24]
 801f5a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5a8:	f7ff feeb 	bl	801f382 <bi_mod_power>
 801f5ac:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 801f5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f5b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f5b2:	6979      	ldr	r1, [r7, #20]
 801f5b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5b6:	f7ff fbdf 	bl	801ed78 <bi_export>
	bi_free(bi_ctx, n);
 801f5ba:	6a39      	ldr	r1, [r7, #32]
 801f5bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5be:	f7fe ff61 	bl	801e484 <bi_free>
	bi_free(bi_ctx, e);
 801f5c2:	69f9      	ldr	r1, [r7, #28]
 801f5c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5c6:	f7fe ff5d 	bl	801e484 <bi_free>
	bi_free(bi_ctx, h);
 801f5ca:	69b9      	ldr	r1, [r7, #24]
 801f5cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5ce:	f7fe ff59 	bl	801e484 <bi_free>
	bi_free(bi_ctx, m1);
 801f5d2:	6979      	ldr	r1, [r7, #20]
 801f5d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f5d6:	f7fe ff55 	bl	801e484 <bi_free>
	return 0;
 801f5da:	2300      	movs	r3, #0
}
 801f5dc:	4618      	mov	r0, r3
 801f5de:	3728      	adds	r7, #40	@ 0x28
 801f5e0:	46bd      	mov	sp, r7
 801f5e2:	bd80      	pop	{r7, pc}

0801f5e4 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801f5e4:	b480      	push	{r7}
 801f5e6:	b085      	sub	sp, #20
 801f5e8:	af00      	add	r7, sp, #0
 801f5ea:	6078      	str	r0, [r7, #4]
 801f5ec:	460b      	mov	r3, r1
 801f5ee:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801f5f0:	2300      	movs	r3, #0
 801f5f2:	73fb      	strb	r3, [r7, #15]
 801f5f4:	e00a      	b.n	801f60c <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801f5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f5fa:	009b      	lsls	r3, r3, #2
 801f5fc:	687a      	ldr	r2, [r7, #4]
 801f5fe:	4413      	add	r3, r2
 801f600:	2200      	movs	r2, #0
 801f602:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801f604:	7bfb      	ldrb	r3, [r7, #15]
 801f606:	3301      	adds	r3, #1
 801f608:	b2db      	uxtb	r3, r3
 801f60a:	73fb      	strb	r3, [r7, #15]
 801f60c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801f610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f614:	429a      	cmp	r2, r3
 801f616:	dbee      	blt.n	801f5f6 <mg_uecc_vli_clear+0x12>
  }
}
 801f618:	bf00      	nop
 801f61a:	bf00      	nop
 801f61c:	3714      	adds	r7, #20
 801f61e:	46bd      	mov	sp, r7
 801f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f624:	4770      	bx	lr

0801f626 <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801f626:	b480      	push	{r7}
 801f628:	b085      	sub	sp, #20
 801f62a:	af00      	add	r7, sp, #0
 801f62c:	6078      	str	r0, [r7, #4]
 801f62e:	460b      	mov	r3, r1
 801f630:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801f632:	2300      	movs	r3, #0
 801f634:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801f636:	2300      	movs	r3, #0
 801f638:	72fb      	strb	r3, [r7, #11]
 801f63a:	e00c      	b.n	801f656 <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801f63c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f640:	009b      	lsls	r3, r3, #2
 801f642:	687a      	ldr	r2, [r7, #4]
 801f644:	4413      	add	r3, r2
 801f646:	681b      	ldr	r3, [r3, #0]
 801f648:	68fa      	ldr	r2, [r7, #12]
 801f64a:	4313      	orrs	r3, r2
 801f64c:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801f64e:	7afb      	ldrb	r3, [r7, #11]
 801f650:	3301      	adds	r3, #1
 801f652:	b2db      	uxtb	r3, r3
 801f654:	72fb      	strb	r3, [r7, #11]
 801f656:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801f65a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f65e:	429a      	cmp	r2, r3
 801f660:	dbec      	blt.n	801f63c <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	2b00      	cmp	r3, #0
 801f666:	bf0c      	ite	eq
 801f668:	2301      	moveq	r3, #1
 801f66a:	2300      	movne	r3, #0
 801f66c:	b2db      	uxtb	r3, r3
}
 801f66e:	4618      	mov	r0, r3
 801f670:	3714      	adds	r7, #20
 801f672:	46bd      	mov	sp, r7
 801f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f678:	4770      	bx	lr

0801f67a <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801f67a:	b480      	push	{r7}
 801f67c:	b083      	sub	sp, #12
 801f67e:	af00      	add	r7, sp, #0
 801f680:	6078      	str	r0, [r7, #4]
 801f682:	460b      	mov	r3, r1
 801f684:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801f686:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f68a:	115b      	asrs	r3, r3, #5
 801f68c:	b21b      	sxth	r3, r3
 801f68e:	009b      	lsls	r3, r3, #2
 801f690:	687a      	ldr	r2, [r7, #4]
 801f692:	4413      	add	r3, r2
 801f694:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801f696:	887b      	ldrh	r3, [r7, #2]
 801f698:	f003 031f 	and.w	r3, r3, #31
 801f69c:	2101      	movs	r1, #1
 801f69e:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801f6a2:	4013      	ands	r3, r2
}
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	370c      	adds	r7, #12
 801f6a8:	46bd      	mov	sp, r7
 801f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ae:	4770      	bx	lr

0801f6b0 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801f6b0:	b480      	push	{r7}
 801f6b2:	b085      	sub	sp, #20
 801f6b4:	af00      	add	r7, sp, #0
 801f6b6:	6078      	str	r0, [r7, #4]
 801f6b8:	460b      	mov	r3, r1
 801f6ba:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801f6bc:	78fb      	ldrb	r3, [r7, #3]
 801f6be:	3b01      	subs	r3, #1
 801f6c0:	b2db      	uxtb	r3, r3
 801f6c2:	73fb      	strb	r3, [r7, #15]
 801f6c4:	e003      	b.n	801f6ce <vli_numDigits+0x1e>
 801f6c6:	7bfb      	ldrb	r3, [r7, #15]
 801f6c8:	3b01      	subs	r3, #1
 801f6ca:	b2db      	uxtb	r3, r3
 801f6cc:	73fb      	strb	r3, [r7, #15]
 801f6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	db07      	blt.n	801f6e6 <vli_numDigits+0x36>
 801f6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f6da:	009b      	lsls	r3, r3, #2
 801f6dc:	687a      	ldr	r2, [r7, #4]
 801f6de:	4413      	add	r3, r2
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d0ef      	beq.n	801f6c6 <vli_numDigits+0x16>
  }

  return (i + 1);
 801f6e6:	7bfb      	ldrb	r3, [r7, #15]
 801f6e8:	3301      	adds	r3, #1
 801f6ea:	b2db      	uxtb	r3, r3
 801f6ec:	b25b      	sxtb	r3, r3
}
 801f6ee:	4618      	mov	r0, r3
 801f6f0:	3714      	adds	r7, #20
 801f6f2:	46bd      	mov	sp, r7
 801f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6f8:	4770      	bx	lr

0801f6fa <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801f6fa:	b580      	push	{r7, lr}
 801f6fc:	b086      	sub	sp, #24
 801f6fe:	af00      	add	r7, sp, #0
 801f700:	6078      	str	r0, [r7, #4]
 801f702:	460b      	mov	r3, r1
 801f704:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801f706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f70a:	4619      	mov	r1, r3
 801f70c:	6878      	ldr	r0, [r7, #4]
 801f70e:	f7ff ffcf 	bl	801f6b0 <vli_numDigits>
 801f712:	4603      	mov	r3, r0
 801f714:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801f716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d101      	bne.n	801f722 <mg_uecc_vli_numBits+0x28>
    return 0;
 801f71e:	2300      	movs	r3, #0
 801f720:	e020      	b.n	801f764 <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801f722:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801f726:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f72a:	4413      	add	r3, r2
 801f72c:	009b      	lsls	r3, r3, #2
 801f72e:	687a      	ldr	r2, [r7, #4]
 801f730:	4413      	add	r3, r2
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801f736:	2300      	movs	r3, #0
 801f738:	617b      	str	r3, [r7, #20]
 801f73a:	e005      	b.n	801f748 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801f73c:	693b      	ldr	r3, [r7, #16]
 801f73e:	085b      	lsrs	r3, r3, #1
 801f740:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801f742:	697b      	ldr	r3, [r7, #20]
 801f744:	3301      	adds	r3, #1
 801f746:	617b      	str	r3, [r7, #20]
 801f748:	693b      	ldr	r3, [r7, #16]
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	d1f6      	bne.n	801f73c <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801f74e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f752:	3b01      	subs	r3, #1
 801f754:	b29b      	uxth	r3, r3
 801f756:	015b      	lsls	r3, r3, #5
 801f758:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801f75a:	697b      	ldr	r3, [r7, #20]
 801f75c:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801f75e:	4413      	add	r3, r2
 801f760:	b29b      	uxth	r3, r3
 801f762:	b21b      	sxth	r3, r3
}
 801f764:	4618      	mov	r0, r3
 801f766:	3718      	adds	r7, #24
 801f768:	46bd      	mov	sp, r7
 801f76a:	bd80      	pop	{r7, pc}

0801f76c <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801f76c:	b480      	push	{r7}
 801f76e:	b087      	sub	sp, #28
 801f770:	af00      	add	r7, sp, #0
 801f772:	60f8      	str	r0, [r7, #12]
 801f774:	60b9      	str	r1, [r7, #8]
 801f776:	4613      	mov	r3, r2
 801f778:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801f77a:	2300      	movs	r3, #0
 801f77c:	75fb      	strb	r3, [r7, #23]
 801f77e:	e00f      	b.n	801f7a0 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801f780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f784:	009b      	lsls	r3, r3, #2
 801f786:	68ba      	ldr	r2, [r7, #8]
 801f788:	441a      	add	r2, r3
 801f78a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f78e:	009b      	lsls	r3, r3, #2
 801f790:	68f9      	ldr	r1, [r7, #12]
 801f792:	440b      	add	r3, r1
 801f794:	6812      	ldr	r2, [r2, #0]
 801f796:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801f798:	7dfb      	ldrb	r3, [r7, #23]
 801f79a:	3301      	adds	r3, #1
 801f79c:	b2db      	uxtb	r3, r3
 801f79e:	75fb      	strb	r3, [r7, #23]
 801f7a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801f7a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f7a8:	429a      	cmp	r2, r3
 801f7aa:	dbe9      	blt.n	801f780 <mg_uecc_vli_set+0x14>
  }
}
 801f7ac:	bf00      	nop
 801f7ae:	bf00      	nop
 801f7b0:	371c      	adds	r7, #28
 801f7b2:	46bd      	mov	sp, r7
 801f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7b8:	4770      	bx	lr

0801f7ba <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801f7ba:	b480      	push	{r7}
 801f7bc:	b087      	sub	sp, #28
 801f7be:	af00      	add	r7, sp, #0
 801f7c0:	60f8      	str	r0, [r7, #12]
 801f7c2:	60b9      	str	r1, [r7, #8]
 801f7c4:	4613      	mov	r3, r2
 801f7c6:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801f7c8:	79fb      	ldrb	r3, [r7, #7]
 801f7ca:	3b01      	subs	r3, #1
 801f7cc:	b2db      	uxtb	r3, r3
 801f7ce:	75fb      	strb	r3, [r7, #23]
 801f7d0:	e024      	b.n	801f81c <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801f7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f7d6:	009b      	lsls	r3, r3, #2
 801f7d8:	68fa      	ldr	r2, [r7, #12]
 801f7da:	4413      	add	r3, r2
 801f7dc:	681a      	ldr	r2, [r3, #0]
 801f7de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f7e2:	009b      	lsls	r3, r3, #2
 801f7e4:	68b9      	ldr	r1, [r7, #8]
 801f7e6:	440b      	add	r3, r1
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	d901      	bls.n	801f7f2 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801f7ee:	2301      	movs	r3, #1
 801f7f0:	e019      	b.n	801f826 <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801f7f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f7f6:	009b      	lsls	r3, r3, #2
 801f7f8:	68fa      	ldr	r2, [r7, #12]
 801f7fa:	4413      	add	r3, r2
 801f7fc:	681a      	ldr	r2, [r3, #0]
 801f7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f802:	009b      	lsls	r3, r3, #2
 801f804:	68b9      	ldr	r1, [r7, #8]
 801f806:	440b      	add	r3, r1
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	429a      	cmp	r2, r3
 801f80c:	d202      	bcs.n	801f814 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801f80e:	f04f 33ff 	mov.w	r3, #4294967295
 801f812:	e008      	b.n	801f826 <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801f814:	7dfb      	ldrb	r3, [r7, #23]
 801f816:	3b01      	subs	r3, #1
 801f818:	b2db      	uxtb	r3, r3
 801f81a:	75fb      	strb	r3, [r7, #23]
 801f81c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f820:	2b00      	cmp	r3, #0
 801f822:	dad6      	bge.n	801f7d2 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801f824:	2300      	movs	r3, #0
}
 801f826:	4618      	mov	r0, r3
 801f828:	371c      	adds	r7, #28
 801f82a:	46bd      	mov	sp, r7
 801f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f830:	4770      	bx	lr

0801f832 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801f832:	b480      	push	{r7}
 801f834:	b087      	sub	sp, #28
 801f836:	af00      	add	r7, sp, #0
 801f838:	60f8      	str	r0, [r7, #12]
 801f83a:	60b9      	str	r1, [r7, #8]
 801f83c:	4613      	mov	r3, r2
 801f83e:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801f840:	2300      	movs	r3, #0
 801f842:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801f844:	79fb      	ldrb	r3, [r7, #7]
 801f846:	3b01      	subs	r3, #1
 801f848:	b2db      	uxtb	r3, r3
 801f84a:	74fb      	strb	r3, [r7, #19]
 801f84c:	e013      	b.n	801f876 <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801f84e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f852:	009b      	lsls	r3, r3, #2
 801f854:	68fa      	ldr	r2, [r7, #12]
 801f856:	4413      	add	r3, r2
 801f858:	681a      	ldr	r2, [r3, #0]
 801f85a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f85e:	009b      	lsls	r3, r3, #2
 801f860:	68b9      	ldr	r1, [r7, #8]
 801f862:	440b      	add	r3, r1
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	4053      	eors	r3, r2
 801f868:	697a      	ldr	r2, [r7, #20]
 801f86a:	4313      	orrs	r3, r2
 801f86c:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801f86e:	7cfb      	ldrb	r3, [r7, #19]
 801f870:	3b01      	subs	r3, #1
 801f872:	b2db      	uxtb	r3, r3
 801f874:	74fb      	strb	r3, [r7, #19]
 801f876:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	dae7      	bge.n	801f84e <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801f87e:	697b      	ldr	r3, [r7, #20]
 801f880:	2b00      	cmp	r3, #0
 801f882:	bf0c      	ite	eq
 801f884:	2301      	moveq	r3, #1
 801f886:	2300      	movne	r3, #0
 801f888:	b2db      	uxtb	r3, r3
}
 801f88a:	4618      	mov	r0, r3
 801f88c:	371c      	adds	r7, #28
 801f88e:	46bd      	mov	sp, r7
 801f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f894:	4770      	bx	lr

0801f896 <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801f896:	b580      	push	{r7, lr}
 801f898:	b08e      	sub	sp, #56	@ 0x38
 801f89a:	af00      	add	r7, sp, #0
 801f89c:	60f8      	str	r0, [r7, #12]
 801f89e:	60b9      	str	r1, [r7, #8]
 801f8a0:	4613      	mov	r3, r2
 801f8a2:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801f8a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f8a8:	f107 0010 	add.w	r0, r7, #16
 801f8ac:	68ba      	ldr	r2, [r7, #8]
 801f8ae:	68f9      	ldr	r1, [r7, #12]
 801f8b0:	f000 f896 	bl	801f9e0 <mg_uecc_vli_sub>
 801f8b4:	4603      	mov	r3, r0
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	bf14      	ite	ne
 801f8ba:	2301      	movne	r3, #1
 801f8bc:	2300      	moveq	r3, #0
 801f8be:	b2db      	uxtb	r3, r3
 801f8c0:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801f8c2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f8c6:	f107 0310 	add.w	r3, r7, #16
 801f8ca:	4611      	mov	r1, r2
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	f7ff feaa 	bl	801f626 <mg_uecc_vli_isZero>
 801f8d2:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801f8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	bf0c      	ite	eq
 801f8da:	2301      	moveq	r3, #1
 801f8dc:	2300      	movne	r3, #0
 801f8de:	b2db      	uxtb	r3, r3
 801f8e0:	461a      	mov	r2, r3
 801f8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f8e4:	b2db      	uxtb	r3, r3
 801f8e6:	005b      	lsls	r3, r3, #1
 801f8e8:	b2db      	uxtb	r3, r3
 801f8ea:	1ad3      	subs	r3, r2, r3
 801f8ec:	b2db      	uxtb	r3, r3
 801f8ee:	b25b      	sxtb	r3, r3
}
 801f8f0:	4618      	mov	r0, r3
 801f8f2:	3738      	adds	r7, #56	@ 0x38
 801f8f4:	46bd      	mov	sp, r7
 801f8f6:	bd80      	pop	{r7, pc}

0801f8f8 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801f8f8:	b480      	push	{r7}
 801f8fa:	b087      	sub	sp, #28
 801f8fc:	af00      	add	r7, sp, #0
 801f8fe:	6078      	str	r0, [r7, #4]
 801f900:	460b      	mov	r3, r1
 801f902:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801f908:	2300      	movs	r3, #0
 801f90a:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801f90c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f910:	009b      	lsls	r3, r3, #2
 801f912:	687a      	ldr	r2, [r7, #4]
 801f914:	4413      	add	r3, r2
 801f916:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801f918:	e00b      	b.n	801f932 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	681b      	ldr	r3, [r3, #0]
 801f91e:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801f920:	68fb      	ldr	r3, [r7, #12]
 801f922:	085a      	lsrs	r2, r3, #1
 801f924:	697b      	ldr	r3, [r7, #20]
 801f926:	431a      	orrs	r2, r3
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801f92c:	68fb      	ldr	r3, [r7, #12]
 801f92e:	07db      	lsls	r3, r3, #31
 801f930:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	1f1a      	subs	r2, r3, #4
 801f936:	607a      	str	r2, [r7, #4]
 801f938:	693a      	ldr	r2, [r7, #16]
 801f93a:	429a      	cmp	r2, r3
 801f93c:	d3ed      	bcc.n	801f91a <mg_uecc_vli_rshift1+0x22>
  }
}
 801f93e:	bf00      	nop
 801f940:	bf00      	nop
 801f942:	371c      	adds	r7, #28
 801f944:	46bd      	mov	sp, r7
 801f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f94a:	4770      	bx	lr

0801f94c <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801f94c:	b480      	push	{r7}
 801f94e:	b089      	sub	sp, #36	@ 0x24
 801f950:	af00      	add	r7, sp, #0
 801f952:	60f8      	str	r0, [r7, #12]
 801f954:	60b9      	str	r1, [r7, #8]
 801f956:	607a      	str	r2, [r7, #4]
 801f958:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801f95a:	2300      	movs	r3, #0
 801f95c:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801f95e:	2300      	movs	r3, #0
 801f960:	76fb      	strb	r3, [r7, #27]
 801f962:	e030      	b.n	801f9c6 <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801f964:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f968:	009b      	lsls	r3, r3, #2
 801f96a:	68ba      	ldr	r2, [r7, #8]
 801f96c:	4413      	add	r3, r2
 801f96e:	681a      	ldr	r2, [r3, #0]
 801f970:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f974:	009b      	lsls	r3, r3, #2
 801f976:	6879      	ldr	r1, [r7, #4]
 801f978:	440b      	add	r3, r1
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	4413      	add	r3, r2
 801f97e:	69fa      	ldr	r2, [r7, #28]
 801f980:	4413      	add	r3, r2
 801f982:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801f984:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f988:	009b      	lsls	r3, r3, #2
 801f98a:	68ba      	ldr	r2, [r7, #8]
 801f98c:	4413      	add	r3, r2
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	697a      	ldr	r2, [r7, #20]
 801f992:	429a      	cmp	r2, r3
 801f994:	d00c      	beq.n	801f9b0 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801f996:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f99a:	009b      	lsls	r3, r3, #2
 801f99c:	68ba      	ldr	r2, [r7, #8]
 801f99e:	4413      	add	r3, r2
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	697a      	ldr	r2, [r7, #20]
 801f9a4:	429a      	cmp	r2, r3
 801f9a6:	bf34      	ite	cc
 801f9a8:	2301      	movcc	r3, #1
 801f9aa:	2300      	movcs	r3, #0
 801f9ac:	b2db      	uxtb	r3, r3
 801f9ae:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801f9b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f9b4:	009b      	lsls	r3, r3, #2
 801f9b6:	68fa      	ldr	r2, [r7, #12]
 801f9b8:	4413      	add	r3, r2
 801f9ba:	697a      	ldr	r2, [r7, #20]
 801f9bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801f9be:	7efb      	ldrb	r3, [r7, #27]
 801f9c0:	3301      	adds	r3, #1
 801f9c2:	b2db      	uxtb	r3, r3
 801f9c4:	76fb      	strb	r3, [r7, #27]
 801f9c6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801f9ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f9ce:	429a      	cmp	r2, r3
 801f9d0:	dbc8      	blt.n	801f964 <mg_uecc_vli_add+0x18>
  }
  return carry;
 801f9d2:	69fb      	ldr	r3, [r7, #28]
}
 801f9d4:	4618      	mov	r0, r3
 801f9d6:	3724      	adds	r7, #36	@ 0x24
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9de:	4770      	bx	lr

0801f9e0 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801f9e0:	b480      	push	{r7}
 801f9e2:	b089      	sub	sp, #36	@ 0x24
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	60f8      	str	r0, [r7, #12]
 801f9e8:	60b9      	str	r1, [r7, #8]
 801f9ea:	607a      	str	r2, [r7, #4]
 801f9ec:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801f9ee:	2300      	movs	r3, #0
 801f9f0:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801f9f2:	2300      	movs	r3, #0
 801f9f4:	76fb      	strb	r3, [r7, #27]
 801f9f6:	e030      	b.n	801fa5a <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801f9f8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f9fc:	009b      	lsls	r3, r3, #2
 801f9fe:	68ba      	ldr	r2, [r7, #8]
 801fa00:	4413      	add	r3, r2
 801fa02:	681a      	ldr	r2, [r3, #0]
 801fa04:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fa08:	009b      	lsls	r3, r3, #2
 801fa0a:	6879      	ldr	r1, [r7, #4]
 801fa0c:	440b      	add	r3, r1
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	1ad2      	subs	r2, r2, r3
 801fa12:	69fb      	ldr	r3, [r7, #28]
 801fa14:	1ad3      	subs	r3, r2, r3
 801fa16:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801fa18:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fa1c:	009b      	lsls	r3, r3, #2
 801fa1e:	68ba      	ldr	r2, [r7, #8]
 801fa20:	4413      	add	r3, r2
 801fa22:	681b      	ldr	r3, [r3, #0]
 801fa24:	697a      	ldr	r2, [r7, #20]
 801fa26:	429a      	cmp	r2, r3
 801fa28:	d00c      	beq.n	801fa44 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801fa2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fa2e:	009b      	lsls	r3, r3, #2
 801fa30:	68ba      	ldr	r2, [r7, #8]
 801fa32:	4413      	add	r3, r2
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	697a      	ldr	r2, [r7, #20]
 801fa38:	429a      	cmp	r2, r3
 801fa3a:	bf8c      	ite	hi
 801fa3c:	2301      	movhi	r3, #1
 801fa3e:	2300      	movls	r3, #0
 801fa40:	b2db      	uxtb	r3, r3
 801fa42:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801fa44:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fa48:	009b      	lsls	r3, r3, #2
 801fa4a:	68fa      	ldr	r2, [r7, #12]
 801fa4c:	4413      	add	r3, r2
 801fa4e:	697a      	ldr	r2, [r7, #20]
 801fa50:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801fa52:	7efb      	ldrb	r3, [r7, #27]
 801fa54:	3301      	adds	r3, #1
 801fa56:	b2db      	uxtb	r3, r3
 801fa58:	76fb      	strb	r3, [r7, #27]
 801fa5a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801fa5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fa62:	429a      	cmp	r2, r3
 801fa64:	dbc8      	blt.n	801f9f8 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801fa66:	69fb      	ldr	r3, [r7, #28]
}
 801fa68:	4618      	mov	r0, r3
 801fa6a:	3724      	adds	r7, #36	@ 0x24
 801fa6c:	46bd      	mov	sp, r7
 801fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa72:	4770      	bx	lr

0801fa74 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801fa74:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801fa78:	b091      	sub	sp, #68	@ 0x44
 801fa7a:	af00      	add	r7, sp, #0
 801fa7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801fa7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 801fa80:	627a      	str	r2, [r7, #36]	@ 0x24
 801fa82:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801fa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa86:	2200      	movs	r2, #0
 801fa88:	4698      	mov	r8, r3
 801fa8a:	4691      	mov	r9, r2
 801fa8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fa8e:	2200      	movs	r2, #0
 801fa90:	469a      	mov	sl, r3
 801fa92:	4693      	mov	fp, r2
 801fa94:	fb0a f209 	mul.w	r2, sl, r9
 801fa98:	fb08 f30b 	mul.w	r3, r8, fp
 801fa9c:	4413      	add	r3, r2
 801fa9e:	fba8 450a 	umull	r4, r5, r8, sl
 801faa2:	442b      	add	r3, r5
 801faa4:	461d      	mov	r5, r3
 801faa6:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801faaa:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801faae:	6a3b      	ldr	r3, [r7, #32]
 801fab0:	681b      	ldr	r3, [r3, #0]
 801fab2:	2200      	movs	r2, #0
 801fab4:	61bb      	str	r3, [r7, #24]
 801fab6:	61fa      	str	r2, [r7, #28]
 801fab8:	f04f 0200 	mov.w	r2, #0
 801fabc:	f04f 0300 	mov.w	r3, #0
 801fac0:	69b9      	ldr	r1, [r7, #24]
 801fac2:	000b      	movs	r3, r1
 801fac4:	2200      	movs	r2, #0
 801fac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801fac8:	6809      	ldr	r1, [r1, #0]
 801faca:	2000      	movs	r0, #0
 801facc:	6139      	str	r1, [r7, #16]
 801face:	6178      	str	r0, [r7, #20]
 801fad0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801fad4:	4621      	mov	r1, r4
 801fad6:	4311      	orrs	r1, r2
 801fad8:	60b9      	str	r1, [r7, #8]
 801fada:	4629      	mov	r1, r5
 801fadc:	4319      	orrs	r1, r3
 801fade:	60f9      	str	r1, [r7, #12]
 801fae0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801fae4:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801fae8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801faec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801faf0:	1884      	adds	r4, r0, r2
 801faf2:	603c      	str	r4, [r7, #0]
 801faf4:	eb41 0303 	adc.w	r3, r1, r3
 801faf8:	607b      	str	r3, [r7, #4]
 801fafa:	e9d7 3400 	ldrd	r3, r4, [r7]
 801fafe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801fb02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801fb04:	681c      	ldr	r4, [r3, #0]
 801fb06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801fb0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801fb0e:	4290      	cmp	r0, r2
 801fb10:	eb71 0303 	sbcs.w	r3, r1, r3
 801fb14:	bf34      	ite	cc
 801fb16:	2301      	movcc	r3, #1
 801fb18:	2300      	movcs	r3, #0
 801fb1a:	b2db      	uxtb	r3, r3
 801fb1c:	18e2      	adds	r2, r4, r3
 801fb1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801fb20:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801fb22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801fb26:	f04f 0200 	mov.w	r2, #0
 801fb2a:	f04f 0300 	mov.w	r3, #0
 801fb2e:	000a      	movs	r2, r1
 801fb30:	2300      	movs	r3, #0
 801fb32:	6a3b      	ldr	r3, [r7, #32]
 801fb34:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801fb36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb3a:	601a      	str	r2, [r3, #0]
#endif
}
 801fb3c:	bf00      	nop
 801fb3e:	3744      	adds	r7, #68	@ 0x44
 801fb40:	46bd      	mov	sp, r7
 801fb42:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801fb46:	4770      	bx	lr

0801fb48 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801fb48:	b590      	push	{r4, r7, lr}
 801fb4a:	b08b      	sub	sp, #44	@ 0x2c
 801fb4c:	af02      	add	r7, sp, #8
 801fb4e:	60f8      	str	r0, [r7, #12]
 801fb50:	60b9      	str	r1, [r7, #8]
 801fb52:	607a      	str	r2, [r7, #4]
 801fb54:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801fb56:	2300      	movs	r3, #0
 801fb58:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801fb5e:	2300      	movs	r3, #0
 801fb60:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801fb62:	2300      	movs	r3, #0
 801fb64:	77bb      	strb	r3, [r7, #30]
 801fb66:	e036      	b.n	801fbd6 <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801fb68:	2300      	movs	r3, #0
 801fb6a:	77fb      	strb	r3, [r7, #31]
 801fb6c:	e01c      	b.n	801fba8 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801fb6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801fb72:	009b      	lsls	r3, r3, #2
 801fb74:	68ba      	ldr	r2, [r7, #8]
 801fb76:	4413      	add	r3, r2
 801fb78:	6818      	ldr	r0, [r3, #0]
 801fb7a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801fb7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801fb82:	1ad3      	subs	r3, r2, r3
 801fb84:	009b      	lsls	r3, r3, #2
 801fb86:	687a      	ldr	r2, [r7, #4]
 801fb88:	4413      	add	r3, r2
 801fb8a:	6819      	ldr	r1, [r3, #0]
 801fb8c:	f107 0414 	add.w	r4, r7, #20
 801fb90:	f107 0218 	add.w	r2, r7, #24
 801fb94:	f107 0310 	add.w	r3, r7, #16
 801fb98:	9300      	str	r3, [sp, #0]
 801fb9a:	4623      	mov	r3, r4
 801fb9c:	f7ff ff6a 	bl	801fa74 <muladd>
    for (i = 0; i <= k; ++i) {
 801fba0:	7ffb      	ldrb	r3, [r7, #31]
 801fba2:	3301      	adds	r3, #1
 801fba4:	b2db      	uxtb	r3, r3
 801fba6:	77fb      	strb	r3, [r7, #31]
 801fba8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801fbac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801fbb0:	429a      	cmp	r2, r3
 801fbb2:	dddc      	ble.n	801fb6e <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801fbb4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801fbb8:	009b      	lsls	r3, r3, #2
 801fbba:	68fa      	ldr	r2, [r7, #12]
 801fbbc:	4413      	add	r3, r2
 801fbbe:	69ba      	ldr	r2, [r7, #24]
 801fbc0:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801fbc2:	697b      	ldr	r3, [r7, #20]
 801fbc4:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801fbc6:	693b      	ldr	r3, [r7, #16]
 801fbc8:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801fbca:	2300      	movs	r3, #0
 801fbcc:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801fbce:	7fbb      	ldrb	r3, [r7, #30]
 801fbd0:	3301      	adds	r3, #1
 801fbd2:	b2db      	uxtb	r3, r3
 801fbd4:	77bb      	strb	r3, [r7, #30]
 801fbd6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801fbda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	dbc2      	blt.n	801fb68 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801fbe2:	78fb      	ldrb	r3, [r7, #3]
 801fbe4:	77bb      	strb	r3, [r7, #30]
 801fbe6:	e03b      	b.n	801fc60 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801fbe8:	7fba      	ldrb	r2, [r7, #30]
 801fbea:	78fb      	ldrb	r3, [r7, #3]
 801fbec:	1ad3      	subs	r3, r2, r3
 801fbee:	b2db      	uxtb	r3, r3
 801fbf0:	3301      	adds	r3, #1
 801fbf2:	b2db      	uxtb	r3, r3
 801fbf4:	77fb      	strb	r3, [r7, #31]
 801fbf6:	e01c      	b.n	801fc32 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801fbf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801fbfc:	009b      	lsls	r3, r3, #2
 801fbfe:	68ba      	ldr	r2, [r7, #8]
 801fc00:	4413      	add	r3, r2
 801fc02:	6818      	ldr	r0, [r3, #0]
 801fc04:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801fc08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801fc0c:	1ad3      	subs	r3, r2, r3
 801fc0e:	009b      	lsls	r3, r3, #2
 801fc10:	687a      	ldr	r2, [r7, #4]
 801fc12:	4413      	add	r3, r2
 801fc14:	6819      	ldr	r1, [r3, #0]
 801fc16:	f107 0414 	add.w	r4, r7, #20
 801fc1a:	f107 0218 	add.w	r2, r7, #24
 801fc1e:	f107 0310 	add.w	r3, r7, #16
 801fc22:	9300      	str	r3, [sp, #0]
 801fc24:	4623      	mov	r3, r4
 801fc26:	f7ff ff25 	bl	801fa74 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801fc2a:	7ffb      	ldrb	r3, [r7, #31]
 801fc2c:	3301      	adds	r3, #1
 801fc2e:	b2db      	uxtb	r3, r3
 801fc30:	77fb      	strb	r3, [r7, #31]
 801fc32:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801fc36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fc3a:	429a      	cmp	r2, r3
 801fc3c:	dbdc      	blt.n	801fbf8 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801fc3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801fc42:	009b      	lsls	r3, r3, #2
 801fc44:	68fa      	ldr	r2, [r7, #12]
 801fc46:	4413      	add	r3, r2
 801fc48:	69ba      	ldr	r2, [r7, #24]
 801fc4a:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801fc4c:	697b      	ldr	r3, [r7, #20]
 801fc4e:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801fc50:	693b      	ldr	r3, [r7, #16]
 801fc52:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801fc54:	2300      	movs	r3, #0
 801fc56:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801fc58:	7fbb      	ldrb	r3, [r7, #30]
 801fc5a:	3301      	adds	r3, #1
 801fc5c:	b2db      	uxtb	r3, r3
 801fc5e:	77bb      	strb	r3, [r7, #30]
 801fc60:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801fc64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fc68:	005b      	lsls	r3, r3, #1
 801fc6a:	3b01      	subs	r3, #1
 801fc6c:	429a      	cmp	r2, r3
 801fc6e:	dbbb      	blt.n	801fbe8 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801fc70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fc74:	00db      	lsls	r3, r3, #3
 801fc76:	3b04      	subs	r3, #4
 801fc78:	68fa      	ldr	r2, [r7, #12]
 801fc7a:	4413      	add	r3, r2
 801fc7c:	69ba      	ldr	r2, [r7, #24]
 801fc7e:	601a      	str	r2, [r3, #0]
}
 801fc80:	bf00      	nop
 801fc82:	3724      	adds	r7, #36	@ 0x24
 801fc84:	46bd      	mov	sp, r7
 801fc86:	bd90      	pop	{r4, r7, pc}

0801fc88 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801fc88:	b580      	push	{r7, lr}
 801fc8a:	b086      	sub	sp, #24
 801fc8c:	af00      	add	r7, sp, #0
 801fc8e:	60f8      	str	r0, [r7, #12]
 801fc90:	60b9      	str	r1, [r7, #8]
 801fc92:	607a      	str	r2, [r7, #4]
 801fc94:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801fc96:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801fc9a:	687a      	ldr	r2, [r7, #4]
 801fc9c:	68b9      	ldr	r1, [r7, #8]
 801fc9e:	68f8      	ldr	r0, [r7, #12]
 801fca0:	f7ff fe54 	bl	801f94c <mg_uecc_vli_add>
 801fca4:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801fca6:	697b      	ldr	r3, [r7, #20]
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d109      	bne.n	801fcc0 <mg_uecc_vli_modAdd+0x38>
 801fcac:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801fcb0:	461a      	mov	r2, r3
 801fcb2:	68f9      	ldr	r1, [r7, #12]
 801fcb4:	6838      	ldr	r0, [r7, #0]
 801fcb6:	f7ff fd80 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 801fcba:	4603      	mov	r3, r0
 801fcbc:	2b01      	cmp	r3, #1
 801fcbe:	d006      	beq.n	801fcce <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801fcc0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801fcc4:	683a      	ldr	r2, [r7, #0]
 801fcc6:	68f9      	ldr	r1, [r7, #12]
 801fcc8:	68f8      	ldr	r0, [r7, #12]
 801fcca:	f7ff fe89 	bl	801f9e0 <mg_uecc_vli_sub>
  }
}
 801fcce:	bf00      	nop
 801fcd0:	3718      	adds	r7, #24
 801fcd2:	46bd      	mov	sp, r7
 801fcd4:	bd80      	pop	{r7, pc}

0801fcd6 <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801fcd6:	b580      	push	{r7, lr}
 801fcd8:	b086      	sub	sp, #24
 801fcda:	af00      	add	r7, sp, #0
 801fcdc:	60f8      	str	r0, [r7, #12]
 801fcde:	60b9      	str	r1, [r7, #8]
 801fce0:	607a      	str	r2, [r7, #4]
 801fce2:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801fce4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801fce8:	687a      	ldr	r2, [r7, #4]
 801fcea:	68b9      	ldr	r1, [r7, #8]
 801fcec:	68f8      	ldr	r0, [r7, #12]
 801fcee:	f7ff fe77 	bl	801f9e0 <mg_uecc_vli_sub>
 801fcf2:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801fcf4:	697b      	ldr	r3, [r7, #20]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d006      	beq.n	801fd08 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801fcfa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801fcfe:	683a      	ldr	r2, [r7, #0]
 801fd00:	68f9      	ldr	r1, [r7, #12]
 801fd02:	68f8      	ldr	r0, [r7, #12]
 801fd04:	f7ff fe22 	bl	801f94c <mg_uecc_vli_add>
  }
}
 801fd08:	bf00      	nop
 801fd0a:	3718      	adds	r7, #24
 801fd0c:	46bd      	mov	sp, r7
 801fd0e:	bd80      	pop	{r7, pc}

0801fd10 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801fd10:	b590      	push	{r4, r7, lr}
 801fd12:	b0ad      	sub	sp, #180	@ 0xb4
 801fd14:	af00      	add	r7, sp, #0
 801fd16:	60f8      	str	r0, [r7, #12]
 801fd18:	60b9      	str	r1, [r7, #8]
 801fd1a:	607a      	str	r2, [r7, #4]
 801fd1c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801fd1e:	f107 0318 	add.w	r3, r7, #24
 801fd22:	613b      	str	r3, [r7, #16]
 801fd24:	68bb      	ldr	r3, [r7, #8]
 801fd26:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801fd28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fd2c:	b29b      	uxth	r3, r3
 801fd2e:	019b      	lsls	r3, r3, #6
 801fd30:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801fd32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fd36:	4619      	mov	r1, r3
 801fd38:	6878      	ldr	r0, [r7, #4]
 801fd3a:	f7ff fcde 	bl	801f6fa <mg_uecc_vli_numBits>
 801fd3e:	4603      	mov	r3, r0
 801fd40:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801fd42:	1ae3      	subs	r3, r4, r3
 801fd44:	b29b      	uxth	r3, r3
 801fd46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801fd4a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	da00      	bge.n	801fd54 <mg_uecc_vli_mmod+0x44>
 801fd52:	331f      	adds	r3, #31
 801fd54:	115b      	asrs	r3, r3, #5
 801fd56:	b21b      	sxth	r3, r3
 801fd58:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801fd5c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801fd60:	425a      	negs	r2, r3
 801fd62:	f003 031f 	and.w	r3, r3, #31
 801fd66:	f002 021f 	and.w	r2, r2, #31
 801fd6a:	bf58      	it	pl
 801fd6c:	4253      	negpl	r3, r2
 801fd6e:	b21b      	sxth	r3, r3
 801fd70:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801fd74:	2300      	movs	r3, #0
 801fd76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801fd7a:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801fd7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801fd82:	4611      	mov	r1, r2
 801fd84:	4618      	mov	r0, r3
 801fd86:	f7ff fc2d 	bl	801f5e4 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801fd8a:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	dd34      	ble.n	801fdfc <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801fd92:	2300      	movs	r3, #0
 801fd94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801fd98:	e029      	b.n	801fdee <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801fd9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fd9e:	009b      	lsls	r3, r3, #2
 801fda0:	687a      	ldr	r2, [r7, #4]
 801fda2:	4413      	add	r3, r2
 801fda4:	681a      	ldr	r2, [r3, #0]
 801fda6:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801fdaa:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801fdae:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801fdb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fdb6:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801fdb8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801fdbc:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801fdbe:	009b      	lsls	r3, r3, #2
 801fdc0:	33b0      	adds	r3, #176	@ 0xb0
 801fdc2:	443b      	add	r3, r7
 801fdc4:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801fdc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fdcc:	009b      	lsls	r3, r3, #2
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	4413      	add	r3, r2
 801fdd2:	681a      	ldr	r2, [r3, #0]
 801fdd4:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801fdd8:	f1c3 0320 	rsb	r3, r3, #32
 801fddc:	fa22 f303 	lsr.w	r3, r2, r3
 801fde0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801fde4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fde8:	3301      	adds	r3, #1
 801fdea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801fdee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fdf2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801fdf6:	429a      	cmp	r2, r3
 801fdf8:	d3cf      	bcc.n	801fd9a <mg_uecc_vli_mmod+0x8a>
 801fdfa:	e00b      	b.n	801fe14 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801fdfc:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801fe00:	009b      	lsls	r3, r3, #2
 801fe02:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801fe06:	4413      	add	r3, r2
 801fe08:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801fe0c:	6879      	ldr	r1, [r7, #4]
 801fe0e:	4618      	mov	r0, r3
 801fe10:	f7ff fcac 	bl	801f76c <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801fe14:	2301      	movs	r3, #1
 801fe16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801fe1a:	e09f      	b.n	801ff5c <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801fe1c:	2300      	movs	r3, #0
 801fe1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801fe22:	2300      	movs	r3, #0
 801fe24:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801fe28:	e053      	b.n	801fed2 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801fe2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fe2e:	009b      	lsls	r3, r3, #2
 801fe30:	33b0      	adds	r3, #176	@ 0xb0
 801fe32:	443b      	add	r3, r7
 801fe34:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801fe38:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801fe3c:	009b      	lsls	r3, r3, #2
 801fe3e:	4413      	add	r3, r2
 801fe40:	681a      	ldr	r2, [r3, #0]
 801fe42:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801fe46:	009b      	lsls	r3, r3, #2
 801fe48:	33b0      	adds	r3, #176	@ 0xb0
 801fe4a:	443b      	add	r3, r7
 801fe4c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801fe50:	1ad2      	subs	r2, r2, r3
 801fe52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801fe56:	1ad3      	subs	r3, r2, r3
 801fe58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801fe5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fe60:	009b      	lsls	r3, r3, #2
 801fe62:	33b0      	adds	r3, #176	@ 0xb0
 801fe64:	443b      	add	r3, r7
 801fe66:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801fe6a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801fe6e:	009b      	lsls	r3, r3, #2
 801fe70:	4413      	add	r3, r2
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801fe78:	429a      	cmp	r2, r3
 801fe7a:	d014      	beq.n	801fea6 <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801fe7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801fe80:	009b      	lsls	r3, r3, #2
 801fe82:	33b0      	adds	r3, #176	@ 0xb0
 801fe84:	443b      	add	r3, r7
 801fe86:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801fe8a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801fe8e:	009b      	lsls	r3, r3, #2
 801fe90:	4413      	add	r3, r2
 801fe92:	681b      	ldr	r3, [r3, #0]
 801fe94:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801fe98:	429a      	cmp	r2, r3
 801fe9a:	bf8c      	ite	hi
 801fe9c:	2301      	movhi	r3, #1
 801fe9e:	2300      	movls	r3, #0
 801fea0:	b2db      	uxtb	r3, r3
 801fea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801fea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801feaa:	f1c3 0301 	rsb	r3, r3, #1
 801feae:	009b      	lsls	r3, r3, #2
 801feb0:	33b0      	adds	r3, #176	@ 0xb0
 801feb2:	443b      	add	r3, r7
 801feb4:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801feb8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801febc:	009b      	lsls	r3, r3, #2
 801febe:	4413      	add	r3, r2
 801fec0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801fec4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801fec6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801feca:	3301      	adds	r3, #1
 801fecc:	b2db      	uxtb	r3, r3
 801fece:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801fed2:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801fed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801feda:	005b      	lsls	r3, r3, #1
 801fedc:	429a      	cmp	r2, r3
 801fede:	dba4      	blt.n	801fe2a <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801fee0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801fee4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801fee8:	429a      	cmp	r2, r3
 801feea:	bf0c      	ite	eq
 801feec:	2301      	moveq	r3, #1
 801feee:	2300      	movne	r3, #0
 801fef0:	b2db      	uxtb	r3, r3
 801fef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801fef6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801fefa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801fefe:	4611      	mov	r1, r2
 801ff00:	4618      	mov	r0, r3
 801ff02:	f7ff fcf9 	bl	801f8f8 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801ff06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ff0a:	3b01      	subs	r3, #1
 801ff0c:	009b      	lsls	r3, r3, #2
 801ff0e:	33b0      	adds	r3, #176	@ 0xb0
 801ff10:	443b      	add	r3, r7
 801ff12:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801ff16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ff1a:	009b      	lsls	r3, r3, #2
 801ff1c:	33b0      	adds	r3, #176	@ 0xb0
 801ff1e:	443b      	add	r3, r7
 801ff20:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801ff24:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801ff26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ff2a:	3b01      	subs	r3, #1
 801ff2c:	430a      	orrs	r2, r1
 801ff2e:	009b      	lsls	r3, r3, #2
 801ff30:	33b0      	adds	r3, #176	@ 0xb0
 801ff32:	443b      	add	r3, r7
 801ff34:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801ff38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ff3c:	009b      	lsls	r3, r3, #2
 801ff3e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801ff42:	4413      	add	r3, r2
 801ff44:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ff48:	4611      	mov	r1, r2
 801ff4a:	4618      	mov	r0, r3
 801ff4c:	f7ff fcd4 	bl	801f8f8 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801ff50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801ff54:	3b01      	subs	r3, #1
 801ff56:	b29b      	uxth	r3, r3
 801ff58:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801ff5c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	f6bf af5b 	bge.w	801fe1c <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801ff66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ff6a:	009b      	lsls	r3, r3, #2
 801ff6c:	33b0      	adds	r3, #176	@ 0xb0
 801ff6e:	443b      	add	r3, r7
 801ff70:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801ff74:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ff78:	4619      	mov	r1, r3
 801ff7a:	68f8      	ldr	r0, [r7, #12]
 801ff7c:	f7ff fbf6 	bl	801f76c <mg_uecc_vli_set>
}
 801ff80:	bf00      	nop
 801ff82:	37b4      	adds	r7, #180	@ 0xb4
 801ff84:	46bd      	mov	sp, r7
 801ff86:	bd90      	pop	{r4, r7, pc}

0801ff88 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801ff88:	b580      	push	{r7, lr}
 801ff8a:	b094      	sub	sp, #80	@ 0x50
 801ff8c:	af00      	add	r7, sp, #0
 801ff8e:	60f8      	str	r0, [r7, #12]
 801ff90:	60b9      	str	r1, [r7, #8]
 801ff92:	607a      	str	r2, [r7, #4]
 801ff94:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801ff96:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801ff9a:	f107 0010 	add.w	r0, r7, #16
 801ff9e:	687a      	ldr	r2, [r7, #4]
 801ffa0:	68b9      	ldr	r1, [r7, #8]
 801ffa2:	f7ff fdd1 	bl	801fb48 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801ffa6:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801ffaa:	f107 0110 	add.w	r1, r7, #16
 801ffae:	683a      	ldr	r2, [r7, #0]
 801ffb0:	68f8      	ldr	r0, [r7, #12]
 801ffb2:	f7ff fead 	bl	801fd10 <mg_uecc_vli_mmod>
}
 801ffb6:	bf00      	nop
 801ffb8:	3750      	adds	r7, #80	@ 0x50
 801ffba:	46bd      	mov	sp, r7
 801ffbc:	bd80      	pop	{r7, pc}

0801ffbe <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801ffbe:	b580      	push	{r7, lr}
 801ffc0:	b094      	sub	sp, #80	@ 0x50
 801ffc2:	af00      	add	r7, sp, #0
 801ffc4:	60f8      	str	r0, [r7, #12]
 801ffc6:	60b9      	str	r1, [r7, #8]
 801ffc8:	607a      	str	r2, [r7, #4]
 801ffca:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801ffcc:	683b      	ldr	r3, [r7, #0]
 801ffce:	f993 3000 	ldrsb.w	r3, [r3]
 801ffd2:	f107 0010 	add.w	r0, r7, #16
 801ffd6:	687a      	ldr	r2, [r7, #4]
 801ffd8:	68b9      	ldr	r1, [r7, #8]
 801ffda:	f7ff fdb5 	bl	801fb48 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801ffde:	683b      	ldr	r3, [r7, #0]
 801ffe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801ffe4:	f107 0210 	add.w	r2, r7, #16
 801ffe8:	4611      	mov	r1, r2
 801ffea:	68f8      	ldr	r0, [r7, #12]
 801ffec:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801ffee:	bf00      	nop
 801fff0:	3750      	adds	r7, #80	@ 0x50
 801fff2:	46bd      	mov	sp, r7
 801fff4:	bd80      	pop	{r7, pc}

0801fff6 <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801fff6:	b580      	push	{r7, lr}
 801fff8:	b084      	sub	sp, #16
 801fffa:	af00      	add	r7, sp, #0
 801fffc:	60f8      	str	r0, [r7, #12]
 801fffe:	60b9      	str	r1, [r7, #8]
 8020000:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	68ba      	ldr	r2, [r7, #8]
 8020006:	68b9      	ldr	r1, [r7, #8]
 8020008:	68f8      	ldr	r0, [r7, #12]
 802000a:	f7ff ffd8 	bl	801ffbe <mg_uecc_vli_modMult_fast>
}
 802000e:	bf00      	nop
 8020010:	3710      	adds	r7, #16
 8020012:	46bd      	mov	sp, r7
 8020014:	bd80      	pop	{r7, pc}

08020016 <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 8020016:	b580      	push	{r7, lr}
 8020018:	b086      	sub	sp, #24
 802001a:	af00      	add	r7, sp, #0
 802001c:	60f8      	str	r0, [r7, #12]
 802001e:	60b9      	str	r1, [r7, #8]
 8020020:	4613      	mov	r3, r2
 8020022:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 8020024:	2300      	movs	r3, #0
 8020026:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	f003 0301 	and.w	r3, r3, #1
 8020030:	2b00      	cmp	r3, #0
 8020032:	d007      	beq.n	8020044 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 8020034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020038:	68ba      	ldr	r2, [r7, #8]
 802003a:	68f9      	ldr	r1, [r7, #12]
 802003c:	68f8      	ldr	r0, [r7, #12]
 802003e:	f7ff fc85 	bl	801f94c <mg_uecc_vli_add>
 8020042:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 8020044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020048:	4619      	mov	r1, r3
 802004a:	68f8      	ldr	r0, [r7, #12]
 802004c:	f7ff fc54 	bl	801f8f8 <mg_uecc_vli_rshift1>
  if (carry) {
 8020050:	697b      	ldr	r3, [r7, #20]
 8020052:	2b00      	cmp	r3, #0
 8020054:	d013      	beq.n	802007e <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 8020056:	f997 2007 	ldrsb.w	r2, [r7, #7]
 802005a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 802005e:	4413      	add	r3, r2
 8020060:	009b      	lsls	r3, r3, #2
 8020062:	68fa      	ldr	r2, [r7, #12]
 8020064:	4413      	add	r3, r2
 8020066:	681a      	ldr	r2, [r3, #0]
 8020068:	f997 1007 	ldrsb.w	r1, [r7, #7]
 802006c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8020070:	440b      	add	r3, r1
 8020072:	009b      	lsls	r3, r3, #2
 8020074:	68f9      	ldr	r1, [r7, #12]
 8020076:	440b      	add	r3, r1
 8020078:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 802007c:	601a      	str	r2, [r3, #0]
  }
}
 802007e:	bf00      	nop
 8020080:	3718      	adds	r7, #24
 8020082:	46bd      	mov	sp, r7
 8020084:	bd80      	pop	{r7, pc}

08020086 <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8020086:	b580      	push	{r7, lr}
 8020088:	b0a6      	sub	sp, #152	@ 0x98
 802008a:	af00      	add	r7, sp, #0
 802008c:	60f8      	str	r0, [r7, #12]
 802008e:	60b9      	str	r1, [r7, #8]
 8020090:	607a      	str	r2, [r7, #4]
 8020092:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 8020094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020098:	4619      	mov	r1, r3
 802009a:	68b8      	ldr	r0, [r7, #8]
 802009c:	f7ff fac3 	bl	801f626 <mg_uecc_vli_isZero>
 80200a0:	4603      	mov	r3, r0
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d006      	beq.n	80200b4 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 80200a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80200aa:	4619      	mov	r1, r3
 80200ac:	68f8      	ldr	r0, [r7, #12]
 80200ae:	f7ff fa99 	bl	801f5e4 <mg_uecc_vli_clear>
 80200b2:	e0de      	b.n	8020272 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 80200b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80200b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80200bc:	68b9      	ldr	r1, [r7, #8]
 80200be:	4618      	mov	r0, r3
 80200c0:	f7ff fb54 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 80200c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80200c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80200cc:	6879      	ldr	r1, [r7, #4]
 80200ce:	4618      	mov	r0, r3
 80200d0:	f7ff fb4c 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 80200d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80200d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80200dc:	4611      	mov	r1, r2
 80200de:	4618      	mov	r0, r3
 80200e0:	f7ff fa80 	bl	801f5e4 <mg_uecc_vli_clear>
  u[0] = 1;
 80200e4:	2301      	movs	r3, #1
 80200e6:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 80200e8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80200ec:	f107 0314 	add.w	r3, r7, #20
 80200f0:	4611      	mov	r1, r2
 80200f2:	4618      	mov	r0, r3
 80200f4:	f7ff fa76 	bl	801f5e4 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 80200f8:	e0a2      	b.n	8020240 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 80200fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80200fc:	f003 0301 	and.w	r3, r3, #1
 8020100:	2b00      	cmp	r3, #0
 8020102:	d110      	bne.n	8020126 <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 8020104:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020108:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 802010c:	4611      	mov	r1, r2
 802010e:	4618      	mov	r0, r3
 8020110:	f7ff fbf2 	bl	801f8f8 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 8020114:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020118:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802011c:	6879      	ldr	r1, [r7, #4]
 802011e:	4618      	mov	r0, r3
 8020120:	f7ff ff79 	bl	8020016 <vli_modInv_update>
 8020124:	e08c      	b.n	8020240 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 8020126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020128:	f003 0301 	and.w	r3, r3, #1
 802012c:	2b00      	cmp	r3, #0
 802012e:	d110      	bne.n	8020152 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 8020130:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020134:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8020138:	4611      	mov	r1, r2
 802013a:	4618      	mov	r0, r3
 802013c:	f7ff fbdc 	bl	801f8f8 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 8020140:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020144:	f107 0314 	add.w	r3, r7, #20
 8020148:	6879      	ldr	r1, [r7, #4]
 802014a:	4618      	mov	r0, r3
 802014c:	f7ff ff63 	bl	8020016 <vli_modInv_update>
 8020150:	e076      	b.n	8020240 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 8020152:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8020156:	2b00      	cmp	r3, #0
 8020158:	dd39      	ble.n	80201ce <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 802015a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802015e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8020162:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8020166:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 802016a:	f7ff fc39 	bl	801f9e0 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 802016e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020172:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8020176:	4611      	mov	r1, r2
 8020178:	4618      	mov	r0, r3
 802017a:	f7ff fbbd 	bl	801f8f8 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 802017e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020182:	f107 0114 	add.w	r1, r7, #20
 8020186:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802018a:	4618      	mov	r0, r3
 802018c:	f7ff fb15 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8020190:	4603      	mov	r3, r0
 8020192:	2b00      	cmp	r3, #0
 8020194:	da08      	bge.n	80201a8 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 8020196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802019a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 802019e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80201a2:	687a      	ldr	r2, [r7, #4]
 80201a4:	f7ff fbd2 	bl	801f94c <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 80201a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80201ac:	f107 0214 	add.w	r2, r7, #20
 80201b0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80201b4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80201b8:	f7ff fc12 	bl	801f9e0 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 80201bc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80201c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80201c4:	6879      	ldr	r1, [r7, #4]
 80201c6:	4618      	mov	r0, r3
 80201c8:	f7ff ff25 	bl	8020016 <vli_modInv_update>
 80201cc:	e038      	b.n	8020240 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 80201ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80201d2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80201d6:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80201da:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80201de:	f7ff fbff 	bl	801f9e0 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 80201e2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80201e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80201ea:	4611      	mov	r1, r2
 80201ec:	4618      	mov	r0, r3
 80201ee:	f7ff fb83 	bl	801f8f8 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 80201f2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80201f6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80201fa:	f107 0314 	add.w	r3, r7, #20
 80201fe:	4618      	mov	r0, r3
 8020200:	f7ff fadb 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8020204:	4603      	mov	r3, r0
 8020206:	2b00      	cmp	r3, #0
 8020208:	da08      	bge.n	802021c <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 802020a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802020e:	f107 0114 	add.w	r1, r7, #20
 8020212:	f107 0014 	add.w	r0, r7, #20
 8020216:	687a      	ldr	r2, [r7, #4]
 8020218:	f7ff fb98 	bl	801f94c <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 802021c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020220:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020224:	f107 0114 	add.w	r1, r7, #20
 8020228:	f107 0014 	add.w	r0, r7, #20
 802022c:	f7ff fbd8 	bl	801f9e0 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 8020230:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020234:	f107 0314 	add.w	r3, r7, #20
 8020238:	6879      	ldr	r1, [r7, #4]
 802023a:	4618      	mov	r0, r3
 802023c:	f7ff feeb 	bl	8020016 <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8020240:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020244:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8020248:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 802024c:	4618      	mov	r0, r3
 802024e:	f7ff fab4 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8020252:	4603      	mov	r3, r0
 8020254:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8020258:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 802025c:	2b00      	cmp	r3, #0
 802025e:	f47f af4c 	bne.w	80200fa <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 8020262:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8020266:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802026a:	4619      	mov	r1, r3
 802026c:	68f8      	ldr	r0, [r7, #12]
 802026e:	f7ff fa7d 	bl	801f76c <mg_uecc_vli_set>
}
 8020272:	3798      	adds	r7, #152	@ 0x98
 8020274:	46bd      	mov	sp, r7
 8020276:	bd80      	pop	{r7, pc}

08020278 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 8020278:	b580      	push	{r7, lr}
 802027a:	b098      	sub	sp, #96	@ 0x60
 802027c:	af02      	add	r7, sp, #8
 802027e:	60f8      	str	r0, [r7, #12]
 8020280:	60b9      	str	r1, [r7, #8]
 8020282:	607a      	str	r2, [r7, #4]
 8020284:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8020286:	683b      	ldr	r3, [r7, #0]
 8020288:	781b      	ldrb	r3, [r3, #0]
 802028a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 802028e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020292:	4619      	mov	r1, r3
 8020294:	6878      	ldr	r0, [r7, #4]
 8020296:	f7ff f9c6 	bl	801f626 <mg_uecc_vli_isZero>
 802029a:	4603      	mov	r3, r0
 802029c:	2b00      	cmp	r3, #0
 802029e:	f040 80e6 	bne.w	802046e <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 80202a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80202a6:	683a      	ldr	r2, [r7, #0]
 80202a8:	68b9      	ldr	r1, [r7, #8]
 80202aa:	4618      	mov	r0, r3
 80202ac:	f7ff fea3 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 80202b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80202b4:	f107 0010 	add.w	r0, r7, #16
 80202b8:	683b      	ldr	r3, [r7, #0]
 80202ba:	68f9      	ldr	r1, [r7, #12]
 80202bc:	f7ff fe7f 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 80202c0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80202c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80202c8:	683a      	ldr	r2, [r7, #0]
 80202ca:	4618      	mov	r0, r3
 80202cc:	f7ff fe93 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 80202d0:	683b      	ldr	r3, [r7, #0]
 80202d2:	687a      	ldr	r2, [r7, #4]
 80202d4:	68b9      	ldr	r1, [r7, #8]
 80202d6:	68b8      	ldr	r0, [r7, #8]
 80202d8:	f7ff fe71 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 80202dc:	683a      	ldr	r2, [r7, #0]
 80202de:	6879      	ldr	r1, [r7, #4]
 80202e0:	6878      	ldr	r0, [r7, #4]
 80202e2:	f7ff fe88 	bl	801fff6 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 80202e6:	683b      	ldr	r3, [r7, #0]
 80202e8:	1d1a      	adds	r2, r3, #4
 80202ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80202ee:	9300      	str	r3, [sp, #0]
 80202f0:	4613      	mov	r3, r2
 80202f2:	687a      	ldr	r2, [r7, #4]
 80202f4:	68f9      	ldr	r1, [r7, #12]
 80202f6:	68f8      	ldr	r0, [r7, #12]
 80202f8:	f7ff fcc6 	bl	801fc88 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 80202fc:	683b      	ldr	r3, [r7, #0]
 80202fe:	1d1a      	adds	r2, r3, #4
 8020300:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020304:	9300      	str	r3, [sp, #0]
 8020306:	4613      	mov	r3, r2
 8020308:	687a      	ldr	r2, [r7, #4]
 802030a:	6879      	ldr	r1, [r7, #4]
 802030c:	6878      	ldr	r0, [r7, #4]
 802030e:	f7ff fcbb 	bl	801fc88 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8020312:	683b      	ldr	r3, [r7, #0]
 8020314:	1d1a      	adds	r2, r3, #4
 8020316:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 802031a:	9300      	str	r3, [sp, #0]
 802031c:	4613      	mov	r3, r2
 802031e:	687a      	ldr	r2, [r7, #4]
 8020320:	68f9      	ldr	r1, [r7, #12]
 8020322:	6878      	ldr	r0, [r7, #4]
 8020324:	f7ff fcd7 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 8020328:	683b      	ldr	r3, [r7, #0]
 802032a:	687a      	ldr	r2, [r7, #4]
 802032c:	68f9      	ldr	r1, [r7, #12]
 802032e:	68f8      	ldr	r0, [r7, #12]
 8020330:	f7ff fe45 	bl	801ffbe <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 8020334:	683b      	ldr	r3, [r7, #0]
 8020336:	1d1a      	adds	r2, r3, #4
 8020338:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 802033c:	9300      	str	r3, [sp, #0]
 802033e:	4613      	mov	r3, r2
 8020340:	68fa      	ldr	r2, [r7, #12]
 8020342:	68f9      	ldr	r1, [r7, #12]
 8020344:	6878      	ldr	r0, [r7, #4]
 8020346:	f7ff fc9f 	bl	801fc88 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 802034a:	683b      	ldr	r3, [r7, #0]
 802034c:	1d1a      	adds	r2, r3, #4
 802034e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020352:	9300      	str	r3, [sp, #0]
 8020354:	4613      	mov	r3, r2
 8020356:	687a      	ldr	r2, [r7, #4]
 8020358:	68f9      	ldr	r1, [r7, #12]
 802035a:	68f8      	ldr	r0, [r7, #12]
 802035c:	f7ff fc94 	bl	801fc88 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 8020360:	2100      	movs	r1, #0
 8020362:	68f8      	ldr	r0, [r7, #12]
 8020364:	f7ff f989 	bl	801f67a <mg_uecc_vli_testBit>
 8020368:	4603      	mov	r3, r0
 802036a:	2b00      	cmp	r3, #0
 802036c:	d024      	beq.n	80203b8 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 802036e:	683b      	ldr	r3, [r7, #0]
 8020370:	1d1a      	adds	r2, r3, #4
 8020372:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020376:	68f9      	ldr	r1, [r7, #12]
 8020378:	68f8      	ldr	r0, [r7, #12]
 802037a:	f7ff fae7 	bl	801f94c <mg_uecc_vli_add>
 802037e:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 8020380:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020384:	4619      	mov	r1, r3
 8020386:	68f8      	ldr	r0, [r7, #12]
 8020388:	f7ff fab6 	bl	801f8f8 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 802038c:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8020390:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8020394:	4413      	add	r3, r2
 8020396:	009b      	lsls	r3, r3, #2
 8020398:	68fa      	ldr	r2, [r7, #12]
 802039a:	4413      	add	r3, r2
 802039c:	6819      	ldr	r1, [r3, #0]
 802039e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80203a0:	07da      	lsls	r2, r3, #31
 80203a2:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 80203a6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80203aa:	4403      	add	r3, r0
 80203ac:	009b      	lsls	r3, r3, #2
 80203ae:	68f8      	ldr	r0, [r7, #12]
 80203b0:	4403      	add	r3, r0
 80203b2:	430a      	orrs	r2, r1
 80203b4:	601a      	str	r2, [r3, #0]
 80203b6:	e005      	b.n	80203c4 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 80203b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80203bc:	4619      	mov	r1, r3
 80203be:	68f8      	ldr	r0, [r7, #12]
 80203c0:	f7ff fa9a 	bl	801f8f8 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 80203c4:	683a      	ldr	r2, [r7, #0]
 80203c6:	68f9      	ldr	r1, [r7, #12]
 80203c8:	6878      	ldr	r0, [r7, #4]
 80203ca:	f7ff fe14 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	1d19      	adds	r1, r3, #4
 80203d2:	f107 0210 	add.w	r2, r7, #16
 80203d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80203da:	9300      	str	r3, [sp, #0]
 80203dc:	460b      	mov	r3, r1
 80203de:	6879      	ldr	r1, [r7, #4]
 80203e0:	6878      	ldr	r0, [r7, #4]
 80203e2:	f7ff fc78 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 80203e6:	683b      	ldr	r3, [r7, #0]
 80203e8:	1d19      	adds	r1, r3, #4
 80203ea:	f107 0210 	add.w	r2, r7, #16
 80203ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80203f2:	9300      	str	r3, [sp, #0]
 80203f4:	460b      	mov	r3, r1
 80203f6:	6879      	ldr	r1, [r7, #4]
 80203f8:	6878      	ldr	r0, [r7, #4]
 80203fa:	f7ff fc6c 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 80203fe:	683b      	ldr	r3, [r7, #0]
 8020400:	1d1a      	adds	r2, r3, #4
 8020402:	f107 0110 	add.w	r1, r7, #16
 8020406:	f107 0010 	add.w	r0, r7, #16
 802040a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 802040e:	9300      	str	r3, [sp, #0]
 8020410:	4613      	mov	r3, r2
 8020412:	687a      	ldr	r2, [r7, #4]
 8020414:	f7ff fc5f 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 8020418:	f107 0210 	add.w	r2, r7, #16
 802041c:	683b      	ldr	r3, [r7, #0]
 802041e:	68f9      	ldr	r1, [r7, #12]
 8020420:	68f8      	ldr	r0, [r7, #12]
 8020422:	f7ff fdcc 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 8020426:	683b      	ldr	r3, [r7, #0]
 8020428:	1d19      	adds	r1, r3, #4
 802042a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 802042e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8020432:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020436:	9300      	str	r3, [sp, #0]
 8020438:	460b      	mov	r3, r1
 802043a:	68f9      	ldr	r1, [r7, #12]
 802043c:	f7ff fc4b 	bl	801fcd6 <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 8020440:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020444:	461a      	mov	r2, r3
 8020446:	6879      	ldr	r1, [r7, #4]
 8020448:	68f8      	ldr	r0, [r7, #12]
 802044a:	f7ff f98f 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 802044e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8020452:	461a      	mov	r2, r3
 8020454:	68b9      	ldr	r1, [r7, #8]
 8020456:	6878      	ldr	r0, [r7, #4]
 8020458:	f7ff f988 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 802045c:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8020460:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020464:	4619      	mov	r1, r3
 8020466:	68b8      	ldr	r0, [r7, #8]
 8020468:	f7ff f980 	bl	801f76c <mg_uecc_vli_set>
 802046c:	e000      	b.n	8020470 <double_jacobian_default+0x1f8>
    return;
 802046e:	bf00      	nop
}
 8020470:	3758      	adds	r7, #88	@ 0x58
 8020472:	46bd      	mov	sp, r7
 8020474:	bd80      	pop	{r7, pc}

08020476 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 8020476:	b580      	push	{r7, lr}
 8020478:	b090      	sub	sp, #64	@ 0x40
 802047a:	af02      	add	r7, sp, #8
 802047c:	60f8      	str	r0, [r7, #12]
 802047e:	60b9      	str	r1, [r7, #8]
 8020480:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 8020482:	f107 0314 	add.w	r3, r7, #20
 8020486:	2220      	movs	r2, #32
 8020488:	2100      	movs	r1, #0
 802048a:	4618      	mov	r0, r3
 802048c:	f008 f988 	bl	80287a0 <memset>
 8020490:	2303      	movs	r3, #3
 8020492:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	781b      	ldrb	r3, [r3, #0]
 8020498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 802049c:	687a      	ldr	r2, [r7, #4]
 802049e:	68b9      	ldr	r1, [r7, #8]
 80204a0:	68f8      	ldr	r0, [r7, #12]
 80204a2:	f7ff fda8 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	1d19      	adds	r1, r3, #4
 80204aa:	f107 0214 	add.w	r2, r7, #20
 80204ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80204b2:	9300      	str	r3, [sp, #0]
 80204b4:	460b      	mov	r3, r1
 80204b6:	68f9      	ldr	r1, [r7, #12]
 80204b8:	68f8      	ldr	r0, [r7, #12]
 80204ba:	f7ff fc0c 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	68ba      	ldr	r2, [r7, #8]
 80204c2:	68f9      	ldr	r1, [r7, #12]
 80204c4:	68f8      	ldr	r0, [r7, #12]
 80204c6:	f7ff fd7a 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	1d19      	adds	r1, r3, #4
 80204d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80204d8:	9300      	str	r3, [sp, #0]
 80204da:	460b      	mov	r3, r1
 80204dc:	68f9      	ldr	r1, [r7, #12]
 80204de:	68f8      	ldr	r0, [r7, #12]
 80204e0:	f7ff fbd2 	bl	801fc88 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 80204e4:	bf00      	nop
 80204e6:	3738      	adds	r7, #56	@ 0x38
 80204e8:	46bd      	mov	sp, r7
 80204ea:	bd80      	pop	{r7, pc}

080204ec <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 80204ec:	b580      	push	{r7, lr}
 80204ee:	b094      	sub	sp, #80	@ 0x50
 80204f0:	af00      	add	r7, sp, #0
 80204f2:	6078      	str	r0, [r7, #4]
 80204f4:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 80204f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80204fa:	2220      	movs	r2, #32
 80204fc:	2100      	movs	r1, #0
 80204fe:	4618      	mov	r0, r3
 8020500:	f008 f94e 	bl	80287a0 <memset>
 8020504:	2301      	movs	r3, #1
 8020506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 8020508:	f107 030c 	add.w	r3, r7, #12
 802050c:	2220      	movs	r2, #32
 802050e:	2100      	movs	r1, #0
 8020510:	4618      	mov	r0, r3
 8020512:	f008 f945 	bl	80287a0 <memset>
 8020516:	2301      	movs	r3, #1
 8020518:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 802051a:	683b      	ldr	r3, [r7, #0]
 802051c:	781b      	ldrb	r3, [r3, #0]
 802051e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8020522:	683b      	ldr	r3, [r7, #0]
 8020524:	1d19      	adds	r1, r3, #4
 8020526:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 802052a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 802052e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8020532:	f7ff fa0b 	bl	801f94c <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8020536:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 802053a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802053e:	4611      	mov	r1, r2
 8020540:	4618      	mov	r0, r3
 8020542:	f7ff f8da 	bl	801f6fa <mg_uecc_vli_numBits>
 8020546:	4603      	mov	r3, r0
 8020548:	b29b      	uxth	r3, r3
 802054a:	3b01      	subs	r3, #1
 802054c:	b29b      	uxth	r3, r3
 802054e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8020552:	e020      	b.n	8020596 <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 8020554:	f107 010c 	add.w	r1, r7, #12
 8020558:	f107 030c 	add.w	r3, r7, #12
 802055c:	683a      	ldr	r2, [r7, #0]
 802055e:	4618      	mov	r0, r3
 8020560:	f7ff fd49 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 8020564:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8020568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802056c:	4611      	mov	r1, r2
 802056e:	4618      	mov	r0, r3
 8020570:	f7ff f883 	bl	801f67a <mg_uecc_vli_testBit>
 8020574:	4603      	mov	r3, r0
 8020576:	2b00      	cmp	r3, #0
 8020578:	d007      	beq.n	802058a <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 802057a:	f107 010c 	add.w	r1, r7, #12
 802057e:	f107 000c 	add.w	r0, r7, #12
 8020582:	683b      	ldr	r3, [r7, #0]
 8020584:	687a      	ldr	r2, [r7, #4]
 8020586:	f7ff fd1a 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 802058a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 802058e:	3b01      	subs	r3, #1
 8020590:	b29b      	uxth	r3, r3
 8020592:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8020596:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 802059a:	2b01      	cmp	r3, #1
 802059c:	dcda      	bgt.n	8020554 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 802059e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80205a2:	f107 030c 	add.w	r3, r7, #12
 80205a6:	4619      	mov	r1, r3
 80205a8:	6878      	ldr	r0, [r7, #4]
 80205aa:	f7ff f8df 	bl	801f76c <mg_uecc_vli_set>
}
 80205ae:	bf00      	nop
 80205b0:	3750      	adds	r7, #80	@ 0x50
 80205b2:	46bd      	mov	sp, r7
 80205b4:	bd80      	pop	{r7, pc}
	...

080205b8 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 80205b8:	b480      	push	{r7}
 80205ba:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 80205bc:	4b02      	ldr	r3, [pc, #8]	@ (80205c8 <mg_uecc_secp256r1+0x10>)
}
 80205be:	4618      	mov	r0, r3
 80205c0:	46bd      	mov	sp, r7
 80205c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205c6:	4770      	bx	lr
 80205c8:	08031028 	.word	0x08031028

080205cc <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 80205cc:	b580      	push	{r7, lr}
 80205ce:	b08c      	sub	sp, #48	@ 0x30
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	6078      	str	r0, [r7, #4]
 80205d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 80205d6:	2208      	movs	r2, #8
 80205d8:	6839      	ldr	r1, [r7, #0]
 80205da:	6878      	ldr	r0, [r7, #4]
 80205dc:	f7ff f8c6 	bl	801f76c <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 80205e0:	2300      	movs	r3, #0
 80205e2:	617b      	str	r3, [r7, #20]
 80205e4:	697b      	ldr	r3, [r7, #20]
 80205e6:	613b      	str	r3, [r7, #16]
 80205e8:	693b      	ldr	r3, [r7, #16]
 80205ea:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 80205ec:	683b      	ldr	r3, [r7, #0]
 80205ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80205f0:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 80205f2:	683b      	ldr	r3, [r7, #0]
 80205f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80205f6:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80205fc:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 80205fe:	683b      	ldr	r3, [r7, #0]
 8020600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020602:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8020604:	683b      	ldr	r3, [r7, #0]
 8020606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020608:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 802060a:	f107 020c 	add.w	r2, r7, #12
 802060e:	f107 010c 	add.w	r1, r7, #12
 8020612:	f107 000c 	add.w	r0, r7, #12
 8020616:	2308      	movs	r3, #8
 8020618:	f7ff f998 	bl	801f94c <mg_uecc_vli_add>
 802061c:	4603      	mov	r3, r0
 802061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8020620:	f107 020c 	add.w	r2, r7, #12
 8020624:	2308      	movs	r3, #8
 8020626:	6879      	ldr	r1, [r7, #4]
 8020628:	6878      	ldr	r0, [r7, #4]
 802062a:	f7ff f98f 	bl	801f94c <mg_uecc_vli_add>
 802062e:	4603      	mov	r3, r0
 8020630:	461a      	mov	r2, r3
 8020632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020634:	4413      	add	r3, r2
 8020636:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 8020638:	683b      	ldr	r3, [r7, #0]
 802063a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802063c:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 802063e:	683b      	ldr	r3, [r7, #0]
 8020640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020642:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 8020644:	683b      	ldr	r3, [r7, #0]
 8020646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020648:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 802064a:	683b      	ldr	r3, [r7, #0]
 802064c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802064e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 8020650:	2300      	movs	r3, #0
 8020652:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8020654:	f107 020c 	add.w	r2, r7, #12
 8020658:	f107 010c 	add.w	r1, r7, #12
 802065c:	f107 000c 	add.w	r0, r7, #12
 8020660:	2308      	movs	r3, #8
 8020662:	f7ff f973 	bl	801f94c <mg_uecc_vli_add>
 8020666:	4603      	mov	r3, r0
 8020668:	461a      	mov	r2, r3
 802066a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802066c:	4413      	add	r3, r2
 802066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8020670:	f107 020c 	add.w	r2, r7, #12
 8020674:	2308      	movs	r3, #8
 8020676:	6879      	ldr	r1, [r7, #4]
 8020678:	6878      	ldr	r0, [r7, #4]
 802067a:	f7ff f967 	bl	801f94c <mg_uecc_vli_add>
 802067e:	4603      	mov	r3, r0
 8020680:	461a      	mov	r2, r3
 8020682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020684:	4413      	add	r3, r2
 8020686:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 8020688:	683b      	ldr	r3, [r7, #0]
 802068a:	6a1b      	ldr	r3, [r3, #32]
 802068c:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 802068e:	683b      	ldr	r3, [r7, #0]
 8020690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020692:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 8020694:	683b      	ldr	r3, [r7, #0]
 8020696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020698:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 802069a:	2300      	movs	r3, #0
 802069c:	623b      	str	r3, [r7, #32]
 802069e:	6a3b      	ldr	r3, [r7, #32]
 80206a0:	61fb      	str	r3, [r7, #28]
 80206a2:	69fb      	ldr	r3, [r7, #28]
 80206a4:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 80206a6:	683b      	ldr	r3, [r7, #0]
 80206a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80206aa:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 80206ac:	683b      	ldr	r3, [r7, #0]
 80206ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80206b2:	f107 020c 	add.w	r2, r7, #12
 80206b6:	2308      	movs	r3, #8
 80206b8:	6879      	ldr	r1, [r7, #4]
 80206ba:	6878      	ldr	r0, [r7, #4]
 80206bc:	f7ff f946 	bl	801f94c <mg_uecc_vli_add>
 80206c0:	4603      	mov	r3, r0
 80206c2:	461a      	mov	r2, r3
 80206c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80206c6:	4413      	add	r3, r2
 80206c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 80206ca:	683b      	ldr	r3, [r7, #0]
 80206cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80206ce:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 80206d0:	683b      	ldr	r3, [r7, #0]
 80206d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80206d4:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 80206d6:	683b      	ldr	r3, [r7, #0]
 80206d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80206da:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 80206dc:	683b      	ldr	r3, [r7, #0]
 80206de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80206e0:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 80206e2:	683b      	ldr	r3, [r7, #0]
 80206e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80206e6:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 80206e8:	683b      	ldr	r3, [r7, #0]
 80206ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80206ec:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 80206ee:	683b      	ldr	r3, [r7, #0]
 80206f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80206f2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 80206f4:	683b      	ldr	r3, [r7, #0]
 80206f6:	6a1b      	ldr	r3, [r3, #32]
 80206f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80206fa:	f107 020c 	add.w	r2, r7, #12
 80206fe:	2308      	movs	r3, #8
 8020700:	6879      	ldr	r1, [r7, #4]
 8020702:	6878      	ldr	r0, [r7, #4]
 8020704:	f7ff f922 	bl	801f94c <mg_uecc_vli_add>
 8020708:	4603      	mov	r3, r0
 802070a:	461a      	mov	r2, r3
 802070c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802070e:	4413      	add	r3, r2
 8020710:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 8020712:	683b      	ldr	r3, [r7, #0]
 8020714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020716:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 8020718:	683b      	ldr	r3, [r7, #0]
 802071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802071c:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 802071e:	683b      	ldr	r3, [r7, #0]
 8020720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020722:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 8020724:	2300      	movs	r3, #0
 8020726:	623b      	str	r3, [r7, #32]
 8020728:	6a3b      	ldr	r3, [r7, #32]
 802072a:	61fb      	str	r3, [r7, #28]
 802072c:	69fb      	ldr	r3, [r7, #28]
 802072e:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 8020730:	683b      	ldr	r3, [r7, #0]
 8020732:	6a1b      	ldr	r3, [r3, #32]
 8020734:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 8020736:	683b      	ldr	r3, [r7, #0]
 8020738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802073a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 802073c:	f107 020c 	add.w	r2, r7, #12
 8020740:	2308      	movs	r3, #8
 8020742:	6879      	ldr	r1, [r7, #4]
 8020744:	6878      	ldr	r0, [r7, #4]
 8020746:	f7ff f94b 	bl	801f9e0 <mg_uecc_vli_sub>
 802074a:	4603      	mov	r3, r0
 802074c:	461a      	mov	r2, r3
 802074e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020750:	1a9b      	subs	r3, r3, r2
 8020752:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 8020754:	683b      	ldr	r3, [r7, #0]
 8020756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020758:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 802075a:	683b      	ldr	r3, [r7, #0]
 802075c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802075e:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 8020760:	683b      	ldr	r3, [r7, #0]
 8020762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020764:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 8020766:	683b      	ldr	r3, [r7, #0]
 8020768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802076a:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 802076c:	2300      	movs	r3, #0
 802076e:	623b      	str	r3, [r7, #32]
 8020770:	6a3b      	ldr	r3, [r7, #32]
 8020772:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 8020774:	683b      	ldr	r3, [r7, #0]
 8020776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020778:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 802077a:	683b      	ldr	r3, [r7, #0]
 802077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8020780:	f107 020c 	add.w	r2, r7, #12
 8020784:	2308      	movs	r3, #8
 8020786:	6879      	ldr	r1, [r7, #4]
 8020788:	6878      	ldr	r0, [r7, #4]
 802078a:	f7ff f929 	bl	801f9e0 <mg_uecc_vli_sub>
 802078e:	4603      	mov	r3, r0
 8020790:	461a      	mov	r2, r3
 8020792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020794:	1a9b      	subs	r3, r3, r2
 8020796:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 8020798:	683b      	ldr	r3, [r7, #0]
 802079a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802079c:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 802079e:	683b      	ldr	r3, [r7, #0]
 80207a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80207a2:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 80207a4:	683b      	ldr	r3, [r7, #0]
 80207a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80207a8:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 80207aa:	683b      	ldr	r3, [r7, #0]
 80207ac:	6a1b      	ldr	r3, [r3, #32]
 80207ae:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 80207b0:	683b      	ldr	r3, [r7, #0]
 80207b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80207b4:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 80207b6:	683b      	ldr	r3, [r7, #0]
 80207b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80207ba:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 80207bc:	2300      	movs	r3, #0
 80207be:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 80207c0:	683b      	ldr	r3, [r7, #0]
 80207c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80207c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 80207c6:	f107 020c 	add.w	r2, r7, #12
 80207ca:	2308      	movs	r3, #8
 80207cc:	6879      	ldr	r1, [r7, #4]
 80207ce:	6878      	ldr	r0, [r7, #4]
 80207d0:	f7ff f906 	bl	801f9e0 <mg_uecc_vli_sub>
 80207d4:	4603      	mov	r3, r0
 80207d6:	461a      	mov	r2, r3
 80207d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207da:	1a9b      	subs	r3, r3, r2
 80207dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 80207de:	683b      	ldr	r3, [r7, #0]
 80207e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80207e2:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80207e8:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 80207ea:	2300      	movs	r3, #0
 80207ec:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 80207ee:	683b      	ldr	r3, [r7, #0]
 80207f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80207f2:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 80207f4:	683b      	ldr	r3, [r7, #0]
 80207f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80207f8:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80207fe:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8020800:	2300      	movs	r3, #0
 8020802:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 8020804:	683b      	ldr	r3, [r7, #0]
 8020806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020808:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 802080a:	f107 020c 	add.w	r2, r7, #12
 802080e:	2308      	movs	r3, #8
 8020810:	6879      	ldr	r1, [r7, #4]
 8020812:	6878      	ldr	r0, [r7, #4]
 8020814:	f7ff f8e4 	bl	801f9e0 <mg_uecc_vli_sub>
 8020818:	4603      	mov	r3, r0
 802081a:	461a      	mov	r2, r3
 802081c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802081e:	1a9b      	subs	r3, r3, r2
 8020820:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 8020822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020824:	2b00      	cmp	r3, #0
 8020826:	da19      	bge.n	802085c <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 8020828:	2308      	movs	r3, #8
 802082a:	4a14      	ldr	r2, [pc, #80]	@ (802087c <vli_mmod_fast_secp256r1+0x2b0>)
 802082c:	6879      	ldr	r1, [r7, #4]
 802082e:	6878      	ldr	r0, [r7, #4]
 8020830:	f7ff f88c 	bl	801f94c <mg_uecc_vli_add>
 8020834:	4603      	mov	r3, r0
 8020836:	461a      	mov	r2, r3
 8020838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802083a:	4413      	add	r3, r2
 802083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 802083e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020840:	2b00      	cmp	r3, #0
 8020842:	dbf1      	blt.n	8020828 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 8020844:	e015      	b.n	8020872 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 8020846:	2308      	movs	r3, #8
 8020848:	4a0c      	ldr	r2, [pc, #48]	@ (802087c <vli_mmod_fast_secp256r1+0x2b0>)
 802084a:	6879      	ldr	r1, [r7, #4]
 802084c:	6878      	ldr	r0, [r7, #4]
 802084e:	f7ff f8c7 	bl	801f9e0 <mg_uecc_vli_sub>
 8020852:	4603      	mov	r3, r0
 8020854:	461a      	mov	r2, r3
 8020856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020858:	1a9b      	subs	r3, r3, r2
 802085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 802085c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802085e:	2b00      	cmp	r3, #0
 8020860:	d1f1      	bne.n	8020846 <vli_mmod_fast_secp256r1+0x27a>
 8020862:	2208      	movs	r2, #8
 8020864:	6879      	ldr	r1, [r7, #4]
 8020866:	4805      	ldr	r0, [pc, #20]	@ (802087c <vli_mmod_fast_secp256r1+0x2b0>)
 8020868:	f7fe ffa7 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 802086c:	4603      	mov	r3, r0
 802086e:	2b01      	cmp	r3, #1
 8020870:	d1e9      	bne.n	8020846 <vli_mmod_fast_secp256r1+0x27a>
}
 8020872:	bf00      	nop
 8020874:	3730      	adds	r7, #48	@ 0x30
 8020876:	46bd      	mov	sp, r7
 8020878:	bd80      	pop	{r7, pc}
 802087a:	bf00      	nop
 802087c:	0803102c 	.word	0x0803102c

08020880 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 8020880:	b580      	push	{r7, lr}
 8020882:	b08c      	sub	sp, #48	@ 0x30
 8020884:	af00      	add	r7, sp, #0
 8020886:	60f8      	str	r0, [r7, #12]
 8020888:	60b9      	str	r1, [r7, #8]
 802088a:	607a      	str	r2, [r7, #4]
 802088c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 802088e:	f107 0310 	add.w	r3, r7, #16
 8020892:	683a      	ldr	r2, [r7, #0]
 8020894:	6879      	ldr	r1, [r7, #4]
 8020896:	4618      	mov	r0, r3
 8020898:	f7ff fbad 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 802089c:	f107 0210 	add.w	r2, r7, #16
 80208a0:	683b      	ldr	r3, [r7, #0]
 80208a2:	68f9      	ldr	r1, [r7, #12]
 80208a4:	68f8      	ldr	r0, [r7, #12]
 80208a6:	f7ff fb8a 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 80208aa:	f107 0110 	add.w	r1, r7, #16
 80208ae:	f107 0010 	add.w	r0, r7, #16
 80208b2:	683b      	ldr	r3, [r7, #0]
 80208b4:	687a      	ldr	r2, [r7, #4]
 80208b6:	f7ff fb82 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 80208ba:	f107 0210 	add.w	r2, r7, #16
 80208be:	683b      	ldr	r3, [r7, #0]
 80208c0:	68b9      	ldr	r1, [r7, #8]
 80208c2:	68b8      	ldr	r0, [r7, #8]
 80208c4:	f7ff fb7b 	bl	801ffbe <mg_uecc_vli_modMult_fast>
}
 80208c8:	bf00      	nop
 80208ca:	3730      	adds	r7, #48	@ 0x30
 80208cc:	46bd      	mov	sp, r7
 80208ce:	bd80      	pop	{r7, pc}

080208d0 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 80208d0:	b590      	push	{r4, r7, lr}
 80208d2:	b08f      	sub	sp, #60	@ 0x3c
 80208d4:	af00      	add	r7, sp, #0
 80208d6:	60f8      	str	r0, [r7, #12]
 80208d8:	60b9      	str	r1, [r7, #8]
 80208da:	607a      	str	r2, [r7, #4]
 80208dc:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 80208de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80208e0:	781b      	ldrb	r3, [r3, #0]
 80208e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 80208e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d008      	beq.n	80208fe <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 80208ec:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80208f0:	f107 0314 	add.w	r3, r7, #20
 80208f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80208f6:	4618      	mov	r0, r3
 80208f8:	f7fe ff38 	bl	801f76c <mg_uecc_vli_set>
 80208fc:	e009      	b.n	8020912 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 80208fe:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8020902:	f107 0314 	add.w	r3, r7, #20
 8020906:	4611      	mov	r1, r2
 8020908:	4618      	mov	r0, r3
 802090a:	f7fe fe6b 	bl	801f5e4 <mg_uecc_vli_clear>
    z[0] = 1;
 802090e:	2301      	movs	r3, #1
 8020910:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 8020912:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020916:	461a      	mov	r2, r3
 8020918:	68f9      	ldr	r1, [r7, #12]
 802091a:	6878      	ldr	r0, [r7, #4]
 802091c:	f7fe ff26 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 8020920:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020924:	461a      	mov	r2, r3
 8020926:	68b9      	ldr	r1, [r7, #8]
 8020928:	6838      	ldr	r0, [r7, #0]
 802092a:	f7fe ff1f 	bl	801f76c <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 802092e:	f107 0214 	add.w	r2, r7, #20
 8020932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020934:	68b9      	ldr	r1, [r7, #8]
 8020936:	68f8      	ldr	r0, [r7, #12]
 8020938:	f7ff ffa2 	bl	8020880 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 802093c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802093e:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8020942:	f107 0214 	add.w	r2, r7, #20
 8020946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020948:	68b9      	ldr	r1, [r7, #8]
 802094a:	68f8      	ldr	r0, [r7, #12]
 802094c:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 802094e:	f107 0214 	add.w	r2, r7, #20
 8020952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020954:	6839      	ldr	r1, [r7, #0]
 8020956:	6878      	ldr	r0, [r7, #4]
 8020958:	f7ff ff92 	bl	8020880 <apply_z>
}
 802095c:	bf00      	nop
 802095e:	373c      	adds	r7, #60	@ 0x3c
 8020960:	46bd      	mov	sp, r7
 8020962:	bd90      	pop	{r4, r7, pc}

08020964 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 8020964:	b580      	push	{r7, lr}
 8020966:	b090      	sub	sp, #64	@ 0x40
 8020968:	af02      	add	r7, sp, #8
 802096a:	60f8      	str	r0, [r7, #12]
 802096c:	60b9      	str	r1, [r7, #8]
 802096e:	607a      	str	r2, [r7, #4]
 8020970:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8020972:	f107 0314 	add.w	r3, r7, #20
 8020976:	2220      	movs	r2, #32
 8020978:	2100      	movs	r1, #0
 802097a:	4618      	mov	r0, r3
 802097c:	f007 ff10 	bl	80287a0 <memset>
  wordcount_t num_words = curve->num_words;
 8020980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020982:	781b      	ldrb	r3, [r3, #0]
 8020984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8020988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802098a:	1d1a      	adds	r2, r3, #4
 802098c:	f107 0014 	add.w	r0, r7, #20
 8020990:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020994:	9300      	str	r3, [sp, #0]
 8020996:	4613      	mov	r3, r2
 8020998:	68fa      	ldr	r2, [r7, #12]
 802099a:	6879      	ldr	r1, [r7, #4]
 802099c:	f7ff f99b 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 80209a0:	f107 0114 	add.w	r1, r7, #20
 80209a4:	f107 0314 	add.w	r3, r7, #20
 80209a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80209aa:	4618      	mov	r0, r3
 80209ac:	f7ff fb23 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 80209b0:	f107 0214 	add.w	r2, r7, #20
 80209b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80209b6:	68f9      	ldr	r1, [r7, #12]
 80209b8:	68f8      	ldr	r0, [r7, #12]
 80209ba:	f7ff fb00 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 80209be:	f107 0214 	add.w	r2, r7, #20
 80209c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80209c4:	6879      	ldr	r1, [r7, #4]
 80209c6:	6878      	ldr	r0, [r7, #4]
 80209c8:	f7ff faf9 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80209cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80209ce:	1d1a      	adds	r2, r3, #4
 80209d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80209d4:	9300      	str	r3, [sp, #0]
 80209d6:	4613      	mov	r3, r2
 80209d8:	68ba      	ldr	r2, [r7, #8]
 80209da:	6839      	ldr	r1, [r7, #0]
 80209dc:	6838      	ldr	r0, [r7, #0]
 80209de:	f7ff f97a 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 80209e2:	f107 0314 	add.w	r3, r7, #20
 80209e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80209e8:	6839      	ldr	r1, [r7, #0]
 80209ea:	4618      	mov	r0, r3
 80209ec:	f7ff fb03 	bl	801fff6 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 80209f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80209f2:	1d1a      	adds	r2, r3, #4
 80209f4:	f107 0114 	add.w	r1, r7, #20
 80209f8:	f107 0014 	add.w	r0, r7, #20
 80209fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020a00:	9300      	str	r3, [sp, #0]
 8020a02:	4613      	mov	r3, r2
 8020a04:	68fa      	ldr	r2, [r7, #12]
 8020a06:	f7ff f966 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8020a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a0c:	1d1a      	adds	r2, r3, #4
 8020a0e:	f107 0114 	add.w	r1, r7, #20
 8020a12:	f107 0014 	add.w	r0, r7, #20
 8020a16:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020a1a:	9300      	str	r3, [sp, #0]
 8020a1c:	4613      	mov	r3, r2
 8020a1e:	687a      	ldr	r2, [r7, #4]
 8020a20:	f7ff f959 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8020a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a26:	1d1a      	adds	r2, r3, #4
 8020a28:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020a2c:	9300      	str	r3, [sp, #0]
 8020a2e:	4613      	mov	r3, r2
 8020a30:	68fa      	ldr	r2, [r7, #12]
 8020a32:	6879      	ldr	r1, [r7, #4]
 8020a34:	6878      	ldr	r0, [r7, #4]
 8020a36:	f7ff f94e 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 8020a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a3c:	687a      	ldr	r2, [r7, #4]
 8020a3e:	68b9      	ldr	r1, [r7, #8]
 8020a40:	68b8      	ldr	r0, [r7, #8]
 8020a42:	f7ff fabc 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8020a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a48:	1d19      	adds	r1, r3, #4
 8020a4a:	f107 0214 	add.w	r2, r7, #20
 8020a4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020a52:	9300      	str	r3, [sp, #0]
 8020a54:	460b      	mov	r3, r1
 8020a56:	68f9      	ldr	r1, [r7, #12]
 8020a58:	6878      	ldr	r0, [r7, #4]
 8020a5a:	f7ff f93c 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 8020a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a60:	687a      	ldr	r2, [r7, #4]
 8020a62:	6839      	ldr	r1, [r7, #0]
 8020a64:	6838      	ldr	r0, [r7, #0]
 8020a66:	f7ff faaa 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8020a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020a6c:	1d1a      	adds	r2, r3, #4
 8020a6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8020a72:	9300      	str	r3, [sp, #0]
 8020a74:	4613      	mov	r3, r2
 8020a76:	68ba      	ldr	r2, [r7, #8]
 8020a78:	6839      	ldr	r1, [r7, #0]
 8020a7a:	6838      	ldr	r0, [r7, #0]
 8020a7c:	f7ff f92b 	bl	801fcd6 <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 8020a80:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8020a84:	f107 0314 	add.w	r3, r7, #20
 8020a88:	4619      	mov	r1, r3
 8020a8a:	6878      	ldr	r0, [r7, #4]
 8020a8c:	f7fe fe6e 	bl	801f76c <mg_uecc_vli_set>
}
 8020a90:	bf00      	nop
 8020a92:	3738      	adds	r7, #56	@ 0x38
 8020a94:	46bd      	mov	sp, r7
 8020a96:	bd80      	pop	{r7, pc}

08020a98 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 8020a98:	b590      	push	{r4, r7, lr}
 8020a9a:	b0a1      	sub	sp, #132	@ 0x84
 8020a9c:	af02      	add	r7, sp, #8
 8020a9e:	60f8      	str	r0, [r7, #12]
 8020aa0:	60b9      	str	r1, [r7, #8]
 8020aa2:	607a      	str	r2, [r7, #4]
 8020aa4:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 8020aa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8020aaa:	2220      	movs	r2, #32
 8020aac:	2100      	movs	r1, #0
 8020aae:	4618      	mov	r0, r3
 8020ab0:	f007 fe76 	bl	80287a0 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8020ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020ab8:	781b      	ldrb	r3, [r3, #0]
 8020aba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8020abe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020ac2:	1d1a      	adds	r2, r3, #4
 8020ac4:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8020ac8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020acc:	9300      	str	r3, [sp, #0]
 8020ace:	4613      	mov	r3, r2
 8020ad0:	68fa      	ldr	r2, [r7, #12]
 8020ad2:	6879      	ldr	r1, [r7, #4]
 8020ad4:	f7ff f8ff 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8020ad8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8020adc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8020ae0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8020ae4:	4618      	mov	r0, r3
 8020ae6:	f7ff fa86 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8020aea:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8020aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020af2:	68f9      	ldr	r1, [r7, #12]
 8020af4:	68f8      	ldr	r0, [r7, #12]
 8020af6:	f7ff fa62 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8020afa:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8020afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b02:	6879      	ldr	r1, [r7, #4]
 8020b04:	6878      	ldr	r0, [r7, #4]
 8020b06:	f7ff fa5a 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8020b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b0e:	1d1a      	adds	r2, r3, #4
 8020b10:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8020b14:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020b18:	9300      	str	r3, [sp, #0]
 8020b1a:	4613      	mov	r3, r2
 8020b1c:	68ba      	ldr	r2, [r7, #8]
 8020b1e:	6839      	ldr	r1, [r7, #0]
 8020b20:	f7ff f8b2 	bl	801fc88 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8020b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b28:	1d1a      	adds	r2, r3, #4
 8020b2a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020b2e:	9300      	str	r3, [sp, #0]
 8020b30:	4613      	mov	r3, r2
 8020b32:	68ba      	ldr	r2, [r7, #8]
 8020b34:	6839      	ldr	r1, [r7, #0]
 8020b36:	6838      	ldr	r0, [r7, #0]
 8020b38:	f7ff f8cd 	bl	801fcd6 <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8020b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b40:	1d1a      	adds	r2, r3, #4
 8020b42:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8020b46:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020b4a:	9300      	str	r3, [sp, #0]
 8020b4c:	4613      	mov	r3, r2
 8020b4e:	68fa      	ldr	r2, [r7, #12]
 8020b50:	6879      	ldr	r1, [r7, #4]
 8020b52:	f7ff f8c0 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 8020b56:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b5e:	68b9      	ldr	r1, [r7, #8]
 8020b60:	68b8      	ldr	r0, [r7, #8]
 8020b62:	f7ff fa2c 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8020b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b6a:	1d1a      	adds	r2, r3, #4
 8020b6c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8020b70:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020b74:	9300      	str	r3, [sp, #0]
 8020b76:	4613      	mov	r3, r2
 8020b78:	687a      	ldr	r2, [r7, #4]
 8020b7a:	68f9      	ldr	r1, [r7, #12]
 8020b7c:	f7ff f884 	bl	801fc88 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 8020b80:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8020b84:	6839      	ldr	r1, [r7, #0]
 8020b86:	6878      	ldr	r0, [r7, #4]
 8020b88:	f7ff fa35 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 8020b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020b90:	1d19      	adds	r1, r3, #4
 8020b92:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020b96:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020b9a:	9300      	str	r3, [sp, #0]
 8020b9c:	460b      	mov	r3, r1
 8020b9e:	6879      	ldr	r1, [r7, #4]
 8020ba0:	6878      	ldr	r0, [r7, #4]
 8020ba2:	f7ff f898 	bl	801fcd6 <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8020ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020baa:	1d1a      	adds	r2, r3, #4
 8020bac:	f107 0014 	add.w	r0, r7, #20
 8020bb0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020bb4:	9300      	str	r3, [sp, #0]
 8020bb6:	4613      	mov	r3, r2
 8020bb8:	687a      	ldr	r2, [r7, #4]
 8020bba:	68f9      	ldr	r1, [r7, #12]
 8020bbc:	f7ff f88b 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8020bc0:	f107 0214 	add.w	r2, r7, #20
 8020bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020bc8:	6839      	ldr	r1, [r7, #0]
 8020bca:	6838      	ldr	r0, [r7, #0]
 8020bcc:	f7ff f9f7 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 8020bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020bd4:	1d1a      	adds	r2, r3, #4
 8020bd6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020bda:	9300      	str	r3, [sp, #0]
 8020bdc:	4613      	mov	r3, r2
 8020bde:	68ba      	ldr	r2, [r7, #8]
 8020be0:	6839      	ldr	r1, [r7, #0]
 8020be2:	6838      	ldr	r0, [r7, #0]
 8020be4:	f7ff f877 	bl	801fcd6 <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 8020be8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8020bec:	f107 0314 	add.w	r3, r7, #20
 8020bf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	f7ff f9fe 	bl	801fff6 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 8020bfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020bfe:	1d1c      	adds	r4, r3, #4
 8020c00:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020c04:	f107 0114 	add.w	r1, r7, #20
 8020c08:	f107 0014 	add.w	r0, r7, #20
 8020c0c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020c10:	9300      	str	r3, [sp, #0]
 8020c12:	4623      	mov	r3, r4
 8020c14:	f7ff f85f 	bl	801fcd6 <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 8020c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020c1c:	1d1a      	adds	r2, r3, #4
 8020c1e:	f107 0114 	add.w	r1, r7, #20
 8020c22:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8020c26:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020c2a:	9300      	str	r3, [sp, #0]
 8020c2c:	4613      	mov	r3, r2
 8020c2e:	68fa      	ldr	r2, [r7, #12]
 8020c30:	f7ff f851 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 8020c34:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8020c38:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8020c3c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8020c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020c44:	f7ff f9bb 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 8020c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020c4c:	1d1a      	adds	r2, r3, #4
 8020c4e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8020c52:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8020c56:	9300      	str	r3, [sp, #0]
 8020c58:	4613      	mov	r3, r2
 8020c5a:	68ba      	ldr	r2, [r7, #8]
 8020c5c:	68b8      	ldr	r0, [r7, #8]
 8020c5e:	f7ff f83a 	bl	801fcd6 <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 8020c62:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 8020c66:	f107 0314 	add.w	r3, r7, #20
 8020c6a:	4619      	mov	r1, r3
 8020c6c:	68f8      	ldr	r0, [r7, #12]
 8020c6e:	f7fe fd7d 	bl	801f76c <mg_uecc_vli_set>
}
 8020c72:	bf00      	nop
 8020c74:	377c      	adds	r7, #124	@ 0x7c
 8020c76:	46bd      	mov	sp, r7
 8020c78:	bd90      	pop	{r4, r7, pc}

08020c7a <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 8020c7a:	b590      	push	{r4, r7, lr}
 8020c7c:	b0b1      	sub	sp, #196	@ 0xc4
 8020c7e:	af02      	add	r7, sp, #8
 8020c80:	60f8      	str	r0, [r7, #12]
 8020c82:	60b9      	str	r1, [r7, #8]
 8020c84:	607a      	str	r2, [r7, #4]
 8020c86:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 8020c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020c8c:	781b      	ldrb	r3, [r3, #0]
 8020c8e:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 8020c92:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020c96:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8020c9a:	3320      	adds	r3, #32
 8020c9c:	68b9      	ldr	r1, [r7, #8]
 8020c9e:	4618      	mov	r0, r3
 8020ca0:	f7fe fd64 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 8020ca4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020ca8:	009b      	lsls	r3, r3, #2
 8020caa:	68ba      	ldr	r2, [r7, #8]
 8020cac:	18d1      	adds	r1, r2, r3
 8020cae:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020cb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020cb6:	3320      	adds	r3, #32
 8020cb8:	4618      	mov	r0, r3
 8020cba:	f7fe fd57 	bl	801f76c <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 8020cbe:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8020cc2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020cc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8020cca:	f103 0120 	add.w	r1, r3, #32
 8020cce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8020cd2:	f103 0020 	add.w	r0, r3, #32
 8020cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020cda:	9301      	str	r3, [sp, #4]
 8020cdc:	683b      	ldr	r3, [r7, #0]
 8020cde:	9300      	str	r3, [sp, #0]
 8020ce0:	4623      	mov	r3, r4
 8020ce2:	f7ff fdf5 	bl	80208d0 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 8020ce6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8020cea:	3b02      	subs	r3, #2
 8020cec:	b29b      	uxth	r3, r3
 8020cee:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8020cf2:	e059      	b.n	8020da8 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 8020cf4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8020cf8:	4619      	mov	r1, r3
 8020cfa:	6878      	ldr	r0, [r7, #4]
 8020cfc:	f7fe fcbd 	bl	801f67a <mg_uecc_vli_testBit>
 8020d00:	4603      	mov	r3, r0
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	bf0c      	ite	eq
 8020d06:	2301      	moveq	r3, #1
 8020d08:	2300      	movne	r3, #0
 8020d0a:	b2db      	uxtb	r3, r3
 8020d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8020d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d14:	f1c3 0301 	rsb	r3, r3, #1
 8020d18:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020d1c:	015b      	lsls	r3, r3, #5
 8020d1e:	18d0      	adds	r0, r2, r3
 8020d20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d24:	f1c3 0301 	rsb	r3, r3, #1
 8020d28:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020d2c:	015b      	lsls	r3, r3, #5
 8020d2e:	18d1      	adds	r1, r2, r3
 8020d30:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d38:	015b      	lsls	r3, r3, #5
 8020d3a:	18d4      	adds	r4, r2, r3
 8020d3c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d44:	015b      	lsls	r3, r3, #5
 8020d46:	441a      	add	r2, r3
 8020d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020d4c:	9300      	str	r3, [sp, #0]
 8020d4e:	4613      	mov	r3, r2
 8020d50:	4622      	mov	r2, r4
 8020d52:	f7ff fea1 	bl	8020a98 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8020d56:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d5e:	015b      	lsls	r3, r3, #5
 8020d60:	18d0      	adds	r0, r2, r3
 8020d62:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d6a:	015b      	lsls	r3, r3, #5
 8020d6c:	18d1      	adds	r1, r2, r3
 8020d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d72:	f1c3 0301 	rsb	r3, r3, #1
 8020d76:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020d7a:	015b      	lsls	r3, r3, #5
 8020d7c:	18d4      	adds	r4, r2, r3
 8020d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020d82:	f1c3 0301 	rsb	r3, r3, #1
 8020d86:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020d8a:	015b      	lsls	r3, r3, #5
 8020d8c:	441a      	add	r2, r3
 8020d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020d92:	9300      	str	r3, [sp, #0]
 8020d94:	4613      	mov	r3, r2
 8020d96:	4622      	mov	r2, r4
 8020d98:	f7ff fde4 	bl	8020964 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 8020d9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8020da0:	3b01      	subs	r3, #1
 8020da2:	b29b      	uxth	r3, r3
 8020da4:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8020da8:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	dca1      	bgt.n	8020cf4 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 8020db0:	2100      	movs	r1, #0
 8020db2:	6878      	ldr	r0, [r7, #4]
 8020db4:	f7fe fc61 	bl	801f67a <mg_uecc_vli_testBit>
 8020db8:	4603      	mov	r3, r0
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	bf0c      	ite	eq
 8020dbe:	2301      	moveq	r3, #1
 8020dc0:	2300      	movne	r3, #0
 8020dc2:	b2db      	uxtb	r3, r3
 8020dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8020dc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020dcc:	f1c3 0301 	rsb	r3, r3, #1
 8020dd0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020dd4:	015b      	lsls	r3, r3, #5
 8020dd6:	18d0      	adds	r0, r2, r3
 8020dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020ddc:	f1c3 0301 	rsb	r3, r3, #1
 8020de0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020de4:	015b      	lsls	r3, r3, #5
 8020de6:	18d1      	adds	r1, r2, r3
 8020de8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020df0:	015b      	lsls	r3, r3, #5
 8020df2:	18d4      	adds	r4, r2, r3
 8020df4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020dfc:	015b      	lsls	r3, r3, #5
 8020dfe:	441a      	add	r2, r3
 8020e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020e04:	9300      	str	r3, [sp, #0]
 8020e06:	4613      	mov	r3, r2
 8020e08:	4622      	mov	r2, r4
 8020e0a:	f7ff fe45 	bl	8020a98 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8020e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020e12:	1d1c      	adds	r4, r3, #4
 8020e14:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020e18:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8020e1c:	f103 0120 	add.w	r1, r3, #32
 8020e20:	f107 0010 	add.w	r0, r7, #16
 8020e24:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020e28:	9300      	str	r3, [sp, #0]
 8020e2a:	4623      	mov	r3, r4
 8020e2c:	f7fe ff53 	bl	801fcd6 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 8020e30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020e34:	f1c3 0301 	rsb	r3, r3, #1
 8020e38:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020e3c:	015b      	lsls	r3, r3, #5
 8020e3e:	441a      	add	r2, r3
 8020e40:	f107 0110 	add.w	r1, r7, #16
 8020e44:	f107 0010 	add.w	r0, r7, #16
 8020e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020e4c:	f7ff f8b7 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8020e50:	f107 0110 	add.w	r1, r7, #16
 8020e54:	f107 0010 	add.w	r0, r7, #16
 8020e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020e5c:	68ba      	ldr	r2, [r7, #8]
 8020e5e:	f7ff f8ae 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 8020e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020e66:	1d1a      	adds	r2, r3, #4
 8020e68:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020e6c:	f107 0110 	add.w	r1, r7, #16
 8020e70:	f107 0010 	add.w	r0, r7, #16
 8020e74:	f7ff f907 	bl	8020086 <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 8020e78:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020e7c:	009b      	lsls	r3, r3, #2
 8020e7e:	68ba      	ldr	r2, [r7, #8]
 8020e80:	441a      	add	r2, r3
 8020e82:	f107 0110 	add.w	r1, r7, #16
 8020e86:	f107 0010 	add.w	r0, r7, #16
 8020e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020e8e:	f7ff f896 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 8020e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020e96:	f1c3 0301 	rsb	r3, r3, #1
 8020e9a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020e9e:	015b      	lsls	r3, r3, #5
 8020ea0:	441a      	add	r2, r3
 8020ea2:	f107 0110 	add.w	r1, r7, #16
 8020ea6:	f107 0010 	add.w	r0, r7, #16
 8020eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020eae:	f7ff f886 	bl	801ffbe <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8020eb2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020eba:	015b      	lsls	r3, r3, #5
 8020ebc:	18d0      	adds	r0, r2, r3
 8020ebe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020ec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020ec6:	015b      	lsls	r3, r3, #5
 8020ec8:	18d1      	adds	r1, r2, r3
 8020eca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020ece:	f1c3 0301 	rsb	r3, r3, #1
 8020ed2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8020ed6:	015b      	lsls	r3, r3, #5
 8020ed8:	18d4      	adds	r4, r2, r3
 8020eda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8020ede:	f1c3 0301 	rsb	r3, r3, #1
 8020ee2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8020ee6:	015b      	lsls	r3, r3, #5
 8020ee8:	441a      	add	r2, r3
 8020eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020eee:	9300      	str	r3, [sp, #0]
 8020ef0:	4613      	mov	r3, r2
 8020ef2:	4622      	mov	r2, r4
 8020ef4:	f7ff fd36 	bl	8020964 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8020ef8:	f107 0210 	add.w	r2, r7, #16
 8020efc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020f00:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8020f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8020f08:	f7ff fcba 	bl	8020880 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8020f0c:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020f10:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8020f14:	4619      	mov	r1, r3
 8020f16:	68f8      	ldr	r0, [r7, #12]
 8020f18:	f7fe fc28 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8020f1c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8020f20:	009b      	lsls	r3, r3, #2
 8020f22:	68fa      	ldr	r2, [r7, #12]
 8020f24:	4413      	add	r3, r2
 8020f26:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8020f2a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020f2e:	4618      	mov	r0, r3
 8020f30:	f7fe fc1c 	bl	801f76c <mg_uecc_vli_set>
}
 8020f34:	bf00      	nop
 8020f36:	37bc      	adds	r7, #188	@ 0xbc
 8020f38:	46bd      	mov	sp, r7
 8020f3a:	bd90      	pop	{r4, r7, pc}

08020f3c <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b086      	sub	sp, #24
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	60f8      	str	r0, [r7, #12]
 8020f44:	60b9      	str	r1, [r7, #8]
 8020f46:	607a      	str	r2, [r7, #4]
 8020f48:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8020f4a:	683b      	ldr	r3, [r7, #0]
 8020f4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020f50:	331f      	adds	r3, #31
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	da00      	bge.n	8020f58 <regularize_k+0x1c>
 8020f56:	331f      	adds	r3, #31
 8020f58:	115b      	asrs	r3, r3, #5
 8020f5a:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 8020f5c:	683b      	ldr	r3, [r7, #0]
 8020f5e:	885b      	ldrh	r3, [r3, #2]
 8020f60:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8020f62:	683b      	ldr	r3, [r7, #0]
 8020f64:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020f6c:	68f9      	ldr	r1, [r7, #12]
 8020f6e:	68b8      	ldr	r0, [r7, #8]
 8020f70:	f7fe fcec 	bl	801f94c <mg_uecc_vli_add>
 8020f74:	4603      	mov	r3, r0
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d10f      	bne.n	8020f9a <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8020f7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020f82:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8020f84:	429a      	cmp	r2, r3
 8020f86:	da0a      	bge.n	8020f9e <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 8020f88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020f8c:	4619      	mov	r1, r3
 8020f8e:	68b8      	ldr	r0, [r7, #8]
 8020f90:	f7fe fb73 	bl	801f67a <mg_uecc_vli_testBit>
 8020f94:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d001      	beq.n	8020f9e <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8020f9a:	2301      	movs	r3, #1
 8020f9c:	e000      	b.n	8020fa0 <regularize_k+0x64>
 8020f9e:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 8020fa0:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 8020fa2:	683b      	ldr	r3, [r7, #0]
 8020fa4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020fac:	68b9      	ldr	r1, [r7, #8]
 8020fae:	6878      	ldr	r0, [r7, #4]
 8020fb0:	f7fe fccc 	bl	801f94c <mg_uecc_vli_add>
  return carry;
 8020fb4:	693b      	ldr	r3, [r7, #16]
}
 8020fb6:	4618      	mov	r0, r3
 8020fb8:	3718      	adds	r7, #24
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	bd80      	pop	{r7, pc}
	...

08020fc0 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8020fc0:	b580      	push	{r7, lr}
 8020fc2:	b088      	sub	sp, #32
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	60f8      	str	r0, [r7, #12]
 8020fc8:	60b9      	str	r1, [r7, #8]
 8020fca:	4613      	mov	r3, r2
 8020fcc:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8020fce:	f04f 33ff 	mov.w	r3, #4294967295
 8020fd2:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8020fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020fd8:	4619      	mov	r1, r3
 8020fda:	68b8      	ldr	r0, [r7, #8]
 8020fdc:	f7fe fb8d 	bl	801f6fa <mg_uecc_vli_numBits>
 8020fe0:	4603      	mov	r3, r0
 8020fe2:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8020fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8021090 <mg_uecc_generate_random_int+0xd0>)
 8020fe6:	681b      	ldr	r3, [r3, #0]
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d101      	bne.n	8020ff0 <mg_uecc_generate_random_int+0x30>
    return 0;
 8020fec:	2300      	movs	r3, #0
 8020fee:	e04b      	b.n	8021088 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8020ff0:	2300      	movs	r3, #0
 8020ff2:	61fb      	str	r3, [r7, #28]
 8020ff4:	e044      	b.n	8021080 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 8020ff6:	4b26      	ldr	r3, [pc, #152]	@ (8021090 <mg_uecc_generate_random_int+0xd0>)
 8020ff8:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 8020ffa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8020ffe:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8021000:	4611      	mov	r1, r2
 8021002:	68f8      	ldr	r0, [r7, #12]
 8021004:	4798      	blx	r3
 8021006:	4603      	mov	r3, r0
 8021008:	2b00      	cmp	r3, #0
 802100a:	d101      	bne.n	8021010 <mg_uecc_generate_random_int+0x50>
      return 0;
 802100c:	2300      	movs	r3, #0
 802100e:	e03b      	b.n	8021088 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8021010:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8021014:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8021018:	4413      	add	r3, r2
 802101a:	009b      	lsls	r3, r3, #2
 802101c:	68fa      	ldr	r2, [r7, #12]
 802101e:	4413      	add	r3, r2
 8021020:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8021022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021026:	b29b      	uxth	r3, r3
 8021028:	015b      	lsls	r3, r3, #5
 802102a:	b29a      	uxth	r2, r3
 802102c:	8afb      	ldrh	r3, [r7, #22]
 802102e:	1ad3      	subs	r3, r2, r3
 8021030:	b29b      	uxth	r3, r3
 8021032:	b21b      	sxth	r3, r3
 8021034:	461a      	mov	r2, r3
 8021036:	69bb      	ldr	r3, [r7, #24]
 8021038:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 802103c:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8021040:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8021044:	4403      	add	r3, r0
 8021046:	009b      	lsls	r3, r3, #2
 8021048:	68f8      	ldr	r0, [r7, #12]
 802104a:	4403      	add	r3, r0
 802104c:	400a      	ands	r2, r1
 802104e:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8021050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021054:	4619      	mov	r1, r3
 8021056:	68f8      	ldr	r0, [r7, #12]
 8021058:	f7fe fae5 	bl	801f626 <mg_uecc_vli_isZero>
 802105c:	4603      	mov	r3, r0
 802105e:	2b00      	cmp	r3, #0
 8021060:	d10b      	bne.n	802107a <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 8021062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021066:	461a      	mov	r2, r3
 8021068:	68f9      	ldr	r1, [r7, #12]
 802106a:	68b8      	ldr	r0, [r7, #8]
 802106c:	f7fe fc13 	bl	801f896 <mg_uecc_vli_cmp>
 8021070:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8021072:	2b01      	cmp	r3, #1
 8021074:	d101      	bne.n	802107a <mg_uecc_generate_random_int+0xba>
      return 1;
 8021076:	2301      	movs	r3, #1
 8021078:	e006      	b.n	8021088 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 802107a:	69fb      	ldr	r3, [r7, #28]
 802107c:	3301      	adds	r3, #1
 802107e:	61fb      	str	r3, [r7, #28]
 8021080:	69fb      	ldr	r3, [r7, #28]
 8021082:	2b3f      	cmp	r3, #63	@ 0x3f
 8021084:	d9b7      	bls.n	8020ff6 <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 8021086:	2300      	movs	r3, #0
}
 8021088:	4618      	mov	r0, r3
 802108a:	3720      	adds	r7, #32
 802108c:	46bd      	mov	sp, r7
 802108e:	bd80      	pop	{r7, pc}
 8021090:	24019da0 	.word	0x24019da0

08021094 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 8021094:	b480      	push	{r7}
 8021096:	b087      	sub	sp, #28
 8021098:	af00      	add	r7, sp, #0
 802109a:	60f8      	str	r0, [r7, #12]
 802109c:	60b9      	str	r1, [r7, #8]
 802109e:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 80210a0:	2300      	movs	r3, #0
 80210a2:	617b      	str	r3, [r7, #20]
 80210a4:	e018      	b.n	80210d8 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 80210a6:	68bb      	ldr	r3, [r7, #8]
 80210a8:	1e5a      	subs	r2, r3, #1
 80210aa:	697b      	ldr	r3, [r7, #20]
 80210ac:	1ad3      	subs	r3, r2, r3
 80210ae:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 80210b0:	693b      	ldr	r3, [r7, #16]
 80210b2:	f023 0303 	bic.w	r3, r3, #3
 80210b6:	687a      	ldr	r2, [r7, #4]
 80210b8:	4413      	add	r3, r2
 80210ba:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 80210bc:	693b      	ldr	r3, [r7, #16]
 80210be:	f003 0303 	and.w	r3, r3, #3
 80210c2:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 80210c4:	fa22 f103 	lsr.w	r1, r2, r3
 80210c8:	697b      	ldr	r3, [r7, #20]
 80210ca:	68fa      	ldr	r2, [r7, #12]
 80210cc:	4413      	add	r3, r2
 80210ce:	b2ca      	uxtb	r2, r1
 80210d0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 80210d2:	697b      	ldr	r3, [r7, #20]
 80210d4:	3301      	adds	r3, #1
 80210d6:	617b      	str	r3, [r7, #20]
 80210d8:	697a      	ldr	r2, [r7, #20]
 80210da:	68bb      	ldr	r3, [r7, #8]
 80210dc:	429a      	cmp	r2, r3
 80210de:	dbe2      	blt.n	80210a6 <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 80210e0:	bf00      	nop
 80210e2:	bf00      	nop
 80210e4:	371c      	adds	r7, #28
 80210e6:	46bd      	mov	sp, r7
 80210e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ec:	4770      	bx	lr

080210ee <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 80210ee:	b580      	push	{r7, lr}
 80210f0:	b086      	sub	sp, #24
 80210f2:	af00      	add	r7, sp, #0
 80210f4:	60f8      	str	r0, [r7, #12]
 80210f6:	60b9      	str	r1, [r7, #8]
 80210f8:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	3303      	adds	r3, #3
 80210fe:	2b00      	cmp	r3, #0
 8021100:	da00      	bge.n	8021104 <mg_uecc_vli_bytesToNative+0x16>
 8021102:	3303      	adds	r3, #3
 8021104:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 8021106:	b25b      	sxtb	r3, r3
 8021108:	4619      	mov	r1, r3
 802110a:	68f8      	ldr	r0, [r7, #12]
 802110c:	f7fe fa6a 	bl	801f5e4 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8021110:	2300      	movs	r3, #0
 8021112:	617b      	str	r3, [r7, #20]
 8021114:	e01e      	b.n	8021154 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	1e5a      	subs	r2, r3, #1
 802111a:	697b      	ldr	r3, [r7, #20]
 802111c:	1ad3      	subs	r3, r2, r3
 802111e:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8021120:	693b      	ldr	r3, [r7, #16]
 8021122:	f023 0303 	bic.w	r3, r3, #3
 8021126:	68fa      	ldr	r2, [r7, #12]
 8021128:	4413      	add	r3, r2
 802112a:	6819      	ldr	r1, [r3, #0]
 802112c:	697b      	ldr	r3, [r7, #20]
 802112e:	68ba      	ldr	r2, [r7, #8]
 8021130:	4413      	add	r3, r2
 8021132:	781b      	ldrb	r3, [r3, #0]
 8021134:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 8021136:	693b      	ldr	r3, [r7, #16]
 8021138:	f003 0303 	and.w	r3, r3, #3
 802113c:	00db      	lsls	r3, r3, #3
 802113e:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8021140:	693b      	ldr	r3, [r7, #16]
 8021142:	f023 0303 	bic.w	r3, r3, #3
 8021146:	68f8      	ldr	r0, [r7, #12]
 8021148:	4403      	add	r3, r0
 802114a:	430a      	orrs	r2, r1
 802114c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	3301      	adds	r3, #1
 8021152:	617b      	str	r3, [r7, #20]
 8021154:	697a      	ldr	r2, [r7, #20]
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	429a      	cmp	r2, r3
 802115a:	dbdc      	blt.n	8021116 <mg_uecc_vli_bytesToNative+0x28>
  }
}
 802115c:	bf00      	nop
 802115e:	bf00      	nop
 8021160:	3718      	adds	r7, #24
 8021162:	46bd      	mov	sp, r7
 8021164:	bd80      	pop	{r7, pc}

08021166 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 8021166:	b580      	push	{r7, lr}
 8021168:	b08a      	sub	sp, #40	@ 0x28
 802116a:	af00      	add	r7, sp, #0
 802116c:	60f8      	str	r0, [r7, #12]
 802116e:	60b9      	str	r1, [r7, #8]
 8021170:	607a      	str	r2, [r7, #4]
 8021172:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 8021174:	683b      	ldr	r3, [r7, #0]
 8021176:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802117a:	3307      	adds	r3, #7
 802117c:	2b00      	cmp	r3, #0
 802117e:	da00      	bge.n	8021182 <bits2int+0x1c>
 8021180:	3307      	adds	r3, #7
 8021182:	10db      	asrs	r3, r3, #3
 8021184:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 8021186:	683b      	ldr	r3, [r7, #0]
 8021188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802118c:	331f      	adds	r3, #31
 802118e:	2b00      	cmp	r3, #0
 8021190:	da00      	bge.n	8021194 <bits2int+0x2e>
 8021192:	331f      	adds	r3, #31
 8021194:	115b      	asrs	r3, r3, #5
 8021196:	b25b      	sxtb	r3, r3
 8021198:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 802119a:	687a      	ldr	r2, [r7, #4]
 802119c:	69fb      	ldr	r3, [r7, #28]
 802119e:	429a      	cmp	r2, r3
 80211a0:	d901      	bls.n	80211a6 <bits2int+0x40>
    bits_size = num_n_bytes;
 80211a2:	69fb      	ldr	r3, [r7, #28]
 80211a4:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 80211a6:	69bb      	ldr	r3, [r7, #24]
 80211a8:	b25b      	sxtb	r3, r3
 80211aa:	4619      	mov	r1, r3
 80211ac:	68f8      	ldr	r0, [r7, #12]
 80211ae:	f7fe fa19 	bl	801f5e4 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	461a      	mov	r2, r3
 80211b6:	68b9      	ldr	r1, [r7, #8]
 80211b8:	68f8      	ldr	r0, [r7, #12]
 80211ba:	f7ff ff98 	bl	80210ee <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	00db      	lsls	r3, r3, #3
 80211c2:	683a      	ldr	r2, [r7, #0]
 80211c4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80211c8:	4293      	cmp	r3, r2
 80211ca:	d93a      	bls.n	8021242 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	00db      	lsls	r3, r3, #3
 80211d0:	683a      	ldr	r2, [r7, #0]
 80211d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80211d6:	1a9b      	subs	r3, r3, r2
 80211d8:	617b      	str	r3, [r7, #20]
  carry = 0;
 80211da:	2300      	movs	r3, #0
 80211dc:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 80211de:	69bb      	ldr	r3, [r7, #24]
 80211e0:	009b      	lsls	r3, r3, #2
 80211e2:	68fa      	ldr	r2, [r7, #12]
 80211e4:	4413      	add	r3, r2
 80211e6:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 80211e8:	e010      	b.n	802120c <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 80211ea:	6a3b      	ldr	r3, [r7, #32]
 80211ec:	681b      	ldr	r3, [r3, #0]
 80211ee:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 80211f0:	693a      	ldr	r2, [r7, #16]
 80211f2:	697b      	ldr	r3, [r7, #20]
 80211f4:	40da      	lsrs	r2, r3
 80211f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80211f8:	431a      	orrs	r2, r3
 80211fa:	6a3b      	ldr	r3, [r7, #32]
 80211fc:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 80211fe:	697b      	ldr	r3, [r7, #20]
 8021200:	f1c3 0320 	rsb	r3, r3, #32
 8021204:	693a      	ldr	r2, [r7, #16]
 8021206:	fa02 f303 	lsl.w	r3, r2, r3
 802120a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 802120c:	6a3b      	ldr	r3, [r7, #32]
 802120e:	1f1a      	subs	r2, r3, #4
 8021210:	623a      	str	r2, [r7, #32]
 8021212:	68fa      	ldr	r2, [r7, #12]
 8021214:	429a      	cmp	r2, r3
 8021216:	d3e8      	bcc.n	80211ea <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 8021218:	683b      	ldr	r3, [r7, #0]
 802121a:	3324      	adds	r3, #36	@ 0x24
 802121c:	69ba      	ldr	r2, [r7, #24]
 802121e:	b252      	sxtb	r2, r2
 8021220:	68f9      	ldr	r1, [r7, #12]
 8021222:	4618      	mov	r0, r3
 8021224:	f7fe fac9 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8021228:	4603      	mov	r3, r0
 802122a:	2b01      	cmp	r3, #1
 802122c:	d00a      	beq.n	8021244 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 802122e:	683b      	ldr	r3, [r7, #0]
 8021230:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8021234:	69bb      	ldr	r3, [r7, #24]
 8021236:	b25b      	sxtb	r3, r3
 8021238:	68f9      	ldr	r1, [r7, #12]
 802123a:	68f8      	ldr	r0, [r7, #12]
 802123c:	f7fe fbd0 	bl	801f9e0 <mg_uecc_vli_sub>
 8021240:	e000      	b.n	8021244 <bits2int+0xde>
    return;
 8021242:	bf00      	nop
  }
}
 8021244:	3728      	adds	r7, #40	@ 0x28
 8021246:	46bd      	mov	sp, r7
 8021248:	bd80      	pop	{r7, pc}
	...

0802124c <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 802124c:	b590      	push	{r4, r7, lr}
 802124e:	b0ad      	sub	sp, #180	@ 0xb4
 8021250:	af02      	add	r7, sp, #8
 8021252:	60f8      	str	r0, [r7, #12]
 8021254:	60b9      	str	r1, [r7, #8]
 8021256:	607a      	str	r2, [r7, #4]
 8021258:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 802125a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 802125e:	657b      	str	r3, [r7, #84]	@ 0x54
 8021260:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8021264:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 8021266:	2300      	movs	r3, #0
 8021268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 802126c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021270:	781b      	ldrb	r3, [r3, #0]
 8021272:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8021276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802127a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802127e:	331f      	adds	r3, #31
 8021280:	2b00      	cmp	r3, #0
 8021282:	da00      	bge.n	8021286 <mg_uecc_sign_with_k_internal+0x3a>
 8021284:	331f      	adds	r3, #31
 8021286:	115b      	asrs	r3, r3, #5
 8021288:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 802128c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021290:	885b      	ldrh	r3, [r3, #2]
 8021292:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 8021296:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 802129a:	4619      	mov	r1, r3
 802129c:	6838      	ldr	r0, [r7, #0]
 802129e:	f7fe f9c2 	bl	801f626 <mg_uecc_vli_isZero>
 80212a2:	4603      	mov	r3, r0
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d10b      	bne.n	80212c0 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 80212a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80212ac:	3324      	adds	r3, #36	@ 0x24
 80212ae:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80212b2:	6839      	ldr	r1, [r7, #0]
 80212b4:	4618      	mov	r0, r3
 80212b6:	f7fe faee 	bl	801f896 <mg_uecc_vli_cmp>
 80212ba:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 80212bc:	2b01      	cmp	r3, #1
 80212be:	d001      	beq.n	80212c4 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 80212c0:	2300      	movs	r3, #0
 80212c2:	e128      	b.n	8021516 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 80212c4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80212c8:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80212cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80212d0:	6838      	ldr	r0, [r7, #0]
 80212d2:	f7ff fe33 	bl	8020f3c <regularize_k>
 80212d6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 80212da:	4b91      	ldr	r3, [pc, #580]	@ (8021520 <mg_uecc_sign_with_k_internal+0x2d4>)
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d01c      	beq.n	802131c <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 80212e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80212e6:	009b      	lsls	r3, r3, #2
 80212e8:	33a8      	adds	r3, #168	@ 0xa8
 80212ea:	443b      	add	r3, r7
 80212ec:	f853 0c54 	ldr.w	r0, [r3, #-84]
 80212f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80212f4:	3304      	adds	r3, #4
 80212f6:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 80212fa:	4619      	mov	r1, r3
 80212fc:	f7ff fe60 	bl	8020fc0 <mg_uecc_generate_random_int>
 8021300:	4603      	mov	r3, r0
 8021302:	2b00      	cmp	r3, #0
 8021304:	d101      	bne.n	802130a <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 8021306:	2300      	movs	r3, #0
 8021308:	e105      	b.n	8021516 <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 802130a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 802130e:	009b      	lsls	r3, r3, #2
 8021310:	33a8      	adds	r3, #168	@ 0xa8
 8021312:	443b      	add	r3, r7
 8021314:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8021318:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 802131c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021320:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8021324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8021328:	2b00      	cmp	r3, #0
 802132a:	bf0c      	ite	eq
 802132c:	2301      	moveq	r3, #1
 802132e:	2300      	movne	r3, #0
 8021330:	b2db      	uxtb	r3, r3
 8021332:	009b      	lsls	r3, r3, #2
 8021334:	33a8      	adds	r3, #168	@ 0xa8
 8021336:	443b      	add	r3, r7
 8021338:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 802133c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8021340:	3301      	adds	r3, #1
 8021342:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 8021344:	b21b      	sxth	r3, r3
 8021346:	f107 0014 	add.w	r0, r7, #20
 802134a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 802134e:	9201      	str	r2, [sp, #4]
 8021350:	9300      	str	r3, [sp, #0]
 8021352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8021356:	4622      	mov	r2, r4
 8021358:	f7ff fc8f 	bl	8020c7a <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 802135c:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 8021360:	f107 0314 	add.w	r3, r7, #20
 8021364:	4611      	mov	r1, r2
 8021366:	4618      	mov	r0, r3
 8021368:	f7fe f95d 	bl	801f626 <mg_uecc_vli_isZero>
 802136c:	4603      	mov	r3, r0
 802136e:	2b00      	cmp	r3, #0
 8021370:	d001      	beq.n	8021376 <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 8021372:	2300      	movs	r3, #0
 8021374:	e0cf      	b.n	8021516 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 8021376:	4b6a      	ldr	r3, [pc, #424]	@ (8021520 <mg_uecc_sign_with_k_internal+0x2d4>)
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	2b00      	cmp	r3, #0
 802137c:	d10a      	bne.n	8021394 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 802137e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 8021382:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8021386:	4611      	mov	r1, r2
 8021388:	4618      	mov	r0, r3
 802138a:	f7fe f92b 	bl	801f5e4 <mg_uecc_vli_clear>
    tmp[0] = 1;
 802138e:	2301      	movs	r3, #1
 8021390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8021392:	e00f      	b.n	80213b4 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 8021394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021398:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 802139c:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80213a0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80213a4:	4618      	mov	r0, r3
 80213a6:	f7ff fe0b 	bl	8020fc0 <mg_uecc_generate_random_int>
 80213aa:	4603      	mov	r3, r0
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d101      	bne.n	80213b4 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 80213b0:	2300      	movs	r3, #0
 80213b2:	e0b0      	b.n	8021516 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 80213b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80213b8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80213bc:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80213c0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80213c4:	9300      	str	r3, [sp, #0]
 80213c6:	460b      	mov	r3, r1
 80213c8:	6839      	ldr	r1, [r7, #0]
 80213ca:	6838      	ldr	r0, [r7, #0]
 80213cc:	f7fe fddc 	bl	801ff88 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 80213d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80213d4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80213d8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80213dc:	6839      	ldr	r1, [r7, #0]
 80213de:	6838      	ldr	r0, [r7, #0]
 80213e0:	f7fe fe51 	bl	8020086 <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 80213e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80213e8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80213ec:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80213f0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80213f4:	9300      	str	r3, [sp, #0]
 80213f6:	460b      	mov	r3, r1
 80213f8:	6839      	ldr	r1, [r7, #0]
 80213fa:	6838      	ldr	r0, [r7, #0]
 80213fc:	f7fe fdc4 	bl	801ff88 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 8021400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021404:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021408:	4619      	mov	r1, r3
 802140a:	f107 0314 	add.w	r3, r7, #20
 802140e:	461a      	mov	r2, r3
 8021410:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8021414:	f7ff fe3e 	bl	8021094 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 8021418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802141c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021420:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 8021422:	2b00      	cmp	r3, #0
 8021424:	da00      	bge.n	8021428 <mg_uecc_sign_with_k_internal+0x1dc>
 8021426:	3307      	adds	r3, #7
 8021428:	10db      	asrs	r3, r3, #3
 802142a:	461a      	mov	r2, r3
 802142c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8021430:	68f9      	ldr	r1, [r7, #12]
 8021432:	4618      	mov	r0, r3
 8021434:	f7ff fe5b 	bl	80210ee <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 8021438:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 802143c:	3b01      	subs	r3, #1
 802143e:	009b      	lsls	r3, r3, #2
 8021440:	33a8      	adds	r3, #168	@ 0xa8
 8021442:	443b      	add	r3, r7
 8021444:	2200      	movs	r2, #0
 8021446:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 802144a:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 802144e:	f107 0114 	add.w	r1, r7, #20
 8021452:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8021456:	4618      	mov	r0, r3
 8021458:	f7fe f988 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 802145c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021460:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8021464:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8021468:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 802146c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8021470:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8021474:	9300      	str	r3, [sp, #0]
 8021476:	4623      	mov	r3, r4
 8021478:	f7fe fd86 	bl	801ff88 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 802147c:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8021480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021484:	687a      	ldr	r2, [r7, #4]
 8021486:	68b9      	ldr	r1, [r7, #8]
 8021488:	f7ff fe6d 	bl	8021166 <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 802148c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021490:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8021494:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8021498:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 802149c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80214a0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80214a4:	9300      	str	r3, [sp, #0]
 80214a6:	4623      	mov	r3, r4
 80214a8:	f7fe fbee 	bl	801fc88 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 80214ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80214b0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80214b4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80214b8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80214bc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80214c0:	9300      	str	r3, [sp, #0]
 80214c2:	4613      	mov	r3, r2
 80214c4:	683a      	ldr	r2, [r7, #0]
 80214c6:	f7fe fd5f 	bl	801ff88 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 80214ca:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 80214ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80214d2:	4611      	mov	r1, r2
 80214d4:	4618      	mov	r0, r3
 80214d6:	f7fe f910 	bl	801f6fa <mg_uecc_vli_numBits>
 80214da:	4603      	mov	r3, r0
 80214dc:	461a      	mov	r2, r3
 80214de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80214e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80214e6:	00db      	lsls	r3, r3, #3
 80214e8:	429a      	cmp	r2, r3
 80214ea:	dd01      	ble.n	80214f0 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 80214ec:	2300      	movs	r3, #0
 80214ee:	e012      	b.n	8021516 <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 80214f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80214f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80214f8:	461a      	mov	r2, r3
 80214fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80214fe:	1898      	adds	r0, r3, r2
 8021500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8021504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021508:	4619      	mov	r1, r3
 802150a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 802150e:	461a      	mov	r2, r3
 8021510:	f7ff fdc0 	bl	8021094 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 8021514:	2301      	movs	r3, #1
}
 8021516:	4618      	mov	r0, r3
 8021518:	37ac      	adds	r7, #172	@ 0xac
 802151a:	46bd      	mov	sp, r7
 802151c:	bd90      	pop	{r4, r7, pc}
 802151e:	bf00      	nop
 8021520:	24019da0 	.word	0x24019da0

08021524 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 8021524:	b580      	push	{r7, lr}
 8021526:	b084      	sub	sp, #16
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
 802152c:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	695a      	ldr	r2, [r3, #20]
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	691b      	ldr	r3, [r3, #16]
 8021536:	005b      	lsls	r3, r3, #1
 8021538:	4413      	add	r3, r2
 802153a:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 802153c:	2300      	movs	r3, #0
 802153e:	60fb      	str	r3, [r7, #12]
 8021540:	e00d      	b.n	802155e <HMAC_init+0x3a>
 8021542:	683a      	ldr	r2, [r7, #0]
 8021544:	68fb      	ldr	r3, [r7, #12]
 8021546:	4413      	add	r3, r2
 8021548:	781a      	ldrb	r2, [r3, #0]
 802154a:	68b9      	ldr	r1, [r7, #8]
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	440b      	add	r3, r1
 8021550:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 8021554:	b2d2      	uxtb	r2, r2
 8021556:	701a      	strb	r2, [r3, #0]
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	3301      	adds	r3, #1
 802155c:	60fb      	str	r3, [r7, #12]
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	691b      	ldr	r3, [r3, #16]
 8021562:	68fa      	ldr	r2, [r7, #12]
 8021564:	429a      	cmp	r2, r3
 8021566:	d3ec      	bcc.n	8021542 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 8021568:	e007      	b.n	802157a <HMAC_init+0x56>
 802156a:	68ba      	ldr	r2, [r7, #8]
 802156c:	68fb      	ldr	r3, [r7, #12]
 802156e:	4413      	add	r3, r2
 8021570:	2236      	movs	r2, #54	@ 0x36
 8021572:	701a      	strb	r2, [r3, #0]
 8021574:	68fb      	ldr	r3, [r7, #12]
 8021576:	3301      	adds	r3, #1
 8021578:	60fb      	str	r3, [r7, #12]
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	68db      	ldr	r3, [r3, #12]
 802157e:	68fa      	ldr	r2, [r7, #12]
 8021580:	429a      	cmp	r2, r3
 8021582:	d3f2      	bcc.n	802156a <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	6878      	ldr	r0, [r7, #4]
 802158a:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	685b      	ldr	r3, [r3, #4]
 8021590:	687a      	ldr	r2, [r7, #4]
 8021592:	68d2      	ldr	r2, [r2, #12]
 8021594:	68b9      	ldr	r1, [r7, #8]
 8021596:	6878      	ldr	r0, [r7, #4]
 8021598:	4798      	blx	r3
}
 802159a:	bf00      	nop
 802159c:	3710      	adds	r7, #16
 802159e:	46bd      	mov	sp, r7
 80215a0:	bd80      	pop	{r7, pc}

080215a2 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 80215a2:	b580      	push	{r7, lr}
 80215a4:	b084      	sub	sp, #16
 80215a6:	af00      	add	r7, sp, #0
 80215a8:	60f8      	str	r0, [r7, #12]
 80215aa:	60b9      	str	r1, [r7, #8]
 80215ac:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 80215ae:	68fb      	ldr	r3, [r7, #12]
 80215b0:	685b      	ldr	r3, [r3, #4]
 80215b2:	687a      	ldr	r2, [r7, #4]
 80215b4:	68b9      	ldr	r1, [r7, #8]
 80215b6:	68f8      	ldr	r0, [r7, #12]
 80215b8:	4798      	blx	r3
}
 80215ba:	bf00      	nop
 80215bc:	3710      	adds	r7, #16
 80215be:	46bd      	mov	sp, r7
 80215c0:	bd80      	pop	{r7, pc}

080215c2 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 80215c2:	b580      	push	{r7, lr}
 80215c4:	b086      	sub	sp, #24
 80215c6:	af00      	add	r7, sp, #0
 80215c8:	60f8      	str	r0, [r7, #12]
 80215ca:	60b9      	str	r1, [r7, #8]
 80215cc:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	695a      	ldr	r2, [r3, #20]
 80215d2:	68fb      	ldr	r3, [r7, #12]
 80215d4:	691b      	ldr	r3, [r3, #16]
 80215d6:	005b      	lsls	r3, r3, #1
 80215d8:	4413      	add	r3, r2
 80215da:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 80215dc:	2300      	movs	r3, #0
 80215de:	617b      	str	r3, [r7, #20]
 80215e0:	e00d      	b.n	80215fe <HMAC_finish+0x3c>
 80215e2:	68ba      	ldr	r2, [r7, #8]
 80215e4:	697b      	ldr	r3, [r7, #20]
 80215e6:	4413      	add	r3, r2
 80215e8:	781a      	ldrb	r2, [r3, #0]
 80215ea:	6939      	ldr	r1, [r7, #16]
 80215ec:	697b      	ldr	r3, [r7, #20]
 80215ee:	440b      	add	r3, r1
 80215f0:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 80215f4:	b2d2      	uxtb	r2, r2
 80215f6:	701a      	strb	r2, [r3, #0]
 80215f8:	697b      	ldr	r3, [r7, #20]
 80215fa:	3301      	adds	r3, #1
 80215fc:	617b      	str	r3, [r7, #20]
 80215fe:	68fb      	ldr	r3, [r7, #12]
 8021600:	691b      	ldr	r3, [r3, #16]
 8021602:	697a      	ldr	r2, [r7, #20]
 8021604:	429a      	cmp	r2, r3
 8021606:	d3ec      	bcc.n	80215e2 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 8021608:	e007      	b.n	802161a <HMAC_finish+0x58>
 802160a:	693a      	ldr	r2, [r7, #16]
 802160c:	697b      	ldr	r3, [r7, #20]
 802160e:	4413      	add	r3, r2
 8021610:	225c      	movs	r2, #92	@ 0x5c
 8021612:	701a      	strb	r2, [r3, #0]
 8021614:	697b      	ldr	r3, [r7, #20]
 8021616:	3301      	adds	r3, #1
 8021618:	617b      	str	r3, [r7, #20]
 802161a:	68fb      	ldr	r3, [r7, #12]
 802161c:	68db      	ldr	r3, [r3, #12]
 802161e:	697a      	ldr	r2, [r7, #20]
 8021620:	429a      	cmp	r2, r3
 8021622:	d3f2      	bcc.n	802160a <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 8021624:	68fb      	ldr	r3, [r7, #12]
 8021626:	689b      	ldr	r3, [r3, #8]
 8021628:	6879      	ldr	r1, [r7, #4]
 802162a:	68f8      	ldr	r0, [r7, #12]
 802162c:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 802162e:	68fb      	ldr	r3, [r7, #12]
 8021630:	681b      	ldr	r3, [r3, #0]
 8021632:	68f8      	ldr	r0, [r7, #12]
 8021634:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 8021636:	68fb      	ldr	r3, [r7, #12]
 8021638:	685b      	ldr	r3, [r3, #4]
 802163a:	68fa      	ldr	r2, [r7, #12]
 802163c:	68d2      	ldr	r2, [r2, #12]
 802163e:	6939      	ldr	r1, [r7, #16]
 8021640:	68f8      	ldr	r0, [r7, #12]
 8021642:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 8021644:	68fb      	ldr	r3, [r7, #12]
 8021646:	685b      	ldr	r3, [r3, #4]
 8021648:	68fa      	ldr	r2, [r7, #12]
 802164a:	6912      	ldr	r2, [r2, #16]
 802164c:	6879      	ldr	r1, [r7, #4]
 802164e:	68f8      	ldr	r0, [r7, #12]
 8021650:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	689b      	ldr	r3, [r3, #8]
 8021656:	6879      	ldr	r1, [r7, #4]
 8021658:	68f8      	ldr	r0, [r7, #12]
 802165a:	4798      	blx	r3
}
 802165c:	bf00      	nop
 802165e:	3718      	adds	r7, #24
 8021660:	46bd      	mov	sp, r7
 8021662:	bd80      	pop	{r7, pc}

08021664 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 8021664:	b580      	push	{r7, lr}
 8021666:	b084      	sub	sp, #16
 8021668:	af00      	add	r7, sp, #0
 802166a:	60f8      	str	r0, [r7, #12]
 802166c:	60b9      	str	r1, [r7, #8]
 802166e:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 8021670:	68b9      	ldr	r1, [r7, #8]
 8021672:	68f8      	ldr	r0, [r7, #12]
 8021674:	f7ff ff56 	bl	8021524 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 8021678:	68fb      	ldr	r3, [r7, #12]
 802167a:	691b      	ldr	r3, [r3, #16]
 802167c:	461a      	mov	r2, r3
 802167e:	6879      	ldr	r1, [r7, #4]
 8021680:	68f8      	ldr	r0, [r7, #12]
 8021682:	f7ff ff8e 	bl	80215a2 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 8021686:	687a      	ldr	r2, [r7, #4]
 8021688:	68b9      	ldr	r1, [r7, #8]
 802168a:	68f8      	ldr	r0, [r7, #12]
 802168c:	f7ff ff99 	bl	80215c2 <HMAC_finish>
}
 8021690:	bf00      	nop
 8021692:	3710      	adds	r7, #16
 8021694:	46bd      	mov	sp, r7
 8021696:	bd80      	pop	{r7, pc}

08021698 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 8021698:	b580      	push	{r7, lr}
 802169a:	b096      	sub	sp, #88	@ 0x58
 802169c:	af02      	add	r7, sp, #8
 802169e:	60f8      	str	r0, [r7, #12]
 80216a0:	60b9      	str	r1, [r7, #8]
 80216a2:	607a      	str	r2, [r7, #4]
 80216a4:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 80216a6:	683b      	ldr	r3, [r7, #0]
 80216a8:	695b      	ldr	r3, [r3, #20]
 80216aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 80216ac:	683b      	ldr	r3, [r7, #0]
 80216ae:	691b      	ldr	r3, [r3, #16]
 80216b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80216b2:	4413      	add	r3, r2
 80216b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 80216b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80216b8:	785b      	ldrb	r3, [r3, #1]
 80216ba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80216be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80216c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80216c4:	331f      	adds	r3, #31
 80216c6:	2b00      	cmp	r3, #0
 80216c8:	da00      	bge.n	80216cc <mg_uecc_sign_deterministic+0x34>
 80216ca:	331f      	adds	r3, #31
 80216cc:	115b      	asrs	r3, r3, #5
 80216ce:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 80216d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80216d4:	885b      	ldrh	r3, [r3, #2]
 80216d6:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 80216d8:	2300      	movs	r3, #0
 80216da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80216dc:	e00c      	b.n	80216f8 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 80216de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80216e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80216e2:	4413      	add	r3, r2
 80216e4:	2201      	movs	r2, #1
 80216e6:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 80216e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80216ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80216ec:	4413      	add	r3, r2
 80216ee:	2200      	movs	r2, #0
 80216f0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 80216f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80216f4:	3301      	adds	r3, #1
 80216f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80216f8:	683b      	ldr	r3, [r7, #0]
 80216fa:	691b      	ldr	r3, [r3, #16]
 80216fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80216fe:	429a      	cmp	r2, r3
 8021700:	d3ed      	bcc.n	80216de <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 8021702:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021704:	6838      	ldr	r0, [r7, #0]
 8021706:	f7ff ff0d 	bl	8021524 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 802170a:	683b      	ldr	r3, [r7, #0]
 802170c:	691b      	ldr	r3, [r3, #16]
 802170e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021710:	4413      	add	r3, r2
 8021712:	2200      	movs	r2, #0
 8021714:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 8021716:	683b      	ldr	r3, [r7, #0]
 8021718:	691b      	ldr	r3, [r3, #16]
 802171a:	3301      	adds	r3, #1
 802171c:	461a      	mov	r2, r3
 802171e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021720:	6838      	ldr	r0, [r7, #0]
 8021722:	f7ff ff3e 	bl	80215a2 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8021726:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 802172a:	461a      	mov	r2, r3
 802172c:	68f9      	ldr	r1, [r7, #12]
 802172e:	6838      	ldr	r0, [r7, #0]
 8021730:	f7ff ff37 	bl	80215a2 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8021734:	687a      	ldr	r2, [r7, #4]
 8021736:	68b9      	ldr	r1, [r7, #8]
 8021738:	6838      	ldr	r0, [r7, #0]
 802173a:	f7ff ff32 	bl	80215a2 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 802173e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021742:	6838      	ldr	r0, [r7, #0]
 8021744:	f7ff ff3d 	bl	80215c2 <HMAC_finish>

  update_V(hash_context, K, V);
 8021748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802174a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802174c:	6838      	ldr	r0, [r7, #0]
 802174e:	f7ff ff89 	bl	8021664 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 8021752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021754:	6838      	ldr	r0, [r7, #0]
 8021756:	f7ff fee5 	bl	8021524 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 802175a:	683b      	ldr	r3, [r7, #0]
 802175c:	691b      	ldr	r3, [r3, #16]
 802175e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021760:	4413      	add	r3, r2
 8021762:	2201      	movs	r2, #1
 8021764:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 8021766:	683b      	ldr	r3, [r7, #0]
 8021768:	691b      	ldr	r3, [r3, #16]
 802176a:	3301      	adds	r3, #1
 802176c:	461a      	mov	r2, r3
 802176e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021770:	6838      	ldr	r0, [r7, #0]
 8021772:	f7ff ff16 	bl	80215a2 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 8021776:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 802177a:	461a      	mov	r2, r3
 802177c:	68f9      	ldr	r1, [r7, #12]
 802177e:	6838      	ldr	r0, [r7, #0]
 8021780:	f7ff ff0f 	bl	80215a2 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 8021784:	687a      	ldr	r2, [r7, #4]
 8021786:	68b9      	ldr	r1, [r7, #8]
 8021788:	6838      	ldr	r0, [r7, #0]
 802178a:	f7ff ff0a 	bl	80215a2 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 802178e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021790:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021792:	6838      	ldr	r0, [r7, #0]
 8021794:	f7ff ff15 	bl	80215c2 <HMAC_finish>

  update_V(hash_context, K, V);
 8021798:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802179a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802179c:	6838      	ldr	r0, [r7, #0]
 802179e:	f7ff ff61 	bl	8021664 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 80217a2:	2300      	movs	r3, #0
 80217a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80217a6:	e084      	b.n	80218b2 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 80217a8:	f107 0310 	add.w	r3, r7, #16
 80217ac:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 80217ae:	2300      	movs	r3, #0
 80217b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 80217b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80217b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80217b8:	6838      	ldr	r0, [r7, #0]
 80217ba:	f7ff ff53 	bl	8021664 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 80217be:	2300      	movs	r3, #0
 80217c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80217c2:	e017      	b.n	80217f4 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 80217c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80217c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80217c8:	441a      	add	r2, r3
 80217ca:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 80217ce:	b2cb      	uxtb	r3, r1
 80217d0:	3301      	adds	r3, #1
 80217d2:	b2db      	uxtb	r3, r3
 80217d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80217d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80217da:	440b      	add	r3, r1
 80217dc:	7812      	ldrb	r2, [r2, #0]
 80217de:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 80217e0:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 80217e4:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 80217e8:	009b      	lsls	r3, r3, #2
 80217ea:	429a      	cmp	r2, r3
 80217ec:	da08      	bge.n	8021800 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 80217ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80217f0:	3301      	adds	r3, #1
 80217f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80217f4:	683b      	ldr	r3, [r7, #0]
 80217f6:	691b      	ldr	r3, [r3, #16]
 80217f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80217fa:	429a      	cmp	r2, r3
 80217fc:	d3e2      	bcc.n	80217c4 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 80217fe:	e7d9      	b.n	80217b4 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 8021800:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 8021802:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8021806:	015a      	lsls	r2, r3, #5
 8021808:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 802180c:	429a      	cmp	r2, r3
 802180e:	dd20      	ble.n	8021852 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8021810:	f04f 33ff 	mov.w	r3, #4294967295
 8021814:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 8021816:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 802181a:	3b01      	subs	r3, #1
 802181c:	009b      	lsls	r3, r3, #2
 802181e:	3350      	adds	r3, #80	@ 0x50
 8021820:	443b      	add	r3, r7
 8021822:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 8021826:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 802182a:	b29b      	uxth	r3, r3
 802182c:	015b      	lsls	r3, r3, #5
 802182e:	b29a      	uxth	r2, r3
 8021830:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8021832:	1ad3      	subs	r3, r2, r3
 8021834:	b29b      	uxth	r3, r3
 8021836:	b21b      	sxth	r3, r3
 8021838:	461a      	mov	r2, r3
          mask >>
 802183a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802183c:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 8021840:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8021844:	3b01      	subs	r3, #1
 8021846:	400a      	ands	r2, r1
 8021848:	009b      	lsls	r3, r3, #2
 802184a:	3350      	adds	r3, #80	@ 0x50
 802184c:	443b      	add	r3, r7
 802184e:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 8021852:	f107 0210 	add.w	r2, r7, #16
 8021856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021858:	9301      	str	r3, [sp, #4]
 802185a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802185c:	9300      	str	r3, [sp, #0]
 802185e:	4613      	mov	r3, r2
 8021860:	687a      	ldr	r2, [r7, #4]
 8021862:	68b9      	ldr	r1, [r7, #8]
 8021864:	68f8      	ldr	r0, [r7, #12]
 8021866:	f7ff fcf1 	bl	802124c <mg_uecc_sign_with_k_internal>
 802186a:	4603      	mov	r3, r0
 802186c:	2b00      	cmp	r3, #0
 802186e:	d001      	beq.n	8021874 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 8021870:	2301      	movs	r3, #1
 8021872:	e023      	b.n	80218bc <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 8021874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8021876:	6838      	ldr	r0, [r7, #0]
 8021878:	f7ff fe54 	bl	8021524 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 802187c:	683b      	ldr	r3, [r7, #0]
 802187e:	691b      	ldr	r3, [r3, #16]
 8021880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021882:	4413      	add	r3, r2
 8021884:	2200      	movs	r2, #0
 8021886:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 8021888:	683b      	ldr	r3, [r7, #0]
 802188a:	691b      	ldr	r3, [r3, #16]
 802188c:	3301      	adds	r3, #1
 802188e:	461a      	mov	r2, r3
 8021890:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021892:	6838      	ldr	r0, [r7, #0]
 8021894:	f7ff fe85 	bl	80215a2 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 8021898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802189a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802189c:	6838      	ldr	r0, [r7, #0]
 802189e:	f7ff fe90 	bl	80215c2 <HMAC_finish>

    update_V(hash_context, K, V);
 80218a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80218a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80218a6:	6838      	ldr	r0, [r7, #0]
 80218a8:	f7ff fedc 	bl	8021664 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 80218ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80218ae:	3301      	adds	r3, #1
 80218b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80218b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80218b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80218b6:	f67f af77 	bls.w	80217a8 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 80218ba:	2300      	movs	r3, #0
}
 80218bc:	4618      	mov	r0, r3
 80218be:	3750      	adds	r7, #80	@ 0x50
 80218c0:	46bd      	mov	sp, r7
 80218c2:	bd80      	pop	{r7, pc}

080218c4 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 80218c4:	b480      	push	{r7}
 80218c6:	b083      	sub	sp, #12
 80218c8:	af00      	add	r7, sp, #0
 80218ca:	4603      	mov	r3, r0
 80218cc:	460a      	mov	r2, r1
 80218ce:	80fb      	strh	r3, [r7, #6]
 80218d0:	4613      	mov	r3, r2
 80218d2:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 80218d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80218d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80218dc:	4293      	cmp	r3, r2
 80218de:	bfb8      	it	lt
 80218e0:	4613      	movlt	r3, r2
 80218e2:	b21b      	sxth	r3, r3
}
 80218e4:	4618      	mov	r0, r3
 80218e6:	370c      	adds	r7, #12
 80218e8:	46bd      	mov	sp, r7
 80218ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ee:	4770      	bx	lr

080218f0 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 80218f0:	b590      	push	{r4, r7, lr}
 80218f2:	b0ff      	sub	sp, #508	@ 0x1fc
 80218f4:	af02      	add	r7, sp, #8
 80218f6:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 80218fa:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 80218fe:	6020      	str	r0, [r4, #0]
 8021900:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8021904:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 8021908:	6001      	str	r1, [r0, #0]
 802190a:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 802190e:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 8021912:	600a      	str	r2, [r1, #0]
 8021914:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 8021918:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 802191c:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 802191e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021922:	781b      	ldrb	r3, [r3, #0]
 8021924:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8021928:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802192c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021930:	331f      	adds	r3, #31
 8021932:	2b00      	cmp	r3, #0
 8021934:	da00      	bge.n	8021938 <mg_uecc_verify+0x48>
 8021936:	331f      	adds	r3, #31
 8021938:	115b      	asrs	r3, r3, #5
 802193a:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 802193e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021942:	3b01      	subs	r3, #1
 8021944:	009b      	lsls	r3, r3, #2
 8021946:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 802194a:	443b      	add	r3, r7
 802194c:	2200      	movs	r2, #0
 802194e:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 8021952:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021956:	1e5a      	subs	r2, r3, #1
 8021958:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 802195c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8021960:	2100      	movs	r1, #0
 8021962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 8021966:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 802196a:	1e5a      	subs	r2, r3, #1
 802196c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021970:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8021974:	2100      	movs	r1, #0
 8021976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 802197a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802197e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021982:	461a      	mov	r2, r3
 8021984:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021988:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 802198c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8021990:	6819      	ldr	r1, [r3, #0]
 8021992:	f7ff fbac 	bl	80210ee <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 8021996:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802199a:	009b      	lsls	r3, r3, #2
 802199c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80219a0:	18d0      	adds	r0, r2, r3
 80219a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80219a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80219aa:	461a      	mov	r2, r3
 80219ac:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80219b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80219b4:	681b      	ldr	r3, [r3, #0]
 80219b6:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 80219b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80219bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 80219c0:	461a      	mov	r2, r3
 80219c2:	f7ff fb94 	bl	80210ee <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 80219c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80219ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80219ce:	461a      	mov	r2, r3
 80219d0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80219d4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80219d8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80219dc:	6819      	ldr	r1, [r3, #0]
 80219de:	f7ff fb86 	bl	80210ee <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 80219e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80219e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80219ea:	461a      	mov	r2, r3
 80219ec:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80219f0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80219f4:	681b      	ldr	r3, [r3, #0]
 80219f6:	1899      	adds	r1, r3, r2
 80219f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80219fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8021a00:	461a      	mov	r2, r3
 8021a02:	f107 0310 	add.w	r3, r7, #16
 8021a06:	4618      	mov	r0, r3
 8021a08:	f7ff fb71 	bl	80210ee <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8021a0c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021a10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8021a14:	4611      	mov	r1, r2
 8021a16:	4618      	mov	r0, r3
 8021a18:	f7fd fe05 	bl	801f626 <mg_uecc_vli_isZero>
 8021a1c:	4603      	mov	r3, r0
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d10a      	bne.n	8021a38 <mg_uecc_verify+0x148>
 8021a22:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021a26:	f107 0310 	add.w	r3, r7, #16
 8021a2a:	4611      	mov	r1, r2
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	f7fd fdfa 	bl	801f626 <mg_uecc_vli_isZero>
 8021a32:	4603      	mov	r3, r0
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d001      	beq.n	8021a3c <mg_uecc_verify+0x14c>
    return 0;
 8021a38:	2300      	movs	r3, #0
 8021a3a:	e220      	b.n	8021e7e <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8021a3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021a40:	3324      	adds	r3, #36	@ 0x24
 8021a42:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8021a46:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	f7fd feb5 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8021a50:	4603      	mov	r3, r0
 8021a52:	2b01      	cmp	r3, #1
 8021a54:	d10c      	bne.n	8021a70 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 8021a56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021a5a:	3324      	adds	r3, #36	@ 0x24
 8021a5c:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8021a60:	f107 0110 	add.w	r1, r7, #16
 8021a64:	4618      	mov	r0, r3
 8021a66:	f7fd fea8 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8021a6a:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8021a6c:	2b01      	cmp	r3, #1
 8021a6e:	d001      	beq.n	8021a74 <mg_uecc_verify+0x184>
    return 0;
 8021a70:	2300      	movs	r3, #0
 8021a72:	e204      	b.n	8021e7e <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 8021a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021a78:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8021a7c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021a80:	f107 0110 	add.w	r1, r7, #16
 8021a84:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021a88:	f7fe fafd 	bl	8020086 <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8021a8c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021a90:	3b01      	subs	r3, #1
 8021a92:	009b      	lsls	r3, r3, #2
 8021a94:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8021a98:	443b      	add	r3, r7
 8021a9a:	2200      	movs	r2, #0
 8021a9c:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 8021aa0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021aa4:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8021aa8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021aac:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 8021ab0:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8021ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021ab8:	6812      	ldr	r2, [r2, #0]
 8021aba:	6809      	ldr	r1, [r1, #0]
 8021abc:	f7ff fb53 	bl	8021166 <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 8021ac0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021ac4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8021ac8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021acc:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 8021ad0:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 8021ad4:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021ad8:	9300      	str	r3, [sp, #0]
 8021ada:	4623      	mov	r3, r4
 8021adc:	f7fe fa54 	bl	801ff88 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 8021ae0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021ae4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8021ae8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021aec:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8021af0:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8021af4:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021af8:	9300      	str	r3, [sp, #0]
 8021afa:	4623      	mov	r3, r4
 8021afc:	f7fe fa44 	bl	801ff88 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 8021b00:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021b04:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8021b08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8021b0c:	4618      	mov	r0, r3
 8021b0e:	f7fd fe2d 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 8021b12:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021b16:	009b      	lsls	r3, r3, #2
 8021b18:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8021b1c:	18d0      	adds	r0, r2, r3
 8021b1e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021b22:	009b      	lsls	r3, r3, #2
 8021b24:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8021b28:	4413      	add	r3, r2
 8021b2a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021b2e:	4619      	mov	r1, r3
 8021b30:	f7fd fe1c 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 8021b34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021b38:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8021b3c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021b40:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8021b44:	4618      	mov	r0, r3
 8021b46:	f7fd fe11 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8021b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021b4e:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8021b52:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021b56:	009b      	lsls	r3, r3, #2
 8021b58:	18d1      	adds	r1, r2, r3
 8021b5a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021b5e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8021b62:	4618      	mov	r0, r3
 8021b64:	f7fd fe02 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8021b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021b6c:	1d1c      	adds	r4, r3, #4
 8021b6e:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8021b72:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8021b76:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021b7a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021b7e:	9300      	str	r3, [sp, #0]
 8021b80:	4623      	mov	r3, r4
 8021b82:	f7fe f8a8 	bl	801fcd6 <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 8021b86:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021b8a:	009b      	lsls	r3, r3, #2
 8021b8c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8021b90:	18d4      	adds	r4, r2, r3
 8021b92:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8021b96:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8021b9a:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8021b9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021ba2:	9300      	str	r3, [sp, #0]
 8021ba4:	4623      	mov	r3, r4
 8021ba6:	f7fe fedd 	bl	8020964 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 8021baa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021bae:	1d1a      	adds	r2, r3, #4
 8021bb0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021bb4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8021bb8:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021bbc:	f7fe fa63 	bl	8020086 <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 8021bc0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021bc4:	009b      	lsls	r3, r3, #2
 8021bc6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8021bca:	18d1      	adds	r1, r2, r3
 8021bcc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021bd0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8021bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021bd8:	f7fe fe52 	bl	8020880 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 8021bdc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021be0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8021be4:	2200      	movs	r2, #0
 8021be6:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 8021be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021bec:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8021bf0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021bf4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8021bf8:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8021bfa:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021bfe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8021c02:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8021c06:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8021c08:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021c0c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8021c10:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8021c14:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 8021c16:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8021c1a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8021c1e:	4611      	mov	r1, r2
 8021c20:	4618      	mov	r0, r3
 8021c22:	f7fd fd6a 	bl	801f6fa <mg_uecc_vli_numBits>
 8021c26:	4603      	mov	r3, r0
 8021c28:	461c      	mov	r4, r3
 8021c2a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8021c2e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8021c32:	4611      	mov	r1, r2
 8021c34:	4618      	mov	r0, r3
 8021c36:	f7fd fd60 	bl	801f6fa <mg_uecc_vli_numBits>
 8021c3a:	4603      	mov	r3, r0
 8021c3c:	4619      	mov	r1, r3
 8021c3e:	4620      	mov	r0, r4
 8021c40:	f7ff fe40 	bl	80218c4 <smax>
 8021c44:	4603      	mov	r3, r0
 8021c46:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8021c4a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8021c4e:	3b01      	subs	r3, #1
 8021c50:	b29b      	uxth	r3, r3
 8021c52:	b21a      	sxth	r2, r3
 8021c54:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8021c58:	4611      	mov	r1, r2
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	f7fd fd0d 	bl	801f67a <mg_uecc_vli_testBit>
 8021c60:	4603      	mov	r3, r0
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	bf14      	ite	ne
 8021c66:	2301      	movne	r3, #1
 8021c68:	2300      	moveq	r3, #0
 8021c6a:	b2db      	uxtb	r3, r3
 8021c6c:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8021c6e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8021c72:	3b01      	subs	r3, #1
 8021c74:	b29b      	uxth	r3, r3
 8021c76:	b21a      	sxth	r2, r3
 8021c78:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8021c7c:	4611      	mov	r1, r2
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f7fd fcfb 	bl	801f67a <mg_uecc_vli_testBit>
 8021c84:	4603      	mov	r3, r0
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d001      	beq.n	8021c8e <mg_uecc_verify+0x39e>
 8021c8a:	2302      	movs	r3, #2
 8021c8c:	e000      	b.n	8021c90 <mg_uecc_verify+0x3a0>
 8021c8e:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8021c90:	ea43 0204 	orr.w	r2, r3, r4
  point =
 8021c94:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021c98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8021c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021ca0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 8021ca4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021ca8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8021cac:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8021cb0:	4618      	mov	r0, r3
 8021cb2:	f7fd fd5b 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 8021cb6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021cba:	009b      	lsls	r3, r3, #2
 8021cbc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8021cc0:	18d1      	adds	r1, r2, r3
 8021cc2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021cc6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8021cca:	4618      	mov	r0, r3
 8021ccc:	f7fd fd4e 	bl	801f76c <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 8021cd0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021cd4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8021cd8:	4611      	mov	r1, r2
 8021cda:	4618      	mov	r0, r3
 8021cdc:	f7fd fc82 	bl	801f5e4 <mg_uecc_vli_clear>
  z[0] = 1;
 8021ce0:	2301      	movs	r3, #1
 8021ce2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 8021ce6:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8021cea:	3b02      	subs	r3, #2
 8021cec:	b29b      	uxth	r3, r3
 8021cee:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8021cf2:	e087      	b.n	8021e04 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 8021cf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021cf8:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8021cfc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021d00:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8021d04:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8021d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021d0c:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8021d0e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8021d12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8021d16:	4611      	mov	r1, r2
 8021d18:	4618      	mov	r0, r3
 8021d1a:	f7fd fcae 	bl	801f67a <mg_uecc_vli_testBit>
 8021d1e:	4603      	mov	r3, r0
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	bf14      	ite	ne
 8021d24:	2301      	movne	r3, #1
 8021d26:	2300      	moveq	r3, #0
 8021d28:	b2db      	uxtb	r3, r3
 8021d2a:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8021d2c:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8021d30:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8021d34:	4611      	mov	r1, r2
 8021d36:	4618      	mov	r0, r3
 8021d38:	f7fd fc9f 	bl	801f67a <mg_uecc_vli_testBit>
 8021d3c:	4603      	mov	r3, r0
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	d001      	beq.n	8021d46 <mg_uecc_verify+0x456>
 8021d42:	2302      	movs	r3, #2
 8021d44:	e000      	b.n	8021d48 <mg_uecc_verify+0x458>
 8021d46:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8021d48:	4323      	orrs	r3, r4
 8021d4a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8021d4e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8021d52:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8021d56:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8021d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021d5e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 8021d62:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	d046      	beq.n	8021df8 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8021d6a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021d6e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8021d72:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8021d76:	4618      	mov	r0, r3
 8021d78:	f7fd fcf8 	bl	801f76c <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8021d7c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021d80:	009b      	lsls	r3, r3, #2
 8021d82:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8021d86:	18d1      	adds	r1, r2, r3
 8021d88:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021d8c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8021d90:	4618      	mov	r0, r3
 8021d92:	f7fd fceb 	bl	801f76c <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 8021d96:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021d9a:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8021d9e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8021da2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021da6:	f7fe fd6b 	bl	8020880 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 8021daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021dae:	1d1c      	adds	r4, r3, #4
 8021db0:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8021db4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8021db8:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 8021dbc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021dc0:	9300      	str	r3, [sp, #0]
 8021dc2:	4623      	mov	r3, r4
 8021dc4:	f7fd ff87 	bl	801fcd6 <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 8021dc8:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8021dcc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8021dd0:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8021dd4:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8021dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021ddc:	9300      	str	r3, [sp, #0]
 8021dde:	4623      	mov	r3, r4
 8021de0:	f7fe fdc0 	bl	8020964 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 8021de4:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8021de8:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8021dec:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021df0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021df4:	f7fe f8e3 	bl	801ffbe <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8021df8:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8021dfc:	3b01      	subs	r3, #1
 8021dfe:	b29b      	uxth	r3, r3
 8021e00:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 8021e04:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	f6bf af73 	bge.w	8021cf4 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8021e0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021e12:	1d1a      	adds	r2, r3, #4
 8021e14:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8021e18:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8021e1c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8021e20:	f7fe f931 	bl	8020086 <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 8021e24:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8021e28:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8021e2c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8021e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021e34:	f7fe fd24 	bl	8020880 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8021e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021e3c:	3324      	adds	r3, #36	@ 0x24
 8021e3e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8021e42:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8021e46:	4618      	mov	r0, r3
 8021e48:	f7fd fcb7 	bl	801f7ba <mg_uecc_vli_cmp_unsafe>
 8021e4c:	4603      	mov	r3, r0
 8021e4e:	2b01      	cmp	r3, #1
 8021e50:	d00b      	beq.n	8021e6a <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 8021e52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8021e56:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8021e5a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8021e5e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8021e62:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8021e66:	f7fd fdbb 	bl	801f9e0 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8021e6a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8021e6e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8021e72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8021e76:	4618      	mov	r0, r3
 8021e78:	f7fd fcdb 	bl	801f832 <mg_uecc_vli_equal>
 8021e7c:	4603      	mov	r3, r0
}
 8021e7e:	4618      	mov	r0, r3
 8021e80:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 8021e84:	46bd      	mov	sp, r7
 8021e86:	bd90      	pop	{r4, r7, pc}

08021e88 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 8021e88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021e8c:	b08f      	sub	sp, #60	@ 0x3c
 8021e8e:	af00      	add	r7, sp, #0
 8021e90:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8021e92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8021e94:	627a      	str	r2, [r7, #36]	@ 0x24
 8021e96:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 8021e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e9a:	2200      	movs	r2, #0
 8021e9c:	469a      	mov	sl, r3
 8021e9e:	4693      	mov	fp, r2
 8021ea0:	6a3b      	ldr	r3, [r7, #32]
 8021ea2:	2200      	movs	r2, #0
 8021ea4:	61bb      	str	r3, [r7, #24]
 8021ea6:	61fa      	str	r2, [r7, #28]
 8021ea8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8021eac:	4603      	mov	r3, r0
 8021eae:	fb03 f20b 	mul.w	r2, r3, fp
 8021eb2:	460b      	mov	r3, r1
 8021eb4:	fb0a f303 	mul.w	r3, sl, r3
 8021eb8:	4413      	add	r3, r2
 8021eba:	4602      	mov	r2, r0
 8021ebc:	fbaa 4502 	umull	r4, r5, sl, r2
 8021ec0:	442b      	add	r3, r5
 8021ec2:	461d      	mov	r5, r3
 8021ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ec6:	2200      	movs	r2, #0
 8021ec8:	613b      	str	r3, [r7, #16]
 8021eca:	617a      	str	r2, [r7, #20]
 8021ecc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8021ed0:	460b      	mov	r3, r1
 8021ed2:	eb14 0803 	adds.w	r8, r4, r3
 8021ed6:	4613      	mov	r3, r2
 8021ed8:	eb45 0903 	adc.w	r9, r5, r3
 8021edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021ede:	681b      	ldr	r3, [r3, #0]
 8021ee0:	2200      	movs	r2, #0
 8021ee2:	60bb      	str	r3, [r7, #8]
 8021ee4:	60fa      	str	r2, [r7, #12]
 8021ee6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021eea:	460b      	mov	r3, r1
 8021eec:	eb18 0303 	adds.w	r3, r8, r3
 8021ef0:	603b      	str	r3, [r7, #0]
 8021ef2:	4613      	mov	r3, r2
 8021ef4:	eb49 0303 	adc.w	r3, r9, r3
 8021ef8:	607b      	str	r3, [r7, #4]
 8021efa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021efe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 8021f02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8021f06:	f04f 0200 	mov.w	r2, #0
 8021f0a:	f04f 0300 	mov.w	r3, #0
 8021f0e:	000a      	movs	r2, r1
 8021f10:	2300      	movs	r3, #0
 8021f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f14:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 8021f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8021f18:	4618      	mov	r0, r3
 8021f1a:	373c      	adds	r7, #60	@ 0x3c
 8021f1c:	46bd      	mov	sp, r7
 8021f1e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021f22:	4770      	bx	lr

08021f24 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 8021f24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021f28:	b08b      	sub	sp, #44	@ 0x2c
 8021f2a:	af00      	add	r7, sp, #0
 8021f2c:	61f8      	str	r0, [r7, #28]
 8021f2e:	61b9      	str	r1, [r7, #24]
 8021f30:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 8021f32:	69fb      	ldr	r3, [r7, #28]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	2200      	movs	r2, #0
 8021f38:	60bb      	str	r3, [r7, #8]
 8021f3a:	60fa      	str	r2, [r7, #12]
 8021f3c:	69bb      	ldr	r3, [r7, #24]
 8021f3e:	2200      	movs	r2, #0
 8021f40:	469a      	mov	sl, r3
 8021f42:	4693      	mov	fp, r2
 8021f44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021f48:	460b      	mov	r3, r1
 8021f4a:	eb13 040a 	adds.w	r4, r3, sl
 8021f4e:	4613      	mov	r3, r2
 8021f50:	eb43 050b 	adc.w	r5, r3, fp
 8021f54:	697b      	ldr	r3, [r7, #20]
 8021f56:	2200      	movs	r2, #0
 8021f58:	4698      	mov	r8, r3
 8021f5a:	4691      	mov	r9, r2
 8021f5c:	eb14 0308 	adds.w	r3, r4, r8
 8021f60:	603b      	str	r3, [r7, #0]
 8021f62:	eb45 0309 	adc.w	r3, r5, r9
 8021f66:	607b      	str	r3, [r7, #4]
 8021f68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021f6c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8021f70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021f74:	f04f 0200 	mov.w	r2, #0
 8021f78:	f04f 0300 	mov.w	r3, #0
 8021f7c:	000a      	movs	r2, r1
 8021f7e:	2300      	movs	r3, #0
 8021f80:	69fb      	ldr	r3, [r7, #28]
 8021f82:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8021f84:	6a3b      	ldr	r3, [r7, #32]
}
 8021f86:	4618      	mov	r0, r3
 8021f88:	372c      	adds	r7, #44	@ 0x2c
 8021f8a:	46bd      	mov	sp, r7
 8021f8c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8021f90:	4770      	bx	lr

08021f92 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 8021f92:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8021f96:	b085      	sub	sp, #20
 8021f98:	af00      	add	r7, sp, #0
 8021f9a:	6078      	str	r0, [r7, #4]
 8021f9c:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 8021f9e:	6879      	ldr	r1, [r7, #4]
 8021fa0:	6809      	ldr	r1, [r1, #0]
 8021fa2:	2000      	movs	r0, #0
 8021fa4:	460c      	mov	r4, r1
 8021fa6:	4605      	mov	r5, r0
 8021fa8:	6839      	ldr	r1, [r7, #0]
 8021faa:	2000      	movs	r0, #0
 8021fac:	460a      	mov	r2, r1
 8021fae:	4603      	mov	r3, r0
 8021fb0:	eb14 0802 	adds.w	r8, r4, r2
 8021fb4:	eb45 0903 	adc.w	r9, r5, r3
 8021fb8:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 8021fbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021fc0:	f04f 0200 	mov.w	r2, #0
 8021fc4:	f04f 0300 	mov.w	r3, #0
 8021fc8:	000a      	movs	r2, r1
 8021fca:	2300      	movs	r3, #0
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 8021fd0:	68bb      	ldr	r3, [r7, #8]
}
 8021fd2:	4618      	mov	r0, r3
 8021fd4:	3714      	adds	r7, #20
 8021fd6:	46bd      	mov	sp, r7
 8021fd8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8021fdc:	4770      	bx	lr

08021fde <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 8021fde:	b590      	push	{r4, r7, lr}
 8021fe0:	b085      	sub	sp, #20
 8021fe2:	af00      	add	r7, sp, #0
 8021fe4:	6078      	str	r0, [r7, #4]
 8021fe6:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	331c      	adds	r3, #28
 8021fec:	681b      	ldr	r3, [r3, #0]
 8021fee:	0fda      	lsrs	r2, r3, #31
 8021ff0:	683b      	ldr	r3, [r7, #0]
 8021ff2:	005b      	lsls	r3, r3, #1
 8021ff4:	4313      	orrs	r3, r2
 8021ff6:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8021ff8:	687b      	ldr	r3, [r7, #4]
 8021ffa:	331c      	adds	r3, #28
 8021ffc:	681a      	ldr	r2, [r3, #0]
 8021ffe:	687b      	ldr	r3, [r7, #4]
 8022000:	331c      	adds	r3, #28
 8022002:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8022006:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8022008:	683a      	ldr	r2, [r7, #0]
 802200a:	4613      	mov	r3, r2
 802200c:	00db      	lsls	r3, r3, #3
 802200e:	4413      	add	r3, r2
 8022010:	005b      	lsls	r3, r3, #1
 8022012:	4413      	add	r3, r2
 8022014:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 8022016:	2300      	movs	r3, #0
 8022018:	60fb      	str	r3, [r7, #12]
 802201a:	e012      	b.n	8022042 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 802201c:	68fb      	ldr	r3, [r7, #12]
 802201e:	009b      	lsls	r3, r3, #2
 8022020:	687a      	ldr	r2, [r7, #4]
 8022022:	4413      	add	r3, r2
 8022024:	6819      	ldr	r1, [r3, #0]
 8022026:	68fb      	ldr	r3, [r7, #12]
 8022028:	009b      	lsls	r3, r3, #2
 802202a:	687a      	ldr	r2, [r7, #4]
 802202c:	18d4      	adds	r4, r2, r3
 802202e:	f107 0308 	add.w	r3, r7, #8
 8022032:	4618      	mov	r0, r3
 8022034:	f7ff ffad 	bl	8021f92 <adc0>
 8022038:	4603      	mov	r3, r0
 802203a:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 802203c:	68fb      	ldr	r3, [r7, #12]
 802203e:	3301      	adds	r3, #1
 8022040:	60fb      	str	r3, [r7, #12]
 8022042:	68fb      	ldr	r3, [r7, #12]
 8022044:	2b07      	cmp	r3, #7
 8022046:	d9e9      	bls.n	802201c <propagate+0x3e>
  }
}
 8022048:	bf00      	nop
 802204a:	bf00      	nop
 802204c:	3714      	adds	r7, #20
 802204e:	46bd      	mov	sp, r7
 8022050:	bd90      	pop	{r4, r7, pc}

08022052 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 8022052:	b590      	push	{r4, r7, lr}
 8022054:	b087      	sub	sp, #28
 8022056:	af00      	add	r7, sp, #0
 8022058:	60f8      	str	r0, [r7, #12]
 802205a:	60b9      	str	r1, [r7, #8]
 802205c:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 802205e:	2300      	movs	r3, #0
 8022060:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 8022062:	2300      	movs	r3, #0
 8022064:	617b      	str	r3, [r7, #20]
 8022066:	e018      	b.n	802209a <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8022068:	697b      	ldr	r3, [r7, #20]
 802206a:	009b      	lsls	r3, r3, #2
 802206c:	68ba      	ldr	r2, [r7, #8]
 802206e:	4413      	add	r3, r2
 8022070:	6819      	ldr	r1, [r3, #0]
 8022072:	697b      	ldr	r3, [r7, #20]
 8022074:	009b      	lsls	r3, r3, #2
 8022076:	687a      	ldr	r2, [r7, #4]
 8022078:	4413      	add	r3, r2
 802207a:	6818      	ldr	r0, [r3, #0]
 802207c:	697b      	ldr	r3, [r7, #20]
 802207e:	009b      	lsls	r3, r3, #2
 8022080:	68fa      	ldr	r2, [r7, #12]
 8022082:	18d4      	adds	r4, r2, r3
 8022084:	f107 0310 	add.w	r3, r7, #16
 8022088:	4602      	mov	r2, r0
 802208a:	4618      	mov	r0, r3
 802208c:	f7ff ff4a 	bl	8021f24 <adc>
 8022090:	4603      	mov	r3, r0
 8022092:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8022094:	697b      	ldr	r3, [r7, #20]
 8022096:	3301      	adds	r3, #1
 8022098:	617b      	str	r3, [r7, #20]
 802209a:	697b      	ldr	r3, [r7, #20]
 802209c:	2b07      	cmp	r3, #7
 802209e:	d9e3      	bls.n	8022068 <add+0x16>
  }
  propagate(out, carry);
 80220a0:	693b      	ldr	r3, [r7, #16]
 80220a2:	4619      	mov	r1, r3
 80220a4:	68f8      	ldr	r0, [r7, #12]
 80220a6:	f7ff ff9a 	bl	8021fde <propagate>
}
 80220aa:	bf00      	nop
 80220ac:	371c      	adds	r7, #28
 80220ae:	46bd      	mov	sp, r7
 80220b0:	bd90      	pop	{r4, r7, pc}

080220b2 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 80220b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80220b6:	b08a      	sub	sp, #40	@ 0x28
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	6178      	str	r0, [r7, #20]
 80220bc:	6139      	str	r1, [r7, #16]
 80220be:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 80220c0:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 80220c4:	f04f 33ff 	mov.w	r3, #4294967295
 80220c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80220cc:	2300      	movs	r3, #0
 80220ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80220d0:	e032      	b.n	8022138 <sub+0x86>
    carry = carry + a[i] - b[i];
 80220d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220d4:	009b      	lsls	r3, r3, #2
 80220d6:	693a      	ldr	r2, [r7, #16]
 80220d8:	4413      	add	r3, r2
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	2200      	movs	r2, #0
 80220de:	4698      	mov	r8, r3
 80220e0:	4691      	mov	r9, r2
 80220e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80220e6:	eb18 0402 	adds.w	r4, r8, r2
 80220ea:	eb49 0503 	adc.w	r5, r9, r3
 80220ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220f0:	009b      	lsls	r3, r3, #2
 80220f2:	68fa      	ldr	r2, [r7, #12]
 80220f4:	4413      	add	r3, r2
 80220f6:	681b      	ldr	r3, [r3, #0]
 80220f8:	2200      	movs	r2, #0
 80220fa:	469a      	mov	sl, r3
 80220fc:	4693      	mov	fp, r2
 80220fe:	ebb4 030a 	subs.w	r3, r4, sl
 8022102:	603b      	str	r3, [r7, #0]
 8022104:	eb65 030b 	sbc.w	r3, r5, fp
 8022108:	607b      	str	r3, [r7, #4]
 802210a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802210e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 8022112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022114:	009b      	lsls	r3, r3, #2
 8022116:	697a      	ldr	r2, [r7, #20]
 8022118:	4413      	add	r3, r2
 802211a:	69ba      	ldr	r2, [r7, #24]
 802211c:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 802211e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022122:	f04f 0200 	mov.w	r2, #0
 8022126:	f04f 0300 	mov.w	r3, #0
 802212a:	000a      	movs	r2, r1
 802212c:	17cb      	asrs	r3, r1, #31
 802212e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 8022132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022134:	3301      	adds	r3, #1
 8022136:	627b      	str	r3, [r7, #36]	@ 0x24
 8022138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802213a:	2b07      	cmp	r3, #7
 802213c:	d9c9      	bls.n	80220d2 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 802213e:	69bb      	ldr	r3, [r7, #24]
 8022140:	3301      	adds	r3, #1
 8022142:	4619      	mov	r1, r3
 8022144:	6978      	ldr	r0, [r7, #20]
 8022146:	f7ff ff4a 	bl	8021fde <propagate>
}
 802214a:	bf00      	nop
 802214c:	3728      	adds	r7, #40	@ 0x28
 802214e:	46bd      	mov	sp, r7
 8022150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08022154 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 8022154:	b5b0      	push	{r4, r5, r7, lr}
 8022156:	b09a      	sub	sp, #104	@ 0x68
 8022158:	af00      	add	r7, sp, #0
 802215a:	60f8      	str	r0, [r7, #12]
 802215c:	60b9      	str	r1, [r7, #8]
 802215e:	607a      	str	r2, [r7, #4]
 8022160:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 8022162:	f107 031c 	add.w	r3, r7, #28
 8022166:	2240      	movs	r2, #64	@ 0x40
 8022168:	2100      	movs	r1, #0
 802216a:	4618      	mov	r0, r3
 802216c:	f006 fb18 	bl	80287a0 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 8022170:	2300      	movs	r3, #0
 8022172:	667b      	str	r3, [r7, #100]	@ 0x64
 8022174:	e03a      	b.n	80221ec <mul+0x98>
    limb_t mand = b[i];
 8022176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022178:	009b      	lsls	r3, r3, #2
 802217a:	687a      	ldr	r2, [r7, #4]
 802217c:	4413      	add	r3, r2
 802217e:	681b      	ldr	r3, [r3, #0]
 8022180:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 8022182:	2300      	movs	r3, #0
 8022184:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 8022186:	2300      	movs	r3, #0
 8022188:	663b      	str	r3, [r7, #96]	@ 0x60
 802218a:	e020      	b.n	80221ce <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 802218c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802218e:	009b      	lsls	r3, r3, #2
 8022190:	68ba      	ldr	r2, [r7, #8]
 8022192:	4413      	add	r3, r2
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 8022198:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802219a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802219c:	4413      	add	r3, r2
 802219e:	009b      	lsls	r3, r3, #2
 80221a0:	3368      	adds	r3, #104	@ 0x68
 80221a2:	443b      	add	r3, r7
 80221a4:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 80221a8:	697d      	ldr	r5, [r7, #20]
 80221aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80221ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80221ae:	18d4      	adds	r4, r2, r3
 80221b0:	f107 0018 	add.w	r0, r7, #24
 80221b4:	462b      	mov	r3, r5
 80221b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80221b8:	f7ff fe66 	bl	8021e88 <umaal>
 80221bc:	4602      	mov	r2, r0
 80221be:	00a3      	lsls	r3, r4, #2
 80221c0:	3368      	adds	r3, #104	@ 0x68
 80221c2:	443b      	add	r3, r7
 80221c4:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 80221c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80221ca:	3301      	adds	r3, #1
 80221cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80221ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80221d0:	2b07      	cmp	r3, #7
 80221d2:	d9db      	bls.n	802218c <mul+0x38>
    }
    accum[i + j] = carry2;
 80221d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80221d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80221d8:	4413      	add	r3, r2
 80221da:	69ba      	ldr	r2, [r7, #24]
 80221dc:	009b      	lsls	r3, r3, #2
 80221de:	3368      	adds	r3, #104	@ 0x68
 80221e0:	443b      	add	r3, r7
 80221e2:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 80221e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80221e8:	3301      	adds	r3, #1
 80221ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80221ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80221ee:	683b      	ldr	r3, [r7, #0]
 80221f0:	429a      	cmp	r2, r3
 80221f2:	d3c0      	bcc.n	8022176 <mul+0x22>
  }

  carry2 = 0;
 80221f4:	2300      	movs	r3, #0
 80221f6:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 80221f8:	2300      	movs	r3, #0
 80221fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80221fc:	e01b      	b.n	8022236 <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 80221fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8022200:	009b      	lsls	r3, r3, #2
 8022202:	3368      	adds	r3, #104	@ 0x68
 8022204:	443b      	add	r3, r7
 8022206:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 802220a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802220c:	3308      	adds	r3, #8
 802220e:	009b      	lsls	r3, r3, #2
 8022210:	3368      	adds	r3, #104	@ 0x68
 8022212:	443b      	add	r3, r7
 8022214:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8022218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802221a:	009b      	lsls	r3, r3, #2
 802221c:	68fa      	ldr	r2, [r7, #12]
 802221e:	18d4      	adds	r4, r2, r3
 8022220:	f107 0018 	add.w	r0, r7, #24
 8022224:	462b      	mov	r3, r5
 8022226:	2226      	movs	r2, #38	@ 0x26
 8022228:	f7ff fe2e 	bl	8021e88 <umaal>
 802222c:	4603      	mov	r3, r0
 802222e:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8022230:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8022232:	3301      	adds	r3, #1
 8022234:	663b      	str	r3, [r7, #96]	@ 0x60
 8022236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8022238:	2b07      	cmp	r3, #7
 802223a:	d9e0      	bls.n	80221fe <mul+0xaa>
  }
  propagate(out, carry2);
 802223c:	69bb      	ldr	r3, [r7, #24]
 802223e:	4619      	mov	r1, r3
 8022240:	68f8      	ldr	r0, [r7, #12]
 8022242:	f7ff fecc 	bl	8021fde <propagate>
}
 8022246:	bf00      	nop
 8022248:	3768      	adds	r7, #104	@ 0x68
 802224a:	46bd      	mov	sp, r7
 802224c:	bdb0      	pop	{r4, r5, r7, pc}

0802224e <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 802224e:	b580      	push	{r7, lr}
 8022250:	b082      	sub	sp, #8
 8022252:	af00      	add	r7, sp, #0
 8022254:	6078      	str	r0, [r7, #4]
 8022256:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 8022258:	2308      	movs	r3, #8
 802225a:	683a      	ldr	r2, [r7, #0]
 802225c:	6839      	ldr	r1, [r7, #0]
 802225e:	6878      	ldr	r0, [r7, #4]
 8022260:	f7ff ff78 	bl	8022154 <mul>
}
 8022264:	bf00      	nop
 8022266:	3708      	adds	r7, #8
 8022268:	46bd      	mov	sp, r7
 802226a:	bd80      	pop	{r7, pc}

0802226c <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 802226c:	b580      	push	{r7, lr}
 802226e:	b082      	sub	sp, #8
 8022270:	af00      	add	r7, sp, #0
 8022272:	6078      	str	r0, [r7, #4]
 8022274:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 8022276:	2308      	movs	r3, #8
 8022278:	687a      	ldr	r2, [r7, #4]
 802227a:	6839      	ldr	r1, [r7, #0]
 802227c:	6878      	ldr	r0, [r7, #4]
 802227e:	f7ff ff69 	bl	8022154 <mul>
}
 8022282:	bf00      	nop
 8022284:	3708      	adds	r7, #8
 8022286:	46bd      	mov	sp, r7
 8022288:	bd80      	pop	{r7, pc}

0802228a <sqr1>:
static void sqr1(mg_fe a) {
 802228a:	b580      	push	{r7, lr}
 802228c:	b082      	sub	sp, #8
 802228e:	af00      	add	r7, sp, #0
 8022290:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 8022292:	6879      	ldr	r1, [r7, #4]
 8022294:	6878      	ldr	r0, [r7, #4]
 8022296:	f7ff ffe9 	bl	802226c <mul1>
}
 802229a:	bf00      	nop
 802229c:	3708      	adds	r7, #8
 802229e:	46bd      	mov	sp, r7
 80222a0:	bd80      	pop	{r7, pc}

080222a2 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 80222a2:	b480      	push	{r7}
 80222a4:	b087      	sub	sp, #28
 80222a6:	af00      	add	r7, sp, #0
 80222a8:	60f8      	str	r0, [r7, #12]
 80222aa:	60b9      	str	r1, [r7, #8]
 80222ac:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 80222ae:	2300      	movs	r3, #0
 80222b0:	617b      	str	r3, [r7, #20]
 80222b2:	e028      	b.n	8022306 <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 80222b4:	697b      	ldr	r3, [r7, #20]
 80222b6:	009b      	lsls	r3, r3, #2
 80222b8:	68fa      	ldr	r2, [r7, #12]
 80222ba:	4413      	add	r3, r2
 80222bc:	681a      	ldr	r2, [r3, #0]
 80222be:	697b      	ldr	r3, [r7, #20]
 80222c0:	009b      	lsls	r3, r3, #2
 80222c2:	68b9      	ldr	r1, [r7, #8]
 80222c4:	440b      	add	r3, r1
 80222c6:	681b      	ldr	r3, [r3, #0]
 80222c8:	4053      	eors	r3, r2
 80222ca:	687a      	ldr	r2, [r7, #4]
 80222cc:	4013      	ands	r3, r2
 80222ce:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 80222d0:	697b      	ldr	r3, [r7, #20]
 80222d2:	009b      	lsls	r3, r3, #2
 80222d4:	68fa      	ldr	r2, [r7, #12]
 80222d6:	4413      	add	r3, r2
 80222d8:	6819      	ldr	r1, [r3, #0]
 80222da:	697b      	ldr	r3, [r7, #20]
 80222dc:	009b      	lsls	r3, r3, #2
 80222de:	68fa      	ldr	r2, [r7, #12]
 80222e0:	4413      	add	r3, r2
 80222e2:	693a      	ldr	r2, [r7, #16]
 80222e4:	404a      	eors	r2, r1
 80222e6:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 80222e8:	697b      	ldr	r3, [r7, #20]
 80222ea:	009b      	lsls	r3, r3, #2
 80222ec:	68ba      	ldr	r2, [r7, #8]
 80222ee:	4413      	add	r3, r2
 80222f0:	6819      	ldr	r1, [r3, #0]
 80222f2:	697b      	ldr	r3, [r7, #20]
 80222f4:	009b      	lsls	r3, r3, #2
 80222f6:	68ba      	ldr	r2, [r7, #8]
 80222f8:	4413      	add	r3, r2
 80222fa:	693a      	ldr	r2, [r7, #16]
 80222fc:	404a      	eors	r2, r1
 80222fe:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8022300:	697b      	ldr	r3, [r7, #20]
 8022302:	3301      	adds	r3, #1
 8022304:	617b      	str	r3, [r7, #20]
 8022306:	697b      	ldr	r3, [r7, #20]
 8022308:	2b0f      	cmp	r3, #15
 802230a:	d9d3      	bls.n	80222b4 <condswap+0x12>
  }
}
 802230c:	bf00      	nop
 802230e:	bf00      	nop
 8022310:	371c      	adds	r7, #28
 8022312:	46bd      	mov	sp, r7
 8022314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022318:	4770      	bx	lr

0802231a <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 802231a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802231e:	b08b      	sub	sp, #44	@ 0x2c
 8022320:	af00      	add	r7, sp, #0
 8022322:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 8022324:	2313      	movs	r3, #19
 8022326:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8022328:	2300      	movs	r3, #0
 802232a:	627b      	str	r3, [r7, #36]	@ 0x24
 802232c:	e012      	b.n	8022354 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 802232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022330:	009b      	lsls	r3, r3, #2
 8022332:	68fa      	ldr	r2, [r7, #12]
 8022334:	4413      	add	r3, r2
 8022336:	6819      	ldr	r1, [r3, #0]
 8022338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802233a:	009b      	lsls	r3, r3, #2
 802233c:	68fa      	ldr	r2, [r7, #12]
 802233e:	18d6      	adds	r6, r2, r3
 8022340:	f107 0314 	add.w	r3, r7, #20
 8022344:	4618      	mov	r0, r3
 8022346:	f7ff fe24 	bl	8021f92 <adc0>
 802234a:	4603      	mov	r3, r0
 802234c:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 802234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022350:	3301      	adds	r3, #1
 8022352:	627b      	str	r3, [r7, #36]	@ 0x24
 8022354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022356:	2b07      	cmp	r3, #7
 8022358:	d9e9      	bls.n	802232e <canon+0x14>
  }
  propagate(x, carry0);
 802235a:	697b      	ldr	r3, [r7, #20]
 802235c:	4619      	mov	r1, r3
 802235e:	68f8      	ldr	r0, [r7, #12]
 8022360:	f7ff fe3d 	bl	8021fde <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 8022364:	f06f 0212 	mvn.w	r2, #18
 8022368:	f04f 33ff 	mov.w	r3, #4294967295
 802236c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 8022370:	2300      	movs	r3, #0
 8022372:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 8022374:	2300      	movs	r3, #0
 8022376:	627b      	str	r3, [r7, #36]	@ 0x24
 8022378:	e02a      	b.n	80223d0 <canon+0xb6>
    carry += x[i];
 802237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802237c:	009b      	lsls	r3, r3, #2
 802237e:	68fa      	ldr	r2, [r7, #12]
 8022380:	4413      	add	r3, r2
 8022382:	681b      	ldr	r3, [r3, #0]
 8022384:	2200      	movs	r2, #0
 8022386:	4698      	mov	r8, r3
 8022388:	4691      	mov	r9, r2
 802238a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802238e:	eb12 0108 	adds.w	r1, r2, r8
 8022392:	6039      	str	r1, [r7, #0]
 8022394:	eb43 0309 	adc.w	r3, r3, r9
 8022398:	607b      	str	r3, [r7, #4]
 802239a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802239e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 80223a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223a4:	009b      	lsls	r3, r3, #2
 80223a6:	68fa      	ldr	r2, [r7, #12]
 80223a8:	4413      	add	r3, r2
 80223aa:	69ba      	ldr	r2, [r7, #24]
 80223ac:	601a      	str	r2, [r3, #0]
 80223ae:	681b      	ldr	r3, [r3, #0]
 80223b0:	6a3a      	ldr	r2, [r7, #32]
 80223b2:	4313      	orrs	r3, r2
 80223b4:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 80223b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80223ba:	f04f 0200 	mov.w	r2, #0
 80223be:	f04f 0300 	mov.w	r3, #0
 80223c2:	000a      	movs	r2, r1
 80223c4:	17cb      	asrs	r3, r1, #31
 80223c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80223ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223cc:	3301      	adds	r3, #1
 80223ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80223d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223d2:	2b07      	cmp	r3, #7
 80223d4:	d9d1      	bls.n	802237a <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 80223d6:	6a3b      	ldr	r3, [r7, #32]
 80223d8:	2200      	movs	r2, #0
 80223da:	461c      	mov	r4, r3
 80223dc:	4615      	mov	r5, r2
 80223de:	f114 3aff 	adds.w	sl, r4, #4294967295
 80223e2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80223e6:	f04f 0200 	mov.w	r2, #0
 80223ea:	f04f 0300 	mov.w	r3, #0
 80223ee:	465a      	mov	r2, fp
 80223f0:	2300      	movs	r3, #0
 80223f2:	4613      	mov	r3, r2
}
 80223f4:	4618      	mov	r0, r3
 80223f6:	372c      	adds	r7, #44	@ 0x2c
 80223f8:	46bd      	mov	sp, r7
 80223fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022400 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8022400:	b580      	push	{r7, lr}
 8022402:	b088      	sub	sp, #32
 8022404:	af00      	add	r7, sp, #0
 8022406:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	61fb      	str	r3, [r7, #28]
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	3320      	adds	r3, #32
 8022410:	61bb      	str	r3, [r7, #24]
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	3340      	adds	r3, #64	@ 0x40
 8022416:	617b      	str	r3, [r7, #20]
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	3360      	adds	r3, #96	@ 0x60
 802241c:	613b      	str	r3, [r7, #16]
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	3380      	adds	r3, #128	@ 0x80
 8022422:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8022424:	69ba      	ldr	r2, [r7, #24]
 8022426:	69f9      	ldr	r1, [r7, #28]
 8022428:	68f8      	ldr	r0, [r7, #12]
 802242a:	f7ff fe12 	bl	8022052 <add>
  sub(z2, x2, z2);                                 // z2 = B
 802242e:	69ba      	ldr	r2, [r7, #24]
 8022430:	69f9      	ldr	r1, [r7, #28]
 8022432:	69b8      	ldr	r0, [r7, #24]
 8022434:	f7ff fe3d 	bl	80220b2 <sub>
  add(x2, x3, z3);                                 // x2 = C
 8022438:	693a      	ldr	r2, [r7, #16]
 802243a:	6979      	ldr	r1, [r7, #20]
 802243c:	69f8      	ldr	r0, [r7, #28]
 802243e:	f7ff fe08 	bl	8022052 <add>
  sub(z3, x3, z3);                                 // z3 = D
 8022442:	693a      	ldr	r2, [r7, #16]
 8022444:	6979      	ldr	r1, [r7, #20]
 8022446:	6938      	ldr	r0, [r7, #16]
 8022448:	f7ff fe33 	bl	80220b2 <sub>
  mul1(z3, t1);                                    // z3 = DA
 802244c:	68f9      	ldr	r1, [r7, #12]
 802244e:	6938      	ldr	r0, [r7, #16]
 8022450:	f7ff ff0c 	bl	802226c <mul1>
  mul1(x2, z2);                                    // x3 = BC
 8022454:	69b9      	ldr	r1, [r7, #24]
 8022456:	69f8      	ldr	r0, [r7, #28]
 8022458:	f7ff ff08 	bl	802226c <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 802245c:	69fa      	ldr	r2, [r7, #28]
 802245e:	6939      	ldr	r1, [r7, #16]
 8022460:	6978      	ldr	r0, [r7, #20]
 8022462:	f7ff fdf6 	bl	8022052 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 8022466:	69fa      	ldr	r2, [r7, #28]
 8022468:	6939      	ldr	r1, [r7, #16]
 802246a:	6938      	ldr	r0, [r7, #16]
 802246c:	f7ff fe21 	bl	80220b2 <sub>
  sqr1(t1);                                        // t1 = AA
 8022470:	68f8      	ldr	r0, [r7, #12]
 8022472:	f7ff ff0a 	bl	802228a <sqr1>
  sqr1(z2);                                        // z2 = BB
 8022476:	69b8      	ldr	r0, [r7, #24]
 8022478:	f7ff ff07 	bl	802228a <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 802247c:	69ba      	ldr	r2, [r7, #24]
 802247e:	68f9      	ldr	r1, [r7, #12]
 8022480:	69f8      	ldr	r0, [r7, #28]
 8022482:	f7ff fe16 	bl	80220b2 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 8022486:	2301      	movs	r3, #1
 8022488:	4a06      	ldr	r2, [pc, #24]	@ (80224a4 <ladder_part1+0xa4>)
 802248a:	69f9      	ldr	r1, [r7, #28]
 802248c:	69b8      	ldr	r0, [r7, #24]
 802248e:	f7ff fe61 	bl	8022154 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 8022492:	68fa      	ldr	r2, [r7, #12]
 8022494:	69b9      	ldr	r1, [r7, #24]
 8022496:	69b8      	ldr	r0, [r7, #24]
 8022498:	f7ff fddb 	bl	8022052 <add>
}
 802249c:	bf00      	nop
 802249e:	3720      	adds	r7, #32
 80224a0:	46bd      	mov	sp, r7
 80224a2:	bd80      	pop	{r7, pc}
 80224a4:	080310fc 	.word	0x080310fc

080224a8 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 80224a8:	b580      	push	{r7, lr}
 80224aa:	b088      	sub	sp, #32
 80224ac:	af00      	add	r7, sp, #0
 80224ae:	6078      	str	r0, [r7, #4]
 80224b0:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	61fb      	str	r3, [r7, #28]
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	3320      	adds	r3, #32
 80224ba:	61bb      	str	r3, [r7, #24]
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	3340      	adds	r3, #64	@ 0x40
 80224c0:	617b      	str	r3, [r7, #20]
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	3360      	adds	r3, #96	@ 0x60
 80224c6:	613b      	str	r3, [r7, #16]
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	3380      	adds	r3, #128	@ 0x80
 80224cc:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 80224ce:	6938      	ldr	r0, [r7, #16]
 80224d0:	f7ff fedb 	bl	802228a <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 80224d4:	6839      	ldr	r1, [r7, #0]
 80224d6:	6938      	ldr	r0, [r7, #16]
 80224d8:	f7ff fec8 	bl	802226c <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 80224dc:	6978      	ldr	r0, [r7, #20]
 80224de:	f7ff fed4 	bl	802228a <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 80224e2:	69f9      	ldr	r1, [r7, #28]
 80224e4:	69b8      	ldr	r0, [r7, #24]
 80224e6:	f7ff fec1 	bl	802226c <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 80224ea:	69fa      	ldr	r2, [r7, #28]
 80224ec:	68f9      	ldr	r1, [r7, #12]
 80224ee:	69f8      	ldr	r0, [r7, #28]
 80224f0:	f7ff fddf 	bl	80220b2 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 80224f4:	68f9      	ldr	r1, [r7, #12]
 80224f6:	69f8      	ldr	r0, [r7, #28]
 80224f8:	f7ff feb8 	bl	802226c <mul1>
}
 80224fc:	bf00      	nop
 80224fe:	3720      	adds	r7, #32
 8022500:	46bd      	mov	sp, r7
 8022502:	bd80      	pop	{r7, pc}

08022504 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8022504:	b580      	push	{r7, lr}
 8022506:	b094      	sub	sp, #80	@ 0x50
 8022508:	af00      	add	r7, sp, #0
 802250a:	60f8      	str	r0, [r7, #12]
 802250c:	60b9      	str	r1, [r7, #8]
 802250e:	607a      	str	r2, [r7, #4]
 8022510:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8022512:	2300      	movs	r3, #0
 8022514:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	643b      	str	r3, [r7, #64]	@ 0x40
 802251a:	68fb      	ldr	r3, [r7, #12]
 802251c:	3340      	adds	r3, #64	@ 0x40
 802251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022520:	68fb      	ldr	r3, [r7, #12]
 8022522:	3360      	adds	r3, #96	@ 0x60
 8022524:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 8022526:	2280      	movs	r2, #128	@ 0x80
 8022528:	2100      	movs	r1, #0
 802252a:	68f8      	ldr	r0, [r7, #12]
 802252c:	f006 f938 	bl	80287a0 <memset>
  x2[0] = z3[0] = 1;
 8022530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022532:	2201      	movs	r2, #1
 8022534:	601a      	str	r2, [r3, #0]
 8022536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022538:	681a      	ldr	r2, [r3, #0]
 802253a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802253c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 802253e:	2300      	movs	r3, #0
 8022540:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022542:	e031      	b.n	80225a8 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 8022544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022546:	009b      	lsls	r3, r3, #2
 8022548:	3303      	adds	r3, #3
 802254a:	687a      	ldr	r2, [r7, #4]
 802254c:	4413      	add	r3, r2
 802254e:	781b      	ldrb	r3, [r3, #0]
 8022550:	061a      	lsls	r2, r3, #24
 8022552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022554:	009b      	lsls	r3, r3, #2
 8022556:	3302      	adds	r3, #2
 8022558:	6879      	ldr	r1, [r7, #4]
 802255a:	440b      	add	r3, r1
 802255c:	781b      	ldrb	r3, [r3, #0]
 802255e:	041b      	lsls	r3, r3, #16
 8022560:	431a      	orrs	r2, r3
 8022562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022564:	009b      	lsls	r3, r3, #2
 8022566:	3301      	adds	r3, #1
 8022568:	6879      	ldr	r1, [r7, #4]
 802256a:	440b      	add	r3, r1
 802256c:	781b      	ldrb	r3, [r3, #0]
 802256e:	021b      	lsls	r3, r3, #8
 8022570:	4313      	orrs	r3, r2
 8022572:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8022574:	0092      	lsls	r2, r2, #2
 8022576:	4611      	mov	r1, r2
 8022578:	687a      	ldr	r2, [r7, #4]
 802257a:	440a      	add	r2, r1
 802257c:	7812      	ldrb	r2, [r2, #0]
 802257e:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 8022580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022582:	009b      	lsls	r3, r3, #2
 8022584:	3350      	adds	r3, #80	@ 0x50
 8022586:	443b      	add	r3, r7
 8022588:	f843 2c3c 	str.w	r2, [r3, #-60]
 802258c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802258e:	009b      	lsls	r3, r3, #2
 8022590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8022592:	441a      	add	r2, r3
 8022594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022596:	009b      	lsls	r3, r3, #2
 8022598:	3350      	adds	r3, #80	@ 0x50
 802259a:	443b      	add	r3, r7
 802259c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80225a0:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 80225a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80225a4:	3301      	adds	r3, #1
 80225a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80225a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80225aa:	2b07      	cmp	r3, #7
 80225ac:	ddca      	ble.n	8022544 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 80225ae:	23ff      	movs	r3, #255	@ 0xff
 80225b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80225b2:	e049      	b.n	8022648 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 80225b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	da00      	bge.n	80225bc <x25519_core+0xb8>
 80225ba:	3307      	adds	r3, #7
 80225bc:	10db      	asrs	r3, r3, #3
 80225be:	461a      	mov	r2, r3
 80225c0:	68bb      	ldr	r3, [r7, #8]
 80225c2:	4413      	add	r3, r2
 80225c4:	781b      	ldrb	r3, [r3, #0]
 80225c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 80225ca:	683b      	ldr	r3, [r7, #0]
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d01a      	beq.n	8022606 <x25519_core+0x102>
      if (i / 8 == 0) {
 80225d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80225d2:	3307      	adds	r3, #7
 80225d4:	2b0e      	cmp	r3, #14
 80225d6:	d806      	bhi.n	80225e6 <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 80225d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80225dc:	f023 0307 	bic.w	r3, r3, #7
 80225e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80225e4:	e00f      	b.n	8022606 <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 80225e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80225e8:	3bf8      	subs	r3, #248	@ 0xf8
 80225ea:	2b07      	cmp	r3, #7
 80225ec:	d80b      	bhi.n	8022606 <x25519_core+0x102>
        bytei &= 0x7F;
 80225ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80225f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80225f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 80225fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80225fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022602:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8022606:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 802260a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802260c:	f003 0307 	and.w	r3, r3, #7
 8022610:	fa42 f303 	asr.w	r3, r2, r3
 8022614:	f003 0301 	and.w	r3, r3, #1
 8022618:	425b      	negs	r3, r3
 802261a:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 802261c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022620:	4053      	eors	r3, r2
 8022622:	461a      	mov	r2, r3
 8022624:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022626:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8022628:	f7ff fe3b 	bl	80222a2 <condswap>
    swap = doswap;
 802262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802262e:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8022630:	68f8      	ldr	r0, [r7, #12]
 8022632:	f7ff fee5 	bl	8022400 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 8022636:	f107 0314 	add.w	r3, r7, #20
 802263a:	4619      	mov	r1, r3
 802263c:	68f8      	ldr	r0, [r7, #12]
 802263e:	f7ff ff33 	bl	80224a8 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 8022642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022644:	3b01      	subs	r3, #1
 8022646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802264a:	2b00      	cmp	r3, #0
 802264c:	dab2      	bge.n	80225b4 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 802264e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022652:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8022654:	f7ff fe25 	bl	80222a2 <condswap>
}
 8022658:	bf00      	nop
 802265a:	3750      	adds	r7, #80	@ 0x50
 802265c:	46bd      	mov	sp, r7
 802265e:	bd80      	pop	{r7, pc}

08022660 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 8022660:	b580      	push	{r7, lr}
 8022662:	b0be      	sub	sp, #248	@ 0xf8
 8022664:	af00      	add	r7, sp, #0
 8022666:	60f8      	str	r0, [r7, #12]
 8022668:	60b9      	str	r1, [r7, #8]
 802266a:	607a      	str	r2, [r7, #4]
 802266c:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 802266e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8022672:	683b      	ldr	r3, [r7, #0]
 8022674:	687a      	ldr	r2, [r7, #4]
 8022676:	68b9      	ldr	r1, [r7, #8]
 8022678:	f7ff ff44 	bl	8022504 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 802267c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8022680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8022684:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8022688:	3320      	adds	r3, #32
 802268a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 802268e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8022692:	3360      	adds	r3, #96	@ 0x60
 8022694:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8022698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802269c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 80226a0:	2300      	movs	r3, #0
 80226a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80226a6:	e043      	b.n	8022730 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 80226a8:	4952      	ldr	r1, [pc, #328]	@ (80227f4 <mg_tls_x25519+0x194>)
 80226aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80226ae:	4613      	mov	r3, r2
 80226b0:	005b      	lsls	r3, r3, #1
 80226b2:	4413      	add	r3, r2
 80226b4:	440b      	add	r3, r1
 80226b6:	781b      	ldrb	r3, [r3, #0]
 80226b8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80226bc:	015b      	lsls	r3, r3, #5
 80226be:	4413      	add	r3, r2
 80226c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 80226c4:	494b      	ldr	r1, [pc, #300]	@ (80227f4 <mg_tls_x25519+0x194>)
 80226c6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80226ca:	4613      	mov	r3, r2
 80226cc:	005b      	lsls	r3, r3, #1
 80226ce:	4413      	add	r3, r2
 80226d0:	440b      	add	r3, r1
 80226d2:	3302      	adds	r3, #2
 80226d4:	781b      	ldrb	r3, [r3, #0]
 80226d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80226da:	e00e      	b.n	80226fa <mg_tls_x25519+0x9a>
      sqr(a, prev);
 80226dc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 80226e0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80226e4:	f7ff fdb3 	bl	802224e <sqr>
      prev = a;
 80226e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80226ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 80226f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80226f4:	3b01      	subs	r3, #1
 80226f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80226fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80226fe:	2b00      	cmp	r3, #0
 8022700:	dcec      	bgt.n	80226dc <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8022702:	493c      	ldr	r1, [pc, #240]	@ (80227f4 <mg_tls_x25519+0x194>)
 8022704:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8022708:	4613      	mov	r3, r2
 802270a:	005b      	lsls	r3, r3, #1
 802270c:	4413      	add	r3, r2
 802270e:	440b      	add	r3, r1
 8022710:	3301      	adds	r3, #1
 8022712:	781b      	ldrb	r3, [r3, #0]
 8022714:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8022718:	015b      	lsls	r3, r3, #5
 802271a:	4413      	add	r3, r2
 802271c:	4619      	mov	r1, r3
 802271e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8022722:	f7ff fda3 	bl	802226c <mul1>
  for (i = 0; i < 13; i++) {
 8022726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802272a:	3301      	adds	r3, #1
 802272c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8022730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022734:	2b0c      	cmp	r3, #12
 8022736:	ddb7      	ble.n	80226a8 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8022738:	f107 0014 	add.w	r0, r7, #20
 802273c:	2308      	movs	r3, #8
 802273e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8022742:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8022746:	f7ff fd05 	bl	8022154 <mul>
  ret = (int) canon(out_limbs);
 802274a:	f107 0314 	add.w	r3, r7, #20
 802274e:	4618      	mov	r0, r3
 8022750:	f7ff fde3 	bl	802231a <canon>
 8022754:	4603      	mov	r3, r0
 8022756:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	2b00      	cmp	r3, #0
 802275e:	d102      	bne.n	8022766 <mg_tls_x25519+0x106>
 8022760:	2300      	movs	r3, #0
 8022762:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 8022766:	2300      	movs	r3, #0
 8022768:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 802276c:	e038      	b.n	80227e0 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 802276e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022772:	009b      	lsls	r3, r3, #2
 8022774:	33f8      	adds	r3, #248	@ 0xf8
 8022776:	443b      	add	r3, r7
 8022778:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 802277c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 8022780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8022784:	009b      	lsls	r3, r3, #2
 8022786:	461a      	mov	r2, r3
 8022788:	68fb      	ldr	r3, [r7, #12]
 802278a:	4413      	add	r3, r2
 802278c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8022790:	b2d2      	uxtb	r2, r2
 8022792:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8022794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8022798:	0a19      	lsrs	r1, r3, #8
 802279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 802279e:	009b      	lsls	r3, r3, #2
 80227a0:	3301      	adds	r3, #1
 80227a2:	68fa      	ldr	r2, [r7, #12]
 80227a4:	4413      	add	r3, r2
 80227a6:	b2ca      	uxtb	r2, r1
 80227a8:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 80227aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80227ae:	0c19      	lsrs	r1, r3, #16
 80227b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80227b4:	009b      	lsls	r3, r3, #2
 80227b6:	3302      	adds	r3, #2
 80227b8:	68fa      	ldr	r2, [r7, #12]
 80227ba:	4413      	add	r3, r2
 80227bc:	b2ca      	uxtb	r2, r1
 80227be:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 80227c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80227c4:	0e19      	lsrs	r1, r3, #24
 80227c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80227ca:	009b      	lsls	r3, r3, #2
 80227cc:	3303      	adds	r3, #3
 80227ce:	68fa      	ldr	r2, [r7, #12]
 80227d0:	4413      	add	r3, r2
 80227d2:	b2ca      	uxtb	r2, r1
 80227d4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 80227d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80227da:	3301      	adds	r3, #1
 80227dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80227e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80227e4:	2b07      	cmp	r3, #7
 80227e6:	ddc2      	ble.n	802276e <mg_tls_x25519+0x10e>
  }
  return ret;
 80227e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 80227ec:	4618      	mov	r0, r3
 80227ee:	37f8      	adds	r7, #248	@ 0xf8
 80227f0:	46bd      	mov	sp, r7
 80227f2:	bd80      	pop	{r7, pc}
 80227f4:	08031470 	.word	0x08031470

080227f8 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 80227f8:	b580      	push	{r7, lr}
 80227fa:	b082      	sub	sp, #8
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8022800:	2204      	movs	r2, #4
 8022802:	491b      	ldr	r1, [pc, #108]	@ (8022870 <mg_url_is_ssl+0x78>)
 8022804:	6878      	ldr	r0, [r7, #4]
 8022806:	f005 ffe0 	bl	80287ca <strncmp>
 802280a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 802280c:	2b00      	cmp	r3, #0
 802280e:	d027      	beq.n	8022860 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8022810:	2206      	movs	r2, #6
 8022812:	4918      	ldr	r1, [pc, #96]	@ (8022874 <mg_url_is_ssl+0x7c>)
 8022814:	6878      	ldr	r0, [r7, #4]
 8022816:	f005 ffd8 	bl	80287ca <strncmp>
 802281a:	4603      	mov	r3, r0
 802281c:	2b00      	cmp	r3, #0
 802281e:	d01f      	beq.n	8022860 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8022820:	2206      	movs	r2, #6
 8022822:	4915      	ldr	r1, [pc, #84]	@ (8022878 <mg_url_is_ssl+0x80>)
 8022824:	6878      	ldr	r0, [r7, #4]
 8022826:	f005 ffd0 	bl	80287ca <strncmp>
 802282a:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 802282c:	2b00      	cmp	r3, #0
 802282e:	d017      	beq.n	8022860 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8022830:	2204      	movs	r2, #4
 8022832:	4912      	ldr	r1, [pc, #72]	@ (802287c <mg_url_is_ssl+0x84>)
 8022834:	6878      	ldr	r0, [r7, #4]
 8022836:	f005 ffc8 	bl	80287ca <strncmp>
 802283a:	4603      	mov	r3, r0
 802283c:	2b00      	cmp	r3, #0
 802283e:	d00f      	beq.n	8022860 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8022840:	2204      	movs	r2, #4
 8022842:	490f      	ldr	r1, [pc, #60]	@ (8022880 <mg_url_is_ssl+0x88>)
 8022844:	6878      	ldr	r0, [r7, #4]
 8022846:	f005 ffc0 	bl	80287ca <strncmp>
 802284a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 802284c:	2b00      	cmp	r3, #0
 802284e:	d007      	beq.n	8022860 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8022850:	2205      	movs	r2, #5
 8022852:	490c      	ldr	r1, [pc, #48]	@ (8022884 <mg_url_is_ssl+0x8c>)
 8022854:	6878      	ldr	r0, [r7, #4]
 8022856:	f005 ffb8 	bl	80287ca <strncmp>
 802285a:	4603      	mov	r3, r0
 802285c:	2b00      	cmp	r3, #0
 802285e:	d101      	bne.n	8022864 <mg_url_is_ssl+0x6c>
 8022860:	2301      	movs	r3, #1
 8022862:	e000      	b.n	8022866 <mg_url_is_ssl+0x6e>
 8022864:	2300      	movs	r3, #0
}
 8022866:	4618      	mov	r0, r3
 8022868:	3708      	adds	r7, #8
 802286a:	46bd      	mov	sp, r7
 802286c:	bd80      	pop	{r7, pc}
 802286e:	bf00      	nop
 8022870:	0802fcd4 	.word	0x0802fcd4
 8022874:	0802fcdc 	.word	0x0802fcdc
 8022878:	0802fce4 	.word	0x0802fce4
 802287c:	0802fcec 	.word	0x0802fcec
 8022880:	0802fcf4 	.word	0x0802fcf4
 8022884:	0802fcfc 	.word	0x0802fcfc

08022888 <urlparse>:

static struct url urlparse(const char *url) {
 8022888:	b5b0      	push	{r4, r5, r7, lr}
 802288a:	b08a      	sub	sp, #40	@ 0x28
 802288c:	af00      	add	r7, sp, #0
 802288e:	6078      	str	r0, [r7, #4]
 8022890:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8022892:	f107 0308 	add.w	r3, r7, #8
 8022896:	221c      	movs	r2, #28
 8022898:	2100      	movs	r1, #0
 802289a:	4618      	mov	r0, r3
 802289c:	f005 ff80 	bl	80287a0 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 80228a0:	2300      	movs	r3, #0
 80228a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80228a4:	e05b      	b.n	802295e <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 80228a6:	683a      	ldr	r2, [r7, #0]
 80228a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228aa:	4413      	add	r3, r2
 80228ac:	781b      	ldrb	r3, [r3, #0]
 80228ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80228b0:	d112      	bne.n	80228d8 <urlparse+0x50>
 80228b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d00f      	beq.n	80228d8 <urlparse+0x50>
 80228b8:	697b      	ldr	r3, [r7, #20]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d10c      	bne.n	80228d8 <urlparse+0x50>
 80228be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228c0:	3b01      	subs	r3, #1
 80228c2:	683a      	ldr	r2, [r7, #0]
 80228c4:	4413      	add	r3, r2
 80228c6:	781b      	ldrb	r3, [r3, #0]
 80228c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80228ca:	d105      	bne.n	80228d8 <urlparse+0x50>
      u.host = i + 1;
 80228cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228ce:	3301      	adds	r3, #1
 80228d0:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80228d2:	2300      	movs	r3, #0
 80228d4:	61bb      	str	r3, [r7, #24]
 80228d6:	e03f      	b.n	8022958 <urlparse+0xd0>
    } else if (url[i] == ']') {
 80228d8:	683a      	ldr	r2, [r7, #0]
 80228da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228dc:	4413      	add	r3, r2
 80228de:	781b      	ldrb	r3, [r3, #0]
 80228e0:	2b5d      	cmp	r3, #93	@ 0x5d
 80228e2:	d102      	bne.n	80228ea <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 80228e4:	2300      	movs	r3, #0
 80228e6:	61bb      	str	r3, [r7, #24]
 80228e8:	e036      	b.n	8022958 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 80228ea:	683a      	ldr	r2, [r7, #0]
 80228ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80228ee:	4413      	add	r3, r2
 80228f0:	781b      	ldrb	r3, [r3, #0]
 80228f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80228f4:	d109      	bne.n	802290a <urlparse+0x82>
 80228f6:	69bb      	ldr	r3, [r7, #24]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d106      	bne.n	802290a <urlparse+0x82>
 80228fc:	69fb      	ldr	r3, [r7, #28]
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d103      	bne.n	802290a <urlparse+0x82>
      u.port = i + 1;
 8022902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022904:	3301      	adds	r3, #1
 8022906:	61bb      	str	r3, [r7, #24]
 8022908:	e026      	b.n	8022958 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 802290a:	683a      	ldr	r2, [r7, #0]
 802290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802290e:	4413      	add	r3, r2
 8022910:	781b      	ldrb	r3, [r3, #0]
 8022912:	2b40      	cmp	r3, #64	@ 0x40
 8022914:	d112      	bne.n	802293c <urlparse+0xb4>
 8022916:	68fb      	ldr	r3, [r7, #12]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d10f      	bne.n	802293c <urlparse+0xb4>
 802291c:	693b      	ldr	r3, [r7, #16]
 802291e:	2b00      	cmp	r3, #0
 8022920:	d10c      	bne.n	802293c <urlparse+0xb4>
 8022922:	69fb      	ldr	r3, [r7, #28]
 8022924:	2b00      	cmp	r3, #0
 8022926:	d109      	bne.n	802293c <urlparse+0xb4>
      u.user = u.host;
 8022928:	697b      	ldr	r3, [r7, #20]
 802292a:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 802292c:	69bb      	ldr	r3, [r7, #24]
 802292e:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8022930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022932:	3301      	adds	r3, #1
 8022934:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8022936:	2300      	movs	r3, #0
 8022938:	61bb      	str	r3, [r7, #24]
 802293a:	e00d      	b.n	8022958 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 802293c:	683a      	ldr	r2, [r7, #0]
 802293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022940:	4413      	add	r3, r2
 8022942:	781b      	ldrb	r3, [r3, #0]
 8022944:	2b2f      	cmp	r3, #47	@ 0x2f
 8022946:	d107      	bne.n	8022958 <urlparse+0xd0>
 8022948:	697b      	ldr	r3, [r7, #20]
 802294a:	2b00      	cmp	r3, #0
 802294c:	d004      	beq.n	8022958 <urlparse+0xd0>
 802294e:	69fb      	ldr	r3, [r7, #28]
 8022950:	2b00      	cmp	r3, #0
 8022952:	d101      	bne.n	8022958 <urlparse+0xd0>
      u.uri = i;
 8022954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022956:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8022958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802295a:	3301      	adds	r3, #1
 802295c:	627b      	str	r3, [r7, #36]	@ 0x24
 802295e:	683a      	ldr	r2, [r7, #0]
 8022960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022962:	4413      	add	r3, r2
 8022964:	781b      	ldrb	r3, [r3, #0]
 8022966:	2b00      	cmp	r3, #0
 8022968:	d19d      	bne.n	80228a6 <urlparse+0x1e>
    }
  }
  u.end = i;
 802296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802296c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	461d      	mov	r5, r3
 8022972:	f107 0408 	add.w	r4, r7, #8
 8022976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802297a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802297e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8022982:	6878      	ldr	r0, [r7, #4]
 8022984:	3728      	adds	r7, #40	@ 0x28
 8022986:	46bd      	mov	sp, r7
 8022988:	bdb0      	pop	{r4, r5, r7, pc}

0802298a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 802298a:	b580      	push	{r7, lr}
 802298c:	b08c      	sub	sp, #48	@ 0x30
 802298e:	af00      	add	r7, sp, #0
 8022990:	6078      	str	r0, [r7, #4]
 8022992:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8022994:	f107 0310 	add.w	r3, r7, #16
 8022998:	6839      	ldr	r1, [r7, #0]
 802299a:	4618      	mov	r0, r3
 802299c:	f7ff ff74 	bl	8022888 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 80229a0:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	d004      	beq.n	80229b0 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 80229a6:	6a3a      	ldr	r2, [r7, #32]
 80229a8:	69fb      	ldr	r3, [r7, #28]
 80229aa:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 80229ac:	3b01      	subs	r3, #1
 80229ae:	e009      	b.n	80229c4 <mg_url_host+0x3a>
 80229b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d003      	beq.n	80229be <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 80229b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80229b8:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 80229ba:	1ad3      	subs	r3, r2, r3
 80229bc:	e002      	b.n	80229c4 <mg_url_host+0x3a>
 80229be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80229c0:	69fb      	ldr	r3, [r7, #28]
 80229c2:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 80229c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 80229c6:	69fb      	ldr	r3, [r7, #28]
 80229c8:	683a      	ldr	r2, [r7, #0]
 80229ca:	18d1      	adds	r1, r2, r3
 80229cc:	f107 0308 	add.w	r3, r7, #8
 80229d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80229d2:	4618      	mov	r0, r3
 80229d4:	f7f4 fed3 	bl	801777e <mg_str_n>
  return s;
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	461a      	mov	r2, r3
 80229dc:	f107 0308 	add.w	r3, r7, #8
 80229e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80229e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80229e8:	6878      	ldr	r0, [r7, #4]
 80229ea:	3730      	adds	r7, #48	@ 0x30
 80229ec:	46bd      	mov	sp, r7
 80229ee:	bd80      	pop	{r7, pc}

080229f0 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 80229f0:	b580      	push	{r7, lr}
 80229f2:	b08a      	sub	sp, #40	@ 0x28
 80229f4:	af00      	add	r7, sp, #0
 80229f6:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 80229f8:	f107 0308 	add.w	r3, r7, #8
 80229fc:	6879      	ldr	r1, [r7, #4]
 80229fe:	4618      	mov	r0, r3
 8022a00:	f7ff ff42 	bl	8022888 <urlparse>
  unsigned short port = 0;
 8022a04:	2300      	movs	r3, #0
 8022a06:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8022a08:	2205      	movs	r2, #5
 8022a0a:	4925      	ldr	r1, [pc, #148]	@ (8022aa0 <mg_url_port+0xb0>)
 8022a0c:	6878      	ldr	r0, [r7, #4]
 8022a0e:	f005 fedc 	bl	80287ca <strncmp>
 8022a12:	4603      	mov	r3, r0
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	d007      	beq.n	8022a28 <mg_url_port+0x38>
 8022a18:	2203      	movs	r2, #3
 8022a1a:	4922      	ldr	r1, [pc, #136]	@ (8022aa4 <mg_url_port+0xb4>)
 8022a1c:	6878      	ldr	r0, [r7, #4]
 8022a1e:	f005 fed4 	bl	80287ca <strncmp>
 8022a22:	4603      	mov	r3, r0
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	d101      	bne.n	8022a2c <mg_url_port+0x3c>
 8022a28:	2350      	movs	r3, #80	@ 0x50
 8022a2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8022a2c:	2204      	movs	r2, #4
 8022a2e:	491e      	ldr	r1, [pc, #120]	@ (8022aa8 <mg_url_port+0xb8>)
 8022a30:	6878      	ldr	r0, [r7, #4]
 8022a32:	f005 feca 	bl	80287ca <strncmp>
 8022a36:	4603      	mov	r3, r0
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	d007      	beq.n	8022a4c <mg_url_port+0x5c>
 8022a3c:	2206      	movs	r2, #6
 8022a3e:	491b      	ldr	r1, [pc, #108]	@ (8022aac <mg_url_port+0xbc>)
 8022a40:	6878      	ldr	r0, [r7, #4]
 8022a42:	f005 fec2 	bl	80287ca <strncmp>
 8022a46:	4603      	mov	r3, r0
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d102      	bne.n	8022a52 <mg_url_port+0x62>
    port = 443;
 8022a4c:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8022a50:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8022a52:	2205      	movs	r2, #5
 8022a54:	4916      	ldr	r1, [pc, #88]	@ (8022ab0 <mg_url_port+0xc0>)
 8022a56:	6878      	ldr	r0, [r7, #4]
 8022a58:	f005 feb7 	bl	80287ca <strncmp>
 8022a5c:	4603      	mov	r3, r0
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d102      	bne.n	8022a68 <mg_url_port+0x78>
 8022a62:	f240 735b 	movw	r3, #1883	@ 0x75b
 8022a66:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8022a68:	2206      	movs	r2, #6
 8022a6a:	4912      	ldr	r1, [pc, #72]	@ (8022ab4 <mg_url_port+0xc4>)
 8022a6c:	6878      	ldr	r0, [r7, #4]
 8022a6e:	f005 feac 	bl	80287ca <strncmp>
 8022a72:	4603      	mov	r3, r0
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d102      	bne.n	8022a7e <mg_url_port+0x8e>
 8022a78:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8022a7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8022a7e:	69bb      	ldr	r3, [r7, #24]
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d007      	beq.n	8022a94 <mg_url_port+0xa4>
 8022a84:	69bb      	ldr	r3, [r7, #24]
 8022a86:	687a      	ldr	r2, [r7, #4]
 8022a88:	4413      	add	r3, r2
 8022a8a:	4618      	mov	r0, r3
 8022a8c:	f003 feb9 	bl	8026802 <atoi>
 8022a90:	4603      	mov	r3, r0
 8022a92:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8022a94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8022a96:	4618      	mov	r0, r3
 8022a98:	3728      	adds	r7, #40	@ 0x28
 8022a9a:	46bd      	mov	sp, r7
 8022a9c:	bd80      	pop	{r7, pc}
 8022a9e:	bf00      	nop
 8022aa0:	0802fd04 	.word	0x0802fd04
 8022aa4:	0802fd0c 	.word	0x0802fd0c
 8022aa8:	0802fcd4 	.word	0x0802fcd4
 8022aac:	0802fcdc 	.word	0x0802fcdc
 8022ab0:	0802fd10 	.word	0x0802fd10
 8022ab4:	0802fce4 	.word	0x0802fce4

08022ab8 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8022ab8:	b480      	push	{r7}
 8022aba:	b083      	sub	sp, #12
 8022abc:	af00      	add	r7, sp, #0
 8022abe:	6078      	str	r0, [r7, #4]
 8022ac0:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	2b00      	cmp	r3, #0
 8022ac6:	d00a      	beq.n	8022ade <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8022ac8:	e004      	b.n	8022ad4 <mg_bzero+0x1c>
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	1c5a      	adds	r2, r3, #1
 8022ace:	607a      	str	r2, [r7, #4]
 8022ad0:	2200      	movs	r2, #0
 8022ad2:	701a      	strb	r2, [r3, #0]
 8022ad4:	683b      	ldr	r3, [r7, #0]
 8022ad6:	1e5a      	subs	r2, r3, #1
 8022ad8:	603a      	str	r2, [r7, #0]
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	d1f5      	bne.n	8022aca <mg_bzero+0x12>
  }
}
 8022ade:	bf00      	nop
 8022ae0:	370c      	adds	r7, #12
 8022ae2:	46bd      	mov	sp, r7
 8022ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae8:	4770      	bx	lr
	...

08022aec <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 8022aec:	b580      	push	{r7, lr}
 8022aee:	b084      	sub	sp, #16
 8022af0:	af00      	add	r7, sp, #0
 8022af2:	6078      	str	r0, [r7, #4]
 8022af4:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 8022af6:	6839      	ldr	r1, [r7, #0]
 8022af8:	6878      	ldr	r0, [r7, #4]
 8022afa:	f7de f84b 	bl	8000b94 <mg_random>
  for (i = 0; i < len; i++) {
 8022afe:	2300      	movs	r3, #0
 8022b00:	60fb      	str	r3, [r7, #12]
 8022b02:	e02d      	b.n	8022b60 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 8022b04:	687a      	ldr	r2, [r7, #4]
 8022b06:	68fb      	ldr	r3, [r7, #12]
 8022b08:	4413      	add	r3, r2
 8022b0a:	781a      	ldrb	r2, [r3, #0]
 8022b0c:	0853      	lsrs	r3, r2, #1
 8022b0e:	4919      	ldr	r1, [pc, #100]	@ (8022b74 <mg_random_str+0x88>)
 8022b10:	fba1 1303 	umull	r1, r3, r1, r3
 8022b14:	0919      	lsrs	r1, r3, #4
 8022b16:	460b      	mov	r3, r1
 8022b18:	015b      	lsls	r3, r3, #5
 8022b1a:	1a5b      	subs	r3, r3, r1
 8022b1c:	005b      	lsls	r3, r3, #1
 8022b1e:	1ad3      	subs	r3, r2, r3
 8022b20:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022b22:	683b      	ldr	r3, [r7, #0]
 8022b24:	3b01      	subs	r3, #1
 8022b26:	68fa      	ldr	r2, [r7, #12]
 8022b28:	429a      	cmp	r2, r3
 8022b2a:	d011      	beq.n	8022b50 <mg_random_str+0x64>
 8022b2c:	7afb      	ldrb	r3, [r7, #11]
 8022b2e:	2b19      	cmp	r3, #25
 8022b30:	d803      	bhi.n	8022b3a <mg_random_str+0x4e>
 8022b32:	7afb      	ldrb	r3, [r7, #11]
 8022b34:	3361      	adds	r3, #97	@ 0x61
 8022b36:	b2db      	uxtb	r3, r3
 8022b38:	e00b      	b.n	8022b52 <mg_random_str+0x66>
 8022b3a:	7afb      	ldrb	r3, [r7, #11]
 8022b3c:	2b33      	cmp	r3, #51	@ 0x33
 8022b3e:	d803      	bhi.n	8022b48 <mg_random_str+0x5c>
 8022b40:	7afb      	ldrb	r3, [r7, #11]
 8022b42:	3327      	adds	r3, #39	@ 0x27
 8022b44:	b2db      	uxtb	r3, r3
 8022b46:	e004      	b.n	8022b52 <mg_random_str+0x66>
 8022b48:	7afb      	ldrb	r3, [r7, #11]
 8022b4a:	3b04      	subs	r3, #4
 8022b4c:	b2db      	uxtb	r3, r3
 8022b4e:	e000      	b.n	8022b52 <mg_random_str+0x66>
 8022b50:	2300      	movs	r3, #0
 8022b52:	6879      	ldr	r1, [r7, #4]
 8022b54:	68fa      	ldr	r2, [r7, #12]
 8022b56:	440a      	add	r2, r1
 8022b58:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8022b5a:	68fb      	ldr	r3, [r7, #12]
 8022b5c:	3301      	adds	r3, #1
 8022b5e:	60fb      	str	r3, [r7, #12]
 8022b60:	68fa      	ldr	r2, [r7, #12]
 8022b62:	683b      	ldr	r3, [r7, #0]
 8022b64:	429a      	cmp	r2, r3
 8022b66:	d3cd      	bcc.n	8022b04 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8022b68:	687b      	ldr	r3, [r7, #4]
}
 8022b6a:	4618      	mov	r0, r3
 8022b6c:	3710      	adds	r7, #16
 8022b6e:	46bd      	mov	sp, r7
 8022b70:	bd80      	pop	{r7, pc}
 8022b72:	bf00      	nop
 8022b74:	84210843 	.word	0x84210843

08022b78 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8022b78:	b480      	push	{r7}
 8022b7a:	b087      	sub	sp, #28
 8022b7c:	af00      	add	r7, sp, #0
 8022b7e:	60f8      	str	r0, [r7, #12]
 8022b80:	60b9      	str	r1, [r7, #8]
 8022b82:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	43db      	mvns	r3, r3
 8022b88:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8022b8a:	e01f      	b.n	8022bcc <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8022b8c:	68bb      	ldr	r3, [r7, #8]
 8022b8e:	1c5a      	adds	r2, r3, #1
 8022b90:	60ba      	str	r2, [r7, #8]
 8022b92:	781b      	ldrb	r3, [r3, #0]
 8022b94:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8022b96:	7dfa      	ldrb	r2, [r7, #23]
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	4053      	eors	r3, r2
 8022b9c:	f003 030f 	and.w	r3, r3, #15
 8022ba0:	4a11      	ldr	r2, [pc, #68]	@ (8022be8 <mg_crc32+0x70>)
 8022ba2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8022ba6:	68fb      	ldr	r3, [r7, #12]
 8022ba8:	091b      	lsrs	r3, r3, #4
 8022baa:	4053      	eors	r3, r2
 8022bac:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8022bae:	7dfb      	ldrb	r3, [r7, #23]
 8022bb0:	091b      	lsrs	r3, r3, #4
 8022bb2:	b2db      	uxtb	r3, r3
 8022bb4:	461a      	mov	r2, r3
 8022bb6:	68fb      	ldr	r3, [r7, #12]
 8022bb8:	4053      	eors	r3, r2
 8022bba:	f003 030f 	and.w	r3, r3, #15
 8022bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8022be8 <mg_crc32+0x70>)
 8022bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8022bc4:	68fb      	ldr	r3, [r7, #12]
 8022bc6:	091b      	lsrs	r3, r3, #4
 8022bc8:	4053      	eors	r3, r2
 8022bca:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	1e5a      	subs	r2, r3, #1
 8022bd0:	607a      	str	r2, [r7, #4]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d1da      	bne.n	8022b8c <mg_crc32+0x14>
  }
  return ~crc;
 8022bd6:	68fb      	ldr	r3, [r7, #12]
 8022bd8:	43db      	mvns	r3, r3
}
 8022bda:	4618      	mov	r0, r3
 8022bdc:	371c      	adds	r7, #28
 8022bde:	46bd      	mov	sp, r7
 8022be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022be4:	4770      	bx	lr
 8022be6:	bf00      	nop
 8022be8:	08031498 	.word	0x08031498

08022bec <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8022bec:	b480      	push	{r7}
 8022bee:	b085      	sub	sp, #20
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	463b      	mov	r3, r7
 8022bf4:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8022bf8:	683b      	ldr	r3, [r7, #0]
 8022bfa:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 8022c00:	683b      	ldr	r3, [r7, #0]
 8022c02:	781b      	ldrb	r3, [r3, #0]
 8022c04:	2b7e      	cmp	r3, #126	@ 0x7e
 8022c06:	d101      	bne.n	8022c0c <mg_path_is_sane+0x20>
 8022c08:	2300      	movs	r3, #0
 8022c0a:	e02f      	b.n	8022c6c <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8022c0c:	683b      	ldr	r3, [r7, #0]
 8022c0e:	781b      	ldrb	r3, [r3, #0]
 8022c10:	2b2e      	cmp	r3, #46	@ 0x2e
 8022c12:	d123      	bne.n	8022c5c <mg_path_is_sane+0x70>
 8022c14:	683b      	ldr	r3, [r7, #0]
 8022c16:	3301      	adds	r3, #1
 8022c18:	781b      	ldrb	r3, [r3, #0]
 8022c1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8022c1c:	d11e      	bne.n	8022c5c <mg_path_is_sane+0x70>
 8022c1e:	2300      	movs	r3, #0
 8022c20:	e024      	b.n	8022c6c <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8022c22:	68fb      	ldr	r3, [r7, #12]
 8022c24:	781b      	ldrb	r3, [r3, #0]
 8022c26:	2b2f      	cmp	r3, #47	@ 0x2f
 8022c28:	d003      	beq.n	8022c32 <mg_path_is_sane+0x46>
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	781b      	ldrb	r3, [r3, #0]
 8022c2e:	2b5c      	cmp	r3, #92	@ 0x5c
 8022c30:	d10e      	bne.n	8022c50 <mg_path_is_sane+0x64>
 8022c32:	68bb      	ldr	r3, [r7, #8]
 8022c34:	2b01      	cmp	r3, #1
 8022c36:	d90b      	bls.n	8022c50 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	3301      	adds	r3, #1
 8022c3c:	781b      	ldrb	r3, [r3, #0]
 8022c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022c40:	d106      	bne.n	8022c50 <mg_path_is_sane+0x64>
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	3302      	adds	r3, #2
 8022c46:	781b      	ldrb	r3, [r3, #0]
 8022c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8022c4a:	d101      	bne.n	8022c50 <mg_path_is_sane+0x64>
 8022c4c:	2300      	movs	r3, #0
 8022c4e:	e00d      	b.n	8022c6c <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	3301      	adds	r3, #1
 8022c54:	60fb      	str	r3, [r7, #12]
 8022c56:	68bb      	ldr	r3, [r7, #8]
 8022c58:	3b01      	subs	r3, #1
 8022c5a:	60bb      	str	r3, [r7, #8]
 8022c5c:	68fb      	ldr	r3, [r7, #12]
 8022c5e:	781b      	ldrb	r3, [r3, #0]
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d002      	beq.n	8022c6a <mg_path_is_sane+0x7e>
 8022c64:	68bb      	ldr	r3, [r7, #8]
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	d1db      	bne.n	8022c22 <mg_path_is_sane+0x36>
    }
  }
  return true;
 8022c6a:	2301      	movs	r3, #1
}
 8022c6c:	4618      	mov	r0, r3
 8022c6e:	3714      	adds	r7, #20
 8022c70:	46bd      	mov	sp, r7
 8022c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c76:	4770      	bx	lr

08022c78 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 8022c78:	b480      	push	{r7}
 8022c7a:	b083      	sub	sp, #12
 8022c7c:	af00      	add	r7, sp, #0
 8022c7e:	4603      	mov	r3, r0
 8022c80:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 8022c82:	1dbb      	adds	r3, r7, #6
 8022c84:	781b      	ldrb	r3, [r3, #0]
 8022c86:	b21b      	sxth	r3, r3
 8022c88:	021b      	lsls	r3, r3, #8
 8022c8a:	b21a      	sxth	r2, r3
 8022c8c:	1dbb      	adds	r3, r7, #6
 8022c8e:	3301      	adds	r3, #1
 8022c90:	781b      	ldrb	r3, [r3, #0]
 8022c92:	b21b      	sxth	r3, r3
 8022c94:	4313      	orrs	r3, r2
 8022c96:	b21b      	sxth	r3, r3
 8022c98:	b29b      	uxth	r3, r3
}
 8022c9a:	4618      	mov	r0, r3
 8022c9c:	370c      	adds	r7, #12
 8022c9e:	46bd      	mov	sp, r7
 8022ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ca4:	4770      	bx	lr

08022ca6 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8022ca6:	b480      	push	{r7}
 8022ca8:	b083      	sub	sp, #12
 8022caa:	af00      	add	r7, sp, #0
 8022cac:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 8022cae:	1d3b      	adds	r3, r7, #4
 8022cb0:	781b      	ldrb	r3, [r3, #0]
 8022cb2:	061a      	lsls	r2, r3, #24
 8022cb4:	1d3b      	adds	r3, r7, #4
 8022cb6:	3301      	adds	r3, #1
 8022cb8:	781b      	ldrb	r3, [r3, #0]
 8022cba:	041b      	lsls	r3, r3, #16
 8022cbc:	431a      	orrs	r2, r3
 8022cbe:	1d3b      	adds	r3, r7, #4
 8022cc0:	3302      	adds	r3, #2
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	021b      	lsls	r3, r3, #8
 8022cc6:	431a      	orrs	r2, r3
 8022cc8:	1d3b      	adds	r3, r7, #4
 8022cca:	3303      	adds	r3, #3
 8022ccc:	781b      	ldrb	r3, [r3, #0]
 8022cce:	4313      	orrs	r3, r2
}
 8022cd0:	4618      	mov	r0, r3
 8022cd2:	370c      	adds	r7, #12
 8022cd4:	46bd      	mov	sp, r7
 8022cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cda:	4770      	bx	lr

08022cdc <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 8022cdc:	b580      	push	{r7, lr}
 8022cde:	b0aa      	sub	sp, #168	@ 0xa8
 8022ce0:	af00      	add	r7, sp, #0
 8022ce2:	60f8      	str	r0, [r7, #12]
 8022ce4:	60b9      	str	r1, [r7, #8]
 8022ce6:	607a      	str	r2, [r7, #4]
 8022ce8:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 8022cea:	4b29      	ldr	r3, [pc, #164]	@ (8022d90 <ws_handshake+0xb4>)
 8022cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 8022cf0:	f107 0314 	add.w	r3, r7, #20
 8022cf4:	4618      	mov	r0, r3
 8022cf6:	f7f2 ff57 	bl	8015ba8 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 8022cfa:	68bb      	ldr	r3, [r7, #8]
 8022cfc:	6819      	ldr	r1, [r3, #0]
 8022cfe:	68bb      	ldr	r3, [r7, #8]
 8022d00:	685a      	ldr	r2, [r3, #4]
 8022d02:	f107 0314 	add.w	r3, r7, #20
 8022d06:	4618      	mov	r0, r3
 8022d08:	f7f2 ff78 	bl	8015bfc <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 8022d0c:	f107 0314 	add.w	r3, r7, #20
 8022d10:	2224      	movs	r2, #36	@ 0x24
 8022d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8022d16:	4618      	mov	r0, r3
 8022d18:	f7f2 ff70 	bl	8015bfc <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 8022d1c:	f107 0214 	add.w	r2, r7, #20
 8022d20:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8022d24:	4611      	mov	r1, r2
 8022d26:	4618      	mov	r0, r3
 8022d28:	f7f2 ffce 	bl	8015cc8 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 8022d2c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8022d30:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8022d34:	231e      	movs	r3, #30
 8022d36:	2114      	movs	r1, #20
 8022d38:	f7e5 ff20 	bl	8008b7c <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 8022d3c:	68fb      	ldr	r3, [r7, #12]
 8022d3e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8022d42:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8022d46:	4a13      	ldr	r2, [pc, #76]	@ (8022d94 <ws_handshake+0xb8>)
 8022d48:	4813      	ldr	r0, [pc, #76]	@ (8022d98 <ws_handshake+0xbc>)
 8022d4a:	f7e7 fc7e 	bl	800a64a <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8022d4e:	683b      	ldr	r3, [r7, #0]
 8022d50:	2b00      	cmp	r3, #0
 8022d52:	d008      	beq.n	8022d66 <ws_handshake+0x8a>
 8022d54:	68fb      	ldr	r3, [r7, #12]
 8022d56:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8022d5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8022d5e:	683a      	ldr	r2, [r7, #0]
 8022d60:	480d      	ldr	r0, [pc, #52]	@ (8022d98 <ws_handshake+0xbc>)
 8022d62:	f7e7 fc8d 	bl	800a680 <mg_vxprintf>
  if (wsproto != NULL) {
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	2b00      	cmp	r3, #0
 8022d6a:	d008      	beq.n	8022d7e <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	685b      	ldr	r3, [r3, #4]
 8022d70:	461a      	mov	r2, r3
              wsproto->buf);
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 8022d76:	4909      	ldr	r1, [pc, #36]	@ (8022d9c <ws_handshake+0xc0>)
 8022d78:	68f8      	ldr	r0, [r7, #12]
 8022d7a:	f7ec fe3f 	bl	800f9fc <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 8022d7e:	2202      	movs	r2, #2
 8022d80:	4907      	ldr	r1, [pc, #28]	@ (8022da0 <ws_handshake+0xc4>)
 8022d82:	68f8      	ldr	r0, [r7, #12]
 8022d84:	f7f0 ff76 	bl	8013c74 <mg_send>
}
 8022d88:	bf00      	nop
 8022d8a:	37a8      	adds	r7, #168	@ 0xa8
 8022d8c:	46bd      	mov	sp, r7
 8022d8e:	bd80      	pop	{r7, pc}
 8022d90:	0802fd54 	.word	0x0802fd54
 8022d94:	0802fd7c 	.word	0x0802fd7c
 8022d98:	08013f4d 	.word	0x08013f4d
 8022d9c:	0802fde4 	.word	0x0802fde4
 8022da0:	0802d678 	.word	0x0802d678

08022da4 <be32>:

static uint32_t be32(const uint8_t *p) {
 8022da4:	b480      	push	{r7}
 8022da6:	b083      	sub	sp, #12
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	3303      	adds	r3, #3
 8022db0:	781b      	ldrb	r3, [r3, #0]
 8022db2:	461a      	mov	r2, r3
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	3302      	adds	r3, #2
 8022db8:	781b      	ldrb	r3, [r3, #0]
 8022dba:	021b      	lsls	r3, r3, #8
 8022dbc:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	3301      	adds	r3, #1
 8022dc2:	781b      	ldrb	r3, [r3, #0]
 8022dc4:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8022dc6:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	781b      	ldrb	r3, [r3, #0]
 8022dcc:	061b      	lsls	r3, r3, #24
 8022dce:	4313      	orrs	r3, r2
}
 8022dd0:	4618      	mov	r0, r3
 8022dd2:	370c      	adds	r7, #12
 8022dd4:	46bd      	mov	sp, r7
 8022dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dda:	4770      	bx	lr

08022ddc <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 8022ddc:	b5b0      	push	{r4, r5, r7, lr}
 8022dde:	b08a      	sub	sp, #40	@ 0x28
 8022de0:	af00      	add	r7, sp, #0
 8022de2:	60f8      	str	r0, [r7, #12]
 8022de4:	60b9      	str	r1, [r7, #8]
 8022de6:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 8022de8:	2300      	movs	r3, #0
 8022dea:	61fb      	str	r3, [r7, #28]
 8022dec:	2300      	movs	r3, #0
 8022dee:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 8022df0:	220c      	movs	r2, #12
 8022df2:	2100      	movs	r1, #0
 8022df4:	6878      	ldr	r0, [r7, #4]
 8022df6:	f005 fcd3 	bl	80287a0 <memset>
  if (len >= 2) {
 8022dfa:	68bb      	ldr	r3, [r7, #8]
 8022dfc:	2b01      	cmp	r3, #1
 8022dfe:	d953      	bls.n	8022ea8 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 8022e00:	68fb      	ldr	r3, [r7, #12]
 8022e02:	3301      	adds	r3, #1
 8022e04:	781b      	ldrb	r3, [r3, #0]
 8022e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022e0a:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 8022e0c:	68fb      	ldr	r3, [r7, #12]
 8022e0e:	3301      	adds	r3, #1
 8022e10:	781b      	ldrb	r3, [r3, #0]
 8022e12:	b25b      	sxtb	r3, r3
 8022e14:	115b      	asrs	r3, r3, #5
 8022e16:	b25b      	sxtb	r3, r3
 8022e18:	f003 0304 	and.w	r3, r3, #4
 8022e1c:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 8022e1e:	68fb      	ldr	r3, [r7, #12]
 8022e20:	781a      	ldrb	r2, [r3, #0]
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 8022e26:	69fb      	ldr	r3, [r7, #28]
 8022e28:	2b7d      	cmp	r3, #125	@ 0x7d
 8022e2a:	d80b      	bhi.n	8022e44 <ws_process+0x68>
 8022e2c:	68ba      	ldr	r2, [r7, #8]
 8022e2e:	6a3b      	ldr	r3, [r7, #32]
 8022e30:	429a      	cmp	r2, r3
 8022e32:	d307      	bcc.n	8022e44 <ws_process+0x68>
      msg->data_len = n;
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	69fa      	ldr	r2, [r7, #28]
 8022e38:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 8022e3a:	6a3b      	ldr	r3, [r7, #32]
 8022e3c:	1c9a      	adds	r2, r3, #2
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	605a      	str	r2, [r3, #4]
 8022e42:	e031      	b.n	8022ea8 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 8022e44:	69fb      	ldr	r3, [r7, #28]
 8022e46:	2b7e      	cmp	r3, #126	@ 0x7e
 8022e48:	d113      	bne.n	8022e72 <ws_process+0x96>
 8022e4a:	6a3b      	ldr	r3, [r7, #32]
 8022e4c:	3304      	adds	r3, #4
 8022e4e:	68ba      	ldr	r2, [r7, #8]
 8022e50:	429a      	cmp	r2, r3
 8022e52:	d30e      	bcc.n	8022e72 <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 8022e54:	6a3b      	ldr	r3, [r7, #32]
 8022e56:	1d1a      	adds	r2, r3, #4
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 8022e5c:	68fb      	ldr	r3, [r7, #12]
 8022e5e:	3302      	adds	r3, #2
 8022e60:	781b      	ldrb	r3, [r3, #0]
 8022e62:	021b      	lsls	r3, r3, #8
 8022e64:	68fa      	ldr	r2, [r7, #12]
 8022e66:	3203      	adds	r2, #3
 8022e68:	7812      	ldrb	r2, [r2, #0]
 8022e6a:	431a      	orrs	r2, r3
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	609a      	str	r2, [r3, #8]
 8022e70:	e01a      	b.n	8022ea8 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 8022e72:	6a3b      	ldr	r3, [r7, #32]
 8022e74:	330a      	adds	r3, #10
 8022e76:	68ba      	ldr	r2, [r7, #8]
 8022e78:	429a      	cmp	r2, r3
 8022e7a:	d315      	bcc.n	8022ea8 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 8022e7c:	6a3b      	ldr	r3, [r7, #32]
 8022e7e:	f103 020a 	add.w	r2, r3, #10
 8022e82:	687b      	ldr	r3, [r7, #4]
 8022e84:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 8022e86:	68fb      	ldr	r3, [r7, #12]
 8022e88:	3302      	adds	r3, #2
 8022e8a:	4618      	mov	r0, r3
 8022e8c:	f7ff ff8a 	bl	8022da4 <be32>
 8022e90:	4603      	mov	r3, r0
 8022e92:	2200      	movs	r2, #0
 8022e94:	461c      	mov	r4, r3
 8022e96:	4615      	mov	r5, r2
 8022e98:	68fb      	ldr	r3, [r7, #12]
 8022e9a:	3306      	adds	r3, #6
 8022e9c:	4618      	mov	r0, r3
 8022e9e:	f7ff ff81 	bl	8022da4 <be32>
 8022ea2:	4602      	mov	r2, r0
      msg->data_len =
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	689b      	ldr	r3, [r3, #8]
 8022eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022eb0:	d901      	bls.n	8022eb6 <ws_process+0xda>
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	e036      	b.n	8022f24 <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	685a      	ldr	r2, [r3, #4]
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	689b      	ldr	r3, [r3, #8]
 8022ebe:	4413      	add	r3, r2
 8022ec0:	68ba      	ldr	r2, [r7, #8]
 8022ec2:	429a      	cmp	r2, r3
 8022ec4:	d201      	bcs.n	8022eca <ws_process+0xee>
 8022ec6:	2300      	movs	r3, #0
 8022ec8:	e02c      	b.n	8022f24 <ws_process+0x148>
  if (mask_len > 0) {
 8022eca:	6a3b      	ldr	r3, [r7, #32]
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	d024      	beq.n	8022f1a <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 8022ed0:	687b      	ldr	r3, [r7, #4]
 8022ed2:	685b      	ldr	r3, [r3, #4]
 8022ed4:	68fa      	ldr	r2, [r7, #12]
 8022ed6:	4413      	add	r3, r2
 8022ed8:	61bb      	str	r3, [r7, #24]
 8022eda:	6a3b      	ldr	r3, [r7, #32]
 8022edc:	425b      	negs	r3, r3
 8022ede:	69ba      	ldr	r2, [r7, #24]
 8022ee0:	4413      	add	r3, r2
 8022ee2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 8022ee4:	2300      	movs	r3, #0
 8022ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8022ee8:	e012      	b.n	8022f10 <ws_process+0x134>
 8022eea:	69ba      	ldr	r2, [r7, #24]
 8022eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022eee:	4413      	add	r3, r2
 8022ef0:	7819      	ldrb	r1, [r3, #0]
 8022ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ef4:	f003 0303 	and.w	r3, r3, #3
 8022ef8:	697a      	ldr	r2, [r7, #20]
 8022efa:	4413      	add	r3, r2
 8022efc:	781a      	ldrb	r2, [r3, #0]
 8022efe:	69b8      	ldr	r0, [r7, #24]
 8022f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022f02:	4403      	add	r3, r0
 8022f04:	404a      	eors	r2, r1
 8022f06:	b2d2      	uxtb	r2, r2
 8022f08:	701a      	strb	r2, [r3, #0]
 8022f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022f0c:	3301      	adds	r3, #1
 8022f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8022f10:	687b      	ldr	r3, [r7, #4]
 8022f12:	689b      	ldr	r3, [r3, #8]
 8022f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022f16:	429a      	cmp	r2, r3
 8022f18:	d3e7      	bcc.n	8022eea <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	685a      	ldr	r2, [r3, #4]
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	689b      	ldr	r3, [r3, #8]
 8022f22:	4413      	add	r3, r2
}
 8022f24:	4618      	mov	r0, r3
 8022f26:	3728      	adds	r7, #40	@ 0x28
 8022f28:	46bd      	mov	sp, r7
 8022f2a:	bdb0      	pop	{r4, r5, r7, pc}

08022f2c <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 8022f2c:	b5b0      	push	{r4, r5, r7, lr}
 8022f2e:	b088      	sub	sp, #32
 8022f30:	af00      	add	r7, sp, #0
 8022f32:	60f8      	str	r0, [r7, #12]
 8022f34:	60b9      	str	r1, [r7, #8]
 8022f36:	603b      	str	r3, [r7, #0]
 8022f38:	4613      	mov	r3, r2
 8022f3a:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 8022f3c:	2300      	movs	r3, #0
 8022f3e:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 8022f40:	68bb      	ldr	r3, [r7, #8]
 8022f42:	b25b      	sxtb	r3, r3
 8022f44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8022f48:	b25b      	sxtb	r3, r3
 8022f4a:	b2da      	uxtb	r2, r3
 8022f4c:	683b      	ldr	r3, [r7, #0]
 8022f4e:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 8022f50:	68fb      	ldr	r3, [r7, #12]
 8022f52:	2b7d      	cmp	r3, #125	@ 0x7d
 8022f54:	d807      	bhi.n	8022f66 <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 8022f56:	683b      	ldr	r3, [r7, #0]
 8022f58:	3301      	adds	r3, #1
 8022f5a:	68fa      	ldr	r2, [r7, #12]
 8022f5c:	b2d2      	uxtb	r2, r2
 8022f5e:	701a      	strb	r2, [r3, #0]
    n = 2;
 8022f60:	2302      	movs	r3, #2
 8022f62:	61fb      	str	r3, [r7, #28]
 8022f64:	e038      	b.n	8022fd8 <mkhdr+0xac>
  } else if (len < 65536) {
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022f6c:	d211      	bcs.n	8022f92 <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	b29b      	uxth	r3, r3
 8022f72:	4618      	mov	r0, r3
 8022f74:	f7ff fe80 	bl	8022c78 <mg_ntohs>
 8022f78:	4603      	mov	r3, r0
 8022f7a:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 8022f7c:	683b      	ldr	r3, [r7, #0]
 8022f7e:	3301      	adds	r3, #1
 8022f80:	227e      	movs	r2, #126	@ 0x7e
 8022f82:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 8022f84:	683b      	ldr	r3, [r7, #0]
 8022f86:	3302      	adds	r3, #2
 8022f88:	8b7a      	ldrh	r2, [r7, #26]
 8022f8a:	801a      	strh	r2, [r3, #0]
    n = 4;
 8022f8c:	2304      	movs	r3, #4
 8022f8e:	61fb      	str	r3, [r7, #28]
 8022f90:	e022      	b.n	8022fd8 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 8022f92:	683b      	ldr	r3, [r7, #0]
 8022f94:	3301      	adds	r3, #1
 8022f96:	227f      	movs	r2, #127	@ 0x7f
 8022f98:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	2200      	movs	r2, #0
 8022f9e:	461c      	mov	r4, r3
 8022fa0:	4615      	mov	r5, r2
 8022fa2:	f04f 0200 	mov.w	r2, #0
 8022fa6:	f04f 0300 	mov.w	r3, #0
 8022faa:	002a      	movs	r2, r5
 8022fac:	2300      	movs	r3, #0
 8022fae:	4613      	mov	r3, r2
 8022fb0:	4618      	mov	r0, r3
 8022fb2:	f7ff fe78 	bl	8022ca6 <mg_ntohl>
 8022fb6:	4603      	mov	r3, r0
 8022fb8:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 8022fba:	683b      	ldr	r3, [r7, #0]
 8022fbc:	3302      	adds	r3, #2
 8022fbe:	697a      	ldr	r2, [r7, #20]
 8022fc0:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 8022fc2:	68f8      	ldr	r0, [r7, #12]
 8022fc4:	f7ff fe6f 	bl	8022ca6 <mg_ntohl>
 8022fc8:	4603      	mov	r3, r0
 8022fca:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 8022fcc:	683b      	ldr	r3, [r7, #0]
 8022fce:	3306      	adds	r3, #6
 8022fd0:	697a      	ldr	r2, [r7, #20]
 8022fd2:	601a      	str	r2, [r3, #0]
    n = 10;
 8022fd4:	230a      	movs	r3, #10
 8022fd6:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 8022fd8:	79fb      	ldrb	r3, [r7, #7]
 8022fda:	2b00      	cmp	r3, #0
 8022fdc:	d012      	beq.n	8023004 <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 8022fde:	683b      	ldr	r3, [r7, #0]
 8022fe0:	3301      	adds	r3, #1
 8022fe2:	781a      	ldrb	r2, [r3, #0]
 8022fe4:	683b      	ldr	r3, [r7, #0]
 8022fe6:	3301      	adds	r3, #1
 8022fe8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8022fec:	b2d2      	uxtb	r2, r2
 8022fee:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 8022ff0:	683a      	ldr	r2, [r7, #0]
 8022ff2:	69fb      	ldr	r3, [r7, #28]
 8022ff4:	4413      	add	r3, r2
 8022ff6:	2104      	movs	r1, #4
 8022ff8:	4618      	mov	r0, r3
 8022ffa:	f7dd fdcb 	bl	8000b94 <mg_random>
    n += 4;
 8022ffe:	69fb      	ldr	r3, [r7, #28]
 8023000:	3304      	adds	r3, #4
 8023002:	61fb      	str	r3, [r7, #28]
  }
  return n;
 8023004:	69fb      	ldr	r3, [r7, #28]
}
 8023006:	4618      	mov	r0, r3
 8023008:	3720      	adds	r7, #32
 802300a:	46bd      	mov	sp, r7
 802300c:	bdb0      	pop	{r4, r5, r7, pc}

0802300e <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 802300e:	b480      	push	{r7}
 8023010:	b087      	sub	sp, #28
 8023012:	af00      	add	r7, sp, #0
 8023014:	6078      	str	r0, [r7, #4]
 8023016:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802301e:	f003 0302 	and.w	r3, r3, #2
 8023022:	b2db      	uxtb	r3, r3
 8023024:	2b00      	cmp	r3, #0
 8023026:	d028      	beq.n	802307a <mg_ws_mask+0x6c>
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802302c:	2b00      	cmp	r3, #0
 802302e:	d024      	beq.n	802307a <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8023034:	687b      	ldr	r3, [r7, #4]
 8023036:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8023038:	683b      	ldr	r3, [r7, #0]
 802303a:	1acb      	subs	r3, r1, r3
 802303c:	4413      	add	r3, r2
 802303e:	613b      	str	r3, [r7, #16]
 8023040:	693b      	ldr	r3, [r7, #16]
 8023042:	3b04      	subs	r3, #4
 8023044:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 8023046:	2300      	movs	r3, #0
 8023048:	617b      	str	r3, [r7, #20]
 802304a:	e012      	b.n	8023072 <mg_ws_mask+0x64>
 802304c:	693a      	ldr	r2, [r7, #16]
 802304e:	697b      	ldr	r3, [r7, #20]
 8023050:	4413      	add	r3, r2
 8023052:	7819      	ldrb	r1, [r3, #0]
 8023054:	697b      	ldr	r3, [r7, #20]
 8023056:	f003 0303 	and.w	r3, r3, #3
 802305a:	68fa      	ldr	r2, [r7, #12]
 802305c:	4413      	add	r3, r2
 802305e:	781a      	ldrb	r2, [r3, #0]
 8023060:	6938      	ldr	r0, [r7, #16]
 8023062:	697b      	ldr	r3, [r7, #20]
 8023064:	4403      	add	r3, r0
 8023066:	404a      	eors	r2, r1
 8023068:	b2d2      	uxtb	r2, r2
 802306a:	701a      	strb	r2, [r3, #0]
 802306c:	697b      	ldr	r3, [r7, #20]
 802306e:	3301      	adds	r3, #1
 8023070:	617b      	str	r3, [r7, #20]
 8023072:	697a      	ldr	r2, [r7, #20]
 8023074:	683b      	ldr	r3, [r7, #0]
 8023076:	429a      	cmp	r2, r3
 8023078:	d3e8      	bcc.n	802304c <mg_ws_mask+0x3e>
  }
}
 802307a:	bf00      	nop
 802307c:	371c      	adds	r7, #28
 802307e:	46bd      	mov	sp, r7
 8023080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023084:	4770      	bx	lr
	...

08023088 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 8023088:	b580      	push	{r7, lr}
 802308a:	b08a      	sub	sp, #40	@ 0x28
 802308c:	af00      	add	r7, sp, #0
 802308e:	60f8      	str	r0, [r7, #12]
 8023090:	60b9      	str	r1, [r7, #8]
 8023092:	607a      	str	r2, [r7, #4]
 8023094:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 8023096:	68fb      	ldr	r3, [r7, #12]
 8023098:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802309c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80230a0:	b2db      	uxtb	r3, r3
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	bf14      	ite	ne
 80230a6:	2301      	movne	r3, #1
 80230a8:	2300      	moveq	r3, #0
 80230aa:	b2da      	uxtb	r2, r3
 80230ac:	f107 0314 	add.w	r3, r7, #20
 80230b0:	6839      	ldr	r1, [r7, #0]
 80230b2:	6878      	ldr	r0, [r7, #4]
 80230b4:	f7ff ff3a 	bl	8022f2c <mkhdr>
 80230b8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 80230ba:	f107 0314 	add.w	r3, r7, #20
 80230be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80230c0:	4619      	mov	r1, r3
 80230c2:	68f8      	ldr	r0, [r7, #12]
 80230c4:	f7f0 fdd6 	bl	8013c74 <mg_send>
 80230c8:	4603      	mov	r3, r0
 80230ca:	f083 0301 	eor.w	r3, r3, #1
 80230ce:	b2db      	uxtb	r3, r3
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	d001      	beq.n	80230d8 <mg_ws_send+0x50>
 80230d4:	2300      	movs	r3, #0
 80230d6:	e024      	b.n	8023122 <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 80230d8:	687a      	ldr	r2, [r7, #4]
 80230da:	68b9      	ldr	r1, [r7, #8]
 80230dc:	68f8      	ldr	r0, [r7, #12]
 80230de:	f7f0 fdc9 	bl	8013c74 <mg_send>
 80230e2:	4603      	mov	r3, r0
 80230e4:	f083 0301 	eor.w	r3, r3, #1
 80230e8:	b2db      	uxtb	r3, r3
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	d001      	beq.n	80230f2 <mg_ws_send+0x6a>
 80230ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230f0:	e017      	b.n	8023122 <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 80230f2:	4b0e      	ldr	r3, [pc, #56]	@ (802312c <mg_ws_send+0xa4>)
 80230f4:	681b      	ldr	r3, [r3, #0]
 80230f6:	2b03      	cmp	r3, #3
 80230f8:	dd0c      	ble.n	8023114 <mg_ws_send+0x8c>
 80230fa:	4b0d      	ldr	r3, [pc, #52]	@ (8023130 <mg_ws_send+0xa8>)
 80230fc:	f644 627c 	movw	r2, #20092	@ 0x4e7c
 8023100:	490c      	ldr	r1, [pc, #48]	@ (8023134 <mg_ws_send+0xac>)
 8023102:	2004      	movs	r0, #4
 8023104:	f7ec fb1e 	bl	800f744 <mg_log_prefix>
 8023108:	6879      	ldr	r1, [r7, #4]
 802310a:	687a      	ldr	r2, [r7, #4]
 802310c:	68bb      	ldr	r3, [r7, #8]
 802310e:	480a      	ldr	r0, [pc, #40]	@ (8023138 <mg_ws_send+0xb0>)
 8023110:	f7ec fb68 	bl	800f7e4 <mg_log>
  mg_ws_mask(c, len);
 8023114:	6879      	ldr	r1, [r7, #4]
 8023116:	68f8      	ldr	r0, [r7, #12]
 8023118:	f7ff ff79 	bl	802300e <mg_ws_mask>
  return header_len + len;
 802311c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	4413      	add	r3, r2
}
 8023122:	4618      	mov	r0, r3
 8023124:	3728      	adds	r7, #40	@ 0x28
 8023126:	46bd      	mov	sp, r7
 8023128:	bd80      	pop	{r7, pc}
 802312a:	bf00      	nop
 802312c:	2400025c 	.word	0x2400025c
 8023130:	080314d8 	.word	0x080314d8
 8023134:	0802d330 	.word	0x0802d330
 8023138:	0802fe04 	.word	0x0802fe04

0802313c <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 802313c:	b580      	push	{r7, lr}
 802313e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8023142:	af00      	add	r7, sp, #0
 8023144:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8023148:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802314c:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 802314e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8023152:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8023156:	681b      	ldr	r3, [r3, #0]
 8023158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802315a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802315e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8023162:	681b      	ldr	r3, [r3, #0]
 8023164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8023166:	4619      	mov	r1, r3
 8023168:	4610      	mov	r0, r2
 802316a:	f7e8 fab3 	bl	800b6d4 <mg_http_get_request_len>
 802316e:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 8023172:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8023176:	2b00      	cmp	r3, #0
 8023178:	da08      	bge.n	802318c <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 802317a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802317e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8023182:	4936      	ldr	r1, [pc, #216]	@ (802325c <mg_ws_client_handshake+0x120>)
 8023184:	6818      	ldr	r0, [r3, #0]
 8023186:	f7e6 fbe7 	bl	8009958 <mg_error>
 802318a:	e060      	b.n	802324e <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 802318c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8023190:	2b00      	cmp	r3, #0
 8023192:	dd5a      	ble.n	802324a <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 8023194:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8023198:	2b0e      	cmp	r3, #14
 802319a:	dd0e      	ble.n	80231ba <mg_ws_client_handshake+0x7e>
 802319c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80231a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80231a8:	3309      	adds	r3, #9
 80231aa:	2203      	movs	r2, #3
 80231ac:	492c      	ldr	r1, [pc, #176]	@ (8023260 <mg_ws_client_handshake+0x124>)
 80231ae:	4618      	mov	r0, r3
 80231b0:	f005 facc 	bl	802874c <memcmp>
 80231b4:	4603      	mov	r3, r0
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d008      	beq.n	80231cc <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 80231ba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80231be:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80231c2:	4928      	ldr	r1, [pc, #160]	@ (8023264 <mg_ws_client_handshake+0x128>)
 80231c4:	6818      	ldr	r0, [r3, #0]
 80231c6:	f7e6 fbc7 	bl	8009958 <mg_error>
 80231ca:	e031      	b.n	8023230 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 80231cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80231d0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80231d8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80231dc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80231e4:	f107 020c 	add.w	r2, r7, #12
 80231e8:	4619      	mov	r1, r3
 80231ea:	f7e8 fc7d 	bl	800bae8 <mg_http_parse>
 80231ee:	4603      	mov	r3, r0
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d015      	beq.n	8023220 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 80231f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80231f8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80231fc:	681a      	ldr	r2, [r3, #0]
 80231fe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8023202:	f043 0302 	orr.w	r3, r3, #2
 8023206:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 802320a:	f107 020c 	add.w	r2, r7, #12
 802320e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8023212:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8023216:	210c      	movs	r1, #12
 8023218:	6818      	ldr	r0, [r3, #0]
 802321a:	f7e6 fb7d 	bl	8009918 <mg_call>
 802321e:	e007      	b.n	8023230 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 8023220:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8023224:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8023228:	490e      	ldr	r1, [pc, #56]	@ (8023264 <mg_ws_client_handshake+0x128>)
 802322a:	6818      	ldr	r0, [r3, #0]
 802322c:	f7e6 fb94 	bl	8009958 <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 8023230:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8023234:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	3338      	adds	r3, #56	@ 0x38
 802323c:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8023240:	2100      	movs	r1, #0
 8023242:	4618      	mov	r0, r3
 8023244:	f7eb fa66 	bl	800e714 <mg_iobuf_del>
 8023248:	e001      	b.n	802324e <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 802324a:	2301      	movs	r3, #1
 802324c:	e000      	b.n	8023250 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 802324e:	2300      	movs	r3, #0
}
 8023250:	4618      	mov	r0, r3
 8023252:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 8023256:	46bd      	mov	sp, r7
 8023258:	bd80      	pop	{r7, pc}
 802325a:	bf00      	nop
 802325c:	0802fe18 	.word	0x0802fe18
 8023260:	0802fe24 	.word	0x0802fe24
 8023264:	0802fe28 	.word	0x0802fe28

08023268 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 8023268:	b580      	push	{r7, lr}
 802326a:	b090      	sub	sp, #64	@ 0x40
 802326c:	af00      	add	r7, sp, #0
 802326e:	6178      	str	r0, [r7, #20]
 8023270:	6139      	str	r1, [r7, #16]
 8023272:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 8023274:	697b      	ldr	r3, [r7, #20]
 8023276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802327a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 802327c:	693b      	ldr	r3, [r7, #16]
 802327e:	2b07      	cmp	r3, #7
 8023280:	f040 813c 	bne.w	80234fc <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 8023284:	697b      	ldr	r3, [r7, #20]
 8023286:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802328a:	f003 0302 	and.w	r3, r3, #2
 802328e:	b2db      	uxtb	r3, r3
 8023290:	2b00      	cmp	r3, #0
 8023292:	f000 8120 	beq.w	80234d6 <mg_ws_cb+0x26e>
 8023296:	697b      	ldr	r3, [r7, #20]
 8023298:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802329c:	f003 0302 	and.w	r3, r3, #2
 80232a0:	b2db      	uxtb	r3, r3
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	f040 8117 	bne.w	80234d6 <mg_ws_cb+0x26e>
 80232a8:	6978      	ldr	r0, [r7, #20]
 80232aa:	f7ff ff47 	bl	802313c <mg_ws_client_handshake>
 80232ae:	4603      	mov	r3, r0
 80232b0:	2b00      	cmp	r3, #0
 80232b2:	f040 8122 	bne.w	80234fa <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 80232b6:	e10e      	b.n	80234d6 <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 80232b8:	697b      	ldr	r3, [r7, #20]
 80232ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80232bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80232be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80232c0:	440b      	add	r3, r1
 80232c2:	4413      	add	r3, r2
 80232c4:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 80232c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80232c8:	61bb      	str	r3, [r7, #24]
 80232ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80232cc:	61fb      	str	r3, [r7, #28]
 80232ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80232d2:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 80232d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80232d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80232da:	4413      	add	r3, r2
 80232dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 80232de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80232e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80232e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80232ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80232ee:	f003 030f 	and.w	r3, r3, #15
 80232f2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 80232f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80232fa:	2b0a      	cmp	r3, #10
 80232fc:	d877      	bhi.n	80233ee <mg_ws_cb+0x186>
 80232fe:	a201      	add	r2, pc, #4	@ (adr r2, 8023304 <mg_ws_cb+0x9c>)
 8023300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023304:	08023331 	.word	0x08023331
 8023308:	0802338b 	.word	0x0802338b
 802330c:	0802338b 	.word	0x0802338b
 8023310:	080233ef 	.word	0x080233ef
 8023314:	080233ef 	.word	0x080233ef
 8023318:	080233ef 	.word	0x080233ef
 802331c:	080233ef 	.word	0x080233ef
 8023320:	080233ef 	.word	0x080233ef
 8023324:	080233a3 	.word	0x080233a3
 8023328:	08023341 	.word	0x08023341
 802332c:	0802337b 	.word	0x0802337b
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 8023330:	f107 0318 	add.w	r3, r7, #24
 8023334:	461a      	mov	r2, r3
 8023336:	210e      	movs	r1, #14
 8023338:	6978      	ldr	r0, [r7, #20]
 802333a:	f7e6 faed 	bl	8009918 <mg_call>
          break;
 802333e:	e05f      	b.n	8023400 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 8023340:	4b70      	ldr	r3, [pc, #448]	@ (8023504 <mg_ws_cb+0x29c>)
 8023342:	681b      	ldr	r3, [r3, #0]
 8023344:	2b02      	cmp	r3, #2
 8023346:	dd0a      	ble.n	802335e <mg_ws_cb+0xf6>
 8023348:	4b6f      	ldr	r3, [pc, #444]	@ (8023508 <mg_ws_cb+0x2a0>)
 802334a:	f644 62ac 	movw	r2, #20140	@ 0x4eac
 802334e:	496f      	ldr	r1, [pc, #444]	@ (802350c <mg_ws_cb+0x2a4>)
 8023350:	2003      	movs	r0, #3
 8023352:	f7ec f9f7 	bl	800f744 <mg_log_prefix>
 8023356:	496e      	ldr	r1, [pc, #440]	@ (8023510 <mg_ws_cb+0x2a8>)
 8023358:	486e      	ldr	r0, [pc, #440]	@ (8023514 <mg_ws_cb+0x2ac>)
 802335a:	f7ec fa43 	bl	800f7e4 <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 802335e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023360:	230a      	movs	r3, #10
 8023362:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023364:	6978      	ldr	r0, [r7, #20]
 8023366:	f7ff fe8f 	bl	8023088 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 802336a:	f107 0318 	add.w	r3, r7, #24
 802336e:	461a      	mov	r2, r3
 8023370:	210e      	movs	r1, #14
 8023372:	6978      	ldr	r0, [r7, #20]
 8023374:	f7e6 fad0 	bl	8009918 <mg_call>
          break;
 8023378:	e042      	b.n	8023400 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 802337a:	f107 0318 	add.w	r3, r7, #24
 802337e:	461a      	mov	r2, r3
 8023380:	210e      	movs	r1, #14
 8023382:	6978      	ldr	r0, [r7, #20]
 8023384:	f7e6 fac8 	bl	8009918 <mg_call>
          break;
 8023388:	e03a      	b.n	8023400 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 802338a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 802338e:	2b00      	cmp	r3, #0
 8023390:	d035      	beq.n	80233fe <mg_ws_cb+0x196>
 8023392:	f107 0318 	add.w	r3, r7, #24
 8023396:	461a      	mov	r2, r3
 8023398:	210d      	movs	r1, #13
 802339a:	6978      	ldr	r0, [r7, #20]
 802339c:	f7e6 fabc 	bl	8009918 <mg_call>
          break;
 80233a0:	e02d      	b.n	80233fe <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 80233a2:	4b58      	ldr	r3, [pc, #352]	@ (8023504 <mg_ws_cb+0x29c>)
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	2b02      	cmp	r3, #2
 80233a8:	dd0c      	ble.n	80233c4 <mg_ws_cb+0x15c>
 80233aa:	4b57      	ldr	r3, [pc, #348]	@ (8023508 <mg_ws_cb+0x2a0>)
 80233ac:	f644 62b8 	movw	r2, #20152	@ 0x4eb8
 80233b0:	4956      	ldr	r1, [pc, #344]	@ (802350c <mg_ws_cb+0x2a4>)
 80233b2:	2003      	movs	r0, #3
 80233b4:	f7ec f9c6 	bl	800f744 <mg_log_prefix>
 80233b8:	697b      	ldr	r3, [r7, #20]
 80233ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80233bc:	4619      	mov	r1, r3
 80233be:	4856      	ldr	r0, [pc, #344]	@ (8023518 <mg_ws_cb+0x2b0>)
 80233c0:	f7ec fa10 	bl	800f7e4 <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 80233c4:	f107 0318 	add.w	r3, r7, #24
 80233c8:	461a      	mov	r2, r3
 80233ca:	210e      	movs	r1, #14
 80233cc:	6978      	ldr	r0, [r7, #20]
 80233ce:	f7e6 faa3 	bl	8009918 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 80233d2:	69b9      	ldr	r1, [r7, #24]
 80233d4:	69fa      	ldr	r2, [r7, #28]
 80233d6:	2308      	movs	r3, #8
 80233d8:	6978      	ldr	r0, [r7, #20]
 80233da:	f7ff fe55 	bl	8023088 <mg_ws_send>
          c->is_draining = 1;
 80233de:	697a      	ldr	r2, [r7, #20]
 80233e0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80233e4:	f043 0310 	orr.w	r3, r3, #16
 80233e8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 80233ec:	e008      	b.n	8023400 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 80233ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80233f2:	461a      	mov	r2, r3
 80233f4:	4949      	ldr	r1, [pc, #292]	@ (802351c <mg_ws_cb+0x2b4>)
 80233f6:	6978      	ldr	r0, [r7, #20]
 80233f8:	f7e6 faae 	bl	8009958 <mg_error>
          break;
 80233fc:	e000      	b.n	8023400 <mg_ws_cb+0x198>
          break;
 80233fe:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 8023400:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8023404:	2b00      	cmp	r3, #0
 8023406:	d003      	beq.n	8023410 <mg_ws_cb+0x1a8>
 8023408:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802340c:	2b00      	cmp	r3, #0
 802340e:	d11f      	bne.n	8023450 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 8023410:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8023414:	2b00      	cmp	r3, #0
 8023416:	d008      	beq.n	802342a <mg_ws_cb+0x1c2>
 8023418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802341a:	3301      	adds	r3, #1
 802341c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023420:	3b01      	subs	r3, #1
 8023422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8023424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023426:	3b01      	subs	r3, #1
 8023428:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 802342a:	697b      	ldr	r3, [r7, #20]
 802342c:	3338      	adds	r3, #56	@ 0x38
 802342e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023430:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023432:	4618      	mov	r0, r3
 8023434:	f7eb f96e 	bl	800e714 <mg_iobuf_del>
        len -= msg.header_len;
 8023438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802343a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802343c:	1ad3      	subs	r3, r2, r3
 802343e:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 8023440:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023444:	4413      	add	r3, r2
 8023446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 8023448:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802344a:	697b      	ldr	r3, [r7, #20]
 802344c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 8023450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8023454:	2b00      	cmp	r3, #0
 8023456:	d00a      	beq.n	802346e <mg_ws_cb+0x206>
 8023458:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802345c:	2b00      	cmp	r3, #0
 802345e:	d006      	beq.n	802346e <mg_ws_cb+0x206>
 8023460:	697b      	ldr	r3, [r7, #20]
 8023462:	3338      	adds	r3, #56	@ 0x38
 8023464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023466:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023468:	4618      	mov	r0, r3
 802346a:	f7eb f953 	bl	800e714 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 802346e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8023472:	2b00      	cmp	r3, #0
 8023474:	d02f      	beq.n	80234d6 <mg_ws_cb+0x26e>
 8023476:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802347a:	2b00      	cmp	r3, #0
 802347c:	d12b      	bne.n	80234d6 <mg_ws_cb+0x26e>
 802347e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023480:	2b00      	cmp	r3, #0
 8023482:	d028      	beq.n	80234d6 <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 8023484:	697b      	ldr	r3, [r7, #20]
 8023486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023488:	781b      	ldrb	r3, [r3, #0]
 802348a:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 802348e:	697b      	ldr	r3, [r7, #20]
 8023490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023492:	1c59      	adds	r1, r3, #1
 8023494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023496:	1e5a      	subs	r2, r3, #1
 8023498:	463b      	mov	r3, r7
 802349a:	4618      	mov	r0, r3
 802349c:	f7f4 f96f 	bl	801777e <mg_str_n>
 80234a0:	f107 0318 	add.w	r3, r7, #24
 80234a4:	463a      	mov	r2, r7
 80234a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80234aa:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 80234ae:	f107 0318 	add.w	r3, r7, #24
 80234b2:	461a      	mov	r2, r3
 80234b4:	210d      	movs	r1, #13
 80234b6:	6978      	ldr	r0, [r7, #20]
 80234b8:	f7e6 fa2e 	bl	8009918 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 80234bc:	697b      	ldr	r3, [r7, #20]
 80234be:	3338      	adds	r3, #56	@ 0x38
 80234c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80234c2:	2100      	movs	r1, #0
 80234c4:	4618      	mov	r0, r3
 80234c6:	f7eb f925 	bl	800e714 <mg_iobuf_del>
        ofs = 0;
 80234ca:	2300      	movs	r3, #0
 80234cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 80234ce:	697b      	ldr	r3, [r7, #20]
 80234d0:	2200      	movs	r2, #0
 80234d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 80234d6:	697b      	ldr	r3, [r7, #20]
 80234d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80234da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80234dc:	18d0      	adds	r0, r2, r3
 80234de:	697b      	ldr	r3, [r7, #20]
 80234e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80234e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80234e4:	1ad3      	subs	r3, r2, r3
 80234e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80234ea:	4619      	mov	r1, r3
 80234ec:	f7ff fc76 	bl	8022ddc <ws_process>
 80234f0:	4603      	mov	r3, r0
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	f47f aee0 	bne.w	80232b8 <mg_ws_cb+0x50>
 80234f8:	e000      	b.n	80234fc <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 80234fa:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 80234fc:	3740      	adds	r7, #64	@ 0x40
 80234fe:	46bd      	mov	sp, r7
 8023500:	bd80      	pop	{r7, pc}
 8023502:	bf00      	nop
 8023504:	2400025c 	.word	0x2400025c
 8023508:	080314e4 	.word	0x080314e4
 802350c:	0802d330 	.word	0x0802d330
 8023510:	0802fe3c 	.word	0x0802fe3c
 8023514:	0802d5fc 	.word	0x0802d5fc
 8023518:	0802fe44 	.word	0x0802fe44
 802351c:	0802fe54 	.word	0x0802fe54

08023520 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 8023520:	b40c      	push	{r2, r3}
 8023522:	b580      	push	{r7, lr}
 8023524:	b088      	sub	sp, #32
 8023526:	af02      	add	r7, sp, #8
 8023528:	6078      	str	r0, [r7, #4]
 802352a:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 802352c:	4924      	ldr	r1, [pc, #144]	@ (80235c0 <mg_ws_upgrade+0xa0>)
 802352e:	6838      	ldr	r0, [r7, #0]
 8023530:	f7e8 f91e 	bl	800b770 <mg_http_get_header>
 8023534:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 8023536:	687b      	ldr	r3, [r7, #4]
 8023538:	4a22      	ldr	r2, [pc, #136]	@ (80235c4 <mg_ws_upgrade+0xa4>)
 802353a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	2200      	movs	r2, #0
 8023542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 8023546:	697b      	ldr	r3, [r7, #20]
 8023548:	2b00      	cmp	r3, #0
 802354a:	d10e      	bne.n	802356a <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 802354c:	4b1e      	ldr	r3, [pc, #120]	@ (80235c8 <mg_ws_upgrade+0xa8>)
 802354e:	4a1f      	ldr	r2, [pc, #124]	@ (80235cc <mg_ws_upgrade+0xac>)
 8023550:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8023554:	6878      	ldr	r0, [r7, #4]
 8023556:	f7e9 f981 	bl	800c85c <mg_http_reply>
    c->is_draining = 1;
 802355a:	687a      	ldr	r2, [r7, #4]
 802355c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8023560:	f043 0310 	orr.w	r3, r3, #16
 8023564:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 8023568:	e023      	b.n	80235b2 <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 802356a:	4919      	ldr	r1, [pc, #100]	@ (80235d0 <mg_ws_upgrade+0xb0>)
 802356c:	6838      	ldr	r0, [r7, #0]
 802356e:	f7e8 f8ff 	bl	800b770 <mg_http_get_header>
 8023572:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 8023574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8023578:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 802357a:	f107 030c 	add.w	r3, r7, #12
 802357e:	9300      	str	r3, [sp, #0]
 8023580:	6a3b      	ldr	r3, [r7, #32]
 8023582:	693a      	ldr	r2, [r7, #16]
 8023584:	6979      	ldr	r1, [r7, #20]
 8023586:	6878      	ldr	r0, [r7, #4]
 8023588:	f7ff fba8 	bl	8022cdc <ws_handshake>
    c->is_websocket = 1;
 802358c:	687a      	ldr	r2, [r7, #4]
 802358e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8023592:	f043 0302 	orr.w	r3, r3, #2
 8023596:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 802359a:	687a      	ldr	r2, [r7, #4]
 802359c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80235a0:	f023 0301 	bic.w	r3, r3, #1
 80235a4:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 80235a8:	683a      	ldr	r2, [r7, #0]
 80235aa:	210c      	movs	r1, #12
 80235ac:	6878      	ldr	r0, [r7, #4]
 80235ae:	f7e6 f9b3 	bl	8009918 <mg_call>
}
 80235b2:	bf00      	nop
 80235b4:	3718      	adds	r7, #24
 80235b6:	46bd      	mov	sp, r7
 80235b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80235bc:	b002      	add	sp, #8
 80235be:	4770      	bx	lr
 80235c0:	0802fee4 	.word	0x0802fee4
 80235c4:	08023269 	.word	0x08023269
 80235c8:	0802fef8 	.word	0x0802fef8
 80235cc:	0802db70 	.word	0x0802db70
 80235d0:	0802ff10 	.word	0x0802ff10

080235d4 <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 80235d4:	b480      	push	{r7}
 80235d6:	b083      	sub	sp, #12
 80235d8:	af00      	add	r7, sp, #0
 80235da:	4603      	mov	r3, r0
 80235dc:	460a      	mov	r2, r1
 80235de:	80fb      	strh	r3, [r7, #6]
 80235e0:	4613      	mov	r3, r2
 80235e2:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 80235e4:	88fb      	ldrh	r3, [r7, #6]
 80235e6:	2b22      	cmp	r3, #34	@ 0x22
 80235e8:	dc40      	bgt.n	802366c <mg_phy_id_to_str+0x98>
 80235ea:	2b07      	cmp	r3, #7
 80235ec:	db63      	blt.n	80236b6 <mg_phy_id_to_str+0xe2>
 80235ee:	3b07      	subs	r3, #7
 80235f0:	2b1b      	cmp	r3, #27
 80235f2:	d860      	bhi.n	80236b6 <mg_phy_id_to_str+0xe2>
 80235f4:	a201      	add	r2, pc, #4	@ (adr r2, 80235fc <mg_phy_id_to_str+0x28>)
 80235f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80235fa:	bf00      	nop
 80235fc:	080236ab 	.word	0x080236ab
 8023600:	080236b7 	.word	0x080236b7
 8023604:	080236b7 	.word	0x080236b7
 8023608:	080236b7 	.word	0x080236b7
 802360c:	080236b7 	.word	0x080236b7
 8023610:	080236b7 	.word	0x080236b7
 8023614:	080236b7 	.word	0x080236b7
 8023618:	080236b7 	.word	0x080236b7
 802361c:	080236b7 	.word	0x080236b7
 8023620:	080236b7 	.word	0x080236b7
 8023624:	080236b7 	.word	0x080236b7
 8023628:	080236b7 	.word	0x080236b7
 802362c:	080236b7 	.word	0x080236b7
 8023630:	080236b7 	.word	0x080236b7
 8023634:	080236b3 	.word	0x080236b3
 8023638:	080236b7 	.word	0x080236b7
 802363c:	080236b7 	.word	0x080236b7
 8023640:	080236b7 	.word	0x080236b7
 8023644:	080236b7 	.word	0x080236b7
 8023648:	080236b7 	.word	0x080236b7
 802364c:	080236b7 	.word	0x080236b7
 8023650:	080236af 	.word	0x080236af
 8023654:	080236b7 	.word	0x080236b7
 8023658:	080236b7 	.word	0x080236b7
 802365c:	080236b7 	.word	0x080236b7
 8023660:	080236b7 	.word	0x080236b7
 8023664:	080236b7 	.word	0x080236b7
 8023668:	080236a7 	.word	0x080236a7
 802366c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8023670:	d121      	bne.n	80236b6 <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 8023672:	88bb      	ldrh	r3, [r7, #4]
 8023674:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8023678:	4293      	cmp	r3, r2
 802367a:	d00c      	beq.n	8023696 <mg_phy_id_to_str+0xc2>
 802367c:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8023680:	4293      	cmp	r3, r2
 8023682:	dc0e      	bgt.n	80236a2 <mg_phy_id_to_str+0xce>
 8023684:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8023688:	4293      	cmp	r3, r2
 802368a:	d006      	beq.n	802369a <mg_phy_id_to_str+0xc6>
 802368c:	f24a 1240 	movw	r2, #41280	@ 0xa140
 8023690:	4293      	cmp	r3, r2
 8023692:	d004      	beq.n	802369e <mg_phy_id_to_str+0xca>
 8023694:	e005      	b.n	80236a2 <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 8023696:	4b0b      	ldr	r3, [pc, #44]	@ (80236c4 <mg_phy_id_to_str+0xf0>)
 8023698:	e00e      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 802369a:	4b0b      	ldr	r3, [pc, #44]	@ (80236c8 <mg_phy_id_to_str+0xf4>)
 802369c:	e00c      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 802369e:	4b0b      	ldr	r3, [pc, #44]	@ (80236cc <mg_phy_id_to_str+0xf8>)
 80236a0:	e00a      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 80236a2:	4b0b      	ldr	r3, [pc, #44]	@ (80236d0 <mg_phy_id_to_str+0xfc>)
 80236a4:	e008      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 80236a6:	4b0b      	ldr	r3, [pc, #44]	@ (80236d4 <mg_phy_id_to_str+0x100>)
 80236a8:	e006      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 80236aa:	4b0b      	ldr	r3, [pc, #44]	@ (80236d8 <mg_phy_id_to_str+0x104>)
 80236ac:	e004      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 80236ae:	4b0b      	ldr	r3, [pc, #44]	@ (80236dc <mg_phy_id_to_str+0x108>)
 80236b0:	e002      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 80236b2:	4b0b      	ldr	r3, [pc, #44]	@ (80236e0 <mg_phy_id_to_str+0x10c>)
 80236b4:	e000      	b.n	80236b8 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 80236b6:	4b0b      	ldr	r3, [pc, #44]	@ (80236e4 <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 80236b8:	4618      	mov	r0, r3
 80236ba:	370c      	adds	r7, #12
 80236bc:	46bd      	mov	sp, r7
 80236be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236c2:	4770      	bx	lr
 80236c4:	0802ff28 	.word	0x0802ff28
 80236c8:	0802ff30 	.word	0x0802ff30
 80236cc:	0802ff38 	.word	0x0802ff38
 80236d0:	0802ff40 	.word	0x0802ff40
 80236d4:	0802ff48 	.word	0x0802ff48
 80236d8:	0802ff50 	.word	0x0802ff50
 80236dc:	0802ff58 	.word	0x0802ff58
 80236e0:	0802ff60 	.word	0x0802ff60
 80236e4:	0802ff6c 	.word	0x0802ff6c

080236e8 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 80236e8:	b5b0      	push	{r4, r5, r7, lr}
 80236ea:	b084      	sub	sp, #16
 80236ec:	af00      	add	r7, sp, #0
 80236ee:	6078      	str	r0, [r7, #4]
 80236f0:	460b      	mov	r3, r1
 80236f2:	70fb      	strb	r3, [r7, #3]
 80236f4:	4613      	mov	r3, r2
 80236f6:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	685b      	ldr	r3, [r3, #4]
 80236fc:	78f8      	ldrb	r0, [r7, #3]
 80236fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8023702:	2100      	movs	r1, #0
 8023704:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8023706:	bf00      	nop
 8023708:	687b      	ldr	r3, [r7, #4]
 802370a:	681b      	ldr	r3, [r3, #0]
 802370c:	78fa      	ldrb	r2, [r7, #3]
 802370e:	2100      	movs	r1, #0
 8023710:	4610      	mov	r0, r2
 8023712:	4798      	blx	r3
 8023714:	4603      	mov	r3, r0
 8023716:	b21b      	sxth	r3, r3
 8023718:	2b00      	cmp	r3, #0
 802371a:	dbf5      	blt.n	8023708 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 802371c:	687b      	ldr	r3, [r7, #4]
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	78fa      	ldrb	r2, [r7, #3]
 8023722:	2102      	movs	r1, #2
 8023724:	4610      	mov	r0, r2
 8023726:	4798      	blx	r3
 8023728:	4603      	mov	r3, r0
 802372a:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	78fa      	ldrb	r2, [r7, #3]
 8023732:	2103      	movs	r1, #3
 8023734:	4610      	mov	r0, r2
 8023736:	4798      	blx	r3
 8023738:	4603      	mov	r3, r0
 802373a:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 802373c:	4b42      	ldr	r3, [pc, #264]	@ (8023848 <mg_phy_init+0x160>)
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	2b01      	cmp	r3, #1
 8023742:	dd14      	ble.n	802376e <mg_phy_init+0x86>
 8023744:	4b41      	ldr	r3, [pc, #260]	@ (802384c <mg_phy_init+0x164>)
 8023746:	f245 6238 	movw	r2, #22072	@ 0x5638
 802374a:	4941      	ldr	r1, [pc, #260]	@ (8023850 <mg_phy_init+0x168>)
 802374c:	2002      	movs	r0, #2
 802374e:	f7eb fff9 	bl	800f744 <mg_log_prefix>
 8023752:	89fc      	ldrh	r4, [r7, #14]
 8023754:	89bd      	ldrh	r5, [r7, #12]
 8023756:	89ba      	ldrh	r2, [r7, #12]
 8023758:	89fb      	ldrh	r3, [r7, #14]
 802375a:	4611      	mov	r1, r2
 802375c:	4618      	mov	r0, r3
 802375e:	f7ff ff39 	bl	80235d4 <mg_phy_id_to_str>
 8023762:	4603      	mov	r3, r0
 8023764:	462a      	mov	r2, r5
 8023766:	4621      	mov	r1, r4
 8023768:	483a      	ldr	r0, [pc, #232]	@ (8023854 <mg_phy_init+0x16c>)
 802376a:	f7ec f83b 	bl	800f7e4 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 802376e:	89fb      	ldrh	r3, [r7, #14]
 8023770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8023774:	d11f      	bne.n	80237b6 <mg_phy_init+0xce>
 8023776:	89bb      	ldrh	r3, [r7, #12]
 8023778:	f24a 2231 	movw	r2, #41521	@ 0xa231
 802377c:	4293      	cmp	r3, r2
 802377e:	d11a      	bne.n	80237b6 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8023780:	687b      	ldr	r3, [r7, #4]
 8023782:	685b      	ldr	r3, [r3, #4]
 8023784:	78f8      	ldrb	r0, [r7, #3]
 8023786:	221f      	movs	r2, #31
 8023788:	210d      	movs	r1, #13
 802378a:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	685b      	ldr	r3, [r3, #4]
 8023790:	78f8      	ldrb	r0, [r7, #3]
 8023792:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8023796:	210e      	movs	r1, #14
 8023798:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	685b      	ldr	r3, [r3, #4]
 802379e:	78f8      	ldrb	r0, [r7, #3]
 80237a0:	f244 021f 	movw	r2, #16415	@ 0x401f
 80237a4:	210d      	movs	r1, #13
 80237a6:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	685b      	ldr	r3, [r3, #4]
 80237ac:	78f8      	ldrb	r0, [r7, #3]
 80237ae:	f240 120d 	movw	r2, #269	@ 0x10d
 80237b2:	210e      	movs	r1, #14
 80237b4:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 80237b6:	78bb      	ldrb	r3, [r7, #2]
 80237b8:	f003 0302 	and.w	r3, r3, #2
 80237bc:	2b00      	cmp	r3, #0
 80237be:	d12e      	bne.n	802381e <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 80237c0:	89fb      	ldrh	r3, [r7, #14]
 80237c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80237c6:	d110      	bne.n	80237ea <mg_phy_init+0x102>
 80237c8:	89bb      	ldrh	r3, [r7, #12]
 80237ca:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80237ce:	4293      	cmp	r3, r2
 80237d0:	d00b      	beq.n	80237ea <mg_phy_init+0x102>
 80237d2:	89bb      	ldrh	r3, [r7, #12]
 80237d4:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 80237d8:	4293      	cmp	r3, r2
 80237da:	d006      	beq.n	80237ea <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 80237dc:	687b      	ldr	r3, [r7, #4]
 80237de:	685b      	ldr	r3, [r3, #4]
 80237e0:	78f8      	ldrb	r0, [r7, #3]
 80237e2:	2281      	movs	r2, #129	@ 0x81
 80237e4:	2117      	movs	r1, #23
 80237e6:	4798      	blx	r3
 80237e8:	e019      	b.n	802381e <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 80237ea:	89fb      	ldrh	r3, [r7, #14]
 80237ec:	2b22      	cmp	r3, #34	@ 0x22
 80237ee:	d116      	bne.n	802381e <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	681b      	ldr	r3, [r3, #0]
 80237f8:	78fa      	ldrb	r2, [r7, #3]
 80237fa:	2100      	movs	r1, #0
 80237fc:	4610      	mov	r0, r2
 80237fe:	4798      	blx	r3
 8023800:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8023802:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8023806:	b29a      	uxth	r2, r3
 8023808:	78fb      	ldrb	r3, [r7, #3]
 802380a:	2100      	movs	r1, #0
 802380c:	4618      	mov	r0, r3
 802380e:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	685b      	ldr	r3, [r3, #4]
 8023814:	78f8      	ldrb	r0, [r7, #3]
 8023816:	f248 1280 	movw	r2, #33152	@ 0x8180
 802381a:	211f      	movs	r1, #31
 802381c:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 802381e:	78bb      	ldrb	r3, [r7, #2]
 8023820:	f003 0301 	and.w	r3, r3, #1
 8023824:	2b00      	cmp	r3, #0
 8023826:	d00a      	beq.n	802383e <mg_phy_init+0x156>
 8023828:	89fb      	ldrh	r3, [r7, #14]
 802382a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802382e:	d106      	bne.n	802383e <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8023830:	687b      	ldr	r3, [r7, #4]
 8023832:	685b      	ldr	r3, [r3, #4]
 8023834:	78f8      	ldrb	r0, [r7, #3]
 8023836:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802383a:	2118      	movs	r1, #24
 802383c:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 802383e:	bf00      	nop
 8023840:	3710      	adds	r7, #16
 8023842:	46bd      	mov	sp, r7
 8023844:	bdb0      	pop	{r4, r5, r7, pc}
 8023846:	bf00      	nop
 8023848:	2400025c 	.word	0x2400025c
 802384c:	080314f0 	.word	0x080314f0
 8023850:	0802d330 	.word	0x0802d330
 8023854:	0802ff74 	.word	0x0802ff74

08023858 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8023858:	b580      	push	{r7, lr}
 802385a:	b08a      	sub	sp, #40	@ 0x28
 802385c:	af00      	add	r7, sp, #0
 802385e:	60f8      	str	r0, [r7, #12]
 8023860:	607a      	str	r2, [r7, #4]
 8023862:	603b      	str	r3, [r7, #0]
 8023864:	460b      	mov	r3, r1
 8023866:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8023868:	2300      	movs	r3, #0
 802386a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 802386e:	68fb      	ldr	r3, [r7, #12]
 8023870:	681b      	ldr	r3, [r3, #0]
 8023872:	7afa      	ldrb	r2, [r7, #11]
 8023874:	2101      	movs	r1, #1
 8023876:	4610      	mov	r0, r2
 8023878:	4798      	blx	r3
 802387a:	4603      	mov	r3, r0
 802387c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 802387e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8023880:	f003 0320 	and.w	r3, r3, #32
 8023884:	2b00      	cmp	r3, #0
 8023886:	d00c      	beq.n	80238a2 <mg_phy_up+0x4a>
 8023888:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802388a:	f003 0304 	and.w	r3, r3, #4
 802388e:	2b00      	cmp	r3, #0
 8023890:	d107      	bne.n	80238a2 <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8023892:	68fb      	ldr	r3, [r7, #12]
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	7afa      	ldrb	r2, [r7, #11]
 8023898:	2101      	movs	r1, #1
 802389a:	4610      	mov	r0, r2
 802389c:	4798      	blx	r3
 802389e:	4603      	mov	r3, r0
 80238a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 80238a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80238a4:	f003 0304 	and.w	r3, r3, #4
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	bf14      	ite	ne
 80238ac:	2301      	movne	r3, #1
 80238ae:	2300      	moveq	r3, #0
 80238b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 80238b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	f000 80dc 	beq.w	8023a76 <mg_phy_up+0x21e>
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	f000 80d8 	beq.w	8023a76 <mg_phy_up+0x21e>
 80238c6:	683b      	ldr	r3, [r7, #0]
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	f000 80d4 	beq.w	8023a76 <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 80238ce:	68fb      	ldr	r3, [r7, #12]
 80238d0:	681b      	ldr	r3, [r3, #0]
 80238d2:	7afa      	ldrb	r2, [r7, #11]
 80238d4:	2102      	movs	r1, #2
 80238d6:	4610      	mov	r0, r2
 80238d8:	4798      	blx	r3
 80238da:	4603      	mov	r3, r0
 80238dc:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 80238de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80238e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80238e4:	d14b      	bne.n	802397e <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 80238e6:	68fb      	ldr	r3, [r7, #12]
 80238e8:	681b      	ldr	r3, [r3, #0]
 80238ea:	7afa      	ldrb	r2, [r7, #11]
 80238ec:	2103      	movs	r1, #3
 80238ee:	4610      	mov	r0, r2
 80238f0:	4798      	blx	r3
 80238f2:	4603      	mov	r3, r0
 80238f4:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 80238f6:	8b3b      	ldrh	r3, [r7, #24]
 80238f8:	f24a 2231 	movw	r2, #41521	@ 0xa231
 80238fc:	4293      	cmp	r3, r2
 80238fe:	d120      	bne.n	8023942 <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8023900:	68fb      	ldr	r3, [r7, #12]
 8023902:	681b      	ldr	r3, [r3, #0]
 8023904:	7afa      	ldrb	r2, [r7, #11]
 8023906:	2111      	movs	r1, #17
 8023908:	4610      	mov	r0, r2
 802390a:	4798      	blx	r3
 802390c:	4603      	mov	r3, r0
 802390e:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 8023910:	8abb      	ldrh	r3, [r7, #20]
 8023912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8023916:	2b00      	cmp	r3, #0
 8023918:	bf14      	ite	ne
 802391a:	2301      	movne	r3, #1
 802391c:	2300      	moveq	r3, #0
 802391e:	b2da      	uxtb	r2, r3
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8023924:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023928:	2b00      	cmp	r3, #0
 802392a:	db06      	blt.n	802393a <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 802392c:	8abb      	ldrh	r3, [r7, #20]
 802392e:	0b9b      	lsrs	r3, r3, #14
 8023930:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8023932:	f003 0301 	and.w	r3, r3, #1
 8023936:	b2da      	uxtb	r2, r3
 8023938:	e000      	b.n	802393c <mg_phy_up+0xe4>
 802393a:	2202      	movs	r2, #2
 802393c:	683b      	ldr	r3, [r7, #0]
 802393e:	701a      	strb	r2, [r3, #0]
 8023940:	e099      	b.n	8023a76 <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 8023942:	68fb      	ldr	r3, [r7, #12]
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	7afa      	ldrb	r2, [r7, #11]
 8023948:	2110      	movs	r1, #16
 802394a:	4610      	mov	r0, r2
 802394c:	4798      	blx	r3
 802394e:	4603      	mov	r3, r0
 8023950:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 8023952:	8afb      	ldrh	r3, [r7, #22]
 8023954:	f003 0304 	and.w	r3, r3, #4
 8023958:	2b00      	cmp	r3, #0
 802395a:	bf14      	ite	ne
 802395c:	2301      	movne	r3, #1
 802395e:	2300      	moveq	r3, #0
 8023960:	b2da      	uxtb	r2, r3
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8023966:	8afb      	ldrh	r3, [r7, #22]
 8023968:	f003 0302 	and.w	r3, r3, #2
 802396c:	2b00      	cmp	r3, #0
 802396e:	bf0c      	ite	eq
 8023970:	2301      	moveq	r3, #1
 8023972:	2300      	movne	r3, #0
 8023974:	b2db      	uxtb	r3, r3
 8023976:	461a      	mov	r2, r3
 8023978:	683b      	ldr	r3, [r7, #0]
 802397a:	701a      	strb	r2, [r3, #0]
 802397c:	e07b      	b.n	8023a76 <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 802397e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023980:	2b22      	cmp	r3, #34	@ 0x22
 8023982:	d11d      	bne.n	80239c0 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8023984:	68fb      	ldr	r3, [r7, #12]
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	7afa      	ldrb	r2, [r7, #11]
 802398a:	211e      	movs	r1, #30
 802398c:	4610      	mov	r0, r2
 802398e:	4798      	blx	r3
 8023990:	4603      	mov	r3, r0
 8023992:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 8023994:	8b7b      	ldrh	r3, [r7, #26]
 8023996:	f003 0304 	and.w	r3, r3, #4
 802399a:	2b00      	cmp	r3, #0
 802399c:	bf14      	ite	ne
 802399e:	2301      	movne	r3, #1
 80239a0:	2300      	moveq	r3, #0
 80239a2:	b2da      	uxtb	r2, r3
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 80239a8:	8b7b      	ldrh	r3, [r7, #26]
 80239aa:	f003 0303 	and.w	r3, r3, #3
 80239ae:	2b01      	cmp	r3, #1
 80239b0:	bf14      	ite	ne
 80239b2:	2301      	movne	r3, #1
 80239b4:	2300      	moveq	r3, #0
 80239b6:	b2db      	uxtb	r3, r3
 80239b8:	461a      	mov	r2, r3
 80239ba:	683b      	ldr	r3, [r7, #0]
 80239bc:	701a      	strb	r2, [r3, #0]
 80239be:	e05a      	b.n	8023a76 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 80239c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80239c2:	2b07      	cmp	r3, #7
 80239c4:	d11a      	bne.n	80239fc <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 80239c6:	68fb      	ldr	r3, [r7, #12]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	7afa      	ldrb	r2, [r7, #11]
 80239cc:	211f      	movs	r1, #31
 80239ce:	4610      	mov	r0, r2
 80239d0:	4798      	blx	r3
 80239d2:	4603      	mov	r3, r0
 80239d4:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 80239d6:	8bbb      	ldrh	r3, [r7, #28]
 80239d8:	f003 0310 	and.w	r3, r3, #16
 80239dc:	2b00      	cmp	r3, #0
 80239de:	bf14      	ite	ne
 80239e0:	2301      	movne	r3, #1
 80239e2:	2300      	moveq	r3, #0
 80239e4:	b2da      	uxtb	r2, r3
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80239ea:	8bbb      	ldrh	r3, [r7, #28]
 80239ec:	08db      	lsrs	r3, r3, #3
 80239ee:	b2db      	uxtb	r3, r3
 80239f0:	f003 0301 	and.w	r3, r3, #1
 80239f4:	b2da      	uxtb	r2, r3
 80239f6:	683b      	ldr	r3, [r7, #0]
 80239f8:	701a      	strb	r2, [r3, #0]
 80239fa:	e03c      	b.n	8023a76 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 80239fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80239fe:	2b1c      	cmp	r3, #28
 8023a00:	d11a      	bne.n	8023a38 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8023a02:	68fb      	ldr	r3, [r7, #12]
 8023a04:	681b      	ldr	r3, [r3, #0]
 8023a06:	7afa      	ldrb	r2, [r7, #11]
 8023a08:	2100      	movs	r1, #0
 8023a0a:	4610      	mov	r0, r2
 8023a0c:	4798      	blx	r3
 8023a0e:	4603      	mov	r3, r0
 8023a10:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 8023a12:	8bfb      	ldrh	r3, [r7, #30]
 8023a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	bf14      	ite	ne
 8023a1c:	2301      	movne	r3, #1
 8023a1e:	2300      	moveq	r3, #0
 8023a20:	b2da      	uxtb	r2, r3
 8023a22:	687b      	ldr	r3, [r7, #4]
 8023a24:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8023a26:	8bfb      	ldrh	r3, [r7, #30]
 8023a28:	0b5b      	lsrs	r3, r3, #13
 8023a2a:	b2db      	uxtb	r3, r3
 8023a2c:	f003 0301 	and.w	r3, r3, #1
 8023a30:	b2da      	uxtb	r2, r3
 8023a32:	683b      	ldr	r3, [r7, #0]
 8023a34:	701a      	strb	r2, [r3, #0]
 8023a36:	e01e      	b.n	8023a76 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 8023a38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023a3a:	2b15      	cmp	r3, #21
 8023a3c:	d11b      	bne.n	8023a76 <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 8023a3e:	68fb      	ldr	r3, [r7, #12]
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	7afa      	ldrb	r2, [r7, #11]
 8023a44:	2111      	movs	r1, #17
 8023a46:	4610      	mov	r0, r2
 8023a48:	4798      	blx	r3
 8023a4a:	4603      	mov	r3, r0
 8023a4c:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 8023a4e:	8c3b      	ldrh	r3, [r7, #32]
 8023a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8023a54:	2b00      	cmp	r3, #0
 8023a56:	bf14      	ite	ne
 8023a58:	2301      	movne	r3, #1
 8023a5a:	2300      	moveq	r3, #0
 8023a5c:	b2da      	uxtb	r2, r3
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8023a62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023a66:	13db      	asrs	r3, r3, #15
 8023a68:	b21b      	sxth	r3, r3
 8023a6a:	b2db      	uxtb	r3, r3
 8023a6c:	f003 0301 	and.w	r3, r3, #1
 8023a70:	b2da      	uxtb	r2, r3
 8023a72:	683b      	ldr	r3, [r7, #0]
 8023a74:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8023a76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	3728      	adds	r7, #40	@ 0x28
 8023a7e:	46bd      	mov	sp, r7
 8023a80:	bd80      	pop	{r7, pc}
	...

08023a84 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8023a84:	b480      	push	{r7}
 8023a86:	b083      	sub	sp, #12
 8023a88:	af00      	add	r7, sp, #0
 8023a8a:	4603      	mov	r3, r0
 8023a8c:	460a      	mov	r2, r1
 8023a8e:	71fb      	strb	r3, [r7, #7]
 8023a90:	4613      	mov	r3, r2
 8023a92:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8023a94:	4b17      	ldr	r3, [pc, #92]	@ (8023af4 <eth_read_phy+0x70>)
 8023a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8023a9a:	4a16      	ldr	r2, [pc, #88]	@ (8023af4 <eth_read_phy+0x70>)
 8023a9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8023aa0:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8023aa4:	4b13      	ldr	r3, [pc, #76]	@ (8023af4 <eth_read_phy+0x70>)
 8023aa6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8023aaa:	79fb      	ldrb	r3, [r7, #7]
 8023aac:	0559      	lsls	r1, r3, #21
 8023aae:	79bb      	ldrb	r3, [r7, #6]
 8023ab0:	041b      	lsls	r3, r3, #16
 8023ab2:	430b      	orrs	r3, r1
 8023ab4:	4313      	orrs	r3, r2
 8023ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8023af4 <eth_read_phy+0x70>)
 8023ab8:	f043 030c 	orr.w	r3, r3, #12
 8023abc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8023ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8023af4 <eth_read_phy+0x70>)
 8023ac2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8023ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8023af4 <eth_read_phy+0x70>)
 8023ac8:	f043 0301 	orr.w	r3, r3, #1
 8023acc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8023ad0:	bf00      	nop
 8023ad2:	4b08      	ldr	r3, [pc, #32]	@ (8023af4 <eth_read_phy+0x70>)
 8023ad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8023ad8:	f003 0301 	and.w	r3, r3, #1
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d1f8      	bne.n	8023ad2 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8023ae0:	4b04      	ldr	r3, [pc, #16]	@ (8023af4 <eth_read_phy+0x70>)
 8023ae2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8023ae6:	b29b      	uxth	r3, r3
}
 8023ae8:	4618      	mov	r0, r3
 8023aea:	370c      	adds	r7, #12
 8023aec:	46bd      	mov	sp, r7
 8023aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023af2:	4770      	bx	lr
 8023af4:	40028000 	.word	0x40028000

08023af8 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8023af8:	b480      	push	{r7}
 8023afa:	b083      	sub	sp, #12
 8023afc:	af00      	add	r7, sp, #0
 8023afe:	4603      	mov	r3, r0
 8023b00:	71fb      	strb	r3, [r7, #7]
 8023b02:	460b      	mov	r3, r1
 8023b04:	71bb      	strb	r3, [r7, #6]
 8023b06:	4613      	mov	r3, r2
 8023b08:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8023b0a:	4a18      	ldr	r2, [pc, #96]	@ (8023b6c <eth_write_phy+0x74>)
 8023b0c:	88bb      	ldrh	r3, [r7, #4]
 8023b0e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 8023b12:	4b16      	ldr	r3, [pc, #88]	@ (8023b6c <eth_write_phy+0x74>)
 8023b14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8023b18:	4a14      	ldr	r2, [pc, #80]	@ (8023b6c <eth_write_phy+0x74>)
 8023b1a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8023b1e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 8023b22:	4b12      	ldr	r3, [pc, #72]	@ (8023b6c <eth_write_phy+0x74>)
 8023b24:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8023b28:	79fb      	ldrb	r3, [r7, #7]
 8023b2a:	0559      	lsls	r1, r3, #21
 8023b2c:	79bb      	ldrb	r3, [r7, #6]
 8023b2e:	041b      	lsls	r3, r3, #16
 8023b30:	430b      	orrs	r3, r1
 8023b32:	4313      	orrs	r3, r2
 8023b34:	4a0d      	ldr	r2, [pc, #52]	@ (8023b6c <eth_write_phy+0x74>)
 8023b36:	f043 0304 	orr.w	r3, r3, #4
 8023b3a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8023b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8023b6c <eth_write_phy+0x74>)
 8023b40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8023b44:	4a09      	ldr	r2, [pc, #36]	@ (8023b6c <eth_write_phy+0x74>)
 8023b46:	f043 0301 	orr.w	r3, r3, #1
 8023b4a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8023b4e:	bf00      	nop
 8023b50:	4b06      	ldr	r3, [pc, #24]	@ (8023b6c <eth_write_phy+0x74>)
 8023b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8023b56:	f003 0301 	and.w	r3, r3, #1
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d1f8      	bne.n	8023b50 <eth_write_phy+0x58>
}
 8023b5e:	bf00      	nop
 8023b60:	bf00      	nop
 8023b62:	370c      	adds	r7, #12
 8023b64:	46bd      	mov	sp, r7
 8023b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b6a:	4770      	bx	lr
 8023b6c:	40028000 	.word	0x40028000

08023b70 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8023b70:	b580      	push	{r7, lr}
 8023b72:	b08a      	sub	sp, #40	@ 0x28
 8023b74:	af00      	add	r7, sp, #0
 8023b76:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023b7c:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8023b7e:	4a90      	ldr	r2, [pc, #576]	@ (8023dc0 <mg_tcpip_driver_stm32h_init+0x250>)
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8023b84:	69bb      	ldr	r3, [r7, #24]
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d002      	beq.n	8023b90 <mg_tcpip_driver_stm32h_init+0x20>
 8023b8a:	69bb      	ldr	r3, [r7, #24]
 8023b8c:	791b      	ldrb	r3, [r3, #4]
 8023b8e:	e000      	b.n	8023b92 <mg_tcpip_driver_stm32h_init+0x22>
 8023b90:	2300      	movs	r3, #0
 8023b92:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8023b94:	69bb      	ldr	r3, [r7, #24]
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d002      	beq.n	8023ba0 <mg_tcpip_driver_stm32h_init+0x30>
 8023b9a:	69bb      	ldr	r3, [r7, #24]
 8023b9c:	795b      	ldrb	r3, [r3, #5]
 8023b9e:	e000      	b.n	8023ba2 <mg_tcpip_driver_stm32h_init+0x32>
 8023ba0:	2302      	movs	r3, #2
 8023ba2:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8023ba8:	e017      	b.n	8023bda <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8023baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023bac:	f240 6204 	movw	r2, #1540	@ 0x604
 8023bb0:	fb02 f303 	mul.w	r3, r2, r3
 8023bb4:	4a83      	ldr	r2, [pc, #524]	@ (8023dc4 <mg_tcpip_driver_stm32h_init+0x254>)
 8023bb6:	4413      	add	r3, r2
 8023bb8:	4619      	mov	r1, r3
 8023bba:	4a83      	ldr	r2, [pc, #524]	@ (8023dc8 <mg_tcpip_driver_stm32h_init+0x258>)
 8023bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023bbe:	011b      	lsls	r3, r3, #4
 8023bc0:	4413      	add	r3, r2
 8023bc2:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8023bc4:	4a80      	ldr	r2, [pc, #512]	@ (8023dc8 <mg_tcpip_driver_stm32h_init+0x258>)
 8023bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023bc8:	011b      	lsls	r3, r3, #4
 8023bca:	4413      	add	r3, r2
 8023bcc:	330c      	adds	r3, #12
 8023bce:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8023bd2:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8023bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023bd6:	3301      	adds	r3, #1
 8023bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8023bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023bdc:	2b03      	cmp	r3, #3
 8023bde:	dde4      	ble.n	8023baa <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8023be0:	2300      	movs	r3, #0
 8023be2:	623b      	str	r3, [r7, #32]
 8023be4:	e00f      	b.n	8023c06 <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8023be6:	6a3b      	ldr	r3, [r7, #32]
 8023be8:	f240 6204 	movw	r2, #1540	@ 0x604
 8023bec:	fb02 f303 	mul.w	r3, r2, r3
 8023bf0:	4a76      	ldr	r2, [pc, #472]	@ (8023dcc <mg_tcpip_driver_stm32h_init+0x25c>)
 8023bf2:	4413      	add	r3, r2
 8023bf4:	4619      	mov	r1, r3
 8023bf6:	4a76      	ldr	r2, [pc, #472]	@ (8023dd0 <mg_tcpip_driver_stm32h_init+0x260>)
 8023bf8:	6a3b      	ldr	r3, [r7, #32]
 8023bfa:	011b      	lsls	r3, r3, #4
 8023bfc:	4413      	add	r3, r2
 8023bfe:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8023c00:	6a3b      	ldr	r3, [r7, #32]
 8023c02:	3301      	adds	r3, #1
 8023c04:	623b      	str	r3, [r7, #32]
 8023c06:	6a3b      	ldr	r3, [r7, #32]
 8023c08:	2b03      	cmp	r3, #3
 8023c0a:	ddec      	ble.n	8023be6 <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 8023c0c:	4b71      	ldr	r3, [pc, #452]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	4a6f      	ldr	r2, [pc, #444]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c16:	f043 0301 	orr.w	r3, r3, #1
 8023c1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023c1e:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 8023c20:	2300      	movs	r3, #0
 8023c22:	61fb      	str	r3, [r7, #28]
 8023c24:	e002      	b.n	8023c2c <mg_tcpip_driver_stm32h_init+0xbc>
 8023c26:	69fb      	ldr	r3, [r7, #28]
 8023c28:	3301      	adds	r3, #1
 8023c2a:	61fb      	str	r3, [r7, #28]
 8023c2c:	69fb      	ldr	r3, [r7, #28]
 8023c2e:	2b03      	cmp	r3, #3
 8023c30:	ddf9      	ble.n	8023c26 <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 8023c32:	bf00      	nop
 8023c34:	4b67      	ldr	r3, [pc, #412]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023c3a:	681b      	ldr	r3, [r3, #0]
 8023c3c:	f003 0301 	and.w	r3, r3, #1
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	d1f7      	bne.n	8023c34 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 8023c44:	69bb      	ldr	r3, [r7, #24]
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	d006      	beq.n	8023c58 <mg_tcpip_driver_stm32h_init+0xe8>
 8023c4a:	69bb      	ldr	r3, [r7, #24]
 8023c4c:	681b      	ldr	r3, [r3, #0]
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	db02      	blt.n	8023c58 <mg_tcpip_driver_stm32h_init+0xe8>
 8023c52:	69bb      	ldr	r3, [r7, #24]
 8023c54:	681b      	ldr	r3, [r3, #0]
 8023c56:	e000      	b.n	8023c5a <mg_tcpip_driver_stm32h_init+0xea>
 8023c58:	2307      	movs	r3, #7
 8023c5a:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8023c5c:	693b      	ldr	r3, [r7, #16]
 8023c5e:	021b      	lsls	r3, r3, #8
 8023c60:	4a5c      	ldr	r2, [pc, #368]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c62:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8023c66:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 8023c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023c70:	461a      	mov	r2, r3
 8023c72:	2300      	movs	r3, #0
 8023c74:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8023c76:	4b57      	ldr	r3, [pc, #348]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023c7c:	685b      	ldr	r3, [r3, #4]
 8023c7e:	4a55      	ldr	r2, [pc, #340]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8023c84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023c88:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 8023c8a:	4b52      	ldr	r3, [pc, #328]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c8c:	2200      	movs	r2, #0
 8023c8e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8023c92:	4b50      	ldr	r3, [pc, #320]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c94:	2280      	movs	r2, #128	@ 0x80
 8023c96:	671a      	str	r2, [r3, #112]	@ 0x70
#if !MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(10);  // Perfect filtering
 8023c98:	4b4e      	ldr	r3, [pc, #312]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8023c9e:	609a      	str	r2, [r3, #8]
#endif
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8023ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8023dd8 <mg_tcpip_driver_stm32h_init+0x268>)
 8023ca2:	f107 0308 	add.w	r3, r7, #8
 8023ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023caa:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 8023cae:	7dba      	ldrb	r2, [r7, #22]
 8023cb0:	7df9      	ldrb	r1, [r7, #23]
 8023cb2:	f107 0308 	add.w	r3, r7, #8
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f7ff fd16 	bl	80236e8 <mg_phy_init>
  ETH->DMACRDLAR =
 8023cbc:	4a45      	ldr	r2, [pc, #276]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8023cbe:	4b42      	ldr	r3, [pc, #264]	@ (8023dc8 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACRDLAR =
 8023cc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023cc4:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8023cc8:	4b42      	ldr	r3, [pc, #264]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023cce:	461a      	mov	r2, r3
 8023cd0:	2303      	movs	r3, #3
 8023cd2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8023cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8023cd8:	4b40      	ldr	r3, [pc, #256]	@ (8023ddc <mg_tcpip_driver_stm32h_init+0x26c>)
  ETH->DMACRDTPR =
 8023cda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023cde:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 8023ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8023ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8023dd0 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDLAR =
 8023ce6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023cea:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 8023cee:	4b39      	ldr	r3, [pc, #228]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023cf4:	461a      	mov	r2, r3
 8023cf6:	2303      	movs	r3, #3
 8023cf8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8023cfc:	4a35      	ldr	r2, [pc, #212]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 8023cfe:	4b34      	ldr	r3, [pc, #208]	@ (8023dd0 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDTPR =
 8023d00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023d04:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8023d08:	4b32      	ldr	r3, [pc, #200]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023d0e:	461a      	mov	r2, r3
 8023d10:	2300      	movs	r3, #0
 8023d12:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 8023d16:	4b2f      	ldr	r3, [pc, #188]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023d1c:	461a      	mov	r2, r3
 8023d1e:	f248 0340 	movw	r3, #32832	@ 0x8040
 8023d22:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 8023d26:	4b2b      	ldr	r3, [pc, #172]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d28:	f24e 0203 	movw	r2, #57347	@ 0xe003
 8023d2c:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 8023d2e:	4b29      	ldr	r3, [pc, #164]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d30:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8023d34:	4a27      	ldr	r2, [pc, #156]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d36:	f043 0302 	orr.w	r3, r3, #2
 8023d3a:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 8023d3e:	4b25      	ldr	r3, [pc, #148]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8023d44:	4a23      	ldr	r2, [pc, #140]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d46:	f043 0320 	orr.w	r3, r3, #32
 8023d4a:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 8023d4e:	4b21      	ldr	r3, [pc, #132]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023d54:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8023d58:	4a1e      	ldr	r2, [pc, #120]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d5a:	f043 0301 	orr.w	r3, r3, #1
 8023d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023d62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8023d66:	4b1b      	ldr	r3, [pc, #108]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023d6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8023d70:	4a18      	ldr	r2, [pc, #96]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d72:	f043 0301 	orr.w	r3, r3, #1
 8023d76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023d7a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	795b      	ldrb	r3, [r3, #5]
 8023d82:	021b      	lsls	r3, r3, #8
 8023d84:	687a      	ldr	r2, [r7, #4]
 8023d86:	7912      	ldrb	r2, [r2, #4]
 8023d88:	4611      	mov	r1, r2
 8023d8a:	4a12      	ldr	r2, [pc, #72]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
 8023d8c:	430b      	orrs	r3, r1
 8023d8e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	78db      	ldrb	r3, [r3, #3]
 8023d96:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	789b      	ldrb	r3, [r3, #2]
 8023d9c:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8023d9e:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	785b      	ldrb	r3, [r3, #1]
 8023da4:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8023da6:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8023da8:	687a      	ldr	r2, [r7, #4]
 8023daa:	7812      	ldrb	r2, [r2, #0]
 8023dac:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8023dae:	4a09      	ldr	r2, [pc, #36]	@ (8023dd4 <mg_tcpip_driver_stm32h_init+0x264>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8023db0:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8023db2:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8023db6:	2301      	movs	r3, #1
}
 8023db8:	4618      	mov	r0, r3
 8023dba:	3728      	adds	r7, #40	@ 0x28
 8023dbc:	46bd      	mov	sp, r7
 8023dbe:	bd80      	pop	{r7, pc}
 8023dc0:	2401ce44 	.word	0x2401ce44
 8023dc4:	24019e24 	.word	0x24019e24
 8023dc8:	24019da4 	.word	0x24019da4
 8023dcc:	2401b634 	.word	0x2401b634
 8023dd0:	24019de4 	.word	0x24019de4
 8023dd4:	40028000 	.word	0x40028000
 8023dd8:	0802ff90 	.word	0x0802ff90
 8023ddc:	24019dd4 	.word	0x24019dd4

08023de0 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8023de0:	b580      	push	{r7, lr}
 8023de2:	b088      	sub	sp, #32
 8023de4:	af02      	add	r7, sp, #8
 8023de6:	60f8      	str	r0, [r7, #12]
 8023de8:	60b9      	str	r1, [r7, #8]
 8023dea:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8023dec:	68bb      	ldr	r3, [r7, #8]
 8023dee:	f240 6204 	movw	r2, #1540	@ 0x604
 8023df2:	4293      	cmp	r3, r2
 8023df4:	d912      	bls.n	8023e1c <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8023df6:	4b5e      	ldr	r3, [pc, #376]	@ (8023f70 <mg_tcpip_driver_stm32h_tx+0x190>)
 8023df8:	681b      	ldr	r3, [r3, #0]
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	dd0b      	ble.n	8023e16 <mg_tcpip_driver_stm32h_tx+0x36>
 8023dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8023f74 <mg_tcpip_driver_stm32h_tx+0x194>)
 8023e00:	f645 5283 	movw	r2, #23939	@ 0x5d83
 8023e04:	495c      	ldr	r1, [pc, #368]	@ (8023f78 <mg_tcpip_driver_stm32h_tx+0x198>)
 8023e06:	2001      	movs	r0, #1
 8023e08:	f7eb fc9c 	bl	800f744 <mg_log_prefix>
 8023e0c:	68bb      	ldr	r3, [r7, #8]
 8023e0e:	4619      	mov	r1, r3
 8023e10:	485a      	ldr	r0, [pc, #360]	@ (8023f7c <mg_tcpip_driver_stm32h_tx+0x19c>)
 8023e12:	f7eb fce7 	bl	800f7e4 <mg_log>
    len = 0;  // Frame is too big
 8023e16:	2300      	movs	r3, #0
 8023e18:	60bb      	str	r3, [r7, #8]
 8023e1a:	e08d      	b.n	8023f38 <mg_tcpip_driver_stm32h_tx+0x158>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 8023e1c:	4b58      	ldr	r3, [pc, #352]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023e1e:	681b      	ldr	r3, [r3, #0]
 8023e20:	4a58      	ldr	r2, [pc, #352]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023e22:	011b      	lsls	r3, r3, #4
 8023e24:	4413      	add	r3, r2
 8023e26:	330c      	adds	r3, #12
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	2b00      	cmp	r3, #0
 8023e2c:	da4a      	bge.n	8023ec4 <mg_tcpip_driver_stm32h_tx+0xe4>
    ifp->nerr++;
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023e34:	1c5a      	adds	r2, r3, #1
 8023e36:	687b      	ldr	r3, [r7, #4]
 8023e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8023e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8023f70 <mg_tcpip_driver_stm32h_tx+0x190>)
 8023e3e:	681b      	ldr	r3, [r3, #0]
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	dd1e      	ble.n	8023e82 <mg_tcpip_driver_stm32h_tx+0xa2>
 8023e44:	4b4b      	ldr	r3, [pc, #300]	@ (8023f74 <mg_tcpip_driver_stm32h_tx+0x194>)
 8023e46:	f645 5287 	movw	r2, #23943	@ 0x5d87
 8023e4a:	494b      	ldr	r1, [pc, #300]	@ (8023f78 <mg_tcpip_driver_stm32h_tx+0x198>)
 8023e4c:	2001      	movs	r0, #1
 8023e4e:	f7eb fc79 	bl	800f744 <mg_log_prefix>
 8023e52:	4b4b      	ldr	r3, [pc, #300]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023e54:	6819      	ldr	r1, [r3, #0]
 8023e56:	4b4a      	ldr	r3, [pc, #296]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023e58:	681b      	ldr	r3, [r3, #0]
 8023e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023e5c:	011b      	lsls	r3, r3, #4
 8023e5e:	4413      	add	r3, r2
 8023e60:	330c      	adds	r3, #12
 8023e62:	681a      	ldr	r2, [r3, #0]
 8023e64:	4b48      	ldr	r3, [pc, #288]	@ (8023f88 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023e6a:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 8023e6e:	4b46      	ldr	r3, [pc, #280]	@ (8023f88 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023e74:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8023e78:	9300      	str	r3, [sp, #0]
 8023e7a:	4603      	mov	r3, r0
 8023e7c:	4843      	ldr	r0, [pc, #268]	@ (8023f8c <mg_tcpip_driver_stm32h_tx+0x1ac>)
 8023e7e:	f7eb fcb1 	bl	800f7e4 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 8023e82:	2300      	movs	r3, #0
 8023e84:	617b      	str	r3, [r7, #20]
 8023e86:	e017      	b.n	8023eb8 <mg_tcpip_driver_stm32h_tx+0xd8>
 8023e88:	4b39      	ldr	r3, [pc, #228]	@ (8023f70 <mg_tcpip_driver_stm32h_tx+0x190>)
 8023e8a:	681b      	ldr	r3, [r3, #0]
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	dd10      	ble.n	8023eb2 <mg_tcpip_driver_stm32h_tx+0xd2>
 8023e90:	4b38      	ldr	r3, [pc, #224]	@ (8023f74 <mg_tcpip_driver_stm32h_tx+0x194>)
 8023e92:	f645 5289 	movw	r2, #23945	@ 0x5d89
 8023e96:	4938      	ldr	r1, [pc, #224]	@ (8023f78 <mg_tcpip_driver_stm32h_tx+0x198>)
 8023e98:	2001      	movs	r0, #1
 8023e9a:	f7eb fc53 	bl	800f744 <mg_log_prefix>
 8023e9e:	4a39      	ldr	r2, [pc, #228]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023ea0:	697b      	ldr	r3, [r7, #20]
 8023ea2:	011b      	lsls	r3, r3, #4
 8023ea4:	4413      	add	r3, r2
 8023ea6:	330c      	adds	r3, #12
 8023ea8:	681b      	ldr	r3, [r3, #0]
 8023eaa:	4619      	mov	r1, r3
 8023eac:	4838      	ldr	r0, [pc, #224]	@ (8023f90 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 8023eae:	f7eb fc99 	bl	800f7e4 <mg_log>
 8023eb2:	697b      	ldr	r3, [r7, #20]
 8023eb4:	3301      	adds	r3, #1
 8023eb6:	617b      	str	r3, [r7, #20]
 8023eb8:	697b      	ldr	r3, [r7, #20]
 8023eba:	2b03      	cmp	r3, #3
 8023ebc:	dde4      	ble.n	8023e88 <mg_tcpip_driver_stm32h_tx+0xa8>
    len = 0;  // All descriptors are busy, fail
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	60bb      	str	r3, [r7, #8]
 8023ec2:	e039      	b.n	8023f38 <mg_tcpip_driver_stm32h_tx+0x158>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 8023ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023ec6:	681b      	ldr	r3, [r3, #0]
 8023ec8:	f240 6204 	movw	r2, #1540	@ 0x604
 8023ecc:	fb02 f303 	mul.w	r3, r2, r3
 8023ed0:	4a30      	ldr	r2, [pc, #192]	@ (8023f94 <mg_tcpip_driver_stm32h_tx+0x1b4>)
 8023ed2:	4413      	add	r3, r2
 8023ed4:	68ba      	ldr	r2, [r7, #8]
 8023ed6:	68f9      	ldr	r1, [r7, #12]
 8023ed8:	4618      	mov	r0, r3
 8023eda:	f005 fe90 	bl	8029bfe <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 8023ede:	4b28      	ldr	r3, [pc, #160]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023ee0:	681b      	ldr	r3, [r3, #0]
 8023ee2:	4a28      	ldr	r2, [pc, #160]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023ee4:	011b      	lsls	r3, r3, #4
 8023ee6:	4413      	add	r3, r2
 8023ee8:	3308      	adds	r3, #8
 8023eea:	68ba      	ldr	r2, [r7, #8]
 8023eec:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 8023eee:	4b24      	ldr	r3, [pc, #144]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	4a24      	ldr	r2, [pc, #144]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023ef4:	011b      	lsls	r3, r3, #4
 8023ef6:	4413      	add	r3, r2
 8023ef8:	330c      	adds	r3, #12
 8023efa:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8023efe:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8023f00:	4b1f      	ldr	r3, [pc, #124]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f02:	681b      	ldr	r3, [r3, #0]
 8023f04:	4a1f      	ldr	r2, [pc, #124]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023f06:	011b      	lsls	r3, r3, #4
 8023f08:	4413      	add	r3, r2
 8023f0a:	330c      	adds	r3, #12
 8023f0c:	681a      	ldr	r2, [r3, #0]
 8023f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f10:	681b      	ldr	r3, [r3, #0]
 8023f12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8023f16:	491b      	ldr	r1, [pc, #108]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023f18:	011b      	lsls	r3, r3, #4
 8023f1a:	440b      	add	r3, r1
 8023f1c:	330c      	adds	r3, #12
 8023f1e:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8023f20:	4b17      	ldr	r3, [pc, #92]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f22:	681b      	ldr	r3, [r3, #0]
 8023f24:	3301      	adds	r3, #1
 8023f26:	4a16      	ldr	r2, [pc, #88]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f28:	6013      	str	r3, [r2, #0]
 8023f2a:	4b15      	ldr	r3, [pc, #84]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f2c:	681b      	ldr	r3, [r3, #0]
 8023f2e:	2b03      	cmp	r3, #3
 8023f30:	d902      	bls.n	8023f38 <mg_tcpip_driver_stm32h_tx+0x158>
 8023f32:	4b13      	ldr	r3, [pc, #76]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f34:	2200      	movs	r2, #0
 8023f36:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 8023f38:	4b13      	ldr	r3, [pc, #76]	@ (8023f88 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023f3e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8023f42:	4a11      	ldr	r2, [pc, #68]	@ (8023f88 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023f44:	f043 0306 	orr.w	r3, r3, #6
 8023f48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8023f4c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 8023f50:	4b0b      	ldr	r3, [pc, #44]	@ (8023f80 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	011b      	lsls	r3, r3, #4
 8023f56:	4a0b      	ldr	r2, [pc, #44]	@ (8023f84 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8023f58:	441a      	add	r2, r3
 8023f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8023f88 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8023f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8023f60:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 8023f64:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 8023f66:	4618      	mov	r0, r3
 8023f68:	3718      	adds	r7, #24
 8023f6a:	46bd      	mov	sp, r7
 8023f6c:	bd80      	pop	{r7, pc}
 8023f6e:	bf00      	nop
 8023f70:	2400025c 	.word	0x2400025c
 8023f74:	080314fc 	.word	0x080314fc
 8023f78:	0802d330 	.word	0x0802d330
 8023f7c:	0802ff98 	.word	0x0802ff98
 8023f80:	2401ce48 	.word	0x2401ce48
 8023f84:	24019de4 	.word	0x24019de4
 8023f88:	40028000 	.word	0x40028000
 8023f8c:	0802ffac 	.word	0x0802ffac
 8023f90:	0802ffd4 	.word	0x0802ffd4
 8023f94:	2401b634 	.word	0x2401b634

08023f98 <mg_tcpip_driver_stm32h_update_hash_table>:

static void mg_tcpip_driver_stm32h_update_hash_table(struct mg_tcpip_if *ifp) {
 8023f98:	b480      	push	{r7}
 8023f9a:	b083      	sub	sp, #12
 8023f9c:	af00      	add	r7, sp, #0
 8023f9e:	6078      	str	r0, [r7, #4]
#if MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(4);  // Pass Multicast (pass all multicast frames)
#else
  // TODO(): read database, rebuild hash table
  // add mDNS / DNS-SD multicast address
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8023fa0:	4b14      	ldr	r3, [pc, #80]	@ (8023ff4 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023fa2:	78db      	ldrb	r3, [r3, #3]
 8023fa4:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 8023fa6:	4b13      	ldr	r3, [pc, #76]	@ (8023ff4 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023fa8:	789b      	ldrb	r3, [r3, #2]
 8023faa:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8023fac:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8023fae:	4b11      	ldr	r3, [pc, #68]	@ (8023ff4 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023fb0:	785b      	ldrb	r3, [r3, #1]
 8023fb2:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 8023fb4:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8023fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8023ff4 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023fb8:	7812      	ldrb	r2, [r2, #0]
 8023fba:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8023fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8023ff8 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8023fbe:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8023fc0:	f8c2 330c 	str.w	r3, [r2, #780]	@ 0x30c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 8023fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8023ff4 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023fc6:	795b      	ldrb	r3, [r3, #5]
 8023fc8:	021b      	lsls	r3, r3, #8
 8023fca:	4a0a      	ldr	r2, [pc, #40]	@ (8023ff4 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8023fcc:	7912      	ldrb	r2, [r2, #4]
 8023fce:	4611      	mov	r1, r2
 8023fd0:	4a09      	ldr	r2, [pc, #36]	@ (8023ff8 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023fd2:	430b      	orrs	r3, r1
 8023fd4:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
  ETH->MACA1HR |= MG_BIT(31);  // AE
 8023fd8:	4b07      	ldr	r3, [pc, #28]	@ (8023ff8 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023fda:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 8023fde:	4a06      	ldr	r2, [pc, #24]	@ (8023ff8 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8023fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8023fe4:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
#endif
(void) ifp;
}
 8023fe8:	bf00      	nop
 8023fea:	370c      	adds	r7, #12
 8023fec:	46bd      	mov	sp, r7
 8023fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ff2:	4770      	bx	lr
 8023ff4:	24000264 	.word	0x24000264
 8023ff8:	40028000 	.word	0x40028000

08023ffc <mg_tcpip_driver_stm32h_poll>:

static bool mg_tcpip_driver_stm32h_poll(struct mg_tcpip_if *ifp, bool s1) {
 8023ffc:	b580      	push	{r7, lr}
 8023ffe:	b088      	sub	sp, #32
 8024000:	af00      	add	r7, sp, #0
 8024002:	6078      	str	r0, [r7, #4]
 8024004:	460b      	mov	r3, r1
 8024006:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 802400e:	2b00      	cmp	r3, #0
 8024010:	d006      	beq.n	8024020 <mg_tcpip_driver_stm32h_poll+0x24>
    mg_tcpip_driver_stm32h_update_hash_table(ifp);
 8024012:	6878      	ldr	r0, [r7, #4]
 8024014:	f7ff ffc0 	bl	8023f98 <mg_tcpip_driver_stm32h_update_hash_table>
    ifp->update_mac_hash_table = false;
 8024018:	687b      	ldr	r3, [r7, #4]
 802401a:	2200      	movs	r2, #0
 802401c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 8024020:	78fb      	ldrb	r3, [r7, #3]
 8024022:	f083 0301 	eor.w	r3, r3, #1
 8024026:	b2db      	uxtb	r3, r3
 8024028:	2b00      	cmp	r3, #0
 802402a:	d001      	beq.n	8024030 <mg_tcpip_driver_stm32h_poll+0x34>
 802402c:	2300      	movs	r3, #0
 802402e:	e063      	b.n	80240f8 <mg_tcpip_driver_stm32h_poll+0xfc>
  struct mg_tcpip_driver_stm32h_data *d =
 8024030:	687b      	ldr	r3, [r7, #4]
 8024032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024034:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8024036:	69bb      	ldr	r3, [r7, #24]
 8024038:	2b00      	cmp	r3, #0
 802403a:	d002      	beq.n	8024042 <mg_tcpip_driver_stm32h_poll+0x46>
 802403c:	69bb      	ldr	r3, [r7, #24]
 802403e:	791b      	ldrb	r3, [r3, #4]
 8024040:	e000      	b.n	8024044 <mg_tcpip_driver_stm32h_poll+0x48>
 8024042:	2300      	movs	r3, #0
 8024044:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 8024046:	2300      	movs	r3, #0
 8024048:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 802404a:	2300      	movs	r3, #0
 802404c:	75bb      	strb	r3, [r7, #22]
 802404e:	2300      	movs	r3, #0
 8024050:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8024052:	4a2b      	ldr	r2, [pc, #172]	@ (8024100 <mg_tcpip_driver_stm32h_poll+0x104>)
 8024054:	f107 030c 	add.w	r3, r7, #12
 8024058:	e892 0003 	ldmia.w	r2, {r0, r1}
 802405c:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 8024060:	f107 0315 	add.w	r3, r7, #21
 8024064:	f107 0214 	add.w	r2, r7, #20
 8024068:	7df9      	ldrb	r1, [r7, #23]
 802406a:	f107 000c 	add.w	r0, r7, #12
 802406e:	f7ff fbf3 	bl	8023858 <mg_phy_up>
 8024072:	4603      	mov	r3, r0
 8024074:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8024076:	687b      	ldr	r3, [r7, #4]
 8024078:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802407c:	2b00      	cmp	r3, #0
 802407e:	d13a      	bne.n	80240f6 <mg_tcpip_driver_stm32h_poll+0xfa>
 8024080:	7dbb      	ldrb	r3, [r7, #22]
 8024082:	2b00      	cmp	r3, #0
 8024084:	d037      	beq.n	80240f6 <mg_tcpip_driver_stm32h_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 8024086:	4b1f      	ldr	r3, [pc, #124]	@ (8024104 <mg_tcpip_driver_stm32h_poll+0x108>)
 8024088:	681b      	ldr	r3, [r3, #0]
 802408a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 802408e:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 8024090:	7d7b      	ldrb	r3, [r7, #21]
 8024092:	2b00      	cmp	r3, #0
 8024094:	d103      	bne.n	802409e <mg_tcpip_driver_stm32h_poll+0xa2>
 8024096:	69fb      	ldr	r3, [r7, #28]
 8024098:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802409c:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 802409e:	7d3b      	ldrb	r3, [r7, #20]
 80240a0:	f083 0301 	eor.w	r3, r3, #1
 80240a4:	b2db      	uxtb	r3, r3
 80240a6:	2b00      	cmp	r3, #0
 80240a8:	d003      	beq.n	80240b2 <mg_tcpip_driver_stm32h_poll+0xb6>
 80240aa:	69fb      	ldr	r3, [r7, #28]
 80240ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80240b0:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80240b2:	4a14      	ldr	r2, [pc, #80]	@ (8024104 <mg_tcpip_driver_stm32h_poll+0x108>)
 80240b4:	69fb      	ldr	r3, [r7, #28]
 80240b6:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80240b8:	4b13      	ldr	r3, [pc, #76]	@ (8024108 <mg_tcpip_driver_stm32h_poll+0x10c>)
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	2b02      	cmp	r3, #2
 80240be:	dd1a      	ble.n	80240f6 <mg_tcpip_driver_stm32h_poll+0xfa>
 80240c0:	4b12      	ldr	r3, [pc, #72]	@ (802410c <mg_tcpip_driver_stm32h_poll+0x110>)
 80240c2:	f645 52bc 	movw	r2, #23996	@ 0x5dbc
 80240c6:	4912      	ldr	r1, [pc, #72]	@ (8024110 <mg_tcpip_driver_stm32h_poll+0x114>)
 80240c8:	2003      	movs	r0, #3
 80240ca:	f7eb fb3b 	bl	800f744 <mg_log_prefix>
 80240ce:	69fb      	ldr	r3, [r7, #28]
 80240d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	d001      	beq.n	80240dc <mg_tcpip_driver_stm32h_poll+0xe0>
 80240d8:	2164      	movs	r1, #100	@ 0x64
 80240da:	e000      	b.n	80240de <mg_tcpip_driver_stm32h_poll+0xe2>
 80240dc:	210a      	movs	r1, #10
 80240de:	69fb      	ldr	r3, [r7, #28]
 80240e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80240e4:	2b00      	cmp	r3, #0
 80240e6:	d001      	beq.n	80240ec <mg_tcpip_driver_stm32h_poll+0xf0>
 80240e8:	4b0a      	ldr	r3, [pc, #40]	@ (8024114 <mg_tcpip_driver_stm32h_poll+0x118>)
 80240ea:	e000      	b.n	80240ee <mg_tcpip_driver_stm32h_poll+0xf2>
 80240ec:	4b0a      	ldr	r3, [pc, #40]	@ (8024118 <mg_tcpip_driver_stm32h_poll+0x11c>)
 80240ee:	461a      	mov	r2, r3
 80240f0:	480a      	ldr	r0, [pc, #40]	@ (802411c <mg_tcpip_driver_stm32h_poll+0x120>)
 80240f2:	f7eb fb77 	bl	800f7e4 <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 80240f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80240f8:	4618      	mov	r0, r3
 80240fa:	3720      	adds	r7, #32
 80240fc:	46bd      	mov	sp, r7
 80240fe:	bd80      	pop	{r7, pc}
 8024100:	0802ff90 	.word	0x0802ff90
 8024104:	40028000 	.word	0x40028000
 8024108:	2400025c 	.word	0x2400025c
 802410c:	08031518 	.word	0x08031518
 8024110:	0802d330 	.word	0x0802d330
 8024114:	0802ffdc 	.word	0x0802ffdc
 8024118:	0802ffe4 	.word	0x0802ffe4
 802411c:	0802ffec 	.word	0x0802ffec

08024120 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8024120:	b580      	push	{r7, lr}
 8024122:	b082      	sub	sp, #8
 8024124:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8024126:	4b40      	ldr	r3, [pc, #256]	@ (8024228 <ETH_IRQHandler+0x108>)
 8024128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802412c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8024130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024134:	2b00      	cmp	r3, #0
 8024136:	d065      	beq.n	8024204 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8024138:	4b3b      	ldr	r3, [pc, #236]	@ (8024228 <ETH_IRQHandler+0x108>)
 802413a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802413e:	461a      	mov	r2, r3
 8024140:	f248 0340 	movw	r3, #32832	@ 0x8040
 8024144:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8024148:	2300      	movs	r3, #0
 802414a:	607b      	str	r3, [r7, #4]
 802414c:	e055      	b.n	80241fa <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 802414e:	4b37      	ldr	r3, [pc, #220]	@ (802422c <ETH_IRQHandler+0x10c>)
 8024150:	681b      	ldr	r3, [r3, #0]
 8024152:	4a37      	ldr	r2, [pc, #220]	@ (8024230 <ETH_IRQHandler+0x110>)
 8024154:	011b      	lsls	r3, r3, #4
 8024156:	4413      	add	r3, r2
 8024158:	330c      	adds	r3, #12
 802415a:	681b      	ldr	r3, [r3, #0]
 802415c:	2b00      	cmp	r3, #0
 802415e:	db50      	blt.n	8024202 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 8024160:	4b32      	ldr	r3, [pc, #200]	@ (802422c <ETH_IRQHandler+0x10c>)
 8024162:	681b      	ldr	r3, [r3, #0]
 8024164:	4a32      	ldr	r2, [pc, #200]	@ (8024230 <ETH_IRQHandler+0x110>)
 8024166:	011b      	lsls	r3, r3, #4
 8024168:	4413      	add	r3, r2
 802416a:	330c      	adds	r3, #12
 802416c:	681b      	ldr	r3, [r3, #0]
 802416e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8024172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8024176:	d128      	bne.n	80241ca <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8024178:	4b2c      	ldr	r3, [pc, #176]	@ (802422c <ETH_IRQHandler+0x10c>)
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	4a2c      	ldr	r2, [pc, #176]	@ (8024230 <ETH_IRQHandler+0x110>)
 802417e:	011b      	lsls	r3, r3, #4
 8024180:	4413      	add	r3, r2
 8024182:	330c      	adds	r3, #12
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 802418a:	2b00      	cmp	r3, #0
 802418c:	d11d      	bne.n	80241ca <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 802418e:	4b27      	ldr	r3, [pc, #156]	@ (802422c <ETH_IRQHandler+0x10c>)
 8024190:	681b      	ldr	r3, [r3, #0]
 8024192:	4a27      	ldr	r2, [pc, #156]	@ (8024230 <ETH_IRQHandler+0x110>)
 8024194:	011b      	lsls	r3, r3, #4
 8024196:	4413      	add	r3, r2
 8024198:	330c      	adds	r3, #12
 802419a:	681b      	ldr	r3, [r3, #0]
 802419c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80241a0:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80241a2:	4b22      	ldr	r3, [pc, #136]	@ (802422c <ETH_IRQHandler+0x10c>)
 80241a4:	681b      	ldr	r3, [r3, #0]
 80241a6:	f240 6204 	movw	r2, #1540	@ 0x604
 80241aa:	fb02 f303 	mul.w	r3, r2, r3
 80241ae:	4a21      	ldr	r2, [pc, #132]	@ (8024234 <ETH_IRQHandler+0x114>)
 80241b0:	1898      	adds	r0, r3, r2
 80241b2:	683b      	ldr	r3, [r7, #0]
 80241b4:	2b04      	cmp	r3, #4
 80241b6:	d902      	bls.n	80241be <ETH_IRQHandler+0x9e>
 80241b8:	683b      	ldr	r3, [r7, #0]
 80241ba:	3b04      	subs	r3, #4
 80241bc:	e000      	b.n	80241c0 <ETH_IRQHandler+0xa0>
 80241be:	683b      	ldr	r3, [r7, #0]
 80241c0:	4a1d      	ldr	r2, [pc, #116]	@ (8024238 <ETH_IRQHandler+0x118>)
 80241c2:	6812      	ldr	r2, [r2, #0]
 80241c4:	4619      	mov	r1, r3
 80241c6:	f7ef f87b 	bl	80132c0 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80241ca:	4b18      	ldr	r3, [pc, #96]	@ (802422c <ETH_IRQHandler+0x10c>)
 80241cc:	681b      	ldr	r3, [r3, #0]
 80241ce:	4a18      	ldr	r2, [pc, #96]	@ (8024230 <ETH_IRQHandler+0x110>)
 80241d0:	011b      	lsls	r3, r3, #4
 80241d2:	4413      	add	r3, r2
 80241d4:	330c      	adds	r3, #12
 80241d6:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80241da:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80241dc:	4b13      	ldr	r3, [pc, #76]	@ (802422c <ETH_IRQHandler+0x10c>)
 80241de:	681b      	ldr	r3, [r3, #0]
 80241e0:	3301      	adds	r3, #1
 80241e2:	4a12      	ldr	r2, [pc, #72]	@ (802422c <ETH_IRQHandler+0x10c>)
 80241e4:	6013      	str	r3, [r2, #0]
 80241e6:	4b11      	ldr	r3, [pc, #68]	@ (802422c <ETH_IRQHandler+0x10c>)
 80241e8:	681b      	ldr	r3, [r3, #0]
 80241ea:	2b03      	cmp	r3, #3
 80241ec:	d902      	bls.n	80241f4 <ETH_IRQHandler+0xd4>
 80241ee:	4b0f      	ldr	r3, [pc, #60]	@ (802422c <ETH_IRQHandler+0x10c>)
 80241f0:	2200      	movs	r2, #0
 80241f2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	3301      	adds	r3, #1
 80241f8:	607b      	str	r3, [r7, #4]
 80241fa:	687b      	ldr	r3, [r7, #4]
 80241fc:	2b09      	cmp	r3, #9
 80241fe:	d9a6      	bls.n	802414e <ETH_IRQHandler+0x2e>
 8024200:	e000      	b.n	8024204 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8024202:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8024204:	4b08      	ldr	r3, [pc, #32]	@ (8024228 <ETH_IRQHandler+0x108>)
 8024206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802420a:	461a      	mov	r2, r3
 802420c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8024210:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8024214:	4a04      	ldr	r2, [pc, #16]	@ (8024228 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8024216:	4b09      	ldr	r3, [pc, #36]	@ (802423c <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8024218:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802421c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8024220:	bf00      	nop
 8024222:	3708      	adds	r7, #8
 8024224:	46bd      	mov	sp, r7
 8024226:	bd80      	pop	{r7, pc}
 8024228:	40028000 	.word	0x40028000
 802422c:	2401ce4c 	.word	0x2401ce4c
 8024230:	24019da4 	.word	0x24019da4
 8024234:	24019e24 	.word	0x24019e24
 8024238:	2401ce44 	.word	0x2401ce44
 802423c:	24019dd4 	.word	0x24019dd4

08024240 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1749138029},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8024240:	b480      	push	{r7}
 8024242:	b083      	sub	sp, #12
 8024244:	af00      	add	r7, sp, #0
 8024246:	6078      	str	r0, [r7, #4]
 8024248:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 802424a:	e005      	b.n	8024258 <scmp+0x18>
 802424c:	687b      	ldr	r3, [r7, #4]
 802424e:	3301      	adds	r3, #1
 8024250:	607b      	str	r3, [r7, #4]
 8024252:	683b      	ldr	r3, [r7, #0]
 8024254:	3301      	adds	r3, #1
 8024256:	603b      	str	r3, [r7, #0]
 8024258:	687b      	ldr	r3, [r7, #4]
 802425a:	781b      	ldrb	r3, [r3, #0]
 802425c:	2b00      	cmp	r3, #0
 802425e:	d005      	beq.n	802426c <scmp+0x2c>
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	781a      	ldrb	r2, [r3, #0]
 8024264:	683b      	ldr	r3, [r7, #0]
 8024266:	781b      	ldrb	r3, [r3, #0]
 8024268:	429a      	cmp	r2, r3
 802426a:	d0ef      	beq.n	802424c <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 802426c:	687b      	ldr	r3, [r7, #4]
 802426e:	781b      	ldrb	r3, [r3, #0]
 8024270:	461a      	mov	r2, r3
 8024272:	683b      	ldr	r3, [r7, #0]
 8024274:	781b      	ldrb	r3, [r3, #0]
 8024276:	1ad3      	subs	r3, r2, r3
}
 8024278:	4618      	mov	r0, r3
 802427a:	370c      	adds	r7, #12
 802427c:	46bd      	mov	sp, r7
 802427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024282:	4770      	bx	lr

08024284 <mg_unlist>:
const char *mg_unlist(size_t no) {
 8024284:	b480      	push	{r7}
 8024286:	b083      	sub	sp, #12
 8024288:	af00      	add	r7, sp, #0
 802428a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 802428c:	4906      	ldr	r1, [pc, #24]	@ (80242a8 <mg_unlist+0x24>)
 802428e:	687a      	ldr	r2, [r7, #4]
 8024290:	4613      	mov	r3, r2
 8024292:	005b      	lsls	r3, r3, #1
 8024294:	4413      	add	r3, r2
 8024296:	00db      	lsls	r3, r3, #3
 8024298:	440b      	add	r3, r1
 802429a:	681b      	ldr	r3, [r3, #0]
}
 802429c:	4618      	mov	r0, r3
 802429e:	370c      	adds	r7, #12
 80242a0:	46bd      	mov	sp, r7
 80242a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242a6:	4770      	bx	lr
 80242a8:	0803e620 	.word	0x0803e620

080242ac <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 80242ac:	b580      	push	{r7, lr}
 80242ae:	b086      	sub	sp, #24
 80242b0:	af00      	add	r7, sp, #0
 80242b2:	60f8      	str	r0, [r7, #12]
 80242b4:	60b9      	str	r1, [r7, #8]
 80242b6:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 80242b8:	4b16      	ldr	r3, [pc, #88]	@ (8024314 <mg_unpack+0x68>)
 80242ba:	617b      	str	r3, [r7, #20]
 80242bc:	e020      	b.n	8024300 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 80242be:	697b      	ldr	r3, [r7, #20]
 80242c0:	681b      	ldr	r3, [r3, #0]
 80242c2:	68f9      	ldr	r1, [r7, #12]
 80242c4:	4618      	mov	r0, r3
 80242c6:	f7ff ffbb 	bl	8024240 <scmp>
 80242ca:	4603      	mov	r3, r0
 80242cc:	2b00      	cmp	r3, #0
 80242ce:	d113      	bne.n	80242f8 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 80242d0:	68bb      	ldr	r3, [r7, #8]
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	d004      	beq.n	80242e0 <mg_unpack+0x34>
 80242d6:	697b      	ldr	r3, [r7, #20]
 80242d8:	689b      	ldr	r3, [r3, #8]
 80242da:	1e5a      	subs	r2, r3, #1
 80242dc:	68bb      	ldr	r3, [r7, #8]
 80242de:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	d005      	beq.n	80242f2 <mg_unpack+0x46>
 80242e6:	697b      	ldr	r3, [r7, #20]
 80242e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80242ec:	6879      	ldr	r1, [r7, #4]
 80242ee:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 80242f2:	697b      	ldr	r3, [r7, #20]
 80242f4:	685b      	ldr	r3, [r3, #4]
 80242f6:	e008      	b.n	802430a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 80242f8:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 80242fa:	697b      	ldr	r3, [r7, #20]
 80242fc:	3318      	adds	r3, #24
 80242fe:	617b      	str	r3, [r7, #20]
 8024300:	697b      	ldr	r3, [r7, #20]
 8024302:	681b      	ldr	r3, [r3, #0]
 8024304:	2b00      	cmp	r3, #0
 8024306:	d1da      	bne.n	80242be <mg_unpack+0x12>
  }
  return NULL;
 8024308:	2300      	movs	r3, #0
}
 802430a:	4618      	mov	r0, r3
 802430c:	3718      	adds	r7, #24
 802430e:	46bd      	mov	sp, r7
 8024310:	bd80      	pop	{r7, pc}
 8024312:	bf00      	nop
 8024314:	0803e620 	.word	0x0803e620

08024318 <glue_modbus_read_reg>:

// Read/write registers via Modbus API
// Return true if the register is read/written successfully, false otherwise
// The address is a 16-bit unsigned integer, the value is also a 16-bit unsigned integer
// The address is in the range [s_modbus_base, s_modbus_base + count), where count is the number of registers
bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8024318:	b580      	push	{r7, lr}
 802431a:	b084      	sub	sp, #16
 802431c:	af00      	add	r7, sp, #0
 802431e:	4603      	mov	r3, r0
 8024320:	6039      	str	r1, [r7, #0]
 8024322:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8024324:	2300      	movs	r3, #0
 8024326:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8024328:	23e1      	movs	r3, #225	@ 0xe1
 802432a:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 802432c:	4b19      	ldr	r3, [pc, #100]	@ (8024394 <glue_modbus_read_reg+0x7c>)
 802432e:	881b      	ldrh	r3, [r3, #0]
 8024330:	88fa      	ldrh	r2, [r7, #6]
 8024332:	429a      	cmp	r2, r3
 8024334:	d312      	bcc.n	802435c <glue_modbus_read_reg+0x44>
 8024336:	88fa      	ldrh	r2, [r7, #6]
 8024338:	4b16      	ldr	r3, [pc, #88]	@ (8024394 <glue_modbus_read_reg+0x7c>)
 802433a:	881b      	ldrh	r3, [r3, #0]
 802433c:	4619      	mov	r1, r3
 802433e:	68bb      	ldr	r3, [r7, #8]
 8024340:	440b      	add	r3, r1
 8024342:	429a      	cmp	r2, r3
 8024344:	d20a      	bcs.n	802435c <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8024346:	88fb      	ldrh	r3, [r7, #6]
 8024348:	4a12      	ldr	r2, [pc, #72]	@ (8024394 <glue_modbus_read_reg+0x7c>)
 802434a:	8812      	ldrh	r2, [r2, #0]
 802434c:	1a9b      	subs	r3, r3, r2
 802434e:	4a12      	ldr	r2, [pc, #72]	@ (8024398 <glue_modbus_read_reg+0x80>)
 8024350:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8024354:	683b      	ldr	r3, [r7, #0]
 8024356:	801a      	strh	r2, [r3, #0]
    success = true;
 8024358:	2301      	movs	r3, #1
 802435a:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Read OK" : "Read FAIL", address, *value));
 802435c:	4b0f      	ldr	r3, [pc, #60]	@ (802439c <glue_modbus_read_reg+0x84>)
 802435e:	681b      	ldr	r3, [r3, #0]
 8024360:	2b01      	cmp	r3, #1
 8024362:	dd11      	ble.n	8024388 <glue_modbus_read_reg+0x70>
 8024364:	4b0e      	ldr	r3, [pc, #56]	@ (80243a0 <glue_modbus_read_reg+0x88>)
 8024366:	221a      	movs	r2, #26
 8024368:	490e      	ldr	r1, [pc, #56]	@ (80243a4 <glue_modbus_read_reg+0x8c>)
 802436a:	2002      	movs	r0, #2
 802436c:	f7eb f9ea 	bl	800f744 <mg_log_prefix>
 8024370:	7bfb      	ldrb	r3, [r7, #15]
 8024372:	2b00      	cmp	r3, #0
 8024374:	d001      	beq.n	802437a <glue_modbus_read_reg+0x62>
 8024376:	490c      	ldr	r1, [pc, #48]	@ (80243a8 <glue_modbus_read_reg+0x90>)
 8024378:	e000      	b.n	802437c <glue_modbus_read_reg+0x64>
 802437a:	490c      	ldr	r1, [pc, #48]	@ (80243ac <glue_modbus_read_reg+0x94>)
 802437c:	88fa      	ldrh	r2, [r7, #6]
 802437e:	683b      	ldr	r3, [r7, #0]
 8024380:	881b      	ldrh	r3, [r3, #0]
 8024382:	480b      	ldr	r0, [pc, #44]	@ (80243b0 <glue_modbus_read_reg+0x98>)
 8024384:	f7eb fa2e 	bl	800f7e4 <mg_log>
  return success;
 8024388:	7bfb      	ldrb	r3, [r7, #15]
}
 802438a:	4618      	mov	r0, r3
 802438c:	3710      	adds	r7, #16
 802438e:	46bd      	mov	sp, r7
 8024390:	bd80      	pop	{r7, pc}
 8024392:	bf00      	nop
 8024394:	240002b4 	.word	0x240002b4
 8024398:	2401cee4 	.word	0x2401cee4
 802439c:	2400025c 	.word	0x2400025c
 80243a0:	0803e650 	.word	0x0803e650
 80243a4:	0803001c 	.word	0x0803001c
 80243a8:	08030038 	.word	0x08030038
 80243ac:	08030040 	.word	0x08030040
 80243b0:	0803004c 	.word	0x0803004c

080243b4 <glue_modbus_write_reg>:

void ws_voltage(struct mg_connection *c) {
  mg_ws_printf(c, WEBSOCKET_OP_TEXT, "{%m: %u}", MG_ESC("voltage"), glue_get_local_reg(1010));
}

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 80243b4:	b580      	push	{r7, lr}
 80243b6:	b084      	sub	sp, #16
 80243b8:	af00      	add	r7, sp, #0
 80243ba:	4603      	mov	r3, r0
 80243bc:	460a      	mov	r2, r1
 80243be:	80fb      	strh	r3, [r7, #6]
 80243c0:	4613      	mov	r3, r2
 80243c2:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 80243c4:	2300      	movs	r3, #0
 80243c6:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 80243c8:	23e1      	movs	r3, #225	@ 0xe1
 80243ca:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 80243cc:	4b18      	ldr	r3, [pc, #96]	@ (8024430 <glue_modbus_write_reg+0x7c>)
 80243ce:	881b      	ldrh	r3, [r3, #0]
 80243d0:	88fa      	ldrh	r2, [r7, #6]
 80243d2:	429a      	cmp	r2, r3
 80243d4:	d311      	bcc.n	80243fa <glue_modbus_write_reg+0x46>
 80243d6:	88fa      	ldrh	r2, [r7, #6]
 80243d8:	4b15      	ldr	r3, [pc, #84]	@ (8024430 <glue_modbus_write_reg+0x7c>)
 80243da:	881b      	ldrh	r3, [r3, #0]
 80243dc:	4619      	mov	r1, r3
 80243de:	68bb      	ldr	r3, [r7, #8]
 80243e0:	440b      	add	r3, r1
 80243e2:	429a      	cmp	r2, r3
 80243e4:	d209      	bcs.n	80243fa <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 80243e6:	88fb      	ldrh	r3, [r7, #6]
 80243e8:	4a11      	ldr	r2, [pc, #68]	@ (8024430 <glue_modbus_write_reg+0x7c>)
 80243ea:	8812      	ldrh	r2, [r2, #0]
 80243ec:	1a9b      	subs	r3, r3, r2
 80243ee:	4911      	ldr	r1, [pc, #68]	@ (8024434 <glue_modbus_write_reg+0x80>)
 80243f0:	88ba      	ldrh	r2, [r7, #4]
 80243f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 80243f6:	2301      	movs	r3, #1
 80243f8:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Write OK" : "Write FAIL", address, value));
 80243fa:	4b0f      	ldr	r3, [pc, #60]	@ (8024438 <glue_modbus_write_reg+0x84>)
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	2b01      	cmp	r3, #1
 8024400:	dd10      	ble.n	8024424 <glue_modbus_write_reg+0x70>
 8024402:	4b0e      	ldr	r3, [pc, #56]	@ (802443c <glue_modbus_write_reg+0x88>)
 8024404:	2229      	movs	r2, #41	@ 0x29
 8024406:	490e      	ldr	r1, [pc, #56]	@ (8024440 <glue_modbus_write_reg+0x8c>)
 8024408:	2002      	movs	r0, #2
 802440a:	f7eb f99b 	bl	800f744 <mg_log_prefix>
 802440e:	7bfb      	ldrb	r3, [r7, #15]
 8024410:	2b00      	cmp	r3, #0
 8024412:	d001      	beq.n	8024418 <glue_modbus_write_reg+0x64>
 8024414:	490b      	ldr	r1, [pc, #44]	@ (8024444 <glue_modbus_write_reg+0x90>)
 8024416:	e000      	b.n	802441a <glue_modbus_write_reg+0x66>
 8024418:	490b      	ldr	r1, [pc, #44]	@ (8024448 <glue_modbus_write_reg+0x94>)
 802441a:	88fa      	ldrh	r2, [r7, #6]
 802441c:	88bb      	ldrh	r3, [r7, #4]
 802441e:	480b      	ldr	r0, [pc, #44]	@ (802444c <glue_modbus_write_reg+0x98>)
 8024420:	f7eb f9e0 	bl	800f7e4 <mg_log>
  return success;
 8024424:	7bfb      	ldrb	r3, [r7, #15]

}
 8024426:	4618      	mov	r0, r3
 8024428:	3710      	adds	r7, #16
 802442a:	46bd      	mov	sp, r7
 802442c:	bd80      	pop	{r7, pc}
 802442e:	bf00      	nop
 8024430:	240002b4 	.word	0x240002b4
 8024434:	2401cee4 	.word	0x2401cee4
 8024438:	2400025c 	.word	0x2400025c
 802443c:	0803e668 	.word	0x0803e668
 8024440:	0803001c 	.word	0x0803001c
 8024444:	08030070 	.word	0x08030070
 8024448:	0803007c 	.word	0x0803007c
 802444c:	0803004c 	.word	0x0803004c

08024450 <glue_get_local_reg>:

uint16_t glue_get_local_reg(uint16_t address) {
 8024450:	b480      	push	{r7}
 8024452:	b085      	sub	sp, #20
 8024454:	af00      	add	r7, sp, #0
 8024456:	4603      	mov	r3, r0
 8024458:	80fb      	strh	r3, [r7, #6]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 802445a:	23e1      	movs	r3, #225	@ 0xe1
 802445c:	60fb      	str	r3, [r7, #12]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 802445e:	4b0e      	ldr	r3, [pc, #56]	@ (8024498 <glue_get_local_reg+0x48>)
 8024460:	881b      	ldrh	r3, [r3, #0]
 8024462:	88fa      	ldrh	r2, [r7, #6]
 8024464:	429a      	cmp	r2, r3
 8024466:	d30f      	bcc.n	8024488 <glue_get_local_reg+0x38>
 8024468:	88fa      	ldrh	r2, [r7, #6]
 802446a:	4b0b      	ldr	r3, [pc, #44]	@ (8024498 <glue_get_local_reg+0x48>)
 802446c:	881b      	ldrh	r3, [r3, #0]
 802446e:	4619      	mov	r1, r3
 8024470:	68fb      	ldr	r3, [r7, #12]
 8024472:	440b      	add	r3, r1
 8024474:	429a      	cmp	r2, r3
 8024476:	d207      	bcs.n	8024488 <glue_get_local_reg+0x38>
    return s_modbus_regs[address - s_modbus_base];
 8024478:	88fb      	ldrh	r3, [r7, #6]
 802447a:	4a07      	ldr	r2, [pc, #28]	@ (8024498 <glue_get_local_reg+0x48>)
 802447c:	8812      	ldrh	r2, [r2, #0]
 802447e:	1a9b      	subs	r3, r3, r2
 8024480:	4a06      	ldr	r2, [pc, #24]	@ (802449c <glue_get_local_reg+0x4c>)
 8024482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024486:	e000      	b.n	802448a <glue_get_local_reg+0x3a>
  }
  return 0;
 8024488:	2300      	movs	r3, #0
}
 802448a:	4618      	mov	r0, r3
 802448c:	3714      	adds	r7, #20
 802448e:	46bd      	mov	sp, r7
 8024490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024494:	4770      	bx	lr
 8024496:	bf00      	nop
 8024498:	240002b4 	.word	0x240002b4
 802449c:	2401cee4 	.word	0x2401cee4

080244a0 <glue_authenticate>:
  return true;
}
// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 80244a0:	b580      	push	{r7, lr}
 80244a2:	b084      	sub	sp, #16
 80244a4:	af00      	add	r7, sp, #0
 80244a6:	6078      	str	r0, [r7, #4]
 80244a8:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 80244aa:	2300      	movs	r3, #0
 80244ac:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "admin") == 0 && strcmp(pass, "admin") == 0) {
 80244ae:	4913      	ldr	r1, [pc, #76]	@ (80244fc <glue_authenticate+0x5c>)
 80244b0:	6878      	ldr	r0, [r7, #4]
 80244b2:	f7db ff2d 	bl	8000310 <strcmp>
 80244b6:	4603      	mov	r3, r0
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d109      	bne.n	80244d0 <glue_authenticate+0x30>
 80244bc:	490f      	ldr	r1, [pc, #60]	@ (80244fc <glue_authenticate+0x5c>)
 80244be:	6838      	ldr	r0, [r7, #0]
 80244c0:	f7db ff26 	bl	8000310 <strcmp>
 80244c4:	4603      	mov	r3, r0
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d102      	bne.n	80244d0 <glue_authenticate+0x30>
    level = 7;  // Administrator
 80244ca:	2307      	movs	r3, #7
 80244cc:	60fb      	str	r3, [r7, #12]
 80244ce:	e00f      	b.n	80244f0 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 80244d0:	490b      	ldr	r1, [pc, #44]	@ (8024500 <glue_authenticate+0x60>)
 80244d2:	6878      	ldr	r0, [r7, #4]
 80244d4:	f7db ff1c 	bl	8000310 <strcmp>
 80244d8:	4603      	mov	r3, r0
 80244da:	2b00      	cmp	r3, #0
 80244dc:	d108      	bne.n	80244f0 <glue_authenticate+0x50>
 80244de:	4908      	ldr	r1, [pc, #32]	@ (8024500 <glue_authenticate+0x60>)
 80244e0:	6838      	ldr	r0, [r7, #0]
 80244e2:	f7db ff15 	bl	8000310 <strcmp>
 80244e6:	4603      	mov	r3, r0
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	d101      	bne.n	80244f0 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 80244ec:	2303      	movs	r3, #3
 80244ee:	60fb      	str	r3, [r7, #12]
  }
  return level;
 80244f0:	68fb      	ldr	r3, [r7, #12]
}
 80244f2:	4618      	mov	r0, r3
 80244f4:	3710      	adds	r7, #16
 80244f6:	46bd      	mov	sp, r7
 80244f8:	bd80      	pop	{r7, pc}
 80244fa:	bf00      	nop
 80244fc:	08030088 	.word	0x08030088
 8024500:	08030090 	.word	0x08030090

08024504 <glue_check_reboot>:

static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8024504:	b580      	push	{r7, lr}
 8024506:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8024508:	f7f3 f8f6 	bl	80176f8 <mg_now>
 802450c:	4b05      	ldr	r3, [pc, #20]	@ (8024524 <glue_check_reboot+0x20>)
 802450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024512:	4290      	cmp	r0, r2
 8024514:	eb71 0303 	sbcs.w	r3, r1, r3
 8024518:	bf34      	ite	cc
 802451a:	2301      	movcc	r3, #1
 802451c:	2300      	movcs	r3, #0
 802451e:	b2db      	uxtb	r3, r3
}
 8024520:	4618      	mov	r0, r3
 8024522:	bd80      	pop	{r7, pc}
 8024524:	2401d0a8 	.word	0x2401d0a8

08024528 <glue_start_reboot>:
void glue_start_reboot(struct mg_str params) {
 8024528:	b5b0      	push	{r4, r5, r7, lr}
 802452a:	b082      	sub	sp, #8
 802452c:	af00      	add	r7, sp, #0
 802452e:	463b      	mov	r3, r7
 8024530:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8024534:	4b0f      	ldr	r3, [pc, #60]	@ (8024574 <glue_start_reboot+0x4c>)
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	2b02      	cmp	r3, #2
 802453a:	dd0b      	ble.n	8024554 <glue_start_reboot+0x2c>
 802453c:	4b0e      	ldr	r3, [pc, #56]	@ (8024578 <glue_start_reboot+0x50>)
 802453e:	224e      	movs	r2, #78	@ 0x4e
 8024540:	490e      	ldr	r1, [pc, #56]	@ (802457c <glue_start_reboot+0x54>)
 8024542:	2003      	movs	r0, #3
 8024544:	f7eb f8fe 	bl	800f744 <mg_log_prefix>
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	683a      	ldr	r2, [r7, #0]
 802454c:	4619      	mov	r1, r3
 802454e:	480c      	ldr	r0, [pc, #48]	@ (8024580 <glue_start_reboot+0x58>)
 8024550:	f7eb f948 	bl	800f7e4 <mg_log>
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8024554:	f7f3 f8d0 	bl	80176f8 <mg_now>
 8024558:	4602      	mov	r2, r0
 802455a:	460b      	mov	r3, r1
 802455c:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8024560:	f143 0500 	adc.w	r5, r3, #0
 8024564:	4b07      	ldr	r3, [pc, #28]	@ (8024584 <glue_start_reboot+0x5c>)
 8024566:	e9c3 4500 	strd	r4, r5, [r3]
}
 802456a:	bf00      	nop
 802456c:	3708      	adds	r7, #8
 802456e:	46bd      	mov	sp, r7
 8024570:	bdb0      	pop	{r4, r5, r7, pc}
 8024572:	bf00      	nop
 8024574:	2400025c 	.word	0x2400025c
 8024578:	0803e680 	.word	0x0803e680
 802457c:	0803001c 	.word	0x0803001c
 8024580:	08030098 	.word	0x08030098
 8024584:	2401d0a8 	.word	0x2401d0a8

08024588 <glue_check_reformat>:

static uint64_t s_action_timeout_reformat;  // Time when reformat ends
bool glue_check_reformat(void) {
 8024588:	b580      	push	{r7, lr}
 802458a:	af00      	add	r7, sp, #0
  return s_action_timeout_reformat > mg_now(); // Return true if reformat is in progress
 802458c:	f7f3 f8b4 	bl	80176f8 <mg_now>
 8024590:	4b05      	ldr	r3, [pc, #20]	@ (80245a8 <glue_check_reformat+0x20>)
 8024592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024596:	4290      	cmp	r0, r2
 8024598:	eb71 0303 	sbcs.w	r3, r1, r3
 802459c:	bf34      	ite	cc
 802459e:	2301      	movcc	r3, #1
 80245a0:	2300      	movcs	r3, #0
 80245a2:	b2db      	uxtb	r3, r3
}
 80245a4:	4618      	mov	r0, r3
 80245a6:	bd80      	pop	{r7, pc}
 80245a8:	2401d0b0 	.word	0x2401d0b0

080245ac <glue_start_reformat>:
void glue_start_reformat(struct mg_str params) {
 80245ac:	b5b0      	push	{r4, r5, r7, lr}
 80245ae:	b082      	sub	sp, #8
 80245b0:	af00      	add	r7, sp, #0
 80245b2:	463b      	mov	r3, r7
 80245b4:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 80245b8:	4b0f      	ldr	r3, [pc, #60]	@ (80245f8 <glue_start_reformat+0x4c>)
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	2b02      	cmp	r3, #2
 80245be:	dd0b      	ble.n	80245d8 <glue_start_reformat+0x2c>
 80245c0:	4b0e      	ldr	r3, [pc, #56]	@ (80245fc <glue_start_reformat+0x50>)
 80245c2:	2257      	movs	r2, #87	@ 0x57
 80245c4:	490e      	ldr	r1, [pc, #56]	@ (8024600 <glue_start_reformat+0x54>)
 80245c6:	2003      	movs	r0, #3
 80245c8:	f7eb f8bc 	bl	800f744 <mg_log_prefix>
 80245cc:	687b      	ldr	r3, [r7, #4]
 80245ce:	683a      	ldr	r2, [r7, #0]
 80245d0:	4619      	mov	r1, r3
 80245d2:	480c      	ldr	r0, [pc, #48]	@ (8024604 <glue_start_reformat+0x58>)
 80245d4:	f7eb f906 	bl	800f7e4 <mg_log>
  s_action_timeout_reformat = mg_now() + 1000; // Start reformat, finish after 1 second
 80245d8:	f7f3 f88e 	bl	80176f8 <mg_now>
 80245dc:	4602      	mov	r2, r0
 80245de:	460b      	mov	r3, r1
 80245e0:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 80245e4:	f143 0500 	adc.w	r5, r3, #0
 80245e8:	4b07      	ldr	r3, [pc, #28]	@ (8024608 <glue_start_reformat+0x5c>)
 80245ea:	e9c3 4500 	strd	r4, r5, [r3]
}
 80245ee:	bf00      	nop
 80245f0:	3708      	adds	r7, #8
 80245f2:	46bd      	mov	sp, r7
 80245f4:	bdb0      	pop	{r4, r5, r7, pc}
 80245f6:	bf00      	nop
 80245f8:	2400025c 	.word	0x2400025c
 80245fc:	0803e694 	.word	0x0803e694
 8024600:	0803001c 	.word	0x0803001c
 8024604:	08030098 	.word	0x08030098
 8024608:	2401d0b0 	.word	0x2401d0b0

0802460c <glue_ota_begin_firmware_update>:

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 802460c:	b580      	push	{r7, lr}
 802460e:	b084      	sub	sp, #16
 8024610:	af00      	add	r7, sp, #0
 8024612:	6078      	str	r0, [r7, #4]
 8024614:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8024616:	6838      	ldr	r0, [r7, #0]
 8024618:	f7ef fbb8 	bl	8013d8c <mg_ota_begin>
 802461c:	4603      	mov	r3, r0
 802461e:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8024620:	4b0c      	ldr	r3, [pc, #48]	@ (8024654 <glue_ota_begin_firmware_update+0x48>)
 8024622:	681b      	ldr	r3, [r3, #0]
 8024624:	2b02      	cmp	r3, #2
 8024626:	dd0b      	ble.n	8024640 <glue_ota_begin_firmware_update+0x34>
 8024628:	4b0b      	ldr	r3, [pc, #44]	@ (8024658 <glue_ota_begin_firmware_update+0x4c>)
 802462a:	225d      	movs	r2, #93	@ 0x5d
 802462c:	490b      	ldr	r1, [pc, #44]	@ (802465c <glue_ota_begin_firmware_update+0x50>)
 802462e:	2003      	movs	r0, #3
 8024630:	f7eb f888 	bl	800f744 <mg_log_prefix>
 8024634:	7bfb      	ldrb	r3, [r7, #15]
 8024636:	683a      	ldr	r2, [r7, #0]
 8024638:	6879      	ldr	r1, [r7, #4]
 802463a:	4809      	ldr	r0, [pc, #36]	@ (8024660 <glue_ota_begin_firmware_update+0x54>)
 802463c:	f7eb f8d2 	bl	800f7e4 <mg_log>
  return ok ? (void *) 1 : NULL;
 8024640:	7bfb      	ldrb	r3, [r7, #15]
 8024642:	2b00      	cmp	r3, #0
 8024644:	d001      	beq.n	802464a <glue_ota_begin_firmware_update+0x3e>
 8024646:	2301      	movs	r3, #1
 8024648:	e000      	b.n	802464c <glue_ota_begin_firmware_update+0x40>
 802464a:	2300      	movs	r3, #0
}
 802464c:	4618      	mov	r0, r3
 802464e:	3710      	adds	r7, #16
 8024650:	46bd      	mov	sp, r7
 8024652:	bd80      	pop	{r7, pc}
 8024654:	2400025c 	.word	0x2400025c
 8024658:	0803e6a8 	.word	0x0803e6a8
 802465c:	0803001c 	.word	0x0803001c
 8024660:	080300b4 	.word	0x080300b4

08024664 <glue_ota_end_firmware_update>:
bool glue_ota_end_firmware_update(void *context) {
 8024664:	b580      	push	{r7, lr}
 8024666:	b086      	sub	sp, #24
 8024668:	af04      	add	r7, sp, #16
 802466a:	6078      	str	r0, [r7, #4]
  mg_timer_add(&g_mgr, 500, 0, (void (*)(void *)) (void *) mg_ota_end, context);
 802466c:	687b      	ldr	r3, [r7, #4]
 802466e:	9302      	str	r3, [sp, #8]
 8024670:	4b07      	ldr	r3, [pc, #28]	@ (8024690 <glue_ota_end_firmware_update+0x2c>)
 8024672:	9301      	str	r3, [sp, #4]
 8024674:	2300      	movs	r3, #0
 8024676:	9300      	str	r3, [sp, #0]
 8024678:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 802467c:	f04f 0300 	mov.w	r3, #0
 8024680:	4804      	ldr	r0, [pc, #16]	@ (8024694 <glue_ota_end_firmware_update+0x30>)
 8024682:	f7eb fe21 	bl	80102c8 <mg_timer_add>
  return true;
 8024686:	2301      	movs	r3, #1
}
 8024688:	4618      	mov	r0, r3
 802468a:	3708      	adds	r7, #8
 802468c:	46bd      	mov	sp, r7
 802468e:	bd80      	pop	{r7, pc}
 8024690:	08013ddd 	.word	0x08013ddd
 8024694:	2401d0b8 	.word	0x2401d0b8

08024698 <glue_ota_write_firmware_update>:
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 8024698:	b580      	push	{r7, lr}
 802469a:	b084      	sub	sp, #16
 802469c:	af00      	add	r7, sp, #0
 802469e:	60f8      	str	r0, [r7, #12]
 80246a0:	60b9      	str	r1, [r7, #8]
 80246a2:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 80246a4:	4b0c      	ldr	r3, [pc, #48]	@ (80246d8 <glue_ota_write_firmware_update+0x40>)
 80246a6:	681b      	ldr	r3, [r3, #0]
 80246a8:	2b02      	cmp	r3, #2
 80246aa:	dd0b      	ble.n	80246c4 <glue_ota_write_firmware_update+0x2c>
 80246ac:	4b0b      	ldr	r3, [pc, #44]	@ (80246dc <glue_ota_write_firmware_update+0x44>)
 80246ae:	2265      	movs	r2, #101	@ 0x65
 80246b0:	490b      	ldr	r1, [pc, #44]	@ (80246e0 <glue_ota_write_firmware_update+0x48>)
 80246b2:	2003      	movs	r0, #3
 80246b4:	f7eb f846 	bl	800f744 <mg_log_prefix>
 80246b8:	687b      	ldr	r3, [r7, #4]
 80246ba:	68ba      	ldr	r2, [r7, #8]
 80246bc:	68f9      	ldr	r1, [r7, #12]
 80246be:	4809      	ldr	r0, [pc, #36]	@ (80246e4 <glue_ota_write_firmware_update+0x4c>)
 80246c0:	f7eb f890 	bl	800f7e4 <mg_log>
  return mg_ota_write(buf, len);
 80246c4:	6879      	ldr	r1, [r7, #4]
 80246c6:	68b8      	ldr	r0, [r7, #8]
 80246c8:	f7ef fb76 	bl	8013db8 <mg_ota_write>
 80246cc:	4603      	mov	r3, r0
}
 80246ce:	4618      	mov	r0, r3
 80246d0:	3710      	adds	r7, #16
 80246d2:	46bd      	mov	sp, r7
 80246d4:	bd80      	pop	{r7, pc}
 80246d6:	bf00      	nop
 80246d8:	2400025c 	.word	0x2400025c
 80246dc:	0803e6c8 	.word	0x0803e6c8
 80246e0:	0803001c 	.word	0x0803001c
 80246e4:	080300c8 	.word	0x080300c8

080246e8 <glue_upload_open_file_upload>:

void *glue_upload_open_file_upload(char *file_name, size_t total_size) {
 80246e8:	b580      	push	{r7, lr}
 80246ea:	b0a4      	sub	sp, #144	@ 0x90
 80246ec:	af00      	add	r7, sp, #0
 80246ee:	6078      	str	r0, [r7, #4]
 80246f0:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 80246f2:	2300      	movs	r3, #0
 80246f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 80246f8:	2300      	movs	r3, #0
 80246fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 80246fe:	212f      	movs	r1, #47	@ 0x2f
 8024700:	6878      	ldr	r0, [r7, #4]
 8024702:	f004 f887 	bl	8028814 <strrchr>
 8024706:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 802470a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802470e:	2b00      	cmp	r3, #0
 8024710:	d102      	bne.n	8024718 <glue_upload_open_file_upload+0x30>
 8024712:	687b      	ldr	r3, [r7, #4]
 8024714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8024718:	f107 0008 	add.w	r0, r7, #8
 802471c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8024720:	4a0d      	ldr	r2, [pc, #52]	@ (8024758 <glue_upload_open_file_upload+0x70>)
 8024722:	2180      	movs	r1, #128	@ 0x80
 8024724:	f7ef fc4a 	bl	8013fbc <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8024728:	4b0c      	ldr	r3, [pc, #48]	@ (802475c <glue_upload_open_file_upload+0x74>)
 802472a:	681b      	ldr	r3, [r3, #0]
 802472c:	2b02      	cmp	r3, #2
 802472e:	dd0d      	ble.n	802474c <glue_upload_open_file_upload+0x64>
 8024730:	4b0b      	ldr	r3, [pc, #44]	@ (8024760 <glue_upload_open_file_upload+0x78>)
 8024732:	2271      	movs	r2, #113	@ 0x71
 8024734:	490b      	ldr	r1, [pc, #44]	@ (8024764 <glue_upload_open_file_upload+0x7c>)
 8024736:	2003      	movs	r0, #3
 8024738:	f7eb f804 	bl	800f744 <mg_log_prefix>
 802473c:	f107 0108 	add.w	r1, r7, #8
 8024740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8024744:	683a      	ldr	r2, [r7, #0]
 8024746:	4808      	ldr	r0, [pc, #32]	@ (8024768 <glue_upload_open_file_upload+0x80>)
 8024748:	f7eb f84c 	bl	800f7e4 <mg_log>
  return fp;
 802474c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8024750:	4618      	mov	r0, r3
 8024752:	3790      	adds	r7, #144	@ 0x90
 8024754:	46bd      	mov	sp, r7
 8024756:	bd80      	pop	{r7, pc}
 8024758:	080300d8 	.word	0x080300d8
 802475c:	2400025c 	.word	0x2400025c
 8024760:	0803e6e8 	.word	0x0803e6e8
 8024764:	0803001c 	.word	0x0803001c
 8024768:	080300e0 	.word	0x080300e0

0802476c <glue_upload_close_file_upload>:
bool glue_upload_close_file_upload(void *fp) {
 802476c:	b580      	push	{r7, lr}
 802476e:	b082      	sub	sp, #8
 8024770:	af00      	add	r7, sp, #0
 8024772:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 8024774:	4b09      	ldr	r3, [pc, #36]	@ (802479c <glue_upload_close_file_upload+0x30>)
 8024776:	681b      	ldr	r3, [r3, #0]
 8024778:	2b02      	cmp	r3, #2
 802477a:	dd09      	ble.n	8024790 <glue_upload_close_file_upload+0x24>
 802477c:	4b08      	ldr	r3, [pc, #32]	@ (80247a0 <glue_upload_close_file_upload+0x34>)
 802477e:	2275      	movs	r2, #117	@ 0x75
 8024780:	4908      	ldr	r1, [pc, #32]	@ (80247a4 <glue_upload_close_file_upload+0x38>)
 8024782:	2003      	movs	r0, #3
 8024784:	f7ea ffde 	bl	800f744 <mg_log_prefix>
 8024788:	6879      	ldr	r1, [r7, #4]
 802478a:	4807      	ldr	r0, [pc, #28]	@ (80247a8 <glue_upload_close_file_upload+0x3c>)
 802478c:	f7eb f82a 	bl	800f7e4 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 8024790:	2300      	movs	r3, #0
#endif
}
 8024792:	4618      	mov	r0, r3
 8024794:	3708      	adds	r7, #8
 8024796:	46bd      	mov	sp, r7
 8024798:	bd80      	pop	{r7, pc}
 802479a:	bf00      	nop
 802479c:	2400025c 	.word	0x2400025c
 80247a0:	0803e708 	.word	0x0803e708
 80247a4:	0803001c 	.word	0x0803001c
 80247a8:	08030100 	.word	0x08030100

080247ac <glue_upload_write_file_upload>:
bool glue_upload_write_file_upload(void *fp, void *buf, size_t len) {
 80247ac:	b580      	push	{r7, lr}
 80247ae:	b084      	sub	sp, #16
 80247b0:	af00      	add	r7, sp, #0
 80247b2:	60f8      	str	r0, [r7, #12]
 80247b4:	60b9      	str	r1, [r7, #8]
 80247b6:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 80247b8:	4b0a      	ldr	r3, [pc, #40]	@ (80247e4 <glue_upload_write_file_upload+0x38>)
 80247ba:	681b      	ldr	r3, [r3, #0]
 80247bc:	2b02      	cmp	r3, #2
 80247be:	dd0b      	ble.n	80247d8 <glue_upload_write_file_upload+0x2c>
 80247c0:	4b09      	ldr	r3, [pc, #36]	@ (80247e8 <glue_upload_write_file_upload+0x3c>)
 80247c2:	227d      	movs	r2, #125	@ 0x7d
 80247c4:	4909      	ldr	r1, [pc, #36]	@ (80247ec <glue_upload_write_file_upload+0x40>)
 80247c6:	2003      	movs	r0, #3
 80247c8:	f7ea ffbc 	bl	800f744 <mg_log_prefix>
 80247cc:	687b      	ldr	r3, [r7, #4]
 80247ce:	68ba      	ldr	r2, [r7, #8]
 80247d0:	68f9      	ldr	r1, [r7, #12]
 80247d2:	4807      	ldr	r0, [pc, #28]	@ (80247f0 <glue_upload_write_file_upload+0x44>)
 80247d4:	f7eb f806 	bl	800f7e4 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 80247d8:	2300      	movs	r3, #0
#endif
}
 80247da:	4618      	mov	r0, r3
 80247dc:	3710      	adds	r7, #16
 80247de:	46bd      	mov	sp, r7
 80247e0:	bd80      	pop	{r7, pc}
 80247e2:	bf00      	nop
 80247e4:	2400025c 	.word	0x2400025c
 80247e8:	0803e728 	.word	0x0803e728
 80247ec:	0803001c 	.word	0x0803001c
 80247f0:	0803010c 	.word	0x0803010c

080247f4 <glue_reply_graph_data>:

void glue_reply_graph_data(struct mg_connection *c, struct mg_http_message *hm) {
 80247f4:	b580      	push	{r7, lr}
 80247f6:	b086      	sub	sp, #24
 80247f8:	af02      	add	r7, sp, #8
 80247fa:	6078      	str	r0, [r7, #4]
 80247fc:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 80247fe:	4b08      	ldr	r3, [pc, #32]	@ (8024820 <glue_reply_graph_data+0x2c>)
 8024800:	60fb      	str	r3, [r7, #12]
  const char *value = "[[1724576787,20.3],[1724576847,27.2],[1724576907,29.7],[1724576967,27.9],[1724577027,25.1],[1724577087,23.8],[1724577147,22.5],[1724577207,22.2],[1724577267,23.3],[1724577327,23.9]]";
 8024802:	4b08      	ldr	r3, [pc, #32]	@ (8024824 <glue_reply_graph_data+0x30>)
 8024804:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8024806:	68bb      	ldr	r3, [r7, #8]
 8024808:	9300      	str	r3, [sp, #0]
 802480a:	4b07      	ldr	r3, [pc, #28]	@ (8024828 <glue_reply_graph_data+0x34>)
 802480c:	68fa      	ldr	r2, [r7, #12]
 802480e:	21c8      	movs	r1, #200	@ 0xc8
 8024810:	6878      	ldr	r0, [r7, #4]
 8024812:	f7e8 f823 	bl	800c85c <mg_http_reply>
}
 8024816:	bf00      	nop
 8024818:	3710      	adds	r7, #16
 802481a:	46bd      	mov	sp, r7
 802481c:	bd80      	pop	{r7, pc}
 802481e:	bf00      	nop
 8024820:	08030128 	.word	0x08030128
 8024824:	08030164 	.word	0x08030164
 8024828:	0803021c 	.word	0x0803021c

0802482c <glue_get_state>:
static struct state s_state = {42, 27, 67, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 802482c:	b5b0      	push	{r4, r5, r7, lr}
 802482e:	b082      	sub	sp, #8
 8024830:	af00      	add	r7, sp, #0
 8024832:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	4a17      	ldr	r2, [pc, #92]	@ (8024894 <glue_get_state+0x68>)
 8024838:	461c      	mov	r4, r3
 802483a:	4615      	mov	r5, r2
 802483c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802483e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024844:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  data->speed = glue_get_local_reg(1005);
 802484c:	f240 30ed 	movw	r0, #1005	@ 0x3ed
 8024850:	f7ff fdfe 	bl	8024450 <glue_get_local_reg>
 8024854:	4603      	mov	r3, r0
 8024856:	461a      	mov	r2, r3
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	601a      	str	r2, [r3, #0]
  data->temperature = glue_get_local_reg(1006);
 802485c:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 8024860:	f7ff fdf6 	bl	8024450 <glue_get_local_reg>
 8024864:	4603      	mov	r3, r0
 8024866:	461a      	mov	r2, r3
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	605a      	str	r2, [r3, #4]
  data->humidity = glue_get_local_reg(1007);
 802486c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8024870:	f7ff fdee 	bl	8024450 <glue_get_local_reg>
 8024874:	4603      	mov	r3, r0
 8024876:	461a      	mov	r2, r3
 8024878:	687b      	ldr	r3, [r7, #4]
 802487a:	609a      	str	r2, [r3, #8]
  data->level= glue_get_local_reg(1008);
 802487c:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 8024880:	f7ff fde6 	bl	8024450 <glue_get_local_reg>
 8024884:	4603      	mov	r3, r0
 8024886:	461a      	mov	r2, r3
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 802488c:	bf00      	nop
 802488e:	3708      	adds	r7, #8
 8024890:	46bd      	mov	sp, r7
 8024892:	bdb0      	pop	{r4, r5, r7, pc}
 8024894:	240002b8 	.word	0x240002b8

08024898 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8024898:	b580      	push	{r7, lr}
 802489a:	b082      	sub	sp, #8
 802489c:	af00      	add	r7, sp, #0
 802489e:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 80248a0:	687b      	ldr	r3, [r7, #4]
 80248a2:	4a17      	ldr	r2, [pc, #92]	@ (8024900 <glue_get_leds+0x68>)
 80248a4:	8811      	ldrh	r1, [r2, #0]
 80248a6:	7892      	ldrb	r2, [r2, #2]
 80248a8:	8019      	strh	r1, [r3, #0]
 80248aa:	709a      	strb	r2, [r3, #2]
  data->led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80248ac:	2101      	movs	r1, #1
 80248ae:	4815      	ldr	r0, [pc, #84]	@ (8024904 <glue_get_leds+0x6c>)
 80248b0:	f7df f88c 	bl	80039cc <HAL_GPIO_ReadPin>
 80248b4:	4603      	mov	r3, r0
 80248b6:	2b00      	cmp	r3, #0
 80248b8:	bf14      	ite	ne
 80248ba:	2301      	movne	r3, #1
 80248bc:	2300      	moveq	r3, #0
 80248be:	b2da      	uxtb	r2, r3
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	701a      	strb	r2, [r3, #0]
  data->led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 80248c4:	2102      	movs	r1, #2
 80248c6:	4810      	ldr	r0, [pc, #64]	@ (8024908 <glue_get_leds+0x70>)
 80248c8:	f7df f880 	bl	80039cc <HAL_GPIO_ReadPin>
 80248cc:	4603      	mov	r3, r0
 80248ce:	2b00      	cmp	r3, #0
 80248d0:	bf14      	ite	ne
 80248d2:	2301      	movne	r3, #1
 80248d4:	2300      	moveq	r3, #0
 80248d6:	b2da      	uxtb	r2, r3
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	705a      	strb	r2, [r3, #1]
  data->led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80248dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80248e0:	4808      	ldr	r0, [pc, #32]	@ (8024904 <glue_get_leds+0x6c>)
 80248e2:	f7df f873 	bl	80039cc <HAL_GPIO_ReadPin>
 80248e6:	4603      	mov	r3, r0
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	bf14      	ite	ne
 80248ec:	2301      	movne	r3, #1
 80248ee:	2300      	moveq	r3, #0
 80248f0:	b2da      	uxtb	r2, r3
 80248f2:	687b      	ldr	r3, [r7, #4]
 80248f4:	709a      	strb	r2, [r3, #2]
}
 80248f6:	bf00      	nop
 80248f8:	3708      	adds	r7, #8
 80248fa:	46bd      	mov	sp, r7
 80248fc:	bd80      	pop	{r7, pc}
 80248fe:	bf00      	nop
 8024900:	240002e4 	.word	0x240002e4
 8024904:	58020400 	.word	0x58020400
 8024908:	58021000 	.word	0x58021000

0802490c <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 802490c:	b580      	push	{r7, lr}
 802490e:	b082      	sub	sp, #8
 8024910:	af00      	add	r7, sp, #0
 8024912:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 8024914:	4b0f      	ldr	r3, [pc, #60]	@ (8024954 <glue_set_leds+0x48>)
 8024916:	687a      	ldr	r2, [r7, #4]
 8024918:	8811      	ldrh	r1, [r2, #0]
 802491a:	7892      	ldrb	r2, [r2, #2]
 802491c:	8019      	strh	r1, [r3, #0]
 802491e:	709a      	strb	r2, [r3, #2]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data->led1 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD1
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	781b      	ldrb	r3, [r3, #0]
 8024924:	461a      	mov	r2, r3
 8024926:	2101      	movs	r1, #1
 8024928:	480b      	ldr	r0, [pc, #44]	@ (8024958 <glue_set_leds+0x4c>)
 802492a:	f7df f867 	bl	80039fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, data->led2 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD2
 802492e:	687b      	ldr	r3, [r7, #4]
 8024930:	785b      	ldrb	r3, [r3, #1]
 8024932:	461a      	mov	r2, r3
 8024934:	2102      	movs	r1, #2
 8024936:	4809      	ldr	r0, [pc, #36]	@ (802495c <glue_set_leds+0x50>)
 8024938:	f7df f860 	bl	80039fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, data->led3 ? GPIO_PIN_SET : GPIO_PIN_RESET); // LD3
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	789b      	ldrb	r3, [r3, #2]
 8024940:	461a      	mov	r2, r3
 8024942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8024946:	4804      	ldr	r0, [pc, #16]	@ (8024958 <glue_set_leds+0x4c>)
 8024948:	f7df f858 	bl	80039fc <HAL_GPIO_WritePin>
}
 802494c:	bf00      	nop
 802494e:	3708      	adds	r7, #8
 8024950:	46bd      	mov	sp, r7
 8024952:	bd80      	pop	{r7, pc}
 8024954:	240002e4 	.word	0x240002e4
 8024958:	58020400 	.word	0x58020400
 802495c:	58021000 	.word	0x58021000

08024960 <glue_get_network_settings>:

static struct network_settings s_network_settings = {"192.168.0.42", "192.168.0.1", "255.255.255.0", true};
void glue_get_network_settings(struct network_settings *data) {
 8024960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024962:	b083      	sub	sp, #12
 8024964:	af00      	add	r7, sp, #0
 8024966:	6078      	str	r0, [r7, #4]
  *data = s_network_settings;  // Sync with your device
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	4a0e      	ldr	r2, [pc, #56]	@ (80249a4 <glue_get_network_settings+0x44>)
 802496c:	4614      	mov	r4, r2
 802496e:	469c      	mov	ip, r3
 8024970:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8024974:	4665      	mov	r5, ip
 8024976:	4626      	mov	r6, r4
 8024978:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802497a:	6028      	str	r0, [r5, #0]
 802497c:	6069      	str	r1, [r5, #4]
 802497e:	60aa      	str	r2, [r5, #8]
 8024980:	60eb      	str	r3, [r5, #12]
 8024982:	3410      	adds	r4, #16
 8024984:	f10c 0c10 	add.w	ip, ip, #16
 8024988:	4574      	cmp	r4, lr
 802498a:	d1f3      	bne.n	8024974 <glue_get_network_settings+0x14>
 802498c:	4665      	mov	r5, ip
 802498e:	4623      	mov	r3, r4
 8024990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8024992:	6028      	str	r0, [r5, #0]
 8024994:	6069      	str	r1, [r5, #4]
 8024996:	60aa      	str	r2, [r5, #8]
 8024998:	781b      	ldrb	r3, [r3, #0]
 802499a:	732b      	strb	r3, [r5, #12]
}
 802499c:	bf00      	nop
 802499e:	370c      	adds	r7, #12
 80249a0:	46bd      	mov	sp, r7
 80249a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249a4:	240002e8 	.word	0x240002e8

080249a8 <glue_set_network_settings>:
void glue_set_network_settings(struct network_settings *data) {
 80249a8:	b4f0      	push	{r4, r5, r6, r7}
 80249aa:	b082      	sub	sp, #8
 80249ac:	af00      	add	r7, sp, #0
 80249ae:	6078      	str	r0, [r7, #4]
  s_network_settings = *data; // Sync with your device
 80249b0:	4a0e      	ldr	r2, [pc, #56]	@ (80249ec <glue_set_network_settings+0x44>)
 80249b2:	687b      	ldr	r3, [r7, #4]
 80249b4:	461c      	mov	r4, r3
 80249b6:	4616      	mov	r6, r2
 80249b8:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 80249bc:	4635      	mov	r5, r6
 80249be:	4623      	mov	r3, r4
 80249c0:	6818      	ldr	r0, [r3, #0]
 80249c2:	6859      	ldr	r1, [r3, #4]
 80249c4:	689a      	ldr	r2, [r3, #8]
 80249c6:	68db      	ldr	r3, [r3, #12]
 80249c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80249ca:	3410      	adds	r4, #16
 80249cc:	3610      	adds	r6, #16
 80249ce:	4564      	cmp	r4, ip
 80249d0:	d1f4      	bne.n	80249bc <glue_set_network_settings+0x14>
 80249d2:	4633      	mov	r3, r6
 80249d4:	6820      	ldr	r0, [r4, #0]
 80249d6:	6861      	ldr	r1, [r4, #4]
 80249d8:	68a2      	ldr	r2, [r4, #8]
 80249da:	c307      	stmia	r3!, {r0, r1, r2}
 80249dc:	7b22      	ldrb	r2, [r4, #12]
 80249de:	701a      	strb	r2, [r3, #0]
}
 80249e0:	bf00      	nop
 80249e2:	3708      	adds	r7, #8
 80249e4:	46bd      	mov	sp, r7
 80249e6:	bcf0      	pop	{r4, r5, r6, r7}
 80249e8:	4770      	bx	lr
 80249ea:	bf00      	nop
 80249ec:	240002e8 	.word	0x240002e8

080249f0 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", "info", 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 80249f0:	b580      	push	{r7, lr}
 80249f2:	b082      	sub	sp, #8
 80249f4:	af00      	add	r7, sp, #0
 80249f6:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 80249f8:	687b      	ldr	r3, [r7, #4]
 80249fa:	4a05      	ldr	r2, [pc, #20]	@ (8024a10 <glue_get_settings+0x20>)
 80249fc:	4618      	mov	r0, r3
 80249fe:	4611      	mov	r1, r2
 8024a00:	2348      	movs	r3, #72	@ 0x48
 8024a02:	461a      	mov	r2, r3
 8024a04:	f005 f8fb 	bl	8029bfe <memcpy>
}
 8024a08:	bf00      	nop
 8024a0a:	3708      	adds	r7, #8
 8024a0c:	46bd      	mov	sp, r7
 8024a0e:	bd80      	pop	{r7, pc}
 8024a10:	24000328 	.word	0x24000328

08024a14 <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 8024a14:	b580      	push	{r7, lr}
 8024a16:	b082      	sub	sp, #8
 8024a18:	af00      	add	r7, sp, #0
 8024a1a:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8024a1c:	4a05      	ldr	r2, [pc, #20]	@ (8024a34 <glue_set_settings+0x20>)
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	4610      	mov	r0, r2
 8024a22:	4619      	mov	r1, r3
 8024a24:	2348      	movs	r3, #72	@ 0x48
 8024a26:	461a      	mov	r2, r3
 8024a28:	f005 f8e9 	bl	8029bfe <memcpy>
}
 8024a2c:	bf00      	nop
 8024a2e:	3708      	adds	r7, #8
 8024a30:	46bd      	mov	sp, r7
 8024a32:	bd80      	pop	{r7, pc}
 8024a34:	24000328 	.word	0x24000328

08024a38 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8024a38:	b580      	push	{r7, lr}
 8024a3a:	b082      	sub	sp, #8
 8024a3c:	af00      	add	r7, sp, #0
 8024a3e:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	4a05      	ldr	r2, [pc, #20]	@ (8024a58 <glue_get_security+0x20>)
 8024a44:	4618      	mov	r0, r3
 8024a46:	4611      	mov	r1, r2
 8024a48:	2350      	movs	r3, #80	@ 0x50
 8024a4a:	461a      	mov	r2, r3
 8024a4c:	f005 f8d7 	bl	8029bfe <memcpy>
}
 8024a50:	bf00      	nop
 8024a52:	3708      	adds	r7, #8
 8024a54:	46bd      	mov	sp, r7
 8024a56:	bd80      	pop	{r7, pc}
 8024a58:	24000370 	.word	0x24000370

08024a5c <glue_set_security>:
void glue_set_security(struct security *data) {
 8024a5c:	b580      	push	{r7, lr}
 8024a5e:	b082      	sub	sp, #8
 8024a60:	af00      	add	r7, sp, #0
 8024a62:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 8024a64:	4a05      	ldr	r2, [pc, #20]	@ (8024a7c <glue_set_security+0x20>)
 8024a66:	687b      	ldr	r3, [r7, #4]
 8024a68:	4610      	mov	r0, r2
 8024a6a:	4619      	mov	r1, r3
 8024a6c:	2350      	movs	r3, #80	@ 0x50
 8024a6e:	461a      	mov	r2, r3
 8024a70:	f005 f8c5 	bl	8029bfe <memcpy>
}
 8024a74:	bf00      	nop
 8024a76:	3708      	adds	r7, #8
 8024a78:	46bd      	mov	sp, r7
 8024a7a:	bd80      	pop	{r7, pc}
 8024a7c:	24000370 	.word	0x24000370

08024a80 <glue_reply_loglevels>:

void glue_reply_loglevels(struct mg_connection *c, struct mg_http_message *hm) {
 8024a80:	b580      	push	{r7, lr}
 8024a82:	b086      	sub	sp, #24
 8024a84:	af02      	add	r7, sp, #8
 8024a86:	6078      	str	r0, [r7, #4]
 8024a88:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8024a8a:	4b08      	ldr	r3, [pc, #32]	@ (8024aac <glue_reply_loglevels+0x2c>)
 8024a8c:	60fb      	str	r3, [r7, #12]
  const char *value = "[\"disabled\",\"error\",\"info\",\"debug\",\"verbose\"]";
 8024a8e:	4b08      	ldr	r3, [pc, #32]	@ (8024ab0 <glue_reply_loglevels+0x30>)
 8024a90:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8024a92:	68bb      	ldr	r3, [r7, #8]
 8024a94:	9300      	str	r3, [sp, #0]
 8024a96:	4b07      	ldr	r3, [pc, #28]	@ (8024ab4 <glue_reply_loglevels+0x34>)
 8024a98:	68fa      	ldr	r2, [r7, #12]
 8024a9a:	21c8      	movs	r1, #200	@ 0xc8
 8024a9c:	6878      	ldr	r0, [r7, #4]
 8024a9e:	f7e7 fedd 	bl	800c85c <mg_http_reply>
}
 8024aa2:	bf00      	nop
 8024aa4:	3710      	adds	r7, #16
 8024aa6:	46bd      	mov	sp, r7
 8024aa8:	bd80      	pop	{r7, pc}
 8024aaa:	bf00      	nop
 8024aac:	08030128 	.word	0x08030128
 8024ab0:	08030220 	.word	0x08030220
 8024ab4:	0803021c 	.word	0x0803021c

08024ab8 <glue_reply_events>:
void glue_reply_events(struct mg_connection *c, struct mg_http_message *hm) {
 8024ab8:	b580      	push	{r7, lr}
 8024aba:	b086      	sub	sp, #24
 8024abc:	af02      	add	r7, sp, #8
 8024abe:	6078      	str	r0, [r7, #4]
 8024ac0:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8024ac2:	4b08      	ldr	r3, [pc, #32]	@ (8024ae4 <glue_reply_events+0x2c>)
 8024ac4:	60fb      	str	r3, [r7, #12]
  const char *value = "[{\"priority\":1,\"timestamp\":1738653279,\"active\":false,\"message\":\"event 1\"},{\"priority\":2,\"timestamp\":1738653390,\"active\":true,\"message\":\"event 2\"}]";
 8024ac6:	4b08      	ldr	r3, [pc, #32]	@ (8024ae8 <glue_reply_events+0x30>)
 8024ac8:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8024aca:	68bb      	ldr	r3, [r7, #8]
 8024acc:	9300      	str	r3, [sp, #0]
 8024ace:	4b07      	ldr	r3, [pc, #28]	@ (8024aec <glue_reply_events+0x34>)
 8024ad0:	68fa      	ldr	r2, [r7, #12]
 8024ad2:	21c8      	movs	r1, #200	@ 0xc8
 8024ad4:	6878      	ldr	r0, [r7, #4]
 8024ad6:	f7e7 fec1 	bl	800c85c <mg_http_reply>
}
 8024ada:	bf00      	nop
 8024adc:	3710      	adds	r7, #16
 8024ade:	46bd      	mov	sp, r7
 8024ae0:	bd80      	pop	{r7, pc}
 8024ae2:	bf00      	nop
 8024ae4:	08030128 	.word	0x08030128
 8024ae8:	08030250 	.word	0x08030250
 8024aec:	0803021c 	.word	0x0803021c

08024af0 <get_api_handler>:
  (struct apihandler *) &s_apihandler_security,
  (struct apihandler *) &s_apihandler_loglevels,
  (struct apihandler *) &s_apihandler_events
};

static struct apihandler *get_api_handler(struct mg_str name) {
 8024af0:	b580      	push	{r7, lr}
 8024af2:	b086      	sub	sp, #24
 8024af4:	af00      	add	r7, sp, #0
 8024af6:	463b      	mov	r3, r7
 8024af8:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 8024afc:	230c      	movs	r3, #12
 8024afe:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	d101      	bne.n	8024b0a <get_api_handler+0x1a>
 8024b06:	2300      	movs	r3, #0
 8024b08:	e039      	b.n	8024b7e <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 8024b0a:	693b      	ldr	r3, [r7, #16]
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d101      	bne.n	8024b14 <get_api_handler+0x24>
 8024b10:	2300      	movs	r3, #0
 8024b12:	e034      	b.n	8024b7e <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 8024b14:	2300      	movs	r3, #0
 8024b16:	617b      	str	r3, [r7, #20]
 8024b18:	e02c      	b.n	8024b74 <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 8024b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8024b88 <get_api_handler+0x98>)
 8024b1c:	697b      	ldr	r3, [r7, #20]
 8024b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b22:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 8024b24:	68fb      	ldr	r3, [r7, #12]
 8024b26:	681b      	ldr	r3, [r3, #0]
 8024b28:	4618      	mov	r0, r3
 8024b2a:	f7db fc51 	bl	80003d0 <strlen>
 8024b2e:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 8024b30:	687b      	ldr	r3, [r7, #4]
 8024b32:	68ba      	ldr	r2, [r7, #8]
 8024b34:	429a      	cmp	r2, r3
 8024b36:	d815      	bhi.n	8024b64 <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8024b38:	6838      	ldr	r0, [r7, #0]
 8024b3a:	68fb      	ldr	r3, [r7, #12]
 8024b3c:	681b      	ldr	r3, [r3, #0]
 8024b3e:	68ba      	ldr	r2, [r7, #8]
 8024b40:	4619      	mov	r1, r3
 8024b42:	f003 fe42 	bl	80287ca <strncmp>
 8024b46:	4603      	mov	r3, r0
 8024b48:	2b00      	cmp	r3, #0
 8024b4a:	d10d      	bne.n	8024b68 <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 8024b4c:	687b      	ldr	r3, [r7, #4]
 8024b4e:	68ba      	ldr	r2, [r7, #8]
 8024b50:	429a      	cmp	r2, r3
 8024b52:	d205      	bcs.n	8024b60 <get_api_handler+0x70>
 8024b54:	683a      	ldr	r2, [r7, #0]
 8024b56:	68bb      	ldr	r3, [r7, #8]
 8024b58:	4413      	add	r3, r2
 8024b5a:	781b      	ldrb	r3, [r3, #0]
 8024b5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8024b5e:	d105      	bne.n	8024b6c <get_api_handler+0x7c>
    return h;
 8024b60:	68fb      	ldr	r3, [r7, #12]
 8024b62:	e00c      	b.n	8024b7e <get_api_handler+0x8e>
    if (n > name.len) continue;
 8024b64:	bf00      	nop
 8024b66:	e002      	b.n	8024b6e <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8024b68:	bf00      	nop
 8024b6a:	e000      	b.n	8024b6e <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 8024b6c:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 8024b6e:	697b      	ldr	r3, [r7, #20]
 8024b70:	3301      	adds	r3, #1
 8024b72:	617b      	str	r3, [r7, #20]
 8024b74:	697a      	ldr	r2, [r7, #20]
 8024b76:	693b      	ldr	r3, [r7, #16]
 8024b78:	429a      	cmp	r2, r3
 8024b7a:	d3ce      	bcc.n	8024b1a <get_api_handler+0x2a>
  }
  return NULL;
 8024b7c:	2300      	movs	r3, #0
}
 8024b7e:	4618      	mov	r0, r3
 8024b80:	3718      	adds	r7, #24
 8024b82:	46bd      	mov	sp, r7
 8024b84:	bd80      	pop	{r7, pc}
 8024b86:	bf00      	nop
 8024b88:	240007ec 	.word	0x240007ec

08024b8c <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8024b8c:	b580      	push	{r7, lr}
 8024b8e:	b084      	sub	sp, #16
 8024b90:	af00      	add	r7, sp, #0
 8024b92:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8024b94:	687b      	ldr	r3, [r7, #4]
 8024b96:	68db      	ldr	r3, [r3, #12]
 8024b98:	2b05      	cmp	r3, #5
 8024b9a:	d909      	bls.n	8024bb0 <find_handler+0x24>
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	689b      	ldr	r3, [r3, #8]
 8024ba0:	2205      	movs	r2, #5
 8024ba2:	490f      	ldr	r1, [pc, #60]	@ (8024be0 <find_handler+0x54>)
 8024ba4:	4618      	mov	r0, r3
 8024ba6:	f003 fe10 	bl	80287ca <strncmp>
 8024baa:	4603      	mov	r3, r0
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d001      	beq.n	8024bb4 <find_handler+0x28>
 8024bb0:	2300      	movs	r3, #0
 8024bb2:	e011      	b.n	8024bd8 <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	689b      	ldr	r3, [r3, #8]
 8024bb8:	1d59      	adds	r1, r3, #5
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	68db      	ldr	r3, [r3, #12]
 8024bbe:	1f5a      	subs	r2, r3, #5
 8024bc0:	f107 0308 	add.w	r3, r7, #8
 8024bc4:	4618      	mov	r0, r3
 8024bc6:	f7f2 fdda 	bl	801777e <mg_str_n>
 8024bca:	f107 0308 	add.w	r3, r7, #8
 8024bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024bd2:	f7ff ff8d 	bl	8024af0 <get_api_handler>
 8024bd6:	4603      	mov	r3, r0
}
 8024bd8:	4618      	mov	r0, r3
 8024bda:	3710      	adds	r7, #16
 8024bdc:	46bd      	mov	sp, r7
 8024bde:	bd80      	pop	{r7, pc}
 8024be0:	08030498 	.word	0x08030498

08024be4 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8024be4:	b590      	push	{r4, r7, lr}
 8024be6:	b089      	sub	sp, #36	@ 0x24
 8024be8:	af00      	add	r7, sp, #0
 8024bea:	f107 0408 	add.w	r4, r7, #8
 8024bee:	e884 0003 	stmia.w	r4, {r0, r1}
 8024bf2:	607a      	str	r2, [r7, #4]
 8024bf4:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8024bf6:	f107 0010 	add.w	r0, r7, #16
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	f107 0208 	add.w	r2, r7, #8
 8024c00:	ca06      	ldmia	r2, {r1, r2}
 8024c02:	f7ea fc3b 	bl	800f47c <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8024c06:	697b      	ldr	r3, [r7, #20]
 8024c08:	2b01      	cmp	r3, #1
 8024c0a:	d913      	bls.n	8024c34 <mg_json_get_str2+0x50>
 8024c0c:	693b      	ldr	r3, [r7, #16]
 8024c0e:	781b      	ldrb	r3, [r3, #0]
 8024c10:	2b22      	cmp	r3, #34	@ 0x22
 8024c12:	d10f      	bne.n	8024c34 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8024c14:	693b      	ldr	r3, [r7, #16]
 8024c16:	1c59      	adds	r1, r3, #1
 8024c18:	697b      	ldr	r3, [r7, #20]
 8024c1a:	1e9a      	subs	r2, r3, #2
 8024c1c:	f107 0318 	add.w	r3, r7, #24
 8024c20:	4618      	mov	r0, r3
 8024c22:	f7f2 fdac 	bl	801777e <mg_str_n>
 8024c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024c28:	683a      	ldr	r2, [r7, #0]
 8024c2a:	f107 0118 	add.w	r1, r7, #24
 8024c2e:	c903      	ldmia	r1, {r0, r1}
 8024c30:	f7ea fcca 	bl	800f5c8 <mg_json_unescape>
  }
}
 8024c34:	bf00      	nop
 8024c36:	3724      	adds	r7, #36	@ 0x24
 8024c38:	46bd      	mov	sp, r7
 8024c3a:	bd90      	pop	{r4, r7, pc}

08024c3c <authenticate>:
void mongoose_set_auth_handler(int (*fn)(const char *, const char *)) {
  s_auth = fn;
}

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8024c3c:	b580      	push	{r7, lr}
 8024c3e:	b0ba      	sub	sp, #232	@ 0xe8
 8024c40:	af02      	add	r7, sp, #8
 8024c42:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8024c44:	2300      	movs	r3, #0
 8024c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8024c4a:	f107 030c 	add.w	r3, r7, #12
 8024c4e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8024c52:	2264      	movs	r2, #100	@ 0x64
 8024c54:	9200      	str	r2, [sp, #0]
 8024c56:	2264      	movs	r2, #100	@ 0x64
 8024c58:	6878      	ldr	r0, [r7, #4]
 8024c5a:	f7e8 fd75 	bl	800d748 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 8024c5e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8024c62:	2b00      	cmp	r3, #0
 8024c64:	d06f      	beq.n	8024d46 <authenticate+0x10a>
 8024c66:	7b3b      	ldrb	r3, [r7, #12]
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	d06c      	beq.n	8024d46 <authenticate+0x10a>
    // Both user and password is set, auth by user/password via glue API
    int level = s_auth(user, pass);
 8024c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8024ddc <authenticate+0x1a0>)
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	f107 010c 	add.w	r1, r7, #12
 8024c74:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8024c78:	4610      	mov	r0, r2
 8024c7a:	4798      	blx	r3
 8024c7c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 8024c80:	4b57      	ldr	r3, [pc, #348]	@ (8024de0 <authenticate+0x1a4>)
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	2b02      	cmp	r3, #2
 8024c86:	dd0e      	ble.n	8024ca6 <authenticate+0x6a>
 8024c88:	4b56      	ldr	r3, [pc, #344]	@ (8024de4 <authenticate+0x1a8>)
 8024c8a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8024c8e:	4956      	ldr	r1, [pc, #344]	@ (8024de8 <authenticate+0x1ac>)
 8024c90:	2003      	movs	r0, #3
 8024c92:	f7ea fd57 	bl	800f744 <mg_log_prefix>
 8024c96:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024c9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8024c9e:	4619      	mov	r1, r3
 8024ca0:	4852      	ldr	r0, [pc, #328]	@ (8024dec <authenticate+0x1b0>)
 8024ca2:	f7ea fd9f 	bl	800f7e4 <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 8024ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8024caa:	2b00      	cmp	r3, #0
 8024cac:	dd75      	ble.n	8024d9a <authenticate+0x15e>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8024cae:	4b50      	ldr	r3, [pc, #320]	@ (8024df0 <authenticate+0x1b4>)
 8024cb0:	681b      	ldr	r3, [r3, #0]
 8024cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8024cb6:	e014      	b.n	8024ce2 <authenticate+0xa6>
        if (strcmp(user, u->name) == 0) result = u;
 8024cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024cbc:	1d1a      	adds	r2, r3, #4
 8024cbe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024cc2:	4611      	mov	r1, r2
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	f7db fb23 	bl	8000310 <strcmp>
 8024cca:	4603      	mov	r3, r0
 8024ccc:	2b00      	cmp	r3, #0
 8024cce:	d103      	bne.n	8024cd8 <authenticate+0x9c>
 8024cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8024cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024cdc:	681b      	ldr	r3, [r3, #0]
 8024cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8024ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	d003      	beq.n	8024cf2 <authenticate+0xb6>
 8024cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	d0e2      	beq.n	8024cb8 <authenticate+0x7c>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 8024cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	d14f      	bne.n	8024d9a <authenticate+0x15e>
        result = (struct user *) calloc(1, sizeof(*result));
 8024cfa:	2140      	movs	r1, #64	@ 0x40
 8024cfc:	2001      	movs	r0, #1
 8024cfe:	f001 fd85 	bl	802680c <calloc>
 8024d02:	4603      	mov	r3, r0
 8024d04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8024d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024d0c:	1d18      	adds	r0, r3, #4
 8024d0e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024d12:	4a38      	ldr	r2, [pc, #224]	@ (8024df4 <authenticate+0x1b8>)
 8024d14:	2120      	movs	r1, #32
 8024d16:	f7ef f951 	bl	8013fbc <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8024d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024d1e:	3324      	adds	r3, #36	@ 0x24
 8024d20:	2114      	movs	r1, #20
 8024d22:	4618      	mov	r0, r3
 8024d24:	f7fd fee2 	bl	8022aec <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8024d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024d2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8024d30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8024d32:	4b2f      	ldr	r3, [pc, #188]	@ (8024df0 <authenticate+0x1b4>)
 8024d34:	681a      	ldr	r2, [r3, #0]
 8024d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024d3a:	601a      	str	r2, [r3, #0]
 8024d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8024df0 <authenticate+0x1b4>)
 8024d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024d42:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 8024d44:	e029      	b.n	8024d9a <authenticate+0x15e>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8024d46:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	d126      	bne.n	8024d9c <authenticate+0x160>
 8024d4e:	7b3b      	ldrb	r3, [r7, #12]
 8024d50:	2b00      	cmp	r3, #0
 8024d52:	d023      	beq.n	8024d9c <authenticate+0x160>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8024d54:	4b26      	ldr	r3, [pc, #152]	@ (8024df0 <authenticate+0x1b4>)
 8024d56:	681b      	ldr	r3, [r3, #0]
 8024d58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8024d5c:	e014      	b.n	8024d88 <authenticate+0x14c>
      if (strcmp(u->token, pass) == 0) result = u;
 8024d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024d62:	3324      	adds	r3, #36	@ 0x24
 8024d64:	f107 020c 	add.w	r2, r7, #12
 8024d68:	4611      	mov	r1, r2
 8024d6a:	4618      	mov	r0, r3
 8024d6c:	f7db fad0 	bl	8000310 <strcmp>
 8024d70:	4603      	mov	r3, r0
 8024d72:	2b00      	cmp	r3, #0
 8024d74:	d103      	bne.n	8024d7e <authenticate+0x142>
 8024d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8024d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8024d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d005      	beq.n	8024d9c <authenticate+0x160>
 8024d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024d94:	2b00      	cmp	r3, #0
 8024d96:	d0e2      	beq.n	8024d5e <authenticate+0x122>
 8024d98:	e000      	b.n	8024d9c <authenticate+0x160>
  if (user[0] != '\0' && pass[0] != '\0') {
 8024d9a:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 8024d9c:	4b10      	ldr	r3, [pc, #64]	@ (8024de0 <authenticate+0x1a4>)
 8024d9e:	681b      	ldr	r3, [r3, #0]
 8024da0:	2b03      	cmp	r3, #3
 8024da2:	dd14      	ble.n	8024dce <authenticate+0x192>
 8024da4:	4b0f      	ldr	r3, [pc, #60]	@ (8024de4 <authenticate+0x1a8>)
 8024da6:	f240 122b 	movw	r2, #299	@ 0x12b
 8024daa:	490f      	ldr	r1, [pc, #60]	@ (8024de8 <authenticate+0x1ac>)
 8024dac:	2004      	movs	r0, #4
 8024dae:	f7ea fcc9 	bl	800f744 <mg_log_prefix>
 8024db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	d001      	beq.n	8024dbe <authenticate+0x182>
 8024dba:	4b0f      	ldr	r3, [pc, #60]	@ (8024df8 <authenticate+0x1bc>)
 8024dbc:	e000      	b.n	8024dc0 <authenticate+0x184>
 8024dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8024dfc <authenticate+0x1c0>)
 8024dc0:	f107 020c 	add.w	r2, r7, #12
 8024dc4:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8024dc8:	480d      	ldr	r0, [pc, #52]	@ (8024e00 <authenticate+0x1c4>)
 8024dca:	f7ea fd0b 	bl	800f7e4 <mg_log>
  return result;
 8024dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 8024dd2:	4618      	mov	r0, r3
 8024dd4:	37e0      	adds	r7, #224	@ 0xe0
 8024dd6:	46bd      	mov	sp, r7
 8024dd8:	bd80      	pop	{r7, pc}
 8024dda:	bf00      	nop
 8024ddc:	2400081c 	.word	0x2400081c
 8024de0:	2400025c 	.word	0x2400025c
 8024de4:	0803e748 	.word	0x0803e748
 8024de8:	080304a0 	.word	0x080304a0
 8024dec:	08030504 	.word	0x08030504
 8024df0:	2401d100 	.word	0x2401d100
 8024df4:	08030518 	.word	0x08030518
 8024df8:	0803051c 	.word	0x0803051c
 8024dfc:	08030520 	.word	0x08030520
 8024e00:	08030528 	.word	0x08030528

08024e04 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8024e04:	b580      	push	{r7, lr}
 8024e06:	b0cc      	sub	sp, #304	@ 0x130
 8024e08:	af0a      	add	r7, sp, #40	@ 0x28
 8024e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024e12:	6018      	str	r0, [r3, #0]
 8024e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8024e1c:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8024e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8024e26:	681b      	ldr	r3, [r3, #0]
 8024e28:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8024e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024e34:	681b      	ldr	r3, [r3, #0]
 8024e36:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8024e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024e3e:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8024e40:	2b00      	cmp	r3, #0
 8024e42:	d001      	beq.n	8024e48 <handle_login+0x44>
 8024e44:	4b1e      	ldr	r3, [pc, #120]	@ (8024ec0 <handle_login+0xbc>)
 8024e46:	e000      	b.n	8024e4a <handle_login+0x46>
 8024e48:	4b1e      	ldr	r3, [pc, #120]	@ (8024ec4 <handle_login+0xc0>)
 8024e4a:	f107 0008 	add.w	r0, r7, #8
 8024e4e:	491e      	ldr	r1, [pc, #120]	@ (8024ec8 <handle_login+0xc4>)
 8024e50:	9101      	str	r1, [sp, #4]
 8024e52:	9300      	str	r3, [sp, #0]
 8024e54:	4613      	mov	r3, r2
 8024e56:	4a1d      	ldr	r2, [pc, #116]	@ (8024ecc <handle_login+0xc8>)
 8024e58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024e5c:	f7ef f8ae 	bl	8013fbc <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
                MG_ESC("user"), MG_ESC(u->name),    //
 8024e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8024e68:	681b      	ldr	r3, [r3, #0]
 8024e6a:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
 8024e6c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8024e70:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8024e74:	6812      	ldr	r2, [r2, #0]
 8024e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8024e78:	f107 0108 	add.w	r1, r7, #8
 8024e7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8024e80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8024e84:	9209      	str	r2, [sp, #36]	@ 0x24
 8024e86:	4a12      	ldr	r2, [pc, #72]	@ (8024ed0 <handle_login+0xcc>)
 8024e88:	9208      	str	r2, [sp, #32]
 8024e8a:	2200      	movs	r2, #0
 8024e8c:	9207      	str	r2, [sp, #28]
 8024e8e:	4a11      	ldr	r2, [pc, #68]	@ (8024ed4 <handle_login+0xd0>)
 8024e90:	9206      	str	r2, [sp, #24]
 8024e92:	9305      	str	r3, [sp, #20]
 8024e94:	2300      	movs	r3, #0
 8024e96:	9304      	str	r3, [sp, #16]
 8024e98:	4b0e      	ldr	r3, [pc, #56]	@ (8024ed4 <handle_login+0xd0>)
 8024e9a:	9303      	str	r3, [sp, #12]
 8024e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8024ed8 <handle_login+0xd4>)
 8024e9e:	9302      	str	r3, [sp, #8]
 8024ea0:	2300      	movs	r3, #0
 8024ea2:	9301      	str	r3, [sp, #4]
 8024ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8024ed4 <handle_login+0xd0>)
 8024ea6:	9300      	str	r3, [sp, #0]
 8024ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8024edc <handle_login+0xd8>)
 8024eaa:	460a      	mov	r2, r1
 8024eac:	21c8      	movs	r1, #200	@ 0xc8
 8024eae:	6800      	ldr	r0, [r0, #0]
 8024eb0:	f7e7 fcd4 	bl	800c85c <mg_http_reply>
                MG_ESC("level"), u->level);
}
 8024eb4:	bf00      	nop
 8024eb6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8024eba:	46bd      	mov	sp, r7
 8024ebc:	bd80      	pop	{r7, pc}
 8024ebe:	bf00      	nop
 8024ec0:	08030538 	.word	0x08030538
 8024ec4:	08030544 	.word	0x08030544
 8024ec8:	00015180 	.word	0x00015180
 8024ecc:	08030548 	.word	0x08030548
 8024ed0:	08030338 	.word	0x08030338
 8024ed4:	08014449 	.word	0x08014449
 8024ed8:	080305a4 	.word	0x080305a4
 8024edc:	08030594 	.word	0x08030594

08024ee0 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8024ee0:	b580      	push	{r7, lr}
 8024ee2:	b0c2      	sub	sp, #264	@ 0x108
 8024ee4:	af00      	add	r7, sp, #0
 8024ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024eee:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8024ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8024ef8:	681b      	ldr	r3, [r3, #0]
 8024efa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8024efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024f02:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8024f04:	2b00      	cmp	r3, #0
 8024f06:	d001      	beq.n	8024f0c <handle_logout+0x2c>
 8024f08:	4b0d      	ldr	r3, [pc, #52]	@ (8024f40 <handle_logout+0x60>)
 8024f0a:	e000      	b.n	8024f0e <handle_logout+0x2e>
 8024f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8024f44 <handle_logout+0x64>)
 8024f0e:	f107 0008 	add.w	r0, r7, #8
 8024f12:	4a0d      	ldr	r2, [pc, #52]	@ (8024f48 <handle_logout+0x68>)
 8024f14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024f18:	f7ef f850 	bl	8013fbc <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8024f1c:	f107 0208 	add.w	r2, r7, #8
 8024f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8024f24:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8024f28:	4b08      	ldr	r3, [pc, #32]	@ (8024f4c <handle_logout+0x6c>)
 8024f2a:	f240 1191 	movw	r1, #401	@ 0x191
 8024f2e:	6800      	ldr	r0, [r0, #0]
 8024f30:	f7e7 fc94 	bl	800c85c <mg_http_reply>
}
 8024f34:	bf00      	nop
 8024f36:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8024f3a:	46bd      	mov	sp, r7
 8024f3c:	bd80      	pop	{r7, pc}
 8024f3e:	bf00      	nop
 8024f40:	08030538 	.word	0x08030538
 8024f44:	08030544 	.word	0x08030544
 8024f48:	080305ac 	.word	0x080305ac
 8024f4c:	08030610 	.word	0x08030610

08024f50 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 8024f50:	b580      	push	{r7, lr}
 8024f52:	b082      	sub	sp, #8
 8024f54:	af00      	add	r7, sp, #0
 8024f56:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 8024f58:	687b      	ldr	r3, [r7, #4]
 8024f5a:	2200      	movs	r2, #0
 8024f5c:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 8024f5e:	687b      	ldr	r3, [r7, #4]
 8024f60:	691b      	ldr	r3, [r3, #16]
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	d00c      	beq.n	8024f80 <close_uploaded_file+0x30>
 8024f66:	687b      	ldr	r3, [r7, #4]
 8024f68:	68db      	ldr	r3, [r3, #12]
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	d008      	beq.n	8024f80 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	691b      	ldr	r3, [r3, #16]
 8024f72:	687a      	ldr	r2, [r7, #4]
 8024f74:	68d2      	ldr	r2, [r2, #12]
 8024f76:	4610      	mov	r0, r2
 8024f78:	4798      	blx	r3
    us->fp = NULL;
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	2200      	movs	r2, #0
 8024f7e:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 8024f80:	2218      	movs	r2, #24
 8024f82:	2100      	movs	r1, #0
 8024f84:	6878      	ldr	r0, [r7, #4]
 8024f86:	f003 fc0b 	bl	80287a0 <memset>
}
 8024f8a:	bf00      	nop
 8024f8c:	3708      	adds	r7, #8
 8024f8e:	46bd      	mov	sp, r7
 8024f90:	bd80      	pop	{r7, pc}
	...

08024f94 <file_closer>:

static bool file_closer(void *p) {
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b082      	sub	sp, #8
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 8024f9c:	6878      	ldr	r0, [r7, #4]
 8024f9e:	f7e5 ff3b 	bl	800ae18 <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 8024fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8024fcc <file_closer+0x38>)
 8024fa4:	681b      	ldr	r3, [r3, #0]
 8024fa6:	2b01      	cmp	r3, #1
 8024fa8:	dd0a      	ble.n	8024fc0 <file_closer+0x2c>
 8024faa:	4b09      	ldr	r3, [pc, #36]	@ (8024fd0 <file_closer+0x3c>)
 8024fac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8024fb0:	4908      	ldr	r1, [pc, #32]	@ (8024fd4 <file_closer+0x40>)
 8024fb2:	2002      	movs	r0, #2
 8024fb4:	f7ea fbc6 	bl	800f744 <mg_log_prefix>
 8024fb8:	6879      	ldr	r1, [r7, #4]
 8024fba:	4807      	ldr	r0, [pc, #28]	@ (8024fd8 <file_closer+0x44>)
 8024fbc:	f7ea fc12 	bl	800f7e4 <mg_log>
  return true;
 8024fc0:	2301      	movs	r3, #1
}
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	3708      	adds	r7, #8
 8024fc6:	46bd      	mov	sp, r7
 8024fc8:	bd80      	pop	{r7, pc}
 8024fca:	bf00      	nop
 8024fcc:	2400025c 	.word	0x2400025c
 8024fd0:	0803e758 	.word	0x0803e758
 8024fd4:	080304a0 	.word	0x080304a0
 8024fd8:	08030620 	.word	0x08030620

08024fdc <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 8024fdc:	b580      	push	{r7, lr}
 8024fde:	b086      	sub	sp, #24
 8024fe0:	af00      	add	r7, sp, #0
 8024fe2:	60f8      	str	r0, [r7, #12]
 8024fe4:	60b9      	str	r1, [r7, #8]
 8024fe6:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 8024fe8:	68fb      	ldr	r3, [r7, #12]
 8024fea:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 8024fec:	697b      	ldr	r3, [r7, #20]
 8024fee:	685b      	ldr	r3, [r3, #4]
 8024ff0:	695b      	ldr	r3, [r3, #20]
 8024ff2:	697a      	ldr	r2, [r7, #20]
 8024ff4:	6810      	ldr	r0, [r2, #0]
 8024ff6:	687a      	ldr	r2, [r7, #4]
 8024ff8:	68b9      	ldr	r1, [r7, #8]
 8024ffa:	4798      	blx	r3
 8024ffc:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 8024ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8025034 <file_writer+0x58>)
 8025000:	681b      	ldr	r3, [r3, #0]
 8025002:	2b01      	cmp	r3, #1
 8025004:	dd0a      	ble.n	802501c <file_writer+0x40>
 8025006:	4b0c      	ldr	r3, [pc, #48]	@ (8025038 <file_writer+0x5c>)
 8025008:	f240 1265 	movw	r2, #357	@ 0x165
 802500c:	490b      	ldr	r1, [pc, #44]	@ (802503c <file_writer+0x60>)
 802500e:	2002      	movs	r0, #2
 8025010:	f7ea fb98 	bl	800f744 <mg_log_prefix>
 8025014:	6939      	ldr	r1, [r7, #16]
 8025016:	480a      	ldr	r0, [pc, #40]	@ (8025040 <file_writer+0x64>)
 8025018:	f7ea fbe4 	bl	800f7e4 <mg_log>
  return written == len;
 802501c:	693a      	ldr	r2, [r7, #16]
 802501e:	687b      	ldr	r3, [r7, #4]
 8025020:	429a      	cmp	r2, r3
 8025022:	bf0c      	ite	eq
 8025024:	2301      	moveq	r3, #1
 8025026:	2300      	movne	r3, #0
 8025028:	b2db      	uxtb	r3, r3
}
 802502a:	4618      	mov	r0, r3
 802502c:	3718      	adds	r7, #24
 802502e:	46bd      	mov	sp, r7
 8025030:	bd80      	pop	{r7, pc}
 8025032:	bf00      	nop
 8025034:	2400025c 	.word	0x2400025c
 8025038:	0803e764 	.word	0x0803e764
 802503c:	080304a0 	.word	0x080304a0
 8025040:	08030630 	.word	0x08030630

08025044 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 8025044:	b590      	push	{r4, r7, lr}
 8025046:	b08d      	sub	sp, #52	@ 0x34
 8025048:	af04      	add	r7, sp, #16
 802504a:	60f8      	str	r0, [r7, #12]
 802504c:	60b9      	str	r1, [r7, #8]
 802504e:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8025050:	68fb      	ldr	r3, [r7, #12]
 8025052:	3388      	adds	r3, #136	@ 0x88
 8025054:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8025056:	69fb      	ldr	r3, [r7, #28]
 8025058:	781b      	ldrb	r3, [r3, #0]
 802505a:	2b55      	cmp	r3, #85	@ 0x55
 802505c:	f040 80ae 	bne.w	80251bc <upload_handler+0x178>
 8025060:	68bb      	ldr	r3, [r7, #8]
 8025062:	2b07      	cmp	r3, #7
 8025064:	f040 80aa 	bne.w	80251bc <upload_handler+0x178>
 8025068:	69fb      	ldr	r3, [r7, #28]
 802506a:	685b      	ldr	r3, [r3, #4]
 802506c:	2b00      	cmp	r3, #0
 802506e:	f000 80a5 	beq.w	80251bc <upload_handler+0x178>
      c->recv.len > 0) {
 8025072:	68fb      	ldr	r3, [r7, #12]
 8025074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8025076:	2b00      	cmp	r3, #0
 8025078:	f000 80a0 	beq.w	80251bc <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 802507c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8025080:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 8025082:	69fb      	ldr	r3, [r7, #28]
 8025084:	689a      	ldr	r2, [r3, #8]
 8025086:	68fb      	ldr	r3, [r7, #12]
 8025088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802508a:	441a      	add	r2, r3
 802508c:	69fb      	ldr	r3, [r7, #28]
 802508e:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 8025090:	429a      	cmp	r2, r3
 8025092:	d210      	bcs.n	80250b6 <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 8025094:	69bb      	ldr	r3, [r7, #24]
 8025096:	2b00      	cmp	r3, #0
 8025098:	d102      	bne.n	80250a0 <upload_handler+0x5c>
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802509e:	e007      	b.n	80250b0 <upload_handler+0x6c>
 80250a0:	68fb      	ldr	r3, [r7, #12]
 80250a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80250a4:	69bb      	ldr	r3, [r7, #24]
 80250a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80250aa:	69ba      	ldr	r2, [r7, #24]
 80250ac:	fb02 f303 	mul.w	r3, r2, r3
 80250b0:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 80250b2:	697b      	ldr	r3, [r7, #20]
 80250b4:	e001      	b.n	80250ba <upload_handler+0x76>
 80250b6:	68fb      	ldr	r3, [r7, #12]
 80250b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 80250ba:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 80250bc:	697b      	ldr	r3, [r7, #20]
 80250be:	2b00      	cmp	r3, #0
 80250c0:	d00a      	beq.n	80250d8 <upload_handler+0x94>
 80250c2:	69fb      	ldr	r3, [r7, #28]
 80250c4:	695b      	ldr	r3, [r3, #20]
 80250c6:	69fa      	ldr	r2, [r7, #28]
 80250c8:	68d0      	ldr	r0, [r2, #12]
 80250ca:	68fa      	ldr	r2, [r7, #12]
 80250cc:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80250ce:	697a      	ldr	r2, [r7, #20]
 80250d0:	4798      	blx	r3
 80250d2:	4603      	mov	r3, r0
 80250d4:	2b00      	cmp	r3, #0
 80250d6:	d001      	beq.n	80250dc <upload_handler+0x98>
 80250d8:	2301      	movs	r3, #1
 80250da:	e000      	b.n	80250de <upload_handler+0x9a>
 80250dc:	2300      	movs	r3, #0
 80250de:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 80250e0:	69fb      	ldr	r3, [r7, #28]
 80250e2:	689a      	ldr	r2, [r3, #8]
 80250e4:	697b      	ldr	r3, [r7, #20]
 80250e6:	441a      	add	r2, r3
 80250e8:	69fb      	ldr	r3, [r7, #28]
 80250ea:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 80250ec:	4b3a      	ldr	r3, [pc, #232]	@ (80251d8 <upload_handler+0x194>)
 80250ee:	681b      	ldr	r3, [r3, #0]
 80250f0:	2b02      	cmp	r3, #2
 80250f2:	dd18      	ble.n	8025126 <upload_handler+0xe2>
 80250f4:	4b39      	ldr	r3, [pc, #228]	@ (80251dc <upload_handler+0x198>)
 80250f6:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 80250fa:	4939      	ldr	r1, [pc, #228]	@ (80251e0 <upload_handler+0x19c>)
 80250fc:	2003      	movs	r0, #3
 80250fe:	f7ea fb21 	bl	800f744 <mg_log_prefix>
 8025102:	68fb      	ldr	r3, [r7, #12]
 8025104:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8025106:	68fb      	ldr	r3, [r7, #12]
 8025108:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 802510a:	69fb      	ldr	r3, [r7, #28]
 802510c:	689b      	ldr	r3, [r3, #8]
 802510e:	69fa      	ldr	r2, [r7, #28]
 8025110:	6852      	ldr	r2, [r2, #4]
 8025112:	7cf9      	ldrb	r1, [r7, #19]
 8025114:	9102      	str	r1, [sp, #8]
 8025116:	9201      	str	r2, [sp, #4]
 8025118:	9300      	str	r3, [sp, #0]
 802511a:	4623      	mov	r3, r4
 802511c:	697a      	ldr	r2, [r7, #20]
 802511e:	4601      	mov	r1, r0
 8025120:	4830      	ldr	r0, [pc, #192]	@ (80251e4 <upload_handler+0x1a0>)
 8025122:	f7ea fb5f 	bl	800f7e4 <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8025126:	68fb      	ldr	r3, [r7, #12]
 8025128:	3338      	adds	r3, #56	@ 0x38
 802512a:	697a      	ldr	r2, [r7, #20]
 802512c:	2100      	movs	r1, #0
 802512e:	4618      	mov	r0, r3
 8025130:	f7e9 faf0 	bl	800e714 <mg_iobuf_del>
    if (ok == false) {
 8025134:	7cfb      	ldrb	r3, [r7, #19]
 8025136:	f083 0301 	eor.w	r3, r3, #1
 802513a:	b2db      	uxtb	r3, r3
 802513c:	2b00      	cmp	r3, #0
 802513e:	d011      	beq.n	8025164 <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 8025140:	4b29      	ldr	r3, [pc, #164]	@ (80251e8 <upload_handler+0x1a4>)
 8025142:	4a2a      	ldr	r2, [pc, #168]	@ (80251ec <upload_handler+0x1a8>)
 8025144:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025148:	68f8      	ldr	r0, [r7, #12]
 802514a:	f7e7 fb87 	bl	800c85c <mg_http_reply>
      close_uploaded_file(us);
 802514e:	69f8      	ldr	r0, [r7, #28]
 8025150:	f7ff fefe 	bl	8024f50 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8025154:	68fa      	ldr	r2, [r7, #12]
 8025156:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802515a:	f043 0310 	orr.w	r3, r3, #16
 802515e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 8025162:	e02b      	b.n	80251bc <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 8025164:	69fb      	ldr	r3, [r7, #28]
 8025166:	689a      	ldr	r2, [r3, #8]
 8025168:	69fb      	ldr	r3, [r7, #28]
 802516a:	685b      	ldr	r3, [r3, #4]
 802516c:	429a      	cmp	r2, r3
 802516e:	d325      	bcc.n	80251bc <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 8025170:	4b19      	ldr	r3, [pc, #100]	@ (80251d8 <upload_handler+0x194>)
 8025172:	681b      	ldr	r3, [r3, #0]
 8025174:	2b01      	cmp	r3, #1
 8025176:	dd0e      	ble.n	8025196 <upload_handler+0x152>
 8025178:	4b18      	ldr	r3, [pc, #96]	@ (80251dc <upload_handler+0x198>)
 802517a:	f240 1283 	movw	r2, #387	@ 0x183
 802517e:	4918      	ldr	r1, [pc, #96]	@ (80251e0 <upload_handler+0x19c>)
 8025180:	2002      	movs	r0, #2
 8025182:	f7ea fadf 	bl	800f744 <mg_log_prefix>
 8025186:	68fb      	ldr	r3, [r7, #12]
 8025188:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802518a:	69fb      	ldr	r3, [r7, #28]
 802518c:	689b      	ldr	r3, [r3, #8]
 802518e:	461a      	mov	r2, r3
 8025190:	4817      	ldr	r0, [pc, #92]	@ (80251f0 <upload_handler+0x1ac>)
 8025192:	f7ea fb27 	bl	800f7e4 <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 8025196:	69fb      	ldr	r3, [r7, #28]
 8025198:	689b      	ldr	r3, [r3, #8]
 802519a:	9300      	str	r3, [sp, #0]
 802519c:	4b15      	ldr	r3, [pc, #84]	@ (80251f4 <upload_handler+0x1b0>)
 802519e:	2200      	movs	r2, #0
 80251a0:	21c8      	movs	r1, #200	@ 0xc8
 80251a2:	68f8      	ldr	r0, [r7, #12]
 80251a4:	f7e7 fb5a 	bl	800c85c <mg_http_reply>
      close_uploaded_file(us);
 80251a8:	69f8      	ldr	r0, [r7, #28]
 80251aa:	f7ff fed1 	bl	8024f50 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80251ae:	68fa      	ldr	r2, [r7, #12]
 80251b0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80251b4:	f043 0310 	orr.w	r3, r3, #16
 80251b8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 80251bc:	69fb      	ldr	r3, [r7, #28]
 80251be:	781b      	ldrb	r3, [r3, #0]
 80251c0:	2b55      	cmp	r3, #85	@ 0x55
 80251c2:	d105      	bne.n	80251d0 <upload_handler+0x18c>
 80251c4:	68bb      	ldr	r3, [r7, #8]
 80251c6:	2b09      	cmp	r3, #9
 80251c8:	d102      	bne.n	80251d0 <upload_handler+0x18c>
 80251ca:	69f8      	ldr	r0, [r7, #28]
 80251cc:	f7ff fec0 	bl	8024f50 <close_uploaded_file>
  (void) ev_data;
}
 80251d0:	3724      	adds	r7, #36	@ 0x24
 80251d2:	46bd      	mov	sp, r7
 80251d4:	bd90      	pop	{r4, r7, pc}
 80251d6:	bf00      	nop
 80251d8:	2400025c 	.word	0x2400025c
 80251dc:	0803e770 	.word	0x0803e770
 80251e0:	080304a0 	.word	0x080304a0
 80251e4:	08030640 	.word	0x08030640
 80251e8:	08030664 	.word	0x08030664
 80251ec:	08030544 	.word	0x08030544
 80251f0:	08030674 	.word	0x08030674
 80251f4:	08030688 	.word	0x08030688

080251f8 <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 80251f8:	b590      	push	{r4, r7, lr}
 80251fa:	b08f      	sub	sp, #60	@ 0x3c
 80251fc:	af02      	add	r7, sp, #8
 80251fe:	f107 0408 	add.w	r4, r7, #8
 8025202:	e884 0003 	stmia.w	r4, {r0, r1}
 8025206:	607a      	str	r2, [r7, #4]
 8025208:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 802520a:	f107 0310 	add.w	r3, r7, #16
 802520e:	2218      	movs	r2, #24
 8025210:	2100      	movs	r1, #0
 8025212:	4618      	mov	r0, r3
 8025214:	f003 fac4 	bl	80287a0 <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8025218:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802521c:	490d      	ldr	r1, [pc, #52]	@ (8025254 <get_file_name_from_uri+0x5c>)
 802521e:	4618      	mov	r0, r3
 8025220:	f7f2 fa90 	bl	8017744 <mg_str_s>
 8025224:	f107 0310 	add.w	r3, r7, #16
 8025228:	9300      	str	r3, [sp, #0]
 802522a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 802522e:	cb0c      	ldmia	r3, {r2, r3}
 8025230:	f107 0108 	add.w	r1, r7, #8
 8025234:	c903      	ldmia	r1, {r0, r1}
 8025236:	f7f2 fb8f 	bl	8017958 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 802523a:	69b8      	ldr	r0, [r7, #24]
 802523c:	69f9      	ldr	r1, [r7, #28]
 802523e:	2300      	movs	r3, #0
 8025240:	9300      	str	r3, [sp, #0]
 8025242:	683b      	ldr	r3, [r7, #0]
 8025244:	687a      	ldr	r2, [r7, #4]
 8025246:	f7e6 f9a0 	bl	800b58a <mg_url_decode>
}
 802524a:	bf00      	nop
 802524c:	3734      	adds	r7, #52	@ 0x34
 802524e:	46bd      	mov	sp, r7
 8025250:	bd90      	pop	{r4, r7, pc}
 8025252:	bf00      	nop
 8025254:	08030690 	.word	0x08030690

08025258 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8025258:	b580      	push	{r7, lr}
 802525a:	b09e      	sub	sp, #120	@ 0x78
 802525c:	af00      	add	r7, sp, #0
 802525e:	60f8      	str	r0, [r7, #12]
 8025260:	60b9      	str	r1, [r7, #8]
 8025262:	607a      	str	r2, [r7, #4]
 8025264:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 8025266:	68fb      	ldr	r3, [r7, #12]
 8025268:	3388      	adds	r3, #136	@ 0x88
 802526a:	677b      	str	r3, [r7, #116]	@ 0x74
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 802526c:	2218      	movs	r2, #24
 802526e:	2100      	movs	r1, #0
 8025270:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8025272:	f003 fa95 	bl	80287a0 <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8025276:	f107 0210 	add.w	r2, r7, #16
 802527a:	68b9      	ldr	r1, [r7, #8]
 802527c:	2364      	movs	r3, #100	@ 0x64
 802527e:	3108      	adds	r1, #8
 8025280:	c903      	ldmia	r1, {r0, r1}
 8025282:	f7ff ffb9 	bl	80251f8 <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 8025286:	68bb      	ldr	r3, [r7, #8]
 8025288:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 802528c:	f107 0210 	add.w	r2, r7, #16
 8025290:	687b      	ldr	r3, [r7, #4]
 8025292:	4610      	mov	r0, r2
 8025294:	4798      	blx	r3
 8025296:	4602      	mov	r2, r0
 8025298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802529a:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 802529c:	4b29      	ldr	r3, [pc, #164]	@ (8025344 <prep_upload+0xec>)
 802529e:	681b      	ldr	r3, [r3, #0]
 80252a0:	2b02      	cmp	r3, #2
 80252a2:	dd10      	ble.n	80252c6 <prep_upload+0x6e>
 80252a4:	4b28      	ldr	r3, [pc, #160]	@ (8025348 <prep_upload+0xf0>)
 80252a6:	f240 129f 	movw	r2, #415	@ 0x19f
 80252aa:	4928      	ldr	r1, [pc, #160]	@ (802534c <prep_upload+0xf4>)
 80252ac:	2003      	movs	r0, #3
 80252ae:	f7ea fa49 	bl	800f744 <mg_log_prefix>
 80252b2:	68bb      	ldr	r3, [r7, #8]
 80252b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80252b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80252ba:	68db      	ldr	r3, [r3, #12]
 80252bc:	f107 0110 	add.w	r1, r7, #16
 80252c0:	4823      	ldr	r0, [pc, #140]	@ (8025350 <prep_upload+0xf8>)
 80252c2:	f7ea fa8f 	bl	800f7e4 <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 80252c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80252c8:	2255      	movs	r2, #85	@ 0x55
 80252ca:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 80252cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80252ce:	68db      	ldr	r3, [r3, #12]
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	d10e      	bne.n	80252f2 <prep_upload+0x9a>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 80252d4:	4b1f      	ldr	r3, [pc, #124]	@ (8025354 <prep_upload+0xfc>)
 80252d6:	4a20      	ldr	r2, [pc, #128]	@ (8025358 <prep_upload+0x100>)
 80252d8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80252dc:	68f8      	ldr	r0, [r7, #12]
 80252de:	f7e7 fabd 	bl	800c85c <mg_http_reply>
    c->is_draining = 1;
 80252e2:	68fa      	ldr	r2, [r7, #12]
 80252e4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80252e8:	f043 0310 	orr.w	r3, r3, #16
 80252ec:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 80252f0:	e023      	b.n	802533a <prep_upload+0xe2>
    us->expected = hm->body.len;              // Store number of bytes we expect
 80252f2:	68bb      	ldr	r3, [r7, #8]
 80252f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80252f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80252fa:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 80252fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80252fe:	683a      	ldr	r2, [r7, #0]
 8025300:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8025302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8025304:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8025308:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 802530a:	68fb      	ldr	r3, [r7, #12]
 802530c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8025310:	68bb      	ldr	r3, [r7, #8]
 8025312:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8025316:	461a      	mov	r2, r3
 8025318:	2100      	movs	r1, #0
 802531a:	f7e9 f9fb 	bl	800e714 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 802531e:	68fb      	ldr	r3, [r7, #12]
 8025320:	4a0e      	ldr	r2, [pc, #56]	@ (802535c <prep_upload+0x104>)
 8025322:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	2200      	movs	r2, #0
 8025328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 802532c:	68fb      	ldr	r3, [r7, #12]
 802532e:	3340      	adds	r3, #64	@ 0x40
 8025330:	461a      	mov	r2, r3
 8025332:	2107      	movs	r1, #7
 8025334:	68f8      	ldr	r0, [r7, #12]
 8025336:	f7e4 faef 	bl	8009918 <mg_call>
}
 802533a:	bf00      	nop
 802533c:	3778      	adds	r7, #120	@ 0x78
 802533e:	46bd      	mov	sp, r7
 8025340:	bd80      	pop	{r7, pc}
 8025342:	bf00      	nop
 8025344:	2400025c 	.word	0x2400025c
 8025348:	0803e780 	.word	0x0803e780
 802534c:	080304a0 	.word	0x080304a0
 8025350:	0803069c 	.word	0x0803069c
 8025354:	080306b8 	.word	0x080306b8
 8025358:	080306cc 	.word	0x080306cc
 802535c:	08025045 	.word	0x08025045

08025360 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8025360:	b580      	push	{r7, lr}
 8025362:	b08e      	sub	sp, #56	@ 0x38
 8025364:	af02      	add	r7, sp, #8
 8025366:	60f8      	str	r0, [r7, #12]
 8025368:	60b9      	str	r1, [r7, #8]
 802536a:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 802536c:	68fb      	ldr	r3, [r7, #12]
 802536e:	3388      	adds	r3, #136	@ 0x88
 8025370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8025376:	68bb      	ldr	r3, [r7, #8]
 8025378:	2b0a      	cmp	r3, #10
 802537a:	d153      	bne.n	8025424 <handle_uploads+0xc4>
 802537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802537e:	781b      	ldrb	r3, [r3, #0]
 8025380:	2b00      	cmp	r3, #0
 8025382:	d14f      	bne.n	8025424 <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 8025384:	f107 0314 	add.w	r3, r7, #20
 8025388:	4928      	ldr	r1, [pc, #160]	@ (802542c <handle_uploads+0xcc>)
 802538a:	4618      	mov	r0, r3
 802538c:	f7f2 f9da 	bl	8017744 <mg_str_s>
 8025390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8025392:	f107 0314 	add.w	r3, r7, #20
 8025396:	cb0c      	ldmia	r3, {r2, r3}
 8025398:	c903      	ldmia	r1, {r0, r1}
 802539a:	f7f2 fa54 	bl	8017846 <mg_strcmp>
 802539e:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 80253a0:	2b00      	cmp	r3, #0
 80253a2:	d13f      	bne.n	8025424 <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 80253a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80253a6:	f7ff fbf1 	bl	8024b8c <find_handler>
 80253aa:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 80253ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253ae:	2b00      	cmp	r3, #0
 80253b0:	d021      	beq.n	80253f6 <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 80253b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253b4:	685b      	ldr	r3, [r3, #4]
 80253b6:	491e      	ldr	r1, [pc, #120]	@ (8025430 <handle_uploads+0xd0>)
 80253b8:	4618      	mov	r0, r3
 80253ba:	f7da ffa9 	bl	8000310 <strcmp>
 80253be:	4603      	mov	r3, r0
    if (h != NULL &&
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	d008      	beq.n	80253d6 <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 80253c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253c6:	685b      	ldr	r3, [r3, #4]
 80253c8:	491a      	ldr	r1, [pc, #104]	@ (8025434 <handle_uploads+0xd4>)
 80253ca:	4618      	mov	r0, r3
 80253cc:	f7da ffa0 	bl	8000310 <strcmp>
 80253d0:	4603      	mov	r3, r0
 80253d2:	2b00      	cmp	r3, #0
 80253d4:	d10f      	bne.n	80253f6 <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 80253d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253d8:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 80253da:	6a3b      	ldr	r3, [r7, #32]
 80253dc:	699a      	ldr	r2, [r3, #24]
 80253de:	6a3b      	ldr	r3, [r7, #32]
 80253e0:	69d9      	ldr	r1, [r3, #28]
 80253e2:	6a3b      	ldr	r3, [r7, #32]
 80253e4:	6a1b      	ldr	r3, [r3, #32]
 80253e6:	9300      	str	r3, [sp, #0]
 80253e8:	460b      	mov	r3, r1
 80253ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80253ec:	68f8      	ldr	r0, [r7, #12]
 80253ee:	f7ff ff33 	bl	8025258 <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 80253f2:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 80253f4:	e016      	b.n	8025424 <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 80253f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d013      	beq.n	8025424 <handle_uploads+0xc4>
 80253fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80253fe:	685b      	ldr	r3, [r3, #4]
 8025400:	490d      	ldr	r1, [pc, #52]	@ (8025438 <handle_uploads+0xd8>)
 8025402:	4618      	mov	r0, r3
 8025404:	f7da ff84 	bl	8000310 <strcmp>
 8025408:	4603      	mov	r3, r0
 802540a:	2b00      	cmp	r3, #0
 802540c:	d10a      	bne.n	8025424 <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 802540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025410:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 8025412:	69fb      	ldr	r3, [r7, #28]
 8025414:	699a      	ldr	r2, [r3, #24]
 8025416:	4b09      	ldr	r3, [pc, #36]	@ (802543c <handle_uploads+0xdc>)
 8025418:	9300      	str	r3, [sp, #0]
 802541a:	4b09      	ldr	r3, [pc, #36]	@ (8025440 <handle_uploads+0xe0>)
 802541c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802541e:	68f8      	ldr	r0, [r7, #12]
 8025420:	f7ff ff1a 	bl	8025258 <prep_upload>
}
 8025424:	bf00      	nop
 8025426:	3730      	adds	r7, #48	@ 0x30
 8025428:	46bd      	mov	sp, r7
 802542a:	bd80      	pop	{r7, pc}
 802542c:	08030708 	.word	0x08030708
 8025430:	08030424 	.word	0x08030424
 8025434:	08030414 	.word	0x08030414
 8025438:	080304d4 	.word	0x080304d4
 802543c:	08024fdd 	.word	0x08024fdd
 8025440:	08024f95 	.word	0x08024f95

08025444 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 8025444:	b580      	push	{r7, lr}
 8025446:	b088      	sub	sp, #32
 8025448:	af02      	add	r7, sp, #8
 802544a:	60f8      	str	r0, [r7, #12]
 802544c:	60b9      	str	r1, [r7, #8]
 802544e:	607a      	str	r2, [r7, #4]
 8025450:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 8025452:	68bb      	ldr	r3, [r7, #8]
 8025454:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8025458:	2b00      	cmp	r3, #0
 802545a:	d01c      	beq.n	8025496 <handle_action+0x52>
    start_fn(hm->body);
 802545c:	68ba      	ldr	r2, [r7, #8]
 802545e:	683b      	ldr	r3, [r7, #0]
 8025460:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8025464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025468:	4798      	blx	r3
    if (check_fn()) {
 802546a:	687b      	ldr	r3, [r7, #4]
 802546c:	4798      	blx	r3
 802546e:	4603      	mov	r3, r0
 8025470:	2b00      	cmp	r3, #0
 8025472:	d009      	beq.n	8025488 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 8025474:	68fb      	ldr	r3, [r7, #12]
 8025476:	3388      	adds	r3, #136	@ 0x88
 8025478:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 802547a:	697b      	ldr	r3, [r7, #20]
 802547c:	2241      	movs	r2, #65	@ 0x41
 802547e:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8025480:	697b      	ldr	r3, [r7, #20]
 8025482:	687a      	ldr	r2, [r7, #4]
 8025484:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8025486:	e015      	b.n	80254b4 <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8025488:	4b0c      	ldr	r3, [pc, #48]	@ (80254bc <handle_action+0x78>)
 802548a:	4a0d      	ldr	r2, [pc, #52]	@ (80254c0 <handle_action+0x7c>)
 802548c:	21c8      	movs	r1, #200	@ 0xc8
 802548e:	68f8      	ldr	r0, [r7, #12]
 8025490:	f7e7 f9e4 	bl	800c85c <mg_http_reply>
}
 8025494:	e00e      	b.n	80254b4 <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8025496:	687b      	ldr	r3, [r7, #4]
 8025498:	4798      	blx	r3
 802549a:	4603      	mov	r3, r0
 802549c:	2b00      	cmp	r3, #0
 802549e:	d001      	beq.n	80254a4 <handle_action+0x60>
 80254a0:	4b08      	ldr	r3, [pc, #32]	@ (80254c4 <handle_action+0x80>)
 80254a2:	e000      	b.n	80254a6 <handle_action+0x62>
 80254a4:	4b05      	ldr	r3, [pc, #20]	@ (80254bc <handle_action+0x78>)
 80254a6:	9300      	str	r3, [sp, #0]
 80254a8:	4b07      	ldr	r3, [pc, #28]	@ (80254c8 <handle_action+0x84>)
 80254aa:	4a05      	ldr	r2, [pc, #20]	@ (80254c0 <handle_action+0x7c>)
 80254ac:	21c8      	movs	r1, #200	@ 0xc8
 80254ae:	68f8      	ldr	r0, [r7, #12]
 80254b0:	f7e7 f9d4 	bl	800c85c <mg_http_reply>
}
 80254b4:	bf00      	nop
 80254b6:	3718      	adds	r7, #24
 80254b8:	46bd      	mov	sp, r7
 80254ba:	bd80      	pop	{r7, pc}
 80254bc:	08030710 	.word	0x08030710
 80254c0:	080306cc 	.word	0x080306cc
 80254c4:	08030718 	.word	0x08030718
 80254c8:	08030518 	.word	0x08030518

080254cc <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 80254cc:	b580      	push	{r7, lr}
 80254ce:	b08e      	sub	sp, #56	@ 0x38
 80254d0:	af04      	add	r7, sp, #16
 80254d2:	60f8      	str	r0, [r7, #12]
 80254d4:	60b9      	str	r1, [r7, #8]
 80254d6:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 80254d8:	687b      	ldr	r3, [r7, #4]
 80254da:	681b      	ldr	r3, [r3, #0]
 80254dc:	1d19      	adds	r1, r3, #4
 80254de:	687a      	ldr	r2, [r7, #4]
 80254e0:	6011      	str	r1, [r2, #0]
 80254e2:	681b      	ldr	r3, [r3, #0]
 80254e4:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 80254e6:	687b      	ldr	r3, [r7, #4]
 80254e8:	681b      	ldr	r3, [r3, #0]
 80254ea:	1d19      	adds	r1, r3, #4
 80254ec:	687a      	ldr	r2, [r7, #4]
 80254ee:	6011      	str	r1, [r2, #0]
 80254f0:	681b      	ldr	r3, [r3, #0]
 80254f2:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 80254f4:	2300      	movs	r3, #0
 80254f6:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 80254f8:	2300      	movs	r3, #0
 80254fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80254fc:	e0bf      	b.n	802567e <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 80254fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025500:	4613      	mov	r3, r2
 8025502:	005b      	lsls	r3, r3, #1
 8025504:	4413      	add	r3, r2
 8025506:	00db      	lsls	r3, r3, #3
 8025508:	461a      	mov	r2, r3
 802550a:	69bb      	ldr	r3, [r7, #24]
 802550c:	4413      	add	r3, r2
 802550e:	68db      	ldr	r3, [r3, #12]
 8025510:	697a      	ldr	r2, [r7, #20]
 8025512:	4413      	add	r3, r2
 8025514:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 8025516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025518:	2b00      	cmp	r3, #0
 802551a:	d101      	bne.n	8025520 <print_struct+0x54>
 802551c:	4960      	ldr	r1, [pc, #384]	@ (80256a0 <print_struct+0x1d4>)
 802551e:	e000      	b.n	8025522 <print_struct+0x56>
 8025520:	4960      	ldr	r1, [pc, #384]	@ (80256a4 <print_struct+0x1d8>)
 8025522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025524:	4613      	mov	r3, r2
 8025526:	005b      	lsls	r3, r3, #1
 8025528:	4413      	add	r3, r2
 802552a:	00db      	lsls	r3, r3, #3
 802552c:	461a      	mov	r2, r3
 802552e:	69bb      	ldr	r3, [r7, #24]
 8025530:	4413      	add	r3, r2
 8025532:	681b      	ldr	r3, [r3, #0]
 8025534:	9302      	str	r3, [sp, #8]
 8025536:	2300      	movs	r3, #0
 8025538:	9301      	str	r3, [sp, #4]
 802553a:	4b5b      	ldr	r3, [pc, #364]	@ (80256a8 <print_struct+0x1dc>)
 802553c:	9300      	str	r3, [sp, #0]
 802553e:	460b      	mov	r3, r1
 8025540:	4a5a      	ldr	r2, [pc, #360]	@ (80256ac <print_struct+0x1e0>)
 8025542:	68b9      	ldr	r1, [r7, #8]
 8025544:	68f8      	ldr	r0, [r7, #12]
 8025546:	f7e5 f880 	bl	800a64a <mg_xprintf>
 802554a:	4602      	mov	r2, r0
 802554c:	6a3b      	ldr	r3, [r7, #32]
 802554e:	4413      	add	r3, r2
 8025550:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 8025552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025554:	4613      	mov	r3, r2
 8025556:	005b      	lsls	r3, r3, #1
 8025558:	4413      	add	r3, r2
 802555a:	00db      	lsls	r3, r3, #3
 802555c:	461a      	mov	r2, r3
 802555e:	69bb      	ldr	r3, [r7, #24]
 8025560:	4413      	add	r3, r2
 8025562:	685b      	ldr	r3, [r3, #4]
 8025564:	4952      	ldr	r1, [pc, #328]	@ (80256b0 <print_struct+0x1e4>)
 8025566:	4618      	mov	r0, r3
 8025568:	f7da fed2 	bl	8000310 <strcmp>
 802556c:	4603      	mov	r3, r0
 802556e:	2b00      	cmp	r3, #0
 8025570:	d10b      	bne.n	802558a <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8025572:	693b      	ldr	r3, [r7, #16]
 8025574:	681b      	ldr	r3, [r3, #0]
 8025576:	4a4f      	ldr	r2, [pc, #316]	@ (80256b4 <print_struct+0x1e8>)
 8025578:	68b9      	ldr	r1, [r7, #8]
 802557a:	68f8      	ldr	r0, [r7, #12]
 802557c:	f7e5 f865 	bl	800a64a <mg_xprintf>
 8025580:	4602      	mov	r2, r0
 8025582:	6a3b      	ldr	r3, [r7, #32]
 8025584:	4413      	add	r3, r2
 8025586:	623b      	str	r3, [r7, #32]
 8025588:	e076      	b.n	8025678 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 802558a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802558c:	4613      	mov	r3, r2
 802558e:	005b      	lsls	r3, r3, #1
 8025590:	4413      	add	r3, r2
 8025592:	00db      	lsls	r3, r3, #3
 8025594:	461a      	mov	r2, r3
 8025596:	69bb      	ldr	r3, [r7, #24]
 8025598:	4413      	add	r3, r2
 802559a:	685b      	ldr	r3, [r3, #4]
 802559c:	4946      	ldr	r1, [pc, #280]	@ (80256b8 <print_struct+0x1ec>)
 802559e:	4618      	mov	r0, r3
 80255a0:	f7da feb6 	bl	8000310 <strcmp>
 80255a4:	4603      	mov	r3, r0
 80255a6:	2b00      	cmp	r3, #0
 80255a8:	d11d      	bne.n	80255e6 <print_struct+0x11a>
      const char *fmt = a[i].format;
 80255aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80255ac:	4613      	mov	r3, r2
 80255ae:	005b      	lsls	r3, r3, #1
 80255b0:	4413      	add	r3, r2
 80255b2:	00db      	lsls	r3, r3, #3
 80255b4:	461a      	mov	r2, r3
 80255b6:	69bb      	ldr	r3, [r7, #24]
 80255b8:	4413      	add	r3, r2
 80255ba:	689b      	ldr	r3, [r3, #8]
 80255bc:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 80255be:	69fb      	ldr	r3, [r7, #28]
 80255c0:	2b00      	cmp	r3, #0
 80255c2:	d101      	bne.n	80255c8 <print_struct+0xfc>
 80255c4:	4b3d      	ldr	r3, [pc, #244]	@ (80256bc <print_struct+0x1f0>)
 80255c6:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 80255c8:	693b      	ldr	r3, [r7, #16]
 80255ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255ce:	e9cd 2300 	strd	r2, r3, [sp]
 80255d2:	69fa      	ldr	r2, [r7, #28]
 80255d4:	68b9      	ldr	r1, [r7, #8]
 80255d6:	68f8      	ldr	r0, [r7, #12]
 80255d8:	f7e5 f837 	bl	800a64a <mg_xprintf>
 80255dc:	4602      	mov	r2, r0
 80255de:	6a3b      	ldr	r3, [r7, #32]
 80255e0:	4413      	add	r3, r2
 80255e2:	623b      	str	r3, [r7, #32]
 80255e4:	e048      	b.n	8025678 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 80255e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80255e8:	4613      	mov	r3, r2
 80255ea:	005b      	lsls	r3, r3, #1
 80255ec:	4413      	add	r3, r2
 80255ee:	00db      	lsls	r3, r3, #3
 80255f0:	461a      	mov	r2, r3
 80255f2:	69bb      	ldr	r3, [r7, #24]
 80255f4:	4413      	add	r3, r2
 80255f6:	685b      	ldr	r3, [r3, #4]
 80255f8:	4931      	ldr	r1, [pc, #196]	@ (80256c0 <print_struct+0x1f4>)
 80255fa:	4618      	mov	r0, r3
 80255fc:	f7da fe88 	bl	8000310 <strcmp>
 8025600:	4603      	mov	r3, r0
 8025602:	2b00      	cmp	r3, #0
 8025604:	d110      	bne.n	8025628 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8025606:	693b      	ldr	r3, [r7, #16]
 8025608:	781b      	ldrb	r3, [r3, #0]
 802560a:	2b00      	cmp	r3, #0
 802560c:	d001      	beq.n	8025612 <print_struct+0x146>
 802560e:	4b2d      	ldr	r3, [pc, #180]	@ (80256c4 <print_struct+0x1f8>)
 8025610:	e000      	b.n	8025614 <print_struct+0x148>
 8025612:	4b2d      	ldr	r3, [pc, #180]	@ (80256c8 <print_struct+0x1fc>)
 8025614:	4a2d      	ldr	r2, [pc, #180]	@ (80256cc <print_struct+0x200>)
 8025616:	68b9      	ldr	r1, [r7, #8]
 8025618:	68f8      	ldr	r0, [r7, #12]
 802561a:	f7e5 f816 	bl	800a64a <mg_xprintf>
 802561e:	4602      	mov	r2, r0
 8025620:	6a3b      	ldr	r3, [r7, #32]
 8025622:	4413      	add	r3, r2
 8025624:	623b      	str	r3, [r7, #32]
 8025626:	e027      	b.n	8025678 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 8025628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802562a:	4613      	mov	r3, r2
 802562c:	005b      	lsls	r3, r3, #1
 802562e:	4413      	add	r3, r2
 8025630:	00db      	lsls	r3, r3, #3
 8025632:	461a      	mov	r2, r3
 8025634:	69bb      	ldr	r3, [r7, #24]
 8025636:	4413      	add	r3, r2
 8025638:	685b      	ldr	r3, [r3, #4]
 802563a:	4925      	ldr	r1, [pc, #148]	@ (80256d0 <print_struct+0x204>)
 802563c:	4618      	mov	r0, r3
 802563e:	f7da fe67 	bl	8000310 <strcmp>
 8025642:	4603      	mov	r3, r0
 8025644:	2b00      	cmp	r3, #0
 8025646:	d10e      	bne.n	8025666 <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8025648:	693b      	ldr	r3, [r7, #16]
 802564a:	9301      	str	r3, [sp, #4]
 802564c:	2300      	movs	r3, #0
 802564e:	9300      	str	r3, [sp, #0]
 8025650:	4b15      	ldr	r3, [pc, #84]	@ (80256a8 <print_struct+0x1dc>)
 8025652:	4a20      	ldr	r2, [pc, #128]	@ (80256d4 <print_struct+0x208>)
 8025654:	68b9      	ldr	r1, [r7, #8]
 8025656:	68f8      	ldr	r0, [r7, #12]
 8025658:	f7e4 fff7 	bl	800a64a <mg_xprintf>
 802565c:	4602      	mov	r2, r0
 802565e:	6a3b      	ldr	r3, [r7, #32]
 8025660:	4413      	add	r3, r2
 8025662:	623b      	str	r3, [r7, #32]
 8025664:	e008      	b.n	8025678 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8025666:	4a1c      	ldr	r2, [pc, #112]	@ (80256d8 <print_struct+0x20c>)
 8025668:	68b9      	ldr	r1, [r7, #8]
 802566a:	68f8      	ldr	r0, [r7, #12]
 802566c:	f7e4 ffed 	bl	800a64a <mg_xprintf>
 8025670:	4602      	mov	r2, r0
 8025672:	6a3b      	ldr	r3, [r7, #32]
 8025674:	4413      	add	r3, r2
 8025676:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8025678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802567a:	3301      	adds	r3, #1
 802567c:	627b      	str	r3, [r7, #36]	@ 0x24
 802567e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025680:	4613      	mov	r3, r2
 8025682:	005b      	lsls	r3, r3, #1
 8025684:	4413      	add	r3, r2
 8025686:	00db      	lsls	r3, r3, #3
 8025688:	461a      	mov	r2, r3
 802568a:	69bb      	ldr	r3, [r7, #24]
 802568c:	4413      	add	r3, r2
 802568e:	681b      	ldr	r3, [r3, #0]
 8025690:	2b00      	cmp	r3, #0
 8025692:	f47f af34 	bne.w	80254fe <print_struct+0x32>
    }
  }
  return len;
 8025696:	6a3b      	ldr	r3, [r7, #32]
}
 8025698:	4618      	mov	r0, r3
 802569a:	3728      	adds	r7, #40	@ 0x28
 802569c:	46bd      	mov	sp, r7
 802569e:	bd80      	pop	{r7, pc}
 80256a0:	08030544 	.word	0x08030544
 80256a4:	08030720 	.word	0x08030720
 80256a8:	08014449 	.word	0x08014449
 80256ac:	08030724 	.word	0x08030724
 80256b0:	080302ec 	.word	0x080302ec
 80256b4:	0803072c 	.word	0x0803072c
 80256b8:	080303a4 	.word	0x080303a4
 80256bc:	08030730 	.word	0x08030730
 80256c0:	08030328 	.word	0x08030328
 80256c4:	08030718 	.word	0x08030718
 80256c8:	08030710 	.word	0x08030710
 80256cc:	08030518 	.word	0x08030518
 80256d0:	08030318 	.word	0x08030318
 80256d4:	08030734 	.word	0x08030734
 80256d8:	08030738 	.word	0x08030738

080256dc <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 80256dc:	b580      	push	{r7, lr}
 80256de:	b0a8      	sub	sp, #160	@ 0xa0
 80256e0:	af04      	add	r7, sp, #16
 80256e2:	60f8      	str	r0, [r7, #12]
 80256e4:	60b9      	str	r1, [r7, #8]
 80256e6:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 80256e8:	687b      	ldr	r3, [r7, #4]
 80256ea:	69db      	ldr	r3, [r3, #28]
 80256ec:	4619      	mov	r1, r3
 80256ee:	2001      	movs	r0, #1
 80256f0:	f001 f88c 	bl	802680c <calloc>
 80256f4:	4603      	mov	r3, r0
 80256f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 80256fa:	687b      	ldr	r3, [r7, #4]
 80256fc:	6a1b      	ldr	r3, [r3, #32]
 80256fe:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8025702:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8025704:	68bb      	ldr	r3, [r7, #8]
 8025706:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802570a:	2b00      	cmp	r3, #0
 802570c:	f000 80da 	beq.w	80258c4 <handle_object+0x1e8>
 8025710:	687b      	ldr	r3, [r7, #4]
 8025712:	69db      	ldr	r3, [r3, #28]
 8025714:	2b00      	cmp	r3, #0
 8025716:	f000 80d5 	beq.w	80258c4 <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 802571a:	687b      	ldr	r3, [r7, #4]
 802571c:	69db      	ldr	r3, [r3, #28]
 802571e:	4619      	mov	r1, r3
 8025720:	2001      	movs	r0, #1
 8025722:	f001 f873 	bl	802680c <calloc>
 8025726:	4603      	mov	r3, r0
 8025728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 802572c:	687b      	ldr	r3, [r7, #4]
 802572e:	69db      	ldr	r3, [r3, #28]
 8025730:	461a      	mov	r2, r3
 8025732:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8025736:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 802573a:	f004 fa60 	bl	8029bfe <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 802573e:	2300      	movs	r3, #0
 8025740:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8025744:	e08e      	b.n	8025864 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	6999      	ldr	r1, [r3, #24]
 802574a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802574e:	4613      	mov	r3, r2
 8025750:	005b      	lsls	r3, r3, #1
 8025752:	4413      	add	r3, r2
 8025754:	00db      	lsls	r3, r3, #3
 8025756:	440b      	add	r3, r1
 8025758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 802575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025760:	681b      	ldr	r3, [r3, #0]
 8025762:	f107 0010 	add.w	r0, r7, #16
 8025766:	4a62      	ldr	r2, [pc, #392]	@ (80258f0 <handle_object+0x214>)
 8025768:	2164      	movs	r1, #100	@ 0x64
 802576a:	f7ee fc27 	bl	8013fbc <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 802576e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025772:	685b      	ldr	r3, [r3, #4]
 8025774:	495f      	ldr	r1, [pc, #380]	@ (80258f4 <handle_object+0x218>)
 8025776:	4618      	mov	r0, r3
 8025778:	f7da fdca 	bl	8000310 <strcmp>
 802577c:	4603      	mov	r3, r0
 802577e:	2b00      	cmp	r3, #0
 8025780:	d11c      	bne.n	80257bc <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8025782:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8025786:	f107 0210 	add.w	r2, r7, #16
 802578a:	68b9      	ldr	r1, [r7, #8]
 802578c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8025790:	c903      	ldmia	r1, {r0, r1}
 8025792:	f7e9 fe98 	bl	800f4c6 <mg_json_get_num>
 8025796:	4603      	mov	r3, r0
 8025798:	2b00      	cmp	r3, #0
 802579a:	d05e      	beq.n	802585a <handle_object+0x17e>
          int v = (int) d;
 802579c:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80257a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80257a4:	ee17 3a90 	vmov	r3, s15
 80257a8:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 80257aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80257ae:	68db      	ldr	r3, [r3, #12]
 80257b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80257b4:	4413      	add	r3, r2
 80257b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80257b8:	601a      	str	r2, [r3, #0]
 80257ba:	e04e      	b.n	802585a <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 80257bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80257c0:	685b      	ldr	r3, [r3, #4]
 80257c2:	494d      	ldr	r1, [pc, #308]	@ (80258f8 <handle_object+0x21c>)
 80257c4:	4618      	mov	r0, r3
 80257c6:	f7da fda3 	bl	8000310 <strcmp>
 80257ca:	4603      	mov	r3, r0
 80257cc:	2b00      	cmp	r3, #0
 80257ce:	d10e      	bne.n	80257ee <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 80257d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80257d4:	68db      	ldr	r3, [r3, #12]
 80257d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80257da:	4413      	add	r3, r2
 80257dc:	f107 0210 	add.w	r2, r7, #16
 80257e0:	68b9      	ldr	r1, [r7, #8]
 80257e2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80257e6:	c903      	ldmia	r1, {r0, r1}
 80257e8:	f7e9 feb2 	bl	800f550 <mg_json_get_bool>
 80257ec:	e035      	b.n	802585a <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 80257ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80257f2:	685b      	ldr	r3, [r3, #4]
 80257f4:	4941      	ldr	r1, [pc, #260]	@ (80258fc <handle_object+0x220>)
 80257f6:	4618      	mov	r0, r3
 80257f8:	f7da fd8a 	bl	8000310 <strcmp>
 80257fc:	4603      	mov	r3, r0
 80257fe:	2b00      	cmp	r3, #0
 8025800:	d10e      	bne.n	8025820 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8025802:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025806:	68db      	ldr	r3, [r3, #12]
 8025808:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802580c:	4413      	add	r3, r2
 802580e:	f107 0210 	add.w	r2, r7, #16
 8025812:	68b9      	ldr	r1, [r7, #8]
 8025814:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8025818:	c903      	ldmia	r1, {r0, r1}
 802581a:	f7e9 fe54 	bl	800f4c6 <mg_json_get_num>
 802581e:	e01c      	b.n	802585a <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8025820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025824:	685b      	ldr	r3, [r3, #4]
 8025826:	4936      	ldr	r1, [pc, #216]	@ (8025900 <handle_object+0x224>)
 8025828:	4618      	mov	r0, r3
 802582a:	f7da fd71 	bl	8000310 <strcmp>
 802582e:	4603      	mov	r3, r0
 8025830:	2b00      	cmp	r3, #0
 8025832:	d112      	bne.n	802585a <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8025834:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025838:	68db      	ldr	r3, [r3, #12]
 802583a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802583e:	18d0      	adds	r0, r2, r3
 8025840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025844:	691b      	ldr	r3, [r3, #16]
 8025846:	f107 0210 	add.w	r2, r7, #16
 802584a:	68b9      	ldr	r1, [r7, #8]
 802584c:	9300      	str	r3, [sp, #0]
 802584e:	4603      	mov	r3, r0
 8025850:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8025854:	c903      	ldmia	r1, {r0, r1}
 8025856:	f7ff f9c5 	bl	8024be4 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 802585a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802585e:	3301      	adds	r3, #1
 8025860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8025864:	687b      	ldr	r3, [r7, #4]
 8025866:	6999      	ldr	r1, [r3, #24]
 8025868:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802586c:	4613      	mov	r3, r2
 802586e:	005b      	lsls	r3, r3, #1
 8025870:	4413      	add	r3, r2
 8025872:	00db      	lsls	r3, r3, #3
 8025874:	440b      	add	r3, r1
 8025876:	681b      	ldr	r3, [r3, #0]
 8025878:	2b00      	cmp	r3, #0
 802587a:	f47f af64 	bne.w	8025746 <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 802587e:	687b      	ldr	r3, [r7, #4]
 8025880:	69db      	ldr	r3, [r3, #28]
 8025882:	461a      	mov	r2, r3
 8025884:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8025888:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802588c:	f002 ff5e 	bl	802874c <memcmp>
 8025890:	4603      	mov	r3, r0
 8025892:	2b00      	cmp	r3, #0
 8025894:	d004      	beq.n	80258a0 <handle_object+0x1c4>
 8025896:	4b1b      	ldr	r3, [pc, #108]	@ (8025904 <handle_object+0x228>)
 8025898:	681b      	ldr	r3, [r3, #0]
 802589a:	3301      	adds	r3, #1
 802589c:	4a19      	ldr	r2, [pc, #100]	@ (8025904 <handle_object+0x228>)
 802589e:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 80258a0:	687b      	ldr	r3, [r7, #4]
 80258a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80258a4:	2b00      	cmp	r3, #0
 80258a6:	d004      	beq.n	80258b2 <handle_object+0x1d6>
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80258ac:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80258b0:	4798      	blx	r3
    free(tmp);
 80258b2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80258b6:	f000 ffcd 	bl	8026854 <free>
    h->getter(data);  // Re-sync again after setting
 80258ba:	687b      	ldr	r3, [r7, #4]
 80258bc:	6a1b      	ldr	r3, [r3, #32]
 80258be:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80258c2:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	699b      	ldr	r3, [r3, #24]
 80258c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80258cc:	9202      	str	r2, [sp, #8]
 80258ce:	9301      	str	r3, [sp, #4]
 80258d0:	4b0d      	ldr	r3, [pc, #52]	@ (8025908 <handle_object+0x22c>)
 80258d2:	9300      	str	r3, [sp, #0]
 80258d4:	4b0d      	ldr	r3, [pc, #52]	@ (802590c <handle_object+0x230>)
 80258d6:	4a0e      	ldr	r2, [pc, #56]	@ (8025910 <handle_object+0x234>)
 80258d8:	21c8      	movs	r1, #200	@ 0xc8
 80258da:	68f8      	ldr	r0, [r7, #12]
 80258dc:	f7e6 ffbe 	bl	800c85c <mg_http_reply>
                data);
  free(data);
 80258e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80258e4:	f000 ffb6 	bl	8026854 <free>
}
 80258e8:	bf00      	nop
 80258ea:	3790      	adds	r7, #144	@ 0x90
 80258ec:	46bd      	mov	sp, r7
 80258ee:	bd80      	pop	{r7, pc}
 80258f0:	08030740 	.word	0x08030740
 80258f4:	080302ec 	.word	0x080302ec
 80258f8:	08030328 	.word	0x08030328
 80258fc:	080303a4 	.word	0x080303a4
 8025900:	08030318 	.word	0x08030318
 8025904:	2401d0fc 	.word	0x2401d0fc
 8025908:	080254cd 	.word	0x080254cd
 802590c:	08030748 	.word	0x08030748
 8025910:	080306cc 	.word	0x080306cc

08025914 <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 8025914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025918:	b093      	sub	sp, #76	@ 0x4c
 802591a:	af02      	add	r7, sp, #8
 802591c:	6178      	str	r0, [r7, #20]
 802591e:	6139      	str	r1, [r7, #16]
 8025920:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 8025922:	68fb      	ldr	r3, [r7, #12]
 8025924:	681b      	ldr	r3, [r3, #0]
 8025926:	1d19      	adds	r1, r3, #4
 8025928:	68fa      	ldr	r2, [r7, #12]
 802592a:	6011      	str	r1, [r2, #0]
 802592c:	681b      	ldr	r3, [r3, #0]
 802592e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 8025930:	68fb      	ldr	r3, [r7, #12]
 8025932:	681b      	ldr	r3, [r3, #0]
 8025934:	1d19      	adds	r1, r3, #4
 8025936:	68fa      	ldr	r2, [r7, #12]
 8025938:	6011      	str	r1, [r2, #0]
 802593a:	681b      	ldr	r3, [r3, #0]
 802593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025940:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 8025944:	68fb      	ldr	r3, [r7, #12]
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	1d19      	adds	r1, r3, #4
 802594a:	68fa      	ldr	r2, [r7, #12]
 802594c:	6011      	str	r1, [r2, #0]
 802594e:	681b      	ldr	r3, [r3, #0]
 8025950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025954:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 8025958:	2314      	movs	r3, #20
 802595a:	61fb      	str	r3, [r7, #28]
 802595c:	2300      	movs	r3, #0
 802595e:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 8025960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025962:	69db      	ldr	r3, [r3, #28]
 8025964:	4619      	mov	r1, r3
 8025966:	2001      	movs	r0, #1
 8025968:	f000 ff50 	bl	802680c <calloc>
 802596c:	4603      	mov	r3, r0
 802596e:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 8025970:	2300      	movs	r3, #0
 8025972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8025974:	e02f      	b.n	80259d6 <print_array+0xc2>
    ha->getter(start + i, data);
 8025976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025978:	6a1e      	ldr	r6, [r3, #32]
 802597a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802597c:	2200      	movs	r2, #0
 802597e:	469a      	mov	sl, r3
 8025980:	4693      	mov	fp, r2
 8025982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025986:	eb1a 0102 	adds.w	r1, sl, r2
 802598a:	6039      	str	r1, [r7, #0]
 802598c:	eb4b 0303 	adc.w	r3, fp, r3
 8025990:	607b      	str	r3, [r7, #4]
 8025992:	69ba      	ldr	r2, [r7, #24]
 8025994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8025998:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 802599a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802599c:	2b00      	cmp	r3, #0
 802599e:	d008      	beq.n	80259b2 <print_array+0x9e>
 80259a0:	4a1b      	ldr	r2, [pc, #108]	@ (8025a10 <print_array+0xfc>)
 80259a2:	6939      	ldr	r1, [r7, #16]
 80259a4:	6978      	ldr	r0, [r7, #20]
 80259a6:	f7e4 fe50 	bl	800a64a <mg_xprintf>
 80259aa:	4602      	mov	r2, r0
 80259ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80259ae:	4413      	add	r3, r2
 80259b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 80259b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80259b4:	699b      	ldr	r3, [r3, #24]
 80259b6:	69ba      	ldr	r2, [r7, #24]
 80259b8:	9201      	str	r2, [sp, #4]
 80259ba:	9300      	str	r3, [sp, #0]
 80259bc:	4b15      	ldr	r3, [pc, #84]	@ (8025a14 <print_array+0x100>)
 80259be:	4a16      	ldr	r2, [pc, #88]	@ (8025a18 <print_array+0x104>)
 80259c0:	6939      	ldr	r1, [r7, #16]
 80259c2:	6978      	ldr	r0, [r7, #20]
 80259c4:	f7e4 fe41 	bl	800a64a <mg_xprintf>
 80259c8:	4602      	mov	r2, r0
 80259ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80259cc:	4413      	add	r3, r2
 80259ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 80259d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80259d2:	3301      	adds	r3, #1
 80259d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80259d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80259d8:	69fb      	ldr	r3, [r7, #28]
 80259da:	429a      	cmp	r2, r3
 80259dc:	d20f      	bcs.n	80259fe <print_array+0xea>
 80259de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80259e0:	2200      	movs	r2, #0
 80259e2:	4698      	mov	r8, r3
 80259e4:	4691      	mov	r9, r2
 80259e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80259ea:	eb18 0402 	adds.w	r4, r8, r2
 80259ee:	eb49 0503 	adc.w	r5, r9, r3
 80259f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80259f6:	4294      	cmp	r4, r2
 80259f8:	eb75 0303 	sbcs.w	r3, r5, r3
 80259fc:	d3bb      	bcc.n	8025976 <print_array+0x62>
  }
  free(data);
 80259fe:	69b8      	ldr	r0, [r7, #24]
 8025a00:	f000 ff28 	bl	8026854 <free>
  return len;
 8025a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8025a06:	4618      	mov	r0, r3
 8025a08:	3744      	adds	r7, #68	@ 0x44
 8025a0a:	46bd      	mov	sp, r7
 8025a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a10:	08030720 	.word	0x08030720
 8025a14:	080254cd 	.word	0x080254cd
 8025a18:	08030750 	.word	0x08030750

08025a1c <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 8025a1c:	b590      	push	{r4, r7, lr}
 8025a1e:	b0a9      	sub	sp, #164	@ 0xa4
 8025a20:	af14      	add	r7, sp, #80	@ 0x50
 8025a22:	60f8      	str	r0, [r7, #12]
 8025a24:	60b9      	str	r1, [r7, #8]
 8025a26:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 8025a28:	f107 0320 	add.w	r3, r7, #32
 8025a2c:	2228      	movs	r2, #40	@ 0x28
 8025a2e:	2100      	movs	r1, #0
 8025a30:	4618      	mov	r0, r3
 8025a32:	f002 feb5 	bl	80287a0 <memset>
  uint64_t size = h->sizer();
 8025a36:	687b      	ldr	r3, [r7, #4]
 8025a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025a3a:	4798      	blx	r3
 8025a3c:	4602      	mov	r2, r0
 8025a3e:	460b      	mov	r3, r1
 8025a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 8025a44:	f04f 0200 	mov.w	r2, #0
 8025a48:	f04f 0300 	mov.w	r3, #0
 8025a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 8025a50:	68bb      	ldr	r3, [r7, #8]
 8025a52:	f103 0010 	add.w	r0, r3, #16
 8025a56:	f107 0220 	add.w	r2, r7, #32
 8025a5a:	2328      	movs	r3, #40	@ 0x28
 8025a5c:	4927      	ldr	r1, [pc, #156]	@ (8025afc <handle_array+0xe0>)
 8025a5e:	f7e5 fd1f 	bl	800b4a0 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 8025a62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8025a66:	f107 0220 	add.w	r2, r7, #32
 8025a6a:	4611      	mov	r1, r2
 8025a6c:	4618      	mov	r0, r3
 8025a6e:	f7f1 fe69 	bl	8017744 <mg_str_s>
 8025a72:	f107 0310 	add.w	r3, r7, #16
 8025a76:	2208      	movs	r2, #8
 8025a78:	9200      	str	r2, [sp, #0]
 8025a7a:	220a      	movs	r2, #10
 8025a7c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8025a80:	c903      	ldmia	r1, {r0, r1}
 8025a82:	f7f2 f8ba 	bl	8017bfa <mg_str_to_num>
 8025a86:	4603      	mov	r3, r0
 8025a88:	f083 0301 	eor.w	r3, r3, #1
 8025a8c:	b2db      	uxtb	r3, r3
 8025a8e:	2b00      	cmp	r3, #0
 8025a90:	d005      	beq.n	8025a9e <handle_array+0x82>
 8025a92:	f04f 0200 	mov.w	r2, #0
 8025a96:	f04f 0300 	mov.w	r3, #0
 8025a9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 8025a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8025aa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8025aa6:	f107 0410 	add.w	r4, r7, #16
 8025aaa:	9412      	str	r4, [sp, #72]	@ 0x48
 8025aac:	f107 0418 	add.w	r4, r7, #24
 8025ab0:	9411      	str	r4, [sp, #68]	@ 0x44
 8025ab2:	687c      	ldr	r4, [r7, #4]
 8025ab4:	9410      	str	r4, [sp, #64]	@ 0x40
 8025ab6:	4c12      	ldr	r4, [pc, #72]	@ (8025b00 <handle_array+0xe4>)
 8025ab8:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025aba:	4c12      	ldr	r4, [pc, #72]	@ (8025b04 <handle_array+0xe8>)
 8025abc:	940e      	str	r4, [sp, #56]	@ 0x38
 8025abe:	2400      	movs	r4, #0
 8025ac0:	940d      	str	r4, [sp, #52]	@ 0x34
 8025ac2:	4c11      	ldr	r4, [pc, #68]	@ (8025b08 <handle_array+0xec>)
 8025ac4:	940c      	str	r4, [sp, #48]	@ 0x30
 8025ac6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8025aca:	490c      	ldr	r1, [pc, #48]	@ (8025afc <handle_array+0xe0>)
 8025acc:	9108      	str	r1, [sp, #32]
 8025ace:	2100      	movs	r1, #0
 8025ad0:	9107      	str	r1, [sp, #28]
 8025ad2:	490d      	ldr	r1, [pc, #52]	@ (8025b08 <handle_array+0xec>)
 8025ad4:	9106      	str	r1, [sp, #24]
 8025ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8025ada:	4b0c      	ldr	r3, [pc, #48]	@ (8025b0c <handle_array+0xf0>)
 8025adc:	9302      	str	r3, [sp, #8]
 8025ade:	2300      	movs	r3, #0
 8025ae0:	9301      	str	r3, [sp, #4]
 8025ae2:	4b09      	ldr	r3, [pc, #36]	@ (8025b08 <handle_array+0xec>)
 8025ae4:	9300      	str	r3, [sp, #0]
 8025ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8025b10 <handle_array+0xf4>)
 8025ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8025b14 <handle_array+0xf8>)
 8025aea:	21c8      	movs	r1, #200	@ 0xc8
 8025aec:	68f8      	ldr	r0, [r7, #12]
 8025aee:	f7e6 feb5 	bl	800c85c <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 8025af2:	bf00      	nop
 8025af4:	3754      	adds	r7, #84	@ 0x54
 8025af6:	46bd      	mov	sp, r7
 8025af8:	bd90      	pop	{r4, r7, pc}
 8025afa:	bf00      	nop
 8025afc:	08030758 	.word	0x08030758
 8025b00:	08025915 	.word	0x08025915
 8025b04:	08030448 	.word	0x08030448
 8025b08:	08014449 	.word	0x08014449
 8025b0c:	08030780 	.word	0x08030780
 8025b10:	08030760 	.word	0x08030760
 8025b14:	080306cc 	.word	0x080306cc

08025b18 <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 8025b18:	b580      	push	{r7, lr}
 8025b1a:	b09e      	sub	sp, #120	@ 0x78
 8025b1c:	af00      	add	r7, sp, #0
 8025b1e:	60f8      	str	r0, [r7, #12]
 8025b20:	60b9      	str	r1, [r7, #8]
 8025b22:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8025b24:	f107 0214 	add.w	r2, r7, #20
 8025b28:	68b9      	ldr	r1, [r7, #8]
 8025b2a:	2364      	movs	r3, #100	@ 0x64
 8025b2c:	3108      	adds	r1, #8
 8025b2e:	c903      	ldmia	r1, {r0, r1}
 8025b30:	f7ff fb62 	bl	80251f8 <get_file_name_from_uri>
  hf->server(c, hm, path);
 8025b34:	687b      	ldr	r3, [r7, #4]
 8025b36:	69db      	ldr	r3, [r3, #28]
 8025b38:	f107 0214 	add.w	r2, r7, #20
 8025b3c:	68b9      	ldr	r1, [r7, #8]
 8025b3e:	68f8      	ldr	r0, [r7, #12]
 8025b40:	4798      	blx	r3
}
 8025b42:	bf00      	nop
 8025b44:	3778      	adds	r7, #120	@ 0x78
 8025b46:	46bd      	mov	sp, r7
 8025b48:	bd80      	pop	{r7, pc}
	...

08025b4c <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 8025b4c:	b580      	push	{r7, lr}
 8025b4e:	b088      	sub	sp, #32
 8025b50:	af02      	add	r7, sp, #8
 8025b52:	60f8      	str	r0, [r7, #12]
 8025b54:	60b9      	str	r1, [r7, #8]
 8025b56:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 8025b58:	687b      	ldr	r3, [r7, #4]
 8025b5a:	685b      	ldr	r3, [r3, #4]
 8025b5c:	4932      	ldr	r1, [pc, #200]	@ (8025c28 <handle_api_call+0xdc>)
 8025b5e:	4618      	mov	r0, r3
 8025b60:	f7da fbd6 	bl	8000310 <strcmp>
 8025b64:	4603      	mov	r3, r0
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	d008      	beq.n	8025b7c <handle_api_call+0x30>
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	685b      	ldr	r3, [r3, #4]
 8025b6e:	492f      	ldr	r1, [pc, #188]	@ (8025c2c <handle_api_call+0xe0>)
 8025b70:	4618      	mov	r0, r3
 8025b72:	f7da fbcd 	bl	8000310 <strcmp>
 8025b76:	4603      	mov	r3, r0
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	d105      	bne.n	8025b88 <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 8025b7c:	687a      	ldr	r2, [r7, #4]
 8025b7e:	68b9      	ldr	r1, [r7, #8]
 8025b80:	68f8      	ldr	r0, [r7, #12]
 8025b82:	f7ff fdab 	bl	80256dc <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 8025b86:	e04a      	b.n	8025c1e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 8025b88:	687b      	ldr	r3, [r7, #4]
 8025b8a:	685b      	ldr	r3, [r3, #4]
 8025b8c:	4928      	ldr	r1, [pc, #160]	@ (8025c30 <handle_api_call+0xe4>)
 8025b8e:	4618      	mov	r0, r3
 8025b90:	f7da fbbe 	bl	8000310 <strcmp>
 8025b94:	4603      	mov	r3, r0
 8025b96:	2b00      	cmp	r3, #0
 8025b98:	d105      	bne.n	8025ba6 <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 8025b9a:	687a      	ldr	r2, [r7, #4]
 8025b9c:	68b9      	ldr	r1, [r7, #8]
 8025b9e:	68f8      	ldr	r0, [r7, #12]
 8025ba0:	f7ff ff3c 	bl	8025a1c <handle_array>
}
 8025ba4:	e03b      	b.n	8025c1e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	685b      	ldr	r3, [r3, #4]
 8025baa:	4922      	ldr	r1, [pc, #136]	@ (8025c34 <handle_api_call+0xe8>)
 8025bac:	4618      	mov	r0, r3
 8025bae:	f7da fbaf 	bl	8000310 <strcmp>
 8025bb2:	4603      	mov	r3, r0
 8025bb4:	2b00      	cmp	r3, #0
 8025bb6:	d10a      	bne.n	8025bce <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 8025bb8:	687b      	ldr	r3, [r7, #4]
 8025bba:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 8025bbc:	697b      	ldr	r3, [r7, #20]
 8025bbe:	699a      	ldr	r2, [r3, #24]
 8025bc0:	697b      	ldr	r3, [r7, #20]
 8025bc2:	69db      	ldr	r3, [r3, #28]
 8025bc4:	68b9      	ldr	r1, [r7, #8]
 8025bc6:	68f8      	ldr	r0, [r7, #12]
 8025bc8:	f7ff fc3c 	bl	8025444 <handle_action>
}
 8025bcc:	e027      	b.n	8025c1e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	685b      	ldr	r3, [r3, #4]
 8025bd2:	4919      	ldr	r1, [pc, #100]	@ (8025c38 <handle_api_call+0xec>)
 8025bd4:	4618      	mov	r0, r3
 8025bd6:	f7da fb9b 	bl	8000310 <strcmp>
 8025bda:	4603      	mov	r3, r0
 8025bdc:	2b00      	cmp	r3, #0
 8025bde:	d105      	bne.n	8025bec <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 8025be0:	687a      	ldr	r2, [r7, #4]
 8025be2:	68b9      	ldr	r1, [r7, #8]
 8025be4:	68f8      	ldr	r0, [r7, #12]
 8025be6:	f7ff ff97 	bl	8025b18 <handle_file>
}
 8025bea:	e018      	b.n	8025c1e <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 8025bec:	687b      	ldr	r3, [r7, #4]
 8025bee:	685b      	ldr	r3, [r3, #4]
 8025bf0:	4912      	ldr	r1, [pc, #72]	@ (8025c3c <handle_api_call+0xf0>)
 8025bf2:	4618      	mov	r0, r3
 8025bf4:	f7da fb8c 	bl	8000310 <strcmp>
 8025bf8:	4603      	mov	r3, r0
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	d105      	bne.n	8025c0a <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	699b      	ldr	r3, [r3, #24]
 8025c02:	68b9      	ldr	r1, [r7, #8]
 8025c04:	68f8      	ldr	r0, [r7, #12]
 8025c06:	4798      	blx	r3
}
 8025c08:	e009      	b.n	8025c1e <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 8025c0a:	687b      	ldr	r3, [r7, #4]
 8025c0c:	685b      	ldr	r3, [r3, #4]
 8025c0e:	9300      	str	r3, [sp, #0]
 8025c10:	4b0b      	ldr	r3, [pc, #44]	@ (8025c40 <handle_api_call+0xf4>)
 8025c12:	4a0c      	ldr	r2, [pc, #48]	@ (8025c44 <handle_api_call+0xf8>)
 8025c14:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8025c18:	68f8      	ldr	r0, [r7, #12]
 8025c1a:	f7e6 fe1f 	bl	800c85c <mg_http_reply>
}
 8025c1e:	bf00      	nop
 8025c20:	3718      	adds	r7, #24
 8025c22:	46bd      	mov	sp, r7
 8025c24:	bd80      	pop	{r7, pc}
 8025c26:	bf00      	nop
 8025c28:	08030794 	.word	0x08030794
 8025c2c:	08030448 	.word	0x08030448
 8025c30:	0803079c 	.word	0x0803079c
 8025c34:	080303f0 	.word	0x080303f0
 8025c38:	080304d4 	.word	0x080304d4
 8025c3c:	08030438 	.word	0x08030438
 8025c40:	080307a4 	.word	0x080307a4
 8025c44:	080306cc 	.word	0x080306cc

08025c48 <glue_update_state>:

void glue_update_state(void) {
 8025c48:	b480      	push	{r7}
 8025c4a:	af00      	add	r7, sp, #0
  s_device_change_version++;
 8025c4c:	4b04      	ldr	r3, [pc, #16]	@ (8025c60 <glue_update_state+0x18>)
 8025c4e:	681b      	ldr	r3, [r3, #0]
 8025c50:	3301      	adds	r3, #1
 8025c52:	4a03      	ldr	r2, [pc, #12]	@ (8025c60 <glue_update_state+0x18>)
 8025c54:	6013      	str	r3, [r2, #0]
}
 8025c56:	bf00      	nop
 8025c58:	46bd      	mov	sp, r7
 8025c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c5e:	4770      	bx	lr
 8025c60:	2401d0fc 	.word	0x2401d0fc

08025c64 <http_ev_handler>:

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8025c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c66:	b0b5      	sub	sp, #212	@ 0xd4
 8025c68:	af06      	add	r7, sp, #24
 8025c6a:	61f8      	str	r0, [r7, #28]
 8025c6c:	61b9      	str	r1, [r7, #24]
 8025c6e:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 8025c70:	69bb      	ldr	r3, [r7, #24]
 8025c72:	2b0a      	cmp	r3, #10
 8025c74:	d164      	bne.n	8025d40 <http_ev_handler+0xdc>
 8025c76:	69fb      	ldr	r3, [r7, #28]
 8025c78:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8025c7c:	2b00      	cmp	r3, #0
 8025c7e:	d15f      	bne.n	8025d40 <http_ev_handler+0xdc>
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8025c80:	697b      	ldr	r3, [r7, #20]
 8025c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8025c86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8025c8a:	49b4      	ldr	r1, [pc, #720]	@ (8025f5c <http_ev_handler+0x2f8>)
 8025c8c:	4618      	mov	r0, r3
 8025c8e:	f7f1 fd59 	bl	8017744 <mg_str_s>
 8025c92:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8025c96:	2300      	movs	r3, #0
 8025c98:	9300      	str	r3, [sp, #0]
 8025c9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8025c9e:	cb0c      	ldmia	r3, {r2, r3}
 8025ca0:	3108      	adds	r1, #8
 8025ca2:	c903      	ldmia	r1, {r0, r1}
 8025ca4:	f7f1 fe58 	bl	8017958 <mg_match>
 8025ca8:	4603      	mov	r3, r0
 8025caa:	2b00      	cmp	r3, #0
 8025cac:	d113      	bne.n	8025cd6 <http_ev_handler+0x72>
        mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8025cae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8025cb2:	49ab      	ldr	r1, [pc, #684]	@ (8025f60 <http_ev_handler+0x2fc>)
 8025cb4:	4618      	mov	r0, r3
 8025cb6:	f7f1 fd45 	bl	8017744 <mg_str_s>
 8025cba:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8025cbe:	2300      	movs	r3, #0
 8025cc0:	9300      	str	r3, [sp, #0]
 8025cc2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8025cc6:	cb0c      	ldmia	r3, {r2, r3}
 8025cc8:	3108      	adds	r1, #8
 8025cca:	c903      	ldmia	r1, {r0, r1}
 8025ccc:	f7f1 fe44 	bl	8017958 <mg_match>
 8025cd0:	4603      	mov	r3, r0
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8025cd2:	2b00      	cmp	r3, #0
 8025cd4:	d034      	beq.n	8025d40 <http_ev_handler+0xdc>
      struct apihandler *h = find_handler(hm);
 8025cd6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8025cda:	f7fe ff57 	bl	8024b8c <find_handler>
 8025cde:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
      struct user *u = authenticate(hm);
 8025ce2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8025ce6:	f7fe ffa9 	bl	8024c3c <authenticate>
 8025cea:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      if ((u == NULL ||
 8025cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	d019      	beq.n	8025d2a <http_ev_handler+0xc6>
 8025cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8025cfa:	2b00      	cmp	r3, #0
 8025cfc:	d020      	beq.n	8025d40 <http_ev_handler+0xdc>
           (h != NULL && (u->level < h->read_level ||
 8025cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8025d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8025d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8025d08:	68db      	ldr	r3, [r3, #12]
 8025d0a:	429a      	cmp	r2, r3
 8025d0c:	db0d      	blt.n	8025d2a <http_ev_handler+0xc6>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8025d0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8025d12:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
           (h != NULL && (u->level < h->read_level ||
 8025d16:	2b00      	cmp	r3, #0
 8025d18:	d012      	beq.n	8025d40 <http_ev_handler+0xdc>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8025d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8025d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8025d20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8025d24:	691b      	ldr	r3, [r3, #16]
 8025d26:	429a      	cmp	r2, r3
 8025d28:	da0a      	bge.n	8025d40 <http_ev_handler+0xdc>
        mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8025d2a:	4b8e      	ldr	r3, [pc, #568]	@ (8025f64 <http_ev_handler+0x300>)
 8025d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8025f68 <http_ev_handler+0x304>)
 8025d2e:	f240 1193 	movw	r1, #403	@ 0x193
 8025d32:	69f8      	ldr	r0, [r7, #28]
 8025d34:	f7e6 fd92 	bl	800c85c <mg_http_reply>
        c->data[0] = 'Z';  // Mark this connection as handled
 8025d38:	69fb      	ldr	r3, [r7, #28]
 8025d3a:	225a      	movs	r2, #90	@ 0x5a
 8025d3c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 8025d40:	69fb      	ldr	r3, [r7, #28]
 8025d42:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8025d46:	f003 0302 	and.w	r3, r3, #2
 8025d4a:	b2db      	uxtb	r3, r3
 8025d4c:	2b00      	cmp	r3, #0
 8025d4e:	d104      	bne.n	8025d5a <http_ev_handler+0xf6>
 8025d50:	697a      	ldr	r2, [r7, #20]
 8025d52:	69b9      	ldr	r1, [r7, #24]
 8025d54:	69f8      	ldr	r0, [r7, #28]
 8025d56:	f7ff fb03 	bl	8025360 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8025d5a:	69bb      	ldr	r3, [r7, #24]
 8025d5c:	2b02      	cmp	r3, #2
 8025d5e:	d128      	bne.n	8025db2 <http_ev_handler+0x14e>
 8025d60:	69fb      	ldr	r3, [r7, #28]
 8025d62:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8025d66:	f003 0302 	and.w	r3, r3, #2
 8025d6a:	b2db      	uxtb	r3, r3
 8025d6c:	2b00      	cmp	r3, #0
 8025d6e:	d120      	bne.n	8025db2 <http_ev_handler+0x14e>
 8025d70:	69fb      	ldr	r3, [r7, #28]
 8025d72:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8025d76:	2b41      	cmp	r3, #65	@ 0x41
 8025d78:	d11b      	bne.n	8025db2 <http_ev_handler+0x14e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 8025d7a:	69fb      	ldr	r3, [r7, #28]
 8025d7c:	3388      	adds	r3, #136	@ 0x88
 8025d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (as->fn() == false) {
 8025d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8025d86:	685b      	ldr	r3, [r3, #4]
 8025d88:	4798      	blx	r3
 8025d8a:	4603      	mov	r3, r0
 8025d8c:	f083 0301 	eor.w	r3, r3, #1
 8025d90:	b2db      	uxtb	r3, r3
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	f000 813b 	beq.w	802600e <http_ev_handler+0x3aa>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8025d98:	4b74      	ldr	r3, [pc, #464]	@ (8025f6c <http_ev_handler+0x308>)
 8025d9a:	4a73      	ldr	r2, [pc, #460]	@ (8025f68 <http_ev_handler+0x304>)
 8025d9c:	21c8      	movs	r1, #200	@ 0xc8
 8025d9e:	69f8      	ldr	r0, [r7, #28]
 8025da0:	f7e6 fd5c 	bl	800c85c <mg_http_reply>
      memset(as, 0, sizeof(*as));
 8025da4:	2208      	movs	r2, #8
 8025da6:	2100      	movs	r1, #0
 8025da8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8025dac:	f002 fcf8 	bl	80287a0 <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8025db0:	e12d      	b.n	802600e <http_ev_handler+0x3aa>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025db2:	69bb      	ldr	r3, [r7, #24]
 8025db4:	2b0b      	cmp	r3, #11
 8025db6:	f040 80f3 	bne.w	8025fa0 <http_ev_handler+0x33c>
 8025dba:	69fb      	ldr	r3, [r7, #28]
 8025dbc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8025dc0:	f003 0302 	and.w	r3, r3, #2
 8025dc4:	b2db      	uxtb	r3, r3
 8025dc6:	2b00      	cmp	r3, #0
 8025dc8:	f040 80ea 	bne.w	8025fa0 <http_ev_handler+0x33c>
 8025dcc:	69fb      	ldr	r3, [r7, #28]
 8025dce:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	f040 80e4 	bne.w	8025fa0 <http_ev_handler+0x33c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8025dd8:	697b      	ldr	r3, [r7, #20]
 8025dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 8025dde:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8025de2:	f7fe fed3 	bl	8024b8c <find_handler>
 8025de6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8025dea:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8025dee:	f7fe ff25 	bl	8024c3c <authenticate>
 8025df2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8025df6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8025dfa:	495d      	ldr	r1, [pc, #372]	@ (8025f70 <http_ev_handler+0x30c>)
 8025dfc:	4618      	mov	r0, r3
 8025dfe:	f7f1 fca1 	bl	8017744 <mg_str_s>
 8025e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025e06:	2300      	movs	r3, #0
 8025e08:	9300      	str	r3, [sp, #0]
 8025e0a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8025e0e:	cb0c      	ldmia	r3, {r2, r3}
 8025e10:	3108      	adds	r1, #8
 8025e12:	c903      	ldmia	r1, {r0, r1}
 8025e14:	f7f1 fda0 	bl	8017958 <mg_match>
 8025e18:	4603      	mov	r3, r0
 8025e1a:	2b00      	cmp	r3, #0
 8025e1c:	d005      	beq.n	8025e2a <http_ev_handler+0x1c6>
      handle_login(c, u);
 8025e1e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8025e22:	69f8      	ldr	r0, [r7, #28]
 8025e24:	f7fe ffee 	bl	8024e04 <handle_login>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025e28:	e0f3      	b.n	8026012 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8025e2a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8025e2e:	4951      	ldr	r1, [pc, #324]	@ (8025f74 <http_ev_handler+0x310>)
 8025e30:	4618      	mov	r0, r3
 8025e32:	f7f1 fc87 	bl	8017744 <mg_str_s>
 8025e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025e3a:	2300      	movs	r3, #0
 8025e3c:	9300      	str	r3, [sp, #0]
 8025e3e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8025e42:	cb0c      	ldmia	r3, {r2, r3}
 8025e44:	3108      	adds	r1, #8
 8025e46:	c903      	ldmia	r1, {r0, r1}
 8025e48:	f7f1 fd86 	bl	8017958 <mg_match>
 8025e4c:	4603      	mov	r3, r0
 8025e4e:	2b00      	cmp	r3, #0
 8025e50:	d003      	beq.n	8025e5a <http_ev_handler+0x1f6>
      handle_logout(c);
 8025e52:	69f8      	ldr	r0, [r7, #28]
 8025e54:	f7ff f844 	bl	8024ee0 <handle_logout>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025e58:	e0db      	b.n	8026012 <http_ev_handler+0x3ae>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 8025e5a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8025e5e:	4946      	ldr	r1, [pc, #280]	@ (8025f78 <http_ev_handler+0x314>)
 8025e60:	4618      	mov	r0, r3
 8025e62:	f7f1 fc6f 	bl	8017744 <mg_str_s>
 8025e66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025e6a:	2300      	movs	r3, #0
 8025e6c:	9300      	str	r3, [sp, #0]
 8025e6e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8025e72:	cb0c      	ldmia	r3, {r2, r3}
 8025e74:	3108      	adds	r1, #8
 8025e76:	c903      	ldmia	r1, {r0, r1}
 8025e78:	f7f1 fd6e 	bl	8017958 <mg_match>
 8025e7c:	4603      	mov	r3, r0
 8025e7e:	2b00      	cmp	r3, #0
 8025e80:	d006      	beq.n	8025e90 <http_ev_handler+0x22c>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 8025e82:	4b3e      	ldr	r3, [pc, #248]	@ (8025f7c <http_ev_handler+0x318>)
 8025e84:	4a38      	ldr	r2, [pc, #224]	@ (8025f68 <http_ev_handler+0x304>)
 8025e86:	21c8      	movs	r1, #200	@ 0xc8
 8025e88:	69f8      	ldr	r0, [r7, #28]
 8025e8a:	f7e6 fce7 	bl	800c85c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025e8e:	e0c0      	b.n	8026012 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8025e90:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8025e94:	4932      	ldr	r1, [pc, #200]	@ (8025f60 <http_ev_handler+0x2fc>)
 8025e96:	4618      	mov	r0, r3
 8025e98:	f7f1 fc54 	bl	8017744 <mg_str_s>
 8025e9c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025ea0:	2300      	movs	r3, #0
 8025ea2:	9300      	str	r3, [sp, #0]
 8025ea4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8025ea8:	cb0c      	ldmia	r3, {r2, r3}
 8025eaa:	3108      	adds	r1, #8
 8025eac:	c903      	ldmia	r1, {r0, r1}
 8025eae:	f7f1 fd53 	bl	8017958 <mg_match>
 8025eb2:	4603      	mov	r3, r0
 8025eb4:	2b00      	cmp	r3, #0
 8025eb6:	d006      	beq.n	8025ec6 <http_ev_handler+0x262>
      mg_ws_upgrade(c, hm, NULL);
 8025eb8:	2200      	movs	r2, #0
 8025eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025ebe:	69f8      	ldr	r0, [r7, #28]
 8025ec0:	f7fd fb2e 	bl	8023520 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025ec4:	e0a5      	b.n	8026012 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 8025ec6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8025eca:	492d      	ldr	r1, [pc, #180]	@ (8025f80 <http_ev_handler+0x31c>)
 8025ecc:	4618      	mov	r0, r3
 8025ece:	f7f1 fc39 	bl	8017744 <mg_str_s>
 8025ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025ed6:	2300      	movs	r3, #0
 8025ed8:	9300      	str	r3, [sp, #0]
 8025eda:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8025ede:	cb0c      	ldmia	r3, {r2, r3}
 8025ee0:	3108      	adds	r1, #8
 8025ee2:	c903      	ldmia	r1, {r0, r1}
 8025ee4:	f7f1 fd38 	bl	8017958 <mg_match>
 8025ee8:	4603      	mov	r3, r0
 8025eea:	2b00      	cmp	r3, #0
 8025eec:	d00f      	beq.n	8025f0e <http_ev_handler+0x2aa>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 8025eee:	4b25      	ldr	r3, [pc, #148]	@ (8025f84 <http_ev_handler+0x320>)
 8025ef0:	681b      	ldr	r3, [r3, #0]
 8025ef2:	9303      	str	r3, [sp, #12]
 8025ef4:	4b24      	ldr	r3, [pc, #144]	@ (8025f88 <http_ev_handler+0x324>)
 8025ef6:	9302      	str	r3, [sp, #8]
 8025ef8:	2300      	movs	r3, #0
 8025efa:	9301      	str	r3, [sp, #4]
 8025efc:	4b23      	ldr	r3, [pc, #140]	@ (8025f8c <http_ev_handler+0x328>)
 8025efe:	9300      	str	r3, [sp, #0]
 8025f00:	4b23      	ldr	r3, [pc, #140]	@ (8025f90 <http_ev_handler+0x32c>)
 8025f02:	4a19      	ldr	r2, [pc, #100]	@ (8025f68 <http_ev_handler+0x304>)
 8025f04:	21c8      	movs	r1, #200	@ 0xc8
 8025f06:	69f8      	ldr	r0, [r7, #28]
 8025f08:	f7e6 fca8 	bl	800c85c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025f0c:	e081      	b.n	8026012 <http_ev_handler+0x3ae>
                    s_device_change_version);
    } else if (h != NULL) {
 8025f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	d007      	beq.n	8025f26 <http_ev_handler+0x2c2>
      handle_api_call(c, hm, h);
 8025f16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8025f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025f1e:	69f8      	ldr	r0, [r7, #28]
 8025f20:	f7ff fe14 	bl	8025b4c <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025f24:	e075      	b.n	8026012 <http_ev_handler+0x3ae>
    } else if (c->data[0] == 0)
 8025f26:	69fb      	ldr	r3, [r7, #28]
 8025f28:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8025f2c:	2b00      	cmp	r3, #0
 8025f2e:	d170      	bne.n	8026012 <http_ev_handler+0x3ae>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8025f30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8025f34:	2218      	movs	r2, #24
 8025f36:	2100      	movs	r1, #0
 8025f38:	4618      	mov	r0, r3
 8025f3a:	f002 fc31 	bl	80287a0 <memset>
      opts.root_dir = "/web_root/";
 8025f3e:	4b15      	ldr	r3, [pc, #84]	@ (8025f94 <http_ev_handler+0x330>)
 8025f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 8025f42:	4b15      	ldr	r3, [pc, #84]	@ (8025f98 <http_ev_handler+0x334>)
 8025f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 8025f46:	4b15      	ldr	r3, [pc, #84]	@ (8025f9c <http_ev_handler+0x338>)
 8025f48:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 8025f4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8025f4e:	461a      	mov	r2, r3
 8025f50:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8025f54:	69f8      	ldr	r0, [r7, #28]
 8025f56:	f7e7 fb93 	bl	800d680 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8025f5a:	e05a      	b.n	8026012 <http_ev_handler+0x3ae>
 8025f5c:	080307bc 	.word	0x080307bc
 8025f60:	080307c4 	.word	0x080307c4
 8025f64:	080307d0 	.word	0x080307d0
 8025f68:	080306cc 	.word	0x080306cc
 8025f6c:	08030718 	.word	0x08030718
 8025f70:	080307e0 	.word	0x080307e0
 8025f74:	080307ec 	.word	0x080307ec
 8025f78:	080307f8 	.word	0x080307f8
 8025f7c:	08030800 	.word	0x08030800
 8025f80:	08030808 	.word	0x08030808
 8025f84:	2401d0fc 	.word	0x2401d0fc
 8025f88:	08030310 	.word	0x08030310
 8025f8c:	08014449 	.word	0x08014449
 8025f90:	08030818 	.word	0x08030818
 8025f94:	08030824 	.word	0x08030824
 8025f98:	24000014 	.word	0x24000014
 8025f9c:	08030830 	.word	0x08030830
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 8025fa0:	69bb      	ldr	r3, [r7, #24]
 8025fa2:	2b0d      	cmp	r3, #13
 8025fa4:	d036      	beq.n	8026014 <http_ev_handler+0x3b0>
 8025fa6:	69bb      	ldr	r3, [r7, #24]
 8025fa8:	2b0e      	cmp	r3, #14
 8025faa:	d033      	beq.n	8026014 <http_ev_handler+0x3b0>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 8025fac:	69bb      	ldr	r3, [r7, #24]
 8025fae:	2b05      	cmp	r3, #5
 8025fb0:	d130      	bne.n	8026014 <http_ev_handler+0x3b0>
    if (c->fn_data != NULL) {  // TLS listener
 8025fb2:	69fb      	ldr	r3, [r7, #28]
 8025fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8025fb6:	2b00      	cmp	r3, #0
 8025fb8:	d02c      	beq.n	8026014 <http_ev_handler+0x3b0>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 8025fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8025fbe:	2224      	movs	r2, #36	@ 0x24
 8025fc0:	2100      	movs	r1, #0
 8025fc2:	4618      	mov	r0, r3
 8025fc4:	f002 fbec 	bl	80287a0 <memset>
      opts.cert = mg_str(TLS_CERT);
 8025fc8:	f107 0308 	add.w	r3, r7, #8
 8025fcc:	493a      	ldr	r1, [pc, #232]	@ (80260b8 <http_ev_handler+0x454>)
 8025fce:	4618      	mov	r0, r3
 8025fd0:	f7f1 fbb8 	bl	8017744 <mg_str_s>
 8025fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8025fd8:	f107 0208 	add.w	r2, r7, #8
 8025fdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025fe0:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 8025fe4:	f107 0308 	add.w	r3, r7, #8
 8025fe8:	4934      	ldr	r1, [pc, #208]	@ (80260bc <http_ev_handler+0x458>)
 8025fea:	4618      	mov	r0, r3
 8025fec:	f7f1 fbaa 	bl	8017744 <mg_str_s>
 8025ff0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8025ff4:	f107 0208 	add.w	r2, r7, #8
 8025ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025ffc:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 8026000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8026004:	4619      	mov	r1, r3
 8026006:	69f8      	ldr	r0, [r7, #28]
 8026008:	f7f5 ff3c 	bl	801be84 <mg_tls_init>
 802600c:	e002      	b.n	8026014 <http_ev_handler+0x3b0>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 802600e:	bf00      	nop
 8026010:	e000      	b.n	8026014 <http_ev_handler+0x3b0>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8026012:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 8026014:	69bb      	ldr	r3, [r7, #24]
 8026016:	2b0b      	cmp	r3, #11
 8026018:	d149      	bne.n	80260ae <http_ev_handler+0x44a>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 802601a:	697b      	ldr	r3, [r7, #20]
 802601c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8026020:	4b27      	ldr	r3, [pc, #156]	@ (80260c0 <http_ev_handler+0x45c>)
 8026022:	681b      	ldr	r3, [r3, #0]
 8026024:	2b02      	cmp	r3, #2
 8026026:	dd32      	ble.n	802608e <http_ev_handler+0x42a>
 8026028:	4b26      	ldr	r3, [pc, #152]	@ (80260c4 <http_ev_handler+0x460>)
 802602a:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 802602e:	4926      	ldr	r1, [pc, #152]	@ (80260c8 <http_ev_handler+0x464>)
 8026030:	2003      	movs	r0, #3
 8026032:	f7e9 fb87 	bl	800f744 <mg_log_prefix>
 8026036:	69fb      	ldr	r3, [r7, #28]
 8026038:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 802603a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802603e:	685b      	ldr	r3, [r3, #4]
 8026040:	607b      	str	r3, [r7, #4]
 8026042:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8026046:	681b      	ldr	r3, [r3, #0]
 8026048:	603b      	str	r3, [r7, #0]
 802604a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802604e:	68db      	ldr	r3, [r3, #12]
 8026050:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8026054:	6892      	ldr	r2, [r2, #8]
 8026056:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 802605a:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 802605e:	69f8      	ldr	r0, [r7, #28]
 8026060:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8026062:	280f      	cmp	r0, #15
 8026064:	d901      	bls.n	802606a <http_ev_handler+0x406>
 8026066:	2003      	movs	r0, #3
 8026068:	e000      	b.n	802606c <http_ev_handler+0x408>
 802606a:	2000      	movs	r0, #0
 802606c:	69fc      	ldr	r4, [r7, #28]
 802606e:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 8026070:	3409      	adds	r4, #9
 8026072:	69fd      	ldr	r5, [r7, #28]
 8026074:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 8026076:	9505      	str	r5, [sp, #20]
 8026078:	9404      	str	r4, [sp, #16]
 802607a:	9003      	str	r0, [sp, #12]
 802607c:	9102      	str	r1, [sp, #8]
 802607e:	9201      	str	r2, [sp, #4]
 8026080:	9300      	str	r3, [sp, #0]
 8026082:	683b      	ldr	r3, [r7, #0]
 8026084:	687a      	ldr	r2, [r7, #4]
 8026086:	4631      	mov	r1, r6
 8026088:	4810      	ldr	r0, [pc, #64]	@ (80260cc <http_ev_handler+0x468>)
 802608a:	f7e9 fbab 	bl	800f7e4 <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 802608e:	69fb      	ldr	r3, [r7, #28]
 8026090:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8026094:	2b5a      	cmp	r3, #90	@ 0x5a
 8026096:	d10a      	bne.n	80260ae <http_ev_handler+0x44a>
      c->data[0] = 0;
 8026098:	69fb      	ldr	r3, [r7, #28]
 802609a:	2200      	movs	r2, #0
 802609c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 80260a0:	69fa      	ldr	r2, [r7, #28]
 80260a2:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80260a6:	f023 0301 	bic.w	r3, r3, #1
 80260aa:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 80260ae:	bf00      	nop
 80260b0:	37bc      	adds	r7, #188	@ 0xbc
 80260b2:	46bd      	mov	sp, r7
 80260b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260b6:	bf00      	nop
 80260b8:	0803084c 	.word	0x0803084c
 80260bc:	08030a28 	.word	0x08030a28
 80260c0:	2400025c 	.word	0x2400025c
 80260c4:	0803e78c 	.word	0x0803e78c
 80260c8:	080304a0 	.word	0x080304a0
 80260cc:	08030b0c 	.word	0x08030b0c

080260d0 <send_websocket_data>:
    s_ws_handlers[s_ws_handlers_count].fn = fn;
    s_ws_handlers_count++;
  }
};

static void send_websocket_data(void) {
 80260d0:	b5b0      	push	{r4, r5, r7, lr}
 80260d2:	b088      	sub	sp, #32
 80260d4:	af02      	add	r7, sp, #8
  struct mg_connection *c;
  uint64_t now = mg_millis();
 80260d6:	f7da fd8b 	bl	8000bf0 <mg_millis>
 80260da:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for (c = g_mgr.conns; c != NULL; c = c->next) {
 80260de:	4b2a      	ldr	r3, [pc, #168]	@ (8026188 <send_websocket_data+0xb8>)
 80260e0:	681b      	ldr	r3, [r3, #0]
 80260e2:	617b      	str	r3, [r7, #20]
 80260e4:	e048      	b.n	8026178 <send_websocket_data+0xa8>
    uint64_t *timers = (uint64_t *) &c->data[0];
 80260e6:	697b      	ldr	r3, [r7, #20]
 80260e8:	3388      	adds	r3, #136	@ 0x88
 80260ea:	607b      	str	r3, [r7, #4]
    size_t i;

    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 80260ec:	697b      	ldr	r3, [r7, #20]
 80260ee:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80260f2:	f003 0302 	and.w	r3, r3, #2
 80260f6:	b2db      	uxtb	r3, r3
 80260f8:	2b00      	cmp	r3, #0
 80260fa:	d037      	beq.n	802616c <send_websocket_data+0x9c>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 80260fc:	697b      	ldr	r3, [r7, #20]
 80260fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8026100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8026104:	d834      	bhi.n	8026170 <send_websocket_data+0xa0>

    for (i = 0; i < s_ws_handlers_count; i++) {
 8026106:	2300      	movs	r3, #0
 8026108:	613b      	str	r3, [r7, #16]
 802610a:	e029      	b.n	8026160 <send_websocket_data+0x90>
      if (c->pfn_data == NULL ||
 802610c:	697b      	ldr	r3, [r7, #20]
 802610e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8026112:	2b00      	cmp	r3, #0
 8026114:	d016      	beq.n	8026144 <send_websocket_data+0x74>
          mg_timer_expired(&timers[i], s_ws_handlers[i].timeout_ms, now)) {
 8026116:	693b      	ldr	r3, [r7, #16]
 8026118:	00db      	lsls	r3, r3, #3
 802611a:	687a      	ldr	r2, [r7, #4]
 802611c:	18d1      	adds	r1, r2, r3
 802611e:	4a1b      	ldr	r2, [pc, #108]	@ (802618c <send_websocket_data+0xbc>)
 8026120:	693b      	ldr	r3, [r7, #16]
 8026122:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8026126:	2200      	movs	r2, #0
 8026128:	461c      	mov	r4, r3
 802612a:	4615      	mov	r5, r2
 802612c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8026130:	e9cd 2300 	strd	r2, r3, [sp]
 8026134:	4622      	mov	r2, r4
 8026136:	462b      	mov	r3, r5
 8026138:	4608      	mov	r0, r1
 802613a:	f7f1 ffdb 	bl	80180f4 <mg_timer_expired>
 802613e:	4603      	mov	r3, r0
      if (c->pfn_data == NULL ||
 8026140:	2b00      	cmp	r3, #0
 8026142:	d00a      	beq.n	802615a <send_websocket_data+0x8a>
        s_ws_handlers[i].fn(c);
 8026144:	4a11      	ldr	r2, [pc, #68]	@ (802618c <send_websocket_data+0xbc>)
 8026146:	693b      	ldr	r3, [r7, #16]
 8026148:	00db      	lsls	r3, r3, #3
 802614a:	4413      	add	r3, r2
 802614c:	685b      	ldr	r3, [r3, #4]
 802614e:	6978      	ldr	r0, [r7, #20]
 8026150:	4798      	blx	r3
        c->pfn_data = (void *) 1;
 8026152:	697b      	ldr	r3, [r7, #20]
 8026154:	2201      	movs	r2, #1
 8026156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    for (i = 0; i < s_ws_handlers_count; i++) {
 802615a:	693b      	ldr	r3, [r7, #16]
 802615c:	3301      	adds	r3, #1
 802615e:	613b      	str	r3, [r7, #16]
 8026160:	4b0b      	ldr	r3, [pc, #44]	@ (8026190 <send_websocket_data+0xc0>)
 8026162:	681b      	ldr	r3, [r3, #0]
 8026164:	693a      	ldr	r2, [r7, #16]
 8026166:	429a      	cmp	r2, r3
 8026168:	d3d0      	bcc.n	802610c <send_websocket_data+0x3c>
 802616a:	e002      	b.n	8026172 <send_websocket_data+0xa2>
    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 802616c:	bf00      	nop
 802616e:	e000      	b.n	8026172 <send_websocket_data+0xa2>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8026170:	bf00      	nop
  for (c = g_mgr.conns; c != NULL; c = c->next) {
 8026172:	697b      	ldr	r3, [r7, #20]
 8026174:	681b      	ldr	r3, [r3, #0]
 8026176:	617b      	str	r3, [r7, #20]
 8026178:	697b      	ldr	r3, [r7, #20]
 802617a:	2b00      	cmp	r3, #0
 802617c:	d1b3      	bne.n	80260e6 <send_websocket_data+0x16>
      }
    }
  }
}
 802617e:	bf00      	nop
 8026180:	bf00      	nop
 8026182:	3718      	adds	r7, #24
 8026184:	46bd      	mov	sp, r7
 8026186:	bdb0      	pop	{r4, r5, r7, pc}
 8026188:	2401d0b8 	.word	0x2401d0b8
 802618c:	2401d104 	.word	0x2401d104
 8026190:	2401d124 	.word	0x2401d124

08026194 <handle_modbus_pdu>:
#if WIZARD_ENABLE_MODBUS
static struct mongoose_modbus_handlers s_modbus_handlers = {
    glue_modbus_read_reg, glue_modbus_write_reg};

static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 8026194:	b5b0      	push	{r4, r5, r7, lr}
 8026196:	b0d0      	sub	sp, #320	@ 0x140
 8026198:	af00      	add	r7, sp, #0
 802619a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802619e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80261a2:	6018      	str	r0, [r3, #0]
 80261a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80261a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80261ac:	6019      	str	r1, [r3, #0]
 80261ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80261b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80261b6:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 80261b8:	4bb8      	ldr	r3, [pc, #736]	@ (802649c <handle_modbus_pdu+0x308>)
 80261ba:	681b      	ldr	r3, [r3, #0]
 80261bc:	2b02      	cmp	r3, #2
 80261be:	dd13      	ble.n	80261e8 <handle_modbus_pdu+0x54>
 80261c0:	4bb7      	ldr	r3, [pc, #732]	@ (80264a0 <handle_modbus_pdu+0x30c>)
 80261c2:	f240 3225 	movw	r2, #805	@ 0x325
 80261c6:	49b7      	ldr	r1, [pc, #732]	@ (80264a4 <handle_modbus_pdu+0x310>)
 80261c8:	2003      	movs	r0, #3
 80261ca:	f7e9 fabb 	bl	800f744 <mg_log_prefix>
 80261ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80261d2:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80261d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80261da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80261de:	6812      	ldr	r2, [r2, #0]
 80261e0:	6819      	ldr	r1, [r3, #0]
 80261e2:	48b1      	ldr	r0, [pc, #708]	@ (80264a8 <handle_modbus_pdu+0x314>)
 80261e4:	f7e9 fafe 	bl	800f7e4 <mg_log>
  mg_hexdump(buf, len);
 80261e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80261ec:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80261f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80261f4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80261f8:	6811      	ldr	r1, [r2, #0]
 80261fa:	6818      	ldr	r0, [r3, #0]
 80261fc:	f7e9 fb28 	bl	800f850 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 8026200:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026204:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8026208:	681b      	ldr	r3, [r3, #0]
 802620a:	2b0b      	cmp	r3, #11
 802620c:	d80f      	bhi.n	802622e <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 802620e:	4ba3      	ldr	r3, [pc, #652]	@ (802649c <handle_modbus_pdu+0x308>)
 8026210:	681b      	ldr	r3, [r3, #0]
 8026212:	2b00      	cmp	r3, #0
 8026214:	f340 81f8 	ble.w	8026608 <handle_modbus_pdu+0x474>
 8026218:	4ba1      	ldr	r3, [pc, #644]	@ (80264a0 <handle_modbus_pdu+0x30c>)
 802621a:	f240 3229 	movw	r2, #809	@ 0x329
 802621e:	49a1      	ldr	r1, [pc, #644]	@ (80264a4 <handle_modbus_pdu+0x310>)
 8026220:	2001      	movs	r0, #1
 8026222:	f7e9 fa8f 	bl	800f744 <mg_log_prefix>
 8026226:	48a1      	ldr	r0, [pc, #644]	@ (80264ac <handle_modbus_pdu+0x318>)
 8026228:	f7e9 fadc 	bl	800f7e4 <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 802622c:	e1ec      	b.n	8026608 <handle_modbus_pdu+0x474>
    uint8_t func = buf[7];  // Function
 802622e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026232:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8026236:	681b      	ldr	r3, [r3, #0]
 8026238:	79db      	ldrb	r3, [r3, #7]
 802623a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 802623e:	2300      	movs	r3, #0
 8026240:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 8026244:	2300      	movs	r3, #0
 8026246:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 802624a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802624e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8026252:	f107 0014 	add.w	r0, r7, #20
 8026256:	2208      	movs	r2, #8
 8026258:	6819      	ldr	r1, [r3, #0]
 802625a:	f003 fcd0 	bl	8029bfe <memcpy>
    if (func == 6) {  // write single holding register
 802625e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8026262:	2b06      	cmp	r3, #6
 8026264:	d155      	bne.n	8026312 <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8026266:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802626a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802626e:	681b      	ldr	r3, [r3, #0]
 8026270:	3308      	adds	r3, #8
 8026272:	881b      	ldrh	r3, [r3, #0]
 8026274:	4618      	mov	r0, r3
 8026276:	f7fc fcff 	bl	8022c78 <mg_ntohs>
 802627a:	4603      	mov	r3, r0
 802627c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 8026280:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026284:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8026288:	681b      	ldr	r3, [r3, #0]
 802628a:	330a      	adds	r3, #10
 802628c:	881b      	ldrh	r3, [r3, #0]
 802628e:	4618      	mov	r0, r3
 8026290:	f7fc fcf2 	bl	8022c78 <mg_ntohs>
 8026294:	4603      	mov	r3, r0
 8026296:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = s_modbus_handlers.write_reg_fn(start, value);
 802629a:	4b85      	ldr	r3, [pc, #532]	@ (80264b0 <handle_modbus_pdu+0x31c>)
 802629c:	685b      	ldr	r3, [r3, #4]
 802629e:	f8b7 111c 	ldrh.w	r1, [r7, #284]	@ 0x11c
 80262a2:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 80262a6:	4610      	mov	r0, r2
 80262a8:	4798      	blx	r3
 80262aa:	4603      	mov	r3, r0
 80262ac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 80262b0:	f107 0314 	add.w	r3, r7, #20
 80262b4:	f103 0408 	add.w	r4, r3, #8
 80262b8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80262bc:	4618      	mov	r0, r3
 80262be:	f7fc fcdb 	bl	8022c78 <mg_ntohs>
 80262c2:	4603      	mov	r3, r0
 80262c4:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 80262c6:	f107 0314 	add.w	r3, r7, #20
 80262ca:	f103 040a 	add.w	r4, r3, #10
 80262ce:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80262d2:	4618      	mov	r0, r3
 80262d4:	f7fc fcd0 	bl	8022c78 <mg_ntohs>
 80262d8:	4603      	mov	r3, r0
 80262da:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 80262dc:	230c      	movs	r3, #12
 80262de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 80262e2:	4b6e      	ldr	r3, [pc, #440]	@ (802649c <handle_modbus_pdu+0x308>)
 80262e4:	681b      	ldr	r3, [r3, #0]
 80262e6:	2b02      	cmp	r3, #2
 80262e8:	f340 8142 	ble.w	8026570 <handle_modbus_pdu+0x3dc>
 80262ec:	4b6c      	ldr	r3, [pc, #432]	@ (80264a0 <handle_modbus_pdu+0x30c>)
 80262ee:	f240 323b 	movw	r2, #827	@ 0x33b
 80262f2:	496c      	ldr	r1, [pc, #432]	@ (80264a4 <handle_modbus_pdu+0x310>)
 80262f4:	2003      	movs	r0, #3
 80262f6:	f7e9 fa25 	bl	800f744 <mg_log_prefix>
 80262fa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80262fe:	2b00      	cmp	r3, #0
 8026300:	d001      	beq.n	8026306 <handle_modbus_pdu+0x172>
 8026302:	4b6c      	ldr	r3, [pc, #432]	@ (80264b4 <handle_modbus_pdu+0x320>)
 8026304:	e000      	b.n	8026308 <handle_modbus_pdu+0x174>
 8026306:	4b6c      	ldr	r3, [pc, #432]	@ (80264b8 <handle_modbus_pdu+0x324>)
 8026308:	4619      	mov	r1, r3
 802630a:	486c      	ldr	r0, [pc, #432]	@ (80264bc <handle_modbus_pdu+0x328>)
 802630c:	f7e9 fa6a 	bl	800f7e4 <mg_log>
 8026310:	e12e      	b.n	8026570 <handle_modbus_pdu+0x3dc>
    } else if (func == 16) {  // Write multiple
 8026312:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8026316:	2b10      	cmp	r3, #16
 8026318:	f040 808c 	bne.w	8026434 <handle_modbus_pdu+0x2a0>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 802631c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026320:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8026324:	681b      	ldr	r3, [r3, #0]
 8026326:	3308      	adds	r3, #8
 8026328:	881b      	ldrh	r3, [r3, #0]
 802632a:	4618      	mov	r0, r3
 802632c:	f7fc fca4 	bl	8022c78 <mg_ntohs>
 8026330:	4603      	mov	r3, r0
 8026332:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8026336:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802633a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802633e:	681b      	ldr	r3, [r3, #0]
 8026340:	330a      	adds	r3, #10
 8026342:	881b      	ldrh	r3, [r3, #0]
 8026344:	4618      	mov	r0, r3
 8026346:	f7fc fc97 	bl	8022c78 <mg_ntohs>
 802634a:	4603      	mov	r3, r0
 802634c:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 8026350:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026354:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8026358:	681b      	ldr	r3, [r3, #0]
 802635a:	330d      	adds	r3, #13
 802635c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 8026360:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8026364:	3305      	adds	r3, #5
 8026366:	005b      	lsls	r3, r3, #1
 8026368:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 802636c:	f080 8100 	bcs.w	8026570 <handle_modbus_pdu+0x3dc>
        for (i = 0; i < num; i++) {
 8026370:	2300      	movs	r3, #0
 8026372:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8026376:	e024      	b.n	80263c2 <handle_modbus_pdu+0x22e>
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8026378:	4b4d      	ldr	r3, [pc, #308]	@ (80264b0 <handle_modbus_pdu+0x31c>)
 802637a:	685c      	ldr	r4, [r3, #4]
 802637c:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8026380:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8026384:	4413      	add	r3, r2
 8026386:	b29d      	uxth	r5, r3
                                                   mg_htons(data[i]));
 8026388:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 802638c:	005b      	lsls	r3, r3, #1
 802638e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8026392:	4413      	add	r3, r2
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8026394:	881b      	ldrh	r3, [r3, #0]
 8026396:	4618      	mov	r0, r3
 8026398:	f7fc fc6e 	bl	8022c78 <mg_ntohs>
 802639c:	4603      	mov	r3, r0
 802639e:	4619      	mov	r1, r3
 80263a0:	4628      	mov	r0, r5
 80263a2:	47a0      	blx	r4
 80263a4:	4603      	mov	r3, r0
 80263a6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 80263aa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80263ae:	f083 0301 	eor.w	r3, r3, #1
 80263b2:	b2db      	uxtb	r3, r3
 80263b4:	2b00      	cmp	r3, #0
 80263b6:	d10b      	bne.n	80263d0 <handle_modbus_pdu+0x23c>
        for (i = 0; i < num; i++) {
 80263b8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80263bc:	3301      	adds	r3, #1
 80263be:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80263c2:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80263c6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80263ca:	429a      	cmp	r2, r3
 80263cc:	d3d4      	bcc.n	8026378 <handle_modbus_pdu+0x1e4>
 80263ce:	e000      	b.n	80263d2 <handle_modbus_pdu+0x23e>
          if (success == false) break;
 80263d0:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 80263d2:	f107 0314 	add.w	r3, r7, #20
 80263d6:	f103 0408 	add.w	r4, r3, #8
 80263da:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80263de:	4618      	mov	r0, r3
 80263e0:	f7fc fc4a 	bl	8022c78 <mg_ntohs>
 80263e4:	4603      	mov	r3, r0
 80263e6:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 80263e8:	f107 0314 	add.w	r3, r7, #20
 80263ec:	f103 040a 	add.w	r4, r3, #10
 80263f0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80263f4:	4618      	mov	r0, r3
 80263f6:	f7fc fc3f 	bl	8022c78 <mg_ntohs>
 80263fa:	4603      	mov	r3, r0
 80263fc:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 80263fe:	230c      	movs	r3, #12
 8026400:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8026404:	4b25      	ldr	r3, [pc, #148]	@ (802649c <handle_modbus_pdu+0x308>)
 8026406:	681b      	ldr	r3, [r3, #0]
 8026408:	2b02      	cmp	r3, #2
 802640a:	f340 80b1 	ble.w	8026570 <handle_modbus_pdu+0x3dc>
 802640e:	4b24      	ldr	r3, [pc, #144]	@ (80264a0 <handle_modbus_pdu+0x30c>)
 8026410:	f240 3249 	movw	r2, #841	@ 0x349
 8026414:	4923      	ldr	r1, [pc, #140]	@ (80264a4 <handle_modbus_pdu+0x310>)
 8026416:	2003      	movs	r0, #3
 8026418:	f7e9 f994 	bl	800f744 <mg_log_prefix>
 802641c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8026420:	2b00      	cmp	r3, #0
 8026422:	d001      	beq.n	8026428 <handle_modbus_pdu+0x294>
 8026424:	4b23      	ldr	r3, [pc, #140]	@ (80264b4 <handle_modbus_pdu+0x320>)
 8026426:	e000      	b.n	802642a <handle_modbus_pdu+0x296>
 8026428:	4b23      	ldr	r3, [pc, #140]	@ (80264b8 <handle_modbus_pdu+0x324>)
 802642a:	4619      	mov	r1, r3
 802642c:	4823      	ldr	r0, [pc, #140]	@ (80264bc <handle_modbus_pdu+0x328>)
 802642e:	f7e9 f9d9 	bl	800f7e4 <mg_log>
 8026432:	e09d      	b.n	8026570 <handle_modbus_pdu+0x3dc>
    } else if (func == 3 || func == 4) {  // Read multiple
 8026434:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8026438:	2b03      	cmp	r3, #3
 802643a:	d004      	beq.n	8026446 <handle_modbus_pdu+0x2b2>
 802643c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8026440:	2b04      	cmp	r3, #4
 8026442:	f040 8095 	bne.w	8026570 <handle_modbus_pdu+0x3dc>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8026446:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802644a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802644e:	681b      	ldr	r3, [r3, #0]
 8026450:	3308      	adds	r3, #8
 8026452:	881b      	ldrh	r3, [r3, #0]
 8026454:	4618      	mov	r0, r3
 8026456:	f7fc fc0f 	bl	8022c78 <mg_ntohs>
 802645a:	4603      	mov	r3, r0
 802645c:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8026460:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026464:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8026468:	681b      	ldr	r3, [r3, #0]
 802646a:	330a      	adds	r3, #10
 802646c:	881b      	ldrh	r3, [r3, #0]
 802646e:	4618      	mov	r0, r3
 8026470:	f7fc fc02 	bl	8022c78 <mg_ntohs>
 8026474:	4603      	mov	r3, r0
 8026476:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 802647a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 802647e:	005b      	lsls	r3, r3, #1
 8026480:	3309      	adds	r3, #9
 8026482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8026486:	d273      	bcs.n	8026570 <handle_modbus_pdu+0x3dc>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 8026488:	f107 0314 	add.w	r3, r7, #20
 802648c:	3309      	adds	r3, #9
 802648e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 8026492:	2300      	movs	r3, #0
 8026494:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8026498:	e03a      	b.n	8026510 <handle_modbus_pdu+0x37c>
 802649a:	bf00      	nop
 802649c:	2400025c 	.word	0x2400025c
 80264a0:	0803e79c 	.word	0x0803e79c
 80264a4:	080304a0 	.word	0x080304a0
 80264a8:	08030b50 	.word	0x08030b50
 80264ac:	08030b74 	.word	0x08030b74
 80264b0:	24000820 	.word	0x24000820
 80264b4:	08030b84 	.word	0x08030b84
 80264b8:	08030b8c 	.word	0x08030b8c
 80264bc:	08030b94 	.word	0x08030b94
          success = s_modbus_handlers.read_reg_fn((uint16_t) (start + i), &val);
 80264c0:	4b54      	ldr	r3, [pc, #336]	@ (8026614 <handle_modbus_pdu+0x480>)
 80264c2:	681b      	ldr	r3, [r3, #0]
 80264c4:	f8b7 1130 	ldrh.w	r1, [r7, #304]	@ 0x130
 80264c8:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 80264cc:	440a      	add	r2, r1
 80264ce:	b292      	uxth	r2, r2
 80264d0:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 80264d4:	4610      	mov	r0, r2
 80264d6:	4798      	blx	r3
 80264d8:	4603      	mov	r3, r0
 80264da:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 80264de:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80264e2:	f083 0301 	eor.w	r3, r3, #1
 80264e6:	b2db      	uxtb	r3, r3
 80264e8:	2b00      	cmp	r3, #0
 80264ea:	d118      	bne.n	802651e <handle_modbus_pdu+0x38a>
          data[i] = mg_htons(val);
 80264ec:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 80264f0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80264f4:	005b      	lsls	r3, r3, #1
 80264f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80264fa:	18d4      	adds	r4, r2, r3
 80264fc:	4608      	mov	r0, r1
 80264fe:	f7fc fbbb 	bl	8022c78 <mg_ntohs>
 8026502:	4603      	mov	r3, r0
 8026504:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 8026506:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 802650a:	3301      	adds	r3, #1
 802650c:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8026510:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8026514:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8026518:	429a      	cmp	r2, r3
 802651a:	d3d1      	bcc.n	80264c0 <handle_modbus_pdu+0x32c>
 802651c:	e000      	b.n	8026520 <handle_modbus_pdu+0x38c>
          if (success == false) break;
 802651e:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 8026520:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8026524:	b2db      	uxtb	r3, r3
 8026526:	005b      	lsls	r3, r3, #1
 8026528:	b2da      	uxtb	r2, r3
 802652a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802652e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8026532:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 8026534:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026538:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802653c:	7a1b      	ldrb	r3, [r3, #8]
 802653e:	3309      	adds	r3, #9
 8026540:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8026544:	4b34      	ldr	r3, [pc, #208]	@ (8026618 <handle_modbus_pdu+0x484>)
 8026546:	681b      	ldr	r3, [r3, #0]
 8026548:	2b02      	cmp	r3, #2
 802654a:	dd11      	ble.n	8026570 <handle_modbus_pdu+0x3dc>
 802654c:	4b33      	ldr	r3, [pc, #204]	@ (802661c <handle_modbus_pdu+0x488>)
 802654e:	f240 3257 	movw	r2, #855	@ 0x357
 8026552:	4933      	ldr	r1, [pc, #204]	@ (8026620 <handle_modbus_pdu+0x48c>)
 8026554:	2003      	movs	r0, #3
 8026556:	f7e9 f8f5 	bl	800f744 <mg_log_prefix>
 802655a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 802655e:	2b00      	cmp	r3, #0
 8026560:	d001      	beq.n	8026566 <handle_modbus_pdu+0x3d2>
 8026562:	4b30      	ldr	r3, [pc, #192]	@ (8026624 <handle_modbus_pdu+0x490>)
 8026564:	e000      	b.n	8026568 <handle_modbus_pdu+0x3d4>
 8026566:	4b30      	ldr	r3, [pc, #192]	@ (8026628 <handle_modbus_pdu+0x494>)
 8026568:	4619      	mov	r1, r3
 802656a:	4830      	ldr	r0, [pc, #192]	@ (802662c <handle_modbus_pdu+0x498>)
 802656c:	f7e9 f93a 	bl	800f7e4 <mg_log>
    if (success == false) {
 8026570:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8026574:	f083 0301 	eor.w	r3, r3, #1
 8026578:	b2db      	uxtb	r3, r3
 802657a:	2b00      	cmp	r3, #0
 802657c:	d015      	beq.n	80265aa <handle_modbus_pdu+0x416>
      response_len = 9;
 802657e:	2309      	movs	r3, #9
 8026580:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 8026584:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026588:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802658c:	79db      	ldrb	r3, [r3, #7]
 802658e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8026592:	b2da      	uxtb	r2, r3
 8026594:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8026598:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 802659c:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 802659e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80265a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80265a6:	2204      	movs	r2, #4
 80265a8:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 80265aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80265ae:	b29b      	uxth	r3, r3
 80265b0:	3b06      	subs	r3, #6
 80265b2:	b29a      	uxth	r2, r3
 80265b4:	f107 0314 	add.w	r3, r7, #20
 80265b8:	1d1c      	adds	r4, r3, #4
 80265ba:	4610      	mov	r0, r2
 80265bc:	f7fc fb5c 	bl	8022c78 <mg_ntohs>
 80265c0:	4603      	mov	r3, r0
 80265c2:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 80265c4:	4b14      	ldr	r3, [pc, #80]	@ (8026618 <handle_modbus_pdu+0x484>)
 80265c6:	681b      	ldr	r3, [r3, #0]
 80265c8:	2b02      	cmp	r3, #2
 80265ca:	dd0b      	ble.n	80265e4 <handle_modbus_pdu+0x450>
 80265cc:	4b13      	ldr	r3, [pc, #76]	@ (802661c <handle_modbus_pdu+0x488>)
 80265ce:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80265d2:	4913      	ldr	r1, [pc, #76]	@ (8026620 <handle_modbus_pdu+0x48c>)
 80265d4:	2003      	movs	r0, #3
 80265d6:	f7e9 f8b5 	bl	800f744 <mg_log_prefix>
 80265da:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80265de:	4814      	ldr	r0, [pc, #80]	@ (8026630 <handle_modbus_pdu+0x49c>)
 80265e0:	f7e9 f900 	bl	800f7e4 <mg_log>
    mg_hexdump(response, response_len);
 80265e4:	f107 0314 	add.w	r3, r7, #20
 80265e8:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80265ec:	4618      	mov	r0, r3
 80265ee:	f7e9 f92f 	bl	800f850 <mg_hexdump>
    mg_send(c, response, response_len);
 80265f2:	f107 0114 	add.w	r1, r7, #20
 80265f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80265fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80265fe:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8026602:	6818      	ldr	r0, [r3, #0]
 8026604:	f7ed fb36 	bl	8013c74 <mg_send>
}
 8026608:	bf00      	nop
 802660a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 802660e:	46bd      	mov	sp, r7
 8026610:	bdb0      	pop	{r4, r5, r7, pc}
 8026612:	bf00      	nop
 8026614:	24000820 	.word	0x24000820
 8026618:	2400025c 	.word	0x2400025c
 802661c:	0803e79c 	.word	0x0803e79c
 8026620:	080304a0 	.word	0x080304a0
 8026624:	08030b84 	.word	0x08030b84
 8026628:	08030b8c 	.word	0x08030b8c
 802662c:	08030b94 	.word	0x08030b94
 8026630:	08030ba8 	.word	0x08030ba8

08026634 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8026634:	b580      	push	{r7, lr}
 8026636:	b086      	sub	sp, #24
 8026638:	af00      	add	r7, sp, #0
 802663a:	60f8      	str	r0, [r7, #12]
 802663c:	60b9      	str	r1, [r7, #8]
 802663e:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 8026640:	68bb      	ldr	r3, [r7, #8]
 8026642:	2b07      	cmp	r3, #7
 8026644:	d13a      	bne.n	80266bc <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8026646:	68fb      	ldr	r3, [r7, #12]
 8026648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802664a:	2b06      	cmp	r3, #6
 802664c:	d933      	bls.n	80266b6 <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 802664e:	68fb      	ldr	r3, [r7, #12]
 8026650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8026652:	3304      	adds	r3, #4
 8026654:	881b      	ldrh	r3, [r3, #0]
 8026656:	4618      	mov	r0, r3
 8026658:	f7fc fb0e 	bl	8022c78 <mg_ntohs>
 802665c:	4603      	mov	r3, r0
 802665e:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 8026660:	4b18      	ldr	r3, [pc, #96]	@ (80266c4 <modbus_ev_handler+0x90>)
 8026662:	681b      	ldr	r3, [r3, #0]
 8026664:	2b01      	cmp	r3, #1
 8026666:	dd0e      	ble.n	8026686 <modbus_ev_handler+0x52>
 8026668:	4b17      	ldr	r3, [pc, #92]	@ (80266c8 <modbus_ev_handler+0x94>)
 802666a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 802666e:	4917      	ldr	r1, [pc, #92]	@ (80266cc <modbus_ev_handler+0x98>)
 8026670:	2002      	movs	r0, #2
 8026672:	f7e9 f867 	bl	800f744 <mg_log_prefix>
 8026676:	68fb      	ldr	r3, [r7, #12]
 8026678:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 802667a:	8afb      	ldrh	r3, [r7, #22]
 802667c:	3306      	adds	r3, #6
 802667e:	461a      	mov	r2, r3
 8026680:	4813      	ldr	r0, [pc, #76]	@ (80266d0 <modbus_ev_handler+0x9c>)
 8026682:	f7e9 f8af 	bl	800f7e4 <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8026686:	68fb      	ldr	r3, [r7, #12]
 8026688:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802668a:	8afb      	ldrh	r3, [r7, #22]
 802668c:	3306      	adds	r3, #6
 802668e:	429a      	cmp	r2, r3
 8026690:	d313      	bcc.n	80266ba <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 8026692:	68fb      	ldr	r3, [r7, #12]
 8026694:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8026696:	8afb      	ldrh	r3, [r7, #22]
 8026698:	3306      	adds	r3, #6
 802669a:	461a      	mov	r2, r3
 802669c:	68f8      	ldr	r0, [r7, #12]
 802669e:	f7ff fd79 	bl	8026194 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 80266a2:	68fb      	ldr	r3, [r7, #12]
 80266a4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80266a8:	8afb      	ldrh	r3, [r7, #22]
 80266aa:	3306      	adds	r3, #6
 80266ac:	461a      	mov	r2, r3
 80266ae:	2100      	movs	r1, #0
 80266b0:	f7e8 f830 	bl	800e714 <mg_iobuf_del>
 80266b4:	e002      	b.n	80266bc <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 80266b6:	bf00      	nop
 80266b8:	e000      	b.n	80266bc <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 80266ba:	bf00      	nop
  }
  (void) ev_data;
}
 80266bc:	3718      	adds	r7, #24
 80266be:	46bd      	mov	sp, r7
 80266c0:	bd80      	pop	{r7, pc}
 80266c2:	bf00      	nop
 80266c4:	2400025c 	.word	0x2400025c
 80266c8:	0803e7b0 	.word	0x0803e7b0
 80266cc:	080304a0 	.word	0x080304a0
 80266d0:	08030bc4 	.word	0x08030bc4

080266d4 <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 80266d4:	b580      	push	{r7, lr}
 80266d6:	b09a      	sub	sp, #104	@ 0x68
 80266d8:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 80266da:	4824      	ldr	r0, [pc, #144]	@ (802676c <mongoose_init+0x98>)
 80266dc:	f7e9 fe1a 	bl	8010314 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 80266e0:	4b23      	ldr	r3, [pc, #140]	@ (8026770 <mongoose_init+0x9c>)
 80266e2:	2203      	movs	r2, #3
 80266e4:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 80266e6:	4b22      	ldr	r3, [pc, #136]	@ (8026770 <mongoose_init+0x9c>)
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	2b01      	cmp	r3, #1
 80266ec:	dd09      	ble.n	8026702 <mongoose_init+0x2e>
 80266ee:	4b21      	ldr	r3, [pc, #132]	@ (8026774 <mongoose_init+0xa0>)
 80266f0:	f240 32ad 	movw	r2, #941	@ 0x3ad
 80266f4:	4920      	ldr	r1, [pc, #128]	@ (8026778 <mongoose_init+0xa4>)
 80266f6:	2002      	movs	r0, #2
 80266f8:	f7e9 f824 	bl	800f744 <mg_log_prefix>
 80266fc:	481f      	ldr	r0, [pc, #124]	@ (802677c <mongoose_init+0xa8>)
 80266fe:	f7e9 f871 	bl	800f7e4 <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 8026702:	2300      	movs	r3, #0
 8026704:	4a1e      	ldr	r2, [pc, #120]	@ (8026780 <mongoose_init+0xac>)
 8026706:	491f      	ldr	r1, [pc, #124]	@ (8026784 <mongoose_init+0xb0>)
 8026708:	4818      	ldr	r0, [pc, #96]	@ (802676c <mongoose_init+0x98>)
 802670a:	f7e7 feef 	bl	800e4ec <mg_http_listen>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 802670e:	1d38      	adds	r0, r7, #4
 8026710:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8026714:	4a1c      	ldr	r2, [pc, #112]	@ (8026788 <mongoose_init+0xb4>)
 8026716:	2164      	movs	r1, #100	@ 0x64
 8026718:	f7ed fc50 	bl	8013fbc <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 802671c:	4b14      	ldr	r3, [pc, #80]	@ (8026770 <mongoose_init+0x9c>)
 802671e:	681b      	ldr	r3, [r3, #0]
 8026720:	2b01      	cmp	r3, #1
 8026722:	dd0b      	ble.n	802673c <mongoose_init+0x68>
 8026724:	4b13      	ldr	r3, [pc, #76]	@ (8026774 <mongoose_init+0xa0>)
 8026726:	f240 32c7 	movw	r2, #967	@ 0x3c7
 802672a:	4913      	ldr	r1, [pc, #76]	@ (8026778 <mongoose_init+0xa4>)
 802672c:	2002      	movs	r0, #2
 802672e:	f7e9 f809 	bl	800f744 <mg_log_prefix>
 8026732:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8026736:	4815      	ldr	r0, [pc, #84]	@ (802678c <mongoose_init+0xb8>)
 8026738:	f7e9 f854 	bl	800f7e4 <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 802673c:	1d39      	adds	r1, r7, #4
 802673e:	2300      	movs	r3, #0
 8026740:	4a13      	ldr	r2, [pc, #76]	@ (8026790 <mongoose_init+0xbc>)
 8026742:	480a      	ldr	r0, [pc, #40]	@ (802676c <mongoose_init+0x98>)
 8026744:	f7e9 fd1a 	bl	801017c <mg_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", WIZARD_MDNS_NAME));
  mg_mdns_listen(&g_mgr, WIZARD_MDNS_NAME);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 8026748:	4b09      	ldr	r3, [pc, #36]	@ (8026770 <mongoose_init+0x9c>)
 802674a:	681b      	ldr	r3, [r3, #0]
 802674c:	2b01      	cmp	r3, #1
 802674e:	dd09      	ble.n	8026764 <mongoose_init+0x90>
 8026750:	4b08      	ldr	r3, [pc, #32]	@ (8026774 <mongoose_init+0xa0>)
 8026752:	f240 32d7 	movw	r2, #983	@ 0x3d7
 8026756:	4908      	ldr	r1, [pc, #32]	@ (8026778 <mongoose_init+0xa4>)
 8026758:	2002      	movs	r0, #2
 802675a:	f7e8 fff3 	bl	800f744 <mg_log_prefix>
 802675e:	480d      	ldr	r0, [pc, #52]	@ (8026794 <mongoose_init+0xc0>)
 8026760:	f7e9 f840 	bl	800f7e4 <mg_log>
}
 8026764:	bf00      	nop
 8026766:	3768      	adds	r7, #104	@ 0x68
 8026768:	46bd      	mov	sp, r7
 802676a:	bd80      	pop	{r7, pc}
 802676c:	2401d0b8 	.word	0x2401d0b8
 8026770:	2400025c 	.word	0x2400025c
 8026774:	0803e7c4 	.word	0x0803e7c4
 8026778:	080304a0 	.word	0x080304a0
 802677c:	08030bdc 	.word	0x08030bdc
 8026780:	08025c65 	.word	0x08025c65
 8026784:	08030bf4 	.word	0x08030bf4
 8026788:	08030c08 	.word	0x08030c08
 802678c:	08030c1c 	.word	0x08030c1c
 8026790:	08026635 	.word	0x08026635
 8026794:	08030c44 	.word	0x08030c44

08026798 <mongoose_poll>:

void mongoose_poll(void) {
 8026798:	b580      	push	{r7, lr}
 802679a:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 802679c:	210a      	movs	r1, #10
 802679e:	4803      	ldr	r0, [pc, #12]	@ (80267ac <mongoose_poll+0x14>)
 80267a0:	f7ed f936 	bl	8013a10 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
 80267a4:	f7ff fc94 	bl	80260d0 <send_websocket_data>
#endif
  glue_unlock();
 80267a8:	bf00      	nop
 80267aa:	bd80      	pop	{r7, pc}
 80267ac:	2401d0b8 	.word	0x2401d0b8

080267b0 <abort>:
 80267b0:	b508      	push	{r3, lr}
 80267b2:	2006      	movs	r0, #6
 80267b4:	f002 f882 	bl	80288bc <raise>
 80267b8:	2001      	movs	r0, #1
 80267ba:	f7dc f81c 	bl	80027f6 <_exit>
	...

080267c0 <__assert_func>:
 80267c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80267c2:	4614      	mov	r4, r2
 80267c4:	461a      	mov	r2, r3
 80267c6:	4b09      	ldr	r3, [pc, #36]	@ (80267ec <__assert_func+0x2c>)
 80267c8:	681b      	ldr	r3, [r3, #0]
 80267ca:	4605      	mov	r5, r0
 80267cc:	68d8      	ldr	r0, [r3, #12]
 80267ce:	b14c      	cbz	r4, 80267e4 <__assert_func+0x24>
 80267d0:	4b07      	ldr	r3, [pc, #28]	@ (80267f0 <__assert_func+0x30>)
 80267d2:	9100      	str	r1, [sp, #0]
 80267d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80267d8:	4906      	ldr	r1, [pc, #24]	@ (80267f4 <__assert_func+0x34>)
 80267da:	462b      	mov	r3, r5
 80267dc:	f001 fd9e 	bl	802831c <fiprintf>
 80267e0:	f7ff ffe6 	bl	80267b0 <abort>
 80267e4:	4b04      	ldr	r3, [pc, #16]	@ (80267f8 <__assert_func+0x38>)
 80267e6:	461c      	mov	r4, r3
 80267e8:	e7f3      	b.n	80267d2 <__assert_func+0x12>
 80267ea:	bf00      	nop
 80267ec:	240009a8 	.word	0x240009a8
 80267f0:	0803e7d2 	.word	0x0803e7d2
 80267f4:	0803e7df 	.word	0x0803e7df
 80267f8:	0803e80d 	.word	0x0803e80d

080267fc <atof>:
 80267fc:	2100      	movs	r1, #0
 80267fe:	f000 bef1 	b.w	80275e4 <strtod>

08026802 <atoi>:
 8026802:	220a      	movs	r2, #10
 8026804:	2100      	movs	r1, #0
 8026806:	f000 bf7f 	b.w	8027708 <strtol>
	...

0802680c <calloc>:
 802680c:	4b02      	ldr	r3, [pc, #8]	@ (8026818 <calloc+0xc>)
 802680e:	460a      	mov	r2, r1
 8026810:	4601      	mov	r1, r0
 8026812:	6818      	ldr	r0, [r3, #0]
 8026814:	f000 b802 	b.w	802681c <_calloc_r>
 8026818:	240009a8 	.word	0x240009a8

0802681c <_calloc_r>:
 802681c:	b570      	push	{r4, r5, r6, lr}
 802681e:	fba1 5402 	umull	r5, r4, r1, r2
 8026822:	b934      	cbnz	r4, 8026832 <_calloc_r+0x16>
 8026824:	4629      	mov	r1, r5
 8026826:	f000 f83f 	bl	80268a8 <_malloc_r>
 802682a:	4606      	mov	r6, r0
 802682c:	b928      	cbnz	r0, 802683a <_calloc_r+0x1e>
 802682e:	4630      	mov	r0, r6
 8026830:	bd70      	pop	{r4, r5, r6, pc}
 8026832:	220c      	movs	r2, #12
 8026834:	6002      	str	r2, [r0, #0]
 8026836:	2600      	movs	r6, #0
 8026838:	e7f9      	b.n	802682e <_calloc_r+0x12>
 802683a:	462a      	mov	r2, r5
 802683c:	4621      	mov	r1, r4
 802683e:	f001 ffaf 	bl	80287a0 <memset>
 8026842:	e7f4      	b.n	802682e <_calloc_r+0x12>

08026844 <malloc>:
 8026844:	4b02      	ldr	r3, [pc, #8]	@ (8026850 <malloc+0xc>)
 8026846:	4601      	mov	r1, r0
 8026848:	6818      	ldr	r0, [r3, #0]
 802684a:	f000 b82d 	b.w	80268a8 <_malloc_r>
 802684e:	bf00      	nop
 8026850:	240009a8 	.word	0x240009a8

08026854 <free>:
 8026854:	4b02      	ldr	r3, [pc, #8]	@ (8026860 <free+0xc>)
 8026856:	4601      	mov	r1, r0
 8026858:	6818      	ldr	r0, [r3, #0]
 802685a:	f003 bfd7 	b.w	802a80c <_free_r>
 802685e:	bf00      	nop
 8026860:	240009a8 	.word	0x240009a8

08026864 <sbrk_aligned>:
 8026864:	b570      	push	{r4, r5, r6, lr}
 8026866:	4e0f      	ldr	r6, [pc, #60]	@ (80268a4 <sbrk_aligned+0x40>)
 8026868:	460c      	mov	r4, r1
 802686a:	6831      	ldr	r1, [r6, #0]
 802686c:	4605      	mov	r5, r0
 802686e:	b911      	cbnz	r1, 8026876 <sbrk_aligned+0x12>
 8026870:	f003 f96c 	bl	8029b4c <_sbrk_r>
 8026874:	6030      	str	r0, [r6, #0]
 8026876:	4621      	mov	r1, r4
 8026878:	4628      	mov	r0, r5
 802687a:	f003 f967 	bl	8029b4c <_sbrk_r>
 802687e:	1c43      	adds	r3, r0, #1
 8026880:	d103      	bne.n	802688a <sbrk_aligned+0x26>
 8026882:	f04f 34ff 	mov.w	r4, #4294967295
 8026886:	4620      	mov	r0, r4
 8026888:	bd70      	pop	{r4, r5, r6, pc}
 802688a:	1cc4      	adds	r4, r0, #3
 802688c:	f024 0403 	bic.w	r4, r4, #3
 8026890:	42a0      	cmp	r0, r4
 8026892:	d0f8      	beq.n	8026886 <sbrk_aligned+0x22>
 8026894:	1a21      	subs	r1, r4, r0
 8026896:	4628      	mov	r0, r5
 8026898:	f003 f958 	bl	8029b4c <_sbrk_r>
 802689c:	3001      	adds	r0, #1
 802689e:	d1f2      	bne.n	8026886 <sbrk_aligned+0x22>
 80268a0:	e7ef      	b.n	8026882 <sbrk_aligned+0x1e>
 80268a2:	bf00      	nop
 80268a4:	2401d128 	.word	0x2401d128

080268a8 <_malloc_r>:
 80268a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80268ac:	1ccd      	adds	r5, r1, #3
 80268ae:	f025 0503 	bic.w	r5, r5, #3
 80268b2:	3508      	adds	r5, #8
 80268b4:	2d0c      	cmp	r5, #12
 80268b6:	bf38      	it	cc
 80268b8:	250c      	movcc	r5, #12
 80268ba:	2d00      	cmp	r5, #0
 80268bc:	4606      	mov	r6, r0
 80268be:	db01      	blt.n	80268c4 <_malloc_r+0x1c>
 80268c0:	42a9      	cmp	r1, r5
 80268c2:	d904      	bls.n	80268ce <_malloc_r+0x26>
 80268c4:	230c      	movs	r3, #12
 80268c6:	6033      	str	r3, [r6, #0]
 80268c8:	2000      	movs	r0, #0
 80268ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80268ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80269a4 <_malloc_r+0xfc>
 80268d2:	f000 f869 	bl	80269a8 <__malloc_lock>
 80268d6:	f8d8 3000 	ldr.w	r3, [r8]
 80268da:	461c      	mov	r4, r3
 80268dc:	bb44      	cbnz	r4, 8026930 <_malloc_r+0x88>
 80268de:	4629      	mov	r1, r5
 80268e0:	4630      	mov	r0, r6
 80268e2:	f7ff ffbf 	bl	8026864 <sbrk_aligned>
 80268e6:	1c43      	adds	r3, r0, #1
 80268e8:	4604      	mov	r4, r0
 80268ea:	d158      	bne.n	802699e <_malloc_r+0xf6>
 80268ec:	f8d8 4000 	ldr.w	r4, [r8]
 80268f0:	4627      	mov	r7, r4
 80268f2:	2f00      	cmp	r7, #0
 80268f4:	d143      	bne.n	802697e <_malloc_r+0xd6>
 80268f6:	2c00      	cmp	r4, #0
 80268f8:	d04b      	beq.n	8026992 <_malloc_r+0xea>
 80268fa:	6823      	ldr	r3, [r4, #0]
 80268fc:	4639      	mov	r1, r7
 80268fe:	4630      	mov	r0, r6
 8026900:	eb04 0903 	add.w	r9, r4, r3
 8026904:	f003 f922 	bl	8029b4c <_sbrk_r>
 8026908:	4581      	cmp	r9, r0
 802690a:	d142      	bne.n	8026992 <_malloc_r+0xea>
 802690c:	6821      	ldr	r1, [r4, #0]
 802690e:	1a6d      	subs	r5, r5, r1
 8026910:	4629      	mov	r1, r5
 8026912:	4630      	mov	r0, r6
 8026914:	f7ff ffa6 	bl	8026864 <sbrk_aligned>
 8026918:	3001      	adds	r0, #1
 802691a:	d03a      	beq.n	8026992 <_malloc_r+0xea>
 802691c:	6823      	ldr	r3, [r4, #0]
 802691e:	442b      	add	r3, r5
 8026920:	6023      	str	r3, [r4, #0]
 8026922:	f8d8 3000 	ldr.w	r3, [r8]
 8026926:	685a      	ldr	r2, [r3, #4]
 8026928:	bb62      	cbnz	r2, 8026984 <_malloc_r+0xdc>
 802692a:	f8c8 7000 	str.w	r7, [r8]
 802692e:	e00f      	b.n	8026950 <_malloc_r+0xa8>
 8026930:	6822      	ldr	r2, [r4, #0]
 8026932:	1b52      	subs	r2, r2, r5
 8026934:	d420      	bmi.n	8026978 <_malloc_r+0xd0>
 8026936:	2a0b      	cmp	r2, #11
 8026938:	d917      	bls.n	802696a <_malloc_r+0xc2>
 802693a:	1961      	adds	r1, r4, r5
 802693c:	42a3      	cmp	r3, r4
 802693e:	6025      	str	r5, [r4, #0]
 8026940:	bf18      	it	ne
 8026942:	6059      	strne	r1, [r3, #4]
 8026944:	6863      	ldr	r3, [r4, #4]
 8026946:	bf08      	it	eq
 8026948:	f8c8 1000 	streq.w	r1, [r8]
 802694c:	5162      	str	r2, [r4, r5]
 802694e:	604b      	str	r3, [r1, #4]
 8026950:	4630      	mov	r0, r6
 8026952:	f000 f82f 	bl	80269b4 <__malloc_unlock>
 8026956:	f104 000b 	add.w	r0, r4, #11
 802695a:	1d23      	adds	r3, r4, #4
 802695c:	f020 0007 	bic.w	r0, r0, #7
 8026960:	1ac2      	subs	r2, r0, r3
 8026962:	bf1c      	itt	ne
 8026964:	1a1b      	subne	r3, r3, r0
 8026966:	50a3      	strne	r3, [r4, r2]
 8026968:	e7af      	b.n	80268ca <_malloc_r+0x22>
 802696a:	6862      	ldr	r2, [r4, #4]
 802696c:	42a3      	cmp	r3, r4
 802696e:	bf0c      	ite	eq
 8026970:	f8c8 2000 	streq.w	r2, [r8]
 8026974:	605a      	strne	r2, [r3, #4]
 8026976:	e7eb      	b.n	8026950 <_malloc_r+0xa8>
 8026978:	4623      	mov	r3, r4
 802697a:	6864      	ldr	r4, [r4, #4]
 802697c:	e7ae      	b.n	80268dc <_malloc_r+0x34>
 802697e:	463c      	mov	r4, r7
 8026980:	687f      	ldr	r7, [r7, #4]
 8026982:	e7b6      	b.n	80268f2 <_malloc_r+0x4a>
 8026984:	461a      	mov	r2, r3
 8026986:	685b      	ldr	r3, [r3, #4]
 8026988:	42a3      	cmp	r3, r4
 802698a:	d1fb      	bne.n	8026984 <_malloc_r+0xdc>
 802698c:	2300      	movs	r3, #0
 802698e:	6053      	str	r3, [r2, #4]
 8026990:	e7de      	b.n	8026950 <_malloc_r+0xa8>
 8026992:	230c      	movs	r3, #12
 8026994:	6033      	str	r3, [r6, #0]
 8026996:	4630      	mov	r0, r6
 8026998:	f000 f80c 	bl	80269b4 <__malloc_unlock>
 802699c:	e794      	b.n	80268c8 <_malloc_r+0x20>
 802699e:	6005      	str	r5, [r0, #0]
 80269a0:	e7d6      	b.n	8026950 <_malloc_r+0xa8>
 80269a2:	bf00      	nop
 80269a4:	2401d12c 	.word	0x2401d12c

080269a8 <__malloc_lock>:
 80269a8:	4801      	ldr	r0, [pc, #4]	@ (80269b0 <__malloc_lock+0x8>)
 80269aa:	f003 b91d 	b.w	8029be8 <__retarget_lock_acquire_recursive>
 80269ae:	bf00      	nop
 80269b0:	2401d296 	.word	0x2401d296

080269b4 <__malloc_unlock>:
 80269b4:	4801      	ldr	r0, [pc, #4]	@ (80269bc <__malloc_unlock+0x8>)
 80269b6:	f003 b919 	b.w	8029bec <__retarget_lock_release_recursive>
 80269ba:	bf00      	nop
 80269bc:	2401d296 	.word	0x2401d296

080269c0 <srand>:
 80269c0:	b538      	push	{r3, r4, r5, lr}
 80269c2:	4b10      	ldr	r3, [pc, #64]	@ (8026a04 <srand+0x44>)
 80269c4:	681d      	ldr	r5, [r3, #0]
 80269c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80269c8:	4604      	mov	r4, r0
 80269ca:	b9b3      	cbnz	r3, 80269fa <srand+0x3a>
 80269cc:	2018      	movs	r0, #24
 80269ce:	f7ff ff39 	bl	8026844 <malloc>
 80269d2:	4602      	mov	r2, r0
 80269d4:	6328      	str	r0, [r5, #48]	@ 0x30
 80269d6:	b920      	cbnz	r0, 80269e2 <srand+0x22>
 80269d8:	4b0b      	ldr	r3, [pc, #44]	@ (8026a08 <srand+0x48>)
 80269da:	480c      	ldr	r0, [pc, #48]	@ (8026a0c <srand+0x4c>)
 80269dc:	2146      	movs	r1, #70	@ 0x46
 80269de:	f7ff feef 	bl	80267c0 <__assert_func>
 80269e2:	490b      	ldr	r1, [pc, #44]	@ (8026a10 <srand+0x50>)
 80269e4:	4b0b      	ldr	r3, [pc, #44]	@ (8026a14 <srand+0x54>)
 80269e6:	e9c0 1300 	strd	r1, r3, [r0]
 80269ea:	4b0b      	ldr	r3, [pc, #44]	@ (8026a18 <srand+0x58>)
 80269ec:	6083      	str	r3, [r0, #8]
 80269ee:	230b      	movs	r3, #11
 80269f0:	8183      	strh	r3, [r0, #12]
 80269f2:	2100      	movs	r1, #0
 80269f4:	2001      	movs	r0, #1
 80269f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80269fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80269fc:	2200      	movs	r2, #0
 80269fe:	611c      	str	r4, [r3, #16]
 8026a00:	615a      	str	r2, [r3, #20]
 8026a02:	bd38      	pop	{r3, r4, r5, pc}
 8026a04:	240009a8 	.word	0x240009a8
 8026a08:	0803e80e 	.word	0x0803e80e
 8026a0c:	0803e825 	.word	0x0803e825
 8026a10:	abcd330e 	.word	0xabcd330e
 8026a14:	e66d1234 	.word	0xe66d1234
 8026a18:	0005deec 	.word	0x0005deec

08026a1c <_realloc_r>:
 8026a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a20:	4607      	mov	r7, r0
 8026a22:	4614      	mov	r4, r2
 8026a24:	460d      	mov	r5, r1
 8026a26:	b921      	cbnz	r1, 8026a32 <_realloc_r+0x16>
 8026a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026a2c:	4611      	mov	r1, r2
 8026a2e:	f7ff bf3b 	b.w	80268a8 <_malloc_r>
 8026a32:	b92a      	cbnz	r2, 8026a40 <_realloc_r+0x24>
 8026a34:	f003 feea 	bl	802a80c <_free_r>
 8026a38:	4625      	mov	r5, r4
 8026a3a:	4628      	mov	r0, r5
 8026a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a40:	f004 ff65 	bl	802b90e <_malloc_usable_size_r>
 8026a44:	4284      	cmp	r4, r0
 8026a46:	4606      	mov	r6, r0
 8026a48:	d802      	bhi.n	8026a50 <_realloc_r+0x34>
 8026a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8026a4e:	d8f4      	bhi.n	8026a3a <_realloc_r+0x1e>
 8026a50:	4621      	mov	r1, r4
 8026a52:	4638      	mov	r0, r7
 8026a54:	f7ff ff28 	bl	80268a8 <_malloc_r>
 8026a58:	4680      	mov	r8, r0
 8026a5a:	b908      	cbnz	r0, 8026a60 <_realloc_r+0x44>
 8026a5c:	4645      	mov	r5, r8
 8026a5e:	e7ec      	b.n	8026a3a <_realloc_r+0x1e>
 8026a60:	42b4      	cmp	r4, r6
 8026a62:	4622      	mov	r2, r4
 8026a64:	4629      	mov	r1, r5
 8026a66:	bf28      	it	cs
 8026a68:	4632      	movcs	r2, r6
 8026a6a:	f003 f8c8 	bl	8029bfe <memcpy>
 8026a6e:	4629      	mov	r1, r5
 8026a70:	4638      	mov	r0, r7
 8026a72:	f003 fecb 	bl	802a80c <_free_r>
 8026a76:	e7f1      	b.n	8026a5c <_realloc_r+0x40>

08026a78 <sulp>:
 8026a78:	b570      	push	{r4, r5, r6, lr}
 8026a7a:	4604      	mov	r4, r0
 8026a7c:	460d      	mov	r5, r1
 8026a7e:	4616      	mov	r6, r2
 8026a80:	ec45 4b10 	vmov	d0, r4, r5
 8026a84:	f004 fe08 	bl	802b698 <__ulp>
 8026a88:	b17e      	cbz	r6, 8026aaa <sulp+0x32>
 8026a8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8026a8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8026a92:	2b00      	cmp	r3, #0
 8026a94:	dd09      	ble.n	8026aaa <sulp+0x32>
 8026a96:	051b      	lsls	r3, r3, #20
 8026a98:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8026a9c:	2000      	movs	r0, #0
 8026a9e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8026aa2:	ec41 0b17 	vmov	d7, r0, r1
 8026aa6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8026aaa:	bd70      	pop	{r4, r5, r6, pc}
 8026aac:	0000      	movs	r0, r0
	...

08026ab0 <_strtod_l>:
 8026ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ab4:	ed2d 8b0a 	vpush	{d8-d12}
 8026ab8:	b097      	sub	sp, #92	@ 0x5c
 8026aba:	4688      	mov	r8, r1
 8026abc:	920e      	str	r2, [sp, #56]	@ 0x38
 8026abe:	2200      	movs	r2, #0
 8026ac0:	9212      	str	r2, [sp, #72]	@ 0x48
 8026ac2:	9005      	str	r0, [sp, #20]
 8026ac4:	f04f 0a00 	mov.w	sl, #0
 8026ac8:	f04f 0b00 	mov.w	fp, #0
 8026acc:	460a      	mov	r2, r1
 8026ace:	9211      	str	r2, [sp, #68]	@ 0x44
 8026ad0:	7811      	ldrb	r1, [r2, #0]
 8026ad2:	292b      	cmp	r1, #43	@ 0x2b
 8026ad4:	d04c      	beq.n	8026b70 <_strtod_l+0xc0>
 8026ad6:	d839      	bhi.n	8026b4c <_strtod_l+0x9c>
 8026ad8:	290d      	cmp	r1, #13
 8026ada:	d833      	bhi.n	8026b44 <_strtod_l+0x94>
 8026adc:	2908      	cmp	r1, #8
 8026ade:	d833      	bhi.n	8026b48 <_strtod_l+0x98>
 8026ae0:	2900      	cmp	r1, #0
 8026ae2:	d03c      	beq.n	8026b5e <_strtod_l+0xae>
 8026ae4:	2200      	movs	r2, #0
 8026ae6:	9208      	str	r2, [sp, #32]
 8026ae8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026aea:	782a      	ldrb	r2, [r5, #0]
 8026aec:	2a30      	cmp	r2, #48	@ 0x30
 8026aee:	f040 80b7 	bne.w	8026c60 <_strtod_l+0x1b0>
 8026af2:	786a      	ldrb	r2, [r5, #1]
 8026af4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026af8:	2a58      	cmp	r2, #88	@ 0x58
 8026afa:	d170      	bne.n	8026bde <_strtod_l+0x12e>
 8026afc:	9302      	str	r3, [sp, #8]
 8026afe:	9b08      	ldr	r3, [sp, #32]
 8026b00:	9301      	str	r3, [sp, #4]
 8026b02:	ab12      	add	r3, sp, #72	@ 0x48
 8026b04:	9300      	str	r3, [sp, #0]
 8026b06:	4a90      	ldr	r2, [pc, #576]	@ (8026d48 <_strtod_l+0x298>)
 8026b08:	9805      	ldr	r0, [sp, #20]
 8026b0a:	ab13      	add	r3, sp, #76	@ 0x4c
 8026b0c:	a911      	add	r1, sp, #68	@ 0x44
 8026b0e:	f003 ff2f 	bl	802a970 <__gethex>
 8026b12:	f010 060f 	ands.w	r6, r0, #15
 8026b16:	4604      	mov	r4, r0
 8026b18:	d005      	beq.n	8026b26 <_strtod_l+0x76>
 8026b1a:	2e06      	cmp	r6, #6
 8026b1c:	d12a      	bne.n	8026b74 <_strtod_l+0xc4>
 8026b1e:	3501      	adds	r5, #1
 8026b20:	2300      	movs	r3, #0
 8026b22:	9511      	str	r5, [sp, #68]	@ 0x44
 8026b24:	9308      	str	r3, [sp, #32]
 8026b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026b28:	2b00      	cmp	r3, #0
 8026b2a:	f040 8537 	bne.w	802759c <_strtod_l+0xaec>
 8026b2e:	9b08      	ldr	r3, [sp, #32]
 8026b30:	ec4b ab10 	vmov	d0, sl, fp
 8026b34:	b1cb      	cbz	r3, 8026b6a <_strtod_l+0xba>
 8026b36:	eeb1 0b40 	vneg.f64	d0, d0
 8026b3a:	b017      	add	sp, #92	@ 0x5c
 8026b3c:	ecbd 8b0a 	vpop	{d8-d12}
 8026b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b44:	2920      	cmp	r1, #32
 8026b46:	d1cd      	bne.n	8026ae4 <_strtod_l+0x34>
 8026b48:	3201      	adds	r2, #1
 8026b4a:	e7c0      	b.n	8026ace <_strtod_l+0x1e>
 8026b4c:	292d      	cmp	r1, #45	@ 0x2d
 8026b4e:	d1c9      	bne.n	8026ae4 <_strtod_l+0x34>
 8026b50:	2101      	movs	r1, #1
 8026b52:	9108      	str	r1, [sp, #32]
 8026b54:	1c51      	adds	r1, r2, #1
 8026b56:	9111      	str	r1, [sp, #68]	@ 0x44
 8026b58:	7852      	ldrb	r2, [r2, #1]
 8026b5a:	2a00      	cmp	r2, #0
 8026b5c:	d1c4      	bne.n	8026ae8 <_strtod_l+0x38>
 8026b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026b60:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	f040 8517 	bne.w	8027598 <_strtod_l+0xae8>
 8026b6a:	ec4b ab10 	vmov	d0, sl, fp
 8026b6e:	e7e4      	b.n	8026b3a <_strtod_l+0x8a>
 8026b70:	2100      	movs	r1, #0
 8026b72:	e7ee      	b.n	8026b52 <_strtod_l+0xa2>
 8026b74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026b76:	b13a      	cbz	r2, 8026b88 <_strtod_l+0xd8>
 8026b78:	2135      	movs	r1, #53	@ 0x35
 8026b7a:	a814      	add	r0, sp, #80	@ 0x50
 8026b7c:	f004 fe83 	bl	802b886 <__copybits>
 8026b80:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026b82:	9805      	ldr	r0, [sp, #20]
 8026b84:	f004 fa5c 	bl	802b040 <_Bfree>
 8026b88:	1e73      	subs	r3, r6, #1
 8026b8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026b8c:	2b04      	cmp	r3, #4
 8026b8e:	d806      	bhi.n	8026b9e <_strtod_l+0xee>
 8026b90:	e8df f003 	tbb	[pc, r3]
 8026b94:	201d0314 	.word	0x201d0314
 8026b98:	14          	.byte	0x14
 8026b99:	00          	.byte	0x00
 8026b9a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8026b9e:	05e3      	lsls	r3, r4, #23
 8026ba0:	bf48      	it	mi
 8026ba2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8026ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8026baa:	0d1b      	lsrs	r3, r3, #20
 8026bac:	051b      	lsls	r3, r3, #20
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	d1b9      	bne.n	8026b26 <_strtod_l+0x76>
 8026bb2:	f002 ffed 	bl	8029b90 <__errno>
 8026bb6:	2322      	movs	r3, #34	@ 0x22
 8026bb8:	6003      	str	r3, [r0, #0]
 8026bba:	e7b4      	b.n	8026b26 <_strtod_l+0x76>
 8026bbc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8026bc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8026bc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026bc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8026bcc:	e7e7      	b.n	8026b9e <_strtod_l+0xee>
 8026bce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8026d50 <_strtod_l+0x2a0>
 8026bd2:	e7e4      	b.n	8026b9e <_strtod_l+0xee>
 8026bd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8026bd8:	f04f 3aff 	mov.w	sl, #4294967295
 8026bdc:	e7df      	b.n	8026b9e <_strtod_l+0xee>
 8026bde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026be0:	1c5a      	adds	r2, r3, #1
 8026be2:	9211      	str	r2, [sp, #68]	@ 0x44
 8026be4:	785b      	ldrb	r3, [r3, #1]
 8026be6:	2b30      	cmp	r3, #48	@ 0x30
 8026be8:	d0f9      	beq.n	8026bde <_strtod_l+0x12e>
 8026bea:	2b00      	cmp	r3, #0
 8026bec:	d09b      	beq.n	8026b26 <_strtod_l+0x76>
 8026bee:	2301      	movs	r3, #1
 8026bf0:	9307      	str	r3, [sp, #28]
 8026bf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8026bf6:	2300      	movs	r3, #0
 8026bf8:	9306      	str	r3, [sp, #24]
 8026bfa:	4699      	mov	r9, r3
 8026bfc:	461d      	mov	r5, r3
 8026bfe:	220a      	movs	r2, #10
 8026c00:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026c02:	7804      	ldrb	r4, [r0, #0]
 8026c04:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8026c08:	b2d9      	uxtb	r1, r3
 8026c0a:	2909      	cmp	r1, #9
 8026c0c:	d92a      	bls.n	8026c64 <_strtod_l+0x1b4>
 8026c0e:	494f      	ldr	r1, [pc, #316]	@ (8026d4c <_strtod_l+0x29c>)
 8026c10:	2201      	movs	r2, #1
 8026c12:	f001 fdda 	bl	80287ca <strncmp>
 8026c16:	b398      	cbz	r0, 8026c80 <_strtod_l+0x1d0>
 8026c18:	2000      	movs	r0, #0
 8026c1a:	4622      	mov	r2, r4
 8026c1c:	462b      	mov	r3, r5
 8026c1e:	4607      	mov	r7, r0
 8026c20:	4601      	mov	r1, r0
 8026c22:	2a65      	cmp	r2, #101	@ 0x65
 8026c24:	d001      	beq.n	8026c2a <_strtod_l+0x17a>
 8026c26:	2a45      	cmp	r2, #69	@ 0x45
 8026c28:	d118      	bne.n	8026c5c <_strtod_l+0x1ac>
 8026c2a:	b91b      	cbnz	r3, 8026c34 <_strtod_l+0x184>
 8026c2c:	9b07      	ldr	r3, [sp, #28]
 8026c2e:	4303      	orrs	r3, r0
 8026c30:	d095      	beq.n	8026b5e <_strtod_l+0xae>
 8026c32:	2300      	movs	r3, #0
 8026c34:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8026c38:	f108 0201 	add.w	r2, r8, #1
 8026c3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8026c3e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8026c42:	2a2b      	cmp	r2, #43	@ 0x2b
 8026c44:	d074      	beq.n	8026d30 <_strtod_l+0x280>
 8026c46:	2a2d      	cmp	r2, #45	@ 0x2d
 8026c48:	d07a      	beq.n	8026d40 <_strtod_l+0x290>
 8026c4a:	f04f 0e00 	mov.w	lr, #0
 8026c4e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8026c52:	2c09      	cmp	r4, #9
 8026c54:	f240 8082 	bls.w	8026d5c <_strtod_l+0x2ac>
 8026c58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8026c5c:	2400      	movs	r4, #0
 8026c5e:	e09d      	b.n	8026d9c <_strtod_l+0x2ec>
 8026c60:	2300      	movs	r3, #0
 8026c62:	e7c5      	b.n	8026bf0 <_strtod_l+0x140>
 8026c64:	2d08      	cmp	r5, #8
 8026c66:	bfc8      	it	gt
 8026c68:	9906      	ldrgt	r1, [sp, #24]
 8026c6a:	f100 0001 	add.w	r0, r0, #1
 8026c6e:	bfca      	itet	gt
 8026c70:	fb02 3301 	mlagt	r3, r2, r1, r3
 8026c74:	fb02 3909 	mlale	r9, r2, r9, r3
 8026c78:	9306      	strgt	r3, [sp, #24]
 8026c7a:	3501      	adds	r5, #1
 8026c7c:	9011      	str	r0, [sp, #68]	@ 0x44
 8026c7e:	e7bf      	b.n	8026c00 <_strtod_l+0x150>
 8026c80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c82:	1c5a      	adds	r2, r3, #1
 8026c84:	9211      	str	r2, [sp, #68]	@ 0x44
 8026c86:	785a      	ldrb	r2, [r3, #1]
 8026c88:	b3bd      	cbz	r5, 8026cfa <_strtod_l+0x24a>
 8026c8a:	4607      	mov	r7, r0
 8026c8c:	462b      	mov	r3, r5
 8026c8e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8026c92:	2909      	cmp	r1, #9
 8026c94:	d912      	bls.n	8026cbc <_strtod_l+0x20c>
 8026c96:	2101      	movs	r1, #1
 8026c98:	e7c3      	b.n	8026c22 <_strtod_l+0x172>
 8026c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c9c:	1c5a      	adds	r2, r3, #1
 8026c9e:	9211      	str	r2, [sp, #68]	@ 0x44
 8026ca0:	785a      	ldrb	r2, [r3, #1]
 8026ca2:	3001      	adds	r0, #1
 8026ca4:	2a30      	cmp	r2, #48	@ 0x30
 8026ca6:	d0f8      	beq.n	8026c9a <_strtod_l+0x1ea>
 8026ca8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8026cac:	2b08      	cmp	r3, #8
 8026cae:	f200 847a 	bhi.w	80275a6 <_strtod_l+0xaf6>
 8026cb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026cb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8026cb6:	4607      	mov	r7, r0
 8026cb8:	2000      	movs	r0, #0
 8026cba:	4603      	mov	r3, r0
 8026cbc:	3a30      	subs	r2, #48	@ 0x30
 8026cbe:	f100 0101 	add.w	r1, r0, #1
 8026cc2:	d014      	beq.n	8026cee <_strtod_l+0x23e>
 8026cc4:	440f      	add	r7, r1
 8026cc6:	469c      	mov	ip, r3
 8026cc8:	f04f 0e0a 	mov.w	lr, #10
 8026ccc:	f10c 0401 	add.w	r4, ip, #1
 8026cd0:	1ae6      	subs	r6, r4, r3
 8026cd2:	42b1      	cmp	r1, r6
 8026cd4:	dc13      	bgt.n	8026cfe <_strtod_l+0x24e>
 8026cd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8026cda:	1819      	adds	r1, r3, r0
 8026cdc:	2908      	cmp	r1, #8
 8026cde:	f103 0301 	add.w	r3, r3, #1
 8026ce2:	4403      	add	r3, r0
 8026ce4:	dc19      	bgt.n	8026d1a <_strtod_l+0x26a>
 8026ce6:	210a      	movs	r1, #10
 8026ce8:	fb01 2909 	mla	r9, r1, r9, r2
 8026cec:	2100      	movs	r1, #0
 8026cee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026cf0:	1c50      	adds	r0, r2, #1
 8026cf2:	9011      	str	r0, [sp, #68]	@ 0x44
 8026cf4:	7852      	ldrb	r2, [r2, #1]
 8026cf6:	4608      	mov	r0, r1
 8026cf8:	e7c9      	b.n	8026c8e <_strtod_l+0x1de>
 8026cfa:	4628      	mov	r0, r5
 8026cfc:	e7d2      	b.n	8026ca4 <_strtod_l+0x1f4>
 8026cfe:	f1bc 0f08 	cmp.w	ip, #8
 8026d02:	dc03      	bgt.n	8026d0c <_strtod_l+0x25c>
 8026d04:	fb0e f909 	mul.w	r9, lr, r9
 8026d08:	46a4      	mov	ip, r4
 8026d0a:	e7df      	b.n	8026ccc <_strtod_l+0x21c>
 8026d0c:	2c10      	cmp	r4, #16
 8026d0e:	bfde      	ittt	le
 8026d10:	9e06      	ldrle	r6, [sp, #24]
 8026d12:	fb0e f606 	mulle.w	r6, lr, r6
 8026d16:	9606      	strle	r6, [sp, #24]
 8026d18:	e7f6      	b.n	8026d08 <_strtod_l+0x258>
 8026d1a:	290f      	cmp	r1, #15
 8026d1c:	bfdf      	itttt	le
 8026d1e:	9806      	ldrle	r0, [sp, #24]
 8026d20:	210a      	movle	r1, #10
 8026d22:	fb01 2200 	mlale	r2, r1, r0, r2
 8026d26:	9206      	strle	r2, [sp, #24]
 8026d28:	e7e0      	b.n	8026cec <_strtod_l+0x23c>
 8026d2a:	2700      	movs	r7, #0
 8026d2c:	2101      	movs	r1, #1
 8026d2e:	e77d      	b.n	8026c2c <_strtod_l+0x17c>
 8026d30:	f04f 0e00 	mov.w	lr, #0
 8026d34:	f108 0202 	add.w	r2, r8, #2
 8026d38:	9211      	str	r2, [sp, #68]	@ 0x44
 8026d3a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8026d3e:	e786      	b.n	8026c4e <_strtod_l+0x19e>
 8026d40:	f04f 0e01 	mov.w	lr, #1
 8026d44:	e7f6      	b.n	8026d34 <_strtod_l+0x284>
 8026d46:	bf00      	nop
 8026d48:	0803ebb0 	.word	0x0803ebb0
 8026d4c:	0803e87d 	.word	0x0803e87d
 8026d50:	7ff00000 	.word	0x7ff00000
 8026d54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d56:	1c54      	adds	r4, r2, #1
 8026d58:	9411      	str	r4, [sp, #68]	@ 0x44
 8026d5a:	7852      	ldrb	r2, [r2, #1]
 8026d5c:	2a30      	cmp	r2, #48	@ 0x30
 8026d5e:	d0f9      	beq.n	8026d54 <_strtod_l+0x2a4>
 8026d60:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8026d64:	2c08      	cmp	r4, #8
 8026d66:	f63f af79 	bhi.w	8026c5c <_strtod_l+0x1ac>
 8026d6a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8026d6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d70:	9209      	str	r2, [sp, #36]	@ 0x24
 8026d72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026d74:	1c54      	adds	r4, r2, #1
 8026d76:	9411      	str	r4, [sp, #68]	@ 0x44
 8026d78:	7852      	ldrb	r2, [r2, #1]
 8026d7a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8026d7e:	2e09      	cmp	r6, #9
 8026d80:	d937      	bls.n	8026df2 <_strtod_l+0x342>
 8026d82:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8026d84:	1ba4      	subs	r4, r4, r6
 8026d86:	2c08      	cmp	r4, #8
 8026d88:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8026d8c:	dc02      	bgt.n	8026d94 <_strtod_l+0x2e4>
 8026d8e:	4564      	cmp	r4, ip
 8026d90:	bfa8      	it	ge
 8026d92:	4664      	movge	r4, ip
 8026d94:	f1be 0f00 	cmp.w	lr, #0
 8026d98:	d000      	beq.n	8026d9c <_strtod_l+0x2ec>
 8026d9a:	4264      	negs	r4, r4
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	d14d      	bne.n	8026e3c <_strtod_l+0x38c>
 8026da0:	9b07      	ldr	r3, [sp, #28]
 8026da2:	4318      	orrs	r0, r3
 8026da4:	f47f aebf 	bne.w	8026b26 <_strtod_l+0x76>
 8026da8:	2900      	cmp	r1, #0
 8026daa:	f47f aed8 	bne.w	8026b5e <_strtod_l+0xae>
 8026dae:	2a69      	cmp	r2, #105	@ 0x69
 8026db0:	d027      	beq.n	8026e02 <_strtod_l+0x352>
 8026db2:	dc24      	bgt.n	8026dfe <_strtod_l+0x34e>
 8026db4:	2a49      	cmp	r2, #73	@ 0x49
 8026db6:	d024      	beq.n	8026e02 <_strtod_l+0x352>
 8026db8:	2a4e      	cmp	r2, #78	@ 0x4e
 8026dba:	f47f aed0 	bne.w	8026b5e <_strtod_l+0xae>
 8026dbe:	4997      	ldr	r1, [pc, #604]	@ (802701c <_strtod_l+0x56c>)
 8026dc0:	a811      	add	r0, sp, #68	@ 0x44
 8026dc2:	f003 fff7 	bl	802adb4 <__match>
 8026dc6:	2800      	cmp	r0, #0
 8026dc8:	f43f aec9 	beq.w	8026b5e <_strtod_l+0xae>
 8026dcc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026dce:	781b      	ldrb	r3, [r3, #0]
 8026dd0:	2b28      	cmp	r3, #40	@ 0x28
 8026dd2:	d12d      	bne.n	8026e30 <_strtod_l+0x380>
 8026dd4:	4992      	ldr	r1, [pc, #584]	@ (8027020 <_strtod_l+0x570>)
 8026dd6:	aa14      	add	r2, sp, #80	@ 0x50
 8026dd8:	a811      	add	r0, sp, #68	@ 0x44
 8026dda:	f003 ffff 	bl	802addc <__hexnan>
 8026dde:	2805      	cmp	r0, #5
 8026de0:	d126      	bne.n	8026e30 <_strtod_l+0x380>
 8026de2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026de4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8026de8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8026dec:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8026df0:	e699      	b.n	8026b26 <_strtod_l+0x76>
 8026df2:	240a      	movs	r4, #10
 8026df4:	fb04 2c0c 	mla	ip, r4, ip, r2
 8026df8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8026dfc:	e7b9      	b.n	8026d72 <_strtod_l+0x2c2>
 8026dfe:	2a6e      	cmp	r2, #110	@ 0x6e
 8026e00:	e7db      	b.n	8026dba <_strtod_l+0x30a>
 8026e02:	4988      	ldr	r1, [pc, #544]	@ (8027024 <_strtod_l+0x574>)
 8026e04:	a811      	add	r0, sp, #68	@ 0x44
 8026e06:	f003 ffd5 	bl	802adb4 <__match>
 8026e0a:	2800      	cmp	r0, #0
 8026e0c:	f43f aea7 	beq.w	8026b5e <_strtod_l+0xae>
 8026e10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e12:	4985      	ldr	r1, [pc, #532]	@ (8027028 <_strtod_l+0x578>)
 8026e14:	3b01      	subs	r3, #1
 8026e16:	a811      	add	r0, sp, #68	@ 0x44
 8026e18:	9311      	str	r3, [sp, #68]	@ 0x44
 8026e1a:	f003 ffcb 	bl	802adb4 <__match>
 8026e1e:	b910      	cbnz	r0, 8026e26 <_strtod_l+0x376>
 8026e20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026e22:	3301      	adds	r3, #1
 8026e24:	9311      	str	r3, [sp, #68]	@ 0x44
 8026e26:	f8df b214 	ldr.w	fp, [pc, #532]	@ 802703c <_strtod_l+0x58c>
 8026e2a:	f04f 0a00 	mov.w	sl, #0
 8026e2e:	e67a      	b.n	8026b26 <_strtod_l+0x76>
 8026e30:	487e      	ldr	r0, [pc, #504]	@ (802702c <_strtod_l+0x57c>)
 8026e32:	f002 fef5 	bl	8029c20 <nan>
 8026e36:	ec5b ab10 	vmov	sl, fp, d0
 8026e3a:	e674      	b.n	8026b26 <_strtod_l+0x76>
 8026e3c:	ee07 9a90 	vmov	s15, r9
 8026e40:	1be2      	subs	r2, r4, r7
 8026e42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026e46:	2d00      	cmp	r5, #0
 8026e48:	bf08      	it	eq
 8026e4a:	461d      	moveq	r5, r3
 8026e4c:	2b10      	cmp	r3, #16
 8026e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8026e50:	461a      	mov	r2, r3
 8026e52:	bfa8      	it	ge
 8026e54:	2210      	movge	r2, #16
 8026e56:	2b09      	cmp	r3, #9
 8026e58:	ec5b ab17 	vmov	sl, fp, d7
 8026e5c:	dc15      	bgt.n	8026e8a <_strtod_l+0x3da>
 8026e5e:	1be1      	subs	r1, r4, r7
 8026e60:	2900      	cmp	r1, #0
 8026e62:	f43f ae60 	beq.w	8026b26 <_strtod_l+0x76>
 8026e66:	eba4 0107 	sub.w	r1, r4, r7
 8026e6a:	dd72      	ble.n	8026f52 <_strtod_l+0x4a2>
 8026e6c:	2916      	cmp	r1, #22
 8026e6e:	dc59      	bgt.n	8026f24 <_strtod_l+0x474>
 8026e70:	4b6f      	ldr	r3, [pc, #444]	@ (8027030 <_strtod_l+0x580>)
 8026e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026e78:	ed93 7b00 	vldr	d7, [r3]
 8026e7c:	ec4b ab16 	vmov	d6, sl, fp
 8026e80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026e84:	ec5b ab17 	vmov	sl, fp, d7
 8026e88:	e64d      	b.n	8026b26 <_strtod_l+0x76>
 8026e8a:	4969      	ldr	r1, [pc, #420]	@ (8027030 <_strtod_l+0x580>)
 8026e8c:	eddd 6a06 	vldr	s13, [sp, #24]
 8026e90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8026e94:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8026e98:	2b0f      	cmp	r3, #15
 8026e9a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8026e9e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026ea2:	ec5b ab16 	vmov	sl, fp, d6
 8026ea6:	ddda      	ble.n	8026e5e <_strtod_l+0x3ae>
 8026ea8:	1a9a      	subs	r2, r3, r2
 8026eaa:	1be1      	subs	r1, r4, r7
 8026eac:	440a      	add	r2, r1
 8026eae:	2a00      	cmp	r2, #0
 8026eb0:	f340 8094 	ble.w	8026fdc <_strtod_l+0x52c>
 8026eb4:	f012 000f 	ands.w	r0, r2, #15
 8026eb8:	d00a      	beq.n	8026ed0 <_strtod_l+0x420>
 8026eba:	495d      	ldr	r1, [pc, #372]	@ (8027030 <_strtod_l+0x580>)
 8026ebc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026ec0:	ed91 7b00 	vldr	d7, [r1]
 8026ec4:	ec4b ab16 	vmov	d6, sl, fp
 8026ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026ecc:	ec5b ab17 	vmov	sl, fp, d7
 8026ed0:	f032 020f 	bics.w	r2, r2, #15
 8026ed4:	d073      	beq.n	8026fbe <_strtod_l+0x50e>
 8026ed6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8026eda:	dd47      	ble.n	8026f6c <_strtod_l+0x4bc>
 8026edc:	2400      	movs	r4, #0
 8026ede:	4625      	mov	r5, r4
 8026ee0:	9407      	str	r4, [sp, #28]
 8026ee2:	4626      	mov	r6, r4
 8026ee4:	9a05      	ldr	r2, [sp, #20]
 8026ee6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802703c <_strtod_l+0x58c>
 8026eea:	2322      	movs	r3, #34	@ 0x22
 8026eec:	6013      	str	r3, [r2, #0]
 8026eee:	f04f 0a00 	mov.w	sl, #0
 8026ef2:	9b07      	ldr	r3, [sp, #28]
 8026ef4:	2b00      	cmp	r3, #0
 8026ef6:	f43f ae16 	beq.w	8026b26 <_strtod_l+0x76>
 8026efa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026efc:	9805      	ldr	r0, [sp, #20]
 8026efe:	f004 f89f 	bl	802b040 <_Bfree>
 8026f02:	9805      	ldr	r0, [sp, #20]
 8026f04:	4631      	mov	r1, r6
 8026f06:	f004 f89b 	bl	802b040 <_Bfree>
 8026f0a:	9805      	ldr	r0, [sp, #20]
 8026f0c:	4629      	mov	r1, r5
 8026f0e:	f004 f897 	bl	802b040 <_Bfree>
 8026f12:	9907      	ldr	r1, [sp, #28]
 8026f14:	9805      	ldr	r0, [sp, #20]
 8026f16:	f004 f893 	bl	802b040 <_Bfree>
 8026f1a:	9805      	ldr	r0, [sp, #20]
 8026f1c:	4621      	mov	r1, r4
 8026f1e:	f004 f88f 	bl	802b040 <_Bfree>
 8026f22:	e600      	b.n	8026b26 <_strtod_l+0x76>
 8026f24:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8026f28:	1be0      	subs	r0, r4, r7
 8026f2a:	4281      	cmp	r1, r0
 8026f2c:	dbbc      	blt.n	8026ea8 <_strtod_l+0x3f8>
 8026f2e:	4a40      	ldr	r2, [pc, #256]	@ (8027030 <_strtod_l+0x580>)
 8026f30:	f1c3 030f 	rsb	r3, r3, #15
 8026f34:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8026f38:	ed91 7b00 	vldr	d7, [r1]
 8026f3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026f3e:	ec4b ab16 	vmov	d6, sl, fp
 8026f42:	1acb      	subs	r3, r1, r3
 8026f44:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8026f48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026f4c:	ed92 6b00 	vldr	d6, [r2]
 8026f50:	e796      	b.n	8026e80 <_strtod_l+0x3d0>
 8026f52:	3116      	adds	r1, #22
 8026f54:	dba8      	blt.n	8026ea8 <_strtod_l+0x3f8>
 8026f56:	4b36      	ldr	r3, [pc, #216]	@ (8027030 <_strtod_l+0x580>)
 8026f58:	1b3c      	subs	r4, r7, r4
 8026f5a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8026f5e:	ed94 7b00 	vldr	d7, [r4]
 8026f62:	ec4b ab16 	vmov	d6, sl, fp
 8026f66:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026f6a:	e78b      	b.n	8026e84 <_strtod_l+0x3d4>
 8026f6c:	2000      	movs	r0, #0
 8026f6e:	ec4b ab17 	vmov	d7, sl, fp
 8026f72:	4e30      	ldr	r6, [pc, #192]	@ (8027034 <_strtod_l+0x584>)
 8026f74:	1112      	asrs	r2, r2, #4
 8026f76:	4601      	mov	r1, r0
 8026f78:	2a01      	cmp	r2, #1
 8026f7a:	dc23      	bgt.n	8026fc4 <_strtod_l+0x514>
 8026f7c:	b108      	cbz	r0, 8026f82 <_strtod_l+0x4d2>
 8026f7e:	ec5b ab17 	vmov	sl, fp, d7
 8026f82:	4a2c      	ldr	r2, [pc, #176]	@ (8027034 <_strtod_l+0x584>)
 8026f84:	482c      	ldr	r0, [pc, #176]	@ (8027038 <_strtod_l+0x588>)
 8026f86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8026f8a:	ed92 7b00 	vldr	d7, [r2]
 8026f8e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8026f92:	ec4b ab16 	vmov	d6, sl, fp
 8026f96:	4a29      	ldr	r2, [pc, #164]	@ (802703c <_strtod_l+0x58c>)
 8026f98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026f9c:	ee17 1a90 	vmov	r1, s15
 8026fa0:	400a      	ands	r2, r1
 8026fa2:	4282      	cmp	r2, r0
 8026fa4:	ec5b ab17 	vmov	sl, fp, d7
 8026fa8:	d898      	bhi.n	8026edc <_strtod_l+0x42c>
 8026faa:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8026fae:	4282      	cmp	r2, r0
 8026fb0:	bf86      	itte	hi
 8026fb2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8027040 <_strtod_l+0x590>
 8026fb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8026fba:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8026fbe:	2200      	movs	r2, #0
 8026fc0:	9206      	str	r2, [sp, #24]
 8026fc2:	e076      	b.n	80270b2 <_strtod_l+0x602>
 8026fc4:	f012 0f01 	tst.w	r2, #1
 8026fc8:	d004      	beq.n	8026fd4 <_strtod_l+0x524>
 8026fca:	ed96 6b00 	vldr	d6, [r6]
 8026fce:	2001      	movs	r0, #1
 8026fd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026fd4:	3101      	adds	r1, #1
 8026fd6:	1052      	asrs	r2, r2, #1
 8026fd8:	3608      	adds	r6, #8
 8026fda:	e7cd      	b.n	8026f78 <_strtod_l+0x4c8>
 8026fdc:	d0ef      	beq.n	8026fbe <_strtod_l+0x50e>
 8026fde:	4252      	negs	r2, r2
 8026fe0:	f012 000f 	ands.w	r0, r2, #15
 8026fe4:	d00a      	beq.n	8026ffc <_strtod_l+0x54c>
 8026fe6:	4912      	ldr	r1, [pc, #72]	@ (8027030 <_strtod_l+0x580>)
 8026fe8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8026fec:	ed91 7b00 	vldr	d7, [r1]
 8026ff0:	ec4b ab16 	vmov	d6, sl, fp
 8026ff4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026ff8:	ec5b ab17 	vmov	sl, fp, d7
 8026ffc:	1112      	asrs	r2, r2, #4
 8026ffe:	d0de      	beq.n	8026fbe <_strtod_l+0x50e>
 8027000:	2a1f      	cmp	r2, #31
 8027002:	dd1f      	ble.n	8027044 <_strtod_l+0x594>
 8027004:	2400      	movs	r4, #0
 8027006:	4625      	mov	r5, r4
 8027008:	9407      	str	r4, [sp, #28]
 802700a:	4626      	mov	r6, r4
 802700c:	9a05      	ldr	r2, [sp, #20]
 802700e:	2322      	movs	r3, #34	@ 0x22
 8027010:	f04f 0a00 	mov.w	sl, #0
 8027014:	f04f 0b00 	mov.w	fp, #0
 8027018:	6013      	str	r3, [r2, #0]
 802701a:	e76a      	b.n	8026ef2 <_strtod_l+0x442>
 802701c:	0803e929 	.word	0x0803e929
 8027020:	0803eb9c 	.word	0x0803eb9c
 8027024:	0803e884 	.word	0x0803e884
 8027028:	0803ea44 	.word	0x0803ea44
 802702c:	0803e80d 	.word	0x0803e80d
 8027030:	0803eeb8 	.word	0x0803eeb8
 8027034:	0803ee90 	.word	0x0803ee90
 8027038:	7ca00000 	.word	0x7ca00000
 802703c:	7ff00000 	.word	0x7ff00000
 8027040:	7fefffff 	.word	0x7fefffff
 8027044:	f012 0110 	ands.w	r1, r2, #16
 8027048:	bf18      	it	ne
 802704a:	216a      	movne	r1, #106	@ 0x6a
 802704c:	9106      	str	r1, [sp, #24]
 802704e:	ec4b ab17 	vmov	d7, sl, fp
 8027052:	49af      	ldr	r1, [pc, #700]	@ (8027310 <_strtod_l+0x860>)
 8027054:	2000      	movs	r0, #0
 8027056:	07d6      	lsls	r6, r2, #31
 8027058:	d504      	bpl.n	8027064 <_strtod_l+0x5b4>
 802705a:	ed91 6b00 	vldr	d6, [r1]
 802705e:	2001      	movs	r0, #1
 8027060:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027064:	1052      	asrs	r2, r2, #1
 8027066:	f101 0108 	add.w	r1, r1, #8
 802706a:	d1f4      	bne.n	8027056 <_strtod_l+0x5a6>
 802706c:	b108      	cbz	r0, 8027072 <_strtod_l+0x5c2>
 802706e:	ec5b ab17 	vmov	sl, fp, d7
 8027072:	9a06      	ldr	r2, [sp, #24]
 8027074:	b1b2      	cbz	r2, 80270a4 <_strtod_l+0x5f4>
 8027076:	f3cb 510a 	ubfx	r1, fp, #20, #11
 802707a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 802707e:	2a00      	cmp	r2, #0
 8027080:	4658      	mov	r0, fp
 8027082:	dd0f      	ble.n	80270a4 <_strtod_l+0x5f4>
 8027084:	2a1f      	cmp	r2, #31
 8027086:	dd55      	ble.n	8027134 <_strtod_l+0x684>
 8027088:	2a34      	cmp	r2, #52	@ 0x34
 802708a:	bfde      	ittt	le
 802708c:	f04f 32ff 	movle.w	r2, #4294967295
 8027090:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8027094:	408a      	lslle	r2, r1
 8027096:	f04f 0a00 	mov.w	sl, #0
 802709a:	bfcc      	ite	gt
 802709c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80270a0:	ea02 0b00 	andle.w	fp, r2, r0
 80270a4:	ec4b ab17 	vmov	d7, sl, fp
 80270a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80270ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270b0:	d0a8      	beq.n	8027004 <_strtod_l+0x554>
 80270b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80270b4:	9805      	ldr	r0, [sp, #20]
 80270b6:	f8cd 9000 	str.w	r9, [sp]
 80270ba:	462a      	mov	r2, r5
 80270bc:	f004 f828 	bl	802b110 <__s2b>
 80270c0:	9007      	str	r0, [sp, #28]
 80270c2:	2800      	cmp	r0, #0
 80270c4:	f43f af0a 	beq.w	8026edc <_strtod_l+0x42c>
 80270c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270ca:	1b3f      	subs	r7, r7, r4
 80270cc:	2b00      	cmp	r3, #0
 80270ce:	bfb4      	ite	lt
 80270d0:	463b      	movlt	r3, r7
 80270d2:	2300      	movge	r3, #0
 80270d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80270d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80270d8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8027300 <_strtod_l+0x850>
 80270dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80270e0:	2400      	movs	r4, #0
 80270e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80270e4:	4625      	mov	r5, r4
 80270e6:	9b07      	ldr	r3, [sp, #28]
 80270e8:	9805      	ldr	r0, [sp, #20]
 80270ea:	6859      	ldr	r1, [r3, #4]
 80270ec:	f003 ff68 	bl	802afc0 <_Balloc>
 80270f0:	4606      	mov	r6, r0
 80270f2:	2800      	cmp	r0, #0
 80270f4:	f43f aef6 	beq.w	8026ee4 <_strtod_l+0x434>
 80270f8:	9b07      	ldr	r3, [sp, #28]
 80270fa:	691a      	ldr	r2, [r3, #16]
 80270fc:	ec4b ab19 	vmov	d9, sl, fp
 8027100:	3202      	adds	r2, #2
 8027102:	f103 010c 	add.w	r1, r3, #12
 8027106:	0092      	lsls	r2, r2, #2
 8027108:	300c      	adds	r0, #12
 802710a:	f002 fd78 	bl	8029bfe <memcpy>
 802710e:	eeb0 0b49 	vmov.f64	d0, d9
 8027112:	9805      	ldr	r0, [sp, #20]
 8027114:	aa14      	add	r2, sp, #80	@ 0x50
 8027116:	a913      	add	r1, sp, #76	@ 0x4c
 8027118:	f004 fb2e 	bl	802b778 <__d2b>
 802711c:	9012      	str	r0, [sp, #72]	@ 0x48
 802711e:	2800      	cmp	r0, #0
 8027120:	f43f aee0 	beq.w	8026ee4 <_strtod_l+0x434>
 8027124:	9805      	ldr	r0, [sp, #20]
 8027126:	2101      	movs	r1, #1
 8027128:	f004 f888 	bl	802b23c <__i2b>
 802712c:	4605      	mov	r5, r0
 802712e:	b940      	cbnz	r0, 8027142 <_strtod_l+0x692>
 8027130:	2500      	movs	r5, #0
 8027132:	e6d7      	b.n	8026ee4 <_strtod_l+0x434>
 8027134:	f04f 31ff 	mov.w	r1, #4294967295
 8027138:	fa01 f202 	lsl.w	r2, r1, r2
 802713c:	ea02 0a0a 	and.w	sl, r2, sl
 8027140:	e7b0      	b.n	80270a4 <_strtod_l+0x5f4>
 8027142:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8027144:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027146:	2f00      	cmp	r7, #0
 8027148:	bfab      	itete	ge
 802714a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 802714c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 802714e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8027152:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8027156:	bfac      	ite	ge
 8027158:	eb07 0903 	addge.w	r9, r7, r3
 802715c:	eba3 0807 	sublt.w	r8, r3, r7
 8027160:	9b06      	ldr	r3, [sp, #24]
 8027162:	1aff      	subs	r7, r7, r3
 8027164:	4417      	add	r7, r2
 8027166:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 802716a:	4a6a      	ldr	r2, [pc, #424]	@ (8027314 <_strtod_l+0x864>)
 802716c:	3f01      	subs	r7, #1
 802716e:	4297      	cmp	r7, r2
 8027170:	da51      	bge.n	8027216 <_strtod_l+0x766>
 8027172:	1bd1      	subs	r1, r2, r7
 8027174:	291f      	cmp	r1, #31
 8027176:	eba3 0301 	sub.w	r3, r3, r1
 802717a:	f04f 0201 	mov.w	r2, #1
 802717e:	dc3e      	bgt.n	80271fe <_strtod_l+0x74e>
 8027180:	408a      	lsls	r2, r1
 8027182:	920c      	str	r2, [sp, #48]	@ 0x30
 8027184:	2200      	movs	r2, #0
 8027186:	920b      	str	r2, [sp, #44]	@ 0x2c
 8027188:	eb09 0703 	add.w	r7, r9, r3
 802718c:	4498      	add	r8, r3
 802718e:	9b06      	ldr	r3, [sp, #24]
 8027190:	45b9      	cmp	r9, r7
 8027192:	4498      	add	r8, r3
 8027194:	464b      	mov	r3, r9
 8027196:	bfa8      	it	ge
 8027198:	463b      	movge	r3, r7
 802719a:	4543      	cmp	r3, r8
 802719c:	bfa8      	it	ge
 802719e:	4643      	movge	r3, r8
 80271a0:	2b00      	cmp	r3, #0
 80271a2:	bfc2      	ittt	gt
 80271a4:	1aff      	subgt	r7, r7, r3
 80271a6:	eba8 0803 	subgt.w	r8, r8, r3
 80271aa:	eba9 0903 	subgt.w	r9, r9, r3
 80271ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80271b0:	2b00      	cmp	r3, #0
 80271b2:	dd16      	ble.n	80271e2 <_strtod_l+0x732>
 80271b4:	4629      	mov	r1, r5
 80271b6:	9805      	ldr	r0, [sp, #20]
 80271b8:	461a      	mov	r2, r3
 80271ba:	f004 f8f7 	bl	802b3ac <__pow5mult>
 80271be:	4605      	mov	r5, r0
 80271c0:	2800      	cmp	r0, #0
 80271c2:	d0b5      	beq.n	8027130 <_strtod_l+0x680>
 80271c4:	4601      	mov	r1, r0
 80271c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80271c8:	9805      	ldr	r0, [sp, #20]
 80271ca:	f004 f84d 	bl	802b268 <__multiply>
 80271ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80271d0:	2800      	cmp	r0, #0
 80271d2:	f43f ae87 	beq.w	8026ee4 <_strtod_l+0x434>
 80271d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80271d8:	9805      	ldr	r0, [sp, #20]
 80271da:	f003 ff31 	bl	802b040 <_Bfree>
 80271de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80271e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80271e2:	2f00      	cmp	r7, #0
 80271e4:	dc1b      	bgt.n	802721e <_strtod_l+0x76e>
 80271e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271e8:	2b00      	cmp	r3, #0
 80271ea:	dd21      	ble.n	8027230 <_strtod_l+0x780>
 80271ec:	4631      	mov	r1, r6
 80271ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80271f0:	9805      	ldr	r0, [sp, #20]
 80271f2:	f004 f8db 	bl	802b3ac <__pow5mult>
 80271f6:	4606      	mov	r6, r0
 80271f8:	b9d0      	cbnz	r0, 8027230 <_strtod_l+0x780>
 80271fa:	2600      	movs	r6, #0
 80271fc:	e672      	b.n	8026ee4 <_strtod_l+0x434>
 80271fe:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8027202:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8027206:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 802720a:	37e2      	adds	r7, #226	@ 0xe2
 802720c:	fa02 f107 	lsl.w	r1, r2, r7
 8027210:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027212:	920c      	str	r2, [sp, #48]	@ 0x30
 8027214:	e7b8      	b.n	8027188 <_strtod_l+0x6d8>
 8027216:	2200      	movs	r2, #0
 8027218:	920b      	str	r2, [sp, #44]	@ 0x2c
 802721a:	2201      	movs	r2, #1
 802721c:	e7f9      	b.n	8027212 <_strtod_l+0x762>
 802721e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027220:	9805      	ldr	r0, [sp, #20]
 8027222:	463a      	mov	r2, r7
 8027224:	f004 f91c 	bl	802b460 <__lshift>
 8027228:	9012      	str	r0, [sp, #72]	@ 0x48
 802722a:	2800      	cmp	r0, #0
 802722c:	d1db      	bne.n	80271e6 <_strtod_l+0x736>
 802722e:	e659      	b.n	8026ee4 <_strtod_l+0x434>
 8027230:	f1b8 0f00 	cmp.w	r8, #0
 8027234:	dd07      	ble.n	8027246 <_strtod_l+0x796>
 8027236:	4631      	mov	r1, r6
 8027238:	9805      	ldr	r0, [sp, #20]
 802723a:	4642      	mov	r2, r8
 802723c:	f004 f910 	bl	802b460 <__lshift>
 8027240:	4606      	mov	r6, r0
 8027242:	2800      	cmp	r0, #0
 8027244:	d0d9      	beq.n	80271fa <_strtod_l+0x74a>
 8027246:	f1b9 0f00 	cmp.w	r9, #0
 802724a:	dd08      	ble.n	802725e <_strtod_l+0x7ae>
 802724c:	4629      	mov	r1, r5
 802724e:	9805      	ldr	r0, [sp, #20]
 8027250:	464a      	mov	r2, r9
 8027252:	f004 f905 	bl	802b460 <__lshift>
 8027256:	4605      	mov	r5, r0
 8027258:	2800      	cmp	r0, #0
 802725a:	f43f ae43 	beq.w	8026ee4 <_strtod_l+0x434>
 802725e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027260:	9805      	ldr	r0, [sp, #20]
 8027262:	4632      	mov	r2, r6
 8027264:	f004 f984 	bl	802b570 <__mdiff>
 8027268:	4604      	mov	r4, r0
 802726a:	2800      	cmp	r0, #0
 802726c:	f43f ae3a 	beq.w	8026ee4 <_strtod_l+0x434>
 8027270:	2300      	movs	r3, #0
 8027272:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8027276:	60c3      	str	r3, [r0, #12]
 8027278:	4629      	mov	r1, r5
 802727a:	f004 f95d 	bl	802b538 <__mcmp>
 802727e:	2800      	cmp	r0, #0
 8027280:	da4c      	bge.n	802731c <_strtod_l+0x86c>
 8027282:	ea58 080a 	orrs.w	r8, r8, sl
 8027286:	d172      	bne.n	802736e <_strtod_l+0x8be>
 8027288:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802728c:	2b00      	cmp	r3, #0
 802728e:	d16e      	bne.n	802736e <_strtod_l+0x8be>
 8027290:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027294:	0d1b      	lsrs	r3, r3, #20
 8027296:	051b      	lsls	r3, r3, #20
 8027298:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802729c:	d967      	bls.n	802736e <_strtod_l+0x8be>
 802729e:	6963      	ldr	r3, [r4, #20]
 80272a0:	b913      	cbnz	r3, 80272a8 <_strtod_l+0x7f8>
 80272a2:	6923      	ldr	r3, [r4, #16]
 80272a4:	2b01      	cmp	r3, #1
 80272a6:	dd62      	ble.n	802736e <_strtod_l+0x8be>
 80272a8:	4621      	mov	r1, r4
 80272aa:	2201      	movs	r2, #1
 80272ac:	9805      	ldr	r0, [sp, #20]
 80272ae:	f004 f8d7 	bl	802b460 <__lshift>
 80272b2:	4629      	mov	r1, r5
 80272b4:	4604      	mov	r4, r0
 80272b6:	f004 f93f 	bl	802b538 <__mcmp>
 80272ba:	2800      	cmp	r0, #0
 80272bc:	dd57      	ble.n	802736e <_strtod_l+0x8be>
 80272be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80272c2:	9a06      	ldr	r2, [sp, #24]
 80272c4:	0d1b      	lsrs	r3, r3, #20
 80272c6:	051b      	lsls	r3, r3, #20
 80272c8:	2a00      	cmp	r2, #0
 80272ca:	d06e      	beq.n	80273aa <_strtod_l+0x8fa>
 80272cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80272d0:	d86b      	bhi.n	80273aa <_strtod_l+0x8fa>
 80272d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80272d6:	f67f ae99 	bls.w	802700c <_strtod_l+0x55c>
 80272da:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8027308 <_strtod_l+0x858>
 80272de:	ec4b ab16 	vmov	d6, sl, fp
 80272e2:	4b0d      	ldr	r3, [pc, #52]	@ (8027318 <_strtod_l+0x868>)
 80272e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80272e8:	ee17 2a90 	vmov	r2, s15
 80272ec:	4013      	ands	r3, r2
 80272ee:	ec5b ab17 	vmov	sl, fp, d7
 80272f2:	2b00      	cmp	r3, #0
 80272f4:	f47f ae01 	bne.w	8026efa <_strtod_l+0x44a>
 80272f8:	9a05      	ldr	r2, [sp, #20]
 80272fa:	2322      	movs	r3, #34	@ 0x22
 80272fc:	6013      	str	r3, [r2, #0]
 80272fe:	e5fc      	b.n	8026efa <_strtod_l+0x44a>
 8027300:	ffc00000 	.word	0xffc00000
 8027304:	41dfffff 	.word	0x41dfffff
 8027308:	00000000 	.word	0x00000000
 802730c:	39500000 	.word	0x39500000
 8027310:	0803ebc8 	.word	0x0803ebc8
 8027314:	fffffc02 	.word	0xfffffc02
 8027318:	7ff00000 	.word	0x7ff00000
 802731c:	46d9      	mov	r9, fp
 802731e:	d15d      	bne.n	80273dc <_strtod_l+0x92c>
 8027320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027324:	f1b8 0f00 	cmp.w	r8, #0
 8027328:	d02a      	beq.n	8027380 <_strtod_l+0x8d0>
 802732a:	4aa9      	ldr	r2, [pc, #676]	@ (80275d0 <_strtod_l+0xb20>)
 802732c:	4293      	cmp	r3, r2
 802732e:	d12a      	bne.n	8027386 <_strtod_l+0x8d6>
 8027330:	9b06      	ldr	r3, [sp, #24]
 8027332:	4652      	mov	r2, sl
 8027334:	b1fb      	cbz	r3, 8027376 <_strtod_l+0x8c6>
 8027336:	4ba7      	ldr	r3, [pc, #668]	@ (80275d4 <_strtod_l+0xb24>)
 8027338:	ea0b 0303 	and.w	r3, fp, r3
 802733c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8027340:	f04f 31ff 	mov.w	r1, #4294967295
 8027344:	d81a      	bhi.n	802737c <_strtod_l+0x8cc>
 8027346:	0d1b      	lsrs	r3, r3, #20
 8027348:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802734c:	fa01 f303 	lsl.w	r3, r1, r3
 8027350:	429a      	cmp	r2, r3
 8027352:	d118      	bne.n	8027386 <_strtod_l+0x8d6>
 8027354:	4ba0      	ldr	r3, [pc, #640]	@ (80275d8 <_strtod_l+0xb28>)
 8027356:	4599      	cmp	r9, r3
 8027358:	d102      	bne.n	8027360 <_strtod_l+0x8b0>
 802735a:	3201      	adds	r2, #1
 802735c:	f43f adc2 	beq.w	8026ee4 <_strtod_l+0x434>
 8027360:	4b9c      	ldr	r3, [pc, #624]	@ (80275d4 <_strtod_l+0xb24>)
 8027362:	ea09 0303 	and.w	r3, r9, r3
 8027366:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 802736a:	f04f 0a00 	mov.w	sl, #0
 802736e:	9b06      	ldr	r3, [sp, #24]
 8027370:	2b00      	cmp	r3, #0
 8027372:	d1b2      	bne.n	80272da <_strtod_l+0x82a>
 8027374:	e5c1      	b.n	8026efa <_strtod_l+0x44a>
 8027376:	f04f 33ff 	mov.w	r3, #4294967295
 802737a:	e7e9      	b.n	8027350 <_strtod_l+0x8a0>
 802737c:	460b      	mov	r3, r1
 802737e:	e7e7      	b.n	8027350 <_strtod_l+0x8a0>
 8027380:	ea53 030a 	orrs.w	r3, r3, sl
 8027384:	d09b      	beq.n	80272be <_strtod_l+0x80e>
 8027386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027388:	b1c3      	cbz	r3, 80273bc <_strtod_l+0x90c>
 802738a:	ea13 0f09 	tst.w	r3, r9
 802738e:	d0ee      	beq.n	802736e <_strtod_l+0x8be>
 8027390:	9a06      	ldr	r2, [sp, #24]
 8027392:	4650      	mov	r0, sl
 8027394:	4659      	mov	r1, fp
 8027396:	f1b8 0f00 	cmp.w	r8, #0
 802739a:	d013      	beq.n	80273c4 <_strtod_l+0x914>
 802739c:	f7ff fb6c 	bl	8026a78 <sulp>
 80273a0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80273a4:	ec5b ab17 	vmov	sl, fp, d7
 80273a8:	e7e1      	b.n	802736e <_strtod_l+0x8be>
 80273aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80273ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80273b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80273b6:	f04f 3aff 	mov.w	sl, #4294967295
 80273ba:	e7d8      	b.n	802736e <_strtod_l+0x8be>
 80273bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80273be:	ea13 0f0a 	tst.w	r3, sl
 80273c2:	e7e4      	b.n	802738e <_strtod_l+0x8de>
 80273c4:	f7ff fb58 	bl	8026a78 <sulp>
 80273c8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80273cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80273d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273d4:	ec5b ab10 	vmov	sl, fp, d0
 80273d8:	d1c9      	bne.n	802736e <_strtod_l+0x8be>
 80273da:	e617      	b.n	802700c <_strtod_l+0x55c>
 80273dc:	4629      	mov	r1, r5
 80273de:	4620      	mov	r0, r4
 80273e0:	f004 fa22 	bl	802b828 <__ratio>
 80273e4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80273e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80273ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273f0:	d85d      	bhi.n	80274ae <_strtod_l+0x9fe>
 80273f2:	f1b8 0f00 	cmp.w	r8, #0
 80273f6:	d164      	bne.n	80274c2 <_strtod_l+0xa12>
 80273f8:	f1ba 0f00 	cmp.w	sl, #0
 80273fc:	d14b      	bne.n	8027496 <_strtod_l+0x9e6>
 80273fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027402:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8027406:	2b00      	cmp	r3, #0
 8027408:	d160      	bne.n	80274cc <_strtod_l+0xa1c>
 802740a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 802740e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8027412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027416:	d401      	bmi.n	802741c <_strtod_l+0x96c>
 8027418:	ee20 8b08 	vmul.f64	d8, d0, d8
 802741c:	eeb1 ab48 	vneg.f64	d10, d8
 8027420:	486c      	ldr	r0, [pc, #432]	@ (80275d4 <_strtod_l+0xb24>)
 8027422:	496e      	ldr	r1, [pc, #440]	@ (80275dc <_strtod_l+0xb2c>)
 8027424:	ea09 0700 	and.w	r7, r9, r0
 8027428:	428f      	cmp	r7, r1
 802742a:	ec53 2b1a 	vmov	r2, r3, d10
 802742e:	d17d      	bne.n	802752c <_strtod_l+0xa7c>
 8027430:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8027434:	ec4b ab1c 	vmov	d12, sl, fp
 8027438:	eeb0 0b4c 	vmov.f64	d0, d12
 802743c:	f004 f92c 	bl	802b698 <__ulp>
 8027440:	4864      	ldr	r0, [pc, #400]	@ (80275d4 <_strtod_l+0xb24>)
 8027442:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8027446:	ee1c 3a90 	vmov	r3, s25
 802744a:	4a65      	ldr	r2, [pc, #404]	@ (80275e0 <_strtod_l+0xb30>)
 802744c:	ea03 0100 	and.w	r1, r3, r0
 8027450:	4291      	cmp	r1, r2
 8027452:	ec5b ab1c 	vmov	sl, fp, d12
 8027456:	d93c      	bls.n	80274d2 <_strtod_l+0xa22>
 8027458:	ee19 2a90 	vmov	r2, s19
 802745c:	4b5e      	ldr	r3, [pc, #376]	@ (80275d8 <_strtod_l+0xb28>)
 802745e:	429a      	cmp	r2, r3
 8027460:	d104      	bne.n	802746c <_strtod_l+0x9bc>
 8027462:	ee19 3a10 	vmov	r3, s18
 8027466:	3301      	adds	r3, #1
 8027468:	f43f ad3c 	beq.w	8026ee4 <_strtod_l+0x434>
 802746c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80275d8 <_strtod_l+0xb28>
 8027470:	f04f 3aff 	mov.w	sl, #4294967295
 8027474:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027476:	9805      	ldr	r0, [sp, #20]
 8027478:	f003 fde2 	bl	802b040 <_Bfree>
 802747c:	9805      	ldr	r0, [sp, #20]
 802747e:	4631      	mov	r1, r6
 8027480:	f003 fdde 	bl	802b040 <_Bfree>
 8027484:	9805      	ldr	r0, [sp, #20]
 8027486:	4629      	mov	r1, r5
 8027488:	f003 fdda 	bl	802b040 <_Bfree>
 802748c:	9805      	ldr	r0, [sp, #20]
 802748e:	4621      	mov	r1, r4
 8027490:	f003 fdd6 	bl	802b040 <_Bfree>
 8027494:	e627      	b.n	80270e6 <_strtod_l+0x636>
 8027496:	f1ba 0f01 	cmp.w	sl, #1
 802749a:	d103      	bne.n	80274a4 <_strtod_l+0x9f4>
 802749c:	f1bb 0f00 	cmp.w	fp, #0
 80274a0:	f43f adb4 	beq.w	802700c <_strtod_l+0x55c>
 80274a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80274a8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80274ac:	e7b8      	b.n	8027420 <_strtod_l+0x970>
 80274ae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80274b2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80274b6:	f1b8 0f00 	cmp.w	r8, #0
 80274ba:	d0af      	beq.n	802741c <_strtod_l+0x96c>
 80274bc:	eeb0 ab48 	vmov.f64	d10, d8
 80274c0:	e7ae      	b.n	8027420 <_strtod_l+0x970>
 80274c2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80274c6:	eeb0 8b4a 	vmov.f64	d8, d10
 80274ca:	e7a9      	b.n	8027420 <_strtod_l+0x970>
 80274cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80274d0:	e7a6      	b.n	8027420 <_strtod_l+0x970>
 80274d2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80274d6:	9b06      	ldr	r3, [sp, #24]
 80274d8:	46d9      	mov	r9, fp
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d1ca      	bne.n	8027474 <_strtod_l+0x9c4>
 80274de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80274e2:	0d1b      	lsrs	r3, r3, #20
 80274e4:	051b      	lsls	r3, r3, #20
 80274e6:	429f      	cmp	r7, r3
 80274e8:	d1c4      	bne.n	8027474 <_strtod_l+0x9c4>
 80274ea:	ec51 0b18 	vmov	r0, r1, d8
 80274ee:	f7d9 f99b 	bl	8000828 <__aeabi_d2lz>
 80274f2:	f7d9 f903 	bl	80006fc <__aeabi_l2d>
 80274f6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80274fa:	ec41 0b17 	vmov	d7, r0, r1
 80274fe:	ea49 090a 	orr.w	r9, r9, sl
 8027502:	ea59 0908 	orrs.w	r9, r9, r8
 8027506:	ee38 8b47 	vsub.f64	d8, d8, d7
 802750a:	d03c      	beq.n	8027586 <_strtod_l+0xad6>
 802750c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80275b8 <_strtod_l+0xb08>
 8027510:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027518:	f53f acef 	bmi.w	8026efa <_strtod_l+0x44a>
 802751c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80275c0 <_strtod_l+0xb10>
 8027520:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8027524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027528:	dda4      	ble.n	8027474 <_strtod_l+0x9c4>
 802752a:	e4e6      	b.n	8026efa <_strtod_l+0x44a>
 802752c:	9906      	ldr	r1, [sp, #24]
 802752e:	b1e1      	cbz	r1, 802756a <_strtod_l+0xaba>
 8027530:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8027534:	d819      	bhi.n	802756a <_strtod_l+0xaba>
 8027536:	eeb4 8bcb 	vcmpe.f64	d8, d11
 802753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802753e:	d811      	bhi.n	8027564 <_strtod_l+0xab4>
 8027540:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8027544:	ee18 3a10 	vmov	r3, s16
 8027548:	2b01      	cmp	r3, #1
 802754a:	bf38      	it	cc
 802754c:	2301      	movcc	r3, #1
 802754e:	ee08 3a10 	vmov	s16, r3
 8027552:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8027556:	f1b8 0f00 	cmp.w	r8, #0
 802755a:	d111      	bne.n	8027580 <_strtod_l+0xad0>
 802755c:	eeb1 7b48 	vneg.f64	d7, d8
 8027560:	ec53 2b17 	vmov	r2, r3, d7
 8027564:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8027568:	1bcb      	subs	r3, r1, r7
 802756a:	eeb0 0b49 	vmov.f64	d0, d9
 802756e:	ec43 2b1a 	vmov	d10, r2, r3
 8027572:	f004 f891 	bl	802b698 <__ulp>
 8027576:	eeaa 9b00 	vfma.f64	d9, d10, d0
 802757a:	ec5b ab19 	vmov	sl, fp, d9
 802757e:	e7aa      	b.n	80274d6 <_strtod_l+0xa26>
 8027580:	eeb0 7b48 	vmov.f64	d7, d8
 8027584:	e7ec      	b.n	8027560 <_strtod_l+0xab0>
 8027586:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80275c8 <_strtod_l+0xb18>
 802758a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027592:	f57f af6f 	bpl.w	8027474 <_strtod_l+0x9c4>
 8027596:	e4b0      	b.n	8026efa <_strtod_l+0x44a>
 8027598:	2300      	movs	r3, #0
 802759a:	9308      	str	r3, [sp, #32]
 802759c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802759e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80275a0:	6013      	str	r3, [r2, #0]
 80275a2:	f7ff bac4 	b.w	8026b2e <_strtod_l+0x7e>
 80275a6:	2a65      	cmp	r2, #101	@ 0x65
 80275a8:	f43f abbf 	beq.w	8026d2a <_strtod_l+0x27a>
 80275ac:	2a45      	cmp	r2, #69	@ 0x45
 80275ae:	f43f abbc 	beq.w	8026d2a <_strtod_l+0x27a>
 80275b2:	2101      	movs	r1, #1
 80275b4:	f7ff bbf4 	b.w	8026da0 <_strtod_l+0x2f0>
 80275b8:	94a03595 	.word	0x94a03595
 80275bc:	3fdfffff 	.word	0x3fdfffff
 80275c0:	35afe535 	.word	0x35afe535
 80275c4:	3fe00000 	.word	0x3fe00000
 80275c8:	94a03595 	.word	0x94a03595
 80275cc:	3fcfffff 	.word	0x3fcfffff
 80275d0:	000fffff 	.word	0x000fffff
 80275d4:	7ff00000 	.word	0x7ff00000
 80275d8:	7fefffff 	.word	0x7fefffff
 80275dc:	7fe00000 	.word	0x7fe00000
 80275e0:	7c9fffff 	.word	0x7c9fffff

080275e4 <strtod>:
 80275e4:	460a      	mov	r2, r1
 80275e6:	4601      	mov	r1, r0
 80275e8:	4802      	ldr	r0, [pc, #8]	@ (80275f4 <strtod+0x10>)
 80275ea:	4b03      	ldr	r3, [pc, #12]	@ (80275f8 <strtod+0x14>)
 80275ec:	6800      	ldr	r0, [r0, #0]
 80275ee:	f7ff ba5f 	b.w	8026ab0 <_strtod_l>
 80275f2:	bf00      	nop
 80275f4:	240009a8 	.word	0x240009a8
 80275f8:	2400083c 	.word	0x2400083c

080275fc <_strtol_l.isra.0>:
 80275fc:	2b24      	cmp	r3, #36	@ 0x24
 80275fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027602:	4686      	mov	lr, r0
 8027604:	4690      	mov	r8, r2
 8027606:	d801      	bhi.n	802760c <_strtol_l.isra.0+0x10>
 8027608:	2b01      	cmp	r3, #1
 802760a:	d106      	bne.n	802761a <_strtol_l.isra.0+0x1e>
 802760c:	f002 fac0 	bl	8029b90 <__errno>
 8027610:	2316      	movs	r3, #22
 8027612:	6003      	str	r3, [r0, #0]
 8027614:	2000      	movs	r0, #0
 8027616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802761a:	4834      	ldr	r0, [pc, #208]	@ (80276ec <_strtol_l.isra.0+0xf0>)
 802761c:	460d      	mov	r5, r1
 802761e:	462a      	mov	r2, r5
 8027620:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027624:	5d06      	ldrb	r6, [r0, r4]
 8027626:	f016 0608 	ands.w	r6, r6, #8
 802762a:	d1f8      	bne.n	802761e <_strtol_l.isra.0+0x22>
 802762c:	2c2d      	cmp	r4, #45	@ 0x2d
 802762e:	d110      	bne.n	8027652 <_strtol_l.isra.0+0x56>
 8027630:	782c      	ldrb	r4, [r5, #0]
 8027632:	2601      	movs	r6, #1
 8027634:	1c95      	adds	r5, r2, #2
 8027636:	f033 0210 	bics.w	r2, r3, #16
 802763a:	d115      	bne.n	8027668 <_strtol_l.isra.0+0x6c>
 802763c:	2c30      	cmp	r4, #48	@ 0x30
 802763e:	d10d      	bne.n	802765c <_strtol_l.isra.0+0x60>
 8027640:	782a      	ldrb	r2, [r5, #0]
 8027642:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8027646:	2a58      	cmp	r2, #88	@ 0x58
 8027648:	d108      	bne.n	802765c <_strtol_l.isra.0+0x60>
 802764a:	786c      	ldrb	r4, [r5, #1]
 802764c:	3502      	adds	r5, #2
 802764e:	2310      	movs	r3, #16
 8027650:	e00a      	b.n	8027668 <_strtol_l.isra.0+0x6c>
 8027652:	2c2b      	cmp	r4, #43	@ 0x2b
 8027654:	bf04      	itt	eq
 8027656:	782c      	ldrbeq	r4, [r5, #0]
 8027658:	1c95      	addeq	r5, r2, #2
 802765a:	e7ec      	b.n	8027636 <_strtol_l.isra.0+0x3a>
 802765c:	2b00      	cmp	r3, #0
 802765e:	d1f6      	bne.n	802764e <_strtol_l.isra.0+0x52>
 8027660:	2c30      	cmp	r4, #48	@ 0x30
 8027662:	bf14      	ite	ne
 8027664:	230a      	movne	r3, #10
 8027666:	2308      	moveq	r3, #8
 8027668:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802766c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027670:	2200      	movs	r2, #0
 8027672:	fbbc f9f3 	udiv	r9, ip, r3
 8027676:	4610      	mov	r0, r2
 8027678:	fb03 ca19 	mls	sl, r3, r9, ip
 802767c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8027680:	2f09      	cmp	r7, #9
 8027682:	d80f      	bhi.n	80276a4 <_strtol_l.isra.0+0xa8>
 8027684:	463c      	mov	r4, r7
 8027686:	42a3      	cmp	r3, r4
 8027688:	dd1b      	ble.n	80276c2 <_strtol_l.isra.0+0xc6>
 802768a:	1c57      	adds	r7, r2, #1
 802768c:	d007      	beq.n	802769e <_strtol_l.isra.0+0xa2>
 802768e:	4581      	cmp	r9, r0
 8027690:	d314      	bcc.n	80276bc <_strtol_l.isra.0+0xc0>
 8027692:	d101      	bne.n	8027698 <_strtol_l.isra.0+0x9c>
 8027694:	45a2      	cmp	sl, r4
 8027696:	db11      	blt.n	80276bc <_strtol_l.isra.0+0xc0>
 8027698:	fb00 4003 	mla	r0, r0, r3, r4
 802769c:	2201      	movs	r2, #1
 802769e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80276a2:	e7eb      	b.n	802767c <_strtol_l.isra.0+0x80>
 80276a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80276a8:	2f19      	cmp	r7, #25
 80276aa:	d801      	bhi.n	80276b0 <_strtol_l.isra.0+0xb4>
 80276ac:	3c37      	subs	r4, #55	@ 0x37
 80276ae:	e7ea      	b.n	8027686 <_strtol_l.isra.0+0x8a>
 80276b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80276b4:	2f19      	cmp	r7, #25
 80276b6:	d804      	bhi.n	80276c2 <_strtol_l.isra.0+0xc6>
 80276b8:	3c57      	subs	r4, #87	@ 0x57
 80276ba:	e7e4      	b.n	8027686 <_strtol_l.isra.0+0x8a>
 80276bc:	f04f 32ff 	mov.w	r2, #4294967295
 80276c0:	e7ed      	b.n	802769e <_strtol_l.isra.0+0xa2>
 80276c2:	1c53      	adds	r3, r2, #1
 80276c4:	d108      	bne.n	80276d8 <_strtol_l.isra.0+0xdc>
 80276c6:	2322      	movs	r3, #34	@ 0x22
 80276c8:	f8ce 3000 	str.w	r3, [lr]
 80276cc:	4660      	mov	r0, ip
 80276ce:	f1b8 0f00 	cmp.w	r8, #0
 80276d2:	d0a0      	beq.n	8027616 <_strtol_l.isra.0+0x1a>
 80276d4:	1e69      	subs	r1, r5, #1
 80276d6:	e006      	b.n	80276e6 <_strtol_l.isra.0+0xea>
 80276d8:	b106      	cbz	r6, 80276dc <_strtol_l.isra.0+0xe0>
 80276da:	4240      	negs	r0, r0
 80276dc:	f1b8 0f00 	cmp.w	r8, #0
 80276e0:	d099      	beq.n	8027616 <_strtol_l.isra.0+0x1a>
 80276e2:	2a00      	cmp	r2, #0
 80276e4:	d1f6      	bne.n	80276d4 <_strtol_l.isra.0+0xd8>
 80276e6:	f8c8 1000 	str.w	r1, [r8]
 80276ea:	e794      	b.n	8027616 <_strtol_l.isra.0+0x1a>
 80276ec:	0803ebf1 	.word	0x0803ebf1

080276f0 <_strtol_r>:
 80276f0:	f7ff bf84 	b.w	80275fc <_strtol_l.isra.0>

080276f4 <strtol_l>:
 80276f4:	4613      	mov	r3, r2
 80276f6:	460a      	mov	r2, r1
 80276f8:	4601      	mov	r1, r0
 80276fa:	4802      	ldr	r0, [pc, #8]	@ (8027704 <strtol_l+0x10>)
 80276fc:	6800      	ldr	r0, [r0, #0]
 80276fe:	f7ff bf7d 	b.w	80275fc <_strtol_l.isra.0>
 8027702:	bf00      	nop
 8027704:	240009a8 	.word	0x240009a8

08027708 <strtol>:
 8027708:	4613      	mov	r3, r2
 802770a:	460a      	mov	r2, r1
 802770c:	4601      	mov	r1, r0
 802770e:	4802      	ldr	r0, [pc, #8]	@ (8027718 <strtol+0x10>)
 8027710:	6800      	ldr	r0, [r0, #0]
 8027712:	f7ff bf73 	b.w	80275fc <_strtol_l.isra.0>
 8027716:	bf00      	nop
 8027718:	240009a8 	.word	0x240009a8

0802771c <_strtoul_l.isra.0>:
 802771c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027720:	4e34      	ldr	r6, [pc, #208]	@ (80277f4 <_strtoul_l.isra.0+0xd8>)
 8027722:	4686      	mov	lr, r0
 8027724:	460d      	mov	r5, r1
 8027726:	4628      	mov	r0, r5
 8027728:	f815 4b01 	ldrb.w	r4, [r5], #1
 802772c:	5d37      	ldrb	r7, [r6, r4]
 802772e:	f017 0708 	ands.w	r7, r7, #8
 8027732:	d1f8      	bne.n	8027726 <_strtoul_l.isra.0+0xa>
 8027734:	2c2d      	cmp	r4, #45	@ 0x2d
 8027736:	d110      	bne.n	802775a <_strtoul_l.isra.0+0x3e>
 8027738:	782c      	ldrb	r4, [r5, #0]
 802773a:	2701      	movs	r7, #1
 802773c:	1c85      	adds	r5, r0, #2
 802773e:	f033 0010 	bics.w	r0, r3, #16
 8027742:	d115      	bne.n	8027770 <_strtoul_l.isra.0+0x54>
 8027744:	2c30      	cmp	r4, #48	@ 0x30
 8027746:	d10d      	bne.n	8027764 <_strtoul_l.isra.0+0x48>
 8027748:	7828      	ldrb	r0, [r5, #0]
 802774a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802774e:	2858      	cmp	r0, #88	@ 0x58
 8027750:	d108      	bne.n	8027764 <_strtoul_l.isra.0+0x48>
 8027752:	786c      	ldrb	r4, [r5, #1]
 8027754:	3502      	adds	r5, #2
 8027756:	2310      	movs	r3, #16
 8027758:	e00a      	b.n	8027770 <_strtoul_l.isra.0+0x54>
 802775a:	2c2b      	cmp	r4, #43	@ 0x2b
 802775c:	bf04      	itt	eq
 802775e:	782c      	ldrbeq	r4, [r5, #0]
 8027760:	1c85      	addeq	r5, r0, #2
 8027762:	e7ec      	b.n	802773e <_strtoul_l.isra.0+0x22>
 8027764:	2b00      	cmp	r3, #0
 8027766:	d1f6      	bne.n	8027756 <_strtoul_l.isra.0+0x3a>
 8027768:	2c30      	cmp	r4, #48	@ 0x30
 802776a:	bf14      	ite	ne
 802776c:	230a      	movne	r3, #10
 802776e:	2308      	moveq	r3, #8
 8027770:	f04f 38ff 	mov.w	r8, #4294967295
 8027774:	2600      	movs	r6, #0
 8027776:	fbb8 f8f3 	udiv	r8, r8, r3
 802777a:	fb03 f908 	mul.w	r9, r3, r8
 802777e:	ea6f 0909 	mvn.w	r9, r9
 8027782:	4630      	mov	r0, r6
 8027784:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8027788:	f1bc 0f09 	cmp.w	ip, #9
 802778c:	d810      	bhi.n	80277b0 <_strtoul_l.isra.0+0x94>
 802778e:	4664      	mov	r4, ip
 8027790:	42a3      	cmp	r3, r4
 8027792:	dd1e      	ble.n	80277d2 <_strtoul_l.isra.0+0xb6>
 8027794:	f1b6 3fff 	cmp.w	r6, #4294967295
 8027798:	d007      	beq.n	80277aa <_strtoul_l.isra.0+0x8e>
 802779a:	4580      	cmp	r8, r0
 802779c:	d316      	bcc.n	80277cc <_strtoul_l.isra.0+0xb0>
 802779e:	d101      	bne.n	80277a4 <_strtoul_l.isra.0+0x88>
 80277a0:	45a1      	cmp	r9, r4
 80277a2:	db13      	blt.n	80277cc <_strtoul_l.isra.0+0xb0>
 80277a4:	fb00 4003 	mla	r0, r0, r3, r4
 80277a8:	2601      	movs	r6, #1
 80277aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80277ae:	e7e9      	b.n	8027784 <_strtoul_l.isra.0+0x68>
 80277b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80277b4:	f1bc 0f19 	cmp.w	ip, #25
 80277b8:	d801      	bhi.n	80277be <_strtoul_l.isra.0+0xa2>
 80277ba:	3c37      	subs	r4, #55	@ 0x37
 80277bc:	e7e8      	b.n	8027790 <_strtoul_l.isra.0+0x74>
 80277be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80277c2:	f1bc 0f19 	cmp.w	ip, #25
 80277c6:	d804      	bhi.n	80277d2 <_strtoul_l.isra.0+0xb6>
 80277c8:	3c57      	subs	r4, #87	@ 0x57
 80277ca:	e7e1      	b.n	8027790 <_strtoul_l.isra.0+0x74>
 80277cc:	f04f 36ff 	mov.w	r6, #4294967295
 80277d0:	e7eb      	b.n	80277aa <_strtoul_l.isra.0+0x8e>
 80277d2:	1c73      	adds	r3, r6, #1
 80277d4:	d106      	bne.n	80277e4 <_strtoul_l.isra.0+0xc8>
 80277d6:	2322      	movs	r3, #34	@ 0x22
 80277d8:	f8ce 3000 	str.w	r3, [lr]
 80277dc:	4630      	mov	r0, r6
 80277de:	b932      	cbnz	r2, 80277ee <_strtoul_l.isra.0+0xd2>
 80277e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80277e4:	b107      	cbz	r7, 80277e8 <_strtoul_l.isra.0+0xcc>
 80277e6:	4240      	negs	r0, r0
 80277e8:	2a00      	cmp	r2, #0
 80277ea:	d0f9      	beq.n	80277e0 <_strtoul_l.isra.0+0xc4>
 80277ec:	b106      	cbz	r6, 80277f0 <_strtoul_l.isra.0+0xd4>
 80277ee:	1e69      	subs	r1, r5, #1
 80277f0:	6011      	str	r1, [r2, #0]
 80277f2:	e7f5      	b.n	80277e0 <_strtoul_l.isra.0+0xc4>
 80277f4:	0803ebf1 	.word	0x0803ebf1

080277f8 <_strtoul_r>:
 80277f8:	f7ff bf90 	b.w	802771c <_strtoul_l.isra.0>

080277fc <strtoul>:
 80277fc:	4613      	mov	r3, r2
 80277fe:	460a      	mov	r2, r1
 8027800:	4601      	mov	r1, r0
 8027802:	4802      	ldr	r0, [pc, #8]	@ (802780c <strtoul+0x10>)
 8027804:	6800      	ldr	r0, [r0, #0]
 8027806:	f7ff bf89 	b.w	802771c <_strtoul_l.isra.0>
 802780a:	bf00      	nop
 802780c:	240009a8 	.word	0x240009a8

08027810 <__cvt>:
 8027810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027812:	ed2d 8b02 	vpush	{d8}
 8027816:	eeb0 8b40 	vmov.f64	d8, d0
 802781a:	b085      	sub	sp, #20
 802781c:	4617      	mov	r7, r2
 802781e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027820:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8027822:	ee18 2a90 	vmov	r2, s17
 8027826:	f025 0520 	bic.w	r5, r5, #32
 802782a:	2a00      	cmp	r2, #0
 802782c:	bfb6      	itet	lt
 802782e:	222d      	movlt	r2, #45	@ 0x2d
 8027830:	2200      	movge	r2, #0
 8027832:	eeb1 8b40 	vneglt.f64	d8, d0
 8027836:	2d46      	cmp	r5, #70	@ 0x46
 8027838:	460c      	mov	r4, r1
 802783a:	701a      	strb	r2, [r3, #0]
 802783c:	d004      	beq.n	8027848 <__cvt+0x38>
 802783e:	2d45      	cmp	r5, #69	@ 0x45
 8027840:	d100      	bne.n	8027844 <__cvt+0x34>
 8027842:	3401      	adds	r4, #1
 8027844:	2102      	movs	r1, #2
 8027846:	e000      	b.n	802784a <__cvt+0x3a>
 8027848:	2103      	movs	r1, #3
 802784a:	ab03      	add	r3, sp, #12
 802784c:	9301      	str	r3, [sp, #4]
 802784e:	ab02      	add	r3, sp, #8
 8027850:	9300      	str	r3, [sp, #0]
 8027852:	4622      	mov	r2, r4
 8027854:	4633      	mov	r3, r6
 8027856:	eeb0 0b48 	vmov.f64	d0, d8
 802785a:	f002 fa79 	bl	8029d50 <_dtoa_r>
 802785e:	2d47      	cmp	r5, #71	@ 0x47
 8027860:	d114      	bne.n	802788c <__cvt+0x7c>
 8027862:	07fb      	lsls	r3, r7, #31
 8027864:	d50a      	bpl.n	802787c <__cvt+0x6c>
 8027866:	1902      	adds	r2, r0, r4
 8027868:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802786c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027870:	bf08      	it	eq
 8027872:	9203      	streq	r2, [sp, #12]
 8027874:	2130      	movs	r1, #48	@ 0x30
 8027876:	9b03      	ldr	r3, [sp, #12]
 8027878:	4293      	cmp	r3, r2
 802787a:	d319      	bcc.n	80278b0 <__cvt+0xa0>
 802787c:	9b03      	ldr	r3, [sp, #12]
 802787e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027880:	1a1b      	subs	r3, r3, r0
 8027882:	6013      	str	r3, [r2, #0]
 8027884:	b005      	add	sp, #20
 8027886:	ecbd 8b02 	vpop	{d8}
 802788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802788c:	2d46      	cmp	r5, #70	@ 0x46
 802788e:	eb00 0204 	add.w	r2, r0, r4
 8027892:	d1e9      	bne.n	8027868 <__cvt+0x58>
 8027894:	7803      	ldrb	r3, [r0, #0]
 8027896:	2b30      	cmp	r3, #48	@ 0x30
 8027898:	d107      	bne.n	80278aa <__cvt+0x9a>
 802789a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80278a2:	bf1c      	itt	ne
 80278a4:	f1c4 0401 	rsbne	r4, r4, #1
 80278a8:	6034      	strne	r4, [r6, #0]
 80278aa:	6833      	ldr	r3, [r6, #0]
 80278ac:	441a      	add	r2, r3
 80278ae:	e7db      	b.n	8027868 <__cvt+0x58>
 80278b0:	1c5c      	adds	r4, r3, #1
 80278b2:	9403      	str	r4, [sp, #12]
 80278b4:	7019      	strb	r1, [r3, #0]
 80278b6:	e7de      	b.n	8027876 <__cvt+0x66>

080278b8 <__exponent>:
 80278b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80278ba:	2900      	cmp	r1, #0
 80278bc:	bfba      	itte	lt
 80278be:	4249      	neglt	r1, r1
 80278c0:	232d      	movlt	r3, #45	@ 0x2d
 80278c2:	232b      	movge	r3, #43	@ 0x2b
 80278c4:	2909      	cmp	r1, #9
 80278c6:	7002      	strb	r2, [r0, #0]
 80278c8:	7043      	strb	r3, [r0, #1]
 80278ca:	dd29      	ble.n	8027920 <__exponent+0x68>
 80278cc:	f10d 0307 	add.w	r3, sp, #7
 80278d0:	461d      	mov	r5, r3
 80278d2:	270a      	movs	r7, #10
 80278d4:	461a      	mov	r2, r3
 80278d6:	fbb1 f6f7 	udiv	r6, r1, r7
 80278da:	fb07 1416 	mls	r4, r7, r6, r1
 80278de:	3430      	adds	r4, #48	@ 0x30
 80278e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80278e4:	460c      	mov	r4, r1
 80278e6:	2c63      	cmp	r4, #99	@ 0x63
 80278e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80278ec:	4631      	mov	r1, r6
 80278ee:	dcf1      	bgt.n	80278d4 <__exponent+0x1c>
 80278f0:	3130      	adds	r1, #48	@ 0x30
 80278f2:	1e94      	subs	r4, r2, #2
 80278f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80278f8:	1c41      	adds	r1, r0, #1
 80278fa:	4623      	mov	r3, r4
 80278fc:	42ab      	cmp	r3, r5
 80278fe:	d30a      	bcc.n	8027916 <__exponent+0x5e>
 8027900:	f10d 0309 	add.w	r3, sp, #9
 8027904:	1a9b      	subs	r3, r3, r2
 8027906:	42ac      	cmp	r4, r5
 8027908:	bf88      	it	hi
 802790a:	2300      	movhi	r3, #0
 802790c:	3302      	adds	r3, #2
 802790e:	4403      	add	r3, r0
 8027910:	1a18      	subs	r0, r3, r0
 8027912:	b003      	add	sp, #12
 8027914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027916:	f813 6b01 	ldrb.w	r6, [r3], #1
 802791a:	f801 6f01 	strb.w	r6, [r1, #1]!
 802791e:	e7ed      	b.n	80278fc <__exponent+0x44>
 8027920:	2330      	movs	r3, #48	@ 0x30
 8027922:	3130      	adds	r1, #48	@ 0x30
 8027924:	7083      	strb	r3, [r0, #2]
 8027926:	70c1      	strb	r1, [r0, #3]
 8027928:	1d03      	adds	r3, r0, #4
 802792a:	e7f1      	b.n	8027910 <__exponent+0x58>
 802792c:	0000      	movs	r0, r0
	...

08027930 <_printf_float>:
 8027930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027934:	b08d      	sub	sp, #52	@ 0x34
 8027936:	460c      	mov	r4, r1
 8027938:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802793c:	4616      	mov	r6, r2
 802793e:	461f      	mov	r7, r3
 8027940:	4605      	mov	r5, r0
 8027942:	f002 f8b7 	bl	8029ab4 <_localeconv_r>
 8027946:	f8d0 b000 	ldr.w	fp, [r0]
 802794a:	4658      	mov	r0, fp
 802794c:	f7d8 fd40 	bl	80003d0 <strlen>
 8027950:	2300      	movs	r3, #0
 8027952:	930a      	str	r3, [sp, #40]	@ 0x28
 8027954:	f8d8 3000 	ldr.w	r3, [r8]
 8027958:	f894 9018 	ldrb.w	r9, [r4, #24]
 802795c:	6822      	ldr	r2, [r4, #0]
 802795e:	9005      	str	r0, [sp, #20]
 8027960:	3307      	adds	r3, #7
 8027962:	f023 0307 	bic.w	r3, r3, #7
 8027966:	f103 0108 	add.w	r1, r3, #8
 802796a:	f8c8 1000 	str.w	r1, [r8]
 802796e:	ed93 0b00 	vldr	d0, [r3]
 8027972:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8027bd0 <_printf_float+0x2a0>
 8027976:	eeb0 7bc0 	vabs.f64	d7, d0
 802797a:	eeb4 7b46 	vcmp.f64	d7, d6
 802797e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027982:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8027986:	dd24      	ble.n	80279d2 <_printf_float+0xa2>
 8027988:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027990:	d502      	bpl.n	8027998 <_printf_float+0x68>
 8027992:	232d      	movs	r3, #45	@ 0x2d
 8027994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8027998:	498f      	ldr	r1, [pc, #572]	@ (8027bd8 <_printf_float+0x2a8>)
 802799a:	4b90      	ldr	r3, [pc, #576]	@ (8027bdc <_printf_float+0x2ac>)
 802799c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80279a0:	bf8c      	ite	hi
 80279a2:	4688      	movhi	r8, r1
 80279a4:	4698      	movls	r8, r3
 80279a6:	f022 0204 	bic.w	r2, r2, #4
 80279aa:	2303      	movs	r3, #3
 80279ac:	6123      	str	r3, [r4, #16]
 80279ae:	6022      	str	r2, [r4, #0]
 80279b0:	f04f 0a00 	mov.w	sl, #0
 80279b4:	9700      	str	r7, [sp, #0]
 80279b6:	4633      	mov	r3, r6
 80279b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80279ba:	4621      	mov	r1, r4
 80279bc:	4628      	mov	r0, r5
 80279be:	f000 f9d1 	bl	8027d64 <_printf_common>
 80279c2:	3001      	adds	r0, #1
 80279c4:	f040 8089 	bne.w	8027ada <_printf_float+0x1aa>
 80279c8:	f04f 30ff 	mov.w	r0, #4294967295
 80279cc:	b00d      	add	sp, #52	@ 0x34
 80279ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80279d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80279da:	d709      	bvc.n	80279f0 <_printf_float+0xc0>
 80279dc:	ee10 3a90 	vmov	r3, s1
 80279e0:	2b00      	cmp	r3, #0
 80279e2:	bfbc      	itt	lt
 80279e4:	232d      	movlt	r3, #45	@ 0x2d
 80279e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80279ea:	497d      	ldr	r1, [pc, #500]	@ (8027be0 <_printf_float+0x2b0>)
 80279ec:	4b7d      	ldr	r3, [pc, #500]	@ (8027be4 <_printf_float+0x2b4>)
 80279ee:	e7d5      	b.n	802799c <_printf_float+0x6c>
 80279f0:	6863      	ldr	r3, [r4, #4]
 80279f2:	1c59      	adds	r1, r3, #1
 80279f4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80279f8:	d139      	bne.n	8027a6e <_printf_float+0x13e>
 80279fa:	2306      	movs	r3, #6
 80279fc:	6063      	str	r3, [r4, #4]
 80279fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8027a02:	2300      	movs	r3, #0
 8027a04:	6022      	str	r2, [r4, #0]
 8027a06:	9303      	str	r3, [sp, #12]
 8027a08:	ab0a      	add	r3, sp, #40	@ 0x28
 8027a0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8027a0e:	ab09      	add	r3, sp, #36	@ 0x24
 8027a10:	9300      	str	r3, [sp, #0]
 8027a12:	6861      	ldr	r1, [r4, #4]
 8027a14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8027a18:	4628      	mov	r0, r5
 8027a1a:	f7ff fef9 	bl	8027810 <__cvt>
 8027a1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8027a22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027a24:	4680      	mov	r8, r0
 8027a26:	d129      	bne.n	8027a7c <_printf_float+0x14c>
 8027a28:	1cc8      	adds	r0, r1, #3
 8027a2a:	db02      	blt.n	8027a32 <_printf_float+0x102>
 8027a2c:	6863      	ldr	r3, [r4, #4]
 8027a2e:	4299      	cmp	r1, r3
 8027a30:	dd41      	ble.n	8027ab6 <_printf_float+0x186>
 8027a32:	f1a9 0902 	sub.w	r9, r9, #2
 8027a36:	fa5f f989 	uxtb.w	r9, r9
 8027a3a:	3901      	subs	r1, #1
 8027a3c:	464a      	mov	r2, r9
 8027a3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8027a42:	9109      	str	r1, [sp, #36]	@ 0x24
 8027a44:	f7ff ff38 	bl	80278b8 <__exponent>
 8027a48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027a4a:	1813      	adds	r3, r2, r0
 8027a4c:	2a01      	cmp	r2, #1
 8027a4e:	4682      	mov	sl, r0
 8027a50:	6123      	str	r3, [r4, #16]
 8027a52:	dc02      	bgt.n	8027a5a <_printf_float+0x12a>
 8027a54:	6822      	ldr	r2, [r4, #0]
 8027a56:	07d2      	lsls	r2, r2, #31
 8027a58:	d501      	bpl.n	8027a5e <_printf_float+0x12e>
 8027a5a:	3301      	adds	r3, #1
 8027a5c:	6123      	str	r3, [r4, #16]
 8027a5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8027a62:	2b00      	cmp	r3, #0
 8027a64:	d0a6      	beq.n	80279b4 <_printf_float+0x84>
 8027a66:	232d      	movs	r3, #45	@ 0x2d
 8027a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8027a6c:	e7a2      	b.n	80279b4 <_printf_float+0x84>
 8027a6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8027a72:	d1c4      	bne.n	80279fe <_printf_float+0xce>
 8027a74:	2b00      	cmp	r3, #0
 8027a76:	d1c2      	bne.n	80279fe <_printf_float+0xce>
 8027a78:	2301      	movs	r3, #1
 8027a7a:	e7bf      	b.n	80279fc <_printf_float+0xcc>
 8027a7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8027a80:	d9db      	bls.n	8027a3a <_printf_float+0x10a>
 8027a82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8027a86:	d118      	bne.n	8027aba <_printf_float+0x18a>
 8027a88:	2900      	cmp	r1, #0
 8027a8a:	6863      	ldr	r3, [r4, #4]
 8027a8c:	dd0b      	ble.n	8027aa6 <_printf_float+0x176>
 8027a8e:	6121      	str	r1, [r4, #16]
 8027a90:	b913      	cbnz	r3, 8027a98 <_printf_float+0x168>
 8027a92:	6822      	ldr	r2, [r4, #0]
 8027a94:	07d0      	lsls	r0, r2, #31
 8027a96:	d502      	bpl.n	8027a9e <_printf_float+0x16e>
 8027a98:	3301      	adds	r3, #1
 8027a9a:	440b      	add	r3, r1
 8027a9c:	6123      	str	r3, [r4, #16]
 8027a9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8027aa0:	f04f 0a00 	mov.w	sl, #0
 8027aa4:	e7db      	b.n	8027a5e <_printf_float+0x12e>
 8027aa6:	b913      	cbnz	r3, 8027aae <_printf_float+0x17e>
 8027aa8:	6822      	ldr	r2, [r4, #0]
 8027aaa:	07d2      	lsls	r2, r2, #31
 8027aac:	d501      	bpl.n	8027ab2 <_printf_float+0x182>
 8027aae:	3302      	adds	r3, #2
 8027ab0:	e7f4      	b.n	8027a9c <_printf_float+0x16c>
 8027ab2:	2301      	movs	r3, #1
 8027ab4:	e7f2      	b.n	8027a9c <_printf_float+0x16c>
 8027ab6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8027aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027abc:	4299      	cmp	r1, r3
 8027abe:	db05      	blt.n	8027acc <_printf_float+0x19c>
 8027ac0:	6823      	ldr	r3, [r4, #0]
 8027ac2:	6121      	str	r1, [r4, #16]
 8027ac4:	07d8      	lsls	r0, r3, #31
 8027ac6:	d5ea      	bpl.n	8027a9e <_printf_float+0x16e>
 8027ac8:	1c4b      	adds	r3, r1, #1
 8027aca:	e7e7      	b.n	8027a9c <_printf_float+0x16c>
 8027acc:	2900      	cmp	r1, #0
 8027ace:	bfd4      	ite	le
 8027ad0:	f1c1 0202 	rsble	r2, r1, #2
 8027ad4:	2201      	movgt	r2, #1
 8027ad6:	4413      	add	r3, r2
 8027ad8:	e7e0      	b.n	8027a9c <_printf_float+0x16c>
 8027ada:	6823      	ldr	r3, [r4, #0]
 8027adc:	055a      	lsls	r2, r3, #21
 8027ade:	d407      	bmi.n	8027af0 <_printf_float+0x1c0>
 8027ae0:	6923      	ldr	r3, [r4, #16]
 8027ae2:	4642      	mov	r2, r8
 8027ae4:	4631      	mov	r1, r6
 8027ae6:	4628      	mov	r0, r5
 8027ae8:	47b8      	blx	r7
 8027aea:	3001      	adds	r0, #1
 8027aec:	d12a      	bne.n	8027b44 <_printf_float+0x214>
 8027aee:	e76b      	b.n	80279c8 <_printf_float+0x98>
 8027af0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8027af4:	f240 80e0 	bls.w	8027cb8 <_printf_float+0x388>
 8027af8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8027afc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b04:	d133      	bne.n	8027b6e <_printf_float+0x23e>
 8027b06:	4a38      	ldr	r2, [pc, #224]	@ (8027be8 <_printf_float+0x2b8>)
 8027b08:	2301      	movs	r3, #1
 8027b0a:	4631      	mov	r1, r6
 8027b0c:	4628      	mov	r0, r5
 8027b0e:	47b8      	blx	r7
 8027b10:	3001      	adds	r0, #1
 8027b12:	f43f af59 	beq.w	80279c8 <_printf_float+0x98>
 8027b16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8027b1a:	4543      	cmp	r3, r8
 8027b1c:	db02      	blt.n	8027b24 <_printf_float+0x1f4>
 8027b1e:	6823      	ldr	r3, [r4, #0]
 8027b20:	07d8      	lsls	r0, r3, #31
 8027b22:	d50f      	bpl.n	8027b44 <_printf_float+0x214>
 8027b24:	9b05      	ldr	r3, [sp, #20]
 8027b26:	465a      	mov	r2, fp
 8027b28:	4631      	mov	r1, r6
 8027b2a:	4628      	mov	r0, r5
 8027b2c:	47b8      	blx	r7
 8027b2e:	3001      	adds	r0, #1
 8027b30:	f43f af4a 	beq.w	80279c8 <_printf_float+0x98>
 8027b34:	f04f 0900 	mov.w	r9, #0
 8027b38:	f108 38ff 	add.w	r8, r8, #4294967295
 8027b3c:	f104 0a1a 	add.w	sl, r4, #26
 8027b40:	45c8      	cmp	r8, r9
 8027b42:	dc09      	bgt.n	8027b58 <_printf_float+0x228>
 8027b44:	6823      	ldr	r3, [r4, #0]
 8027b46:	079b      	lsls	r3, r3, #30
 8027b48:	f100 8107 	bmi.w	8027d5a <_printf_float+0x42a>
 8027b4c:	68e0      	ldr	r0, [r4, #12]
 8027b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027b50:	4298      	cmp	r0, r3
 8027b52:	bfb8      	it	lt
 8027b54:	4618      	movlt	r0, r3
 8027b56:	e739      	b.n	80279cc <_printf_float+0x9c>
 8027b58:	2301      	movs	r3, #1
 8027b5a:	4652      	mov	r2, sl
 8027b5c:	4631      	mov	r1, r6
 8027b5e:	4628      	mov	r0, r5
 8027b60:	47b8      	blx	r7
 8027b62:	3001      	adds	r0, #1
 8027b64:	f43f af30 	beq.w	80279c8 <_printf_float+0x98>
 8027b68:	f109 0901 	add.w	r9, r9, #1
 8027b6c:	e7e8      	b.n	8027b40 <_printf_float+0x210>
 8027b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b70:	2b00      	cmp	r3, #0
 8027b72:	dc3b      	bgt.n	8027bec <_printf_float+0x2bc>
 8027b74:	4a1c      	ldr	r2, [pc, #112]	@ (8027be8 <_printf_float+0x2b8>)
 8027b76:	2301      	movs	r3, #1
 8027b78:	4631      	mov	r1, r6
 8027b7a:	4628      	mov	r0, r5
 8027b7c:	47b8      	blx	r7
 8027b7e:	3001      	adds	r0, #1
 8027b80:	f43f af22 	beq.w	80279c8 <_printf_float+0x98>
 8027b84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8027b88:	ea59 0303 	orrs.w	r3, r9, r3
 8027b8c:	d102      	bne.n	8027b94 <_printf_float+0x264>
 8027b8e:	6823      	ldr	r3, [r4, #0]
 8027b90:	07d9      	lsls	r1, r3, #31
 8027b92:	d5d7      	bpl.n	8027b44 <_printf_float+0x214>
 8027b94:	9b05      	ldr	r3, [sp, #20]
 8027b96:	465a      	mov	r2, fp
 8027b98:	4631      	mov	r1, r6
 8027b9a:	4628      	mov	r0, r5
 8027b9c:	47b8      	blx	r7
 8027b9e:	3001      	adds	r0, #1
 8027ba0:	f43f af12 	beq.w	80279c8 <_printf_float+0x98>
 8027ba4:	f04f 0a00 	mov.w	sl, #0
 8027ba8:	f104 0b1a 	add.w	fp, r4, #26
 8027bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027bae:	425b      	negs	r3, r3
 8027bb0:	4553      	cmp	r3, sl
 8027bb2:	dc01      	bgt.n	8027bb8 <_printf_float+0x288>
 8027bb4:	464b      	mov	r3, r9
 8027bb6:	e794      	b.n	8027ae2 <_printf_float+0x1b2>
 8027bb8:	2301      	movs	r3, #1
 8027bba:	465a      	mov	r2, fp
 8027bbc:	4631      	mov	r1, r6
 8027bbe:	4628      	mov	r0, r5
 8027bc0:	47b8      	blx	r7
 8027bc2:	3001      	adds	r0, #1
 8027bc4:	f43f af00 	beq.w	80279c8 <_printf_float+0x98>
 8027bc8:	f10a 0a01 	add.w	sl, sl, #1
 8027bcc:	e7ee      	b.n	8027bac <_printf_float+0x27c>
 8027bce:	bf00      	nop
 8027bd0:	ffffffff 	.word	0xffffffff
 8027bd4:	7fefffff 	.word	0x7fefffff
 8027bd8:	0803e883 	.word	0x0803e883
 8027bdc:	0803e87f 	.word	0x0803e87f
 8027be0:	0803e88b 	.word	0x0803e88b
 8027be4:	0803e887 	.word	0x0803e887
 8027be8:	0803eb97 	.word	0x0803eb97
 8027bec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8027bee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8027bf2:	4553      	cmp	r3, sl
 8027bf4:	bfa8      	it	ge
 8027bf6:	4653      	movge	r3, sl
 8027bf8:	2b00      	cmp	r3, #0
 8027bfa:	4699      	mov	r9, r3
 8027bfc:	dc37      	bgt.n	8027c6e <_printf_float+0x33e>
 8027bfe:	2300      	movs	r3, #0
 8027c00:	9307      	str	r3, [sp, #28]
 8027c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8027c06:	f104 021a 	add.w	r2, r4, #26
 8027c0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8027c0c:	9907      	ldr	r1, [sp, #28]
 8027c0e:	9306      	str	r3, [sp, #24]
 8027c10:	eba3 0309 	sub.w	r3, r3, r9
 8027c14:	428b      	cmp	r3, r1
 8027c16:	dc31      	bgt.n	8027c7c <_printf_float+0x34c>
 8027c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c1a:	459a      	cmp	sl, r3
 8027c1c:	dc3b      	bgt.n	8027c96 <_printf_float+0x366>
 8027c1e:	6823      	ldr	r3, [r4, #0]
 8027c20:	07da      	lsls	r2, r3, #31
 8027c22:	d438      	bmi.n	8027c96 <_printf_float+0x366>
 8027c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c26:	ebaa 0903 	sub.w	r9, sl, r3
 8027c2a:	9b06      	ldr	r3, [sp, #24]
 8027c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8027c30:	4599      	cmp	r9, r3
 8027c32:	bfa8      	it	ge
 8027c34:	4699      	movge	r9, r3
 8027c36:	f1b9 0f00 	cmp.w	r9, #0
 8027c3a:	dc34      	bgt.n	8027ca6 <_printf_float+0x376>
 8027c3c:	f04f 0800 	mov.w	r8, #0
 8027c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8027c44:	f104 0b1a 	add.w	fp, r4, #26
 8027c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8027c4e:	eba3 0309 	sub.w	r3, r3, r9
 8027c52:	4543      	cmp	r3, r8
 8027c54:	f77f af76 	ble.w	8027b44 <_printf_float+0x214>
 8027c58:	2301      	movs	r3, #1
 8027c5a:	465a      	mov	r2, fp
 8027c5c:	4631      	mov	r1, r6
 8027c5e:	4628      	mov	r0, r5
 8027c60:	47b8      	blx	r7
 8027c62:	3001      	adds	r0, #1
 8027c64:	f43f aeb0 	beq.w	80279c8 <_printf_float+0x98>
 8027c68:	f108 0801 	add.w	r8, r8, #1
 8027c6c:	e7ec      	b.n	8027c48 <_printf_float+0x318>
 8027c6e:	4642      	mov	r2, r8
 8027c70:	4631      	mov	r1, r6
 8027c72:	4628      	mov	r0, r5
 8027c74:	47b8      	blx	r7
 8027c76:	3001      	adds	r0, #1
 8027c78:	d1c1      	bne.n	8027bfe <_printf_float+0x2ce>
 8027c7a:	e6a5      	b.n	80279c8 <_printf_float+0x98>
 8027c7c:	2301      	movs	r3, #1
 8027c7e:	4631      	mov	r1, r6
 8027c80:	4628      	mov	r0, r5
 8027c82:	9206      	str	r2, [sp, #24]
 8027c84:	47b8      	blx	r7
 8027c86:	3001      	adds	r0, #1
 8027c88:	f43f ae9e 	beq.w	80279c8 <_printf_float+0x98>
 8027c8c:	9b07      	ldr	r3, [sp, #28]
 8027c8e:	9a06      	ldr	r2, [sp, #24]
 8027c90:	3301      	adds	r3, #1
 8027c92:	9307      	str	r3, [sp, #28]
 8027c94:	e7b9      	b.n	8027c0a <_printf_float+0x2da>
 8027c96:	9b05      	ldr	r3, [sp, #20]
 8027c98:	465a      	mov	r2, fp
 8027c9a:	4631      	mov	r1, r6
 8027c9c:	4628      	mov	r0, r5
 8027c9e:	47b8      	blx	r7
 8027ca0:	3001      	adds	r0, #1
 8027ca2:	d1bf      	bne.n	8027c24 <_printf_float+0x2f4>
 8027ca4:	e690      	b.n	80279c8 <_printf_float+0x98>
 8027ca6:	9a06      	ldr	r2, [sp, #24]
 8027ca8:	464b      	mov	r3, r9
 8027caa:	4442      	add	r2, r8
 8027cac:	4631      	mov	r1, r6
 8027cae:	4628      	mov	r0, r5
 8027cb0:	47b8      	blx	r7
 8027cb2:	3001      	adds	r0, #1
 8027cb4:	d1c2      	bne.n	8027c3c <_printf_float+0x30c>
 8027cb6:	e687      	b.n	80279c8 <_printf_float+0x98>
 8027cb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8027cbc:	f1b9 0f01 	cmp.w	r9, #1
 8027cc0:	dc01      	bgt.n	8027cc6 <_printf_float+0x396>
 8027cc2:	07db      	lsls	r3, r3, #31
 8027cc4:	d536      	bpl.n	8027d34 <_printf_float+0x404>
 8027cc6:	2301      	movs	r3, #1
 8027cc8:	4642      	mov	r2, r8
 8027cca:	4631      	mov	r1, r6
 8027ccc:	4628      	mov	r0, r5
 8027cce:	47b8      	blx	r7
 8027cd0:	3001      	adds	r0, #1
 8027cd2:	f43f ae79 	beq.w	80279c8 <_printf_float+0x98>
 8027cd6:	9b05      	ldr	r3, [sp, #20]
 8027cd8:	465a      	mov	r2, fp
 8027cda:	4631      	mov	r1, r6
 8027cdc:	4628      	mov	r0, r5
 8027cde:	47b8      	blx	r7
 8027ce0:	3001      	adds	r0, #1
 8027ce2:	f43f ae71 	beq.w	80279c8 <_printf_float+0x98>
 8027ce6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8027cea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027cf2:	f109 39ff 	add.w	r9, r9, #4294967295
 8027cf6:	d018      	beq.n	8027d2a <_printf_float+0x3fa>
 8027cf8:	464b      	mov	r3, r9
 8027cfa:	f108 0201 	add.w	r2, r8, #1
 8027cfe:	4631      	mov	r1, r6
 8027d00:	4628      	mov	r0, r5
 8027d02:	47b8      	blx	r7
 8027d04:	3001      	adds	r0, #1
 8027d06:	d10c      	bne.n	8027d22 <_printf_float+0x3f2>
 8027d08:	e65e      	b.n	80279c8 <_printf_float+0x98>
 8027d0a:	2301      	movs	r3, #1
 8027d0c:	465a      	mov	r2, fp
 8027d0e:	4631      	mov	r1, r6
 8027d10:	4628      	mov	r0, r5
 8027d12:	47b8      	blx	r7
 8027d14:	3001      	adds	r0, #1
 8027d16:	f43f ae57 	beq.w	80279c8 <_printf_float+0x98>
 8027d1a:	f108 0801 	add.w	r8, r8, #1
 8027d1e:	45c8      	cmp	r8, r9
 8027d20:	dbf3      	blt.n	8027d0a <_printf_float+0x3da>
 8027d22:	4653      	mov	r3, sl
 8027d24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8027d28:	e6dc      	b.n	8027ae4 <_printf_float+0x1b4>
 8027d2a:	f04f 0800 	mov.w	r8, #0
 8027d2e:	f104 0b1a 	add.w	fp, r4, #26
 8027d32:	e7f4      	b.n	8027d1e <_printf_float+0x3ee>
 8027d34:	2301      	movs	r3, #1
 8027d36:	4642      	mov	r2, r8
 8027d38:	e7e1      	b.n	8027cfe <_printf_float+0x3ce>
 8027d3a:	2301      	movs	r3, #1
 8027d3c:	464a      	mov	r2, r9
 8027d3e:	4631      	mov	r1, r6
 8027d40:	4628      	mov	r0, r5
 8027d42:	47b8      	blx	r7
 8027d44:	3001      	adds	r0, #1
 8027d46:	f43f ae3f 	beq.w	80279c8 <_printf_float+0x98>
 8027d4a:	f108 0801 	add.w	r8, r8, #1
 8027d4e:	68e3      	ldr	r3, [r4, #12]
 8027d50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027d52:	1a5b      	subs	r3, r3, r1
 8027d54:	4543      	cmp	r3, r8
 8027d56:	dcf0      	bgt.n	8027d3a <_printf_float+0x40a>
 8027d58:	e6f8      	b.n	8027b4c <_printf_float+0x21c>
 8027d5a:	f04f 0800 	mov.w	r8, #0
 8027d5e:	f104 0919 	add.w	r9, r4, #25
 8027d62:	e7f4      	b.n	8027d4e <_printf_float+0x41e>

08027d64 <_printf_common>:
 8027d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d68:	4616      	mov	r6, r2
 8027d6a:	4698      	mov	r8, r3
 8027d6c:	688a      	ldr	r2, [r1, #8]
 8027d6e:	690b      	ldr	r3, [r1, #16]
 8027d70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8027d74:	4293      	cmp	r3, r2
 8027d76:	bfb8      	it	lt
 8027d78:	4613      	movlt	r3, r2
 8027d7a:	6033      	str	r3, [r6, #0]
 8027d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8027d80:	4607      	mov	r7, r0
 8027d82:	460c      	mov	r4, r1
 8027d84:	b10a      	cbz	r2, 8027d8a <_printf_common+0x26>
 8027d86:	3301      	adds	r3, #1
 8027d88:	6033      	str	r3, [r6, #0]
 8027d8a:	6823      	ldr	r3, [r4, #0]
 8027d8c:	0699      	lsls	r1, r3, #26
 8027d8e:	bf42      	ittt	mi
 8027d90:	6833      	ldrmi	r3, [r6, #0]
 8027d92:	3302      	addmi	r3, #2
 8027d94:	6033      	strmi	r3, [r6, #0]
 8027d96:	6825      	ldr	r5, [r4, #0]
 8027d98:	f015 0506 	ands.w	r5, r5, #6
 8027d9c:	d106      	bne.n	8027dac <_printf_common+0x48>
 8027d9e:	f104 0a19 	add.w	sl, r4, #25
 8027da2:	68e3      	ldr	r3, [r4, #12]
 8027da4:	6832      	ldr	r2, [r6, #0]
 8027da6:	1a9b      	subs	r3, r3, r2
 8027da8:	42ab      	cmp	r3, r5
 8027daa:	dc26      	bgt.n	8027dfa <_printf_common+0x96>
 8027dac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8027db0:	6822      	ldr	r2, [r4, #0]
 8027db2:	3b00      	subs	r3, #0
 8027db4:	bf18      	it	ne
 8027db6:	2301      	movne	r3, #1
 8027db8:	0692      	lsls	r2, r2, #26
 8027dba:	d42b      	bmi.n	8027e14 <_printf_common+0xb0>
 8027dbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8027dc0:	4641      	mov	r1, r8
 8027dc2:	4638      	mov	r0, r7
 8027dc4:	47c8      	blx	r9
 8027dc6:	3001      	adds	r0, #1
 8027dc8:	d01e      	beq.n	8027e08 <_printf_common+0xa4>
 8027dca:	6823      	ldr	r3, [r4, #0]
 8027dcc:	6922      	ldr	r2, [r4, #16]
 8027dce:	f003 0306 	and.w	r3, r3, #6
 8027dd2:	2b04      	cmp	r3, #4
 8027dd4:	bf02      	ittt	eq
 8027dd6:	68e5      	ldreq	r5, [r4, #12]
 8027dd8:	6833      	ldreq	r3, [r6, #0]
 8027dda:	1aed      	subeq	r5, r5, r3
 8027ddc:	68a3      	ldr	r3, [r4, #8]
 8027dde:	bf0c      	ite	eq
 8027de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027de4:	2500      	movne	r5, #0
 8027de6:	4293      	cmp	r3, r2
 8027de8:	bfc4      	itt	gt
 8027dea:	1a9b      	subgt	r3, r3, r2
 8027dec:	18ed      	addgt	r5, r5, r3
 8027dee:	2600      	movs	r6, #0
 8027df0:	341a      	adds	r4, #26
 8027df2:	42b5      	cmp	r5, r6
 8027df4:	d11a      	bne.n	8027e2c <_printf_common+0xc8>
 8027df6:	2000      	movs	r0, #0
 8027df8:	e008      	b.n	8027e0c <_printf_common+0xa8>
 8027dfa:	2301      	movs	r3, #1
 8027dfc:	4652      	mov	r2, sl
 8027dfe:	4641      	mov	r1, r8
 8027e00:	4638      	mov	r0, r7
 8027e02:	47c8      	blx	r9
 8027e04:	3001      	adds	r0, #1
 8027e06:	d103      	bne.n	8027e10 <_printf_common+0xac>
 8027e08:	f04f 30ff 	mov.w	r0, #4294967295
 8027e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e10:	3501      	adds	r5, #1
 8027e12:	e7c6      	b.n	8027da2 <_printf_common+0x3e>
 8027e14:	18e1      	adds	r1, r4, r3
 8027e16:	1c5a      	adds	r2, r3, #1
 8027e18:	2030      	movs	r0, #48	@ 0x30
 8027e1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8027e1e:	4422      	add	r2, r4
 8027e20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8027e24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8027e28:	3302      	adds	r3, #2
 8027e2a:	e7c7      	b.n	8027dbc <_printf_common+0x58>
 8027e2c:	2301      	movs	r3, #1
 8027e2e:	4622      	mov	r2, r4
 8027e30:	4641      	mov	r1, r8
 8027e32:	4638      	mov	r0, r7
 8027e34:	47c8      	blx	r9
 8027e36:	3001      	adds	r0, #1
 8027e38:	d0e6      	beq.n	8027e08 <_printf_common+0xa4>
 8027e3a:	3601      	adds	r6, #1
 8027e3c:	e7d9      	b.n	8027df2 <_printf_common+0x8e>
	...

08027e40 <_printf_i>:
 8027e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027e44:	7e0f      	ldrb	r7, [r1, #24]
 8027e46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8027e48:	2f78      	cmp	r7, #120	@ 0x78
 8027e4a:	4691      	mov	r9, r2
 8027e4c:	4680      	mov	r8, r0
 8027e4e:	460c      	mov	r4, r1
 8027e50:	469a      	mov	sl, r3
 8027e52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8027e56:	d807      	bhi.n	8027e68 <_printf_i+0x28>
 8027e58:	2f62      	cmp	r7, #98	@ 0x62
 8027e5a:	d80a      	bhi.n	8027e72 <_printf_i+0x32>
 8027e5c:	2f00      	cmp	r7, #0
 8027e5e:	f000 80d1 	beq.w	8028004 <_printf_i+0x1c4>
 8027e62:	2f58      	cmp	r7, #88	@ 0x58
 8027e64:	f000 80b8 	beq.w	8027fd8 <_printf_i+0x198>
 8027e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027e6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8027e70:	e03a      	b.n	8027ee8 <_printf_i+0xa8>
 8027e72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8027e76:	2b15      	cmp	r3, #21
 8027e78:	d8f6      	bhi.n	8027e68 <_printf_i+0x28>
 8027e7a:	a101      	add	r1, pc, #4	@ (adr r1, 8027e80 <_printf_i+0x40>)
 8027e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027e80:	08027ed9 	.word	0x08027ed9
 8027e84:	08027eed 	.word	0x08027eed
 8027e88:	08027e69 	.word	0x08027e69
 8027e8c:	08027e69 	.word	0x08027e69
 8027e90:	08027e69 	.word	0x08027e69
 8027e94:	08027e69 	.word	0x08027e69
 8027e98:	08027eed 	.word	0x08027eed
 8027e9c:	08027e69 	.word	0x08027e69
 8027ea0:	08027e69 	.word	0x08027e69
 8027ea4:	08027e69 	.word	0x08027e69
 8027ea8:	08027e69 	.word	0x08027e69
 8027eac:	08027feb 	.word	0x08027feb
 8027eb0:	08027f17 	.word	0x08027f17
 8027eb4:	08027fa5 	.word	0x08027fa5
 8027eb8:	08027e69 	.word	0x08027e69
 8027ebc:	08027e69 	.word	0x08027e69
 8027ec0:	0802800d 	.word	0x0802800d
 8027ec4:	08027e69 	.word	0x08027e69
 8027ec8:	08027f17 	.word	0x08027f17
 8027ecc:	08027e69 	.word	0x08027e69
 8027ed0:	08027e69 	.word	0x08027e69
 8027ed4:	08027fad 	.word	0x08027fad
 8027ed8:	6833      	ldr	r3, [r6, #0]
 8027eda:	1d1a      	adds	r2, r3, #4
 8027edc:	681b      	ldr	r3, [r3, #0]
 8027ede:	6032      	str	r2, [r6, #0]
 8027ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8027ee8:	2301      	movs	r3, #1
 8027eea:	e09c      	b.n	8028026 <_printf_i+0x1e6>
 8027eec:	6833      	ldr	r3, [r6, #0]
 8027eee:	6820      	ldr	r0, [r4, #0]
 8027ef0:	1d19      	adds	r1, r3, #4
 8027ef2:	6031      	str	r1, [r6, #0]
 8027ef4:	0606      	lsls	r6, r0, #24
 8027ef6:	d501      	bpl.n	8027efc <_printf_i+0xbc>
 8027ef8:	681d      	ldr	r5, [r3, #0]
 8027efa:	e003      	b.n	8027f04 <_printf_i+0xc4>
 8027efc:	0645      	lsls	r5, r0, #25
 8027efe:	d5fb      	bpl.n	8027ef8 <_printf_i+0xb8>
 8027f00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8027f04:	2d00      	cmp	r5, #0
 8027f06:	da03      	bge.n	8027f10 <_printf_i+0xd0>
 8027f08:	232d      	movs	r3, #45	@ 0x2d
 8027f0a:	426d      	negs	r5, r5
 8027f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8027f10:	4858      	ldr	r0, [pc, #352]	@ (8028074 <_printf_i+0x234>)
 8027f12:	230a      	movs	r3, #10
 8027f14:	e011      	b.n	8027f3a <_printf_i+0xfa>
 8027f16:	6821      	ldr	r1, [r4, #0]
 8027f18:	6833      	ldr	r3, [r6, #0]
 8027f1a:	0608      	lsls	r0, r1, #24
 8027f1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8027f20:	d402      	bmi.n	8027f28 <_printf_i+0xe8>
 8027f22:	0649      	lsls	r1, r1, #25
 8027f24:	bf48      	it	mi
 8027f26:	b2ad      	uxthmi	r5, r5
 8027f28:	2f6f      	cmp	r7, #111	@ 0x6f
 8027f2a:	4852      	ldr	r0, [pc, #328]	@ (8028074 <_printf_i+0x234>)
 8027f2c:	6033      	str	r3, [r6, #0]
 8027f2e:	bf14      	ite	ne
 8027f30:	230a      	movne	r3, #10
 8027f32:	2308      	moveq	r3, #8
 8027f34:	2100      	movs	r1, #0
 8027f36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8027f3a:	6866      	ldr	r6, [r4, #4]
 8027f3c:	60a6      	str	r6, [r4, #8]
 8027f3e:	2e00      	cmp	r6, #0
 8027f40:	db05      	blt.n	8027f4e <_printf_i+0x10e>
 8027f42:	6821      	ldr	r1, [r4, #0]
 8027f44:	432e      	orrs	r6, r5
 8027f46:	f021 0104 	bic.w	r1, r1, #4
 8027f4a:	6021      	str	r1, [r4, #0]
 8027f4c:	d04b      	beq.n	8027fe6 <_printf_i+0x1a6>
 8027f4e:	4616      	mov	r6, r2
 8027f50:	fbb5 f1f3 	udiv	r1, r5, r3
 8027f54:	fb03 5711 	mls	r7, r3, r1, r5
 8027f58:	5dc7      	ldrb	r7, [r0, r7]
 8027f5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027f5e:	462f      	mov	r7, r5
 8027f60:	42bb      	cmp	r3, r7
 8027f62:	460d      	mov	r5, r1
 8027f64:	d9f4      	bls.n	8027f50 <_printf_i+0x110>
 8027f66:	2b08      	cmp	r3, #8
 8027f68:	d10b      	bne.n	8027f82 <_printf_i+0x142>
 8027f6a:	6823      	ldr	r3, [r4, #0]
 8027f6c:	07df      	lsls	r7, r3, #31
 8027f6e:	d508      	bpl.n	8027f82 <_printf_i+0x142>
 8027f70:	6923      	ldr	r3, [r4, #16]
 8027f72:	6861      	ldr	r1, [r4, #4]
 8027f74:	4299      	cmp	r1, r3
 8027f76:	bfde      	ittt	le
 8027f78:	2330      	movle	r3, #48	@ 0x30
 8027f7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8027f7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8027f82:	1b92      	subs	r2, r2, r6
 8027f84:	6122      	str	r2, [r4, #16]
 8027f86:	f8cd a000 	str.w	sl, [sp]
 8027f8a:	464b      	mov	r3, r9
 8027f8c:	aa03      	add	r2, sp, #12
 8027f8e:	4621      	mov	r1, r4
 8027f90:	4640      	mov	r0, r8
 8027f92:	f7ff fee7 	bl	8027d64 <_printf_common>
 8027f96:	3001      	adds	r0, #1
 8027f98:	d14a      	bne.n	8028030 <_printf_i+0x1f0>
 8027f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8027f9e:	b004      	add	sp, #16
 8027fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fa4:	6823      	ldr	r3, [r4, #0]
 8027fa6:	f043 0320 	orr.w	r3, r3, #32
 8027faa:	6023      	str	r3, [r4, #0]
 8027fac:	4832      	ldr	r0, [pc, #200]	@ (8028078 <_printf_i+0x238>)
 8027fae:	2778      	movs	r7, #120	@ 0x78
 8027fb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8027fb4:	6823      	ldr	r3, [r4, #0]
 8027fb6:	6831      	ldr	r1, [r6, #0]
 8027fb8:	061f      	lsls	r7, r3, #24
 8027fba:	f851 5b04 	ldr.w	r5, [r1], #4
 8027fbe:	d402      	bmi.n	8027fc6 <_printf_i+0x186>
 8027fc0:	065f      	lsls	r7, r3, #25
 8027fc2:	bf48      	it	mi
 8027fc4:	b2ad      	uxthmi	r5, r5
 8027fc6:	6031      	str	r1, [r6, #0]
 8027fc8:	07d9      	lsls	r1, r3, #31
 8027fca:	bf44      	itt	mi
 8027fcc:	f043 0320 	orrmi.w	r3, r3, #32
 8027fd0:	6023      	strmi	r3, [r4, #0]
 8027fd2:	b11d      	cbz	r5, 8027fdc <_printf_i+0x19c>
 8027fd4:	2310      	movs	r3, #16
 8027fd6:	e7ad      	b.n	8027f34 <_printf_i+0xf4>
 8027fd8:	4826      	ldr	r0, [pc, #152]	@ (8028074 <_printf_i+0x234>)
 8027fda:	e7e9      	b.n	8027fb0 <_printf_i+0x170>
 8027fdc:	6823      	ldr	r3, [r4, #0]
 8027fde:	f023 0320 	bic.w	r3, r3, #32
 8027fe2:	6023      	str	r3, [r4, #0]
 8027fe4:	e7f6      	b.n	8027fd4 <_printf_i+0x194>
 8027fe6:	4616      	mov	r6, r2
 8027fe8:	e7bd      	b.n	8027f66 <_printf_i+0x126>
 8027fea:	6833      	ldr	r3, [r6, #0]
 8027fec:	6825      	ldr	r5, [r4, #0]
 8027fee:	6961      	ldr	r1, [r4, #20]
 8027ff0:	1d18      	adds	r0, r3, #4
 8027ff2:	6030      	str	r0, [r6, #0]
 8027ff4:	062e      	lsls	r6, r5, #24
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	d501      	bpl.n	8027ffe <_printf_i+0x1be>
 8027ffa:	6019      	str	r1, [r3, #0]
 8027ffc:	e002      	b.n	8028004 <_printf_i+0x1c4>
 8027ffe:	0668      	lsls	r0, r5, #25
 8028000:	d5fb      	bpl.n	8027ffa <_printf_i+0x1ba>
 8028002:	8019      	strh	r1, [r3, #0]
 8028004:	2300      	movs	r3, #0
 8028006:	6123      	str	r3, [r4, #16]
 8028008:	4616      	mov	r6, r2
 802800a:	e7bc      	b.n	8027f86 <_printf_i+0x146>
 802800c:	6833      	ldr	r3, [r6, #0]
 802800e:	1d1a      	adds	r2, r3, #4
 8028010:	6032      	str	r2, [r6, #0]
 8028012:	681e      	ldr	r6, [r3, #0]
 8028014:	6862      	ldr	r2, [r4, #4]
 8028016:	2100      	movs	r1, #0
 8028018:	4630      	mov	r0, r6
 802801a:	f7d8 f989 	bl	8000330 <memchr>
 802801e:	b108      	cbz	r0, 8028024 <_printf_i+0x1e4>
 8028020:	1b80      	subs	r0, r0, r6
 8028022:	6060      	str	r0, [r4, #4]
 8028024:	6863      	ldr	r3, [r4, #4]
 8028026:	6123      	str	r3, [r4, #16]
 8028028:	2300      	movs	r3, #0
 802802a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802802e:	e7aa      	b.n	8027f86 <_printf_i+0x146>
 8028030:	6923      	ldr	r3, [r4, #16]
 8028032:	4632      	mov	r2, r6
 8028034:	4649      	mov	r1, r9
 8028036:	4640      	mov	r0, r8
 8028038:	47d0      	blx	sl
 802803a:	3001      	adds	r0, #1
 802803c:	d0ad      	beq.n	8027f9a <_printf_i+0x15a>
 802803e:	6823      	ldr	r3, [r4, #0]
 8028040:	079b      	lsls	r3, r3, #30
 8028042:	d413      	bmi.n	802806c <_printf_i+0x22c>
 8028044:	68e0      	ldr	r0, [r4, #12]
 8028046:	9b03      	ldr	r3, [sp, #12]
 8028048:	4298      	cmp	r0, r3
 802804a:	bfb8      	it	lt
 802804c:	4618      	movlt	r0, r3
 802804e:	e7a6      	b.n	8027f9e <_printf_i+0x15e>
 8028050:	2301      	movs	r3, #1
 8028052:	4632      	mov	r2, r6
 8028054:	4649      	mov	r1, r9
 8028056:	4640      	mov	r0, r8
 8028058:	47d0      	blx	sl
 802805a:	3001      	adds	r0, #1
 802805c:	d09d      	beq.n	8027f9a <_printf_i+0x15a>
 802805e:	3501      	adds	r5, #1
 8028060:	68e3      	ldr	r3, [r4, #12]
 8028062:	9903      	ldr	r1, [sp, #12]
 8028064:	1a5b      	subs	r3, r3, r1
 8028066:	42ab      	cmp	r3, r5
 8028068:	dcf2      	bgt.n	8028050 <_printf_i+0x210>
 802806a:	e7eb      	b.n	8028044 <_printf_i+0x204>
 802806c:	2500      	movs	r5, #0
 802806e:	f104 0619 	add.w	r6, r4, #25
 8028072:	e7f5      	b.n	8028060 <_printf_i+0x220>
 8028074:	0803e88f 	.word	0x0803e88f
 8028078:	0803e8a0 	.word	0x0803e8a0

0802807c <__sflush_r>:
 802807c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028084:	0716      	lsls	r6, r2, #28
 8028086:	4605      	mov	r5, r0
 8028088:	460c      	mov	r4, r1
 802808a:	d454      	bmi.n	8028136 <__sflush_r+0xba>
 802808c:	684b      	ldr	r3, [r1, #4]
 802808e:	2b00      	cmp	r3, #0
 8028090:	dc02      	bgt.n	8028098 <__sflush_r+0x1c>
 8028092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028094:	2b00      	cmp	r3, #0
 8028096:	dd48      	ble.n	802812a <__sflush_r+0xae>
 8028098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802809a:	2e00      	cmp	r6, #0
 802809c:	d045      	beq.n	802812a <__sflush_r+0xae>
 802809e:	2300      	movs	r3, #0
 80280a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80280a4:	682f      	ldr	r7, [r5, #0]
 80280a6:	6a21      	ldr	r1, [r4, #32]
 80280a8:	602b      	str	r3, [r5, #0]
 80280aa:	d030      	beq.n	802810e <__sflush_r+0x92>
 80280ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80280ae:	89a3      	ldrh	r3, [r4, #12]
 80280b0:	0759      	lsls	r1, r3, #29
 80280b2:	d505      	bpl.n	80280c0 <__sflush_r+0x44>
 80280b4:	6863      	ldr	r3, [r4, #4]
 80280b6:	1ad2      	subs	r2, r2, r3
 80280b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80280ba:	b10b      	cbz	r3, 80280c0 <__sflush_r+0x44>
 80280bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80280be:	1ad2      	subs	r2, r2, r3
 80280c0:	2300      	movs	r3, #0
 80280c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80280c4:	6a21      	ldr	r1, [r4, #32]
 80280c6:	4628      	mov	r0, r5
 80280c8:	47b0      	blx	r6
 80280ca:	1c43      	adds	r3, r0, #1
 80280cc:	89a3      	ldrh	r3, [r4, #12]
 80280ce:	d106      	bne.n	80280de <__sflush_r+0x62>
 80280d0:	6829      	ldr	r1, [r5, #0]
 80280d2:	291d      	cmp	r1, #29
 80280d4:	d82b      	bhi.n	802812e <__sflush_r+0xb2>
 80280d6:	4a2a      	ldr	r2, [pc, #168]	@ (8028180 <__sflush_r+0x104>)
 80280d8:	40ca      	lsrs	r2, r1
 80280da:	07d6      	lsls	r6, r2, #31
 80280dc:	d527      	bpl.n	802812e <__sflush_r+0xb2>
 80280de:	2200      	movs	r2, #0
 80280e0:	6062      	str	r2, [r4, #4]
 80280e2:	04d9      	lsls	r1, r3, #19
 80280e4:	6922      	ldr	r2, [r4, #16]
 80280e6:	6022      	str	r2, [r4, #0]
 80280e8:	d504      	bpl.n	80280f4 <__sflush_r+0x78>
 80280ea:	1c42      	adds	r2, r0, #1
 80280ec:	d101      	bne.n	80280f2 <__sflush_r+0x76>
 80280ee:	682b      	ldr	r3, [r5, #0]
 80280f0:	b903      	cbnz	r3, 80280f4 <__sflush_r+0x78>
 80280f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80280f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80280f6:	602f      	str	r7, [r5, #0]
 80280f8:	b1b9      	cbz	r1, 802812a <__sflush_r+0xae>
 80280fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80280fe:	4299      	cmp	r1, r3
 8028100:	d002      	beq.n	8028108 <__sflush_r+0x8c>
 8028102:	4628      	mov	r0, r5
 8028104:	f002 fb82 	bl	802a80c <_free_r>
 8028108:	2300      	movs	r3, #0
 802810a:	6363      	str	r3, [r4, #52]	@ 0x34
 802810c:	e00d      	b.n	802812a <__sflush_r+0xae>
 802810e:	2301      	movs	r3, #1
 8028110:	4628      	mov	r0, r5
 8028112:	47b0      	blx	r6
 8028114:	4602      	mov	r2, r0
 8028116:	1c50      	adds	r0, r2, #1
 8028118:	d1c9      	bne.n	80280ae <__sflush_r+0x32>
 802811a:	682b      	ldr	r3, [r5, #0]
 802811c:	2b00      	cmp	r3, #0
 802811e:	d0c6      	beq.n	80280ae <__sflush_r+0x32>
 8028120:	2b1d      	cmp	r3, #29
 8028122:	d001      	beq.n	8028128 <__sflush_r+0xac>
 8028124:	2b16      	cmp	r3, #22
 8028126:	d11e      	bne.n	8028166 <__sflush_r+0xea>
 8028128:	602f      	str	r7, [r5, #0]
 802812a:	2000      	movs	r0, #0
 802812c:	e022      	b.n	8028174 <__sflush_r+0xf8>
 802812e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028132:	b21b      	sxth	r3, r3
 8028134:	e01b      	b.n	802816e <__sflush_r+0xf2>
 8028136:	690f      	ldr	r7, [r1, #16]
 8028138:	2f00      	cmp	r7, #0
 802813a:	d0f6      	beq.n	802812a <__sflush_r+0xae>
 802813c:	0793      	lsls	r3, r2, #30
 802813e:	680e      	ldr	r6, [r1, #0]
 8028140:	bf08      	it	eq
 8028142:	694b      	ldreq	r3, [r1, #20]
 8028144:	600f      	str	r7, [r1, #0]
 8028146:	bf18      	it	ne
 8028148:	2300      	movne	r3, #0
 802814a:	eba6 0807 	sub.w	r8, r6, r7
 802814e:	608b      	str	r3, [r1, #8]
 8028150:	f1b8 0f00 	cmp.w	r8, #0
 8028154:	dde9      	ble.n	802812a <__sflush_r+0xae>
 8028156:	6a21      	ldr	r1, [r4, #32]
 8028158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802815a:	4643      	mov	r3, r8
 802815c:	463a      	mov	r2, r7
 802815e:	4628      	mov	r0, r5
 8028160:	47b0      	blx	r6
 8028162:	2800      	cmp	r0, #0
 8028164:	dc08      	bgt.n	8028178 <__sflush_r+0xfc>
 8028166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802816a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802816e:	81a3      	strh	r3, [r4, #12]
 8028170:	f04f 30ff 	mov.w	r0, #4294967295
 8028174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028178:	4407      	add	r7, r0
 802817a:	eba8 0800 	sub.w	r8, r8, r0
 802817e:	e7e7      	b.n	8028150 <__sflush_r+0xd4>
 8028180:	20400001 	.word	0x20400001

08028184 <_fflush_r>:
 8028184:	b538      	push	{r3, r4, r5, lr}
 8028186:	690b      	ldr	r3, [r1, #16]
 8028188:	4605      	mov	r5, r0
 802818a:	460c      	mov	r4, r1
 802818c:	b913      	cbnz	r3, 8028194 <_fflush_r+0x10>
 802818e:	2500      	movs	r5, #0
 8028190:	4628      	mov	r0, r5
 8028192:	bd38      	pop	{r3, r4, r5, pc}
 8028194:	b118      	cbz	r0, 802819e <_fflush_r+0x1a>
 8028196:	6a03      	ldr	r3, [r0, #32]
 8028198:	b90b      	cbnz	r3, 802819e <_fflush_r+0x1a>
 802819a:	f000 f8a7 	bl	80282ec <__sinit>
 802819e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80281a2:	2b00      	cmp	r3, #0
 80281a4:	d0f3      	beq.n	802818e <_fflush_r+0xa>
 80281a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80281a8:	07d0      	lsls	r0, r2, #31
 80281aa:	d404      	bmi.n	80281b6 <_fflush_r+0x32>
 80281ac:	0599      	lsls	r1, r3, #22
 80281ae:	d402      	bmi.n	80281b6 <_fflush_r+0x32>
 80281b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80281b2:	f001 fd19 	bl	8029be8 <__retarget_lock_acquire_recursive>
 80281b6:	4628      	mov	r0, r5
 80281b8:	4621      	mov	r1, r4
 80281ba:	f7ff ff5f 	bl	802807c <__sflush_r>
 80281be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80281c0:	07da      	lsls	r2, r3, #31
 80281c2:	4605      	mov	r5, r0
 80281c4:	d4e4      	bmi.n	8028190 <_fflush_r+0xc>
 80281c6:	89a3      	ldrh	r3, [r4, #12]
 80281c8:	059b      	lsls	r3, r3, #22
 80281ca:	d4e1      	bmi.n	8028190 <_fflush_r+0xc>
 80281cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80281ce:	f001 fd0d 	bl	8029bec <__retarget_lock_release_recursive>
 80281d2:	e7dd      	b.n	8028190 <_fflush_r+0xc>

080281d4 <std>:
 80281d4:	2300      	movs	r3, #0
 80281d6:	b510      	push	{r4, lr}
 80281d8:	4604      	mov	r4, r0
 80281da:	e9c0 3300 	strd	r3, r3, [r0]
 80281de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80281e2:	6083      	str	r3, [r0, #8]
 80281e4:	8181      	strh	r1, [r0, #12]
 80281e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80281e8:	81c2      	strh	r2, [r0, #14]
 80281ea:	6183      	str	r3, [r0, #24]
 80281ec:	4619      	mov	r1, r3
 80281ee:	2208      	movs	r2, #8
 80281f0:	305c      	adds	r0, #92	@ 0x5c
 80281f2:	f000 fad5 	bl	80287a0 <memset>
 80281f6:	4b0d      	ldr	r3, [pc, #52]	@ (802822c <std+0x58>)
 80281f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80281fa:	4b0d      	ldr	r3, [pc, #52]	@ (8028230 <std+0x5c>)
 80281fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80281fe:	4b0d      	ldr	r3, [pc, #52]	@ (8028234 <std+0x60>)
 8028200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8028202:	4b0d      	ldr	r3, [pc, #52]	@ (8028238 <std+0x64>)
 8028204:	6323      	str	r3, [r4, #48]	@ 0x30
 8028206:	4b0d      	ldr	r3, [pc, #52]	@ (802823c <std+0x68>)
 8028208:	6224      	str	r4, [r4, #32]
 802820a:	429c      	cmp	r4, r3
 802820c:	d006      	beq.n	802821c <std+0x48>
 802820e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8028212:	4294      	cmp	r4, r2
 8028214:	d002      	beq.n	802821c <std+0x48>
 8028216:	33d0      	adds	r3, #208	@ 0xd0
 8028218:	429c      	cmp	r4, r3
 802821a:	d105      	bne.n	8028228 <std+0x54>
 802821c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8028220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028224:	f001 bcde 	b.w	8029be4 <__retarget_lock_init_recursive>
 8028228:	bd10      	pop	{r4, pc}
 802822a:	bf00      	nop
 802822c:	08028599 	.word	0x08028599
 8028230:	080285bf 	.word	0x080285bf
 8028234:	080285f7 	.word	0x080285f7
 8028238:	0802861b 	.word	0x0802861b
 802823c:	2401d130 	.word	0x2401d130

08028240 <stdio_exit_handler>:
 8028240:	4a02      	ldr	r2, [pc, #8]	@ (802824c <stdio_exit_handler+0xc>)
 8028242:	4903      	ldr	r1, [pc, #12]	@ (8028250 <stdio_exit_handler+0x10>)
 8028244:	4803      	ldr	r0, [pc, #12]	@ (8028254 <stdio_exit_handler+0x14>)
 8028246:	f000 b87b 	b.w	8028340 <_fwalk_sglue>
 802824a:	bf00      	nop
 802824c:	24000828 	.word	0x24000828
 8028250:	08028185 	.word	0x08028185
 8028254:	240009ac 	.word	0x240009ac

08028258 <cleanup_stdio>:
 8028258:	6841      	ldr	r1, [r0, #4]
 802825a:	4b0c      	ldr	r3, [pc, #48]	@ (802828c <cleanup_stdio+0x34>)
 802825c:	4299      	cmp	r1, r3
 802825e:	b510      	push	{r4, lr}
 8028260:	4604      	mov	r4, r0
 8028262:	d001      	beq.n	8028268 <cleanup_stdio+0x10>
 8028264:	f7ff ff8e 	bl	8028184 <_fflush_r>
 8028268:	68a1      	ldr	r1, [r4, #8]
 802826a:	4b09      	ldr	r3, [pc, #36]	@ (8028290 <cleanup_stdio+0x38>)
 802826c:	4299      	cmp	r1, r3
 802826e:	d002      	beq.n	8028276 <cleanup_stdio+0x1e>
 8028270:	4620      	mov	r0, r4
 8028272:	f7ff ff87 	bl	8028184 <_fflush_r>
 8028276:	68e1      	ldr	r1, [r4, #12]
 8028278:	4b06      	ldr	r3, [pc, #24]	@ (8028294 <cleanup_stdio+0x3c>)
 802827a:	4299      	cmp	r1, r3
 802827c:	d004      	beq.n	8028288 <cleanup_stdio+0x30>
 802827e:	4620      	mov	r0, r4
 8028280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028284:	f7ff bf7e 	b.w	8028184 <_fflush_r>
 8028288:	bd10      	pop	{r4, pc}
 802828a:	bf00      	nop
 802828c:	2401d130 	.word	0x2401d130
 8028290:	2401d198 	.word	0x2401d198
 8028294:	2401d200 	.word	0x2401d200

08028298 <global_stdio_init.part.0>:
 8028298:	b510      	push	{r4, lr}
 802829a:	4b0b      	ldr	r3, [pc, #44]	@ (80282c8 <global_stdio_init.part.0+0x30>)
 802829c:	4c0b      	ldr	r4, [pc, #44]	@ (80282cc <global_stdio_init.part.0+0x34>)
 802829e:	4a0c      	ldr	r2, [pc, #48]	@ (80282d0 <global_stdio_init.part.0+0x38>)
 80282a0:	601a      	str	r2, [r3, #0]
 80282a2:	4620      	mov	r0, r4
 80282a4:	2200      	movs	r2, #0
 80282a6:	2104      	movs	r1, #4
 80282a8:	f7ff ff94 	bl	80281d4 <std>
 80282ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80282b0:	2201      	movs	r2, #1
 80282b2:	2109      	movs	r1, #9
 80282b4:	f7ff ff8e 	bl	80281d4 <std>
 80282b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80282bc:	2202      	movs	r2, #2
 80282be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80282c2:	2112      	movs	r1, #18
 80282c4:	f7ff bf86 	b.w	80281d4 <std>
 80282c8:	2401d268 	.word	0x2401d268
 80282cc:	2401d130 	.word	0x2401d130
 80282d0:	08028241 	.word	0x08028241

080282d4 <__sfp_lock_acquire>:
 80282d4:	4801      	ldr	r0, [pc, #4]	@ (80282dc <__sfp_lock_acquire+0x8>)
 80282d6:	f001 bc87 	b.w	8029be8 <__retarget_lock_acquire_recursive>
 80282da:	bf00      	nop
 80282dc:	2401d297 	.word	0x2401d297

080282e0 <__sfp_lock_release>:
 80282e0:	4801      	ldr	r0, [pc, #4]	@ (80282e8 <__sfp_lock_release+0x8>)
 80282e2:	f001 bc83 	b.w	8029bec <__retarget_lock_release_recursive>
 80282e6:	bf00      	nop
 80282e8:	2401d297 	.word	0x2401d297

080282ec <__sinit>:
 80282ec:	b510      	push	{r4, lr}
 80282ee:	4604      	mov	r4, r0
 80282f0:	f7ff fff0 	bl	80282d4 <__sfp_lock_acquire>
 80282f4:	6a23      	ldr	r3, [r4, #32]
 80282f6:	b11b      	cbz	r3, 8028300 <__sinit+0x14>
 80282f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80282fc:	f7ff bff0 	b.w	80282e0 <__sfp_lock_release>
 8028300:	4b04      	ldr	r3, [pc, #16]	@ (8028314 <__sinit+0x28>)
 8028302:	6223      	str	r3, [r4, #32]
 8028304:	4b04      	ldr	r3, [pc, #16]	@ (8028318 <__sinit+0x2c>)
 8028306:	681b      	ldr	r3, [r3, #0]
 8028308:	2b00      	cmp	r3, #0
 802830a:	d1f5      	bne.n	80282f8 <__sinit+0xc>
 802830c:	f7ff ffc4 	bl	8028298 <global_stdio_init.part.0>
 8028310:	e7f2      	b.n	80282f8 <__sinit+0xc>
 8028312:	bf00      	nop
 8028314:	08028259 	.word	0x08028259
 8028318:	2401d268 	.word	0x2401d268

0802831c <fiprintf>:
 802831c:	b40e      	push	{r1, r2, r3}
 802831e:	b503      	push	{r0, r1, lr}
 8028320:	4601      	mov	r1, r0
 8028322:	ab03      	add	r3, sp, #12
 8028324:	4805      	ldr	r0, [pc, #20]	@ (802833c <fiprintf+0x20>)
 8028326:	f853 2b04 	ldr.w	r2, [r3], #4
 802832a:	6800      	ldr	r0, [r0, #0]
 802832c:	9301      	str	r3, [sp, #4]
 802832e:	f003 feed 	bl	802c10c <_vfiprintf_r>
 8028332:	b002      	add	sp, #8
 8028334:	f85d eb04 	ldr.w	lr, [sp], #4
 8028338:	b003      	add	sp, #12
 802833a:	4770      	bx	lr
 802833c:	240009a8 	.word	0x240009a8

08028340 <_fwalk_sglue>:
 8028340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028344:	4607      	mov	r7, r0
 8028346:	4688      	mov	r8, r1
 8028348:	4614      	mov	r4, r2
 802834a:	2600      	movs	r6, #0
 802834c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028350:	f1b9 0901 	subs.w	r9, r9, #1
 8028354:	d505      	bpl.n	8028362 <_fwalk_sglue+0x22>
 8028356:	6824      	ldr	r4, [r4, #0]
 8028358:	2c00      	cmp	r4, #0
 802835a:	d1f7      	bne.n	802834c <_fwalk_sglue+0xc>
 802835c:	4630      	mov	r0, r6
 802835e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028362:	89ab      	ldrh	r3, [r5, #12]
 8028364:	2b01      	cmp	r3, #1
 8028366:	d907      	bls.n	8028378 <_fwalk_sglue+0x38>
 8028368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802836c:	3301      	adds	r3, #1
 802836e:	d003      	beq.n	8028378 <_fwalk_sglue+0x38>
 8028370:	4629      	mov	r1, r5
 8028372:	4638      	mov	r0, r7
 8028374:	47c0      	blx	r8
 8028376:	4306      	orrs	r6, r0
 8028378:	3568      	adds	r5, #104	@ 0x68
 802837a:	e7e9      	b.n	8028350 <_fwalk_sglue+0x10>

0802837c <iprintf>:
 802837c:	b40f      	push	{r0, r1, r2, r3}
 802837e:	b507      	push	{r0, r1, r2, lr}
 8028380:	4906      	ldr	r1, [pc, #24]	@ (802839c <iprintf+0x20>)
 8028382:	ab04      	add	r3, sp, #16
 8028384:	6808      	ldr	r0, [r1, #0]
 8028386:	f853 2b04 	ldr.w	r2, [r3], #4
 802838a:	6881      	ldr	r1, [r0, #8]
 802838c:	9301      	str	r3, [sp, #4]
 802838e:	f003 febd 	bl	802c10c <_vfiprintf_r>
 8028392:	b003      	add	sp, #12
 8028394:	f85d eb04 	ldr.w	lr, [sp], #4
 8028398:	b004      	add	sp, #16
 802839a:	4770      	bx	lr
 802839c:	240009a8 	.word	0x240009a8

080283a0 <_putc_r>:
 80283a0:	b570      	push	{r4, r5, r6, lr}
 80283a2:	460d      	mov	r5, r1
 80283a4:	4614      	mov	r4, r2
 80283a6:	4606      	mov	r6, r0
 80283a8:	b118      	cbz	r0, 80283b2 <_putc_r+0x12>
 80283aa:	6a03      	ldr	r3, [r0, #32]
 80283ac:	b90b      	cbnz	r3, 80283b2 <_putc_r+0x12>
 80283ae:	f7ff ff9d 	bl	80282ec <__sinit>
 80283b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80283b4:	07d8      	lsls	r0, r3, #31
 80283b6:	d405      	bmi.n	80283c4 <_putc_r+0x24>
 80283b8:	89a3      	ldrh	r3, [r4, #12]
 80283ba:	0599      	lsls	r1, r3, #22
 80283bc:	d402      	bmi.n	80283c4 <_putc_r+0x24>
 80283be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80283c0:	f001 fc12 	bl	8029be8 <__retarget_lock_acquire_recursive>
 80283c4:	68a3      	ldr	r3, [r4, #8]
 80283c6:	3b01      	subs	r3, #1
 80283c8:	2b00      	cmp	r3, #0
 80283ca:	60a3      	str	r3, [r4, #8]
 80283cc:	da05      	bge.n	80283da <_putc_r+0x3a>
 80283ce:	69a2      	ldr	r2, [r4, #24]
 80283d0:	4293      	cmp	r3, r2
 80283d2:	db12      	blt.n	80283fa <_putc_r+0x5a>
 80283d4:	b2eb      	uxtb	r3, r5
 80283d6:	2b0a      	cmp	r3, #10
 80283d8:	d00f      	beq.n	80283fa <_putc_r+0x5a>
 80283da:	6823      	ldr	r3, [r4, #0]
 80283dc:	1c5a      	adds	r2, r3, #1
 80283de:	6022      	str	r2, [r4, #0]
 80283e0:	701d      	strb	r5, [r3, #0]
 80283e2:	b2ed      	uxtb	r5, r5
 80283e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80283e6:	07da      	lsls	r2, r3, #31
 80283e8:	d405      	bmi.n	80283f6 <_putc_r+0x56>
 80283ea:	89a3      	ldrh	r3, [r4, #12]
 80283ec:	059b      	lsls	r3, r3, #22
 80283ee:	d402      	bmi.n	80283f6 <_putc_r+0x56>
 80283f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80283f2:	f001 fbfb 	bl	8029bec <__retarget_lock_release_recursive>
 80283f6:	4628      	mov	r0, r5
 80283f8:	bd70      	pop	{r4, r5, r6, pc}
 80283fa:	4629      	mov	r1, r5
 80283fc:	4622      	mov	r2, r4
 80283fe:	4630      	mov	r0, r6
 8028400:	f000 f90f 	bl	8028622 <__swbuf_r>
 8028404:	4605      	mov	r5, r0
 8028406:	e7ed      	b.n	80283e4 <_putc_r+0x44>

08028408 <putchar>:
 8028408:	4b02      	ldr	r3, [pc, #8]	@ (8028414 <putchar+0xc>)
 802840a:	4601      	mov	r1, r0
 802840c:	6818      	ldr	r0, [r3, #0]
 802840e:	6882      	ldr	r2, [r0, #8]
 8028410:	f7ff bfc6 	b.w	80283a0 <_putc_r>
 8028414:	240009a8 	.word	0x240009a8

08028418 <_puts_r>:
 8028418:	6a03      	ldr	r3, [r0, #32]
 802841a:	b570      	push	{r4, r5, r6, lr}
 802841c:	6884      	ldr	r4, [r0, #8]
 802841e:	4605      	mov	r5, r0
 8028420:	460e      	mov	r6, r1
 8028422:	b90b      	cbnz	r3, 8028428 <_puts_r+0x10>
 8028424:	f7ff ff62 	bl	80282ec <__sinit>
 8028428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802842a:	07db      	lsls	r3, r3, #31
 802842c:	d405      	bmi.n	802843a <_puts_r+0x22>
 802842e:	89a3      	ldrh	r3, [r4, #12]
 8028430:	0598      	lsls	r0, r3, #22
 8028432:	d402      	bmi.n	802843a <_puts_r+0x22>
 8028434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028436:	f001 fbd7 	bl	8029be8 <__retarget_lock_acquire_recursive>
 802843a:	89a3      	ldrh	r3, [r4, #12]
 802843c:	0719      	lsls	r1, r3, #28
 802843e:	d502      	bpl.n	8028446 <_puts_r+0x2e>
 8028440:	6923      	ldr	r3, [r4, #16]
 8028442:	2b00      	cmp	r3, #0
 8028444:	d135      	bne.n	80284b2 <_puts_r+0x9a>
 8028446:	4621      	mov	r1, r4
 8028448:	4628      	mov	r0, r5
 802844a:	f000 f929 	bl	80286a0 <__swsetup_r>
 802844e:	b380      	cbz	r0, 80284b2 <_puts_r+0x9a>
 8028450:	f04f 35ff 	mov.w	r5, #4294967295
 8028454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028456:	07da      	lsls	r2, r3, #31
 8028458:	d405      	bmi.n	8028466 <_puts_r+0x4e>
 802845a:	89a3      	ldrh	r3, [r4, #12]
 802845c:	059b      	lsls	r3, r3, #22
 802845e:	d402      	bmi.n	8028466 <_puts_r+0x4e>
 8028460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028462:	f001 fbc3 	bl	8029bec <__retarget_lock_release_recursive>
 8028466:	4628      	mov	r0, r5
 8028468:	bd70      	pop	{r4, r5, r6, pc}
 802846a:	2b00      	cmp	r3, #0
 802846c:	da04      	bge.n	8028478 <_puts_r+0x60>
 802846e:	69a2      	ldr	r2, [r4, #24]
 8028470:	429a      	cmp	r2, r3
 8028472:	dc17      	bgt.n	80284a4 <_puts_r+0x8c>
 8028474:	290a      	cmp	r1, #10
 8028476:	d015      	beq.n	80284a4 <_puts_r+0x8c>
 8028478:	6823      	ldr	r3, [r4, #0]
 802847a:	1c5a      	adds	r2, r3, #1
 802847c:	6022      	str	r2, [r4, #0]
 802847e:	7019      	strb	r1, [r3, #0]
 8028480:	68a3      	ldr	r3, [r4, #8]
 8028482:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8028486:	3b01      	subs	r3, #1
 8028488:	60a3      	str	r3, [r4, #8]
 802848a:	2900      	cmp	r1, #0
 802848c:	d1ed      	bne.n	802846a <_puts_r+0x52>
 802848e:	2b00      	cmp	r3, #0
 8028490:	da11      	bge.n	80284b6 <_puts_r+0x9e>
 8028492:	4622      	mov	r2, r4
 8028494:	210a      	movs	r1, #10
 8028496:	4628      	mov	r0, r5
 8028498:	f000 f8c3 	bl	8028622 <__swbuf_r>
 802849c:	3001      	adds	r0, #1
 802849e:	d0d7      	beq.n	8028450 <_puts_r+0x38>
 80284a0:	250a      	movs	r5, #10
 80284a2:	e7d7      	b.n	8028454 <_puts_r+0x3c>
 80284a4:	4622      	mov	r2, r4
 80284a6:	4628      	mov	r0, r5
 80284a8:	f000 f8bb 	bl	8028622 <__swbuf_r>
 80284ac:	3001      	adds	r0, #1
 80284ae:	d1e7      	bne.n	8028480 <_puts_r+0x68>
 80284b0:	e7ce      	b.n	8028450 <_puts_r+0x38>
 80284b2:	3e01      	subs	r6, #1
 80284b4:	e7e4      	b.n	8028480 <_puts_r+0x68>
 80284b6:	6823      	ldr	r3, [r4, #0]
 80284b8:	1c5a      	adds	r2, r3, #1
 80284ba:	6022      	str	r2, [r4, #0]
 80284bc:	220a      	movs	r2, #10
 80284be:	701a      	strb	r2, [r3, #0]
 80284c0:	e7ee      	b.n	80284a0 <_puts_r+0x88>
	...

080284c4 <puts>:
 80284c4:	4b02      	ldr	r3, [pc, #8]	@ (80284d0 <puts+0xc>)
 80284c6:	4601      	mov	r1, r0
 80284c8:	6818      	ldr	r0, [r3, #0]
 80284ca:	f7ff bfa5 	b.w	8028418 <_puts_r>
 80284ce:	bf00      	nop
 80284d0:	240009a8 	.word	0x240009a8

080284d4 <sniprintf>:
 80284d4:	b40c      	push	{r2, r3}
 80284d6:	b530      	push	{r4, r5, lr}
 80284d8:	4b18      	ldr	r3, [pc, #96]	@ (802853c <sniprintf+0x68>)
 80284da:	1e0c      	subs	r4, r1, #0
 80284dc:	681d      	ldr	r5, [r3, #0]
 80284de:	b09d      	sub	sp, #116	@ 0x74
 80284e0:	da08      	bge.n	80284f4 <sniprintf+0x20>
 80284e2:	238b      	movs	r3, #139	@ 0x8b
 80284e4:	602b      	str	r3, [r5, #0]
 80284e6:	f04f 30ff 	mov.w	r0, #4294967295
 80284ea:	b01d      	add	sp, #116	@ 0x74
 80284ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80284f0:	b002      	add	sp, #8
 80284f2:	4770      	bx	lr
 80284f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80284f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80284fc:	f04f 0300 	mov.w	r3, #0
 8028500:	931b      	str	r3, [sp, #108]	@ 0x6c
 8028502:	bf14      	ite	ne
 8028504:	f104 33ff 	addne.w	r3, r4, #4294967295
 8028508:	4623      	moveq	r3, r4
 802850a:	9304      	str	r3, [sp, #16]
 802850c:	9307      	str	r3, [sp, #28]
 802850e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028512:	9002      	str	r0, [sp, #8]
 8028514:	9006      	str	r0, [sp, #24]
 8028516:	f8ad 3016 	strh.w	r3, [sp, #22]
 802851a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802851c:	ab21      	add	r3, sp, #132	@ 0x84
 802851e:	a902      	add	r1, sp, #8
 8028520:	4628      	mov	r0, r5
 8028522:	9301      	str	r3, [sp, #4]
 8028524:	f003 fafc 	bl	802bb20 <_svfiprintf_r>
 8028528:	1c43      	adds	r3, r0, #1
 802852a:	bfbc      	itt	lt
 802852c:	238b      	movlt	r3, #139	@ 0x8b
 802852e:	602b      	strlt	r3, [r5, #0]
 8028530:	2c00      	cmp	r4, #0
 8028532:	d0da      	beq.n	80284ea <sniprintf+0x16>
 8028534:	9b02      	ldr	r3, [sp, #8]
 8028536:	2200      	movs	r2, #0
 8028538:	701a      	strb	r2, [r3, #0]
 802853a:	e7d6      	b.n	80284ea <sniprintf+0x16>
 802853c:	240009a8 	.word	0x240009a8

08028540 <siscanf>:
 8028540:	b40e      	push	{r1, r2, r3}
 8028542:	b570      	push	{r4, r5, r6, lr}
 8028544:	b09d      	sub	sp, #116	@ 0x74
 8028546:	ac21      	add	r4, sp, #132	@ 0x84
 8028548:	2500      	movs	r5, #0
 802854a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802854e:	f854 6b04 	ldr.w	r6, [r4], #4
 8028552:	f8ad 2014 	strh.w	r2, [sp, #20]
 8028556:	951b      	str	r5, [sp, #108]	@ 0x6c
 8028558:	9002      	str	r0, [sp, #8]
 802855a:	9006      	str	r0, [sp, #24]
 802855c:	f7d7 ff38 	bl	80003d0 <strlen>
 8028560:	4b0b      	ldr	r3, [pc, #44]	@ (8028590 <siscanf+0x50>)
 8028562:	9003      	str	r0, [sp, #12]
 8028564:	9007      	str	r0, [sp, #28]
 8028566:	480b      	ldr	r0, [pc, #44]	@ (8028594 <siscanf+0x54>)
 8028568:	930b      	str	r3, [sp, #44]	@ 0x2c
 802856a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802856e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8028572:	4632      	mov	r2, r6
 8028574:	4623      	mov	r3, r4
 8028576:	a902      	add	r1, sp, #8
 8028578:	6800      	ldr	r0, [r0, #0]
 802857a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802857c:	9514      	str	r5, [sp, #80]	@ 0x50
 802857e:	9401      	str	r4, [sp, #4]
 8028580:	f003 fc24 	bl	802bdcc <__ssvfiscanf_r>
 8028584:	b01d      	add	sp, #116	@ 0x74
 8028586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802858a:	b003      	add	sp, #12
 802858c:	4770      	bx	lr
 802858e:	bf00      	nop
 8028590:	080285bb 	.word	0x080285bb
 8028594:	240009a8 	.word	0x240009a8

08028598 <__sread>:
 8028598:	b510      	push	{r4, lr}
 802859a:	460c      	mov	r4, r1
 802859c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80285a0:	f001 faae 	bl	8029b00 <_read_r>
 80285a4:	2800      	cmp	r0, #0
 80285a6:	bfab      	itete	ge
 80285a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80285aa:	89a3      	ldrhlt	r3, [r4, #12]
 80285ac:	181b      	addge	r3, r3, r0
 80285ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80285b2:	bfac      	ite	ge
 80285b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80285b6:	81a3      	strhlt	r3, [r4, #12]
 80285b8:	bd10      	pop	{r4, pc}

080285ba <__seofread>:
 80285ba:	2000      	movs	r0, #0
 80285bc:	4770      	bx	lr

080285be <__swrite>:
 80285be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80285c2:	461f      	mov	r7, r3
 80285c4:	898b      	ldrh	r3, [r1, #12]
 80285c6:	05db      	lsls	r3, r3, #23
 80285c8:	4605      	mov	r5, r0
 80285ca:	460c      	mov	r4, r1
 80285cc:	4616      	mov	r6, r2
 80285ce:	d505      	bpl.n	80285dc <__swrite+0x1e>
 80285d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80285d4:	2302      	movs	r3, #2
 80285d6:	2200      	movs	r2, #0
 80285d8:	f001 fa80 	bl	8029adc <_lseek_r>
 80285dc:	89a3      	ldrh	r3, [r4, #12]
 80285de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80285e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80285e6:	81a3      	strh	r3, [r4, #12]
 80285e8:	4632      	mov	r2, r6
 80285ea:	463b      	mov	r3, r7
 80285ec:	4628      	mov	r0, r5
 80285ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80285f2:	f001 babb 	b.w	8029b6c <_write_r>

080285f6 <__sseek>:
 80285f6:	b510      	push	{r4, lr}
 80285f8:	460c      	mov	r4, r1
 80285fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80285fe:	f001 fa6d 	bl	8029adc <_lseek_r>
 8028602:	1c43      	adds	r3, r0, #1
 8028604:	89a3      	ldrh	r3, [r4, #12]
 8028606:	bf15      	itete	ne
 8028608:	6560      	strne	r0, [r4, #84]	@ 0x54
 802860a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802860e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8028612:	81a3      	strheq	r3, [r4, #12]
 8028614:	bf18      	it	ne
 8028616:	81a3      	strhne	r3, [r4, #12]
 8028618:	bd10      	pop	{r4, pc}

0802861a <__sclose>:
 802861a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802861e:	f001 ba4d 	b.w	8029abc <_close_r>

08028622 <__swbuf_r>:
 8028622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028624:	460e      	mov	r6, r1
 8028626:	4614      	mov	r4, r2
 8028628:	4605      	mov	r5, r0
 802862a:	b118      	cbz	r0, 8028634 <__swbuf_r+0x12>
 802862c:	6a03      	ldr	r3, [r0, #32]
 802862e:	b90b      	cbnz	r3, 8028634 <__swbuf_r+0x12>
 8028630:	f7ff fe5c 	bl	80282ec <__sinit>
 8028634:	69a3      	ldr	r3, [r4, #24]
 8028636:	60a3      	str	r3, [r4, #8]
 8028638:	89a3      	ldrh	r3, [r4, #12]
 802863a:	071a      	lsls	r2, r3, #28
 802863c:	d501      	bpl.n	8028642 <__swbuf_r+0x20>
 802863e:	6923      	ldr	r3, [r4, #16]
 8028640:	b943      	cbnz	r3, 8028654 <__swbuf_r+0x32>
 8028642:	4621      	mov	r1, r4
 8028644:	4628      	mov	r0, r5
 8028646:	f000 f82b 	bl	80286a0 <__swsetup_r>
 802864a:	b118      	cbz	r0, 8028654 <__swbuf_r+0x32>
 802864c:	f04f 37ff 	mov.w	r7, #4294967295
 8028650:	4638      	mov	r0, r7
 8028652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028654:	6823      	ldr	r3, [r4, #0]
 8028656:	6922      	ldr	r2, [r4, #16]
 8028658:	1a98      	subs	r0, r3, r2
 802865a:	6963      	ldr	r3, [r4, #20]
 802865c:	b2f6      	uxtb	r6, r6
 802865e:	4283      	cmp	r3, r0
 8028660:	4637      	mov	r7, r6
 8028662:	dc05      	bgt.n	8028670 <__swbuf_r+0x4e>
 8028664:	4621      	mov	r1, r4
 8028666:	4628      	mov	r0, r5
 8028668:	f7ff fd8c 	bl	8028184 <_fflush_r>
 802866c:	2800      	cmp	r0, #0
 802866e:	d1ed      	bne.n	802864c <__swbuf_r+0x2a>
 8028670:	68a3      	ldr	r3, [r4, #8]
 8028672:	3b01      	subs	r3, #1
 8028674:	60a3      	str	r3, [r4, #8]
 8028676:	6823      	ldr	r3, [r4, #0]
 8028678:	1c5a      	adds	r2, r3, #1
 802867a:	6022      	str	r2, [r4, #0]
 802867c:	701e      	strb	r6, [r3, #0]
 802867e:	6962      	ldr	r2, [r4, #20]
 8028680:	1c43      	adds	r3, r0, #1
 8028682:	429a      	cmp	r2, r3
 8028684:	d004      	beq.n	8028690 <__swbuf_r+0x6e>
 8028686:	89a3      	ldrh	r3, [r4, #12]
 8028688:	07db      	lsls	r3, r3, #31
 802868a:	d5e1      	bpl.n	8028650 <__swbuf_r+0x2e>
 802868c:	2e0a      	cmp	r6, #10
 802868e:	d1df      	bne.n	8028650 <__swbuf_r+0x2e>
 8028690:	4621      	mov	r1, r4
 8028692:	4628      	mov	r0, r5
 8028694:	f7ff fd76 	bl	8028184 <_fflush_r>
 8028698:	2800      	cmp	r0, #0
 802869a:	d0d9      	beq.n	8028650 <__swbuf_r+0x2e>
 802869c:	e7d6      	b.n	802864c <__swbuf_r+0x2a>
	...

080286a0 <__swsetup_r>:
 80286a0:	b538      	push	{r3, r4, r5, lr}
 80286a2:	4b29      	ldr	r3, [pc, #164]	@ (8028748 <__swsetup_r+0xa8>)
 80286a4:	4605      	mov	r5, r0
 80286a6:	6818      	ldr	r0, [r3, #0]
 80286a8:	460c      	mov	r4, r1
 80286aa:	b118      	cbz	r0, 80286b4 <__swsetup_r+0x14>
 80286ac:	6a03      	ldr	r3, [r0, #32]
 80286ae:	b90b      	cbnz	r3, 80286b4 <__swsetup_r+0x14>
 80286b0:	f7ff fe1c 	bl	80282ec <__sinit>
 80286b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80286b8:	0719      	lsls	r1, r3, #28
 80286ba:	d422      	bmi.n	8028702 <__swsetup_r+0x62>
 80286bc:	06da      	lsls	r2, r3, #27
 80286be:	d407      	bmi.n	80286d0 <__swsetup_r+0x30>
 80286c0:	2209      	movs	r2, #9
 80286c2:	602a      	str	r2, [r5, #0]
 80286c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80286c8:	81a3      	strh	r3, [r4, #12]
 80286ca:	f04f 30ff 	mov.w	r0, #4294967295
 80286ce:	e033      	b.n	8028738 <__swsetup_r+0x98>
 80286d0:	0758      	lsls	r0, r3, #29
 80286d2:	d512      	bpl.n	80286fa <__swsetup_r+0x5a>
 80286d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80286d6:	b141      	cbz	r1, 80286ea <__swsetup_r+0x4a>
 80286d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80286dc:	4299      	cmp	r1, r3
 80286de:	d002      	beq.n	80286e6 <__swsetup_r+0x46>
 80286e0:	4628      	mov	r0, r5
 80286e2:	f002 f893 	bl	802a80c <_free_r>
 80286e6:	2300      	movs	r3, #0
 80286e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80286ea:	89a3      	ldrh	r3, [r4, #12]
 80286ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80286f0:	81a3      	strh	r3, [r4, #12]
 80286f2:	2300      	movs	r3, #0
 80286f4:	6063      	str	r3, [r4, #4]
 80286f6:	6923      	ldr	r3, [r4, #16]
 80286f8:	6023      	str	r3, [r4, #0]
 80286fa:	89a3      	ldrh	r3, [r4, #12]
 80286fc:	f043 0308 	orr.w	r3, r3, #8
 8028700:	81a3      	strh	r3, [r4, #12]
 8028702:	6923      	ldr	r3, [r4, #16]
 8028704:	b94b      	cbnz	r3, 802871a <__swsetup_r+0x7a>
 8028706:	89a3      	ldrh	r3, [r4, #12]
 8028708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802870c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028710:	d003      	beq.n	802871a <__swsetup_r+0x7a>
 8028712:	4621      	mov	r1, r4
 8028714:	4628      	mov	r0, r5
 8028716:	f003 ff85 	bl	802c624 <__smakebuf_r>
 802871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802871e:	f013 0201 	ands.w	r2, r3, #1
 8028722:	d00a      	beq.n	802873a <__swsetup_r+0x9a>
 8028724:	2200      	movs	r2, #0
 8028726:	60a2      	str	r2, [r4, #8]
 8028728:	6962      	ldr	r2, [r4, #20]
 802872a:	4252      	negs	r2, r2
 802872c:	61a2      	str	r2, [r4, #24]
 802872e:	6922      	ldr	r2, [r4, #16]
 8028730:	b942      	cbnz	r2, 8028744 <__swsetup_r+0xa4>
 8028732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8028736:	d1c5      	bne.n	80286c4 <__swsetup_r+0x24>
 8028738:	bd38      	pop	{r3, r4, r5, pc}
 802873a:	0799      	lsls	r1, r3, #30
 802873c:	bf58      	it	pl
 802873e:	6962      	ldrpl	r2, [r4, #20]
 8028740:	60a2      	str	r2, [r4, #8]
 8028742:	e7f4      	b.n	802872e <__swsetup_r+0x8e>
 8028744:	2000      	movs	r0, #0
 8028746:	e7f7      	b.n	8028738 <__swsetup_r+0x98>
 8028748:	240009a8 	.word	0x240009a8

0802874c <memcmp>:
 802874c:	b510      	push	{r4, lr}
 802874e:	3901      	subs	r1, #1
 8028750:	4402      	add	r2, r0
 8028752:	4290      	cmp	r0, r2
 8028754:	d101      	bne.n	802875a <memcmp+0xe>
 8028756:	2000      	movs	r0, #0
 8028758:	e005      	b.n	8028766 <memcmp+0x1a>
 802875a:	7803      	ldrb	r3, [r0, #0]
 802875c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8028760:	42a3      	cmp	r3, r4
 8028762:	d001      	beq.n	8028768 <memcmp+0x1c>
 8028764:	1b18      	subs	r0, r3, r4
 8028766:	bd10      	pop	{r4, pc}
 8028768:	3001      	adds	r0, #1
 802876a:	e7f2      	b.n	8028752 <memcmp+0x6>

0802876c <memmove>:
 802876c:	4288      	cmp	r0, r1
 802876e:	b510      	push	{r4, lr}
 8028770:	eb01 0402 	add.w	r4, r1, r2
 8028774:	d902      	bls.n	802877c <memmove+0x10>
 8028776:	4284      	cmp	r4, r0
 8028778:	4623      	mov	r3, r4
 802877a:	d807      	bhi.n	802878c <memmove+0x20>
 802877c:	1e43      	subs	r3, r0, #1
 802877e:	42a1      	cmp	r1, r4
 8028780:	d008      	beq.n	8028794 <memmove+0x28>
 8028782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028786:	f803 2f01 	strb.w	r2, [r3, #1]!
 802878a:	e7f8      	b.n	802877e <memmove+0x12>
 802878c:	4402      	add	r2, r0
 802878e:	4601      	mov	r1, r0
 8028790:	428a      	cmp	r2, r1
 8028792:	d100      	bne.n	8028796 <memmove+0x2a>
 8028794:	bd10      	pop	{r4, pc}
 8028796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802879a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802879e:	e7f7      	b.n	8028790 <memmove+0x24>

080287a0 <memset>:
 80287a0:	4402      	add	r2, r0
 80287a2:	4603      	mov	r3, r0
 80287a4:	4293      	cmp	r3, r2
 80287a6:	d100      	bne.n	80287aa <memset+0xa>
 80287a8:	4770      	bx	lr
 80287aa:	f803 1b01 	strb.w	r1, [r3], #1
 80287ae:	e7f9      	b.n	80287a4 <memset+0x4>

080287b0 <strchr>:
 80287b0:	b2c9      	uxtb	r1, r1
 80287b2:	4603      	mov	r3, r0
 80287b4:	4618      	mov	r0, r3
 80287b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80287ba:	b112      	cbz	r2, 80287c2 <strchr+0x12>
 80287bc:	428a      	cmp	r2, r1
 80287be:	d1f9      	bne.n	80287b4 <strchr+0x4>
 80287c0:	4770      	bx	lr
 80287c2:	2900      	cmp	r1, #0
 80287c4:	bf18      	it	ne
 80287c6:	2000      	movne	r0, #0
 80287c8:	4770      	bx	lr

080287ca <strncmp>:
 80287ca:	b510      	push	{r4, lr}
 80287cc:	b16a      	cbz	r2, 80287ea <strncmp+0x20>
 80287ce:	3901      	subs	r1, #1
 80287d0:	1884      	adds	r4, r0, r2
 80287d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80287d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80287da:	429a      	cmp	r2, r3
 80287dc:	d103      	bne.n	80287e6 <strncmp+0x1c>
 80287de:	42a0      	cmp	r0, r4
 80287e0:	d001      	beq.n	80287e6 <strncmp+0x1c>
 80287e2:	2a00      	cmp	r2, #0
 80287e4:	d1f5      	bne.n	80287d2 <strncmp+0x8>
 80287e6:	1ad0      	subs	r0, r2, r3
 80287e8:	bd10      	pop	{r4, pc}
 80287ea:	4610      	mov	r0, r2
 80287ec:	e7fc      	b.n	80287e8 <strncmp+0x1e>

080287ee <strncpy>:
 80287ee:	b510      	push	{r4, lr}
 80287f0:	3901      	subs	r1, #1
 80287f2:	4603      	mov	r3, r0
 80287f4:	b132      	cbz	r2, 8028804 <strncpy+0x16>
 80287f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80287fa:	f803 4b01 	strb.w	r4, [r3], #1
 80287fe:	3a01      	subs	r2, #1
 8028800:	2c00      	cmp	r4, #0
 8028802:	d1f7      	bne.n	80287f4 <strncpy+0x6>
 8028804:	441a      	add	r2, r3
 8028806:	2100      	movs	r1, #0
 8028808:	4293      	cmp	r3, r2
 802880a:	d100      	bne.n	802880e <strncpy+0x20>
 802880c:	bd10      	pop	{r4, pc}
 802880e:	f803 1b01 	strb.w	r1, [r3], #1
 8028812:	e7f9      	b.n	8028808 <strncpy+0x1a>

08028814 <strrchr>:
 8028814:	b538      	push	{r3, r4, r5, lr}
 8028816:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802881a:	4603      	mov	r3, r0
 802881c:	d10e      	bne.n	802883c <strrchr+0x28>
 802881e:	4621      	mov	r1, r4
 8028820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028824:	f7ff bfc4 	b.w	80287b0 <strchr>
 8028828:	1c43      	adds	r3, r0, #1
 802882a:	4605      	mov	r5, r0
 802882c:	4621      	mov	r1, r4
 802882e:	4618      	mov	r0, r3
 8028830:	f7ff ffbe 	bl	80287b0 <strchr>
 8028834:	2800      	cmp	r0, #0
 8028836:	d1f7      	bne.n	8028828 <strrchr+0x14>
 8028838:	4628      	mov	r0, r5
 802883a:	bd38      	pop	{r3, r4, r5, pc}
 802883c:	2500      	movs	r5, #0
 802883e:	e7f5      	b.n	802882c <strrchr+0x18>

08028840 <strstr>:
 8028840:	780a      	ldrb	r2, [r1, #0]
 8028842:	b570      	push	{r4, r5, r6, lr}
 8028844:	b96a      	cbnz	r2, 8028862 <strstr+0x22>
 8028846:	bd70      	pop	{r4, r5, r6, pc}
 8028848:	429a      	cmp	r2, r3
 802884a:	d109      	bne.n	8028860 <strstr+0x20>
 802884c:	460c      	mov	r4, r1
 802884e:	4605      	mov	r5, r0
 8028850:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8028854:	2b00      	cmp	r3, #0
 8028856:	d0f6      	beq.n	8028846 <strstr+0x6>
 8028858:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802885c:	429e      	cmp	r6, r3
 802885e:	d0f7      	beq.n	8028850 <strstr+0x10>
 8028860:	3001      	adds	r0, #1
 8028862:	7803      	ldrb	r3, [r0, #0]
 8028864:	2b00      	cmp	r3, #0
 8028866:	d1ef      	bne.n	8028848 <strstr+0x8>
 8028868:	4618      	mov	r0, r3
 802886a:	e7ec      	b.n	8028846 <strstr+0x6>

0802886c <_raise_r>:
 802886c:	291f      	cmp	r1, #31
 802886e:	b538      	push	{r3, r4, r5, lr}
 8028870:	4605      	mov	r5, r0
 8028872:	460c      	mov	r4, r1
 8028874:	d904      	bls.n	8028880 <_raise_r+0x14>
 8028876:	2316      	movs	r3, #22
 8028878:	6003      	str	r3, [r0, #0]
 802887a:	f04f 30ff 	mov.w	r0, #4294967295
 802887e:	bd38      	pop	{r3, r4, r5, pc}
 8028880:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028882:	b112      	cbz	r2, 802888a <_raise_r+0x1e>
 8028884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028888:	b94b      	cbnz	r3, 802889e <_raise_r+0x32>
 802888a:	4628      	mov	r0, r5
 802888c:	f001 f95c 	bl	8029b48 <_getpid_r>
 8028890:	4622      	mov	r2, r4
 8028892:	4601      	mov	r1, r0
 8028894:	4628      	mov	r0, r5
 8028896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802889a:	f001 b943 	b.w	8029b24 <_kill_r>
 802889e:	2b01      	cmp	r3, #1
 80288a0:	d00a      	beq.n	80288b8 <_raise_r+0x4c>
 80288a2:	1c59      	adds	r1, r3, #1
 80288a4:	d103      	bne.n	80288ae <_raise_r+0x42>
 80288a6:	2316      	movs	r3, #22
 80288a8:	6003      	str	r3, [r0, #0]
 80288aa:	2001      	movs	r0, #1
 80288ac:	e7e7      	b.n	802887e <_raise_r+0x12>
 80288ae:	2100      	movs	r1, #0
 80288b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80288b4:	4620      	mov	r0, r4
 80288b6:	4798      	blx	r3
 80288b8:	2000      	movs	r0, #0
 80288ba:	e7e0      	b.n	802887e <_raise_r+0x12>

080288bc <raise>:
 80288bc:	4b02      	ldr	r3, [pc, #8]	@ (80288c8 <raise+0xc>)
 80288be:	4601      	mov	r1, r0
 80288c0:	6818      	ldr	r0, [r3, #0]
 80288c2:	f7ff bfd3 	b.w	802886c <_raise_r>
 80288c6:	bf00      	nop
 80288c8:	240009a8 	.word	0x240009a8

080288cc <difftime>:
 80288cc:	1a80      	subs	r0, r0, r2
 80288ce:	b508      	push	{r3, lr}
 80288d0:	eb61 0103 	sbc.w	r1, r1, r3
 80288d4:	f7d7 ff12 	bl	80006fc <__aeabi_l2d>
 80288d8:	ec41 0b10 	vmov	d0, r0, r1
 80288dc:	bd08      	pop	{r3, pc}
	...

080288e0 <validate_structure>:
 80288e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80288e2:	6801      	ldr	r1, [r0, #0]
 80288e4:	293b      	cmp	r1, #59	@ 0x3b
 80288e6:	4604      	mov	r4, r0
 80288e8:	d911      	bls.n	802890e <validate_structure+0x2e>
 80288ea:	223c      	movs	r2, #60	@ 0x3c
 80288ec:	4668      	mov	r0, sp
 80288ee:	f001 f99f 	bl	8029c30 <div>
 80288f2:	9a01      	ldr	r2, [sp, #4]
 80288f4:	6863      	ldr	r3, [r4, #4]
 80288f6:	9900      	ldr	r1, [sp, #0]
 80288f8:	2a00      	cmp	r2, #0
 80288fa:	440b      	add	r3, r1
 80288fc:	6063      	str	r3, [r4, #4]
 80288fe:	bfbb      	ittet	lt
 8028900:	323c      	addlt	r2, #60	@ 0x3c
 8028902:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028906:	6022      	strge	r2, [r4, #0]
 8028908:	6022      	strlt	r2, [r4, #0]
 802890a:	bfb8      	it	lt
 802890c:	6063      	strlt	r3, [r4, #4]
 802890e:	6861      	ldr	r1, [r4, #4]
 8028910:	293b      	cmp	r1, #59	@ 0x3b
 8028912:	d911      	bls.n	8028938 <validate_structure+0x58>
 8028914:	223c      	movs	r2, #60	@ 0x3c
 8028916:	4668      	mov	r0, sp
 8028918:	f001 f98a 	bl	8029c30 <div>
 802891c:	9a01      	ldr	r2, [sp, #4]
 802891e:	68a3      	ldr	r3, [r4, #8]
 8028920:	9900      	ldr	r1, [sp, #0]
 8028922:	2a00      	cmp	r2, #0
 8028924:	440b      	add	r3, r1
 8028926:	60a3      	str	r3, [r4, #8]
 8028928:	bfbb      	ittet	lt
 802892a:	323c      	addlt	r2, #60	@ 0x3c
 802892c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028930:	6062      	strge	r2, [r4, #4]
 8028932:	6062      	strlt	r2, [r4, #4]
 8028934:	bfb8      	it	lt
 8028936:	60a3      	strlt	r3, [r4, #8]
 8028938:	68a1      	ldr	r1, [r4, #8]
 802893a:	2917      	cmp	r1, #23
 802893c:	d911      	bls.n	8028962 <validate_structure+0x82>
 802893e:	2218      	movs	r2, #24
 8028940:	4668      	mov	r0, sp
 8028942:	f001 f975 	bl	8029c30 <div>
 8028946:	9a01      	ldr	r2, [sp, #4]
 8028948:	68e3      	ldr	r3, [r4, #12]
 802894a:	9900      	ldr	r1, [sp, #0]
 802894c:	2a00      	cmp	r2, #0
 802894e:	440b      	add	r3, r1
 8028950:	60e3      	str	r3, [r4, #12]
 8028952:	bfbb      	ittet	lt
 8028954:	3218      	addlt	r2, #24
 8028956:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802895a:	60a2      	strge	r2, [r4, #8]
 802895c:	60a2      	strlt	r2, [r4, #8]
 802895e:	bfb8      	it	lt
 8028960:	60e3      	strlt	r3, [r4, #12]
 8028962:	6921      	ldr	r1, [r4, #16]
 8028964:	290b      	cmp	r1, #11
 8028966:	d911      	bls.n	802898c <validate_structure+0xac>
 8028968:	220c      	movs	r2, #12
 802896a:	4668      	mov	r0, sp
 802896c:	f001 f960 	bl	8029c30 <div>
 8028970:	9a01      	ldr	r2, [sp, #4]
 8028972:	6963      	ldr	r3, [r4, #20]
 8028974:	9900      	ldr	r1, [sp, #0]
 8028976:	2a00      	cmp	r2, #0
 8028978:	440b      	add	r3, r1
 802897a:	6163      	str	r3, [r4, #20]
 802897c:	bfbb      	ittet	lt
 802897e:	320c      	addlt	r2, #12
 8028980:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028984:	6122      	strge	r2, [r4, #16]
 8028986:	6122      	strlt	r2, [r4, #16]
 8028988:	bfb8      	it	lt
 802898a:	6163      	strlt	r3, [r4, #20]
 802898c:	6963      	ldr	r3, [r4, #20]
 802898e:	079a      	lsls	r2, r3, #30
 8028990:	d11c      	bne.n	80289cc <validate_structure+0xec>
 8028992:	2164      	movs	r1, #100	@ 0x64
 8028994:	fb93 f2f1 	sdiv	r2, r3, r1
 8028998:	fb01 3212 	mls	r2, r1, r2, r3
 802899c:	b9c2      	cbnz	r2, 80289d0 <validate_structure+0xf0>
 802899e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80289a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80289a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80289aa:	fb02 3311 	mls	r3, r2, r1, r3
 80289ae:	2b00      	cmp	r3, #0
 80289b0:	bf0c      	ite	eq
 80289b2:	231d      	moveq	r3, #29
 80289b4:	231c      	movne	r3, #28
 80289b6:	68e2      	ldr	r2, [r4, #12]
 80289b8:	2a00      	cmp	r2, #0
 80289ba:	dc0b      	bgt.n	80289d4 <validate_structure+0xf4>
 80289bc:	4d31      	ldr	r5, [pc, #196]	@ (8028a84 <validate_structure+0x1a4>)
 80289be:	200b      	movs	r0, #11
 80289c0:	2164      	movs	r1, #100	@ 0x64
 80289c2:	68e6      	ldr	r6, [r4, #12]
 80289c4:	2e00      	cmp	r6, #0
 80289c6:	dd30      	ble.n	8028a2a <validate_structure+0x14a>
 80289c8:	b003      	add	sp, #12
 80289ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289cc:	231c      	movs	r3, #28
 80289ce:	e7f2      	b.n	80289b6 <validate_structure+0xd6>
 80289d0:	231d      	movs	r3, #29
 80289d2:	e7f0      	b.n	80289b6 <validate_structure+0xd6>
 80289d4:	4d2b      	ldr	r5, [pc, #172]	@ (8028a84 <validate_structure+0x1a4>)
 80289d6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80289da:	2a01      	cmp	r2, #1
 80289dc:	bf14      	ite	ne
 80289de:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80289e2:	4618      	moveq	r0, r3
 80289e4:	4281      	cmp	r1, r0
 80289e6:	ddef      	ble.n	80289c8 <validate_structure+0xe8>
 80289e8:	3201      	adds	r2, #1
 80289ea:	1a09      	subs	r1, r1, r0
 80289ec:	2a0c      	cmp	r2, #12
 80289ee:	60e1      	str	r1, [r4, #12]
 80289f0:	6122      	str	r2, [r4, #16]
 80289f2:	d1f0      	bne.n	80289d6 <validate_structure+0xf6>
 80289f4:	6963      	ldr	r3, [r4, #20]
 80289f6:	2100      	movs	r1, #0
 80289f8:	1c5a      	adds	r2, r3, #1
 80289fa:	6121      	str	r1, [r4, #16]
 80289fc:	0791      	lsls	r1, r2, #30
 80289fe:	6162      	str	r2, [r4, #20]
 8028a00:	d13c      	bne.n	8028a7c <validate_structure+0x19c>
 8028a02:	2164      	movs	r1, #100	@ 0x64
 8028a04:	fb92 f0f1 	sdiv	r0, r2, r1
 8028a08:	fb01 2210 	mls	r2, r1, r0, r2
 8028a0c:	2a00      	cmp	r2, #0
 8028a0e:	d137      	bne.n	8028a80 <validate_structure+0x1a0>
 8028a10:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8028a14:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8028a18:	fb93 f1f2 	sdiv	r1, r3, r2
 8028a1c:	fb02 3311 	mls	r3, r2, r1, r3
 8028a20:	2b00      	cmp	r3, #0
 8028a22:	bf0c      	ite	eq
 8028a24:	231d      	moveq	r3, #29
 8028a26:	231c      	movne	r3, #28
 8028a28:	e7d5      	b.n	80289d6 <validate_structure+0xf6>
 8028a2a:	6922      	ldr	r2, [r4, #16]
 8028a2c:	3a01      	subs	r2, #1
 8028a2e:	6122      	str	r2, [r4, #16]
 8028a30:	3201      	adds	r2, #1
 8028a32:	d116      	bne.n	8028a62 <validate_structure+0x182>
 8028a34:	6963      	ldr	r3, [r4, #20]
 8028a36:	1e5a      	subs	r2, r3, #1
 8028a38:	0797      	lsls	r7, r2, #30
 8028a3a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8028a3e:	d119      	bne.n	8028a74 <validate_structure+0x194>
 8028a40:	fb92 f7f1 	sdiv	r7, r2, r1
 8028a44:	fb01 2217 	mls	r2, r1, r7, r2
 8028a48:	b9b2      	cbnz	r2, 8028a78 <validate_structure+0x198>
 8028a4a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8028a4e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8028a52:	fb93 f7f2 	sdiv	r7, r3, r2
 8028a56:	fb02 3317 	mls	r3, r2, r7, r3
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	bf0c      	ite	eq
 8028a5e:	231d      	moveq	r3, #29
 8028a60:	231c      	movne	r3, #28
 8028a62:	6922      	ldr	r2, [r4, #16]
 8028a64:	2a01      	cmp	r2, #1
 8028a66:	bf14      	ite	ne
 8028a68:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8028a6c:	461a      	moveq	r2, r3
 8028a6e:	4432      	add	r2, r6
 8028a70:	60e2      	str	r2, [r4, #12]
 8028a72:	e7a6      	b.n	80289c2 <validate_structure+0xe2>
 8028a74:	231c      	movs	r3, #28
 8028a76:	e7f4      	b.n	8028a62 <validate_structure+0x182>
 8028a78:	231d      	movs	r3, #29
 8028a7a:	e7f2      	b.n	8028a62 <validate_structure+0x182>
 8028a7c:	231c      	movs	r3, #28
 8028a7e:	e7aa      	b.n	80289d6 <validate_structure+0xf6>
 8028a80:	231d      	movs	r3, #29
 8028a82:	e7a8      	b.n	80289d6 <validate_structure+0xf6>
 8028a84:	0803ed24 	.word	0x0803ed24

08028a88 <mktime>:
 8028a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a8c:	b085      	sub	sp, #20
 8028a8e:	4607      	mov	r7, r0
 8028a90:	f003 fe94 	bl	802c7bc <__gettzinfo>
 8028a94:	4681      	mov	r9, r0
 8028a96:	4638      	mov	r0, r7
 8028a98:	f7ff ff22 	bl	80288e0 <validate_structure>
 8028a9c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8028aa0:	223c      	movs	r2, #60	@ 0x3c
 8028aa2:	fb02 4403 	mla	r4, r2, r3, r4
 8028aa6:	68bb      	ldr	r3, [r7, #8]
 8028aa8:	697d      	ldr	r5, [r7, #20]
 8028aaa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8028aae:	fb02 4403 	mla	r4, r2, r3, r4
 8028ab2:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8028ab6:	4ac3      	ldr	r2, [pc, #780]	@ (8028dc4 <mktime+0x33c>)
 8028ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8028abc:	3e01      	subs	r6, #1
 8028abe:	2b01      	cmp	r3, #1
 8028ac0:	4416      	add	r6, r2
 8028ac2:	dd11      	ble.n	8028ae8 <mktime+0x60>
 8028ac4:	07a9      	lsls	r1, r5, #30
 8028ac6:	d10f      	bne.n	8028ae8 <mktime+0x60>
 8028ac8:	2264      	movs	r2, #100	@ 0x64
 8028aca:	fb95 f3f2 	sdiv	r3, r5, r2
 8028ace:	fb02 5313 	mls	r3, r2, r3, r5
 8028ad2:	b943      	cbnz	r3, 8028ae6 <mktime+0x5e>
 8028ad4:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8028ad8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8028adc:	fb93 f1f2 	sdiv	r1, r3, r2
 8028ae0:	fb02 3311 	mls	r3, r2, r1, r3
 8028ae4:	b903      	cbnz	r3, 8028ae8 <mktime+0x60>
 8028ae6:	3601      	adds	r6, #1
 8028ae8:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8028aec:	3310      	adds	r3, #16
 8028aee:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8028af2:	4293      	cmp	r3, r2
 8028af4:	61fe      	str	r6, [r7, #28]
 8028af6:	f200 8170 	bhi.w	8028dda <mktime+0x352>
 8028afa:	2d46      	cmp	r5, #70	@ 0x46
 8028afc:	f340 80b6 	ble.w	8028c6c <mktime+0x1e4>
 8028b00:	2346      	movs	r3, #70	@ 0x46
 8028b02:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8028b06:	2164      	movs	r1, #100	@ 0x64
 8028b08:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8028b0c:	079a      	lsls	r2, r3, #30
 8028b0e:	f040 80a7 	bne.w	8028c60 <mktime+0x1d8>
 8028b12:	fb93 f2f1 	sdiv	r2, r3, r1
 8028b16:	fb01 3212 	mls	r2, r1, r2, r3
 8028b1a:	2a00      	cmp	r2, #0
 8028b1c:	f040 80a3 	bne.w	8028c66 <mktime+0x1de>
 8028b20:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8028b24:	fb92 fef0 	sdiv	lr, r2, r0
 8028b28:	fb00 221e 	mls	r2, r0, lr, r2
 8028b2c:	2a00      	cmp	r2, #0
 8028b2e:	bf0c      	ite	eq
 8028b30:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8028b34:	4662      	movne	r2, ip
 8028b36:	3301      	adds	r3, #1
 8028b38:	429d      	cmp	r5, r3
 8028b3a:	4416      	add	r6, r2
 8028b3c:	d1e6      	bne.n	8028b0c <mktime+0x84>
 8028b3e:	4ba2      	ldr	r3, [pc, #648]	@ (8028dc8 <mktime+0x340>)
 8028b40:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8028b44:	fbc6 4803 	smlal	r4, r8, r6, r3
 8028b48:	f000 fd80 	bl	802964c <__tz_lock>
 8028b4c:	f000 fd8a 	bl	8029664 <_tzset_unlocked>
 8028b50:	4b9e      	ldr	r3, [pc, #632]	@ (8028dcc <mktime+0x344>)
 8028b52:	681b      	ldr	r3, [r3, #0]
 8028b54:	2b00      	cmp	r3, #0
 8028b56:	f000 8147 	beq.w	8028de8 <mktime+0x360>
 8028b5a:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8028b5e:	6978      	ldr	r0, [r7, #20]
 8028b60:	4653      	mov	r3, sl
 8028b62:	2b01      	cmp	r3, #1
 8028b64:	bfa8      	it	ge
 8028b66:	2301      	movge	r3, #1
 8028b68:	9301      	str	r3, [sp, #4]
 8028b6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8028b6e:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8028b72:	4283      	cmp	r3, r0
 8028b74:	f040 80bd 	bne.w	8028cf2 <mktime+0x26a>
 8028b78:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8028b7c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8028b80:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8028b84:	1a13      	subs	r3, r2, r0
 8028b86:	9303      	str	r3, [sp, #12]
 8028b88:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8028b8c:	9302      	str	r3, [sp, #8]
 8028b8e:	9a02      	ldr	r2, [sp, #8]
 8028b90:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8028b94:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8028b98:	ebb2 0e03 	subs.w	lr, r2, r3
 8028b9c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8028ba0:	4574      	cmp	r4, lr
 8028ba2:	eb78 0201 	sbcs.w	r2, r8, r1
 8028ba6:	f280 80c7 	bge.w	8028d38 <mktime+0x2b0>
 8028baa:	f8d9 2000 	ldr.w	r2, [r9]
 8028bae:	2a00      	cmp	r2, #0
 8028bb0:	f000 80d0 	beq.w	8028d54 <mktime+0x2cc>
 8028bb4:	9a03      	ldr	r2, [sp, #12]
 8028bb6:	4294      	cmp	r4, r2
 8028bb8:	eb78 020b 	sbcs.w	r2, r8, fp
 8028bbc:	f2c0 8111 	blt.w	8028de2 <mktime+0x35a>
 8028bc0:	4574      	cmp	r4, lr
 8028bc2:	eb78 0101 	sbcs.w	r1, r8, r1
 8028bc6:	bfb4      	ite	lt
 8028bc8:	f04f 0b01 	movlt.w	fp, #1
 8028bcc:	f04f 0b00 	movge.w	fp, #0
 8028bd0:	f1ba 0f00 	cmp.w	sl, #0
 8028bd4:	f2c0 8094 	blt.w	8028d00 <mktime+0x278>
 8028bd8:	9a01      	ldr	r2, [sp, #4]
 8028bda:	ea82 0a0b 	eor.w	sl, r2, fp
 8028bde:	f1ba 0f01 	cmp.w	sl, #1
 8028be2:	f040 808d 	bne.w	8028d00 <mktime+0x278>
 8028be6:	f1bb 0f00 	cmp.w	fp, #0
 8028bea:	f000 80c2 	beq.w	8028d72 <mktime+0x2ea>
 8028bee:	1a1b      	subs	r3, r3, r0
 8028bf0:	683a      	ldr	r2, [r7, #0]
 8028bf2:	441a      	add	r2, r3
 8028bf4:	191c      	adds	r4, r3, r4
 8028bf6:	603a      	str	r2, [r7, #0]
 8028bf8:	4638      	mov	r0, r7
 8028bfa:	68fa      	ldr	r2, [r7, #12]
 8028bfc:	9201      	str	r2, [sp, #4]
 8028bfe:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8028c02:	f7ff fe6d 	bl	80288e0 <validate_structure>
 8028c06:	68fb      	ldr	r3, [r7, #12]
 8028c08:	9a01      	ldr	r2, [sp, #4]
 8028c0a:	1a9b      	subs	r3, r3, r2
 8028c0c:	d078      	beq.n	8028d00 <mktime+0x278>
 8028c0e:	2b01      	cmp	r3, #1
 8028c10:	f300 80b1 	bgt.w	8028d76 <mktime+0x2ee>
 8028c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c18:	bfa8      	it	ge
 8028c1a:	469a      	movge	sl, r3
 8028c1c:	69fb      	ldr	r3, [r7, #28]
 8028c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8028c22:	4456      	add	r6, sl
 8028c24:	f140 80b0 	bpl.w	8028d88 <mktime+0x300>
 8028c28:	1e6b      	subs	r3, r5, #1
 8028c2a:	0799      	lsls	r1, r3, #30
 8028c2c:	f040 80a6 	bne.w	8028d7c <mktime+0x2f4>
 8028c30:	2264      	movs	r2, #100	@ 0x64
 8028c32:	fb93 f1f2 	sdiv	r1, r3, r2
 8028c36:	fb02 3311 	mls	r3, r2, r1, r3
 8028c3a:	2b00      	cmp	r3, #0
 8028c3c:	f040 80a1 	bne.w	8028d82 <mktime+0x2fa>
 8028c40:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8028c44:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8028c48:	fb95 f2f3 	sdiv	r2, r5, r3
 8028c4c:	fb03 5512 	mls	r5, r3, r2, r5
 8028c50:	2d00      	cmp	r5, #0
 8028c52:	f240 136d 	movw	r3, #365	@ 0x16d
 8028c56:	bf18      	it	ne
 8028c58:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8028c5c:	61fb      	str	r3, [r7, #28]
 8028c5e:	e04f      	b.n	8028d00 <mktime+0x278>
 8028c60:	f240 126d 	movw	r2, #365	@ 0x16d
 8028c64:	e767      	b.n	8028b36 <mktime+0xae>
 8028c66:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8028c6a:	e764      	b.n	8028b36 <mktime+0xae>
 8028c6c:	f43f af67 	beq.w	8028b3e <mktime+0xb6>
 8028c70:	2345      	movs	r3, #69	@ 0x45
 8028c72:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8028c76:	2164      	movs	r1, #100	@ 0x64
 8028c78:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8028c7c:	e012      	b.n	8028ca4 <mktime+0x21c>
 8028c7e:	bb62      	cbnz	r2, 8028cda <mktime+0x252>
 8028c80:	fb93 f2f1 	sdiv	r2, r3, r1
 8028c84:	fb01 3212 	mls	r2, r1, r2, r3
 8028c88:	bb52      	cbnz	r2, 8028ce0 <mktime+0x258>
 8028c8a:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8028c8e:	fb92 fef0 	sdiv	lr, r2, r0
 8028c92:	fb00 221e 	mls	r2, r0, lr, r2
 8028c96:	2a00      	cmp	r2, #0
 8028c98:	bf0c      	ite	eq
 8028c9a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8028c9e:	4662      	movne	r2, ip
 8028ca0:	1ab6      	subs	r6, r6, r2
 8028ca2:	3b01      	subs	r3, #1
 8028ca4:	429d      	cmp	r5, r3
 8028ca6:	f003 0203 	and.w	r2, r3, #3
 8028caa:	dbe8      	blt.n	8028c7e <mktime+0x1f6>
 8028cac:	b9da      	cbnz	r2, 8028ce6 <mktime+0x25e>
 8028cae:	2264      	movs	r2, #100	@ 0x64
 8028cb0:	fb95 f3f2 	sdiv	r3, r5, r2
 8028cb4:	fb02 5313 	mls	r3, r2, r3, r5
 8028cb8:	b9c3      	cbnz	r3, 8028cec <mktime+0x264>
 8028cba:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8028cbe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8028cc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8028cc6:	fb02 3311 	mls	r3, r2, r1, r3
 8028cca:	2b00      	cmp	r3, #0
 8028ccc:	f240 136d 	movw	r3, #365	@ 0x16d
 8028cd0:	bf08      	it	eq
 8028cd2:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8028cd6:	1af6      	subs	r6, r6, r3
 8028cd8:	e731      	b.n	8028b3e <mktime+0xb6>
 8028cda:	f240 126d 	movw	r2, #365	@ 0x16d
 8028cde:	e7df      	b.n	8028ca0 <mktime+0x218>
 8028ce0:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8028ce4:	e7dc      	b.n	8028ca0 <mktime+0x218>
 8028ce6:	f240 136d 	movw	r3, #365	@ 0x16d
 8028cea:	e7f4      	b.n	8028cd6 <mktime+0x24e>
 8028cec:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8028cf0:	e7f1      	b.n	8028cd6 <mktime+0x24e>
 8028cf2:	f000 fbf7 	bl	80294e4 <__tzcalc_limits>
 8028cf6:	2800      	cmp	r0, #0
 8028cf8:	f47f af3e 	bne.w	8028b78 <mktime+0xf0>
 8028cfc:	f8dd b004 	ldr.w	fp, [sp, #4]
 8028d00:	f1bb 0f01 	cmp.w	fp, #1
 8028d04:	d172      	bne.n	8028dec <mktime+0x364>
 8028d06:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8028d0a:	191c      	adds	r4, r3, r4
 8028d0c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8028d10:	f04f 0b01 	mov.w	fp, #1
 8028d14:	f000 fca0 	bl	8029658 <__tz_unlock>
 8028d18:	3604      	adds	r6, #4
 8028d1a:	2307      	movs	r3, #7
 8028d1c:	fb96 f3f3 	sdiv	r3, r6, r3
 8028d20:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8028d24:	1af6      	subs	r6, r6, r3
 8028d26:	d456      	bmi.n	8028dd6 <mktime+0x34e>
 8028d28:	f8c7 b020 	str.w	fp, [r7, #32]
 8028d2c:	61be      	str	r6, [r7, #24]
 8028d2e:	4620      	mov	r0, r4
 8028d30:	4641      	mov	r1, r8
 8028d32:	b005      	add	sp, #20
 8028d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d38:	9a02      	ldr	r2, [sp, #8]
 8028d3a:	1a12      	subs	r2, r2, r0
 8028d3c:	9202      	str	r2, [sp, #8]
 8028d3e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8028d42:	eb6c 0c02 	sbc.w	ip, ip, r2
 8028d46:	9a02      	ldr	r2, [sp, #8]
 8028d48:	4294      	cmp	r4, r2
 8028d4a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8028d4e:	f6bf af2c 	bge.w	8028baa <mktime+0x122>
 8028d52:	e7d3      	b.n	8028cfc <mktime+0x274>
 8028d54:	9a03      	ldr	r2, [sp, #12]
 8028d56:	4294      	cmp	r4, r2
 8028d58:	eb78 020b 	sbcs.w	r2, r8, fp
 8028d5c:	f6ff af30 	blt.w	8028bc0 <mktime+0x138>
 8028d60:	f1ba 0f00 	cmp.w	sl, #0
 8028d64:	dbcf      	blt.n	8028d06 <mktime+0x27e>
 8028d66:	f04f 0b01 	mov.w	fp, #1
 8028d6a:	e735      	b.n	8028bd8 <mktime+0x150>
 8028d6c:	f04f 0b00 	mov.w	fp, #0
 8028d70:	e732      	b.n	8028bd8 <mktime+0x150>
 8028d72:	1ac3      	subs	r3, r0, r3
 8028d74:	e73c      	b.n	8028bf0 <mktime+0x168>
 8028d76:	f04f 3aff 	mov.w	sl, #4294967295
 8028d7a:	e74f      	b.n	8028c1c <mktime+0x194>
 8028d7c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8028d80:	e76c      	b.n	8028c5c <mktime+0x1d4>
 8028d82:	f240 136d 	movw	r3, #365	@ 0x16d
 8028d86:	e769      	b.n	8028c5c <mktime+0x1d4>
 8028d88:	07aa      	lsls	r2, r5, #30
 8028d8a:	d117      	bne.n	8028dbc <mktime+0x334>
 8028d8c:	2164      	movs	r1, #100	@ 0x64
 8028d8e:	fb95 f2f1 	sdiv	r2, r5, r1
 8028d92:	fb01 5212 	mls	r2, r1, r2, r5
 8028d96:	b9da      	cbnz	r2, 8028dd0 <mktime+0x348>
 8028d98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8028d9c:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8028da0:	fb95 f1f2 	sdiv	r1, r5, r2
 8028da4:	fb02 5511 	mls	r5, r2, r1, r5
 8028da8:	2d00      	cmp	r5, #0
 8028daa:	f240 126d 	movw	r2, #365	@ 0x16d
 8028dae:	bf08      	it	eq
 8028db0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8028db4:	4293      	cmp	r3, r2
 8028db6:	bfa8      	it	ge
 8028db8:	1a9b      	subge	r3, r3, r2
 8028dba:	e74f      	b.n	8028c5c <mktime+0x1d4>
 8028dbc:	f240 126d 	movw	r2, #365	@ 0x16d
 8028dc0:	e7f8      	b.n	8028db4 <mktime+0x32c>
 8028dc2:	bf00      	nop
 8028dc4:	0803ecf4 	.word	0x0803ecf4
 8028dc8:	00015180 	.word	0x00015180
 8028dcc:	2401d28c 	.word	0x2401d28c
 8028dd0:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8028dd4:	e7ee      	b.n	8028db4 <mktime+0x32c>
 8028dd6:	3607      	adds	r6, #7
 8028dd8:	e7a6      	b.n	8028d28 <mktime+0x2a0>
 8028dda:	f04f 34ff 	mov.w	r4, #4294967295
 8028dde:	46a0      	mov	r8, r4
 8028de0:	e7a5      	b.n	8028d2e <mktime+0x2a6>
 8028de2:	f1ba 0f00 	cmp.w	sl, #0
 8028de6:	dac1      	bge.n	8028d6c <mktime+0x2e4>
 8028de8:	f04f 0b00 	mov.w	fp, #0
 8028dec:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8028df0:	191c      	adds	r4, r3, r4
 8028df2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8028df6:	e78d      	b.n	8028d14 <mktime+0x28c>

08028df8 <match_string>:
 8028df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028dfc:	4605      	mov	r5, r0
 8028dfe:	4690      	mov	r8, r2
 8028e00:	1f0c      	subs	r4, r1, #4
 8028e02:	2600      	movs	r6, #0
 8028e04:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8028e08:	b910      	cbnz	r0, 8028e10 <match_string+0x18>
 8028e0a:	f04f 36ff 	mov.w	r6, #4294967295
 8028e0e:	e00c      	b.n	8028e2a <match_string+0x32>
 8028e10:	f7d7 fade 	bl	80003d0 <strlen>
 8028e14:	6821      	ldr	r1, [r4, #0]
 8028e16:	4607      	mov	r7, r0
 8028e18:	4602      	mov	r2, r0
 8028e1a:	4643      	mov	r3, r8
 8028e1c:	6828      	ldr	r0, [r5, #0]
 8028e1e:	f003 fcb0 	bl	802c782 <strncasecmp_l>
 8028e22:	b928      	cbnz	r0, 8028e30 <match_string+0x38>
 8028e24:	682b      	ldr	r3, [r5, #0]
 8028e26:	443b      	add	r3, r7
 8028e28:	602b      	str	r3, [r5, #0]
 8028e2a:	4630      	mov	r0, r6
 8028e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e30:	3601      	adds	r6, #1
 8028e32:	e7e7      	b.n	8028e04 <match_string+0xc>

08028e34 <is_leap_year>:
 8028e34:	0783      	lsls	r3, r0, #30
 8028e36:	d10f      	bne.n	8028e58 <is_leap_year+0x24>
 8028e38:	2264      	movs	r2, #100	@ 0x64
 8028e3a:	fb90 f3f2 	sdiv	r3, r0, r2
 8028e3e:	fb02 0313 	mls	r3, r2, r3, r0
 8028e42:	b95b      	cbnz	r3, 8028e5c <is_leap_year+0x28>
 8028e44:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8028e48:	fb90 f2f3 	sdiv	r2, r0, r3
 8028e4c:	fb03 0012 	mls	r0, r3, r2, r0
 8028e50:	fab0 f080 	clz	r0, r0
 8028e54:	0940      	lsrs	r0, r0, #5
 8028e56:	4770      	bx	lr
 8028e58:	2000      	movs	r0, #0
 8028e5a:	4770      	bx	lr
 8028e5c:	2001      	movs	r0, #1
 8028e5e:	4770      	bx	lr

08028e60 <first_day>:
 8028e60:	b570      	push	{r4, r5, r6, lr}
 8028e62:	2104      	movs	r1, #4
 8028e64:	4604      	mov	r4, r0
 8028e66:	f240 75b1 	movw	r5, #1969	@ 0x7b1
 8028e6a:	2607      	movs	r6, #7
 8028e6c:	3c01      	subs	r4, #1
 8028e6e:	42ac      	cmp	r4, r5
 8028e70:	dc01      	bgt.n	8028e76 <first_day+0x16>
 8028e72:	4608      	mov	r0, r1
 8028e74:	bd70      	pop	{r4, r5, r6, pc}
 8028e76:	4620      	mov	r0, r4
 8028e78:	f7ff ffdc 	bl	8028e34 <is_leap_year>
 8028e7c:	f201 116d 	addw	r1, r1, #365	@ 0x16d
 8028e80:	4401      	add	r1, r0
 8028e82:	fb91 f3f6 	sdiv	r3, r1, r6
 8028e86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8028e8a:	1ac9      	subs	r1, r1, r3
 8028e8c:	e7ee      	b.n	8028e6c <first_day+0xc>
	...

08028e90 <strptime_l>:
 8028e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e94:	b087      	sub	sp, #28
 8028e96:	f8df 9290 	ldr.w	r9, [pc, #656]	@ 8029128 <strptime_l+0x298>
 8028e9a:	9001      	str	r0, [sp, #4]
 8028e9c:	4614      	mov	r4, r2
 8028e9e:	461e      	mov	r6, r3
 8028ea0:	2500      	movs	r5, #0
 8028ea2:	780a      	ldrb	r2, [r1, #0]
 8028ea4:	bb6a      	cbnz	r2, 8028f02 <strptime_l+0x72>
 8028ea6:	f005 0307 	and.w	r3, r5, #7
 8028eaa:	2b07      	cmp	r3, #7
 8028eac:	f040 82de 	bne.w	802946c <strptime_l+0x5dc>
 8028eb0:	06ea      	lsls	r2, r5, #27
 8028eb2:	d412      	bmi.n	8028eda <strptime_l+0x4a>
 8028eb4:	4b95      	ldr	r3, [pc, #596]	@ (802910c <strptime_l+0x27c>)
 8028eb6:	6926      	ldr	r6, [r4, #16]
 8028eb8:	6960      	ldr	r0, [r4, #20]
 8028eba:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8028ebe:	68e3      	ldr	r3, [r4, #12]
 8028ec0:	4419      	add	r1, r3
 8028ec2:	61e1      	str	r1, [r4, #28]
 8028ec4:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8028ec8:	f7ff ffb4 	bl	8028e34 <is_leap_year>
 8028ecc:	b108      	cbz	r0, 8028ed2 <strptime_l+0x42>
 8028ece:	2e01      	cmp	r6, #1
 8028ed0:	dc01      	bgt.n	8028ed6 <strptime_l+0x46>
 8028ed2:	3901      	subs	r1, #1
 8028ed4:	61e1      	str	r1, [r4, #28]
 8028ed6:	f045 0510 	orr.w	r5, r5, #16
 8028eda:	f005 051c 	and.w	r5, r5, #28
 8028ede:	2d14      	cmp	r5, #20
 8028ee0:	d10d      	bne.n	8028efe <strptime_l+0x6e>
 8028ee2:	6960      	ldr	r0, [r4, #20]
 8028ee4:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8028ee8:	f7ff ffba 	bl	8028e60 <first_day>
 8028eec:	69e3      	ldr	r3, [r4, #28]
 8028eee:	4418      	add	r0, r3
 8028ef0:	2307      	movs	r3, #7
 8028ef2:	fb90 f3f3 	sdiv	r3, r0, r3
 8028ef6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8028efa:	1ac0      	subs	r0, r0, r3
 8028efc:	61a0      	str	r0, [r4, #24]
 8028efe:	9801      	ldr	r0, [sp, #4]
 8028f00:	e1e8      	b.n	80292d4 <strptime_l+0x444>
 8028f02:	f819 3002 	ldrb.w	r3, [r9, r2]
 8028f06:	071b      	lsls	r3, r3, #28
 8028f08:	d50e      	bpl.n	8028f28 <strptime_l+0x98>
 8028f0a:	9b01      	ldr	r3, [sp, #4]
 8028f0c:	2000      	movs	r0, #0
 8028f0e:	461a      	mov	r2, r3
 8028f10:	3301      	adds	r3, #1
 8028f12:	7817      	ldrb	r7, [r2, #0]
 8028f14:	f819 7007 	ldrb.w	r7, [r9, r7]
 8028f18:	073f      	lsls	r7, r7, #28
 8028f1a:	d403      	bmi.n	8028f24 <strptime_l+0x94>
 8028f1c:	b100      	cbz	r0, 8028f20 <strptime_l+0x90>
 8028f1e:	9201      	str	r2, [sp, #4]
 8028f20:	4688      	mov	r8, r1
 8028f22:	e0b6      	b.n	8029092 <strptime_l+0x202>
 8028f24:	2001      	movs	r0, #1
 8028f26:	e7f2      	b.n	8028f0e <strptime_l+0x7e>
 8028f28:	2a25      	cmp	r2, #37	@ 0x25
 8028f2a:	f040 828e 	bne.w	802944a <strptime_l+0x5ba>
 8028f2e:	784b      	ldrb	r3, [r1, #1]
 8028f30:	2b00      	cmp	r3, #0
 8028f32:	f000 828a 	beq.w	802944a <strptime_l+0x5ba>
 8028f36:	2b45      	cmp	r3, #69	@ 0x45
 8028f38:	d063      	beq.n	8029002 <strptime_l+0x172>
 8028f3a:	2b4f      	cmp	r3, #79	@ 0x4f
 8028f3c:	d061      	beq.n	8029002 <strptime_l+0x172>
 8028f3e:	f101 0801 	add.w	r8, r1, #1
 8028f42:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 8028f46:	b2d1      	uxtb	r1, r2
 8028f48:	2954      	cmp	r1, #84	@ 0x54
 8028f4a:	f200 8272 	bhi.w	8029432 <strptime_l+0x5a2>
 8028f4e:	2a54      	cmp	r2, #84	@ 0x54
 8028f50:	f200 826f 	bhi.w	8029432 <strptime_l+0x5a2>
 8028f54:	e8df f012 	tbh	[pc, r2, lsl #1]
 8028f58:	026d005c 	.word	0x026d005c
 8028f5c:	026d026d 	.word	0x026d026d
 8028f60:	026d026d 	.word	0x026d026d
 8028f64:	026d026d 	.word	0x026d026d
 8028f68:	026d026d 	.word	0x026d026d
 8028f6c:	026d026d 	.word	0x026d026d
 8028f70:	026d026d 	.word	0x026d026d
 8028f74:	026d026d 	.word	0x026d026d
 8028f78:	026d026d 	.word	0x026d026d
 8028f7c:	026d026d 	.word	0x026d026d
 8028f80:	026d026d 	.word	0x026d026d
 8028f84:	026d026d 	.word	0x026d026d
 8028f88:	026d026d 	.word	0x026d026d
 8028f8c:	026d026d 	.word	0x026d026d
 8028f90:	006f0060 	.word	0x006f0060
 8028f94:	00a0007e 	.word	0x00a0007e
 8028f98:	00b9026d 	.word	0x00b9026d
 8028f9c:	00cb026d 	.word	0x00cb026d
 8028fa0:	026d00ea 	.word	0x026d00ea
 8028fa4:	026d026d 	.word	0x026d026d
 8028fa8:	026d0119 	.word	0x026d0119
 8028fac:	026d026d 	.word	0x026d026d
 8028fb0:	015d026d 	.word	0x015d026d
 8028fb4:	01a10191 	.word	0x01a10191
 8028fb8:	01e201c1 	.word	0x01e201c1
 8028fbc:	02480210 	.word	0x02480210
 8028fc0:	009d0261 	.word	0x009d0261
 8028fc4:	026d026d 	.word	0x026d026d
 8028fc8:	026d026d 	.word	0x026d026d
 8028fcc:	026d026d 	.word	0x026d026d
 8028fd0:	007b006c 	.word	0x007b006c
 8028fd4:	00a9008e 	.word	0x00a9008e
 8028fd8:	026d00a9 	.word	0x026d00a9
 8028fdc:	007b026d 	.word	0x007b026d
 8028fe0:	00f9026d 	.word	0x00f9026d
 8028fe4:	00ea00cb 	.word	0x00ea00cb
 8028fe8:	0126010a 	.word	0x0126010a
 8028fec:	012d026d 	.word	0x012d026d
 8028ff0:	01500142 	.word	0x01500142
 8028ff4:	019d0161 	.word	0x019d0161
 8028ff8:	026d01a5 	.word	0x026d01a5
 8028ffc:	024201b3 	.word	0x024201b3
 8029000:	024e      	.short	0x024e
 8029002:	788b      	ldrb	r3, [r1, #2]
 8029004:	f101 0802 	add.w	r8, r1, #2
 8029008:	2b00      	cmp	r3, #0
 802900a:	d19a      	bne.n	8028f42 <strptime_l+0xb2>
 802900c:	f101 0801 	add.w	r8, r1, #1
 8029010:	9b01      	ldr	r3, [sp, #4]
 8029012:	781a      	ldrb	r2, [r3, #0]
 8029014:	2a25      	cmp	r2, #37	@ 0x25
 8029016:	e0c8      	b.n	80291aa <strptime_l+0x31a>
 8029018:	493d      	ldr	r1, [pc, #244]	@ (8029110 <strptime_l+0x280>)
 802901a:	4632      	mov	r2, r6
 802901c:	a801      	add	r0, sp, #4
 802901e:	f7ff feeb 	bl	8028df8 <match_string>
 8029022:	2800      	cmp	r0, #0
 8029024:	f2c0 8155 	blt.w	80292d2 <strptime_l+0x442>
 8029028:	61a0      	str	r0, [r4, #24]
 802902a:	f045 0508 	orr.w	r5, r5, #8
 802902e:	e030      	b.n	8029092 <strptime_l+0x202>
 8029030:	4938      	ldr	r1, [pc, #224]	@ (8029114 <strptime_l+0x284>)
 8029032:	4632      	mov	r2, r6
 8029034:	e7f2      	b.n	802901c <strptime_l+0x18c>
 8029036:	4938      	ldr	r1, [pc, #224]	@ (8029118 <strptime_l+0x288>)
 8029038:	4632      	mov	r2, r6
 802903a:	a801      	add	r0, sp, #4
 802903c:	f7ff fedc 	bl	8028df8 <match_string>
 8029040:	2800      	cmp	r0, #0
 8029042:	f2c0 8146 	blt.w	80292d2 <strptime_l+0x442>
 8029046:	6120      	str	r0, [r4, #16]
 8029048:	f045 0502 	orr.w	r5, r5, #2
 802904c:	e021      	b.n	8029092 <strptime_l+0x202>
 802904e:	4933      	ldr	r1, [pc, #204]	@ (802911c <strptime_l+0x28c>)
 8029050:	4632      	mov	r2, r6
 8029052:	e7f2      	b.n	802903a <strptime_l+0x1aa>
 8029054:	9f01      	ldr	r7, [sp, #4]
 8029056:	4633      	mov	r3, r6
 8029058:	220a      	movs	r2, #10
 802905a:	a903      	add	r1, sp, #12
 802905c:	4638      	mov	r0, r7
 802905e:	f7fe fb49 	bl	80276f4 <strtol_l>
 8029062:	9b03      	ldr	r3, [sp, #12]
 8029064:	429f      	cmp	r7, r3
 8029066:	f000 8134 	beq.w	80292d2 <strptime_l+0x442>
 802906a:	2264      	movs	r2, #100	@ 0x64
 802906c:	4350      	muls	r0, r2
 802906e:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 8029072:	e1cd      	b.n	8029410 <strptime_l+0x580>
 8029074:	4929      	ldr	r1, [pc, #164]	@ (802911c <strptime_l+0x28c>)
 8029076:	9801      	ldr	r0, [sp, #4]
 8029078:	f8d1 10a0 	ldr.w	r1, [r1, #160]	@ 0xa0
 802907c:	4633      	mov	r3, r6
 802907e:	4622      	mov	r2, r4
 8029080:	f7ff ff06 	bl	8028e90 <strptime_l>
 8029084:	9003      	str	r0, [sp, #12]
 8029086:	2800      	cmp	r0, #0
 8029088:	f000 8123 	beq.w	80292d2 <strptime_l+0x442>
 802908c:	9001      	str	r0, [sp, #4]
 802908e:	f045 050f 	orr.w	r5, r5, #15
 8029092:	f108 0101 	add.w	r1, r8, #1
 8029096:	e704      	b.n	8028ea2 <strptime_l+0x12>
 8029098:	4921      	ldr	r1, [pc, #132]	@ (8029120 <strptime_l+0x290>)
 802909a:	4633      	mov	r3, r6
 802909c:	4622      	mov	r2, r4
 802909e:	9801      	ldr	r0, [sp, #4]
 80290a0:	f7ff fef6 	bl	8028e90 <strptime_l>
 80290a4:	9003      	str	r0, [sp, #12]
 80290a6:	b9f0      	cbnz	r0, 80290e6 <strptime_l+0x256>
 80290a8:	e113      	b.n	80292d2 <strptime_l+0x442>
 80290aa:	9f01      	ldr	r7, [sp, #4]
 80290ac:	4633      	mov	r3, r6
 80290ae:	220a      	movs	r2, #10
 80290b0:	a903      	add	r1, sp, #12
 80290b2:	4638      	mov	r0, r7
 80290b4:	f7fe fb1e 	bl	80276f4 <strtol_l>
 80290b8:	9b03      	ldr	r3, [sp, #12]
 80290ba:	429f      	cmp	r7, r3
 80290bc:	f000 8109 	beq.w	80292d2 <strptime_l+0x442>
 80290c0:	60e0      	str	r0, [r4, #12]
 80290c2:	9301      	str	r3, [sp, #4]
 80290c4:	f045 0501 	orr.w	r5, r5, #1
 80290c8:	e7e3      	b.n	8029092 <strptime_l+0x202>
 80290ca:	9f01      	ldr	r7, [sp, #4]
 80290cc:	4915      	ldr	r1, [pc, #84]	@ (8029124 <strptime_l+0x294>)
 80290ce:	4633      	mov	r3, r6
 80290d0:	4622      	mov	r2, r4
 80290d2:	4638      	mov	r0, r7
 80290d4:	f7ff fedc 	bl	8028e90 <strptime_l>
 80290d8:	9003      	str	r0, [sp, #12]
 80290da:	2800      	cmp	r0, #0
 80290dc:	f000 80f9 	beq.w	80292d2 <strptime_l+0x442>
 80290e0:	4287      	cmp	r7, r0
 80290e2:	f000 80f6 	beq.w	80292d2 <strptime_l+0x442>
 80290e6:	9001      	str	r0, [sp, #4]
 80290e8:	f045 0507 	orr.w	r5, r5, #7
 80290ec:	e7d1      	b.n	8029092 <strptime_l+0x202>
 80290ee:	9f01      	ldr	r7, [sp, #4]
 80290f0:	4633      	mov	r3, r6
 80290f2:	220a      	movs	r2, #10
 80290f4:	a903      	add	r1, sp, #12
 80290f6:	4638      	mov	r0, r7
 80290f8:	f7fe fafc 	bl	80276f4 <strtol_l>
 80290fc:	9b03      	ldr	r3, [sp, #12]
 80290fe:	429f      	cmp	r7, r3
 8029100:	f000 80e7 	beq.w	80292d2 <strptime_l+0x442>
 8029104:	60a0      	str	r0, [r4, #8]
 8029106:	9301      	str	r3, [sp, #4]
 8029108:	e7c3      	b.n	8029092 <strptime_l+0x202>
 802910a:	bf00      	nop
 802910c:	0803ed54 	.word	0x0803ed54
 8029110:	0803ee00 	.word	0x0803ee00
 8029114:	0803ede4 	.word	0x0803ede4
 8029118:	0803edb4 	.word	0x0803edb4
 802911c:	0803ed84 	.word	0x0803ed84
 8029120:	0803e8b1 	.word	0x0803e8b1
 8029124:	0803e8ba 	.word	0x0803e8ba
 8029128:	0803ebf1 	.word	0x0803ebf1
 802912c:	9f01      	ldr	r7, [sp, #4]
 802912e:	4633      	mov	r3, r6
 8029130:	220a      	movs	r2, #10
 8029132:	a903      	add	r1, sp, #12
 8029134:	4638      	mov	r0, r7
 8029136:	f7fe fadd 	bl	80276f4 <strtol_l>
 802913a:	9b03      	ldr	r3, [sp, #12]
 802913c:	429f      	cmp	r7, r3
 802913e:	f000 80c8 	beq.w	80292d2 <strptime_l+0x442>
 8029142:	280c      	cmp	r0, #12
 8029144:	bf08      	it	eq
 8029146:	2000      	moveq	r0, #0
 8029148:	e7dc      	b.n	8029104 <strptime_l+0x274>
 802914a:	9f01      	ldr	r7, [sp, #4]
 802914c:	4633      	mov	r3, r6
 802914e:	220a      	movs	r2, #10
 8029150:	a903      	add	r1, sp, #12
 8029152:	4638      	mov	r0, r7
 8029154:	f7fe face 	bl	80276f4 <strtol_l>
 8029158:	9b03      	ldr	r3, [sp, #12]
 802915a:	429f      	cmp	r7, r3
 802915c:	f000 80b9 	beq.w	80292d2 <strptime_l+0x442>
 8029160:	3801      	subs	r0, #1
 8029162:	61e0      	str	r0, [r4, #28]
 8029164:	9301      	str	r3, [sp, #4]
 8029166:	f045 0510 	orr.w	r5, r5, #16
 802916a:	e792      	b.n	8029092 <strptime_l+0x202>
 802916c:	9f01      	ldr	r7, [sp, #4]
 802916e:	4633      	mov	r3, r6
 8029170:	220a      	movs	r2, #10
 8029172:	a903      	add	r1, sp, #12
 8029174:	4638      	mov	r0, r7
 8029176:	f7fe fabd 	bl	80276f4 <strtol_l>
 802917a:	9b03      	ldr	r3, [sp, #12]
 802917c:	429f      	cmp	r7, r3
 802917e:	f000 80a8 	beq.w	80292d2 <strptime_l+0x442>
 8029182:	3801      	subs	r0, #1
 8029184:	6120      	str	r0, [r4, #16]
 8029186:	9301      	str	r3, [sp, #4]
 8029188:	e75e      	b.n	8029048 <strptime_l+0x1b8>
 802918a:	9f01      	ldr	r7, [sp, #4]
 802918c:	4633      	mov	r3, r6
 802918e:	220a      	movs	r2, #10
 8029190:	a903      	add	r1, sp, #12
 8029192:	4638      	mov	r0, r7
 8029194:	f7fe faae 	bl	80276f4 <strtol_l>
 8029198:	9b03      	ldr	r3, [sp, #12]
 802919a:	429f      	cmp	r7, r3
 802919c:	f000 8099 	beq.w	80292d2 <strptime_l+0x442>
 80291a0:	6060      	str	r0, [r4, #4]
 80291a2:	e7b0      	b.n	8029106 <strptime_l+0x276>
 80291a4:	9b01      	ldr	r3, [sp, #4]
 80291a6:	781a      	ldrb	r2, [r3, #0]
 80291a8:	2a0a      	cmp	r2, #10
 80291aa:	f040 8092 	bne.w	80292d2 <strptime_l+0x442>
 80291ae:	3301      	adds	r3, #1
 80291b0:	e7a9      	b.n	8029106 <strptime_l+0x276>
 80291b2:	49aa      	ldr	r1, [pc, #680]	@ (802945c <strptime_l+0x5cc>)
 80291b4:	4632      	mov	r2, r6
 80291b6:	a801      	add	r0, sp, #4
 80291b8:	f7ff fe1e 	bl	8028df8 <match_string>
 80291bc:	2800      	cmp	r0, #0
 80291be:	f2c0 8088 	blt.w	80292d2 <strptime_l+0x442>
 80291c2:	68a3      	ldr	r3, [r4, #8]
 80291c4:	2b0c      	cmp	r3, #12
 80291c6:	f300 8084 	bgt.w	80292d2 <strptime_l+0x442>
 80291ca:	f04f 020c 	mov.w	r2, #12
 80291ce:	fb02 f000 	mul.w	r0, r2, r0
 80291d2:	bf16      	itet	ne
 80291d4:	181b      	addne	r3, r3, r0
 80291d6:	60a0      	streq	r0, [r4, #8]
 80291d8:	60a3      	strne	r3, [r4, #8]
 80291da:	e75a      	b.n	8029092 <strptime_l+0x202>
 80291dc:	9f01      	ldr	r7, [sp, #4]
 80291de:	4633      	mov	r3, r6
 80291e0:	220a      	movs	r2, #10
 80291e2:	a903      	add	r1, sp, #12
 80291e4:	4638      	mov	r0, r7
 80291e6:	f7fe fa85 	bl	80276f4 <strtol_l>
 80291ea:	9b03      	ldr	r3, [sp, #12]
 80291ec:	429f      	cmp	r7, r3
 80291ee:	d070      	beq.n	80292d2 <strptime_l+0x442>
 80291f0:	3801      	subs	r0, #1
 80291f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80291f6:	e7c5      	b.n	8029184 <strptime_l+0x2f4>
 80291f8:	4999      	ldr	r1, [pc, #612]	@ (8029460 <strptime_l+0x5d0>)
 80291fa:	f8d1 10e4 	ldr.w	r1, [r1, #228]	@ 0xe4
 80291fe:	4633      	mov	r3, r6
 8029200:	4622      	mov	r2, r4
 8029202:	9801      	ldr	r0, [sp, #4]
 8029204:	f7ff fe44 	bl	8028e90 <strptime_l>
 8029208:	9003      	str	r0, [sp, #12]
 802920a:	2800      	cmp	r0, #0
 802920c:	d061      	beq.n	80292d2 <strptime_l+0x442>
 802920e:	9001      	str	r0, [sp, #4]
 8029210:	e73f      	b.n	8029092 <strptime_l+0x202>
 8029212:	4994      	ldr	r1, [pc, #592]	@ (8029464 <strptime_l+0x5d4>)
 8029214:	4633      	mov	r3, r6
 8029216:	4622      	mov	r2, r4
 8029218:	e7f3      	b.n	8029202 <strptime_l+0x372>
 802921a:	f000 fcb9 	bl	8029b90 <__errno>
 802921e:	f8d0 a000 	ldr.w	sl, [r0]
 8029222:	f000 fcb5 	bl	8029b90 <__errno>
 8029226:	f8dd b004 	ldr.w	fp, [sp, #4]
 802922a:	2300      	movs	r3, #0
 802922c:	6003      	str	r3, [r0, #0]
 802922e:	220a      	movs	r2, #10
 8029230:	4633      	mov	r3, r6
 8029232:	a903      	add	r1, sp, #12
 8029234:	4658      	mov	r0, fp
 8029236:	f002 fc0d 	bl	802ba54 <strtoll_l>
 802923a:	9b03      	ldr	r3, [sp, #12]
 802923c:	459b      	cmp	fp, r3
 802923e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8029242:	4607      	mov	r7, r0
 8029244:	460d      	mov	r5, r1
 8029246:	d044      	beq.n	80292d2 <strptime_l+0x442>
 8029248:	f000 fca2 	bl	8029b90 <__errno>
 802924c:	6803      	ldr	r3, [r0, #0]
 802924e:	2b00      	cmp	r3, #0
 8029250:	d13f      	bne.n	80292d2 <strptime_l+0x442>
 8029252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029256:	42ab      	cmp	r3, r5
 8029258:	bf08      	it	eq
 802925a:	42ba      	cmpeq	r2, r7
 802925c:	d139      	bne.n	80292d2 <strptime_l+0x442>
 802925e:	4621      	mov	r1, r4
 8029260:	a804      	add	r0, sp, #16
 8029262:	f003 faaf 	bl	802c7c4 <localtime_r>
 8029266:	4284      	cmp	r4, r0
 8029268:	d133      	bne.n	80292d2 <strptime_l+0x442>
 802926a:	f000 fc91 	bl	8029b90 <__errno>
 802926e:	9b03      	ldr	r3, [sp, #12]
 8029270:	f8c0 a000 	str.w	sl, [r0]
 8029274:	9301      	str	r3, [sp, #4]
 8029276:	251f      	movs	r5, #31
 8029278:	e70b      	b.n	8029092 <strptime_l+0x202>
 802927a:	9f01      	ldr	r7, [sp, #4]
 802927c:	4633      	mov	r3, r6
 802927e:	220a      	movs	r2, #10
 8029280:	a903      	add	r1, sp, #12
 8029282:	4638      	mov	r0, r7
 8029284:	f7fe fa36 	bl	80276f4 <strtol_l>
 8029288:	9b03      	ldr	r3, [sp, #12]
 802928a:	429f      	cmp	r7, r3
 802928c:	d021      	beq.n	80292d2 <strptime_l+0x442>
 802928e:	6020      	str	r0, [r4, #0]
 8029290:	e739      	b.n	8029106 <strptime_l+0x276>
 8029292:	9b01      	ldr	r3, [sp, #4]
 8029294:	781a      	ldrb	r2, [r3, #0]
 8029296:	2a09      	cmp	r2, #9
 8029298:	e787      	b.n	80291aa <strptime_l+0x31a>
 802929a:	4973      	ldr	r1, [pc, #460]	@ (8029468 <strptime_l+0x5d8>)
 802929c:	4633      	mov	r3, r6
 802929e:	4622      	mov	r2, r4
 80292a0:	e7af      	b.n	8029202 <strptime_l+0x372>
 80292a2:	9f01      	ldr	r7, [sp, #4]
 80292a4:	4633      	mov	r3, r6
 80292a6:	220a      	movs	r2, #10
 80292a8:	a903      	add	r1, sp, #12
 80292aa:	4638      	mov	r0, r7
 80292ac:	f7fe fa22 	bl	80276f4 <strtol_l>
 80292b0:	9b03      	ldr	r3, [sp, #12]
 80292b2:	429f      	cmp	r7, r3
 80292b4:	d00d      	beq.n	80292d2 <strptime_l+0x442>
 80292b6:	3801      	subs	r0, #1
 80292b8:	61a0      	str	r0, [r4, #24]
 80292ba:	9301      	str	r3, [sp, #4]
 80292bc:	e6b5      	b.n	802902a <strptime_l+0x19a>
 80292be:	9f01      	ldr	r7, [sp, #4]
 80292c0:	4633      	mov	r3, r6
 80292c2:	220a      	movs	r2, #10
 80292c4:	a903      	add	r1, sp, #12
 80292c6:	4638      	mov	r0, r7
 80292c8:	f7fe fa14 	bl	80276f4 <strtol_l>
 80292cc:	9b03      	ldr	r3, [sp, #12]
 80292ce:	429f      	cmp	r7, r3
 80292d0:	d1f2      	bne.n	80292b8 <strptime_l+0x428>
 80292d2:	2000      	movs	r0, #0
 80292d4:	b007      	add	sp, #28
 80292d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80292da:	f8dd a004 	ldr.w	sl, [sp, #4]
 80292de:	4633      	mov	r3, r6
 80292e0:	220a      	movs	r2, #10
 80292e2:	a903      	add	r1, sp, #12
 80292e4:	4650      	mov	r0, sl
 80292e6:	f7fe fa05 	bl	80276f4 <strtol_l>
 80292ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80292ee:	45da      	cmp	sl, fp
 80292f0:	4607      	mov	r7, r0
 80292f2:	d0ee      	beq.n	80292d2 <strptime_l+0x442>
 80292f4:	6960      	ldr	r0, [r4, #20]
 80292f6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80292fa:	f7ff fdb1 	bl	8028e60 <first_day>
 80292fe:	69a3      	ldr	r3, [r4, #24]
 8029300:	f8cd b004 	str.w	fp, [sp, #4]
 8029304:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8029308:	441f      	add	r7, r3
 802930a:	1a3f      	subs	r7, r7, r0
 802930c:	2f00      	cmp	r7, #0
 802930e:	bfb8      	it	lt
 8029310:	2300      	movlt	r3, #0
 8029312:	61e7      	str	r7, [r4, #28]
 8029314:	bfbc      	itt	lt
 8029316:	61a0      	strlt	r0, [r4, #24]
 8029318:	61e3      	strlt	r3, [r4, #28]
 802931a:	e724      	b.n	8029166 <strptime_l+0x2d6>
 802931c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8029320:	4633      	mov	r3, r6
 8029322:	220a      	movs	r2, #10
 8029324:	a903      	add	r1, sp, #12
 8029326:	4658      	mov	r0, fp
 8029328:	f7fe f9e4 	bl	80276f4 <strtol_l>
 802932c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8029330:	45d3      	cmp	fp, sl
 8029332:	4607      	mov	r7, r0
 8029334:	d0cd      	beq.n	80292d2 <strptime_l+0x442>
 8029336:	6960      	ldr	r0, [r4, #20]
 8029338:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802933c:	f7ff fd90 	bl	8028e60 <first_day>
 8029340:	2307      	movs	r3, #7
 8029342:	1d82      	adds	r2, r0, #6
 8029344:	fb92 f3f3 	sdiv	r3, r2, r3
 8029348:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802934c:	1ad2      	subs	r2, r2, r3
 802934e:	2a04      	cmp	r2, #4
 8029350:	f107 30ff 	add.w	r0, r7, #4294967295
 8029354:	bfb4      	ite	lt
 8029356:	2107      	movlt	r1, #7
 8029358:	2100      	movge	r1, #0
 802935a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 802935e:	440b      	add	r3, r1
 8029360:	69a1      	ldr	r1, [r4, #24]
 8029362:	f8cd a004 	str.w	sl, [sp, #4]
 8029366:	440b      	add	r3, r1
 8029368:	1a9b      	subs	r3, r3, r2
 802936a:	2b00      	cmp	r3, #0
 802936c:	61e3      	str	r3, [r4, #28]
 802936e:	bfbe      	ittt	lt
 8029370:	2300      	movlt	r3, #0
 8029372:	61a2      	strlt	r2, [r4, #24]
 8029374:	61e3      	strlt	r3, [r4, #28]
 8029376:	e6f6      	b.n	8029166 <strptime_l+0x2d6>
 8029378:	f8dd b004 	ldr.w	fp, [sp, #4]
 802937c:	4633      	mov	r3, r6
 802937e:	220a      	movs	r2, #10
 8029380:	a903      	add	r1, sp, #12
 8029382:	4658      	mov	r0, fp
 8029384:	f7fe f9b6 	bl	80276f4 <strtol_l>
 8029388:	9f03      	ldr	r7, [sp, #12]
 802938a:	45bb      	cmp	fp, r7
 802938c:	4682      	mov	sl, r0
 802938e:	d0a0      	beq.n	80292d2 <strptime_l+0x442>
 8029390:	6960      	ldr	r0, [r4, #20]
 8029392:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8029396:	f7ff fd63 	bl	8028e60 <first_day>
 802939a:	2107      	movs	r1, #7
 802939c:	1d82      	adds	r2, r0, #6
 802939e:	fb92 f3f1 	sdiv	r3, r2, r1
 80293a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80293a6:	1ad2      	subs	r2, r2, r3
 80293a8:	69a3      	ldr	r3, [r4, #24]
 80293aa:	3306      	adds	r3, #6
 80293ac:	fb93 f0f1 	sdiv	r0, r3, r1
 80293b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80293b4:	1a1b      	subs	r3, r3, r0
 80293b6:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80293ba:	eb03 000a 	add.w	r0, r3, sl
 80293be:	1a80      	subs	r0, r0, r2
 80293c0:	2800      	cmp	r0, #0
 80293c2:	61e0      	str	r0, [r4, #28]
 80293c4:	da08      	bge.n	80293d8 <strptime_l+0x548>
 80293c6:	3201      	adds	r2, #1
 80293c8:	fb92 f3f1 	sdiv	r3, r2, r1
 80293cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80293d0:	1ad2      	subs	r2, r2, r3
 80293d2:	2300      	movs	r3, #0
 80293d4:	61a2      	str	r2, [r4, #24]
 80293d6:	61e3      	str	r3, [r4, #28]
 80293d8:	9701      	str	r7, [sp, #4]
 80293da:	e6c4      	b.n	8029166 <strptime_l+0x2d6>
 80293dc:	4920      	ldr	r1, [pc, #128]	@ (8029460 <strptime_l+0x5d0>)
 80293de:	4633      	mov	r3, r6
 80293e0:	f8d1 109c 	ldr.w	r1, [r1, #156]	@ 0x9c
 80293e4:	4622      	mov	r2, r4
 80293e6:	e65a      	b.n	802909e <strptime_l+0x20e>
 80293e8:	491d      	ldr	r1, [pc, #116]	@ (8029460 <strptime_l+0x5d0>)
 80293ea:	4633      	mov	r3, r6
 80293ec:	f8d1 1098 	ldr.w	r1, [r1, #152]	@ 0x98
 80293f0:	4622      	mov	r2, r4
 80293f2:	e706      	b.n	8029202 <strptime_l+0x372>
 80293f4:	9f01      	ldr	r7, [sp, #4]
 80293f6:	4633      	mov	r3, r6
 80293f8:	220a      	movs	r2, #10
 80293fa:	a903      	add	r1, sp, #12
 80293fc:	4638      	mov	r0, r7
 80293fe:	f7fe f979 	bl	80276f4 <strtol_l>
 8029402:	9b03      	ldr	r3, [sp, #12]
 8029404:	429f      	cmp	r7, r3
 8029406:	f43f af64 	beq.w	80292d2 <strptime_l+0x442>
 802940a:	2845      	cmp	r0, #69	@ 0x45
 802940c:	dc00      	bgt.n	8029410 <strptime_l+0x580>
 802940e:	3064      	adds	r0, #100	@ 0x64
 8029410:	6160      	str	r0, [r4, #20]
 8029412:	9301      	str	r3, [sp, #4]
 8029414:	f045 0504 	orr.w	r5, r5, #4
 8029418:	e63b      	b.n	8029092 <strptime_l+0x202>
 802941a:	9f01      	ldr	r7, [sp, #4]
 802941c:	4633      	mov	r3, r6
 802941e:	220a      	movs	r2, #10
 8029420:	a903      	add	r1, sp, #12
 8029422:	4638      	mov	r0, r7
 8029424:	f7fe f966 	bl	80276f4 <strtol_l>
 8029428:	9b03      	ldr	r3, [sp, #12]
 802942a:	429f      	cmp	r7, r3
 802942c:	f47f ae1f 	bne.w	802906e <strptime_l+0x1de>
 8029430:	e74f      	b.n	80292d2 <strptime_l+0x442>
 8029432:	9a01      	ldr	r2, [sp, #4]
 8029434:	7811      	ldrb	r1, [r2, #0]
 8029436:	2925      	cmp	r1, #37	@ 0x25
 8029438:	d101      	bne.n	802943e <strptime_l+0x5ae>
 802943a:	9b01      	ldr	r3, [sp, #4]
 802943c:	e6b7      	b.n	80291ae <strptime_l+0x31e>
 802943e:	1c51      	adds	r1, r2, #1
 8029440:	7852      	ldrb	r2, [r2, #1]
 8029442:	9101      	str	r1, [sp, #4]
 8029444:	429a      	cmp	r2, r3
 8029446:	d0f8      	beq.n	802943a <strptime_l+0x5aa>
 8029448:	e743      	b.n	80292d2 <strptime_l+0x442>
 802944a:	9b01      	ldr	r3, [sp, #4]
 802944c:	7818      	ldrb	r0, [r3, #0]
 802944e:	4290      	cmp	r0, r2
 8029450:	f47f af3f 	bne.w	80292d2 <strptime_l+0x442>
 8029454:	3301      	adds	r3, #1
 8029456:	9301      	str	r3, [sp, #4]
 8029458:	e562      	b.n	8028f20 <strptime_l+0x90>
 802945a:	bf00      	nop
 802945c:	0803ee28 	.word	0x0803ee28
 8029460:	0803ed84 	.word	0x0803ed84
 8029464:	0803e8c3 	.word	0x0803e8c3
 8029468:	0803e8c9 	.word	0x0803e8c9
 802946c:	f005 0314 	and.w	r3, r5, #20
 8029470:	2b14      	cmp	r3, #20
 8029472:	f47f ad32 	bne.w	8028eda <strptime_l+0x4a>
 8029476:	f015 0302 	ands.w	r3, r5, #2
 802947a:	d103      	bne.n	8029484 <strptime_l+0x5f4>
 802947c:	69e1      	ldr	r1, [r4, #28]
 802947e:	291e      	cmp	r1, #30
 8029480:	dc16      	bgt.n	80294b0 <strptime_l+0x620>
 8029482:	6123      	str	r3, [r4, #16]
 8029484:	07eb      	lsls	r3, r5, #31
 8029486:	f53f ad28 	bmi.w	8028eda <strptime_l+0x4a>
 802948a:	6926      	ldr	r6, [r4, #16]
 802948c:	4b11      	ldr	r3, [pc, #68]	@ (80294d4 <strptime_l+0x644>)
 802948e:	69e1      	ldr	r1, [r4, #28]
 8029490:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8029494:	6960      	ldr	r0, [r4, #20]
 8029496:	1ac9      	subs	r1, r1, r3
 8029498:	60e1      	str	r1, [r4, #12]
 802949a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802949e:	f7ff fcc9 	bl	8028e34 <is_leap_year>
 80294a2:	b110      	cbz	r0, 80294aa <strptime_l+0x61a>
 80294a4:	2e01      	cmp	r6, #1
 80294a6:	f73f ad18 	bgt.w	8028eda <strptime_l+0x4a>
 80294aa:	3101      	adds	r1, #1
 80294ac:	60e1      	str	r1, [r4, #12]
 80294ae:	e514      	b.n	8028eda <strptime_l+0x4a>
 80294b0:	6960      	ldr	r0, [r4, #20]
 80294b2:	4e08      	ldr	r6, [pc, #32]	@ (80294d4 <strptime_l+0x644>)
 80294b4:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80294b8:	f7ff fcbc 	bl	8028e34 <is_leap_year>
 80294bc:	2302      	movs	r3, #2
 80294be:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80294c2:	4402      	add	r2, r0
 80294c4:	4291      	cmp	r1, r2
 80294c6:	db02      	blt.n	80294ce <strptime_l+0x63e>
 80294c8:	3301      	adds	r3, #1
 80294ca:	2b0c      	cmp	r3, #12
 80294cc:	d1f7      	bne.n	80294be <strptime_l+0x62e>
 80294ce:	3b01      	subs	r3, #1
 80294d0:	e7d7      	b.n	8029482 <strptime_l+0x5f2>
 80294d2:	bf00      	nop
 80294d4:	0803ed54 	.word	0x0803ed54

080294d8 <strptime>:
 80294d8:	4b01      	ldr	r3, [pc, #4]	@ (80294e0 <strptime+0x8>)
 80294da:	f7ff bcd9 	b.w	8028e90 <strptime_l>
 80294de:	bf00      	nop
 80294e0:	2400083c 	.word	0x2400083c

080294e4 <__tzcalc_limits>:
 80294e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80294e8:	4604      	mov	r4, r0
 80294ea:	f003 f967 	bl	802c7bc <__gettzinfo>
 80294ee:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80294f2:	429c      	cmp	r4, r3
 80294f4:	f340 80a3 	ble.w	802963e <__tzcalc_limits+0x15a>
 80294f8:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 80294fc:	1865      	adds	r5, r4, r1
 80294fe:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8029502:	f240 126d 	movw	r2, #365	@ 0x16d
 8029506:	10ad      	asrs	r5, r5, #2
 8029508:	fb02 5503 	mla	r5, r2, r3, r5
 802950c:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 8029510:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8029514:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8029518:	fb93 f3f2 	sdiv	r3, r3, r2
 802951c:	441d      	add	r5, r3
 802951e:	19a3      	adds	r3, r4, r6
 8029520:	4e48      	ldr	r6, [pc, #288]	@ (8029644 <__tzcalc_limits+0x160>)
 8029522:	6044      	str	r4, [r0, #4]
 8029524:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8029528:	4601      	mov	r1, r0
 802952a:	fbb3 f3f2 	udiv	r3, r3, r2
 802952e:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8029532:	441d      	add	r5, r3
 8029534:	7a0b      	ldrb	r3, [r1, #8]
 8029536:	f8d1 c014 	ldr.w	ip, [r1, #20]
 802953a:	2b4a      	cmp	r3, #74	@ 0x4a
 802953c:	d138      	bne.n	80295b0 <__tzcalc_limits+0xcc>
 802953e:	07a2      	lsls	r2, r4, #30
 8029540:	eb05 030c 	add.w	r3, r5, ip
 8029544:	d106      	bne.n	8029554 <__tzcalc_limits+0x70>
 8029546:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802954a:	fb94 f2fe 	sdiv	r2, r4, lr
 802954e:	fb0e 4212 	mls	r2, lr, r2, r4
 8029552:	b932      	cbnz	r2, 8029562 <__tzcalc_limits+0x7e>
 8029554:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8029558:	fb94 f2fe 	sdiv	r2, r4, lr
 802955c:	fb0e 4212 	mls	r2, lr, r2, r4
 8029560:	bb1a      	cbnz	r2, 80295aa <__tzcalc_limits+0xc6>
 8029562:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8029566:	bfd4      	ite	le
 8029568:	f04f 0c00 	movle.w	ip, #0
 802956c:	f04f 0c01 	movgt.w	ip, #1
 8029570:	4463      	add	r3, ip
 8029572:	3b01      	subs	r3, #1
 8029574:	698a      	ldr	r2, [r1, #24]
 8029576:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802957a:	fbc3 2c06 	smlal	r2, ip, r3, r6
 802957e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8029580:	18d2      	adds	r2, r2, r3
 8029582:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 8029586:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802958a:	3128      	adds	r1, #40	@ 0x28
 802958c:	428f      	cmp	r7, r1
 802958e:	d1d1      	bne.n	8029534 <__tzcalc_limits+0x50>
 8029590:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8029594:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8029598:	428c      	cmp	r4, r1
 802959a:	4193      	sbcs	r3, r2
 802959c:	bfb4      	ite	lt
 802959e:	2301      	movlt	r3, #1
 80295a0:	2300      	movge	r3, #0
 80295a2:	6003      	str	r3, [r0, #0]
 80295a4:	2001      	movs	r0, #1
 80295a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80295aa:	f04f 0c00 	mov.w	ip, #0
 80295ae:	e7df      	b.n	8029570 <__tzcalc_limits+0x8c>
 80295b0:	2b44      	cmp	r3, #68	@ 0x44
 80295b2:	d102      	bne.n	80295ba <__tzcalc_limits+0xd6>
 80295b4:	eb05 030c 	add.w	r3, r5, ip
 80295b8:	e7dc      	b.n	8029574 <__tzcalc_limits+0x90>
 80295ba:	07a3      	lsls	r3, r4, #30
 80295bc:	d105      	bne.n	80295ca <__tzcalc_limits+0xe6>
 80295be:	2264      	movs	r2, #100	@ 0x64
 80295c0:	fb94 f3f2 	sdiv	r3, r4, r2
 80295c4:	fb02 4313 	mls	r3, r2, r3, r4
 80295c8:	bb93      	cbnz	r3, 8029630 <__tzcalc_limits+0x14c>
 80295ca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80295ce:	fb94 f3f2 	sdiv	r3, r4, r2
 80295d2:	fb02 4313 	mls	r3, r2, r3, r4
 80295d6:	fab3 f383 	clz	r3, r3
 80295da:	095b      	lsrs	r3, r3, #5
 80295dc:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8029648 <__tzcalc_limits+0x164>
 80295e0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80295e4:	425b      	negs	r3, r3
 80295e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80295ea:	462a      	mov	r2, r5
 80295ec:	f04f 0800 	mov.w	r8, #0
 80295f0:	4473      	add	r3, lr
 80295f2:	f108 0801 	add.w	r8, r8, #1
 80295f6:	45c1      	cmp	r9, r8
 80295f8:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 80295fc:	dc1a      	bgt.n	8029634 <__tzcalc_limits+0x150>
 80295fe:	f102 0804 	add.w	r8, r2, #4
 8029602:	2307      	movs	r3, #7
 8029604:	fb98 f3f3 	sdiv	r3, r8, r3
 8029608:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802960c:	eba8 0303 	sub.w	r3, r8, r3
 8029610:	ebbc 0c03 	subs.w	ip, ip, r3
 8029614:	690b      	ldr	r3, [r1, #16]
 8029616:	f103 33ff 	add.w	r3, r3, #4294967295
 802961a:	bf48      	it	mi
 802961c:	f10c 0c07 	addmi.w	ip, ip, #7
 8029620:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8029624:	449c      	add	ip, r3
 8029626:	45f4      	cmp	ip, lr
 8029628:	da06      	bge.n	8029638 <__tzcalc_limits+0x154>
 802962a:	eb02 030c 	add.w	r3, r2, ip
 802962e:	e7a1      	b.n	8029574 <__tzcalc_limits+0x90>
 8029630:	2301      	movs	r3, #1
 8029632:	e7d3      	b.n	80295dc <__tzcalc_limits+0xf8>
 8029634:	4472      	add	r2, lr
 8029636:	e7dc      	b.n	80295f2 <__tzcalc_limits+0x10e>
 8029638:	f1ac 0c07 	sub.w	ip, ip, #7
 802963c:	e7f3      	b.n	8029626 <__tzcalc_limits+0x142>
 802963e:	2000      	movs	r0, #0
 8029640:	e7b1      	b.n	80295a6 <__tzcalc_limits+0xc2>
 8029642:	bf00      	nop
 8029644:	00015180 	.word	0x00015180
 8029648:	0803ef7c 	.word	0x0803ef7c

0802964c <__tz_lock>:
 802964c:	4801      	ldr	r0, [pc, #4]	@ (8029654 <__tz_lock+0x8>)
 802964e:	f000 baca 	b.w	8029be6 <__retarget_lock_acquire>
 8029652:	bf00      	nop
 8029654:	2401d294 	.word	0x2401d294

08029658 <__tz_unlock>:
 8029658:	4801      	ldr	r0, [pc, #4]	@ (8029660 <__tz_unlock+0x8>)
 802965a:	f000 bac6 	b.w	8029bea <__retarget_lock_release>
 802965e:	bf00      	nop
 8029660:	2401d294 	.word	0x2401d294

08029664 <_tzset_unlocked>:
 8029664:	4b01      	ldr	r3, [pc, #4]	@ (802966c <_tzset_unlocked+0x8>)
 8029666:	6818      	ldr	r0, [r3, #0]
 8029668:	f000 b802 	b.w	8029670 <_tzset_unlocked_r>
 802966c:	240009a8 	.word	0x240009a8

08029670 <_tzset_unlocked_r>:
 8029670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029674:	b08d      	sub	sp, #52	@ 0x34
 8029676:	4607      	mov	r7, r0
 8029678:	f003 f8a0 	bl	802c7bc <__gettzinfo>
 802967c:	49bc      	ldr	r1, [pc, #752]	@ (8029970 <_tzset_unlocked_r+0x300>)
 802967e:	4dbd      	ldr	r5, [pc, #756]	@ (8029974 <_tzset_unlocked_r+0x304>)
 8029680:	4604      	mov	r4, r0
 8029682:	4638      	mov	r0, r7
 8029684:	f001 fc82 	bl	802af8c <_getenv_r>
 8029688:	4606      	mov	r6, r0
 802968a:	bb10      	cbnz	r0, 80296d2 <_tzset_unlocked_r+0x62>
 802968c:	4bba      	ldr	r3, [pc, #744]	@ (8029978 <_tzset_unlocked_r+0x308>)
 802968e:	4abb      	ldr	r2, [pc, #748]	@ (802997c <_tzset_unlocked_r+0x30c>)
 8029690:	6018      	str	r0, [r3, #0]
 8029692:	4bbb      	ldr	r3, [pc, #748]	@ (8029980 <_tzset_unlocked_r+0x310>)
 8029694:	62a0      	str	r0, [r4, #40]	@ 0x28
 8029696:	6018      	str	r0, [r3, #0]
 8029698:	4bba      	ldr	r3, [pc, #744]	@ (8029984 <_tzset_unlocked_r+0x314>)
 802969a:	6520      	str	r0, [r4, #80]	@ 0x50
 802969c:	e9c3 2200 	strd	r2, r2, [r3]
 80296a0:	214a      	movs	r1, #74	@ 0x4a
 80296a2:	2200      	movs	r2, #0
 80296a4:	2300      	movs	r3, #0
 80296a6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80296aa:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80296ae:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80296b2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80296b6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80296ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80296be:	6828      	ldr	r0, [r5, #0]
 80296c0:	7221      	strb	r1, [r4, #8]
 80296c2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80296c6:	f7fd f8c5 	bl	8026854 <free>
 80296ca:	602e      	str	r6, [r5, #0]
 80296cc:	b00d      	add	sp, #52	@ 0x34
 80296ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296d2:	6829      	ldr	r1, [r5, #0]
 80296d4:	2900      	cmp	r1, #0
 80296d6:	f040 808e 	bne.w	80297f6 <_tzset_unlocked_r+0x186>
 80296da:	6828      	ldr	r0, [r5, #0]
 80296dc:	f7fd f8ba 	bl	8026854 <free>
 80296e0:	4630      	mov	r0, r6
 80296e2:	f7d6 fe75 	bl	80003d0 <strlen>
 80296e6:	1c41      	adds	r1, r0, #1
 80296e8:	4638      	mov	r0, r7
 80296ea:	f7fd f8dd 	bl	80268a8 <_malloc_r>
 80296ee:	6028      	str	r0, [r5, #0]
 80296f0:	2800      	cmp	r0, #0
 80296f2:	f040 8086 	bne.w	8029802 <_tzset_unlocked_r+0x192>
 80296f6:	4aa2      	ldr	r2, [pc, #648]	@ (8029980 <_tzset_unlocked_r+0x310>)
 80296f8:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8029984 <_tzset_unlocked_r+0x314>
 80296fc:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8029978 <_tzset_unlocked_r+0x308>
 8029700:	2300      	movs	r3, #0
 8029702:	6013      	str	r3, [r2, #0]
 8029704:	4aa0      	ldr	r2, [pc, #640]	@ (8029988 <_tzset_unlocked_r+0x318>)
 8029706:	f8ca 3000 	str.w	r3, [sl]
 802970a:	2000      	movs	r0, #0
 802970c:	2100      	movs	r1, #0
 802970e:	e9c8 2200 	strd	r2, r2, [r8]
 8029712:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8029716:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802971a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802971e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8029722:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8029726:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802972a:	224a      	movs	r2, #74	@ 0x4a
 802972c:	7222      	strb	r2, [r4, #8]
 802972e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029730:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8029734:	6523      	str	r3, [r4, #80]	@ 0x50
 8029736:	7833      	ldrb	r3, [r6, #0]
 8029738:	2b3a      	cmp	r3, #58	@ 0x3a
 802973a:	bf08      	it	eq
 802973c:	3601      	addeq	r6, #1
 802973e:	7833      	ldrb	r3, [r6, #0]
 8029740:	2b3c      	cmp	r3, #60	@ 0x3c
 8029742:	d162      	bne.n	802980a <_tzset_unlocked_r+0x19a>
 8029744:	1c75      	adds	r5, r6, #1
 8029746:	4a91      	ldr	r2, [pc, #580]	@ (802998c <_tzset_unlocked_r+0x31c>)
 8029748:	4991      	ldr	r1, [pc, #580]	@ (8029990 <_tzset_unlocked_r+0x320>)
 802974a:	ab0a      	add	r3, sp, #40	@ 0x28
 802974c:	4628      	mov	r0, r5
 802974e:	f7fe fef7 	bl	8028540 <siscanf>
 8029752:	2800      	cmp	r0, #0
 8029754:	ddba      	ble.n	80296cc <_tzset_unlocked_r+0x5c>
 8029756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029758:	1eda      	subs	r2, r3, #3
 802975a:	2a07      	cmp	r2, #7
 802975c:	d8b6      	bhi.n	80296cc <_tzset_unlocked_r+0x5c>
 802975e:	5ceb      	ldrb	r3, [r5, r3]
 8029760:	2b3e      	cmp	r3, #62	@ 0x3e
 8029762:	d1b3      	bne.n	80296cc <_tzset_unlocked_r+0x5c>
 8029764:	3602      	adds	r6, #2
 8029766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029768:	18f5      	adds	r5, r6, r3
 802976a:	5cf3      	ldrb	r3, [r6, r3]
 802976c:	2b2d      	cmp	r3, #45	@ 0x2d
 802976e:	d15a      	bne.n	8029826 <_tzset_unlocked_r+0x1b6>
 8029770:	3501      	adds	r5, #1
 8029772:	f04f 39ff 	mov.w	r9, #4294967295
 8029776:	2300      	movs	r3, #0
 8029778:	f8ad 301e 	strh.w	r3, [sp, #30]
 802977c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8029780:	af08      	add	r7, sp, #32
 8029782:	ab0a      	add	r3, sp, #40	@ 0x28
 8029784:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8029788:	9303      	str	r3, [sp, #12]
 802978a:	f10d 031e 	add.w	r3, sp, #30
 802978e:	9300      	str	r3, [sp, #0]
 8029790:	4980      	ldr	r1, [pc, #512]	@ (8029994 <_tzset_unlocked_r+0x324>)
 8029792:	ab0a      	add	r3, sp, #40	@ 0x28
 8029794:	aa07      	add	r2, sp, #28
 8029796:	4628      	mov	r0, r5
 8029798:	f7fe fed2 	bl	8028540 <siscanf>
 802979c:	2800      	cmp	r0, #0
 802979e:	dd95      	ble.n	80296cc <_tzset_unlocked_r+0x5c>
 80297a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80297a4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80297a8:	223c      	movs	r2, #60	@ 0x3c
 80297aa:	fb02 6603 	mla	r6, r2, r3, r6
 80297ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80297b2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80297b6:	fb02 6603 	mla	r6, r2, r3, r6
 80297ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80297bc:	fb09 f606 	mul.w	r6, r9, r6
 80297c0:	eb05 0903 	add.w	r9, r5, r3
 80297c4:	5ceb      	ldrb	r3, [r5, r3]
 80297c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80297c8:	f040 80ee 	bne.w	80299a8 <_tzset_unlocked_r+0x338>
 80297cc:	f109 0501 	add.w	r5, r9, #1
 80297d0:	4a71      	ldr	r2, [pc, #452]	@ (8029998 <_tzset_unlocked_r+0x328>)
 80297d2:	496f      	ldr	r1, [pc, #444]	@ (8029990 <_tzset_unlocked_r+0x320>)
 80297d4:	ab0a      	add	r3, sp, #40	@ 0x28
 80297d6:	4628      	mov	r0, r5
 80297d8:	f7fe feb2 	bl	8028540 <siscanf>
 80297dc:	2800      	cmp	r0, #0
 80297de:	dc28      	bgt.n	8029832 <_tzset_unlocked_r+0x1c2>
 80297e0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80297e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80297e6:	d124      	bne.n	8029832 <_tzset_unlocked_r+0x1c2>
 80297e8:	4b68      	ldr	r3, [pc, #416]	@ (802998c <_tzset_unlocked_r+0x31c>)
 80297ea:	62a6      	str	r6, [r4, #40]	@ 0x28
 80297ec:	e9c8 3300 	strd	r3, r3, [r8]
 80297f0:	f8ca 6000 	str.w	r6, [sl]
 80297f4:	e76a      	b.n	80296cc <_tzset_unlocked_r+0x5c>
 80297f6:	f7d6 fd8b 	bl	8000310 <strcmp>
 80297fa:	2800      	cmp	r0, #0
 80297fc:	f47f af6d 	bne.w	80296da <_tzset_unlocked_r+0x6a>
 8029800:	e764      	b.n	80296cc <_tzset_unlocked_r+0x5c>
 8029802:	4631      	mov	r1, r6
 8029804:	f000 f9f3 	bl	8029bee <strcpy>
 8029808:	e775      	b.n	80296f6 <_tzset_unlocked_r+0x86>
 802980a:	4a60      	ldr	r2, [pc, #384]	@ (802998c <_tzset_unlocked_r+0x31c>)
 802980c:	4963      	ldr	r1, [pc, #396]	@ (802999c <_tzset_unlocked_r+0x32c>)
 802980e:	ab0a      	add	r3, sp, #40	@ 0x28
 8029810:	4630      	mov	r0, r6
 8029812:	f7fe fe95 	bl	8028540 <siscanf>
 8029816:	2800      	cmp	r0, #0
 8029818:	f77f af58 	ble.w	80296cc <_tzset_unlocked_r+0x5c>
 802981c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802981e:	3b03      	subs	r3, #3
 8029820:	2b07      	cmp	r3, #7
 8029822:	d9a0      	bls.n	8029766 <_tzset_unlocked_r+0xf6>
 8029824:	e752      	b.n	80296cc <_tzset_unlocked_r+0x5c>
 8029826:	2b2b      	cmp	r3, #43	@ 0x2b
 8029828:	bf08      	it	eq
 802982a:	3501      	addeq	r5, #1
 802982c:	f04f 0901 	mov.w	r9, #1
 8029830:	e7a1      	b.n	8029776 <_tzset_unlocked_r+0x106>
 8029832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029834:	1eda      	subs	r2, r3, #3
 8029836:	2a07      	cmp	r2, #7
 8029838:	f63f af48 	bhi.w	80296cc <_tzset_unlocked_r+0x5c>
 802983c:	5ceb      	ldrb	r3, [r5, r3]
 802983e:	2b3e      	cmp	r3, #62	@ 0x3e
 8029840:	f47f af44 	bne.w	80296cc <_tzset_unlocked_r+0x5c>
 8029844:	f109 0902 	add.w	r9, r9, #2
 8029848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802984a:	eb09 0503 	add.w	r5, r9, r3
 802984e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8029852:	2b2d      	cmp	r3, #45	@ 0x2d
 8029854:	f040 80b7 	bne.w	80299c6 <_tzset_unlocked_r+0x356>
 8029858:	3501      	adds	r5, #1
 802985a:	f04f 39ff 	mov.w	r9, #4294967295
 802985e:	2300      	movs	r3, #0
 8029860:	f8ad 301c 	strh.w	r3, [sp, #28]
 8029864:	f8ad 301e 	strh.w	r3, [sp, #30]
 8029868:	f8ad 3020 	strh.w	r3, [sp, #32]
 802986c:	930a      	str	r3, [sp, #40]	@ 0x28
 802986e:	ab0a      	add	r3, sp, #40	@ 0x28
 8029870:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8029874:	9301      	str	r3, [sp, #4]
 8029876:	f10d 031e 	add.w	r3, sp, #30
 802987a:	9300      	str	r3, [sp, #0]
 802987c:	4945      	ldr	r1, [pc, #276]	@ (8029994 <_tzset_unlocked_r+0x324>)
 802987e:	ab0a      	add	r3, sp, #40	@ 0x28
 8029880:	aa07      	add	r2, sp, #28
 8029882:	4628      	mov	r0, r5
 8029884:	f7fe fe5c 	bl	8028540 <siscanf>
 8029888:	2800      	cmp	r0, #0
 802988a:	f300 80a2 	bgt.w	80299d2 <_tzset_unlocked_r+0x362>
 802988e:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8029892:	9304      	str	r3, [sp, #16]
 8029894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029896:	4627      	mov	r7, r4
 8029898:	441d      	add	r5, r3
 802989a:	f04f 0b00 	mov.w	fp, #0
 802989e:	782b      	ldrb	r3, [r5, #0]
 80298a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80298a2:	bf08      	it	eq
 80298a4:	3501      	addeq	r5, #1
 80298a6:	f895 9000 	ldrb.w	r9, [r5]
 80298aa:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80298ae:	f040 80a3 	bne.w	80299f8 <_tzset_unlocked_r+0x388>
 80298b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80298b4:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80298b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80298bc:	aa09      	add	r2, sp, #36	@ 0x24
 80298be:	9200      	str	r2, [sp, #0]
 80298c0:	4937      	ldr	r1, [pc, #220]	@ (80299a0 <_tzset_unlocked_r+0x330>)
 80298c2:	9303      	str	r3, [sp, #12]
 80298c4:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80298c8:	4628      	mov	r0, r5
 80298ca:	f7fe fe39 	bl	8028540 <siscanf>
 80298ce:	2803      	cmp	r0, #3
 80298d0:	f47f aefc 	bne.w	80296cc <_tzset_unlocked_r+0x5c>
 80298d4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80298d8:	1e4b      	subs	r3, r1, #1
 80298da:	2b0b      	cmp	r3, #11
 80298dc:	f63f aef6 	bhi.w	80296cc <_tzset_unlocked_r+0x5c>
 80298e0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 80298e4:	1e53      	subs	r3, r2, #1
 80298e6:	2b04      	cmp	r3, #4
 80298e8:	f63f aef0 	bhi.w	80296cc <_tzset_unlocked_r+0x5c>
 80298ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80298f0:	2b06      	cmp	r3, #6
 80298f2:	f63f aeeb 	bhi.w	80296cc <_tzset_unlocked_r+0x5c>
 80298f6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80298fa:	f887 9008 	strb.w	r9, [r7, #8]
 80298fe:	617b      	str	r3, [r7, #20]
 8029900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029902:	eb05 0903 	add.w	r9, r5, r3
 8029906:	2500      	movs	r5, #0
 8029908:	f04f 0302 	mov.w	r3, #2
 802990c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8029910:	f8ad 501e 	strh.w	r5, [sp, #30]
 8029914:	f8ad 5020 	strh.w	r5, [sp, #32]
 8029918:	950a      	str	r5, [sp, #40]	@ 0x28
 802991a:	f899 3000 	ldrb.w	r3, [r9]
 802991e:	2b2f      	cmp	r3, #47	@ 0x2f
 8029920:	f040 8096 	bne.w	8029a50 <_tzset_unlocked_r+0x3e0>
 8029924:	ab0a      	add	r3, sp, #40	@ 0x28
 8029926:	aa08      	add	r2, sp, #32
 8029928:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802992c:	f10d 021e 	add.w	r2, sp, #30
 8029930:	9200      	str	r2, [sp, #0]
 8029932:	491c      	ldr	r1, [pc, #112]	@ (80299a4 <_tzset_unlocked_r+0x334>)
 8029934:	9303      	str	r3, [sp, #12]
 8029936:	aa07      	add	r2, sp, #28
 8029938:	4648      	mov	r0, r9
 802993a:	f7fe fe01 	bl	8028540 <siscanf>
 802993e:	42a8      	cmp	r0, r5
 8029940:	f300 8086 	bgt.w	8029a50 <_tzset_unlocked_r+0x3e0>
 8029944:	214a      	movs	r1, #74	@ 0x4a
 8029946:	2200      	movs	r2, #0
 8029948:	2300      	movs	r3, #0
 802994a:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802994e:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8029952:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8029956:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802995a:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802995e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8029962:	7221      	strb	r1, [r4, #8]
 8029964:	62a5      	str	r5, [r4, #40]	@ 0x28
 8029966:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802996a:	6525      	str	r5, [r4, #80]	@ 0x50
 802996c:	e6ae      	b.n	80296cc <_tzset_unlocked_r+0x5c>
 802996e:	bf00      	nop
 8029970:	0803e8d2 	.word	0x0803e8d2
 8029974:	2401d26c 	.word	0x2401d26c
 8029978:	2401d288 	.word	0x2401d288
 802997c:	0803e8d5 	.word	0x0803e8d5
 8029980:	2401d28c 	.word	0x2401d28c
 8029984:	24000834 	.word	0x24000834
 8029988:	0803e80d 	.word	0x0803e80d
 802998c:	2401d27c 	.word	0x2401d27c
 8029990:	0803e8d9 	.word	0x0803e8d9
 8029994:	0803e90e 	.word	0x0803e90e
 8029998:	2401d270 	.word	0x2401d270
 802999c:	0803e8ec 	.word	0x0803e8ec
 80299a0:	0803e8fa 	.word	0x0803e8fa
 80299a4:	0803e90d 	.word	0x0803e90d
 80299a8:	4a3e      	ldr	r2, [pc, #248]	@ (8029aa4 <_tzset_unlocked_r+0x434>)
 80299aa:	493f      	ldr	r1, [pc, #252]	@ (8029aa8 <_tzset_unlocked_r+0x438>)
 80299ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80299ae:	4648      	mov	r0, r9
 80299b0:	f7fe fdc6 	bl	8028540 <siscanf>
 80299b4:	2800      	cmp	r0, #0
 80299b6:	f77f af17 	ble.w	80297e8 <_tzset_unlocked_r+0x178>
 80299ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80299bc:	3b03      	subs	r3, #3
 80299be:	2b07      	cmp	r3, #7
 80299c0:	f67f af42 	bls.w	8029848 <_tzset_unlocked_r+0x1d8>
 80299c4:	e682      	b.n	80296cc <_tzset_unlocked_r+0x5c>
 80299c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80299c8:	bf08      	it	eq
 80299ca:	3501      	addeq	r5, #1
 80299cc:	f04f 0901 	mov.w	r9, #1
 80299d0:	e745      	b.n	802985e <_tzset_unlocked_r+0x1ee>
 80299d2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80299d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80299da:	213c      	movs	r1, #60	@ 0x3c
 80299dc:	fb01 3302 	mla	r3, r1, r2, r3
 80299e0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80299e4:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80299e8:	fb01 3302 	mla	r3, r1, r2, r3
 80299ec:	fb09 f303 	mul.w	r3, r9, r3
 80299f0:	e74f      	b.n	8029892 <_tzset_unlocked_r+0x222>
 80299f2:	f04f 0b01 	mov.w	fp, #1
 80299f6:	e752      	b.n	802989e <_tzset_unlocked_r+0x22e>
 80299f8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 80299fc:	bf06      	itte	eq
 80299fe:	3501      	addeq	r5, #1
 8029a00:	464b      	moveq	r3, r9
 8029a02:	2344      	movne	r3, #68	@ 0x44
 8029a04:	220a      	movs	r2, #10
 8029a06:	a90b      	add	r1, sp, #44	@ 0x2c
 8029a08:	4628      	mov	r0, r5
 8029a0a:	9305      	str	r3, [sp, #20]
 8029a0c:	f7fd fef6 	bl	80277fc <strtoul>
 8029a10:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8029a14:	9b05      	ldr	r3, [sp, #20]
 8029a16:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8029a1a:	45a9      	cmp	r9, r5
 8029a1c:	d114      	bne.n	8029a48 <_tzset_unlocked_r+0x3d8>
 8029a1e:	234d      	movs	r3, #77	@ 0x4d
 8029a20:	f1bb 0f00 	cmp.w	fp, #0
 8029a24:	d107      	bne.n	8029a36 <_tzset_unlocked_r+0x3c6>
 8029a26:	7223      	strb	r3, [r4, #8]
 8029a28:	2103      	movs	r1, #3
 8029a2a:	2302      	movs	r3, #2
 8029a2c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8029a30:	f8c4 b014 	str.w	fp, [r4, #20]
 8029a34:	e767      	b.n	8029906 <_tzset_unlocked_r+0x296>
 8029a36:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8029a3a:	220b      	movs	r2, #11
 8029a3c:	2301      	movs	r3, #1
 8029a3e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8029a42:	2300      	movs	r3, #0
 8029a44:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8029a46:	e75e      	b.n	8029906 <_tzset_unlocked_r+0x296>
 8029a48:	b280      	uxth	r0, r0
 8029a4a:	723b      	strb	r3, [r7, #8]
 8029a4c:	6178      	str	r0, [r7, #20]
 8029a4e:	e75a      	b.n	8029906 <_tzset_unlocked_r+0x296>
 8029a50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8029a54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8029a58:	213c      	movs	r1, #60	@ 0x3c
 8029a5a:	fb01 3302 	mla	r3, r1, r2, r3
 8029a5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8029a62:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8029a66:	fb01 3302 	mla	r3, r1, r2, r3
 8029a6a:	61bb      	str	r3, [r7, #24]
 8029a6c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029a6e:	3728      	adds	r7, #40	@ 0x28
 8029a70:	444d      	add	r5, r9
 8029a72:	f1bb 0f00 	cmp.w	fp, #0
 8029a76:	d0bc      	beq.n	80299f2 <_tzset_unlocked_r+0x382>
 8029a78:	9b04      	ldr	r3, [sp, #16]
 8029a7a:	6523      	str	r3, [r4, #80]	@ 0x50
 8029a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8029aac <_tzset_unlocked_r+0x43c>)
 8029a7e:	f8c8 3000 	str.w	r3, [r8]
 8029a82:	6860      	ldr	r0, [r4, #4]
 8029a84:	4b07      	ldr	r3, [pc, #28]	@ (8029aa4 <_tzset_unlocked_r+0x434>)
 8029a86:	62a6      	str	r6, [r4, #40]	@ 0x28
 8029a88:	f8c8 3004 	str.w	r3, [r8, #4]
 8029a8c:	f7ff fd2a 	bl	80294e4 <__tzcalc_limits>
 8029a90:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8029a92:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029a94:	f8ca 2000 	str.w	r2, [sl]
 8029a98:	1a9b      	subs	r3, r3, r2
 8029a9a:	4a05      	ldr	r2, [pc, #20]	@ (8029ab0 <_tzset_unlocked_r+0x440>)
 8029a9c:	bf18      	it	ne
 8029a9e:	2301      	movne	r3, #1
 8029aa0:	6013      	str	r3, [r2, #0]
 8029aa2:	e613      	b.n	80296cc <_tzset_unlocked_r+0x5c>
 8029aa4:	2401d270 	.word	0x2401d270
 8029aa8:	0803e8ec 	.word	0x0803e8ec
 8029aac:	2401d27c 	.word	0x2401d27c
 8029ab0:	2401d28c 	.word	0x2401d28c

08029ab4 <_localeconv_r>:
 8029ab4:	4800      	ldr	r0, [pc, #0]	@ (8029ab8 <_localeconv_r+0x4>)
 8029ab6:	4770      	bx	lr
 8029ab8:	2400092c 	.word	0x2400092c

08029abc <_close_r>:
 8029abc:	b538      	push	{r3, r4, r5, lr}
 8029abe:	4d06      	ldr	r5, [pc, #24]	@ (8029ad8 <_close_r+0x1c>)
 8029ac0:	2300      	movs	r3, #0
 8029ac2:	4604      	mov	r4, r0
 8029ac4:	4608      	mov	r0, r1
 8029ac6:	602b      	str	r3, [r5, #0]
 8029ac8:	f7d8 febd 	bl	8002846 <_close>
 8029acc:	1c43      	adds	r3, r0, #1
 8029ace:	d102      	bne.n	8029ad6 <_close_r+0x1a>
 8029ad0:	682b      	ldr	r3, [r5, #0]
 8029ad2:	b103      	cbz	r3, 8029ad6 <_close_r+0x1a>
 8029ad4:	6023      	str	r3, [r4, #0]
 8029ad6:	bd38      	pop	{r3, r4, r5, pc}
 8029ad8:	2401d290 	.word	0x2401d290

08029adc <_lseek_r>:
 8029adc:	b538      	push	{r3, r4, r5, lr}
 8029ade:	4d07      	ldr	r5, [pc, #28]	@ (8029afc <_lseek_r+0x20>)
 8029ae0:	4604      	mov	r4, r0
 8029ae2:	4608      	mov	r0, r1
 8029ae4:	4611      	mov	r1, r2
 8029ae6:	2200      	movs	r2, #0
 8029ae8:	602a      	str	r2, [r5, #0]
 8029aea:	461a      	mov	r2, r3
 8029aec:	f7d8 fed2 	bl	8002894 <_lseek>
 8029af0:	1c43      	adds	r3, r0, #1
 8029af2:	d102      	bne.n	8029afa <_lseek_r+0x1e>
 8029af4:	682b      	ldr	r3, [r5, #0]
 8029af6:	b103      	cbz	r3, 8029afa <_lseek_r+0x1e>
 8029af8:	6023      	str	r3, [r4, #0]
 8029afa:	bd38      	pop	{r3, r4, r5, pc}
 8029afc:	2401d290 	.word	0x2401d290

08029b00 <_read_r>:
 8029b00:	b538      	push	{r3, r4, r5, lr}
 8029b02:	4d07      	ldr	r5, [pc, #28]	@ (8029b20 <_read_r+0x20>)
 8029b04:	4604      	mov	r4, r0
 8029b06:	4608      	mov	r0, r1
 8029b08:	4611      	mov	r1, r2
 8029b0a:	2200      	movs	r2, #0
 8029b0c:	602a      	str	r2, [r5, #0]
 8029b0e:	461a      	mov	r2, r3
 8029b10:	f7d8 fe7c 	bl	800280c <_read>
 8029b14:	1c43      	adds	r3, r0, #1
 8029b16:	d102      	bne.n	8029b1e <_read_r+0x1e>
 8029b18:	682b      	ldr	r3, [r5, #0]
 8029b1a:	b103      	cbz	r3, 8029b1e <_read_r+0x1e>
 8029b1c:	6023      	str	r3, [r4, #0]
 8029b1e:	bd38      	pop	{r3, r4, r5, pc}
 8029b20:	2401d290 	.word	0x2401d290

08029b24 <_kill_r>:
 8029b24:	b538      	push	{r3, r4, r5, lr}
 8029b26:	4d07      	ldr	r5, [pc, #28]	@ (8029b44 <_kill_r+0x20>)
 8029b28:	2300      	movs	r3, #0
 8029b2a:	4604      	mov	r4, r0
 8029b2c:	4608      	mov	r0, r1
 8029b2e:	4611      	mov	r1, r2
 8029b30:	602b      	str	r3, [r5, #0]
 8029b32:	f7d8 fe50 	bl	80027d6 <_kill>
 8029b36:	1c43      	adds	r3, r0, #1
 8029b38:	d102      	bne.n	8029b40 <_kill_r+0x1c>
 8029b3a:	682b      	ldr	r3, [r5, #0]
 8029b3c:	b103      	cbz	r3, 8029b40 <_kill_r+0x1c>
 8029b3e:	6023      	str	r3, [r4, #0]
 8029b40:	bd38      	pop	{r3, r4, r5, pc}
 8029b42:	bf00      	nop
 8029b44:	2401d290 	.word	0x2401d290

08029b48 <_getpid_r>:
 8029b48:	f7d8 be3d 	b.w	80027c6 <_getpid>

08029b4c <_sbrk_r>:
 8029b4c:	b538      	push	{r3, r4, r5, lr}
 8029b4e:	4d06      	ldr	r5, [pc, #24]	@ (8029b68 <_sbrk_r+0x1c>)
 8029b50:	2300      	movs	r3, #0
 8029b52:	4604      	mov	r4, r0
 8029b54:	4608      	mov	r0, r1
 8029b56:	602b      	str	r3, [r5, #0]
 8029b58:	f7d8 feaa 	bl	80028b0 <_sbrk>
 8029b5c:	1c43      	adds	r3, r0, #1
 8029b5e:	d102      	bne.n	8029b66 <_sbrk_r+0x1a>
 8029b60:	682b      	ldr	r3, [r5, #0]
 8029b62:	b103      	cbz	r3, 8029b66 <_sbrk_r+0x1a>
 8029b64:	6023      	str	r3, [r4, #0]
 8029b66:	bd38      	pop	{r3, r4, r5, pc}
 8029b68:	2401d290 	.word	0x2401d290

08029b6c <_write_r>:
 8029b6c:	b538      	push	{r3, r4, r5, lr}
 8029b6e:	4d07      	ldr	r5, [pc, #28]	@ (8029b8c <_write_r+0x20>)
 8029b70:	4604      	mov	r4, r0
 8029b72:	4608      	mov	r0, r1
 8029b74:	4611      	mov	r1, r2
 8029b76:	2200      	movs	r2, #0
 8029b78:	602a      	str	r2, [r5, #0]
 8029b7a:	461a      	mov	r2, r3
 8029b7c:	f7d7 f846 	bl	8000c0c <_write>
 8029b80:	1c43      	adds	r3, r0, #1
 8029b82:	d102      	bne.n	8029b8a <_write_r+0x1e>
 8029b84:	682b      	ldr	r3, [r5, #0]
 8029b86:	b103      	cbz	r3, 8029b8a <_write_r+0x1e>
 8029b88:	6023      	str	r3, [r4, #0]
 8029b8a:	bd38      	pop	{r3, r4, r5, pc}
 8029b8c:	2401d290 	.word	0x2401d290

08029b90 <__errno>:
 8029b90:	4b01      	ldr	r3, [pc, #4]	@ (8029b98 <__errno+0x8>)
 8029b92:	6818      	ldr	r0, [r3, #0]
 8029b94:	4770      	bx	lr
 8029b96:	bf00      	nop
 8029b98:	240009a8 	.word	0x240009a8

08029b9c <__libc_init_array>:
 8029b9c:	b570      	push	{r4, r5, r6, lr}
 8029b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8029bd4 <__libc_init_array+0x38>)
 8029ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8029bd8 <__libc_init_array+0x3c>)
 8029ba2:	1b64      	subs	r4, r4, r5
 8029ba4:	10a4      	asrs	r4, r4, #2
 8029ba6:	2600      	movs	r6, #0
 8029ba8:	42a6      	cmp	r6, r4
 8029baa:	d109      	bne.n	8029bc0 <__libc_init_array+0x24>
 8029bac:	4d0b      	ldr	r5, [pc, #44]	@ (8029bdc <__libc_init_array+0x40>)
 8029bae:	4c0c      	ldr	r4, [pc, #48]	@ (8029be0 <__libc_init_array+0x44>)
 8029bb0:	f002 ffd6 	bl	802cb60 <_init>
 8029bb4:	1b64      	subs	r4, r4, r5
 8029bb6:	10a4      	asrs	r4, r4, #2
 8029bb8:	2600      	movs	r6, #0
 8029bba:	42a6      	cmp	r6, r4
 8029bbc:	d105      	bne.n	8029bca <__libc_init_array+0x2e>
 8029bbe:	bd70      	pop	{r4, r5, r6, pc}
 8029bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8029bc4:	4798      	blx	r3
 8029bc6:	3601      	adds	r6, #1
 8029bc8:	e7ee      	b.n	8029ba8 <__libc_init_array+0xc>
 8029bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8029bce:	4798      	blx	r3
 8029bd0:	3601      	adds	r6, #1
 8029bd2:	e7f2      	b.n	8029bba <__libc_init_array+0x1e>
 8029bd4:	0803efe8 	.word	0x0803efe8
 8029bd8:	0803efe8 	.word	0x0803efe8
 8029bdc:	0803efe8 	.word	0x0803efe8
 8029be0:	0803efec 	.word	0x0803efec

08029be4 <__retarget_lock_init_recursive>:
 8029be4:	4770      	bx	lr

08029be6 <__retarget_lock_acquire>:
 8029be6:	4770      	bx	lr

08029be8 <__retarget_lock_acquire_recursive>:
 8029be8:	4770      	bx	lr

08029bea <__retarget_lock_release>:
 8029bea:	4770      	bx	lr

08029bec <__retarget_lock_release_recursive>:
 8029bec:	4770      	bx	lr

08029bee <strcpy>:
 8029bee:	4603      	mov	r3, r0
 8029bf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029bf4:	f803 2b01 	strb.w	r2, [r3], #1
 8029bf8:	2a00      	cmp	r2, #0
 8029bfa:	d1f9      	bne.n	8029bf0 <strcpy+0x2>
 8029bfc:	4770      	bx	lr

08029bfe <memcpy>:
 8029bfe:	440a      	add	r2, r1
 8029c00:	4291      	cmp	r1, r2
 8029c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8029c06:	d100      	bne.n	8029c0a <memcpy+0xc>
 8029c08:	4770      	bx	lr
 8029c0a:	b510      	push	{r4, lr}
 8029c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029c14:	4291      	cmp	r1, r2
 8029c16:	d1f9      	bne.n	8029c0c <memcpy+0xe>
 8029c18:	bd10      	pop	{r4, pc}
 8029c1a:	0000      	movs	r0, r0
 8029c1c:	0000      	movs	r0, r0
	...

08029c20 <nan>:
 8029c20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8029c28 <nan+0x8>
 8029c24:	4770      	bx	lr
 8029c26:	bf00      	nop
 8029c28:	00000000 	.word	0x00000000
 8029c2c:	7ff80000 	.word	0x7ff80000

08029c30 <div>:
 8029c30:	b510      	push	{r4, lr}
 8029c32:	fb91 f4f2 	sdiv	r4, r1, r2
 8029c36:	fb02 1114 	mls	r1, r2, r4, r1
 8029c3a:	6004      	str	r4, [r0, #0]
 8029c3c:	6041      	str	r1, [r0, #4]
 8029c3e:	bd10      	pop	{r4, pc}

08029c40 <quorem>:
 8029c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c44:	6903      	ldr	r3, [r0, #16]
 8029c46:	690c      	ldr	r4, [r1, #16]
 8029c48:	42a3      	cmp	r3, r4
 8029c4a:	4607      	mov	r7, r0
 8029c4c:	db7e      	blt.n	8029d4c <quorem+0x10c>
 8029c4e:	3c01      	subs	r4, #1
 8029c50:	f101 0814 	add.w	r8, r1, #20
 8029c54:	00a3      	lsls	r3, r4, #2
 8029c56:	f100 0514 	add.w	r5, r0, #20
 8029c5a:	9300      	str	r3, [sp, #0]
 8029c5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029c60:	9301      	str	r3, [sp, #4]
 8029c62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8029c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029c6a:	3301      	adds	r3, #1
 8029c6c:	429a      	cmp	r2, r3
 8029c6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8029c72:	fbb2 f6f3 	udiv	r6, r2, r3
 8029c76:	d32e      	bcc.n	8029cd6 <quorem+0x96>
 8029c78:	f04f 0a00 	mov.w	sl, #0
 8029c7c:	46c4      	mov	ip, r8
 8029c7e:	46ae      	mov	lr, r5
 8029c80:	46d3      	mov	fp, sl
 8029c82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8029c86:	b298      	uxth	r0, r3
 8029c88:	fb06 a000 	mla	r0, r6, r0, sl
 8029c8c:	0c02      	lsrs	r2, r0, #16
 8029c8e:	0c1b      	lsrs	r3, r3, #16
 8029c90:	fb06 2303 	mla	r3, r6, r3, r2
 8029c94:	f8de 2000 	ldr.w	r2, [lr]
 8029c98:	b280      	uxth	r0, r0
 8029c9a:	b292      	uxth	r2, r2
 8029c9c:	1a12      	subs	r2, r2, r0
 8029c9e:	445a      	add	r2, fp
 8029ca0:	f8de 0000 	ldr.w	r0, [lr]
 8029ca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029ca8:	b29b      	uxth	r3, r3
 8029caa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8029cae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8029cb2:	b292      	uxth	r2, r2
 8029cb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8029cb8:	45e1      	cmp	r9, ip
 8029cba:	f84e 2b04 	str.w	r2, [lr], #4
 8029cbe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8029cc2:	d2de      	bcs.n	8029c82 <quorem+0x42>
 8029cc4:	9b00      	ldr	r3, [sp, #0]
 8029cc6:	58eb      	ldr	r3, [r5, r3]
 8029cc8:	b92b      	cbnz	r3, 8029cd6 <quorem+0x96>
 8029cca:	9b01      	ldr	r3, [sp, #4]
 8029ccc:	3b04      	subs	r3, #4
 8029cce:	429d      	cmp	r5, r3
 8029cd0:	461a      	mov	r2, r3
 8029cd2:	d32f      	bcc.n	8029d34 <quorem+0xf4>
 8029cd4:	613c      	str	r4, [r7, #16]
 8029cd6:	4638      	mov	r0, r7
 8029cd8:	f001 fc2e 	bl	802b538 <__mcmp>
 8029cdc:	2800      	cmp	r0, #0
 8029cde:	db25      	blt.n	8029d2c <quorem+0xec>
 8029ce0:	4629      	mov	r1, r5
 8029ce2:	2000      	movs	r0, #0
 8029ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8029ce8:	f8d1 c000 	ldr.w	ip, [r1]
 8029cec:	fa1f fe82 	uxth.w	lr, r2
 8029cf0:	fa1f f38c 	uxth.w	r3, ip
 8029cf4:	eba3 030e 	sub.w	r3, r3, lr
 8029cf8:	4403      	add	r3, r0
 8029cfa:	0c12      	lsrs	r2, r2, #16
 8029cfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8029d00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8029d04:	b29b      	uxth	r3, r3
 8029d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029d0a:	45c1      	cmp	r9, r8
 8029d0c:	f841 3b04 	str.w	r3, [r1], #4
 8029d10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8029d14:	d2e6      	bcs.n	8029ce4 <quorem+0xa4>
 8029d16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029d1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029d1e:	b922      	cbnz	r2, 8029d2a <quorem+0xea>
 8029d20:	3b04      	subs	r3, #4
 8029d22:	429d      	cmp	r5, r3
 8029d24:	461a      	mov	r2, r3
 8029d26:	d30b      	bcc.n	8029d40 <quorem+0x100>
 8029d28:	613c      	str	r4, [r7, #16]
 8029d2a:	3601      	adds	r6, #1
 8029d2c:	4630      	mov	r0, r6
 8029d2e:	b003      	add	sp, #12
 8029d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d34:	6812      	ldr	r2, [r2, #0]
 8029d36:	3b04      	subs	r3, #4
 8029d38:	2a00      	cmp	r2, #0
 8029d3a:	d1cb      	bne.n	8029cd4 <quorem+0x94>
 8029d3c:	3c01      	subs	r4, #1
 8029d3e:	e7c6      	b.n	8029cce <quorem+0x8e>
 8029d40:	6812      	ldr	r2, [r2, #0]
 8029d42:	3b04      	subs	r3, #4
 8029d44:	2a00      	cmp	r2, #0
 8029d46:	d1ef      	bne.n	8029d28 <quorem+0xe8>
 8029d48:	3c01      	subs	r4, #1
 8029d4a:	e7ea      	b.n	8029d22 <quorem+0xe2>
 8029d4c:	2000      	movs	r0, #0
 8029d4e:	e7ee      	b.n	8029d2e <quorem+0xee>

08029d50 <_dtoa_r>:
 8029d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d54:	ed2d 8b02 	vpush	{d8}
 8029d58:	69c7      	ldr	r7, [r0, #28]
 8029d5a:	b091      	sub	sp, #68	@ 0x44
 8029d5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8029d60:	ec55 4b10 	vmov	r4, r5, d0
 8029d64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8029d66:	9107      	str	r1, [sp, #28]
 8029d68:	4681      	mov	r9, r0
 8029d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8029d6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8029d6e:	b97f      	cbnz	r7, 8029d90 <_dtoa_r+0x40>
 8029d70:	2010      	movs	r0, #16
 8029d72:	f7fc fd67 	bl	8026844 <malloc>
 8029d76:	4602      	mov	r2, r0
 8029d78:	f8c9 001c 	str.w	r0, [r9, #28]
 8029d7c:	b920      	cbnz	r0, 8029d88 <_dtoa_r+0x38>
 8029d7e:	4ba0      	ldr	r3, [pc, #640]	@ (802a000 <_dtoa_r+0x2b0>)
 8029d80:	21ef      	movs	r1, #239	@ 0xef
 8029d82:	48a0      	ldr	r0, [pc, #640]	@ (802a004 <_dtoa_r+0x2b4>)
 8029d84:	f7fc fd1c 	bl	80267c0 <__assert_func>
 8029d88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8029d8c:	6007      	str	r7, [r0, #0]
 8029d8e:	60c7      	str	r7, [r0, #12]
 8029d90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8029d94:	6819      	ldr	r1, [r3, #0]
 8029d96:	b159      	cbz	r1, 8029db0 <_dtoa_r+0x60>
 8029d98:	685a      	ldr	r2, [r3, #4]
 8029d9a:	604a      	str	r2, [r1, #4]
 8029d9c:	2301      	movs	r3, #1
 8029d9e:	4093      	lsls	r3, r2
 8029da0:	608b      	str	r3, [r1, #8]
 8029da2:	4648      	mov	r0, r9
 8029da4:	f001 f94c 	bl	802b040 <_Bfree>
 8029da8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8029dac:	2200      	movs	r2, #0
 8029dae:	601a      	str	r2, [r3, #0]
 8029db0:	1e2b      	subs	r3, r5, #0
 8029db2:	bfbb      	ittet	lt
 8029db4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8029db8:	9303      	strlt	r3, [sp, #12]
 8029dba:	2300      	movge	r3, #0
 8029dbc:	2201      	movlt	r2, #1
 8029dbe:	bfac      	ite	ge
 8029dc0:	6033      	strge	r3, [r6, #0]
 8029dc2:	6032      	strlt	r2, [r6, #0]
 8029dc4:	4b90      	ldr	r3, [pc, #576]	@ (802a008 <_dtoa_r+0x2b8>)
 8029dc6:	9e03      	ldr	r6, [sp, #12]
 8029dc8:	43b3      	bics	r3, r6
 8029dca:	d110      	bne.n	8029dee <_dtoa_r+0x9e>
 8029dcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029dce:	f242 730f 	movw	r3, #9999	@ 0x270f
 8029dd2:	6013      	str	r3, [r2, #0]
 8029dd4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8029dd8:	4323      	orrs	r3, r4
 8029dda:	f000 84e6 	beq.w	802a7aa <_dtoa_r+0xa5a>
 8029dde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029de0:	4f8a      	ldr	r7, [pc, #552]	@ (802a00c <_dtoa_r+0x2bc>)
 8029de2:	2b00      	cmp	r3, #0
 8029de4:	f000 84e8 	beq.w	802a7b8 <_dtoa_r+0xa68>
 8029de8:	1cfb      	adds	r3, r7, #3
 8029dea:	f000 bce3 	b.w	802a7b4 <_dtoa_r+0xa64>
 8029dee:	ed9d 8b02 	vldr	d8, [sp, #8]
 8029df2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8029df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029dfa:	d10a      	bne.n	8029e12 <_dtoa_r+0xc2>
 8029dfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029dfe:	2301      	movs	r3, #1
 8029e00:	6013      	str	r3, [r2, #0]
 8029e02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029e04:	b113      	cbz	r3, 8029e0c <_dtoa_r+0xbc>
 8029e06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8029e08:	4b81      	ldr	r3, [pc, #516]	@ (802a010 <_dtoa_r+0x2c0>)
 8029e0a:	6013      	str	r3, [r2, #0]
 8029e0c:	4f81      	ldr	r7, [pc, #516]	@ (802a014 <_dtoa_r+0x2c4>)
 8029e0e:	f000 bcd3 	b.w	802a7b8 <_dtoa_r+0xa68>
 8029e12:	aa0e      	add	r2, sp, #56	@ 0x38
 8029e14:	a90f      	add	r1, sp, #60	@ 0x3c
 8029e16:	4648      	mov	r0, r9
 8029e18:	eeb0 0b48 	vmov.f64	d0, d8
 8029e1c:	f001 fcac 	bl	802b778 <__d2b>
 8029e20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8029e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029e26:	9001      	str	r0, [sp, #4]
 8029e28:	2b00      	cmp	r3, #0
 8029e2a:	d045      	beq.n	8029eb8 <_dtoa_r+0x168>
 8029e2c:	eeb0 7b48 	vmov.f64	d7, d8
 8029e30:	ee18 1a90 	vmov	r1, s17
 8029e34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8029e38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8029e3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8029e40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8029e44:	2500      	movs	r5, #0
 8029e46:	ee07 1a90 	vmov	s15, r1
 8029e4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8029e4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8029fe8 <_dtoa_r+0x298>
 8029e52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8029e56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8029ff0 <_dtoa_r+0x2a0>
 8029e5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029e5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8029ff8 <_dtoa_r+0x2a8>
 8029e62:	ee07 3a90 	vmov	s15, r3
 8029e66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8029e6a:	eeb0 7b46 	vmov.f64	d7, d6
 8029e6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8029e72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8029e76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8029e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e7e:	ee16 8a90 	vmov	r8, s13
 8029e82:	d508      	bpl.n	8029e96 <_dtoa_r+0x146>
 8029e84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8029e88:	eeb4 6b47 	vcmp.f64	d6, d7
 8029e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e90:	bf18      	it	ne
 8029e92:	f108 38ff 	addne.w	r8, r8, #4294967295
 8029e96:	f1b8 0f16 	cmp.w	r8, #22
 8029e9a:	d82b      	bhi.n	8029ef4 <_dtoa_r+0x1a4>
 8029e9c:	495e      	ldr	r1, [pc, #376]	@ (802a018 <_dtoa_r+0x2c8>)
 8029e9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8029ea2:	ed91 7b00 	vldr	d7, [r1]
 8029ea6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8029eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029eae:	d501      	bpl.n	8029eb4 <_dtoa_r+0x164>
 8029eb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8029eb4:	2100      	movs	r1, #0
 8029eb6:	e01e      	b.n	8029ef6 <_dtoa_r+0x1a6>
 8029eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029eba:	4413      	add	r3, r2
 8029ebc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8029ec0:	2920      	cmp	r1, #32
 8029ec2:	bfc1      	itttt	gt
 8029ec4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8029ec8:	408e      	lslgt	r6, r1
 8029eca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8029ece:	fa24 f101 	lsrgt.w	r1, r4, r1
 8029ed2:	bfd6      	itet	le
 8029ed4:	f1c1 0120 	rsble	r1, r1, #32
 8029ed8:	4331      	orrgt	r1, r6
 8029eda:	fa04 f101 	lslle.w	r1, r4, r1
 8029ede:	ee07 1a90 	vmov	s15, r1
 8029ee2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8029ee6:	3b01      	subs	r3, #1
 8029ee8:	ee17 1a90 	vmov	r1, s15
 8029eec:	2501      	movs	r5, #1
 8029eee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8029ef2:	e7a8      	b.n	8029e46 <_dtoa_r+0xf6>
 8029ef4:	2101      	movs	r1, #1
 8029ef6:	1ad2      	subs	r2, r2, r3
 8029ef8:	1e53      	subs	r3, r2, #1
 8029efa:	9306      	str	r3, [sp, #24]
 8029efc:	bf45      	ittet	mi
 8029efe:	f1c2 0301 	rsbmi	r3, r2, #1
 8029f02:	9304      	strmi	r3, [sp, #16]
 8029f04:	2300      	movpl	r3, #0
 8029f06:	2300      	movmi	r3, #0
 8029f08:	bf4c      	ite	mi
 8029f0a:	9306      	strmi	r3, [sp, #24]
 8029f0c:	9304      	strpl	r3, [sp, #16]
 8029f0e:	f1b8 0f00 	cmp.w	r8, #0
 8029f12:	910c      	str	r1, [sp, #48]	@ 0x30
 8029f14:	db18      	blt.n	8029f48 <_dtoa_r+0x1f8>
 8029f16:	9b06      	ldr	r3, [sp, #24]
 8029f18:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8029f1c:	4443      	add	r3, r8
 8029f1e:	9306      	str	r3, [sp, #24]
 8029f20:	2300      	movs	r3, #0
 8029f22:	9a07      	ldr	r2, [sp, #28]
 8029f24:	2a09      	cmp	r2, #9
 8029f26:	d845      	bhi.n	8029fb4 <_dtoa_r+0x264>
 8029f28:	2a05      	cmp	r2, #5
 8029f2a:	bfc4      	itt	gt
 8029f2c:	3a04      	subgt	r2, #4
 8029f2e:	9207      	strgt	r2, [sp, #28]
 8029f30:	9a07      	ldr	r2, [sp, #28]
 8029f32:	f1a2 0202 	sub.w	r2, r2, #2
 8029f36:	bfcc      	ite	gt
 8029f38:	2400      	movgt	r4, #0
 8029f3a:	2401      	movle	r4, #1
 8029f3c:	2a03      	cmp	r2, #3
 8029f3e:	d844      	bhi.n	8029fca <_dtoa_r+0x27a>
 8029f40:	e8df f002 	tbb	[pc, r2]
 8029f44:	0b173634 	.word	0x0b173634
 8029f48:	9b04      	ldr	r3, [sp, #16]
 8029f4a:	2200      	movs	r2, #0
 8029f4c:	eba3 0308 	sub.w	r3, r3, r8
 8029f50:	9304      	str	r3, [sp, #16]
 8029f52:	920a      	str	r2, [sp, #40]	@ 0x28
 8029f54:	f1c8 0300 	rsb	r3, r8, #0
 8029f58:	e7e3      	b.n	8029f22 <_dtoa_r+0x1d2>
 8029f5a:	2201      	movs	r2, #1
 8029f5c:	9208      	str	r2, [sp, #32]
 8029f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029f60:	eb08 0b02 	add.w	fp, r8, r2
 8029f64:	f10b 0a01 	add.w	sl, fp, #1
 8029f68:	4652      	mov	r2, sl
 8029f6a:	2a01      	cmp	r2, #1
 8029f6c:	bfb8      	it	lt
 8029f6e:	2201      	movlt	r2, #1
 8029f70:	e006      	b.n	8029f80 <_dtoa_r+0x230>
 8029f72:	2201      	movs	r2, #1
 8029f74:	9208      	str	r2, [sp, #32]
 8029f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029f78:	2a00      	cmp	r2, #0
 8029f7a:	dd29      	ble.n	8029fd0 <_dtoa_r+0x280>
 8029f7c:	4693      	mov	fp, r2
 8029f7e:	4692      	mov	sl, r2
 8029f80:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8029f84:	2100      	movs	r1, #0
 8029f86:	2004      	movs	r0, #4
 8029f88:	f100 0614 	add.w	r6, r0, #20
 8029f8c:	4296      	cmp	r6, r2
 8029f8e:	d926      	bls.n	8029fde <_dtoa_r+0x28e>
 8029f90:	6079      	str	r1, [r7, #4]
 8029f92:	4648      	mov	r0, r9
 8029f94:	9305      	str	r3, [sp, #20]
 8029f96:	f001 f813 	bl	802afc0 <_Balloc>
 8029f9a:	9b05      	ldr	r3, [sp, #20]
 8029f9c:	4607      	mov	r7, r0
 8029f9e:	2800      	cmp	r0, #0
 8029fa0:	d13e      	bne.n	802a020 <_dtoa_r+0x2d0>
 8029fa2:	4b1e      	ldr	r3, [pc, #120]	@ (802a01c <_dtoa_r+0x2cc>)
 8029fa4:	4602      	mov	r2, r0
 8029fa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8029faa:	e6ea      	b.n	8029d82 <_dtoa_r+0x32>
 8029fac:	2200      	movs	r2, #0
 8029fae:	e7e1      	b.n	8029f74 <_dtoa_r+0x224>
 8029fb0:	2200      	movs	r2, #0
 8029fb2:	e7d3      	b.n	8029f5c <_dtoa_r+0x20c>
 8029fb4:	2401      	movs	r4, #1
 8029fb6:	2200      	movs	r2, #0
 8029fb8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8029fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8029fc0:	2100      	movs	r1, #0
 8029fc2:	46da      	mov	sl, fp
 8029fc4:	2212      	movs	r2, #18
 8029fc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8029fc8:	e7da      	b.n	8029f80 <_dtoa_r+0x230>
 8029fca:	2201      	movs	r2, #1
 8029fcc:	9208      	str	r2, [sp, #32]
 8029fce:	e7f5      	b.n	8029fbc <_dtoa_r+0x26c>
 8029fd0:	f04f 0b01 	mov.w	fp, #1
 8029fd4:	46da      	mov	sl, fp
 8029fd6:	465a      	mov	r2, fp
 8029fd8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8029fdc:	e7d0      	b.n	8029f80 <_dtoa_r+0x230>
 8029fde:	3101      	adds	r1, #1
 8029fe0:	0040      	lsls	r0, r0, #1
 8029fe2:	e7d1      	b.n	8029f88 <_dtoa_r+0x238>
 8029fe4:	f3af 8000 	nop.w
 8029fe8:	636f4361 	.word	0x636f4361
 8029fec:	3fd287a7 	.word	0x3fd287a7
 8029ff0:	8b60c8b3 	.word	0x8b60c8b3
 8029ff4:	3fc68a28 	.word	0x3fc68a28
 8029ff8:	509f79fb 	.word	0x509f79fb
 8029ffc:	3fd34413 	.word	0x3fd34413
 802a000:	0803e80e 	.word	0x0803e80e
 802a004:	0803ea4e 	.word	0x0803ea4e
 802a008:	7ff00000 	.word	0x7ff00000
 802a00c:	0803ea4a 	.word	0x0803ea4a
 802a010:	0803eb98 	.word	0x0803eb98
 802a014:	0803eb97 	.word	0x0803eb97
 802a018:	0803eeb8 	.word	0x0803eeb8
 802a01c:	0803eaa6 	.word	0x0803eaa6
 802a020:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802a024:	f1ba 0f0e 	cmp.w	sl, #14
 802a028:	6010      	str	r0, [r2, #0]
 802a02a:	d86e      	bhi.n	802a10a <_dtoa_r+0x3ba>
 802a02c:	2c00      	cmp	r4, #0
 802a02e:	d06c      	beq.n	802a10a <_dtoa_r+0x3ba>
 802a030:	f1b8 0f00 	cmp.w	r8, #0
 802a034:	f340 80b4 	ble.w	802a1a0 <_dtoa_r+0x450>
 802a038:	4ac8      	ldr	r2, [pc, #800]	@ (802a35c <_dtoa_r+0x60c>)
 802a03a:	f008 010f 	and.w	r1, r8, #15
 802a03e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802a042:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802a046:	ed92 7b00 	vldr	d7, [r2]
 802a04a:	ea4f 1128 	mov.w	r1, r8, asr #4
 802a04e:	f000 809b 	beq.w	802a188 <_dtoa_r+0x438>
 802a052:	4ac3      	ldr	r2, [pc, #780]	@ (802a360 <_dtoa_r+0x610>)
 802a054:	ed92 6b08 	vldr	d6, [r2, #32]
 802a058:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802a05c:	ed8d 6b02 	vstr	d6, [sp, #8]
 802a060:	f001 010f 	and.w	r1, r1, #15
 802a064:	2203      	movs	r2, #3
 802a066:	48be      	ldr	r0, [pc, #760]	@ (802a360 <_dtoa_r+0x610>)
 802a068:	2900      	cmp	r1, #0
 802a06a:	f040 808f 	bne.w	802a18c <_dtoa_r+0x43c>
 802a06e:	ed9d 6b02 	vldr	d6, [sp, #8]
 802a072:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802a076:	ed8d 7b02 	vstr	d7, [sp, #8]
 802a07a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a07c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802a080:	2900      	cmp	r1, #0
 802a082:	f000 80b3 	beq.w	802a1ec <_dtoa_r+0x49c>
 802a086:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 802a08a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802a08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a092:	f140 80ab 	bpl.w	802a1ec <_dtoa_r+0x49c>
 802a096:	f1ba 0f00 	cmp.w	sl, #0
 802a09a:	f000 80a7 	beq.w	802a1ec <_dtoa_r+0x49c>
 802a09e:	f1bb 0f00 	cmp.w	fp, #0
 802a0a2:	dd30      	ble.n	802a106 <_dtoa_r+0x3b6>
 802a0a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 802a0a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 802a0ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 802a0b0:	f108 31ff 	add.w	r1, r8, #4294967295
 802a0b4:	9105      	str	r1, [sp, #20]
 802a0b6:	3201      	adds	r2, #1
 802a0b8:	465c      	mov	r4, fp
 802a0ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 802a0be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 802a0c2:	ee07 2a90 	vmov	s15, r2
 802a0c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802a0ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 802a0ce:	ee15 2a90 	vmov	r2, s11
 802a0d2:	ec51 0b15 	vmov	r0, r1, d5
 802a0d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 802a0da:	2c00      	cmp	r4, #0
 802a0dc:	f040 808a 	bne.w	802a1f4 <_dtoa_r+0x4a4>
 802a0e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802a0e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 802a0e8:	ec41 0b17 	vmov	d7, r0, r1
 802a0ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a0f4:	f300 826a 	bgt.w	802a5cc <_dtoa_r+0x87c>
 802a0f8:	eeb1 7b47 	vneg.f64	d7, d7
 802a0fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a104:	d423      	bmi.n	802a14e <_dtoa_r+0x3fe>
 802a106:	ed8d 8b02 	vstr	d8, [sp, #8]
 802a10a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a10c:	2a00      	cmp	r2, #0
 802a10e:	f2c0 8129 	blt.w	802a364 <_dtoa_r+0x614>
 802a112:	f1b8 0f0e 	cmp.w	r8, #14
 802a116:	f300 8125 	bgt.w	802a364 <_dtoa_r+0x614>
 802a11a:	4b90      	ldr	r3, [pc, #576]	@ (802a35c <_dtoa_r+0x60c>)
 802a11c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802a120:	ed93 6b00 	vldr	d6, [r3]
 802a124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a126:	2b00      	cmp	r3, #0
 802a128:	f280 80c8 	bge.w	802a2bc <_dtoa_r+0x56c>
 802a12c:	f1ba 0f00 	cmp.w	sl, #0
 802a130:	f300 80c4 	bgt.w	802a2bc <_dtoa_r+0x56c>
 802a134:	d10b      	bne.n	802a14e <_dtoa_r+0x3fe>
 802a136:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802a13a:	ee26 6b07 	vmul.f64	d6, d6, d7
 802a13e:	ed9d 7b02 	vldr	d7, [sp, #8]
 802a142:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a14a:	f2c0 823c 	blt.w	802a5c6 <_dtoa_r+0x876>
 802a14e:	2400      	movs	r4, #0
 802a150:	4625      	mov	r5, r4
 802a152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a154:	43db      	mvns	r3, r3
 802a156:	9305      	str	r3, [sp, #20]
 802a158:	463e      	mov	r6, r7
 802a15a:	f04f 0800 	mov.w	r8, #0
 802a15e:	4621      	mov	r1, r4
 802a160:	4648      	mov	r0, r9
 802a162:	f000 ff6d 	bl	802b040 <_Bfree>
 802a166:	2d00      	cmp	r5, #0
 802a168:	f000 80a2 	beq.w	802a2b0 <_dtoa_r+0x560>
 802a16c:	f1b8 0f00 	cmp.w	r8, #0
 802a170:	d005      	beq.n	802a17e <_dtoa_r+0x42e>
 802a172:	45a8      	cmp	r8, r5
 802a174:	d003      	beq.n	802a17e <_dtoa_r+0x42e>
 802a176:	4641      	mov	r1, r8
 802a178:	4648      	mov	r0, r9
 802a17a:	f000 ff61 	bl	802b040 <_Bfree>
 802a17e:	4629      	mov	r1, r5
 802a180:	4648      	mov	r0, r9
 802a182:	f000 ff5d 	bl	802b040 <_Bfree>
 802a186:	e093      	b.n	802a2b0 <_dtoa_r+0x560>
 802a188:	2202      	movs	r2, #2
 802a18a:	e76c      	b.n	802a066 <_dtoa_r+0x316>
 802a18c:	07cc      	lsls	r4, r1, #31
 802a18e:	d504      	bpl.n	802a19a <_dtoa_r+0x44a>
 802a190:	ed90 6b00 	vldr	d6, [r0]
 802a194:	3201      	adds	r2, #1
 802a196:	ee27 7b06 	vmul.f64	d7, d7, d6
 802a19a:	1049      	asrs	r1, r1, #1
 802a19c:	3008      	adds	r0, #8
 802a19e:	e763      	b.n	802a068 <_dtoa_r+0x318>
 802a1a0:	d022      	beq.n	802a1e8 <_dtoa_r+0x498>
 802a1a2:	f1c8 0100 	rsb	r1, r8, #0
 802a1a6:	4a6d      	ldr	r2, [pc, #436]	@ (802a35c <_dtoa_r+0x60c>)
 802a1a8:	f001 000f 	and.w	r0, r1, #15
 802a1ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802a1b0:	ed92 7b00 	vldr	d7, [r2]
 802a1b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 802a1b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 802a1bc:	4868      	ldr	r0, [pc, #416]	@ (802a360 <_dtoa_r+0x610>)
 802a1be:	1109      	asrs	r1, r1, #4
 802a1c0:	2400      	movs	r4, #0
 802a1c2:	2202      	movs	r2, #2
 802a1c4:	b929      	cbnz	r1, 802a1d2 <_dtoa_r+0x482>
 802a1c6:	2c00      	cmp	r4, #0
 802a1c8:	f43f af57 	beq.w	802a07a <_dtoa_r+0x32a>
 802a1cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 802a1d0:	e753      	b.n	802a07a <_dtoa_r+0x32a>
 802a1d2:	07ce      	lsls	r6, r1, #31
 802a1d4:	d505      	bpl.n	802a1e2 <_dtoa_r+0x492>
 802a1d6:	ed90 6b00 	vldr	d6, [r0]
 802a1da:	3201      	adds	r2, #1
 802a1dc:	2401      	movs	r4, #1
 802a1de:	ee27 7b06 	vmul.f64	d7, d7, d6
 802a1e2:	1049      	asrs	r1, r1, #1
 802a1e4:	3008      	adds	r0, #8
 802a1e6:	e7ed      	b.n	802a1c4 <_dtoa_r+0x474>
 802a1e8:	2202      	movs	r2, #2
 802a1ea:	e746      	b.n	802a07a <_dtoa_r+0x32a>
 802a1ec:	f8cd 8014 	str.w	r8, [sp, #20]
 802a1f0:	4654      	mov	r4, sl
 802a1f2:	e762      	b.n	802a0ba <_dtoa_r+0x36a>
 802a1f4:	4a59      	ldr	r2, [pc, #356]	@ (802a35c <_dtoa_r+0x60c>)
 802a1f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 802a1fa:	ed12 4b02 	vldr	d4, [r2, #-8]
 802a1fe:	9a08      	ldr	r2, [sp, #32]
 802a200:	ec41 0b17 	vmov	d7, r0, r1
 802a204:	443c      	add	r4, r7
 802a206:	b34a      	cbz	r2, 802a25c <_dtoa_r+0x50c>
 802a208:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 802a20c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 802a210:	463e      	mov	r6, r7
 802a212:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802a216:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802a21a:	ee35 7b47 	vsub.f64	d7, d5, d7
 802a21e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802a222:	ee14 2a90 	vmov	r2, s9
 802a226:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802a22a:	3230      	adds	r2, #48	@ 0x30
 802a22c:	ee36 6b45 	vsub.f64	d6, d6, d5
 802a230:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a238:	f806 2b01 	strb.w	r2, [r6], #1
 802a23c:	d438      	bmi.n	802a2b0 <_dtoa_r+0x560>
 802a23e:	ee32 5b46 	vsub.f64	d5, d2, d6
 802a242:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a24a:	d46e      	bmi.n	802a32a <_dtoa_r+0x5da>
 802a24c:	42a6      	cmp	r6, r4
 802a24e:	f43f af5a 	beq.w	802a106 <_dtoa_r+0x3b6>
 802a252:	ee27 7b03 	vmul.f64	d7, d7, d3
 802a256:	ee26 6b03 	vmul.f64	d6, d6, d3
 802a25a:	e7e0      	b.n	802a21e <_dtoa_r+0x4ce>
 802a25c:	4621      	mov	r1, r4
 802a25e:	463e      	mov	r6, r7
 802a260:	ee27 7b04 	vmul.f64	d7, d7, d4
 802a264:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802a268:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802a26c:	ee14 2a90 	vmov	r2, s9
 802a270:	3230      	adds	r2, #48	@ 0x30
 802a272:	f806 2b01 	strb.w	r2, [r6], #1
 802a276:	42a6      	cmp	r6, r4
 802a278:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802a27c:	ee36 6b45 	vsub.f64	d6, d6, d5
 802a280:	d119      	bne.n	802a2b6 <_dtoa_r+0x566>
 802a282:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 802a286:	ee37 4b05 	vadd.f64	d4, d7, d5
 802a28a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802a28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a292:	dc4a      	bgt.n	802a32a <_dtoa_r+0x5da>
 802a294:	ee35 5b47 	vsub.f64	d5, d5, d7
 802a298:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2a0:	f57f af31 	bpl.w	802a106 <_dtoa_r+0x3b6>
 802a2a4:	460e      	mov	r6, r1
 802a2a6:	3901      	subs	r1, #1
 802a2a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802a2ac:	2b30      	cmp	r3, #48	@ 0x30
 802a2ae:	d0f9      	beq.n	802a2a4 <_dtoa_r+0x554>
 802a2b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802a2b4:	e027      	b.n	802a306 <_dtoa_r+0x5b6>
 802a2b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 802a2ba:	e7d5      	b.n	802a268 <_dtoa_r+0x518>
 802a2bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 802a2c0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 802a2c4:	463e      	mov	r6, r7
 802a2c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802a2ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802a2ce:	ee15 3a10 	vmov	r3, s10
 802a2d2:	3330      	adds	r3, #48	@ 0x30
 802a2d4:	f806 3b01 	strb.w	r3, [r6], #1
 802a2d8:	1bf3      	subs	r3, r6, r7
 802a2da:	459a      	cmp	sl, r3
 802a2dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802a2e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 802a2e4:	d132      	bne.n	802a34c <_dtoa_r+0x5fc>
 802a2e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 802a2ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802a2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2f2:	dc18      	bgt.n	802a326 <_dtoa_r+0x5d6>
 802a2f4:	eeb4 7b46 	vcmp.f64	d7, d6
 802a2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2fc:	d103      	bne.n	802a306 <_dtoa_r+0x5b6>
 802a2fe:	ee15 3a10 	vmov	r3, s10
 802a302:	07db      	lsls	r3, r3, #31
 802a304:	d40f      	bmi.n	802a326 <_dtoa_r+0x5d6>
 802a306:	9901      	ldr	r1, [sp, #4]
 802a308:	4648      	mov	r0, r9
 802a30a:	f000 fe99 	bl	802b040 <_Bfree>
 802a30e:	2300      	movs	r3, #0
 802a310:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a312:	7033      	strb	r3, [r6, #0]
 802a314:	f108 0301 	add.w	r3, r8, #1
 802a318:	6013      	str	r3, [r2, #0]
 802a31a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a31c:	2b00      	cmp	r3, #0
 802a31e:	f000 824b 	beq.w	802a7b8 <_dtoa_r+0xa68>
 802a322:	601e      	str	r6, [r3, #0]
 802a324:	e248      	b.n	802a7b8 <_dtoa_r+0xa68>
 802a326:	f8cd 8014 	str.w	r8, [sp, #20]
 802a32a:	4633      	mov	r3, r6
 802a32c:	461e      	mov	r6, r3
 802a32e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a332:	2a39      	cmp	r2, #57	@ 0x39
 802a334:	d106      	bne.n	802a344 <_dtoa_r+0x5f4>
 802a336:	429f      	cmp	r7, r3
 802a338:	d1f8      	bne.n	802a32c <_dtoa_r+0x5dc>
 802a33a:	9a05      	ldr	r2, [sp, #20]
 802a33c:	3201      	adds	r2, #1
 802a33e:	9205      	str	r2, [sp, #20]
 802a340:	2230      	movs	r2, #48	@ 0x30
 802a342:	703a      	strb	r2, [r7, #0]
 802a344:	781a      	ldrb	r2, [r3, #0]
 802a346:	3201      	adds	r2, #1
 802a348:	701a      	strb	r2, [r3, #0]
 802a34a:	e7b1      	b.n	802a2b0 <_dtoa_r+0x560>
 802a34c:	ee27 7b04 	vmul.f64	d7, d7, d4
 802a350:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802a354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a358:	d1b5      	bne.n	802a2c6 <_dtoa_r+0x576>
 802a35a:	e7d4      	b.n	802a306 <_dtoa_r+0x5b6>
 802a35c:	0803eeb8 	.word	0x0803eeb8
 802a360:	0803ee90 	.word	0x0803ee90
 802a364:	9908      	ldr	r1, [sp, #32]
 802a366:	2900      	cmp	r1, #0
 802a368:	f000 80e9 	beq.w	802a53e <_dtoa_r+0x7ee>
 802a36c:	9907      	ldr	r1, [sp, #28]
 802a36e:	2901      	cmp	r1, #1
 802a370:	f300 80cb 	bgt.w	802a50a <_dtoa_r+0x7ba>
 802a374:	2d00      	cmp	r5, #0
 802a376:	f000 80c4 	beq.w	802a502 <_dtoa_r+0x7b2>
 802a37a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802a37e:	9e04      	ldr	r6, [sp, #16]
 802a380:	461c      	mov	r4, r3
 802a382:	9305      	str	r3, [sp, #20]
 802a384:	9b04      	ldr	r3, [sp, #16]
 802a386:	4413      	add	r3, r2
 802a388:	9304      	str	r3, [sp, #16]
 802a38a:	9b06      	ldr	r3, [sp, #24]
 802a38c:	2101      	movs	r1, #1
 802a38e:	4413      	add	r3, r2
 802a390:	4648      	mov	r0, r9
 802a392:	9306      	str	r3, [sp, #24]
 802a394:	f000 ff52 	bl	802b23c <__i2b>
 802a398:	9b05      	ldr	r3, [sp, #20]
 802a39a:	4605      	mov	r5, r0
 802a39c:	b166      	cbz	r6, 802a3b8 <_dtoa_r+0x668>
 802a39e:	9a06      	ldr	r2, [sp, #24]
 802a3a0:	2a00      	cmp	r2, #0
 802a3a2:	dd09      	ble.n	802a3b8 <_dtoa_r+0x668>
 802a3a4:	42b2      	cmp	r2, r6
 802a3a6:	9904      	ldr	r1, [sp, #16]
 802a3a8:	bfa8      	it	ge
 802a3aa:	4632      	movge	r2, r6
 802a3ac:	1a89      	subs	r1, r1, r2
 802a3ae:	9104      	str	r1, [sp, #16]
 802a3b0:	9906      	ldr	r1, [sp, #24]
 802a3b2:	1ab6      	subs	r6, r6, r2
 802a3b4:	1a8a      	subs	r2, r1, r2
 802a3b6:	9206      	str	r2, [sp, #24]
 802a3b8:	b30b      	cbz	r3, 802a3fe <_dtoa_r+0x6ae>
 802a3ba:	9a08      	ldr	r2, [sp, #32]
 802a3bc:	2a00      	cmp	r2, #0
 802a3be:	f000 80c5 	beq.w	802a54c <_dtoa_r+0x7fc>
 802a3c2:	2c00      	cmp	r4, #0
 802a3c4:	f000 80bf 	beq.w	802a546 <_dtoa_r+0x7f6>
 802a3c8:	4629      	mov	r1, r5
 802a3ca:	4622      	mov	r2, r4
 802a3cc:	4648      	mov	r0, r9
 802a3ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a3d0:	f000 ffec 	bl	802b3ac <__pow5mult>
 802a3d4:	9a01      	ldr	r2, [sp, #4]
 802a3d6:	4601      	mov	r1, r0
 802a3d8:	4605      	mov	r5, r0
 802a3da:	4648      	mov	r0, r9
 802a3dc:	f000 ff44 	bl	802b268 <__multiply>
 802a3e0:	9901      	ldr	r1, [sp, #4]
 802a3e2:	9005      	str	r0, [sp, #20]
 802a3e4:	4648      	mov	r0, r9
 802a3e6:	f000 fe2b 	bl	802b040 <_Bfree>
 802a3ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a3ec:	1b1b      	subs	r3, r3, r4
 802a3ee:	f000 80b0 	beq.w	802a552 <_dtoa_r+0x802>
 802a3f2:	9905      	ldr	r1, [sp, #20]
 802a3f4:	461a      	mov	r2, r3
 802a3f6:	4648      	mov	r0, r9
 802a3f8:	f000 ffd8 	bl	802b3ac <__pow5mult>
 802a3fc:	9001      	str	r0, [sp, #4]
 802a3fe:	2101      	movs	r1, #1
 802a400:	4648      	mov	r0, r9
 802a402:	f000 ff1b 	bl	802b23c <__i2b>
 802a406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a408:	4604      	mov	r4, r0
 802a40a:	2b00      	cmp	r3, #0
 802a40c:	f000 81da 	beq.w	802a7c4 <_dtoa_r+0xa74>
 802a410:	461a      	mov	r2, r3
 802a412:	4601      	mov	r1, r0
 802a414:	4648      	mov	r0, r9
 802a416:	f000 ffc9 	bl	802b3ac <__pow5mult>
 802a41a:	9b07      	ldr	r3, [sp, #28]
 802a41c:	2b01      	cmp	r3, #1
 802a41e:	4604      	mov	r4, r0
 802a420:	f300 80a0 	bgt.w	802a564 <_dtoa_r+0x814>
 802a424:	9b02      	ldr	r3, [sp, #8]
 802a426:	2b00      	cmp	r3, #0
 802a428:	f040 8096 	bne.w	802a558 <_dtoa_r+0x808>
 802a42c:	9b03      	ldr	r3, [sp, #12]
 802a42e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802a432:	2a00      	cmp	r2, #0
 802a434:	f040 8092 	bne.w	802a55c <_dtoa_r+0x80c>
 802a438:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 802a43c:	0d12      	lsrs	r2, r2, #20
 802a43e:	0512      	lsls	r2, r2, #20
 802a440:	2a00      	cmp	r2, #0
 802a442:	f000 808d 	beq.w	802a560 <_dtoa_r+0x810>
 802a446:	9b04      	ldr	r3, [sp, #16]
 802a448:	3301      	adds	r3, #1
 802a44a:	9304      	str	r3, [sp, #16]
 802a44c:	9b06      	ldr	r3, [sp, #24]
 802a44e:	3301      	adds	r3, #1
 802a450:	9306      	str	r3, [sp, #24]
 802a452:	2301      	movs	r3, #1
 802a454:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a458:	2b00      	cmp	r3, #0
 802a45a:	f000 81b9 	beq.w	802a7d0 <_dtoa_r+0xa80>
 802a45e:	6922      	ldr	r2, [r4, #16]
 802a460:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802a464:	6910      	ldr	r0, [r2, #16]
 802a466:	f000 fe9d 	bl	802b1a4 <__hi0bits>
 802a46a:	f1c0 0020 	rsb	r0, r0, #32
 802a46e:	9b06      	ldr	r3, [sp, #24]
 802a470:	4418      	add	r0, r3
 802a472:	f010 001f 	ands.w	r0, r0, #31
 802a476:	f000 8081 	beq.w	802a57c <_dtoa_r+0x82c>
 802a47a:	f1c0 0220 	rsb	r2, r0, #32
 802a47e:	2a04      	cmp	r2, #4
 802a480:	dd73      	ble.n	802a56a <_dtoa_r+0x81a>
 802a482:	9b04      	ldr	r3, [sp, #16]
 802a484:	f1c0 001c 	rsb	r0, r0, #28
 802a488:	4403      	add	r3, r0
 802a48a:	9304      	str	r3, [sp, #16]
 802a48c:	9b06      	ldr	r3, [sp, #24]
 802a48e:	4406      	add	r6, r0
 802a490:	4403      	add	r3, r0
 802a492:	9306      	str	r3, [sp, #24]
 802a494:	9b04      	ldr	r3, [sp, #16]
 802a496:	2b00      	cmp	r3, #0
 802a498:	dd05      	ble.n	802a4a6 <_dtoa_r+0x756>
 802a49a:	9901      	ldr	r1, [sp, #4]
 802a49c:	461a      	mov	r2, r3
 802a49e:	4648      	mov	r0, r9
 802a4a0:	f000 ffde 	bl	802b460 <__lshift>
 802a4a4:	9001      	str	r0, [sp, #4]
 802a4a6:	9b06      	ldr	r3, [sp, #24]
 802a4a8:	2b00      	cmp	r3, #0
 802a4aa:	dd05      	ble.n	802a4b8 <_dtoa_r+0x768>
 802a4ac:	4621      	mov	r1, r4
 802a4ae:	461a      	mov	r2, r3
 802a4b0:	4648      	mov	r0, r9
 802a4b2:	f000 ffd5 	bl	802b460 <__lshift>
 802a4b6:	4604      	mov	r4, r0
 802a4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a4ba:	2b00      	cmp	r3, #0
 802a4bc:	d060      	beq.n	802a580 <_dtoa_r+0x830>
 802a4be:	9801      	ldr	r0, [sp, #4]
 802a4c0:	4621      	mov	r1, r4
 802a4c2:	f001 f839 	bl	802b538 <__mcmp>
 802a4c6:	2800      	cmp	r0, #0
 802a4c8:	da5a      	bge.n	802a580 <_dtoa_r+0x830>
 802a4ca:	f108 33ff 	add.w	r3, r8, #4294967295
 802a4ce:	9305      	str	r3, [sp, #20]
 802a4d0:	9901      	ldr	r1, [sp, #4]
 802a4d2:	2300      	movs	r3, #0
 802a4d4:	220a      	movs	r2, #10
 802a4d6:	4648      	mov	r0, r9
 802a4d8:	f000 fdd4 	bl	802b084 <__multadd>
 802a4dc:	9b08      	ldr	r3, [sp, #32]
 802a4de:	9001      	str	r0, [sp, #4]
 802a4e0:	2b00      	cmp	r3, #0
 802a4e2:	f000 8177 	beq.w	802a7d4 <_dtoa_r+0xa84>
 802a4e6:	4629      	mov	r1, r5
 802a4e8:	2300      	movs	r3, #0
 802a4ea:	220a      	movs	r2, #10
 802a4ec:	4648      	mov	r0, r9
 802a4ee:	f000 fdc9 	bl	802b084 <__multadd>
 802a4f2:	f1bb 0f00 	cmp.w	fp, #0
 802a4f6:	4605      	mov	r5, r0
 802a4f8:	dc6e      	bgt.n	802a5d8 <_dtoa_r+0x888>
 802a4fa:	9b07      	ldr	r3, [sp, #28]
 802a4fc:	2b02      	cmp	r3, #2
 802a4fe:	dc48      	bgt.n	802a592 <_dtoa_r+0x842>
 802a500:	e06a      	b.n	802a5d8 <_dtoa_r+0x888>
 802a502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a504:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802a508:	e739      	b.n	802a37e <_dtoa_r+0x62e>
 802a50a:	f10a 34ff 	add.w	r4, sl, #4294967295
 802a50e:	42a3      	cmp	r3, r4
 802a510:	db07      	blt.n	802a522 <_dtoa_r+0x7d2>
 802a512:	f1ba 0f00 	cmp.w	sl, #0
 802a516:	eba3 0404 	sub.w	r4, r3, r4
 802a51a:	db0b      	blt.n	802a534 <_dtoa_r+0x7e4>
 802a51c:	9e04      	ldr	r6, [sp, #16]
 802a51e:	4652      	mov	r2, sl
 802a520:	e72f      	b.n	802a382 <_dtoa_r+0x632>
 802a522:	1ae2      	subs	r2, r4, r3
 802a524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a526:	9e04      	ldr	r6, [sp, #16]
 802a528:	4413      	add	r3, r2
 802a52a:	930a      	str	r3, [sp, #40]	@ 0x28
 802a52c:	4652      	mov	r2, sl
 802a52e:	4623      	mov	r3, r4
 802a530:	2400      	movs	r4, #0
 802a532:	e726      	b.n	802a382 <_dtoa_r+0x632>
 802a534:	9a04      	ldr	r2, [sp, #16]
 802a536:	eba2 060a 	sub.w	r6, r2, sl
 802a53a:	2200      	movs	r2, #0
 802a53c:	e721      	b.n	802a382 <_dtoa_r+0x632>
 802a53e:	9e04      	ldr	r6, [sp, #16]
 802a540:	9d08      	ldr	r5, [sp, #32]
 802a542:	461c      	mov	r4, r3
 802a544:	e72a      	b.n	802a39c <_dtoa_r+0x64c>
 802a546:	9a01      	ldr	r2, [sp, #4]
 802a548:	9205      	str	r2, [sp, #20]
 802a54a:	e752      	b.n	802a3f2 <_dtoa_r+0x6a2>
 802a54c:	9901      	ldr	r1, [sp, #4]
 802a54e:	461a      	mov	r2, r3
 802a550:	e751      	b.n	802a3f6 <_dtoa_r+0x6a6>
 802a552:	9b05      	ldr	r3, [sp, #20]
 802a554:	9301      	str	r3, [sp, #4]
 802a556:	e752      	b.n	802a3fe <_dtoa_r+0x6ae>
 802a558:	2300      	movs	r3, #0
 802a55a:	e77b      	b.n	802a454 <_dtoa_r+0x704>
 802a55c:	9b02      	ldr	r3, [sp, #8]
 802a55e:	e779      	b.n	802a454 <_dtoa_r+0x704>
 802a560:	920b      	str	r2, [sp, #44]	@ 0x2c
 802a562:	e778      	b.n	802a456 <_dtoa_r+0x706>
 802a564:	2300      	movs	r3, #0
 802a566:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a568:	e779      	b.n	802a45e <_dtoa_r+0x70e>
 802a56a:	d093      	beq.n	802a494 <_dtoa_r+0x744>
 802a56c:	9b04      	ldr	r3, [sp, #16]
 802a56e:	321c      	adds	r2, #28
 802a570:	4413      	add	r3, r2
 802a572:	9304      	str	r3, [sp, #16]
 802a574:	9b06      	ldr	r3, [sp, #24]
 802a576:	4416      	add	r6, r2
 802a578:	4413      	add	r3, r2
 802a57a:	e78a      	b.n	802a492 <_dtoa_r+0x742>
 802a57c:	4602      	mov	r2, r0
 802a57e:	e7f5      	b.n	802a56c <_dtoa_r+0x81c>
 802a580:	f1ba 0f00 	cmp.w	sl, #0
 802a584:	f8cd 8014 	str.w	r8, [sp, #20]
 802a588:	46d3      	mov	fp, sl
 802a58a:	dc21      	bgt.n	802a5d0 <_dtoa_r+0x880>
 802a58c:	9b07      	ldr	r3, [sp, #28]
 802a58e:	2b02      	cmp	r3, #2
 802a590:	dd1e      	ble.n	802a5d0 <_dtoa_r+0x880>
 802a592:	f1bb 0f00 	cmp.w	fp, #0
 802a596:	f47f addc 	bne.w	802a152 <_dtoa_r+0x402>
 802a59a:	4621      	mov	r1, r4
 802a59c:	465b      	mov	r3, fp
 802a59e:	2205      	movs	r2, #5
 802a5a0:	4648      	mov	r0, r9
 802a5a2:	f000 fd6f 	bl	802b084 <__multadd>
 802a5a6:	4601      	mov	r1, r0
 802a5a8:	4604      	mov	r4, r0
 802a5aa:	9801      	ldr	r0, [sp, #4]
 802a5ac:	f000 ffc4 	bl	802b538 <__mcmp>
 802a5b0:	2800      	cmp	r0, #0
 802a5b2:	f77f adce 	ble.w	802a152 <_dtoa_r+0x402>
 802a5b6:	463e      	mov	r6, r7
 802a5b8:	2331      	movs	r3, #49	@ 0x31
 802a5ba:	f806 3b01 	strb.w	r3, [r6], #1
 802a5be:	9b05      	ldr	r3, [sp, #20]
 802a5c0:	3301      	adds	r3, #1
 802a5c2:	9305      	str	r3, [sp, #20]
 802a5c4:	e5c9      	b.n	802a15a <_dtoa_r+0x40a>
 802a5c6:	f8cd 8014 	str.w	r8, [sp, #20]
 802a5ca:	4654      	mov	r4, sl
 802a5cc:	4625      	mov	r5, r4
 802a5ce:	e7f2      	b.n	802a5b6 <_dtoa_r+0x866>
 802a5d0:	9b08      	ldr	r3, [sp, #32]
 802a5d2:	2b00      	cmp	r3, #0
 802a5d4:	f000 8102 	beq.w	802a7dc <_dtoa_r+0xa8c>
 802a5d8:	2e00      	cmp	r6, #0
 802a5da:	dd05      	ble.n	802a5e8 <_dtoa_r+0x898>
 802a5dc:	4629      	mov	r1, r5
 802a5de:	4632      	mov	r2, r6
 802a5e0:	4648      	mov	r0, r9
 802a5e2:	f000 ff3d 	bl	802b460 <__lshift>
 802a5e6:	4605      	mov	r5, r0
 802a5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	d058      	beq.n	802a6a0 <_dtoa_r+0x950>
 802a5ee:	6869      	ldr	r1, [r5, #4]
 802a5f0:	4648      	mov	r0, r9
 802a5f2:	f000 fce5 	bl	802afc0 <_Balloc>
 802a5f6:	4606      	mov	r6, r0
 802a5f8:	b928      	cbnz	r0, 802a606 <_dtoa_r+0x8b6>
 802a5fa:	4b82      	ldr	r3, [pc, #520]	@ (802a804 <_dtoa_r+0xab4>)
 802a5fc:	4602      	mov	r2, r0
 802a5fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802a602:	f7ff bbbe 	b.w	8029d82 <_dtoa_r+0x32>
 802a606:	692a      	ldr	r2, [r5, #16]
 802a608:	3202      	adds	r2, #2
 802a60a:	0092      	lsls	r2, r2, #2
 802a60c:	f105 010c 	add.w	r1, r5, #12
 802a610:	300c      	adds	r0, #12
 802a612:	f7ff faf4 	bl	8029bfe <memcpy>
 802a616:	2201      	movs	r2, #1
 802a618:	4631      	mov	r1, r6
 802a61a:	4648      	mov	r0, r9
 802a61c:	f000 ff20 	bl	802b460 <__lshift>
 802a620:	1c7b      	adds	r3, r7, #1
 802a622:	9304      	str	r3, [sp, #16]
 802a624:	eb07 030b 	add.w	r3, r7, fp
 802a628:	9309      	str	r3, [sp, #36]	@ 0x24
 802a62a:	9b02      	ldr	r3, [sp, #8]
 802a62c:	f003 0301 	and.w	r3, r3, #1
 802a630:	46a8      	mov	r8, r5
 802a632:	9308      	str	r3, [sp, #32]
 802a634:	4605      	mov	r5, r0
 802a636:	9b04      	ldr	r3, [sp, #16]
 802a638:	9801      	ldr	r0, [sp, #4]
 802a63a:	4621      	mov	r1, r4
 802a63c:	f103 3bff 	add.w	fp, r3, #4294967295
 802a640:	f7ff fafe 	bl	8029c40 <quorem>
 802a644:	4641      	mov	r1, r8
 802a646:	9002      	str	r0, [sp, #8]
 802a648:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802a64c:	9801      	ldr	r0, [sp, #4]
 802a64e:	f000 ff73 	bl	802b538 <__mcmp>
 802a652:	462a      	mov	r2, r5
 802a654:	9006      	str	r0, [sp, #24]
 802a656:	4621      	mov	r1, r4
 802a658:	4648      	mov	r0, r9
 802a65a:	f000 ff89 	bl	802b570 <__mdiff>
 802a65e:	68c2      	ldr	r2, [r0, #12]
 802a660:	4606      	mov	r6, r0
 802a662:	b9fa      	cbnz	r2, 802a6a4 <_dtoa_r+0x954>
 802a664:	4601      	mov	r1, r0
 802a666:	9801      	ldr	r0, [sp, #4]
 802a668:	f000 ff66 	bl	802b538 <__mcmp>
 802a66c:	4602      	mov	r2, r0
 802a66e:	4631      	mov	r1, r6
 802a670:	4648      	mov	r0, r9
 802a672:	920a      	str	r2, [sp, #40]	@ 0x28
 802a674:	f000 fce4 	bl	802b040 <_Bfree>
 802a678:	9b07      	ldr	r3, [sp, #28]
 802a67a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a67c:	9e04      	ldr	r6, [sp, #16]
 802a67e:	ea42 0103 	orr.w	r1, r2, r3
 802a682:	9b08      	ldr	r3, [sp, #32]
 802a684:	4319      	orrs	r1, r3
 802a686:	d10f      	bne.n	802a6a8 <_dtoa_r+0x958>
 802a688:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a68c:	d028      	beq.n	802a6e0 <_dtoa_r+0x990>
 802a68e:	9b06      	ldr	r3, [sp, #24]
 802a690:	2b00      	cmp	r3, #0
 802a692:	dd02      	ble.n	802a69a <_dtoa_r+0x94a>
 802a694:	9b02      	ldr	r3, [sp, #8]
 802a696:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 802a69a:	f88b a000 	strb.w	sl, [fp]
 802a69e:	e55e      	b.n	802a15e <_dtoa_r+0x40e>
 802a6a0:	4628      	mov	r0, r5
 802a6a2:	e7bd      	b.n	802a620 <_dtoa_r+0x8d0>
 802a6a4:	2201      	movs	r2, #1
 802a6a6:	e7e2      	b.n	802a66e <_dtoa_r+0x91e>
 802a6a8:	9b06      	ldr	r3, [sp, #24]
 802a6aa:	2b00      	cmp	r3, #0
 802a6ac:	db04      	blt.n	802a6b8 <_dtoa_r+0x968>
 802a6ae:	9907      	ldr	r1, [sp, #28]
 802a6b0:	430b      	orrs	r3, r1
 802a6b2:	9908      	ldr	r1, [sp, #32]
 802a6b4:	430b      	orrs	r3, r1
 802a6b6:	d120      	bne.n	802a6fa <_dtoa_r+0x9aa>
 802a6b8:	2a00      	cmp	r2, #0
 802a6ba:	ddee      	ble.n	802a69a <_dtoa_r+0x94a>
 802a6bc:	9901      	ldr	r1, [sp, #4]
 802a6be:	2201      	movs	r2, #1
 802a6c0:	4648      	mov	r0, r9
 802a6c2:	f000 fecd 	bl	802b460 <__lshift>
 802a6c6:	4621      	mov	r1, r4
 802a6c8:	9001      	str	r0, [sp, #4]
 802a6ca:	f000 ff35 	bl	802b538 <__mcmp>
 802a6ce:	2800      	cmp	r0, #0
 802a6d0:	dc03      	bgt.n	802a6da <_dtoa_r+0x98a>
 802a6d2:	d1e2      	bne.n	802a69a <_dtoa_r+0x94a>
 802a6d4:	f01a 0f01 	tst.w	sl, #1
 802a6d8:	d0df      	beq.n	802a69a <_dtoa_r+0x94a>
 802a6da:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a6de:	d1d9      	bne.n	802a694 <_dtoa_r+0x944>
 802a6e0:	2339      	movs	r3, #57	@ 0x39
 802a6e2:	f88b 3000 	strb.w	r3, [fp]
 802a6e6:	4633      	mov	r3, r6
 802a6e8:	461e      	mov	r6, r3
 802a6ea:	3b01      	subs	r3, #1
 802a6ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802a6f0:	2a39      	cmp	r2, #57	@ 0x39
 802a6f2:	d052      	beq.n	802a79a <_dtoa_r+0xa4a>
 802a6f4:	3201      	adds	r2, #1
 802a6f6:	701a      	strb	r2, [r3, #0]
 802a6f8:	e531      	b.n	802a15e <_dtoa_r+0x40e>
 802a6fa:	2a00      	cmp	r2, #0
 802a6fc:	dd07      	ble.n	802a70e <_dtoa_r+0x9be>
 802a6fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 802a702:	d0ed      	beq.n	802a6e0 <_dtoa_r+0x990>
 802a704:	f10a 0301 	add.w	r3, sl, #1
 802a708:	f88b 3000 	strb.w	r3, [fp]
 802a70c:	e527      	b.n	802a15e <_dtoa_r+0x40e>
 802a70e:	9b04      	ldr	r3, [sp, #16]
 802a710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a712:	f803 ac01 	strb.w	sl, [r3, #-1]
 802a716:	4293      	cmp	r3, r2
 802a718:	d029      	beq.n	802a76e <_dtoa_r+0xa1e>
 802a71a:	9901      	ldr	r1, [sp, #4]
 802a71c:	2300      	movs	r3, #0
 802a71e:	220a      	movs	r2, #10
 802a720:	4648      	mov	r0, r9
 802a722:	f000 fcaf 	bl	802b084 <__multadd>
 802a726:	45a8      	cmp	r8, r5
 802a728:	9001      	str	r0, [sp, #4]
 802a72a:	f04f 0300 	mov.w	r3, #0
 802a72e:	f04f 020a 	mov.w	r2, #10
 802a732:	4641      	mov	r1, r8
 802a734:	4648      	mov	r0, r9
 802a736:	d107      	bne.n	802a748 <_dtoa_r+0x9f8>
 802a738:	f000 fca4 	bl	802b084 <__multadd>
 802a73c:	4680      	mov	r8, r0
 802a73e:	4605      	mov	r5, r0
 802a740:	9b04      	ldr	r3, [sp, #16]
 802a742:	3301      	adds	r3, #1
 802a744:	9304      	str	r3, [sp, #16]
 802a746:	e776      	b.n	802a636 <_dtoa_r+0x8e6>
 802a748:	f000 fc9c 	bl	802b084 <__multadd>
 802a74c:	4629      	mov	r1, r5
 802a74e:	4680      	mov	r8, r0
 802a750:	2300      	movs	r3, #0
 802a752:	220a      	movs	r2, #10
 802a754:	4648      	mov	r0, r9
 802a756:	f000 fc95 	bl	802b084 <__multadd>
 802a75a:	4605      	mov	r5, r0
 802a75c:	e7f0      	b.n	802a740 <_dtoa_r+0x9f0>
 802a75e:	f1bb 0f00 	cmp.w	fp, #0
 802a762:	bfcc      	ite	gt
 802a764:	465e      	movgt	r6, fp
 802a766:	2601      	movle	r6, #1
 802a768:	443e      	add	r6, r7
 802a76a:	f04f 0800 	mov.w	r8, #0
 802a76e:	9901      	ldr	r1, [sp, #4]
 802a770:	2201      	movs	r2, #1
 802a772:	4648      	mov	r0, r9
 802a774:	f000 fe74 	bl	802b460 <__lshift>
 802a778:	4621      	mov	r1, r4
 802a77a:	9001      	str	r0, [sp, #4]
 802a77c:	f000 fedc 	bl	802b538 <__mcmp>
 802a780:	2800      	cmp	r0, #0
 802a782:	dcb0      	bgt.n	802a6e6 <_dtoa_r+0x996>
 802a784:	d102      	bne.n	802a78c <_dtoa_r+0xa3c>
 802a786:	f01a 0f01 	tst.w	sl, #1
 802a78a:	d1ac      	bne.n	802a6e6 <_dtoa_r+0x996>
 802a78c:	4633      	mov	r3, r6
 802a78e:	461e      	mov	r6, r3
 802a790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a794:	2a30      	cmp	r2, #48	@ 0x30
 802a796:	d0fa      	beq.n	802a78e <_dtoa_r+0xa3e>
 802a798:	e4e1      	b.n	802a15e <_dtoa_r+0x40e>
 802a79a:	429f      	cmp	r7, r3
 802a79c:	d1a4      	bne.n	802a6e8 <_dtoa_r+0x998>
 802a79e:	9b05      	ldr	r3, [sp, #20]
 802a7a0:	3301      	adds	r3, #1
 802a7a2:	9305      	str	r3, [sp, #20]
 802a7a4:	2331      	movs	r3, #49	@ 0x31
 802a7a6:	703b      	strb	r3, [r7, #0]
 802a7a8:	e4d9      	b.n	802a15e <_dtoa_r+0x40e>
 802a7aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a7ac:	4f16      	ldr	r7, [pc, #88]	@ (802a808 <_dtoa_r+0xab8>)
 802a7ae:	b11b      	cbz	r3, 802a7b8 <_dtoa_r+0xa68>
 802a7b0:	f107 0308 	add.w	r3, r7, #8
 802a7b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802a7b6:	6013      	str	r3, [r2, #0]
 802a7b8:	4638      	mov	r0, r7
 802a7ba:	b011      	add	sp, #68	@ 0x44
 802a7bc:	ecbd 8b02 	vpop	{d8}
 802a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7c4:	9b07      	ldr	r3, [sp, #28]
 802a7c6:	2b01      	cmp	r3, #1
 802a7c8:	f77f ae2c 	ble.w	802a424 <_dtoa_r+0x6d4>
 802a7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a7ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a7d0:	2001      	movs	r0, #1
 802a7d2:	e64c      	b.n	802a46e <_dtoa_r+0x71e>
 802a7d4:	f1bb 0f00 	cmp.w	fp, #0
 802a7d8:	f77f aed8 	ble.w	802a58c <_dtoa_r+0x83c>
 802a7dc:	463e      	mov	r6, r7
 802a7de:	9801      	ldr	r0, [sp, #4]
 802a7e0:	4621      	mov	r1, r4
 802a7e2:	f7ff fa2d 	bl	8029c40 <quorem>
 802a7e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 802a7ea:	f806 ab01 	strb.w	sl, [r6], #1
 802a7ee:	1bf2      	subs	r2, r6, r7
 802a7f0:	4593      	cmp	fp, r2
 802a7f2:	ddb4      	ble.n	802a75e <_dtoa_r+0xa0e>
 802a7f4:	9901      	ldr	r1, [sp, #4]
 802a7f6:	2300      	movs	r3, #0
 802a7f8:	220a      	movs	r2, #10
 802a7fa:	4648      	mov	r0, r9
 802a7fc:	f000 fc42 	bl	802b084 <__multadd>
 802a800:	9001      	str	r0, [sp, #4]
 802a802:	e7ec      	b.n	802a7de <_dtoa_r+0xa8e>
 802a804:	0803eaa6 	.word	0x0803eaa6
 802a808:	0803ea41 	.word	0x0803ea41

0802a80c <_free_r>:
 802a80c:	b538      	push	{r3, r4, r5, lr}
 802a80e:	4605      	mov	r5, r0
 802a810:	2900      	cmp	r1, #0
 802a812:	d041      	beq.n	802a898 <_free_r+0x8c>
 802a814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a818:	1f0c      	subs	r4, r1, #4
 802a81a:	2b00      	cmp	r3, #0
 802a81c:	bfb8      	it	lt
 802a81e:	18e4      	addlt	r4, r4, r3
 802a820:	f7fc f8c2 	bl	80269a8 <__malloc_lock>
 802a824:	4a1d      	ldr	r2, [pc, #116]	@ (802a89c <_free_r+0x90>)
 802a826:	6813      	ldr	r3, [r2, #0]
 802a828:	b933      	cbnz	r3, 802a838 <_free_r+0x2c>
 802a82a:	6063      	str	r3, [r4, #4]
 802a82c:	6014      	str	r4, [r2, #0]
 802a82e:	4628      	mov	r0, r5
 802a830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a834:	f7fc b8be 	b.w	80269b4 <__malloc_unlock>
 802a838:	42a3      	cmp	r3, r4
 802a83a:	d908      	bls.n	802a84e <_free_r+0x42>
 802a83c:	6820      	ldr	r0, [r4, #0]
 802a83e:	1821      	adds	r1, r4, r0
 802a840:	428b      	cmp	r3, r1
 802a842:	bf01      	itttt	eq
 802a844:	6819      	ldreq	r1, [r3, #0]
 802a846:	685b      	ldreq	r3, [r3, #4]
 802a848:	1809      	addeq	r1, r1, r0
 802a84a:	6021      	streq	r1, [r4, #0]
 802a84c:	e7ed      	b.n	802a82a <_free_r+0x1e>
 802a84e:	461a      	mov	r2, r3
 802a850:	685b      	ldr	r3, [r3, #4]
 802a852:	b10b      	cbz	r3, 802a858 <_free_r+0x4c>
 802a854:	42a3      	cmp	r3, r4
 802a856:	d9fa      	bls.n	802a84e <_free_r+0x42>
 802a858:	6811      	ldr	r1, [r2, #0]
 802a85a:	1850      	adds	r0, r2, r1
 802a85c:	42a0      	cmp	r0, r4
 802a85e:	d10b      	bne.n	802a878 <_free_r+0x6c>
 802a860:	6820      	ldr	r0, [r4, #0]
 802a862:	4401      	add	r1, r0
 802a864:	1850      	adds	r0, r2, r1
 802a866:	4283      	cmp	r3, r0
 802a868:	6011      	str	r1, [r2, #0]
 802a86a:	d1e0      	bne.n	802a82e <_free_r+0x22>
 802a86c:	6818      	ldr	r0, [r3, #0]
 802a86e:	685b      	ldr	r3, [r3, #4]
 802a870:	6053      	str	r3, [r2, #4]
 802a872:	4408      	add	r0, r1
 802a874:	6010      	str	r0, [r2, #0]
 802a876:	e7da      	b.n	802a82e <_free_r+0x22>
 802a878:	d902      	bls.n	802a880 <_free_r+0x74>
 802a87a:	230c      	movs	r3, #12
 802a87c:	602b      	str	r3, [r5, #0]
 802a87e:	e7d6      	b.n	802a82e <_free_r+0x22>
 802a880:	6820      	ldr	r0, [r4, #0]
 802a882:	1821      	adds	r1, r4, r0
 802a884:	428b      	cmp	r3, r1
 802a886:	bf04      	itt	eq
 802a888:	6819      	ldreq	r1, [r3, #0]
 802a88a:	685b      	ldreq	r3, [r3, #4]
 802a88c:	6063      	str	r3, [r4, #4]
 802a88e:	bf04      	itt	eq
 802a890:	1809      	addeq	r1, r1, r0
 802a892:	6021      	streq	r1, [r4, #0]
 802a894:	6054      	str	r4, [r2, #4]
 802a896:	e7ca      	b.n	802a82e <_free_r+0x22>
 802a898:	bd38      	pop	{r3, r4, r5, pc}
 802a89a:	bf00      	nop
 802a89c:	2401d12c 	.word	0x2401d12c

0802a8a0 <rshift>:
 802a8a0:	6903      	ldr	r3, [r0, #16]
 802a8a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802a8a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a8aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 802a8ae:	f100 0414 	add.w	r4, r0, #20
 802a8b2:	dd45      	ble.n	802a940 <rshift+0xa0>
 802a8b4:	f011 011f 	ands.w	r1, r1, #31
 802a8b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802a8bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802a8c0:	d10c      	bne.n	802a8dc <rshift+0x3c>
 802a8c2:	f100 0710 	add.w	r7, r0, #16
 802a8c6:	4629      	mov	r1, r5
 802a8c8:	42b1      	cmp	r1, r6
 802a8ca:	d334      	bcc.n	802a936 <rshift+0x96>
 802a8cc:	1a9b      	subs	r3, r3, r2
 802a8ce:	009b      	lsls	r3, r3, #2
 802a8d0:	1eea      	subs	r2, r5, #3
 802a8d2:	4296      	cmp	r6, r2
 802a8d4:	bf38      	it	cc
 802a8d6:	2300      	movcc	r3, #0
 802a8d8:	4423      	add	r3, r4
 802a8da:	e015      	b.n	802a908 <rshift+0x68>
 802a8dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802a8e0:	f1c1 0820 	rsb	r8, r1, #32
 802a8e4:	40cf      	lsrs	r7, r1
 802a8e6:	f105 0e04 	add.w	lr, r5, #4
 802a8ea:	46a1      	mov	r9, r4
 802a8ec:	4576      	cmp	r6, lr
 802a8ee:	46f4      	mov	ip, lr
 802a8f0:	d815      	bhi.n	802a91e <rshift+0x7e>
 802a8f2:	1a9a      	subs	r2, r3, r2
 802a8f4:	0092      	lsls	r2, r2, #2
 802a8f6:	3a04      	subs	r2, #4
 802a8f8:	3501      	adds	r5, #1
 802a8fa:	42ae      	cmp	r6, r5
 802a8fc:	bf38      	it	cc
 802a8fe:	2200      	movcc	r2, #0
 802a900:	18a3      	adds	r3, r4, r2
 802a902:	50a7      	str	r7, [r4, r2]
 802a904:	b107      	cbz	r7, 802a908 <rshift+0x68>
 802a906:	3304      	adds	r3, #4
 802a908:	1b1a      	subs	r2, r3, r4
 802a90a:	42a3      	cmp	r3, r4
 802a90c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802a910:	bf08      	it	eq
 802a912:	2300      	moveq	r3, #0
 802a914:	6102      	str	r2, [r0, #16]
 802a916:	bf08      	it	eq
 802a918:	6143      	streq	r3, [r0, #20]
 802a91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a91e:	f8dc c000 	ldr.w	ip, [ip]
 802a922:	fa0c fc08 	lsl.w	ip, ip, r8
 802a926:	ea4c 0707 	orr.w	r7, ip, r7
 802a92a:	f849 7b04 	str.w	r7, [r9], #4
 802a92e:	f85e 7b04 	ldr.w	r7, [lr], #4
 802a932:	40cf      	lsrs	r7, r1
 802a934:	e7da      	b.n	802a8ec <rshift+0x4c>
 802a936:	f851 cb04 	ldr.w	ip, [r1], #4
 802a93a:	f847 cf04 	str.w	ip, [r7, #4]!
 802a93e:	e7c3      	b.n	802a8c8 <rshift+0x28>
 802a940:	4623      	mov	r3, r4
 802a942:	e7e1      	b.n	802a908 <rshift+0x68>

0802a944 <__hexdig_fun>:
 802a944:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802a948:	2b09      	cmp	r3, #9
 802a94a:	d802      	bhi.n	802a952 <__hexdig_fun+0xe>
 802a94c:	3820      	subs	r0, #32
 802a94e:	b2c0      	uxtb	r0, r0
 802a950:	4770      	bx	lr
 802a952:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802a956:	2b05      	cmp	r3, #5
 802a958:	d801      	bhi.n	802a95e <__hexdig_fun+0x1a>
 802a95a:	3847      	subs	r0, #71	@ 0x47
 802a95c:	e7f7      	b.n	802a94e <__hexdig_fun+0xa>
 802a95e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802a962:	2b05      	cmp	r3, #5
 802a964:	d801      	bhi.n	802a96a <__hexdig_fun+0x26>
 802a966:	3827      	subs	r0, #39	@ 0x27
 802a968:	e7f1      	b.n	802a94e <__hexdig_fun+0xa>
 802a96a:	2000      	movs	r0, #0
 802a96c:	4770      	bx	lr
	...

0802a970 <__gethex>:
 802a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a974:	b085      	sub	sp, #20
 802a976:	468a      	mov	sl, r1
 802a978:	9302      	str	r3, [sp, #8]
 802a97a:	680b      	ldr	r3, [r1, #0]
 802a97c:	9001      	str	r0, [sp, #4]
 802a97e:	4690      	mov	r8, r2
 802a980:	1c9c      	adds	r4, r3, #2
 802a982:	46a1      	mov	r9, r4
 802a984:	f814 0b01 	ldrb.w	r0, [r4], #1
 802a988:	2830      	cmp	r0, #48	@ 0x30
 802a98a:	d0fa      	beq.n	802a982 <__gethex+0x12>
 802a98c:	eba9 0303 	sub.w	r3, r9, r3
 802a990:	f1a3 0b02 	sub.w	fp, r3, #2
 802a994:	f7ff ffd6 	bl	802a944 <__hexdig_fun>
 802a998:	4605      	mov	r5, r0
 802a99a:	2800      	cmp	r0, #0
 802a99c:	d168      	bne.n	802aa70 <__gethex+0x100>
 802a99e:	49a0      	ldr	r1, [pc, #640]	@ (802ac20 <__gethex+0x2b0>)
 802a9a0:	2201      	movs	r2, #1
 802a9a2:	4648      	mov	r0, r9
 802a9a4:	f7fd ff11 	bl	80287ca <strncmp>
 802a9a8:	4607      	mov	r7, r0
 802a9aa:	2800      	cmp	r0, #0
 802a9ac:	d167      	bne.n	802aa7e <__gethex+0x10e>
 802a9ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 802a9b2:	4626      	mov	r6, r4
 802a9b4:	f7ff ffc6 	bl	802a944 <__hexdig_fun>
 802a9b8:	2800      	cmp	r0, #0
 802a9ba:	d062      	beq.n	802aa82 <__gethex+0x112>
 802a9bc:	4623      	mov	r3, r4
 802a9be:	7818      	ldrb	r0, [r3, #0]
 802a9c0:	2830      	cmp	r0, #48	@ 0x30
 802a9c2:	4699      	mov	r9, r3
 802a9c4:	f103 0301 	add.w	r3, r3, #1
 802a9c8:	d0f9      	beq.n	802a9be <__gethex+0x4e>
 802a9ca:	f7ff ffbb 	bl	802a944 <__hexdig_fun>
 802a9ce:	fab0 f580 	clz	r5, r0
 802a9d2:	096d      	lsrs	r5, r5, #5
 802a9d4:	f04f 0b01 	mov.w	fp, #1
 802a9d8:	464a      	mov	r2, r9
 802a9da:	4616      	mov	r6, r2
 802a9dc:	3201      	adds	r2, #1
 802a9de:	7830      	ldrb	r0, [r6, #0]
 802a9e0:	f7ff ffb0 	bl	802a944 <__hexdig_fun>
 802a9e4:	2800      	cmp	r0, #0
 802a9e6:	d1f8      	bne.n	802a9da <__gethex+0x6a>
 802a9e8:	498d      	ldr	r1, [pc, #564]	@ (802ac20 <__gethex+0x2b0>)
 802a9ea:	2201      	movs	r2, #1
 802a9ec:	4630      	mov	r0, r6
 802a9ee:	f7fd feec 	bl	80287ca <strncmp>
 802a9f2:	2800      	cmp	r0, #0
 802a9f4:	d13f      	bne.n	802aa76 <__gethex+0x106>
 802a9f6:	b944      	cbnz	r4, 802aa0a <__gethex+0x9a>
 802a9f8:	1c74      	adds	r4, r6, #1
 802a9fa:	4622      	mov	r2, r4
 802a9fc:	4616      	mov	r6, r2
 802a9fe:	3201      	adds	r2, #1
 802aa00:	7830      	ldrb	r0, [r6, #0]
 802aa02:	f7ff ff9f 	bl	802a944 <__hexdig_fun>
 802aa06:	2800      	cmp	r0, #0
 802aa08:	d1f8      	bne.n	802a9fc <__gethex+0x8c>
 802aa0a:	1ba4      	subs	r4, r4, r6
 802aa0c:	00a7      	lsls	r7, r4, #2
 802aa0e:	7833      	ldrb	r3, [r6, #0]
 802aa10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802aa14:	2b50      	cmp	r3, #80	@ 0x50
 802aa16:	d13e      	bne.n	802aa96 <__gethex+0x126>
 802aa18:	7873      	ldrb	r3, [r6, #1]
 802aa1a:	2b2b      	cmp	r3, #43	@ 0x2b
 802aa1c:	d033      	beq.n	802aa86 <__gethex+0x116>
 802aa1e:	2b2d      	cmp	r3, #45	@ 0x2d
 802aa20:	d034      	beq.n	802aa8c <__gethex+0x11c>
 802aa22:	1c71      	adds	r1, r6, #1
 802aa24:	2400      	movs	r4, #0
 802aa26:	7808      	ldrb	r0, [r1, #0]
 802aa28:	f7ff ff8c 	bl	802a944 <__hexdig_fun>
 802aa2c:	1e43      	subs	r3, r0, #1
 802aa2e:	b2db      	uxtb	r3, r3
 802aa30:	2b18      	cmp	r3, #24
 802aa32:	d830      	bhi.n	802aa96 <__gethex+0x126>
 802aa34:	f1a0 0210 	sub.w	r2, r0, #16
 802aa38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802aa3c:	f7ff ff82 	bl	802a944 <__hexdig_fun>
 802aa40:	f100 3cff 	add.w	ip, r0, #4294967295
 802aa44:	fa5f fc8c 	uxtb.w	ip, ip
 802aa48:	f1bc 0f18 	cmp.w	ip, #24
 802aa4c:	f04f 030a 	mov.w	r3, #10
 802aa50:	d91e      	bls.n	802aa90 <__gethex+0x120>
 802aa52:	b104      	cbz	r4, 802aa56 <__gethex+0xe6>
 802aa54:	4252      	negs	r2, r2
 802aa56:	4417      	add	r7, r2
 802aa58:	f8ca 1000 	str.w	r1, [sl]
 802aa5c:	b1ed      	cbz	r5, 802aa9a <__gethex+0x12a>
 802aa5e:	f1bb 0f00 	cmp.w	fp, #0
 802aa62:	bf0c      	ite	eq
 802aa64:	2506      	moveq	r5, #6
 802aa66:	2500      	movne	r5, #0
 802aa68:	4628      	mov	r0, r5
 802aa6a:	b005      	add	sp, #20
 802aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa70:	2500      	movs	r5, #0
 802aa72:	462c      	mov	r4, r5
 802aa74:	e7b0      	b.n	802a9d8 <__gethex+0x68>
 802aa76:	2c00      	cmp	r4, #0
 802aa78:	d1c7      	bne.n	802aa0a <__gethex+0x9a>
 802aa7a:	4627      	mov	r7, r4
 802aa7c:	e7c7      	b.n	802aa0e <__gethex+0x9e>
 802aa7e:	464e      	mov	r6, r9
 802aa80:	462f      	mov	r7, r5
 802aa82:	2501      	movs	r5, #1
 802aa84:	e7c3      	b.n	802aa0e <__gethex+0x9e>
 802aa86:	2400      	movs	r4, #0
 802aa88:	1cb1      	adds	r1, r6, #2
 802aa8a:	e7cc      	b.n	802aa26 <__gethex+0xb6>
 802aa8c:	2401      	movs	r4, #1
 802aa8e:	e7fb      	b.n	802aa88 <__gethex+0x118>
 802aa90:	fb03 0002 	mla	r0, r3, r2, r0
 802aa94:	e7ce      	b.n	802aa34 <__gethex+0xc4>
 802aa96:	4631      	mov	r1, r6
 802aa98:	e7de      	b.n	802aa58 <__gethex+0xe8>
 802aa9a:	eba6 0309 	sub.w	r3, r6, r9
 802aa9e:	3b01      	subs	r3, #1
 802aaa0:	4629      	mov	r1, r5
 802aaa2:	2b07      	cmp	r3, #7
 802aaa4:	dc0a      	bgt.n	802aabc <__gethex+0x14c>
 802aaa6:	9801      	ldr	r0, [sp, #4]
 802aaa8:	f000 fa8a 	bl	802afc0 <_Balloc>
 802aaac:	4604      	mov	r4, r0
 802aaae:	b940      	cbnz	r0, 802aac2 <__gethex+0x152>
 802aab0:	4b5c      	ldr	r3, [pc, #368]	@ (802ac24 <__gethex+0x2b4>)
 802aab2:	4602      	mov	r2, r0
 802aab4:	21e4      	movs	r1, #228	@ 0xe4
 802aab6:	485c      	ldr	r0, [pc, #368]	@ (802ac28 <__gethex+0x2b8>)
 802aab8:	f7fb fe82 	bl	80267c0 <__assert_func>
 802aabc:	3101      	adds	r1, #1
 802aabe:	105b      	asrs	r3, r3, #1
 802aac0:	e7ef      	b.n	802aaa2 <__gethex+0x132>
 802aac2:	f100 0a14 	add.w	sl, r0, #20
 802aac6:	2300      	movs	r3, #0
 802aac8:	4655      	mov	r5, sl
 802aaca:	469b      	mov	fp, r3
 802aacc:	45b1      	cmp	r9, r6
 802aace:	d337      	bcc.n	802ab40 <__gethex+0x1d0>
 802aad0:	f845 bb04 	str.w	fp, [r5], #4
 802aad4:	eba5 050a 	sub.w	r5, r5, sl
 802aad8:	10ad      	asrs	r5, r5, #2
 802aada:	6125      	str	r5, [r4, #16]
 802aadc:	4658      	mov	r0, fp
 802aade:	f000 fb61 	bl	802b1a4 <__hi0bits>
 802aae2:	016d      	lsls	r5, r5, #5
 802aae4:	f8d8 6000 	ldr.w	r6, [r8]
 802aae8:	1a2d      	subs	r5, r5, r0
 802aaea:	42b5      	cmp	r5, r6
 802aaec:	dd54      	ble.n	802ab98 <__gethex+0x228>
 802aaee:	1bad      	subs	r5, r5, r6
 802aaf0:	4629      	mov	r1, r5
 802aaf2:	4620      	mov	r0, r4
 802aaf4:	f000 feea 	bl	802b8cc <__any_on>
 802aaf8:	4681      	mov	r9, r0
 802aafa:	b178      	cbz	r0, 802ab1c <__gethex+0x1ac>
 802aafc:	1e6b      	subs	r3, r5, #1
 802aafe:	1159      	asrs	r1, r3, #5
 802ab00:	f003 021f 	and.w	r2, r3, #31
 802ab04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802ab08:	f04f 0901 	mov.w	r9, #1
 802ab0c:	fa09 f202 	lsl.w	r2, r9, r2
 802ab10:	420a      	tst	r2, r1
 802ab12:	d003      	beq.n	802ab1c <__gethex+0x1ac>
 802ab14:	454b      	cmp	r3, r9
 802ab16:	dc36      	bgt.n	802ab86 <__gethex+0x216>
 802ab18:	f04f 0902 	mov.w	r9, #2
 802ab1c:	4629      	mov	r1, r5
 802ab1e:	4620      	mov	r0, r4
 802ab20:	f7ff febe 	bl	802a8a0 <rshift>
 802ab24:	442f      	add	r7, r5
 802ab26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802ab2a:	42bb      	cmp	r3, r7
 802ab2c:	da42      	bge.n	802abb4 <__gethex+0x244>
 802ab2e:	9801      	ldr	r0, [sp, #4]
 802ab30:	4621      	mov	r1, r4
 802ab32:	f000 fa85 	bl	802b040 <_Bfree>
 802ab36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ab38:	2300      	movs	r3, #0
 802ab3a:	6013      	str	r3, [r2, #0]
 802ab3c:	25a3      	movs	r5, #163	@ 0xa3
 802ab3e:	e793      	b.n	802aa68 <__gethex+0xf8>
 802ab40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802ab44:	2a2e      	cmp	r2, #46	@ 0x2e
 802ab46:	d012      	beq.n	802ab6e <__gethex+0x1fe>
 802ab48:	2b20      	cmp	r3, #32
 802ab4a:	d104      	bne.n	802ab56 <__gethex+0x1e6>
 802ab4c:	f845 bb04 	str.w	fp, [r5], #4
 802ab50:	f04f 0b00 	mov.w	fp, #0
 802ab54:	465b      	mov	r3, fp
 802ab56:	7830      	ldrb	r0, [r6, #0]
 802ab58:	9303      	str	r3, [sp, #12]
 802ab5a:	f7ff fef3 	bl	802a944 <__hexdig_fun>
 802ab5e:	9b03      	ldr	r3, [sp, #12]
 802ab60:	f000 000f 	and.w	r0, r0, #15
 802ab64:	4098      	lsls	r0, r3
 802ab66:	ea4b 0b00 	orr.w	fp, fp, r0
 802ab6a:	3304      	adds	r3, #4
 802ab6c:	e7ae      	b.n	802aacc <__gethex+0x15c>
 802ab6e:	45b1      	cmp	r9, r6
 802ab70:	d8ea      	bhi.n	802ab48 <__gethex+0x1d8>
 802ab72:	492b      	ldr	r1, [pc, #172]	@ (802ac20 <__gethex+0x2b0>)
 802ab74:	9303      	str	r3, [sp, #12]
 802ab76:	2201      	movs	r2, #1
 802ab78:	4630      	mov	r0, r6
 802ab7a:	f7fd fe26 	bl	80287ca <strncmp>
 802ab7e:	9b03      	ldr	r3, [sp, #12]
 802ab80:	2800      	cmp	r0, #0
 802ab82:	d1e1      	bne.n	802ab48 <__gethex+0x1d8>
 802ab84:	e7a2      	b.n	802aacc <__gethex+0x15c>
 802ab86:	1ea9      	subs	r1, r5, #2
 802ab88:	4620      	mov	r0, r4
 802ab8a:	f000 fe9f 	bl	802b8cc <__any_on>
 802ab8e:	2800      	cmp	r0, #0
 802ab90:	d0c2      	beq.n	802ab18 <__gethex+0x1a8>
 802ab92:	f04f 0903 	mov.w	r9, #3
 802ab96:	e7c1      	b.n	802ab1c <__gethex+0x1ac>
 802ab98:	da09      	bge.n	802abae <__gethex+0x23e>
 802ab9a:	1b75      	subs	r5, r6, r5
 802ab9c:	4621      	mov	r1, r4
 802ab9e:	9801      	ldr	r0, [sp, #4]
 802aba0:	462a      	mov	r2, r5
 802aba2:	f000 fc5d 	bl	802b460 <__lshift>
 802aba6:	1b7f      	subs	r7, r7, r5
 802aba8:	4604      	mov	r4, r0
 802abaa:	f100 0a14 	add.w	sl, r0, #20
 802abae:	f04f 0900 	mov.w	r9, #0
 802abb2:	e7b8      	b.n	802ab26 <__gethex+0x1b6>
 802abb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802abb8:	42bd      	cmp	r5, r7
 802abba:	dd6f      	ble.n	802ac9c <__gethex+0x32c>
 802abbc:	1bed      	subs	r5, r5, r7
 802abbe:	42ae      	cmp	r6, r5
 802abc0:	dc34      	bgt.n	802ac2c <__gethex+0x2bc>
 802abc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802abc6:	2b02      	cmp	r3, #2
 802abc8:	d022      	beq.n	802ac10 <__gethex+0x2a0>
 802abca:	2b03      	cmp	r3, #3
 802abcc:	d024      	beq.n	802ac18 <__gethex+0x2a8>
 802abce:	2b01      	cmp	r3, #1
 802abd0:	d115      	bne.n	802abfe <__gethex+0x28e>
 802abd2:	42ae      	cmp	r6, r5
 802abd4:	d113      	bne.n	802abfe <__gethex+0x28e>
 802abd6:	2e01      	cmp	r6, #1
 802abd8:	d10b      	bne.n	802abf2 <__gethex+0x282>
 802abda:	9a02      	ldr	r2, [sp, #8]
 802abdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802abe0:	6013      	str	r3, [r2, #0]
 802abe2:	2301      	movs	r3, #1
 802abe4:	6123      	str	r3, [r4, #16]
 802abe6:	f8ca 3000 	str.w	r3, [sl]
 802abea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802abec:	2562      	movs	r5, #98	@ 0x62
 802abee:	601c      	str	r4, [r3, #0]
 802abf0:	e73a      	b.n	802aa68 <__gethex+0xf8>
 802abf2:	1e71      	subs	r1, r6, #1
 802abf4:	4620      	mov	r0, r4
 802abf6:	f000 fe69 	bl	802b8cc <__any_on>
 802abfa:	2800      	cmp	r0, #0
 802abfc:	d1ed      	bne.n	802abda <__gethex+0x26a>
 802abfe:	9801      	ldr	r0, [sp, #4]
 802ac00:	4621      	mov	r1, r4
 802ac02:	f000 fa1d 	bl	802b040 <_Bfree>
 802ac06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ac08:	2300      	movs	r3, #0
 802ac0a:	6013      	str	r3, [r2, #0]
 802ac0c:	2550      	movs	r5, #80	@ 0x50
 802ac0e:	e72b      	b.n	802aa68 <__gethex+0xf8>
 802ac10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ac12:	2b00      	cmp	r3, #0
 802ac14:	d1f3      	bne.n	802abfe <__gethex+0x28e>
 802ac16:	e7e0      	b.n	802abda <__gethex+0x26a>
 802ac18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ac1a:	2b00      	cmp	r3, #0
 802ac1c:	d1dd      	bne.n	802abda <__gethex+0x26a>
 802ac1e:	e7ee      	b.n	802abfe <__gethex+0x28e>
 802ac20:	0803e87d 	.word	0x0803e87d
 802ac24:	0803eaa6 	.word	0x0803eaa6
 802ac28:	0803eab7 	.word	0x0803eab7
 802ac2c:	1e6f      	subs	r7, r5, #1
 802ac2e:	f1b9 0f00 	cmp.w	r9, #0
 802ac32:	d130      	bne.n	802ac96 <__gethex+0x326>
 802ac34:	b127      	cbz	r7, 802ac40 <__gethex+0x2d0>
 802ac36:	4639      	mov	r1, r7
 802ac38:	4620      	mov	r0, r4
 802ac3a:	f000 fe47 	bl	802b8cc <__any_on>
 802ac3e:	4681      	mov	r9, r0
 802ac40:	117a      	asrs	r2, r7, #5
 802ac42:	2301      	movs	r3, #1
 802ac44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802ac48:	f007 071f 	and.w	r7, r7, #31
 802ac4c:	40bb      	lsls	r3, r7
 802ac4e:	4213      	tst	r3, r2
 802ac50:	4629      	mov	r1, r5
 802ac52:	4620      	mov	r0, r4
 802ac54:	bf18      	it	ne
 802ac56:	f049 0902 	orrne.w	r9, r9, #2
 802ac5a:	f7ff fe21 	bl	802a8a0 <rshift>
 802ac5e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802ac62:	1b76      	subs	r6, r6, r5
 802ac64:	2502      	movs	r5, #2
 802ac66:	f1b9 0f00 	cmp.w	r9, #0
 802ac6a:	d047      	beq.n	802acfc <__gethex+0x38c>
 802ac6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802ac70:	2b02      	cmp	r3, #2
 802ac72:	d015      	beq.n	802aca0 <__gethex+0x330>
 802ac74:	2b03      	cmp	r3, #3
 802ac76:	d017      	beq.n	802aca8 <__gethex+0x338>
 802ac78:	2b01      	cmp	r3, #1
 802ac7a:	d109      	bne.n	802ac90 <__gethex+0x320>
 802ac7c:	f019 0f02 	tst.w	r9, #2
 802ac80:	d006      	beq.n	802ac90 <__gethex+0x320>
 802ac82:	f8da 3000 	ldr.w	r3, [sl]
 802ac86:	ea49 0903 	orr.w	r9, r9, r3
 802ac8a:	f019 0f01 	tst.w	r9, #1
 802ac8e:	d10e      	bne.n	802acae <__gethex+0x33e>
 802ac90:	f045 0510 	orr.w	r5, r5, #16
 802ac94:	e032      	b.n	802acfc <__gethex+0x38c>
 802ac96:	f04f 0901 	mov.w	r9, #1
 802ac9a:	e7d1      	b.n	802ac40 <__gethex+0x2d0>
 802ac9c:	2501      	movs	r5, #1
 802ac9e:	e7e2      	b.n	802ac66 <__gethex+0x2f6>
 802aca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802aca2:	f1c3 0301 	rsb	r3, r3, #1
 802aca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 802aca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802acaa:	2b00      	cmp	r3, #0
 802acac:	d0f0      	beq.n	802ac90 <__gethex+0x320>
 802acae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802acb2:	f104 0314 	add.w	r3, r4, #20
 802acb6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802acba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802acbe:	f04f 0c00 	mov.w	ip, #0
 802acc2:	4618      	mov	r0, r3
 802acc4:	f853 2b04 	ldr.w	r2, [r3], #4
 802acc8:	f1b2 3fff 	cmp.w	r2, #4294967295
 802accc:	d01b      	beq.n	802ad06 <__gethex+0x396>
 802acce:	3201      	adds	r2, #1
 802acd0:	6002      	str	r2, [r0, #0]
 802acd2:	2d02      	cmp	r5, #2
 802acd4:	f104 0314 	add.w	r3, r4, #20
 802acd8:	d13c      	bne.n	802ad54 <__gethex+0x3e4>
 802acda:	f8d8 2000 	ldr.w	r2, [r8]
 802acde:	3a01      	subs	r2, #1
 802ace0:	42b2      	cmp	r2, r6
 802ace2:	d109      	bne.n	802acf8 <__gethex+0x388>
 802ace4:	1171      	asrs	r1, r6, #5
 802ace6:	2201      	movs	r2, #1
 802ace8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802acec:	f006 061f 	and.w	r6, r6, #31
 802acf0:	fa02 f606 	lsl.w	r6, r2, r6
 802acf4:	421e      	tst	r6, r3
 802acf6:	d13a      	bne.n	802ad6e <__gethex+0x3fe>
 802acf8:	f045 0520 	orr.w	r5, r5, #32
 802acfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802acfe:	601c      	str	r4, [r3, #0]
 802ad00:	9b02      	ldr	r3, [sp, #8]
 802ad02:	601f      	str	r7, [r3, #0]
 802ad04:	e6b0      	b.n	802aa68 <__gethex+0xf8>
 802ad06:	4299      	cmp	r1, r3
 802ad08:	f843 cc04 	str.w	ip, [r3, #-4]
 802ad0c:	d8d9      	bhi.n	802acc2 <__gethex+0x352>
 802ad0e:	68a3      	ldr	r3, [r4, #8]
 802ad10:	459b      	cmp	fp, r3
 802ad12:	db17      	blt.n	802ad44 <__gethex+0x3d4>
 802ad14:	6861      	ldr	r1, [r4, #4]
 802ad16:	9801      	ldr	r0, [sp, #4]
 802ad18:	3101      	adds	r1, #1
 802ad1a:	f000 f951 	bl	802afc0 <_Balloc>
 802ad1e:	4681      	mov	r9, r0
 802ad20:	b918      	cbnz	r0, 802ad2a <__gethex+0x3ba>
 802ad22:	4b1a      	ldr	r3, [pc, #104]	@ (802ad8c <__gethex+0x41c>)
 802ad24:	4602      	mov	r2, r0
 802ad26:	2184      	movs	r1, #132	@ 0x84
 802ad28:	e6c5      	b.n	802aab6 <__gethex+0x146>
 802ad2a:	6922      	ldr	r2, [r4, #16]
 802ad2c:	3202      	adds	r2, #2
 802ad2e:	f104 010c 	add.w	r1, r4, #12
 802ad32:	0092      	lsls	r2, r2, #2
 802ad34:	300c      	adds	r0, #12
 802ad36:	f7fe ff62 	bl	8029bfe <memcpy>
 802ad3a:	4621      	mov	r1, r4
 802ad3c:	9801      	ldr	r0, [sp, #4]
 802ad3e:	f000 f97f 	bl	802b040 <_Bfree>
 802ad42:	464c      	mov	r4, r9
 802ad44:	6923      	ldr	r3, [r4, #16]
 802ad46:	1c5a      	adds	r2, r3, #1
 802ad48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802ad4c:	6122      	str	r2, [r4, #16]
 802ad4e:	2201      	movs	r2, #1
 802ad50:	615a      	str	r2, [r3, #20]
 802ad52:	e7be      	b.n	802acd2 <__gethex+0x362>
 802ad54:	6922      	ldr	r2, [r4, #16]
 802ad56:	455a      	cmp	r2, fp
 802ad58:	dd0b      	ble.n	802ad72 <__gethex+0x402>
 802ad5a:	2101      	movs	r1, #1
 802ad5c:	4620      	mov	r0, r4
 802ad5e:	f7ff fd9f 	bl	802a8a0 <rshift>
 802ad62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802ad66:	3701      	adds	r7, #1
 802ad68:	42bb      	cmp	r3, r7
 802ad6a:	f6ff aee0 	blt.w	802ab2e <__gethex+0x1be>
 802ad6e:	2501      	movs	r5, #1
 802ad70:	e7c2      	b.n	802acf8 <__gethex+0x388>
 802ad72:	f016 061f 	ands.w	r6, r6, #31
 802ad76:	d0fa      	beq.n	802ad6e <__gethex+0x3fe>
 802ad78:	4453      	add	r3, sl
 802ad7a:	f1c6 0620 	rsb	r6, r6, #32
 802ad7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802ad82:	f000 fa0f 	bl	802b1a4 <__hi0bits>
 802ad86:	42b0      	cmp	r0, r6
 802ad88:	dbe7      	blt.n	802ad5a <__gethex+0x3ea>
 802ad8a:	e7f0      	b.n	802ad6e <__gethex+0x3fe>
 802ad8c:	0803eaa6 	.word	0x0803eaa6

0802ad90 <L_shift>:
 802ad90:	f1c2 0208 	rsb	r2, r2, #8
 802ad94:	0092      	lsls	r2, r2, #2
 802ad96:	b570      	push	{r4, r5, r6, lr}
 802ad98:	f1c2 0620 	rsb	r6, r2, #32
 802ad9c:	6843      	ldr	r3, [r0, #4]
 802ad9e:	6804      	ldr	r4, [r0, #0]
 802ada0:	fa03 f506 	lsl.w	r5, r3, r6
 802ada4:	432c      	orrs	r4, r5
 802ada6:	40d3      	lsrs	r3, r2
 802ada8:	6004      	str	r4, [r0, #0]
 802adaa:	f840 3f04 	str.w	r3, [r0, #4]!
 802adae:	4288      	cmp	r0, r1
 802adb0:	d3f4      	bcc.n	802ad9c <L_shift+0xc>
 802adb2:	bd70      	pop	{r4, r5, r6, pc}

0802adb4 <__match>:
 802adb4:	b530      	push	{r4, r5, lr}
 802adb6:	6803      	ldr	r3, [r0, #0]
 802adb8:	3301      	adds	r3, #1
 802adba:	f811 4b01 	ldrb.w	r4, [r1], #1
 802adbe:	b914      	cbnz	r4, 802adc6 <__match+0x12>
 802adc0:	6003      	str	r3, [r0, #0]
 802adc2:	2001      	movs	r0, #1
 802adc4:	bd30      	pop	{r4, r5, pc}
 802adc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802adca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802adce:	2d19      	cmp	r5, #25
 802add0:	bf98      	it	ls
 802add2:	3220      	addls	r2, #32
 802add4:	42a2      	cmp	r2, r4
 802add6:	d0f0      	beq.n	802adba <__match+0x6>
 802add8:	2000      	movs	r0, #0
 802adda:	e7f3      	b.n	802adc4 <__match+0x10>

0802addc <__hexnan>:
 802addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ade0:	680b      	ldr	r3, [r1, #0]
 802ade2:	6801      	ldr	r1, [r0, #0]
 802ade4:	115e      	asrs	r6, r3, #5
 802ade6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802adea:	f013 031f 	ands.w	r3, r3, #31
 802adee:	b087      	sub	sp, #28
 802adf0:	bf18      	it	ne
 802adf2:	3604      	addne	r6, #4
 802adf4:	2500      	movs	r5, #0
 802adf6:	1f37      	subs	r7, r6, #4
 802adf8:	4682      	mov	sl, r0
 802adfa:	4690      	mov	r8, r2
 802adfc:	9301      	str	r3, [sp, #4]
 802adfe:	f846 5c04 	str.w	r5, [r6, #-4]
 802ae02:	46b9      	mov	r9, r7
 802ae04:	463c      	mov	r4, r7
 802ae06:	9502      	str	r5, [sp, #8]
 802ae08:	46ab      	mov	fp, r5
 802ae0a:	784a      	ldrb	r2, [r1, #1]
 802ae0c:	1c4b      	adds	r3, r1, #1
 802ae0e:	9303      	str	r3, [sp, #12]
 802ae10:	b342      	cbz	r2, 802ae64 <__hexnan+0x88>
 802ae12:	4610      	mov	r0, r2
 802ae14:	9105      	str	r1, [sp, #20]
 802ae16:	9204      	str	r2, [sp, #16]
 802ae18:	f7ff fd94 	bl	802a944 <__hexdig_fun>
 802ae1c:	2800      	cmp	r0, #0
 802ae1e:	d151      	bne.n	802aec4 <__hexnan+0xe8>
 802ae20:	9a04      	ldr	r2, [sp, #16]
 802ae22:	9905      	ldr	r1, [sp, #20]
 802ae24:	2a20      	cmp	r2, #32
 802ae26:	d818      	bhi.n	802ae5a <__hexnan+0x7e>
 802ae28:	9b02      	ldr	r3, [sp, #8]
 802ae2a:	459b      	cmp	fp, r3
 802ae2c:	dd13      	ble.n	802ae56 <__hexnan+0x7a>
 802ae2e:	454c      	cmp	r4, r9
 802ae30:	d206      	bcs.n	802ae40 <__hexnan+0x64>
 802ae32:	2d07      	cmp	r5, #7
 802ae34:	dc04      	bgt.n	802ae40 <__hexnan+0x64>
 802ae36:	462a      	mov	r2, r5
 802ae38:	4649      	mov	r1, r9
 802ae3a:	4620      	mov	r0, r4
 802ae3c:	f7ff ffa8 	bl	802ad90 <L_shift>
 802ae40:	4544      	cmp	r4, r8
 802ae42:	d952      	bls.n	802aeea <__hexnan+0x10e>
 802ae44:	2300      	movs	r3, #0
 802ae46:	f1a4 0904 	sub.w	r9, r4, #4
 802ae4a:	f844 3c04 	str.w	r3, [r4, #-4]
 802ae4e:	f8cd b008 	str.w	fp, [sp, #8]
 802ae52:	464c      	mov	r4, r9
 802ae54:	461d      	mov	r5, r3
 802ae56:	9903      	ldr	r1, [sp, #12]
 802ae58:	e7d7      	b.n	802ae0a <__hexnan+0x2e>
 802ae5a:	2a29      	cmp	r2, #41	@ 0x29
 802ae5c:	d157      	bne.n	802af0e <__hexnan+0x132>
 802ae5e:	3102      	adds	r1, #2
 802ae60:	f8ca 1000 	str.w	r1, [sl]
 802ae64:	f1bb 0f00 	cmp.w	fp, #0
 802ae68:	d051      	beq.n	802af0e <__hexnan+0x132>
 802ae6a:	454c      	cmp	r4, r9
 802ae6c:	d206      	bcs.n	802ae7c <__hexnan+0xa0>
 802ae6e:	2d07      	cmp	r5, #7
 802ae70:	dc04      	bgt.n	802ae7c <__hexnan+0xa0>
 802ae72:	462a      	mov	r2, r5
 802ae74:	4649      	mov	r1, r9
 802ae76:	4620      	mov	r0, r4
 802ae78:	f7ff ff8a 	bl	802ad90 <L_shift>
 802ae7c:	4544      	cmp	r4, r8
 802ae7e:	d936      	bls.n	802aeee <__hexnan+0x112>
 802ae80:	f1a8 0204 	sub.w	r2, r8, #4
 802ae84:	4623      	mov	r3, r4
 802ae86:	f853 1b04 	ldr.w	r1, [r3], #4
 802ae8a:	f842 1f04 	str.w	r1, [r2, #4]!
 802ae8e:	429f      	cmp	r7, r3
 802ae90:	d2f9      	bcs.n	802ae86 <__hexnan+0xaa>
 802ae92:	1b3b      	subs	r3, r7, r4
 802ae94:	f023 0303 	bic.w	r3, r3, #3
 802ae98:	3304      	adds	r3, #4
 802ae9a:	3401      	adds	r4, #1
 802ae9c:	3e03      	subs	r6, #3
 802ae9e:	42b4      	cmp	r4, r6
 802aea0:	bf88      	it	hi
 802aea2:	2304      	movhi	r3, #4
 802aea4:	4443      	add	r3, r8
 802aea6:	2200      	movs	r2, #0
 802aea8:	f843 2b04 	str.w	r2, [r3], #4
 802aeac:	429f      	cmp	r7, r3
 802aeae:	d2fb      	bcs.n	802aea8 <__hexnan+0xcc>
 802aeb0:	683b      	ldr	r3, [r7, #0]
 802aeb2:	b91b      	cbnz	r3, 802aebc <__hexnan+0xe0>
 802aeb4:	4547      	cmp	r7, r8
 802aeb6:	d128      	bne.n	802af0a <__hexnan+0x12e>
 802aeb8:	2301      	movs	r3, #1
 802aeba:	603b      	str	r3, [r7, #0]
 802aebc:	2005      	movs	r0, #5
 802aebe:	b007      	add	sp, #28
 802aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aec4:	3501      	adds	r5, #1
 802aec6:	2d08      	cmp	r5, #8
 802aec8:	f10b 0b01 	add.w	fp, fp, #1
 802aecc:	dd06      	ble.n	802aedc <__hexnan+0x100>
 802aece:	4544      	cmp	r4, r8
 802aed0:	d9c1      	bls.n	802ae56 <__hexnan+0x7a>
 802aed2:	2300      	movs	r3, #0
 802aed4:	f844 3c04 	str.w	r3, [r4, #-4]
 802aed8:	2501      	movs	r5, #1
 802aeda:	3c04      	subs	r4, #4
 802aedc:	6822      	ldr	r2, [r4, #0]
 802aede:	f000 000f 	and.w	r0, r0, #15
 802aee2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802aee6:	6020      	str	r0, [r4, #0]
 802aee8:	e7b5      	b.n	802ae56 <__hexnan+0x7a>
 802aeea:	2508      	movs	r5, #8
 802aeec:	e7b3      	b.n	802ae56 <__hexnan+0x7a>
 802aeee:	9b01      	ldr	r3, [sp, #4]
 802aef0:	2b00      	cmp	r3, #0
 802aef2:	d0dd      	beq.n	802aeb0 <__hexnan+0xd4>
 802aef4:	f1c3 0320 	rsb	r3, r3, #32
 802aef8:	f04f 32ff 	mov.w	r2, #4294967295
 802aefc:	40da      	lsrs	r2, r3
 802aefe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802af02:	4013      	ands	r3, r2
 802af04:	f846 3c04 	str.w	r3, [r6, #-4]
 802af08:	e7d2      	b.n	802aeb0 <__hexnan+0xd4>
 802af0a:	3f04      	subs	r7, #4
 802af0c:	e7d0      	b.n	802aeb0 <__hexnan+0xd4>
 802af0e:	2004      	movs	r0, #4
 802af10:	e7d5      	b.n	802aebe <__hexnan+0xe2>
	...

0802af14 <_findenv_r>:
 802af14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af18:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802af88 <_findenv_r+0x74>
 802af1c:	4606      	mov	r6, r0
 802af1e:	4689      	mov	r9, r1
 802af20:	4617      	mov	r7, r2
 802af22:	f001 fd61 	bl	802c9e8 <__env_lock>
 802af26:	f8da 4000 	ldr.w	r4, [sl]
 802af2a:	b134      	cbz	r4, 802af3a <_findenv_r+0x26>
 802af2c:	464b      	mov	r3, r9
 802af2e:	4698      	mov	r8, r3
 802af30:	f813 2b01 	ldrb.w	r2, [r3], #1
 802af34:	b13a      	cbz	r2, 802af46 <_findenv_r+0x32>
 802af36:	2a3d      	cmp	r2, #61	@ 0x3d
 802af38:	d1f9      	bne.n	802af2e <_findenv_r+0x1a>
 802af3a:	4630      	mov	r0, r6
 802af3c:	f001 fd5a 	bl	802c9f4 <__env_unlock>
 802af40:	2000      	movs	r0, #0
 802af42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802af46:	eba8 0809 	sub.w	r8, r8, r9
 802af4a:	46a3      	mov	fp, r4
 802af4c:	f854 0b04 	ldr.w	r0, [r4], #4
 802af50:	2800      	cmp	r0, #0
 802af52:	d0f2      	beq.n	802af3a <_findenv_r+0x26>
 802af54:	4642      	mov	r2, r8
 802af56:	4649      	mov	r1, r9
 802af58:	f7fd fc37 	bl	80287ca <strncmp>
 802af5c:	2800      	cmp	r0, #0
 802af5e:	d1f4      	bne.n	802af4a <_findenv_r+0x36>
 802af60:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802af64:	eb03 0508 	add.w	r5, r3, r8
 802af68:	f813 3008 	ldrb.w	r3, [r3, r8]
 802af6c:	2b3d      	cmp	r3, #61	@ 0x3d
 802af6e:	d1ec      	bne.n	802af4a <_findenv_r+0x36>
 802af70:	f8da 3000 	ldr.w	r3, [sl]
 802af74:	ebab 0303 	sub.w	r3, fp, r3
 802af78:	109b      	asrs	r3, r3, #2
 802af7a:	4630      	mov	r0, r6
 802af7c:	603b      	str	r3, [r7, #0]
 802af7e:	f001 fd39 	bl	802c9f4 <__env_unlock>
 802af82:	1c68      	adds	r0, r5, #1
 802af84:	e7dd      	b.n	802af42 <_findenv_r+0x2e>
 802af86:	bf00      	nop
 802af88:	24000000 	.word	0x24000000

0802af8c <_getenv_r>:
 802af8c:	b507      	push	{r0, r1, r2, lr}
 802af8e:	aa01      	add	r2, sp, #4
 802af90:	f7ff ffc0 	bl	802af14 <_findenv_r>
 802af94:	b003      	add	sp, #12
 802af96:	f85d fb04 	ldr.w	pc, [sp], #4

0802af9a <__ascii_mbtowc>:
 802af9a:	b082      	sub	sp, #8
 802af9c:	b901      	cbnz	r1, 802afa0 <__ascii_mbtowc+0x6>
 802af9e:	a901      	add	r1, sp, #4
 802afa0:	b142      	cbz	r2, 802afb4 <__ascii_mbtowc+0x1a>
 802afa2:	b14b      	cbz	r3, 802afb8 <__ascii_mbtowc+0x1e>
 802afa4:	7813      	ldrb	r3, [r2, #0]
 802afa6:	600b      	str	r3, [r1, #0]
 802afa8:	7812      	ldrb	r2, [r2, #0]
 802afaa:	1e10      	subs	r0, r2, #0
 802afac:	bf18      	it	ne
 802afae:	2001      	movne	r0, #1
 802afb0:	b002      	add	sp, #8
 802afb2:	4770      	bx	lr
 802afb4:	4610      	mov	r0, r2
 802afb6:	e7fb      	b.n	802afb0 <__ascii_mbtowc+0x16>
 802afb8:	f06f 0001 	mvn.w	r0, #1
 802afbc:	e7f8      	b.n	802afb0 <__ascii_mbtowc+0x16>
	...

0802afc0 <_Balloc>:
 802afc0:	b570      	push	{r4, r5, r6, lr}
 802afc2:	69c6      	ldr	r6, [r0, #28]
 802afc4:	4604      	mov	r4, r0
 802afc6:	460d      	mov	r5, r1
 802afc8:	b976      	cbnz	r6, 802afe8 <_Balloc+0x28>
 802afca:	2010      	movs	r0, #16
 802afcc:	f7fb fc3a 	bl	8026844 <malloc>
 802afd0:	4602      	mov	r2, r0
 802afd2:	61e0      	str	r0, [r4, #28]
 802afd4:	b920      	cbnz	r0, 802afe0 <_Balloc+0x20>
 802afd6:	4b18      	ldr	r3, [pc, #96]	@ (802b038 <_Balloc+0x78>)
 802afd8:	4818      	ldr	r0, [pc, #96]	@ (802b03c <_Balloc+0x7c>)
 802afda:	216b      	movs	r1, #107	@ 0x6b
 802afdc:	f7fb fbf0 	bl	80267c0 <__assert_func>
 802afe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802afe4:	6006      	str	r6, [r0, #0]
 802afe6:	60c6      	str	r6, [r0, #12]
 802afe8:	69e6      	ldr	r6, [r4, #28]
 802afea:	68f3      	ldr	r3, [r6, #12]
 802afec:	b183      	cbz	r3, 802b010 <_Balloc+0x50>
 802afee:	69e3      	ldr	r3, [r4, #28]
 802aff0:	68db      	ldr	r3, [r3, #12]
 802aff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802aff6:	b9b8      	cbnz	r0, 802b028 <_Balloc+0x68>
 802aff8:	2101      	movs	r1, #1
 802affa:	fa01 f605 	lsl.w	r6, r1, r5
 802affe:	1d72      	adds	r2, r6, #5
 802b000:	0092      	lsls	r2, r2, #2
 802b002:	4620      	mov	r0, r4
 802b004:	f7fb fc0a 	bl	802681c <_calloc_r>
 802b008:	b160      	cbz	r0, 802b024 <_Balloc+0x64>
 802b00a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802b00e:	e00e      	b.n	802b02e <_Balloc+0x6e>
 802b010:	2221      	movs	r2, #33	@ 0x21
 802b012:	2104      	movs	r1, #4
 802b014:	4620      	mov	r0, r4
 802b016:	f7fb fc01 	bl	802681c <_calloc_r>
 802b01a:	69e3      	ldr	r3, [r4, #28]
 802b01c:	60f0      	str	r0, [r6, #12]
 802b01e:	68db      	ldr	r3, [r3, #12]
 802b020:	2b00      	cmp	r3, #0
 802b022:	d1e4      	bne.n	802afee <_Balloc+0x2e>
 802b024:	2000      	movs	r0, #0
 802b026:	bd70      	pop	{r4, r5, r6, pc}
 802b028:	6802      	ldr	r2, [r0, #0]
 802b02a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802b02e:	2300      	movs	r3, #0
 802b030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b034:	e7f7      	b.n	802b026 <_Balloc+0x66>
 802b036:	bf00      	nop
 802b038:	0803e80e 	.word	0x0803e80e
 802b03c:	0803eb17 	.word	0x0803eb17

0802b040 <_Bfree>:
 802b040:	b570      	push	{r4, r5, r6, lr}
 802b042:	69c6      	ldr	r6, [r0, #28]
 802b044:	4605      	mov	r5, r0
 802b046:	460c      	mov	r4, r1
 802b048:	b976      	cbnz	r6, 802b068 <_Bfree+0x28>
 802b04a:	2010      	movs	r0, #16
 802b04c:	f7fb fbfa 	bl	8026844 <malloc>
 802b050:	4602      	mov	r2, r0
 802b052:	61e8      	str	r0, [r5, #28]
 802b054:	b920      	cbnz	r0, 802b060 <_Bfree+0x20>
 802b056:	4b09      	ldr	r3, [pc, #36]	@ (802b07c <_Bfree+0x3c>)
 802b058:	4809      	ldr	r0, [pc, #36]	@ (802b080 <_Bfree+0x40>)
 802b05a:	218f      	movs	r1, #143	@ 0x8f
 802b05c:	f7fb fbb0 	bl	80267c0 <__assert_func>
 802b060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802b064:	6006      	str	r6, [r0, #0]
 802b066:	60c6      	str	r6, [r0, #12]
 802b068:	b13c      	cbz	r4, 802b07a <_Bfree+0x3a>
 802b06a:	69eb      	ldr	r3, [r5, #28]
 802b06c:	6862      	ldr	r2, [r4, #4]
 802b06e:	68db      	ldr	r3, [r3, #12]
 802b070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802b074:	6021      	str	r1, [r4, #0]
 802b076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802b07a:	bd70      	pop	{r4, r5, r6, pc}
 802b07c:	0803e80e 	.word	0x0803e80e
 802b080:	0803eb17 	.word	0x0803eb17

0802b084 <__multadd>:
 802b084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b088:	690d      	ldr	r5, [r1, #16]
 802b08a:	4607      	mov	r7, r0
 802b08c:	460c      	mov	r4, r1
 802b08e:	461e      	mov	r6, r3
 802b090:	f101 0c14 	add.w	ip, r1, #20
 802b094:	2000      	movs	r0, #0
 802b096:	f8dc 3000 	ldr.w	r3, [ip]
 802b09a:	b299      	uxth	r1, r3
 802b09c:	fb02 6101 	mla	r1, r2, r1, r6
 802b0a0:	0c1e      	lsrs	r6, r3, #16
 802b0a2:	0c0b      	lsrs	r3, r1, #16
 802b0a4:	fb02 3306 	mla	r3, r2, r6, r3
 802b0a8:	b289      	uxth	r1, r1
 802b0aa:	3001      	adds	r0, #1
 802b0ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802b0b0:	4285      	cmp	r5, r0
 802b0b2:	f84c 1b04 	str.w	r1, [ip], #4
 802b0b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802b0ba:	dcec      	bgt.n	802b096 <__multadd+0x12>
 802b0bc:	b30e      	cbz	r6, 802b102 <__multadd+0x7e>
 802b0be:	68a3      	ldr	r3, [r4, #8]
 802b0c0:	42ab      	cmp	r3, r5
 802b0c2:	dc19      	bgt.n	802b0f8 <__multadd+0x74>
 802b0c4:	6861      	ldr	r1, [r4, #4]
 802b0c6:	4638      	mov	r0, r7
 802b0c8:	3101      	adds	r1, #1
 802b0ca:	f7ff ff79 	bl	802afc0 <_Balloc>
 802b0ce:	4680      	mov	r8, r0
 802b0d0:	b928      	cbnz	r0, 802b0de <__multadd+0x5a>
 802b0d2:	4602      	mov	r2, r0
 802b0d4:	4b0c      	ldr	r3, [pc, #48]	@ (802b108 <__multadd+0x84>)
 802b0d6:	480d      	ldr	r0, [pc, #52]	@ (802b10c <__multadd+0x88>)
 802b0d8:	21ba      	movs	r1, #186	@ 0xba
 802b0da:	f7fb fb71 	bl	80267c0 <__assert_func>
 802b0de:	6922      	ldr	r2, [r4, #16]
 802b0e0:	3202      	adds	r2, #2
 802b0e2:	f104 010c 	add.w	r1, r4, #12
 802b0e6:	0092      	lsls	r2, r2, #2
 802b0e8:	300c      	adds	r0, #12
 802b0ea:	f7fe fd88 	bl	8029bfe <memcpy>
 802b0ee:	4621      	mov	r1, r4
 802b0f0:	4638      	mov	r0, r7
 802b0f2:	f7ff ffa5 	bl	802b040 <_Bfree>
 802b0f6:	4644      	mov	r4, r8
 802b0f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802b0fc:	3501      	adds	r5, #1
 802b0fe:	615e      	str	r6, [r3, #20]
 802b100:	6125      	str	r5, [r4, #16]
 802b102:	4620      	mov	r0, r4
 802b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b108:	0803eaa6 	.word	0x0803eaa6
 802b10c:	0803eb17 	.word	0x0803eb17

0802b110 <__s2b>:
 802b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b114:	460c      	mov	r4, r1
 802b116:	4615      	mov	r5, r2
 802b118:	461f      	mov	r7, r3
 802b11a:	2209      	movs	r2, #9
 802b11c:	3308      	adds	r3, #8
 802b11e:	4606      	mov	r6, r0
 802b120:	fb93 f3f2 	sdiv	r3, r3, r2
 802b124:	2100      	movs	r1, #0
 802b126:	2201      	movs	r2, #1
 802b128:	429a      	cmp	r2, r3
 802b12a:	db09      	blt.n	802b140 <__s2b+0x30>
 802b12c:	4630      	mov	r0, r6
 802b12e:	f7ff ff47 	bl	802afc0 <_Balloc>
 802b132:	b940      	cbnz	r0, 802b146 <__s2b+0x36>
 802b134:	4602      	mov	r2, r0
 802b136:	4b19      	ldr	r3, [pc, #100]	@ (802b19c <__s2b+0x8c>)
 802b138:	4819      	ldr	r0, [pc, #100]	@ (802b1a0 <__s2b+0x90>)
 802b13a:	21d3      	movs	r1, #211	@ 0xd3
 802b13c:	f7fb fb40 	bl	80267c0 <__assert_func>
 802b140:	0052      	lsls	r2, r2, #1
 802b142:	3101      	adds	r1, #1
 802b144:	e7f0      	b.n	802b128 <__s2b+0x18>
 802b146:	9b08      	ldr	r3, [sp, #32]
 802b148:	6143      	str	r3, [r0, #20]
 802b14a:	2d09      	cmp	r5, #9
 802b14c:	f04f 0301 	mov.w	r3, #1
 802b150:	6103      	str	r3, [r0, #16]
 802b152:	dd16      	ble.n	802b182 <__s2b+0x72>
 802b154:	f104 0909 	add.w	r9, r4, #9
 802b158:	46c8      	mov	r8, r9
 802b15a:	442c      	add	r4, r5
 802b15c:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b160:	4601      	mov	r1, r0
 802b162:	3b30      	subs	r3, #48	@ 0x30
 802b164:	220a      	movs	r2, #10
 802b166:	4630      	mov	r0, r6
 802b168:	f7ff ff8c 	bl	802b084 <__multadd>
 802b16c:	45a0      	cmp	r8, r4
 802b16e:	d1f5      	bne.n	802b15c <__s2b+0x4c>
 802b170:	f1a5 0408 	sub.w	r4, r5, #8
 802b174:	444c      	add	r4, r9
 802b176:	1b2d      	subs	r5, r5, r4
 802b178:	1963      	adds	r3, r4, r5
 802b17a:	42bb      	cmp	r3, r7
 802b17c:	db04      	blt.n	802b188 <__s2b+0x78>
 802b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b182:	340a      	adds	r4, #10
 802b184:	2509      	movs	r5, #9
 802b186:	e7f6      	b.n	802b176 <__s2b+0x66>
 802b188:	f814 3b01 	ldrb.w	r3, [r4], #1
 802b18c:	4601      	mov	r1, r0
 802b18e:	3b30      	subs	r3, #48	@ 0x30
 802b190:	220a      	movs	r2, #10
 802b192:	4630      	mov	r0, r6
 802b194:	f7ff ff76 	bl	802b084 <__multadd>
 802b198:	e7ee      	b.n	802b178 <__s2b+0x68>
 802b19a:	bf00      	nop
 802b19c:	0803eaa6 	.word	0x0803eaa6
 802b1a0:	0803eb17 	.word	0x0803eb17

0802b1a4 <__hi0bits>:
 802b1a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802b1a8:	4603      	mov	r3, r0
 802b1aa:	bf36      	itet	cc
 802b1ac:	0403      	lslcc	r3, r0, #16
 802b1ae:	2000      	movcs	r0, #0
 802b1b0:	2010      	movcc	r0, #16
 802b1b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802b1b6:	bf3c      	itt	cc
 802b1b8:	021b      	lslcc	r3, r3, #8
 802b1ba:	3008      	addcc	r0, #8
 802b1bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802b1c0:	bf3c      	itt	cc
 802b1c2:	011b      	lslcc	r3, r3, #4
 802b1c4:	3004      	addcc	r0, #4
 802b1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802b1ca:	bf3c      	itt	cc
 802b1cc:	009b      	lslcc	r3, r3, #2
 802b1ce:	3002      	addcc	r0, #2
 802b1d0:	2b00      	cmp	r3, #0
 802b1d2:	db05      	blt.n	802b1e0 <__hi0bits+0x3c>
 802b1d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802b1d8:	f100 0001 	add.w	r0, r0, #1
 802b1dc:	bf08      	it	eq
 802b1de:	2020      	moveq	r0, #32
 802b1e0:	4770      	bx	lr

0802b1e2 <__lo0bits>:
 802b1e2:	6803      	ldr	r3, [r0, #0]
 802b1e4:	4602      	mov	r2, r0
 802b1e6:	f013 0007 	ands.w	r0, r3, #7
 802b1ea:	d00b      	beq.n	802b204 <__lo0bits+0x22>
 802b1ec:	07d9      	lsls	r1, r3, #31
 802b1ee:	d421      	bmi.n	802b234 <__lo0bits+0x52>
 802b1f0:	0798      	lsls	r0, r3, #30
 802b1f2:	bf49      	itett	mi
 802b1f4:	085b      	lsrmi	r3, r3, #1
 802b1f6:	089b      	lsrpl	r3, r3, #2
 802b1f8:	2001      	movmi	r0, #1
 802b1fa:	6013      	strmi	r3, [r2, #0]
 802b1fc:	bf5c      	itt	pl
 802b1fe:	6013      	strpl	r3, [r2, #0]
 802b200:	2002      	movpl	r0, #2
 802b202:	4770      	bx	lr
 802b204:	b299      	uxth	r1, r3
 802b206:	b909      	cbnz	r1, 802b20c <__lo0bits+0x2a>
 802b208:	0c1b      	lsrs	r3, r3, #16
 802b20a:	2010      	movs	r0, #16
 802b20c:	b2d9      	uxtb	r1, r3
 802b20e:	b909      	cbnz	r1, 802b214 <__lo0bits+0x32>
 802b210:	3008      	adds	r0, #8
 802b212:	0a1b      	lsrs	r3, r3, #8
 802b214:	0719      	lsls	r1, r3, #28
 802b216:	bf04      	itt	eq
 802b218:	091b      	lsreq	r3, r3, #4
 802b21a:	3004      	addeq	r0, #4
 802b21c:	0799      	lsls	r1, r3, #30
 802b21e:	bf04      	itt	eq
 802b220:	089b      	lsreq	r3, r3, #2
 802b222:	3002      	addeq	r0, #2
 802b224:	07d9      	lsls	r1, r3, #31
 802b226:	d403      	bmi.n	802b230 <__lo0bits+0x4e>
 802b228:	085b      	lsrs	r3, r3, #1
 802b22a:	f100 0001 	add.w	r0, r0, #1
 802b22e:	d003      	beq.n	802b238 <__lo0bits+0x56>
 802b230:	6013      	str	r3, [r2, #0]
 802b232:	4770      	bx	lr
 802b234:	2000      	movs	r0, #0
 802b236:	4770      	bx	lr
 802b238:	2020      	movs	r0, #32
 802b23a:	4770      	bx	lr

0802b23c <__i2b>:
 802b23c:	b510      	push	{r4, lr}
 802b23e:	460c      	mov	r4, r1
 802b240:	2101      	movs	r1, #1
 802b242:	f7ff febd 	bl	802afc0 <_Balloc>
 802b246:	4602      	mov	r2, r0
 802b248:	b928      	cbnz	r0, 802b256 <__i2b+0x1a>
 802b24a:	4b05      	ldr	r3, [pc, #20]	@ (802b260 <__i2b+0x24>)
 802b24c:	4805      	ldr	r0, [pc, #20]	@ (802b264 <__i2b+0x28>)
 802b24e:	f240 1145 	movw	r1, #325	@ 0x145
 802b252:	f7fb fab5 	bl	80267c0 <__assert_func>
 802b256:	2301      	movs	r3, #1
 802b258:	6144      	str	r4, [r0, #20]
 802b25a:	6103      	str	r3, [r0, #16]
 802b25c:	bd10      	pop	{r4, pc}
 802b25e:	bf00      	nop
 802b260:	0803eaa6 	.word	0x0803eaa6
 802b264:	0803eb17 	.word	0x0803eb17

0802b268 <__multiply>:
 802b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b26c:	4617      	mov	r7, r2
 802b26e:	690a      	ldr	r2, [r1, #16]
 802b270:	693b      	ldr	r3, [r7, #16]
 802b272:	429a      	cmp	r2, r3
 802b274:	bfa8      	it	ge
 802b276:	463b      	movge	r3, r7
 802b278:	4689      	mov	r9, r1
 802b27a:	bfa4      	itt	ge
 802b27c:	460f      	movge	r7, r1
 802b27e:	4699      	movge	r9, r3
 802b280:	693d      	ldr	r5, [r7, #16]
 802b282:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802b286:	68bb      	ldr	r3, [r7, #8]
 802b288:	6879      	ldr	r1, [r7, #4]
 802b28a:	eb05 060a 	add.w	r6, r5, sl
 802b28e:	42b3      	cmp	r3, r6
 802b290:	b085      	sub	sp, #20
 802b292:	bfb8      	it	lt
 802b294:	3101      	addlt	r1, #1
 802b296:	f7ff fe93 	bl	802afc0 <_Balloc>
 802b29a:	b930      	cbnz	r0, 802b2aa <__multiply+0x42>
 802b29c:	4602      	mov	r2, r0
 802b29e:	4b41      	ldr	r3, [pc, #260]	@ (802b3a4 <__multiply+0x13c>)
 802b2a0:	4841      	ldr	r0, [pc, #260]	@ (802b3a8 <__multiply+0x140>)
 802b2a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802b2a6:	f7fb fa8b 	bl	80267c0 <__assert_func>
 802b2aa:	f100 0414 	add.w	r4, r0, #20
 802b2ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 802b2b2:	4623      	mov	r3, r4
 802b2b4:	2200      	movs	r2, #0
 802b2b6:	4573      	cmp	r3, lr
 802b2b8:	d320      	bcc.n	802b2fc <__multiply+0x94>
 802b2ba:	f107 0814 	add.w	r8, r7, #20
 802b2be:	f109 0114 	add.w	r1, r9, #20
 802b2c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 802b2c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 802b2ca:	9302      	str	r3, [sp, #8]
 802b2cc:	1beb      	subs	r3, r5, r7
 802b2ce:	3b15      	subs	r3, #21
 802b2d0:	f023 0303 	bic.w	r3, r3, #3
 802b2d4:	3304      	adds	r3, #4
 802b2d6:	3715      	adds	r7, #21
 802b2d8:	42bd      	cmp	r5, r7
 802b2da:	bf38      	it	cc
 802b2dc:	2304      	movcc	r3, #4
 802b2de:	9301      	str	r3, [sp, #4]
 802b2e0:	9b02      	ldr	r3, [sp, #8]
 802b2e2:	9103      	str	r1, [sp, #12]
 802b2e4:	428b      	cmp	r3, r1
 802b2e6:	d80c      	bhi.n	802b302 <__multiply+0x9a>
 802b2e8:	2e00      	cmp	r6, #0
 802b2ea:	dd03      	ble.n	802b2f4 <__multiply+0x8c>
 802b2ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802b2f0:	2b00      	cmp	r3, #0
 802b2f2:	d055      	beq.n	802b3a0 <__multiply+0x138>
 802b2f4:	6106      	str	r6, [r0, #16]
 802b2f6:	b005      	add	sp, #20
 802b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b2fc:	f843 2b04 	str.w	r2, [r3], #4
 802b300:	e7d9      	b.n	802b2b6 <__multiply+0x4e>
 802b302:	f8b1 a000 	ldrh.w	sl, [r1]
 802b306:	f1ba 0f00 	cmp.w	sl, #0
 802b30a:	d01f      	beq.n	802b34c <__multiply+0xe4>
 802b30c:	46c4      	mov	ip, r8
 802b30e:	46a1      	mov	r9, r4
 802b310:	2700      	movs	r7, #0
 802b312:	f85c 2b04 	ldr.w	r2, [ip], #4
 802b316:	f8d9 3000 	ldr.w	r3, [r9]
 802b31a:	fa1f fb82 	uxth.w	fp, r2
 802b31e:	b29b      	uxth	r3, r3
 802b320:	fb0a 330b 	mla	r3, sl, fp, r3
 802b324:	443b      	add	r3, r7
 802b326:	f8d9 7000 	ldr.w	r7, [r9]
 802b32a:	0c12      	lsrs	r2, r2, #16
 802b32c:	0c3f      	lsrs	r7, r7, #16
 802b32e:	fb0a 7202 	mla	r2, sl, r2, r7
 802b332:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 802b336:	b29b      	uxth	r3, r3
 802b338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b33c:	4565      	cmp	r5, ip
 802b33e:	f849 3b04 	str.w	r3, [r9], #4
 802b342:	ea4f 4712 	mov.w	r7, r2, lsr #16
 802b346:	d8e4      	bhi.n	802b312 <__multiply+0xaa>
 802b348:	9b01      	ldr	r3, [sp, #4]
 802b34a:	50e7      	str	r7, [r4, r3]
 802b34c:	9b03      	ldr	r3, [sp, #12]
 802b34e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802b352:	3104      	adds	r1, #4
 802b354:	f1b9 0f00 	cmp.w	r9, #0
 802b358:	d020      	beq.n	802b39c <__multiply+0x134>
 802b35a:	6823      	ldr	r3, [r4, #0]
 802b35c:	4647      	mov	r7, r8
 802b35e:	46a4      	mov	ip, r4
 802b360:	f04f 0a00 	mov.w	sl, #0
 802b364:	f8b7 b000 	ldrh.w	fp, [r7]
 802b368:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 802b36c:	fb09 220b 	mla	r2, r9, fp, r2
 802b370:	4452      	add	r2, sl
 802b372:	b29b      	uxth	r3, r3
 802b374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b378:	f84c 3b04 	str.w	r3, [ip], #4
 802b37c:	f857 3b04 	ldr.w	r3, [r7], #4
 802b380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b384:	f8bc 3000 	ldrh.w	r3, [ip]
 802b388:	fb09 330a 	mla	r3, r9, sl, r3
 802b38c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 802b390:	42bd      	cmp	r5, r7
 802b392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b396:	d8e5      	bhi.n	802b364 <__multiply+0xfc>
 802b398:	9a01      	ldr	r2, [sp, #4]
 802b39a:	50a3      	str	r3, [r4, r2]
 802b39c:	3404      	adds	r4, #4
 802b39e:	e79f      	b.n	802b2e0 <__multiply+0x78>
 802b3a0:	3e01      	subs	r6, #1
 802b3a2:	e7a1      	b.n	802b2e8 <__multiply+0x80>
 802b3a4:	0803eaa6 	.word	0x0803eaa6
 802b3a8:	0803eb17 	.word	0x0803eb17

0802b3ac <__pow5mult>:
 802b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b3b0:	4615      	mov	r5, r2
 802b3b2:	f012 0203 	ands.w	r2, r2, #3
 802b3b6:	4607      	mov	r7, r0
 802b3b8:	460e      	mov	r6, r1
 802b3ba:	d007      	beq.n	802b3cc <__pow5mult+0x20>
 802b3bc:	4c25      	ldr	r4, [pc, #148]	@ (802b454 <__pow5mult+0xa8>)
 802b3be:	3a01      	subs	r2, #1
 802b3c0:	2300      	movs	r3, #0
 802b3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802b3c6:	f7ff fe5d 	bl	802b084 <__multadd>
 802b3ca:	4606      	mov	r6, r0
 802b3cc:	10ad      	asrs	r5, r5, #2
 802b3ce:	d03d      	beq.n	802b44c <__pow5mult+0xa0>
 802b3d0:	69fc      	ldr	r4, [r7, #28]
 802b3d2:	b97c      	cbnz	r4, 802b3f4 <__pow5mult+0x48>
 802b3d4:	2010      	movs	r0, #16
 802b3d6:	f7fb fa35 	bl	8026844 <malloc>
 802b3da:	4602      	mov	r2, r0
 802b3dc:	61f8      	str	r0, [r7, #28]
 802b3de:	b928      	cbnz	r0, 802b3ec <__pow5mult+0x40>
 802b3e0:	4b1d      	ldr	r3, [pc, #116]	@ (802b458 <__pow5mult+0xac>)
 802b3e2:	481e      	ldr	r0, [pc, #120]	@ (802b45c <__pow5mult+0xb0>)
 802b3e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802b3e8:	f7fb f9ea 	bl	80267c0 <__assert_func>
 802b3ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802b3f0:	6004      	str	r4, [r0, #0]
 802b3f2:	60c4      	str	r4, [r0, #12]
 802b3f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802b3f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802b3fc:	b94c      	cbnz	r4, 802b412 <__pow5mult+0x66>
 802b3fe:	f240 2171 	movw	r1, #625	@ 0x271
 802b402:	4638      	mov	r0, r7
 802b404:	f7ff ff1a 	bl	802b23c <__i2b>
 802b408:	2300      	movs	r3, #0
 802b40a:	f8c8 0008 	str.w	r0, [r8, #8]
 802b40e:	4604      	mov	r4, r0
 802b410:	6003      	str	r3, [r0, #0]
 802b412:	f04f 0900 	mov.w	r9, #0
 802b416:	07eb      	lsls	r3, r5, #31
 802b418:	d50a      	bpl.n	802b430 <__pow5mult+0x84>
 802b41a:	4631      	mov	r1, r6
 802b41c:	4622      	mov	r2, r4
 802b41e:	4638      	mov	r0, r7
 802b420:	f7ff ff22 	bl	802b268 <__multiply>
 802b424:	4631      	mov	r1, r6
 802b426:	4680      	mov	r8, r0
 802b428:	4638      	mov	r0, r7
 802b42a:	f7ff fe09 	bl	802b040 <_Bfree>
 802b42e:	4646      	mov	r6, r8
 802b430:	106d      	asrs	r5, r5, #1
 802b432:	d00b      	beq.n	802b44c <__pow5mult+0xa0>
 802b434:	6820      	ldr	r0, [r4, #0]
 802b436:	b938      	cbnz	r0, 802b448 <__pow5mult+0x9c>
 802b438:	4622      	mov	r2, r4
 802b43a:	4621      	mov	r1, r4
 802b43c:	4638      	mov	r0, r7
 802b43e:	f7ff ff13 	bl	802b268 <__multiply>
 802b442:	6020      	str	r0, [r4, #0]
 802b444:	f8c0 9000 	str.w	r9, [r0]
 802b448:	4604      	mov	r4, r0
 802b44a:	e7e4      	b.n	802b416 <__pow5mult+0x6a>
 802b44c:	4630      	mov	r0, r6
 802b44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b452:	bf00      	nop
 802b454:	0803ee80 	.word	0x0803ee80
 802b458:	0803e80e 	.word	0x0803e80e
 802b45c:	0803eb17 	.word	0x0803eb17

0802b460 <__lshift>:
 802b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b464:	460c      	mov	r4, r1
 802b466:	6849      	ldr	r1, [r1, #4]
 802b468:	6923      	ldr	r3, [r4, #16]
 802b46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802b46e:	68a3      	ldr	r3, [r4, #8]
 802b470:	4607      	mov	r7, r0
 802b472:	4691      	mov	r9, r2
 802b474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802b478:	f108 0601 	add.w	r6, r8, #1
 802b47c:	42b3      	cmp	r3, r6
 802b47e:	db0b      	blt.n	802b498 <__lshift+0x38>
 802b480:	4638      	mov	r0, r7
 802b482:	f7ff fd9d 	bl	802afc0 <_Balloc>
 802b486:	4605      	mov	r5, r0
 802b488:	b948      	cbnz	r0, 802b49e <__lshift+0x3e>
 802b48a:	4602      	mov	r2, r0
 802b48c:	4b28      	ldr	r3, [pc, #160]	@ (802b530 <__lshift+0xd0>)
 802b48e:	4829      	ldr	r0, [pc, #164]	@ (802b534 <__lshift+0xd4>)
 802b490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802b494:	f7fb f994 	bl	80267c0 <__assert_func>
 802b498:	3101      	adds	r1, #1
 802b49a:	005b      	lsls	r3, r3, #1
 802b49c:	e7ee      	b.n	802b47c <__lshift+0x1c>
 802b49e:	2300      	movs	r3, #0
 802b4a0:	f100 0114 	add.w	r1, r0, #20
 802b4a4:	f100 0210 	add.w	r2, r0, #16
 802b4a8:	4618      	mov	r0, r3
 802b4aa:	4553      	cmp	r3, sl
 802b4ac:	db33      	blt.n	802b516 <__lshift+0xb6>
 802b4ae:	6920      	ldr	r0, [r4, #16]
 802b4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802b4b4:	f104 0314 	add.w	r3, r4, #20
 802b4b8:	f019 091f 	ands.w	r9, r9, #31
 802b4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802b4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802b4c4:	d02b      	beq.n	802b51e <__lshift+0xbe>
 802b4c6:	f1c9 0e20 	rsb	lr, r9, #32
 802b4ca:	468a      	mov	sl, r1
 802b4cc:	2200      	movs	r2, #0
 802b4ce:	6818      	ldr	r0, [r3, #0]
 802b4d0:	fa00 f009 	lsl.w	r0, r0, r9
 802b4d4:	4310      	orrs	r0, r2
 802b4d6:	f84a 0b04 	str.w	r0, [sl], #4
 802b4da:	f853 2b04 	ldr.w	r2, [r3], #4
 802b4de:	459c      	cmp	ip, r3
 802b4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 802b4e4:	d8f3      	bhi.n	802b4ce <__lshift+0x6e>
 802b4e6:	ebac 0304 	sub.w	r3, ip, r4
 802b4ea:	3b15      	subs	r3, #21
 802b4ec:	f023 0303 	bic.w	r3, r3, #3
 802b4f0:	3304      	adds	r3, #4
 802b4f2:	f104 0015 	add.w	r0, r4, #21
 802b4f6:	4560      	cmp	r0, ip
 802b4f8:	bf88      	it	hi
 802b4fa:	2304      	movhi	r3, #4
 802b4fc:	50ca      	str	r2, [r1, r3]
 802b4fe:	b10a      	cbz	r2, 802b504 <__lshift+0xa4>
 802b500:	f108 0602 	add.w	r6, r8, #2
 802b504:	3e01      	subs	r6, #1
 802b506:	4638      	mov	r0, r7
 802b508:	612e      	str	r6, [r5, #16]
 802b50a:	4621      	mov	r1, r4
 802b50c:	f7ff fd98 	bl	802b040 <_Bfree>
 802b510:	4628      	mov	r0, r5
 802b512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b516:	f842 0f04 	str.w	r0, [r2, #4]!
 802b51a:	3301      	adds	r3, #1
 802b51c:	e7c5      	b.n	802b4aa <__lshift+0x4a>
 802b51e:	3904      	subs	r1, #4
 802b520:	f853 2b04 	ldr.w	r2, [r3], #4
 802b524:	f841 2f04 	str.w	r2, [r1, #4]!
 802b528:	459c      	cmp	ip, r3
 802b52a:	d8f9      	bhi.n	802b520 <__lshift+0xc0>
 802b52c:	e7ea      	b.n	802b504 <__lshift+0xa4>
 802b52e:	bf00      	nop
 802b530:	0803eaa6 	.word	0x0803eaa6
 802b534:	0803eb17 	.word	0x0803eb17

0802b538 <__mcmp>:
 802b538:	690a      	ldr	r2, [r1, #16]
 802b53a:	4603      	mov	r3, r0
 802b53c:	6900      	ldr	r0, [r0, #16]
 802b53e:	1a80      	subs	r0, r0, r2
 802b540:	b530      	push	{r4, r5, lr}
 802b542:	d10e      	bne.n	802b562 <__mcmp+0x2a>
 802b544:	3314      	adds	r3, #20
 802b546:	3114      	adds	r1, #20
 802b548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802b54c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802b550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802b554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802b558:	4295      	cmp	r5, r2
 802b55a:	d003      	beq.n	802b564 <__mcmp+0x2c>
 802b55c:	d205      	bcs.n	802b56a <__mcmp+0x32>
 802b55e:	f04f 30ff 	mov.w	r0, #4294967295
 802b562:	bd30      	pop	{r4, r5, pc}
 802b564:	42a3      	cmp	r3, r4
 802b566:	d3f3      	bcc.n	802b550 <__mcmp+0x18>
 802b568:	e7fb      	b.n	802b562 <__mcmp+0x2a>
 802b56a:	2001      	movs	r0, #1
 802b56c:	e7f9      	b.n	802b562 <__mcmp+0x2a>
	...

0802b570 <__mdiff>:
 802b570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b574:	4689      	mov	r9, r1
 802b576:	4606      	mov	r6, r0
 802b578:	4611      	mov	r1, r2
 802b57a:	4648      	mov	r0, r9
 802b57c:	4614      	mov	r4, r2
 802b57e:	f7ff ffdb 	bl	802b538 <__mcmp>
 802b582:	1e05      	subs	r5, r0, #0
 802b584:	d112      	bne.n	802b5ac <__mdiff+0x3c>
 802b586:	4629      	mov	r1, r5
 802b588:	4630      	mov	r0, r6
 802b58a:	f7ff fd19 	bl	802afc0 <_Balloc>
 802b58e:	4602      	mov	r2, r0
 802b590:	b928      	cbnz	r0, 802b59e <__mdiff+0x2e>
 802b592:	4b3f      	ldr	r3, [pc, #252]	@ (802b690 <__mdiff+0x120>)
 802b594:	f240 2137 	movw	r1, #567	@ 0x237
 802b598:	483e      	ldr	r0, [pc, #248]	@ (802b694 <__mdiff+0x124>)
 802b59a:	f7fb f911 	bl	80267c0 <__assert_func>
 802b59e:	2301      	movs	r3, #1
 802b5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802b5a4:	4610      	mov	r0, r2
 802b5a6:	b003      	add	sp, #12
 802b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b5ac:	bfbc      	itt	lt
 802b5ae:	464b      	movlt	r3, r9
 802b5b0:	46a1      	movlt	r9, r4
 802b5b2:	4630      	mov	r0, r6
 802b5b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802b5b8:	bfba      	itte	lt
 802b5ba:	461c      	movlt	r4, r3
 802b5bc:	2501      	movlt	r5, #1
 802b5be:	2500      	movge	r5, #0
 802b5c0:	f7ff fcfe 	bl	802afc0 <_Balloc>
 802b5c4:	4602      	mov	r2, r0
 802b5c6:	b918      	cbnz	r0, 802b5d0 <__mdiff+0x60>
 802b5c8:	4b31      	ldr	r3, [pc, #196]	@ (802b690 <__mdiff+0x120>)
 802b5ca:	f240 2145 	movw	r1, #581	@ 0x245
 802b5ce:	e7e3      	b.n	802b598 <__mdiff+0x28>
 802b5d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802b5d4:	6926      	ldr	r6, [r4, #16]
 802b5d6:	60c5      	str	r5, [r0, #12]
 802b5d8:	f109 0310 	add.w	r3, r9, #16
 802b5dc:	f109 0514 	add.w	r5, r9, #20
 802b5e0:	f104 0e14 	add.w	lr, r4, #20
 802b5e4:	f100 0b14 	add.w	fp, r0, #20
 802b5e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802b5ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802b5f0:	9301      	str	r3, [sp, #4]
 802b5f2:	46d9      	mov	r9, fp
 802b5f4:	f04f 0c00 	mov.w	ip, #0
 802b5f8:	9b01      	ldr	r3, [sp, #4]
 802b5fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 802b5fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 802b602:	9301      	str	r3, [sp, #4]
 802b604:	fa1f f38a 	uxth.w	r3, sl
 802b608:	4619      	mov	r1, r3
 802b60a:	b283      	uxth	r3, r0
 802b60c:	1acb      	subs	r3, r1, r3
 802b60e:	0c00      	lsrs	r0, r0, #16
 802b610:	4463      	add	r3, ip
 802b612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802b616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802b61a:	b29b      	uxth	r3, r3
 802b61c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802b620:	4576      	cmp	r6, lr
 802b622:	f849 3b04 	str.w	r3, [r9], #4
 802b626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802b62a:	d8e5      	bhi.n	802b5f8 <__mdiff+0x88>
 802b62c:	1b33      	subs	r3, r6, r4
 802b62e:	3b15      	subs	r3, #21
 802b630:	f023 0303 	bic.w	r3, r3, #3
 802b634:	3415      	adds	r4, #21
 802b636:	3304      	adds	r3, #4
 802b638:	42a6      	cmp	r6, r4
 802b63a:	bf38      	it	cc
 802b63c:	2304      	movcc	r3, #4
 802b63e:	441d      	add	r5, r3
 802b640:	445b      	add	r3, fp
 802b642:	461e      	mov	r6, r3
 802b644:	462c      	mov	r4, r5
 802b646:	4544      	cmp	r4, r8
 802b648:	d30e      	bcc.n	802b668 <__mdiff+0xf8>
 802b64a:	f108 0103 	add.w	r1, r8, #3
 802b64e:	1b49      	subs	r1, r1, r5
 802b650:	f021 0103 	bic.w	r1, r1, #3
 802b654:	3d03      	subs	r5, #3
 802b656:	45a8      	cmp	r8, r5
 802b658:	bf38      	it	cc
 802b65a:	2100      	movcc	r1, #0
 802b65c:	440b      	add	r3, r1
 802b65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802b662:	b191      	cbz	r1, 802b68a <__mdiff+0x11a>
 802b664:	6117      	str	r7, [r2, #16]
 802b666:	e79d      	b.n	802b5a4 <__mdiff+0x34>
 802b668:	f854 1b04 	ldr.w	r1, [r4], #4
 802b66c:	46e6      	mov	lr, ip
 802b66e:	0c08      	lsrs	r0, r1, #16
 802b670:	fa1c fc81 	uxtah	ip, ip, r1
 802b674:	4471      	add	r1, lr
 802b676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802b67a:	b289      	uxth	r1, r1
 802b67c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802b680:	f846 1b04 	str.w	r1, [r6], #4
 802b684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802b688:	e7dd      	b.n	802b646 <__mdiff+0xd6>
 802b68a:	3f01      	subs	r7, #1
 802b68c:	e7e7      	b.n	802b65e <__mdiff+0xee>
 802b68e:	bf00      	nop
 802b690:	0803eaa6 	.word	0x0803eaa6
 802b694:	0803eb17 	.word	0x0803eb17

0802b698 <__ulp>:
 802b698:	b082      	sub	sp, #8
 802b69a:	ed8d 0b00 	vstr	d0, [sp]
 802b69e:	9a01      	ldr	r2, [sp, #4]
 802b6a0:	4b0f      	ldr	r3, [pc, #60]	@ (802b6e0 <__ulp+0x48>)
 802b6a2:	4013      	ands	r3, r2
 802b6a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802b6a8:	2b00      	cmp	r3, #0
 802b6aa:	dc08      	bgt.n	802b6be <__ulp+0x26>
 802b6ac:	425b      	negs	r3, r3
 802b6ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802b6b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 802b6b6:	da04      	bge.n	802b6c2 <__ulp+0x2a>
 802b6b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802b6bc:	4113      	asrs	r3, r2
 802b6be:	2200      	movs	r2, #0
 802b6c0:	e008      	b.n	802b6d4 <__ulp+0x3c>
 802b6c2:	f1a2 0314 	sub.w	r3, r2, #20
 802b6c6:	2b1e      	cmp	r3, #30
 802b6c8:	bfda      	itte	le
 802b6ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802b6ce:	40da      	lsrle	r2, r3
 802b6d0:	2201      	movgt	r2, #1
 802b6d2:	2300      	movs	r3, #0
 802b6d4:	4619      	mov	r1, r3
 802b6d6:	4610      	mov	r0, r2
 802b6d8:	ec41 0b10 	vmov	d0, r0, r1
 802b6dc:	b002      	add	sp, #8
 802b6de:	4770      	bx	lr
 802b6e0:	7ff00000 	.word	0x7ff00000

0802b6e4 <__b2d>:
 802b6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b6e8:	6906      	ldr	r6, [r0, #16]
 802b6ea:	f100 0814 	add.w	r8, r0, #20
 802b6ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802b6f2:	1f37      	subs	r7, r6, #4
 802b6f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802b6f8:	4610      	mov	r0, r2
 802b6fa:	f7ff fd53 	bl	802b1a4 <__hi0bits>
 802b6fe:	f1c0 0320 	rsb	r3, r0, #32
 802b702:	280a      	cmp	r0, #10
 802b704:	600b      	str	r3, [r1, #0]
 802b706:	491b      	ldr	r1, [pc, #108]	@ (802b774 <__b2d+0x90>)
 802b708:	dc15      	bgt.n	802b736 <__b2d+0x52>
 802b70a:	f1c0 0c0b 	rsb	ip, r0, #11
 802b70e:	fa22 f30c 	lsr.w	r3, r2, ip
 802b712:	45b8      	cmp	r8, r7
 802b714:	ea43 0501 	orr.w	r5, r3, r1
 802b718:	bf34      	ite	cc
 802b71a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802b71e:	2300      	movcs	r3, #0
 802b720:	3015      	adds	r0, #21
 802b722:	fa02 f000 	lsl.w	r0, r2, r0
 802b726:	fa23 f30c 	lsr.w	r3, r3, ip
 802b72a:	4303      	orrs	r3, r0
 802b72c:	461c      	mov	r4, r3
 802b72e:	ec45 4b10 	vmov	d0, r4, r5
 802b732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b736:	45b8      	cmp	r8, r7
 802b738:	bf3a      	itte	cc
 802b73a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802b73e:	f1a6 0708 	subcc.w	r7, r6, #8
 802b742:	2300      	movcs	r3, #0
 802b744:	380b      	subs	r0, #11
 802b746:	d012      	beq.n	802b76e <__b2d+0x8a>
 802b748:	f1c0 0120 	rsb	r1, r0, #32
 802b74c:	fa23 f401 	lsr.w	r4, r3, r1
 802b750:	4082      	lsls	r2, r0
 802b752:	4322      	orrs	r2, r4
 802b754:	4547      	cmp	r7, r8
 802b756:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802b75a:	bf8c      	ite	hi
 802b75c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802b760:	2200      	movls	r2, #0
 802b762:	4083      	lsls	r3, r0
 802b764:	40ca      	lsrs	r2, r1
 802b766:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802b76a:	4313      	orrs	r3, r2
 802b76c:	e7de      	b.n	802b72c <__b2d+0x48>
 802b76e:	ea42 0501 	orr.w	r5, r2, r1
 802b772:	e7db      	b.n	802b72c <__b2d+0x48>
 802b774:	3ff00000 	.word	0x3ff00000

0802b778 <__d2b>:
 802b778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802b77c:	460f      	mov	r7, r1
 802b77e:	2101      	movs	r1, #1
 802b780:	ec59 8b10 	vmov	r8, r9, d0
 802b784:	4616      	mov	r6, r2
 802b786:	f7ff fc1b 	bl	802afc0 <_Balloc>
 802b78a:	4604      	mov	r4, r0
 802b78c:	b930      	cbnz	r0, 802b79c <__d2b+0x24>
 802b78e:	4602      	mov	r2, r0
 802b790:	4b23      	ldr	r3, [pc, #140]	@ (802b820 <__d2b+0xa8>)
 802b792:	4824      	ldr	r0, [pc, #144]	@ (802b824 <__d2b+0xac>)
 802b794:	f240 310f 	movw	r1, #783	@ 0x30f
 802b798:	f7fb f812 	bl	80267c0 <__assert_func>
 802b79c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802b7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802b7a4:	b10d      	cbz	r5, 802b7aa <__d2b+0x32>
 802b7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802b7aa:	9301      	str	r3, [sp, #4]
 802b7ac:	f1b8 0300 	subs.w	r3, r8, #0
 802b7b0:	d023      	beq.n	802b7fa <__d2b+0x82>
 802b7b2:	4668      	mov	r0, sp
 802b7b4:	9300      	str	r3, [sp, #0]
 802b7b6:	f7ff fd14 	bl	802b1e2 <__lo0bits>
 802b7ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 802b7be:	b1d0      	cbz	r0, 802b7f6 <__d2b+0x7e>
 802b7c0:	f1c0 0320 	rsb	r3, r0, #32
 802b7c4:	fa02 f303 	lsl.w	r3, r2, r3
 802b7c8:	430b      	orrs	r3, r1
 802b7ca:	40c2      	lsrs	r2, r0
 802b7cc:	6163      	str	r3, [r4, #20]
 802b7ce:	9201      	str	r2, [sp, #4]
 802b7d0:	9b01      	ldr	r3, [sp, #4]
 802b7d2:	61a3      	str	r3, [r4, #24]
 802b7d4:	2b00      	cmp	r3, #0
 802b7d6:	bf0c      	ite	eq
 802b7d8:	2201      	moveq	r2, #1
 802b7da:	2202      	movne	r2, #2
 802b7dc:	6122      	str	r2, [r4, #16]
 802b7de:	b1a5      	cbz	r5, 802b80a <__d2b+0x92>
 802b7e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802b7e4:	4405      	add	r5, r0
 802b7e6:	603d      	str	r5, [r7, #0]
 802b7e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802b7ec:	6030      	str	r0, [r6, #0]
 802b7ee:	4620      	mov	r0, r4
 802b7f0:	b003      	add	sp, #12
 802b7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b7f6:	6161      	str	r1, [r4, #20]
 802b7f8:	e7ea      	b.n	802b7d0 <__d2b+0x58>
 802b7fa:	a801      	add	r0, sp, #4
 802b7fc:	f7ff fcf1 	bl	802b1e2 <__lo0bits>
 802b800:	9b01      	ldr	r3, [sp, #4]
 802b802:	6163      	str	r3, [r4, #20]
 802b804:	3020      	adds	r0, #32
 802b806:	2201      	movs	r2, #1
 802b808:	e7e8      	b.n	802b7dc <__d2b+0x64>
 802b80a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802b80e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802b812:	6038      	str	r0, [r7, #0]
 802b814:	6918      	ldr	r0, [r3, #16]
 802b816:	f7ff fcc5 	bl	802b1a4 <__hi0bits>
 802b81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802b81e:	e7e5      	b.n	802b7ec <__d2b+0x74>
 802b820:	0803eaa6 	.word	0x0803eaa6
 802b824:	0803eb17 	.word	0x0803eb17

0802b828 <__ratio>:
 802b828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b82c:	4688      	mov	r8, r1
 802b82e:	4669      	mov	r1, sp
 802b830:	4681      	mov	r9, r0
 802b832:	f7ff ff57 	bl	802b6e4 <__b2d>
 802b836:	a901      	add	r1, sp, #4
 802b838:	4640      	mov	r0, r8
 802b83a:	ec55 4b10 	vmov	r4, r5, d0
 802b83e:	f7ff ff51 	bl	802b6e4 <__b2d>
 802b842:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802b846:	f8d9 2010 	ldr.w	r2, [r9, #16]
 802b84a:	1ad2      	subs	r2, r2, r3
 802b84c:	e9dd 3100 	ldrd	r3, r1, [sp]
 802b850:	1a5b      	subs	r3, r3, r1
 802b852:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802b856:	ec57 6b10 	vmov	r6, r7, d0
 802b85a:	2b00      	cmp	r3, #0
 802b85c:	bfd6      	itet	le
 802b85e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802b862:	462a      	movgt	r2, r5
 802b864:	463a      	movle	r2, r7
 802b866:	46ab      	mov	fp, r5
 802b868:	46a2      	mov	sl, r4
 802b86a:	bfce      	itee	gt
 802b86c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 802b870:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 802b874:	ee00 3a90 	vmovle	s1, r3
 802b878:	ec4b ab17 	vmov	d7, sl, fp
 802b87c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 802b880:	b003      	add	sp, #12
 802b882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b886 <__copybits>:
 802b886:	3901      	subs	r1, #1
 802b888:	b570      	push	{r4, r5, r6, lr}
 802b88a:	1149      	asrs	r1, r1, #5
 802b88c:	6914      	ldr	r4, [r2, #16]
 802b88e:	3101      	adds	r1, #1
 802b890:	f102 0314 	add.w	r3, r2, #20
 802b894:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802b898:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802b89c:	1f05      	subs	r5, r0, #4
 802b89e:	42a3      	cmp	r3, r4
 802b8a0:	d30c      	bcc.n	802b8bc <__copybits+0x36>
 802b8a2:	1aa3      	subs	r3, r4, r2
 802b8a4:	3b11      	subs	r3, #17
 802b8a6:	f023 0303 	bic.w	r3, r3, #3
 802b8aa:	3211      	adds	r2, #17
 802b8ac:	42a2      	cmp	r2, r4
 802b8ae:	bf88      	it	hi
 802b8b0:	2300      	movhi	r3, #0
 802b8b2:	4418      	add	r0, r3
 802b8b4:	2300      	movs	r3, #0
 802b8b6:	4288      	cmp	r0, r1
 802b8b8:	d305      	bcc.n	802b8c6 <__copybits+0x40>
 802b8ba:	bd70      	pop	{r4, r5, r6, pc}
 802b8bc:	f853 6b04 	ldr.w	r6, [r3], #4
 802b8c0:	f845 6f04 	str.w	r6, [r5, #4]!
 802b8c4:	e7eb      	b.n	802b89e <__copybits+0x18>
 802b8c6:	f840 3b04 	str.w	r3, [r0], #4
 802b8ca:	e7f4      	b.n	802b8b6 <__copybits+0x30>

0802b8cc <__any_on>:
 802b8cc:	f100 0214 	add.w	r2, r0, #20
 802b8d0:	6900      	ldr	r0, [r0, #16]
 802b8d2:	114b      	asrs	r3, r1, #5
 802b8d4:	4298      	cmp	r0, r3
 802b8d6:	b510      	push	{r4, lr}
 802b8d8:	db11      	blt.n	802b8fe <__any_on+0x32>
 802b8da:	dd0a      	ble.n	802b8f2 <__any_on+0x26>
 802b8dc:	f011 011f 	ands.w	r1, r1, #31
 802b8e0:	d007      	beq.n	802b8f2 <__any_on+0x26>
 802b8e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802b8e6:	fa24 f001 	lsr.w	r0, r4, r1
 802b8ea:	fa00 f101 	lsl.w	r1, r0, r1
 802b8ee:	428c      	cmp	r4, r1
 802b8f0:	d10b      	bne.n	802b90a <__any_on+0x3e>
 802b8f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802b8f6:	4293      	cmp	r3, r2
 802b8f8:	d803      	bhi.n	802b902 <__any_on+0x36>
 802b8fa:	2000      	movs	r0, #0
 802b8fc:	bd10      	pop	{r4, pc}
 802b8fe:	4603      	mov	r3, r0
 802b900:	e7f7      	b.n	802b8f2 <__any_on+0x26>
 802b902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802b906:	2900      	cmp	r1, #0
 802b908:	d0f5      	beq.n	802b8f6 <__any_on+0x2a>
 802b90a:	2001      	movs	r0, #1
 802b90c:	e7f6      	b.n	802b8fc <__any_on+0x30>

0802b90e <_malloc_usable_size_r>:
 802b90e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b912:	1f18      	subs	r0, r3, #4
 802b914:	2b00      	cmp	r3, #0
 802b916:	bfbc      	itt	lt
 802b918:	580b      	ldrlt	r3, [r1, r0]
 802b91a:	18c0      	addlt	r0, r0, r3
 802b91c:	4770      	bx	lr

0802b91e <__ascii_wctomb>:
 802b91e:	4603      	mov	r3, r0
 802b920:	4608      	mov	r0, r1
 802b922:	b141      	cbz	r1, 802b936 <__ascii_wctomb+0x18>
 802b924:	2aff      	cmp	r2, #255	@ 0xff
 802b926:	d904      	bls.n	802b932 <__ascii_wctomb+0x14>
 802b928:	228a      	movs	r2, #138	@ 0x8a
 802b92a:	601a      	str	r2, [r3, #0]
 802b92c:	f04f 30ff 	mov.w	r0, #4294967295
 802b930:	4770      	bx	lr
 802b932:	700a      	strb	r2, [r1, #0]
 802b934:	2001      	movs	r0, #1
 802b936:	4770      	bx	lr

0802b938 <_strtoll_l.isra.0>:
 802b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b93c:	b085      	sub	sp, #20
 802b93e:	4690      	mov	r8, r2
 802b940:	4a43      	ldr	r2, [pc, #268]	@ (802ba50 <_strtoll_l.isra.0+0x118>)
 802b942:	9002      	str	r0, [sp, #8]
 802b944:	4689      	mov	r9, r1
 802b946:	461e      	mov	r6, r3
 802b948:	460d      	mov	r5, r1
 802b94a:	462b      	mov	r3, r5
 802b94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b950:	5d17      	ldrb	r7, [r2, r4]
 802b952:	f017 0708 	ands.w	r7, r7, #8
 802b956:	d1f8      	bne.n	802b94a <_strtoll_l.isra.0+0x12>
 802b958:	2c2d      	cmp	r4, #45	@ 0x2d
 802b95a:	d110      	bne.n	802b97e <_strtoll_l.isra.0+0x46>
 802b95c:	782c      	ldrb	r4, [r5, #0]
 802b95e:	2701      	movs	r7, #1
 802b960:	1c9d      	adds	r5, r3, #2
 802b962:	f036 0310 	bics.w	r3, r6, #16
 802b966:	d115      	bne.n	802b994 <_strtoll_l.isra.0+0x5c>
 802b968:	2c30      	cmp	r4, #48	@ 0x30
 802b96a:	d10d      	bne.n	802b988 <_strtoll_l.isra.0+0x50>
 802b96c:	782b      	ldrb	r3, [r5, #0]
 802b96e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802b972:	2b58      	cmp	r3, #88	@ 0x58
 802b974:	d108      	bne.n	802b988 <_strtoll_l.isra.0+0x50>
 802b976:	786c      	ldrb	r4, [r5, #1]
 802b978:	3502      	adds	r5, #2
 802b97a:	2610      	movs	r6, #16
 802b97c:	e00a      	b.n	802b994 <_strtoll_l.isra.0+0x5c>
 802b97e:	2c2b      	cmp	r4, #43	@ 0x2b
 802b980:	bf04      	itt	eq
 802b982:	782c      	ldrbeq	r4, [r5, #0]
 802b984:	1c9d      	addeq	r5, r3, #2
 802b986:	e7ec      	b.n	802b962 <_strtoll_l.isra.0+0x2a>
 802b988:	2e00      	cmp	r6, #0
 802b98a:	d1f6      	bne.n	802b97a <_strtoll_l.isra.0+0x42>
 802b98c:	2c30      	cmp	r4, #48	@ 0x30
 802b98e:	bf14      	ite	ne
 802b990:	260a      	movne	r6, #10
 802b992:	2608      	moveq	r6, #8
 802b994:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 802b998:	f107 3bff 	add.w	fp, r7, #4294967295
 802b99c:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b9a0:	17f3      	asrs	r3, r6, #31
 802b9a2:	4632      	mov	r2, r6
 802b9a4:	4658      	mov	r0, fp
 802b9a6:	4651      	mov	r1, sl
 802b9a8:	9303      	str	r3, [sp, #12]
 802b9aa:	f7d4 ff25 	bl	80007f8 <__aeabi_uldivmod>
 802b9ae:	9201      	str	r2, [sp, #4]
 802b9b0:	2200      	movs	r2, #0
 802b9b2:	468e      	mov	lr, r1
 802b9b4:	4684      	mov	ip, r0
 802b9b6:	4611      	mov	r1, r2
 802b9b8:	4610      	mov	r0, r2
 802b9ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802b9be:	2b09      	cmp	r3, #9
 802b9c0:	d905      	bls.n	802b9ce <_strtoll_l.isra.0+0x96>
 802b9c2:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 802b9c6:	2b19      	cmp	r3, #25
 802b9c8:	d81e      	bhi.n	802ba08 <_strtoll_l.isra.0+0xd0>
 802b9ca:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 802b9ce:	429e      	cmp	r6, r3
 802b9d0:	dd24      	ble.n	802ba1c <_strtoll_l.isra.0+0xe4>
 802b9d2:	1c54      	adds	r4, r2, #1
 802b9d4:	d015      	beq.n	802ba02 <_strtoll_l.isra.0+0xca>
 802b9d6:	4584      	cmp	ip, r0
 802b9d8:	eb7e 0201 	sbcs.w	r2, lr, r1
 802b9dc:	d31b      	bcc.n	802ba16 <_strtoll_l.isra.0+0xde>
 802b9de:	458e      	cmp	lr, r1
 802b9e0:	bf08      	it	eq
 802b9e2:	4584      	cmpeq	ip, r0
 802b9e4:	d102      	bne.n	802b9ec <_strtoll_l.isra.0+0xb4>
 802b9e6:	9a01      	ldr	r2, [sp, #4]
 802b9e8:	429a      	cmp	r2, r3
 802b9ea:	db14      	blt.n	802ba16 <_strtoll_l.isra.0+0xde>
 802b9ec:	9a03      	ldr	r2, [sp, #12]
 802b9ee:	4371      	muls	r1, r6
 802b9f0:	fb00 1102 	mla	r1, r0, r2, r1
 802b9f4:	fba6 0200 	umull	r0, r2, r6, r0
 802b9f8:	440a      	add	r2, r1
 802b9fa:	1818      	adds	r0, r3, r0
 802b9fc:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 802ba00:	2201      	movs	r2, #1
 802ba02:	f815 4b01 	ldrb.w	r4, [r5], #1
 802ba06:	e7d8      	b.n	802b9ba <_strtoll_l.isra.0+0x82>
 802ba08:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 802ba0c:	2b19      	cmp	r3, #25
 802ba0e:	d805      	bhi.n	802ba1c <_strtoll_l.isra.0+0xe4>
 802ba10:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 802ba14:	e7db      	b.n	802b9ce <_strtoll_l.isra.0+0x96>
 802ba16:	f04f 32ff 	mov.w	r2, #4294967295
 802ba1a:	e7f2      	b.n	802ba02 <_strtoll_l.isra.0+0xca>
 802ba1c:	1c53      	adds	r3, r2, #1
 802ba1e:	d10a      	bne.n	802ba36 <_strtoll_l.isra.0+0xfe>
 802ba20:	9a02      	ldr	r2, [sp, #8]
 802ba22:	2322      	movs	r3, #34	@ 0x22
 802ba24:	6013      	str	r3, [r2, #0]
 802ba26:	4658      	mov	r0, fp
 802ba28:	4651      	mov	r1, sl
 802ba2a:	f1b8 0f00 	cmp.w	r8, #0
 802ba2e:	d10a      	bne.n	802ba46 <_strtoll_l.isra.0+0x10e>
 802ba30:	b005      	add	sp, #20
 802ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba36:	b117      	cbz	r7, 802ba3e <_strtoll_l.isra.0+0x106>
 802ba38:	4240      	negs	r0, r0
 802ba3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802ba3e:	f1b8 0f00 	cmp.w	r8, #0
 802ba42:	d0f5      	beq.n	802ba30 <_strtoll_l.isra.0+0xf8>
 802ba44:	b10a      	cbz	r2, 802ba4a <_strtoll_l.isra.0+0x112>
 802ba46:	f105 39ff 	add.w	r9, r5, #4294967295
 802ba4a:	f8c8 9000 	str.w	r9, [r8]
 802ba4e:	e7ef      	b.n	802ba30 <_strtoll_l.isra.0+0xf8>
 802ba50:	0803ebf1 	.word	0x0803ebf1

0802ba54 <strtoll_l>:
 802ba54:	4613      	mov	r3, r2
 802ba56:	460a      	mov	r2, r1
 802ba58:	4601      	mov	r1, r0
 802ba5a:	4802      	ldr	r0, [pc, #8]	@ (802ba64 <strtoll_l+0x10>)
 802ba5c:	6800      	ldr	r0, [r0, #0]
 802ba5e:	f7ff bf6b 	b.w	802b938 <_strtoll_l.isra.0>
 802ba62:	bf00      	nop
 802ba64:	240009a8 	.word	0x240009a8

0802ba68 <__ssputs_r>:
 802ba68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ba6c:	688e      	ldr	r6, [r1, #8]
 802ba6e:	461f      	mov	r7, r3
 802ba70:	42be      	cmp	r6, r7
 802ba72:	680b      	ldr	r3, [r1, #0]
 802ba74:	4682      	mov	sl, r0
 802ba76:	460c      	mov	r4, r1
 802ba78:	4690      	mov	r8, r2
 802ba7a:	d82d      	bhi.n	802bad8 <__ssputs_r+0x70>
 802ba7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802ba80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802ba84:	d026      	beq.n	802bad4 <__ssputs_r+0x6c>
 802ba86:	6965      	ldr	r5, [r4, #20]
 802ba88:	6909      	ldr	r1, [r1, #16]
 802ba8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ba8e:	eba3 0901 	sub.w	r9, r3, r1
 802ba92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ba96:	1c7b      	adds	r3, r7, #1
 802ba98:	444b      	add	r3, r9
 802ba9a:	106d      	asrs	r5, r5, #1
 802ba9c:	429d      	cmp	r5, r3
 802ba9e:	bf38      	it	cc
 802baa0:	461d      	movcc	r5, r3
 802baa2:	0553      	lsls	r3, r2, #21
 802baa4:	d527      	bpl.n	802baf6 <__ssputs_r+0x8e>
 802baa6:	4629      	mov	r1, r5
 802baa8:	f7fa fefe 	bl	80268a8 <_malloc_r>
 802baac:	4606      	mov	r6, r0
 802baae:	b360      	cbz	r0, 802bb0a <__ssputs_r+0xa2>
 802bab0:	6921      	ldr	r1, [r4, #16]
 802bab2:	464a      	mov	r2, r9
 802bab4:	f7fe f8a3 	bl	8029bfe <memcpy>
 802bab8:	89a3      	ldrh	r3, [r4, #12]
 802baba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802babe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802bac2:	81a3      	strh	r3, [r4, #12]
 802bac4:	6126      	str	r6, [r4, #16]
 802bac6:	6165      	str	r5, [r4, #20]
 802bac8:	444e      	add	r6, r9
 802baca:	eba5 0509 	sub.w	r5, r5, r9
 802bace:	6026      	str	r6, [r4, #0]
 802bad0:	60a5      	str	r5, [r4, #8]
 802bad2:	463e      	mov	r6, r7
 802bad4:	42be      	cmp	r6, r7
 802bad6:	d900      	bls.n	802bada <__ssputs_r+0x72>
 802bad8:	463e      	mov	r6, r7
 802bada:	6820      	ldr	r0, [r4, #0]
 802badc:	4632      	mov	r2, r6
 802bade:	4641      	mov	r1, r8
 802bae0:	f7fc fe44 	bl	802876c <memmove>
 802bae4:	68a3      	ldr	r3, [r4, #8]
 802bae6:	1b9b      	subs	r3, r3, r6
 802bae8:	60a3      	str	r3, [r4, #8]
 802baea:	6823      	ldr	r3, [r4, #0]
 802baec:	4433      	add	r3, r6
 802baee:	6023      	str	r3, [r4, #0]
 802baf0:	2000      	movs	r0, #0
 802baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802baf6:	462a      	mov	r2, r5
 802baf8:	f7fa ff90 	bl	8026a1c <_realloc_r>
 802bafc:	4606      	mov	r6, r0
 802bafe:	2800      	cmp	r0, #0
 802bb00:	d1e0      	bne.n	802bac4 <__ssputs_r+0x5c>
 802bb02:	6921      	ldr	r1, [r4, #16]
 802bb04:	4650      	mov	r0, sl
 802bb06:	f7fe fe81 	bl	802a80c <_free_r>
 802bb0a:	230c      	movs	r3, #12
 802bb0c:	f8ca 3000 	str.w	r3, [sl]
 802bb10:	89a3      	ldrh	r3, [r4, #12]
 802bb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bb16:	81a3      	strh	r3, [r4, #12]
 802bb18:	f04f 30ff 	mov.w	r0, #4294967295
 802bb1c:	e7e9      	b.n	802baf2 <__ssputs_r+0x8a>
	...

0802bb20 <_svfiprintf_r>:
 802bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb24:	4698      	mov	r8, r3
 802bb26:	898b      	ldrh	r3, [r1, #12]
 802bb28:	061b      	lsls	r3, r3, #24
 802bb2a:	b09d      	sub	sp, #116	@ 0x74
 802bb2c:	4607      	mov	r7, r0
 802bb2e:	460d      	mov	r5, r1
 802bb30:	4614      	mov	r4, r2
 802bb32:	d510      	bpl.n	802bb56 <_svfiprintf_r+0x36>
 802bb34:	690b      	ldr	r3, [r1, #16]
 802bb36:	b973      	cbnz	r3, 802bb56 <_svfiprintf_r+0x36>
 802bb38:	2140      	movs	r1, #64	@ 0x40
 802bb3a:	f7fa feb5 	bl	80268a8 <_malloc_r>
 802bb3e:	6028      	str	r0, [r5, #0]
 802bb40:	6128      	str	r0, [r5, #16]
 802bb42:	b930      	cbnz	r0, 802bb52 <_svfiprintf_r+0x32>
 802bb44:	230c      	movs	r3, #12
 802bb46:	603b      	str	r3, [r7, #0]
 802bb48:	f04f 30ff 	mov.w	r0, #4294967295
 802bb4c:	b01d      	add	sp, #116	@ 0x74
 802bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb52:	2340      	movs	r3, #64	@ 0x40
 802bb54:	616b      	str	r3, [r5, #20]
 802bb56:	2300      	movs	r3, #0
 802bb58:	9309      	str	r3, [sp, #36]	@ 0x24
 802bb5a:	2320      	movs	r3, #32
 802bb5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802bb60:	f8cd 800c 	str.w	r8, [sp, #12]
 802bb64:	2330      	movs	r3, #48	@ 0x30
 802bb66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802bd04 <_svfiprintf_r+0x1e4>
 802bb6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802bb6e:	f04f 0901 	mov.w	r9, #1
 802bb72:	4623      	mov	r3, r4
 802bb74:	469a      	mov	sl, r3
 802bb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bb7a:	b10a      	cbz	r2, 802bb80 <_svfiprintf_r+0x60>
 802bb7c:	2a25      	cmp	r2, #37	@ 0x25
 802bb7e:	d1f9      	bne.n	802bb74 <_svfiprintf_r+0x54>
 802bb80:	ebba 0b04 	subs.w	fp, sl, r4
 802bb84:	d00b      	beq.n	802bb9e <_svfiprintf_r+0x7e>
 802bb86:	465b      	mov	r3, fp
 802bb88:	4622      	mov	r2, r4
 802bb8a:	4629      	mov	r1, r5
 802bb8c:	4638      	mov	r0, r7
 802bb8e:	f7ff ff6b 	bl	802ba68 <__ssputs_r>
 802bb92:	3001      	adds	r0, #1
 802bb94:	f000 80a7 	beq.w	802bce6 <_svfiprintf_r+0x1c6>
 802bb98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bb9a:	445a      	add	r2, fp
 802bb9c:	9209      	str	r2, [sp, #36]	@ 0x24
 802bb9e:	f89a 3000 	ldrb.w	r3, [sl]
 802bba2:	2b00      	cmp	r3, #0
 802bba4:	f000 809f 	beq.w	802bce6 <_svfiprintf_r+0x1c6>
 802bba8:	2300      	movs	r3, #0
 802bbaa:	f04f 32ff 	mov.w	r2, #4294967295
 802bbae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bbb2:	f10a 0a01 	add.w	sl, sl, #1
 802bbb6:	9304      	str	r3, [sp, #16]
 802bbb8:	9307      	str	r3, [sp, #28]
 802bbba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802bbbe:	931a      	str	r3, [sp, #104]	@ 0x68
 802bbc0:	4654      	mov	r4, sl
 802bbc2:	2205      	movs	r2, #5
 802bbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bbc8:	484e      	ldr	r0, [pc, #312]	@ (802bd04 <_svfiprintf_r+0x1e4>)
 802bbca:	f7d4 fbb1 	bl	8000330 <memchr>
 802bbce:	9a04      	ldr	r2, [sp, #16]
 802bbd0:	b9d8      	cbnz	r0, 802bc0a <_svfiprintf_r+0xea>
 802bbd2:	06d0      	lsls	r0, r2, #27
 802bbd4:	bf44      	itt	mi
 802bbd6:	2320      	movmi	r3, #32
 802bbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bbdc:	0711      	lsls	r1, r2, #28
 802bbde:	bf44      	itt	mi
 802bbe0:	232b      	movmi	r3, #43	@ 0x2b
 802bbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bbe6:	f89a 3000 	ldrb.w	r3, [sl]
 802bbea:	2b2a      	cmp	r3, #42	@ 0x2a
 802bbec:	d015      	beq.n	802bc1a <_svfiprintf_r+0xfa>
 802bbee:	9a07      	ldr	r2, [sp, #28]
 802bbf0:	4654      	mov	r4, sl
 802bbf2:	2000      	movs	r0, #0
 802bbf4:	f04f 0c0a 	mov.w	ip, #10
 802bbf8:	4621      	mov	r1, r4
 802bbfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bbfe:	3b30      	subs	r3, #48	@ 0x30
 802bc00:	2b09      	cmp	r3, #9
 802bc02:	d94b      	bls.n	802bc9c <_svfiprintf_r+0x17c>
 802bc04:	b1b0      	cbz	r0, 802bc34 <_svfiprintf_r+0x114>
 802bc06:	9207      	str	r2, [sp, #28]
 802bc08:	e014      	b.n	802bc34 <_svfiprintf_r+0x114>
 802bc0a:	eba0 0308 	sub.w	r3, r0, r8
 802bc0e:	fa09 f303 	lsl.w	r3, r9, r3
 802bc12:	4313      	orrs	r3, r2
 802bc14:	9304      	str	r3, [sp, #16]
 802bc16:	46a2      	mov	sl, r4
 802bc18:	e7d2      	b.n	802bbc0 <_svfiprintf_r+0xa0>
 802bc1a:	9b03      	ldr	r3, [sp, #12]
 802bc1c:	1d19      	adds	r1, r3, #4
 802bc1e:	681b      	ldr	r3, [r3, #0]
 802bc20:	9103      	str	r1, [sp, #12]
 802bc22:	2b00      	cmp	r3, #0
 802bc24:	bfbb      	ittet	lt
 802bc26:	425b      	neglt	r3, r3
 802bc28:	f042 0202 	orrlt.w	r2, r2, #2
 802bc2c:	9307      	strge	r3, [sp, #28]
 802bc2e:	9307      	strlt	r3, [sp, #28]
 802bc30:	bfb8      	it	lt
 802bc32:	9204      	strlt	r2, [sp, #16]
 802bc34:	7823      	ldrb	r3, [r4, #0]
 802bc36:	2b2e      	cmp	r3, #46	@ 0x2e
 802bc38:	d10a      	bne.n	802bc50 <_svfiprintf_r+0x130>
 802bc3a:	7863      	ldrb	r3, [r4, #1]
 802bc3c:	2b2a      	cmp	r3, #42	@ 0x2a
 802bc3e:	d132      	bne.n	802bca6 <_svfiprintf_r+0x186>
 802bc40:	9b03      	ldr	r3, [sp, #12]
 802bc42:	1d1a      	adds	r2, r3, #4
 802bc44:	681b      	ldr	r3, [r3, #0]
 802bc46:	9203      	str	r2, [sp, #12]
 802bc48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802bc4c:	3402      	adds	r4, #2
 802bc4e:	9305      	str	r3, [sp, #20]
 802bc50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802bd14 <_svfiprintf_r+0x1f4>
 802bc54:	7821      	ldrb	r1, [r4, #0]
 802bc56:	2203      	movs	r2, #3
 802bc58:	4650      	mov	r0, sl
 802bc5a:	f7d4 fb69 	bl	8000330 <memchr>
 802bc5e:	b138      	cbz	r0, 802bc70 <_svfiprintf_r+0x150>
 802bc60:	9b04      	ldr	r3, [sp, #16]
 802bc62:	eba0 000a 	sub.w	r0, r0, sl
 802bc66:	2240      	movs	r2, #64	@ 0x40
 802bc68:	4082      	lsls	r2, r0
 802bc6a:	4313      	orrs	r3, r2
 802bc6c:	3401      	adds	r4, #1
 802bc6e:	9304      	str	r3, [sp, #16]
 802bc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc74:	4824      	ldr	r0, [pc, #144]	@ (802bd08 <_svfiprintf_r+0x1e8>)
 802bc76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802bc7a:	2206      	movs	r2, #6
 802bc7c:	f7d4 fb58 	bl	8000330 <memchr>
 802bc80:	2800      	cmp	r0, #0
 802bc82:	d036      	beq.n	802bcf2 <_svfiprintf_r+0x1d2>
 802bc84:	4b21      	ldr	r3, [pc, #132]	@ (802bd0c <_svfiprintf_r+0x1ec>)
 802bc86:	bb1b      	cbnz	r3, 802bcd0 <_svfiprintf_r+0x1b0>
 802bc88:	9b03      	ldr	r3, [sp, #12]
 802bc8a:	3307      	adds	r3, #7
 802bc8c:	f023 0307 	bic.w	r3, r3, #7
 802bc90:	3308      	adds	r3, #8
 802bc92:	9303      	str	r3, [sp, #12]
 802bc94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bc96:	4433      	add	r3, r6
 802bc98:	9309      	str	r3, [sp, #36]	@ 0x24
 802bc9a:	e76a      	b.n	802bb72 <_svfiprintf_r+0x52>
 802bc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 802bca0:	460c      	mov	r4, r1
 802bca2:	2001      	movs	r0, #1
 802bca4:	e7a8      	b.n	802bbf8 <_svfiprintf_r+0xd8>
 802bca6:	2300      	movs	r3, #0
 802bca8:	3401      	adds	r4, #1
 802bcaa:	9305      	str	r3, [sp, #20]
 802bcac:	4619      	mov	r1, r3
 802bcae:	f04f 0c0a 	mov.w	ip, #10
 802bcb2:	4620      	mov	r0, r4
 802bcb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bcb8:	3a30      	subs	r2, #48	@ 0x30
 802bcba:	2a09      	cmp	r2, #9
 802bcbc:	d903      	bls.n	802bcc6 <_svfiprintf_r+0x1a6>
 802bcbe:	2b00      	cmp	r3, #0
 802bcc0:	d0c6      	beq.n	802bc50 <_svfiprintf_r+0x130>
 802bcc2:	9105      	str	r1, [sp, #20]
 802bcc4:	e7c4      	b.n	802bc50 <_svfiprintf_r+0x130>
 802bcc6:	fb0c 2101 	mla	r1, ip, r1, r2
 802bcca:	4604      	mov	r4, r0
 802bccc:	2301      	movs	r3, #1
 802bcce:	e7f0      	b.n	802bcb2 <_svfiprintf_r+0x192>
 802bcd0:	ab03      	add	r3, sp, #12
 802bcd2:	9300      	str	r3, [sp, #0]
 802bcd4:	462a      	mov	r2, r5
 802bcd6:	4b0e      	ldr	r3, [pc, #56]	@ (802bd10 <_svfiprintf_r+0x1f0>)
 802bcd8:	a904      	add	r1, sp, #16
 802bcda:	4638      	mov	r0, r7
 802bcdc:	f7fb fe28 	bl	8027930 <_printf_float>
 802bce0:	1c42      	adds	r2, r0, #1
 802bce2:	4606      	mov	r6, r0
 802bce4:	d1d6      	bne.n	802bc94 <_svfiprintf_r+0x174>
 802bce6:	89ab      	ldrh	r3, [r5, #12]
 802bce8:	065b      	lsls	r3, r3, #25
 802bcea:	f53f af2d 	bmi.w	802bb48 <_svfiprintf_r+0x28>
 802bcee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bcf0:	e72c      	b.n	802bb4c <_svfiprintf_r+0x2c>
 802bcf2:	ab03      	add	r3, sp, #12
 802bcf4:	9300      	str	r3, [sp, #0]
 802bcf6:	462a      	mov	r2, r5
 802bcf8:	4b05      	ldr	r3, [pc, #20]	@ (802bd10 <_svfiprintf_r+0x1f0>)
 802bcfa:	a904      	add	r1, sp, #16
 802bcfc:	4638      	mov	r0, r7
 802bcfe:	f7fc f89f 	bl	8027e40 <_printf_i>
 802bd02:	e7ed      	b.n	802bce0 <_svfiprintf_r+0x1c0>
 802bd04:	0803eb70 	.word	0x0803eb70
 802bd08:	0803eb7a 	.word	0x0803eb7a
 802bd0c:	08027931 	.word	0x08027931
 802bd10:	0802ba69 	.word	0x0802ba69
 802bd14:	0803eb76 	.word	0x0803eb76

0802bd18 <_sungetc_r>:
 802bd18:	b538      	push	{r3, r4, r5, lr}
 802bd1a:	1c4b      	adds	r3, r1, #1
 802bd1c:	4614      	mov	r4, r2
 802bd1e:	d103      	bne.n	802bd28 <_sungetc_r+0x10>
 802bd20:	f04f 35ff 	mov.w	r5, #4294967295
 802bd24:	4628      	mov	r0, r5
 802bd26:	bd38      	pop	{r3, r4, r5, pc}
 802bd28:	8993      	ldrh	r3, [r2, #12]
 802bd2a:	f023 0320 	bic.w	r3, r3, #32
 802bd2e:	8193      	strh	r3, [r2, #12]
 802bd30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802bd32:	6852      	ldr	r2, [r2, #4]
 802bd34:	b2cd      	uxtb	r5, r1
 802bd36:	b18b      	cbz	r3, 802bd5c <_sungetc_r+0x44>
 802bd38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802bd3a:	4293      	cmp	r3, r2
 802bd3c:	dd08      	ble.n	802bd50 <_sungetc_r+0x38>
 802bd3e:	6823      	ldr	r3, [r4, #0]
 802bd40:	1e5a      	subs	r2, r3, #1
 802bd42:	6022      	str	r2, [r4, #0]
 802bd44:	f803 5c01 	strb.w	r5, [r3, #-1]
 802bd48:	6863      	ldr	r3, [r4, #4]
 802bd4a:	3301      	adds	r3, #1
 802bd4c:	6063      	str	r3, [r4, #4]
 802bd4e:	e7e9      	b.n	802bd24 <_sungetc_r+0xc>
 802bd50:	4621      	mov	r1, r4
 802bd52:	f000 fcdc 	bl	802c70e <__submore>
 802bd56:	2800      	cmp	r0, #0
 802bd58:	d0f1      	beq.n	802bd3e <_sungetc_r+0x26>
 802bd5a:	e7e1      	b.n	802bd20 <_sungetc_r+0x8>
 802bd5c:	6921      	ldr	r1, [r4, #16]
 802bd5e:	6823      	ldr	r3, [r4, #0]
 802bd60:	b151      	cbz	r1, 802bd78 <_sungetc_r+0x60>
 802bd62:	4299      	cmp	r1, r3
 802bd64:	d208      	bcs.n	802bd78 <_sungetc_r+0x60>
 802bd66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802bd6a:	42a9      	cmp	r1, r5
 802bd6c:	d104      	bne.n	802bd78 <_sungetc_r+0x60>
 802bd6e:	3b01      	subs	r3, #1
 802bd70:	3201      	adds	r2, #1
 802bd72:	6023      	str	r3, [r4, #0]
 802bd74:	6062      	str	r2, [r4, #4]
 802bd76:	e7d5      	b.n	802bd24 <_sungetc_r+0xc>
 802bd78:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802bd7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bd80:	6363      	str	r3, [r4, #52]	@ 0x34
 802bd82:	2303      	movs	r3, #3
 802bd84:	63a3      	str	r3, [r4, #56]	@ 0x38
 802bd86:	4623      	mov	r3, r4
 802bd88:	f803 5f46 	strb.w	r5, [r3, #70]!
 802bd8c:	6023      	str	r3, [r4, #0]
 802bd8e:	2301      	movs	r3, #1
 802bd90:	e7dc      	b.n	802bd4c <_sungetc_r+0x34>

0802bd92 <__ssrefill_r>:
 802bd92:	b510      	push	{r4, lr}
 802bd94:	460c      	mov	r4, r1
 802bd96:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802bd98:	b169      	cbz	r1, 802bdb6 <__ssrefill_r+0x24>
 802bd9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bd9e:	4299      	cmp	r1, r3
 802bda0:	d001      	beq.n	802bda6 <__ssrefill_r+0x14>
 802bda2:	f7fe fd33 	bl	802a80c <_free_r>
 802bda6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802bda8:	6063      	str	r3, [r4, #4]
 802bdaa:	2000      	movs	r0, #0
 802bdac:	6360      	str	r0, [r4, #52]	@ 0x34
 802bdae:	b113      	cbz	r3, 802bdb6 <__ssrefill_r+0x24>
 802bdb0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802bdb2:	6023      	str	r3, [r4, #0]
 802bdb4:	bd10      	pop	{r4, pc}
 802bdb6:	6923      	ldr	r3, [r4, #16]
 802bdb8:	6023      	str	r3, [r4, #0]
 802bdba:	2300      	movs	r3, #0
 802bdbc:	6063      	str	r3, [r4, #4]
 802bdbe:	89a3      	ldrh	r3, [r4, #12]
 802bdc0:	f043 0320 	orr.w	r3, r3, #32
 802bdc4:	81a3      	strh	r3, [r4, #12]
 802bdc6:	f04f 30ff 	mov.w	r0, #4294967295
 802bdca:	e7f3      	b.n	802bdb4 <__ssrefill_r+0x22>

0802bdcc <__ssvfiscanf_r>:
 802bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bdd0:	460c      	mov	r4, r1
 802bdd2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 802bdd6:	2100      	movs	r1, #0
 802bdd8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 802bddc:	49a6      	ldr	r1, [pc, #664]	@ (802c078 <__ssvfiscanf_r+0x2ac>)
 802bdde:	91a0      	str	r1, [sp, #640]	@ 0x280
 802bde0:	f10d 0804 	add.w	r8, sp, #4
 802bde4:	49a5      	ldr	r1, [pc, #660]	@ (802c07c <__ssvfiscanf_r+0x2b0>)
 802bde6:	4fa6      	ldr	r7, [pc, #664]	@ (802c080 <__ssvfiscanf_r+0x2b4>)
 802bde8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 802bdec:	4606      	mov	r6, r0
 802bdee:	91a1      	str	r1, [sp, #644]	@ 0x284
 802bdf0:	9300      	str	r3, [sp, #0]
 802bdf2:	f892 9000 	ldrb.w	r9, [r2]
 802bdf6:	f1b9 0f00 	cmp.w	r9, #0
 802bdfa:	f000 8158 	beq.w	802c0ae <__ssvfiscanf_r+0x2e2>
 802bdfe:	f817 3009 	ldrb.w	r3, [r7, r9]
 802be02:	f013 0308 	ands.w	r3, r3, #8
 802be06:	f102 0501 	add.w	r5, r2, #1
 802be0a:	d019      	beq.n	802be40 <__ssvfiscanf_r+0x74>
 802be0c:	6863      	ldr	r3, [r4, #4]
 802be0e:	2b00      	cmp	r3, #0
 802be10:	dd0f      	ble.n	802be32 <__ssvfiscanf_r+0x66>
 802be12:	6823      	ldr	r3, [r4, #0]
 802be14:	781a      	ldrb	r2, [r3, #0]
 802be16:	5cba      	ldrb	r2, [r7, r2]
 802be18:	0712      	lsls	r2, r2, #28
 802be1a:	d401      	bmi.n	802be20 <__ssvfiscanf_r+0x54>
 802be1c:	462a      	mov	r2, r5
 802be1e:	e7e8      	b.n	802bdf2 <__ssvfiscanf_r+0x26>
 802be20:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802be22:	3201      	adds	r2, #1
 802be24:	9245      	str	r2, [sp, #276]	@ 0x114
 802be26:	6862      	ldr	r2, [r4, #4]
 802be28:	3301      	adds	r3, #1
 802be2a:	3a01      	subs	r2, #1
 802be2c:	6062      	str	r2, [r4, #4]
 802be2e:	6023      	str	r3, [r4, #0]
 802be30:	e7ec      	b.n	802be0c <__ssvfiscanf_r+0x40>
 802be32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802be34:	4621      	mov	r1, r4
 802be36:	4630      	mov	r0, r6
 802be38:	4798      	blx	r3
 802be3a:	2800      	cmp	r0, #0
 802be3c:	d0e9      	beq.n	802be12 <__ssvfiscanf_r+0x46>
 802be3e:	e7ed      	b.n	802be1c <__ssvfiscanf_r+0x50>
 802be40:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 802be44:	f040 8085 	bne.w	802bf52 <__ssvfiscanf_r+0x186>
 802be48:	9341      	str	r3, [sp, #260]	@ 0x104
 802be4a:	9343      	str	r3, [sp, #268]	@ 0x10c
 802be4c:	7853      	ldrb	r3, [r2, #1]
 802be4e:	2b2a      	cmp	r3, #42	@ 0x2a
 802be50:	bf02      	ittt	eq
 802be52:	2310      	moveq	r3, #16
 802be54:	1c95      	addeq	r5, r2, #2
 802be56:	9341      	streq	r3, [sp, #260]	@ 0x104
 802be58:	220a      	movs	r2, #10
 802be5a:	46aa      	mov	sl, r5
 802be5c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802be60:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 802be64:	2b09      	cmp	r3, #9
 802be66:	d91e      	bls.n	802bea6 <__ssvfiscanf_r+0xda>
 802be68:	f8df b218 	ldr.w	fp, [pc, #536]	@ 802c084 <__ssvfiscanf_r+0x2b8>
 802be6c:	2203      	movs	r2, #3
 802be6e:	4658      	mov	r0, fp
 802be70:	f7d4 fa5e 	bl	8000330 <memchr>
 802be74:	b138      	cbz	r0, 802be86 <__ssvfiscanf_r+0xba>
 802be76:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802be78:	eba0 000b 	sub.w	r0, r0, fp
 802be7c:	2301      	movs	r3, #1
 802be7e:	4083      	lsls	r3, r0
 802be80:	4313      	orrs	r3, r2
 802be82:	9341      	str	r3, [sp, #260]	@ 0x104
 802be84:	4655      	mov	r5, sl
 802be86:	f815 3b01 	ldrb.w	r3, [r5], #1
 802be8a:	2b78      	cmp	r3, #120	@ 0x78
 802be8c:	d806      	bhi.n	802be9c <__ssvfiscanf_r+0xd0>
 802be8e:	2b57      	cmp	r3, #87	@ 0x57
 802be90:	d810      	bhi.n	802beb4 <__ssvfiscanf_r+0xe8>
 802be92:	2b25      	cmp	r3, #37	@ 0x25
 802be94:	d05d      	beq.n	802bf52 <__ssvfiscanf_r+0x186>
 802be96:	d857      	bhi.n	802bf48 <__ssvfiscanf_r+0x17c>
 802be98:	2b00      	cmp	r3, #0
 802be9a:	d075      	beq.n	802bf88 <__ssvfiscanf_r+0x1bc>
 802be9c:	2303      	movs	r3, #3
 802be9e:	9347      	str	r3, [sp, #284]	@ 0x11c
 802bea0:	230a      	movs	r3, #10
 802bea2:	9342      	str	r3, [sp, #264]	@ 0x108
 802bea4:	e088      	b.n	802bfb8 <__ssvfiscanf_r+0x1ec>
 802bea6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802bea8:	fb02 1103 	mla	r1, r2, r3, r1
 802beac:	3930      	subs	r1, #48	@ 0x30
 802beae:	9143      	str	r1, [sp, #268]	@ 0x10c
 802beb0:	4655      	mov	r5, sl
 802beb2:	e7d2      	b.n	802be5a <__ssvfiscanf_r+0x8e>
 802beb4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802beb8:	2a20      	cmp	r2, #32
 802beba:	d8ef      	bhi.n	802be9c <__ssvfiscanf_r+0xd0>
 802bebc:	a101      	add	r1, pc, #4	@ (adr r1, 802bec4 <__ssvfiscanf_r+0xf8>)
 802bebe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802bec2:	bf00      	nop
 802bec4:	0802bf97 	.word	0x0802bf97
 802bec8:	0802be9d 	.word	0x0802be9d
 802becc:	0802be9d 	.word	0x0802be9d
 802bed0:	0802bff1 	.word	0x0802bff1
 802bed4:	0802be9d 	.word	0x0802be9d
 802bed8:	0802be9d 	.word	0x0802be9d
 802bedc:	0802be9d 	.word	0x0802be9d
 802bee0:	0802be9d 	.word	0x0802be9d
 802bee4:	0802be9d 	.word	0x0802be9d
 802bee8:	0802be9d 	.word	0x0802be9d
 802beec:	0802be9d 	.word	0x0802be9d
 802bef0:	0802c007 	.word	0x0802c007
 802bef4:	0802bfed 	.word	0x0802bfed
 802bef8:	0802bf4f 	.word	0x0802bf4f
 802befc:	0802bf4f 	.word	0x0802bf4f
 802bf00:	0802bf4f 	.word	0x0802bf4f
 802bf04:	0802be9d 	.word	0x0802be9d
 802bf08:	0802bfa9 	.word	0x0802bfa9
 802bf0c:	0802be9d 	.word	0x0802be9d
 802bf10:	0802be9d 	.word	0x0802be9d
 802bf14:	0802be9d 	.word	0x0802be9d
 802bf18:	0802be9d 	.word	0x0802be9d
 802bf1c:	0802c017 	.word	0x0802c017
 802bf20:	0802bfb1 	.word	0x0802bfb1
 802bf24:	0802bf8f 	.word	0x0802bf8f
 802bf28:	0802be9d 	.word	0x0802be9d
 802bf2c:	0802be9d 	.word	0x0802be9d
 802bf30:	0802c013 	.word	0x0802c013
 802bf34:	0802be9d 	.word	0x0802be9d
 802bf38:	0802bfed 	.word	0x0802bfed
 802bf3c:	0802be9d 	.word	0x0802be9d
 802bf40:	0802be9d 	.word	0x0802be9d
 802bf44:	0802bf97 	.word	0x0802bf97
 802bf48:	3b45      	subs	r3, #69	@ 0x45
 802bf4a:	2b02      	cmp	r3, #2
 802bf4c:	d8a6      	bhi.n	802be9c <__ssvfiscanf_r+0xd0>
 802bf4e:	2305      	movs	r3, #5
 802bf50:	e031      	b.n	802bfb6 <__ssvfiscanf_r+0x1ea>
 802bf52:	6863      	ldr	r3, [r4, #4]
 802bf54:	2b00      	cmp	r3, #0
 802bf56:	dd0d      	ble.n	802bf74 <__ssvfiscanf_r+0x1a8>
 802bf58:	6823      	ldr	r3, [r4, #0]
 802bf5a:	781a      	ldrb	r2, [r3, #0]
 802bf5c:	454a      	cmp	r2, r9
 802bf5e:	f040 80a6 	bne.w	802c0ae <__ssvfiscanf_r+0x2e2>
 802bf62:	3301      	adds	r3, #1
 802bf64:	6862      	ldr	r2, [r4, #4]
 802bf66:	6023      	str	r3, [r4, #0]
 802bf68:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 802bf6a:	3a01      	subs	r2, #1
 802bf6c:	3301      	adds	r3, #1
 802bf6e:	6062      	str	r2, [r4, #4]
 802bf70:	9345      	str	r3, [sp, #276]	@ 0x114
 802bf72:	e753      	b.n	802be1c <__ssvfiscanf_r+0x50>
 802bf74:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802bf76:	4621      	mov	r1, r4
 802bf78:	4630      	mov	r0, r6
 802bf7a:	4798      	blx	r3
 802bf7c:	2800      	cmp	r0, #0
 802bf7e:	d0eb      	beq.n	802bf58 <__ssvfiscanf_r+0x18c>
 802bf80:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802bf82:	2800      	cmp	r0, #0
 802bf84:	f040 808b 	bne.w	802c09e <__ssvfiscanf_r+0x2d2>
 802bf88:	f04f 30ff 	mov.w	r0, #4294967295
 802bf8c:	e08b      	b.n	802c0a6 <__ssvfiscanf_r+0x2da>
 802bf8e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802bf90:	f042 0220 	orr.w	r2, r2, #32
 802bf94:	9241      	str	r2, [sp, #260]	@ 0x104
 802bf96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802bf98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802bf9c:	9241      	str	r2, [sp, #260]	@ 0x104
 802bf9e:	2210      	movs	r2, #16
 802bfa0:	2b6e      	cmp	r3, #110	@ 0x6e
 802bfa2:	9242      	str	r2, [sp, #264]	@ 0x108
 802bfa4:	d902      	bls.n	802bfac <__ssvfiscanf_r+0x1e0>
 802bfa6:	e005      	b.n	802bfb4 <__ssvfiscanf_r+0x1e8>
 802bfa8:	2300      	movs	r3, #0
 802bfaa:	9342      	str	r3, [sp, #264]	@ 0x108
 802bfac:	2303      	movs	r3, #3
 802bfae:	e002      	b.n	802bfb6 <__ssvfiscanf_r+0x1ea>
 802bfb0:	2308      	movs	r3, #8
 802bfb2:	9342      	str	r3, [sp, #264]	@ 0x108
 802bfb4:	2304      	movs	r3, #4
 802bfb6:	9347      	str	r3, [sp, #284]	@ 0x11c
 802bfb8:	6863      	ldr	r3, [r4, #4]
 802bfba:	2b00      	cmp	r3, #0
 802bfbc:	dd39      	ble.n	802c032 <__ssvfiscanf_r+0x266>
 802bfbe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802bfc0:	0659      	lsls	r1, r3, #25
 802bfc2:	d404      	bmi.n	802bfce <__ssvfiscanf_r+0x202>
 802bfc4:	6823      	ldr	r3, [r4, #0]
 802bfc6:	781a      	ldrb	r2, [r3, #0]
 802bfc8:	5cba      	ldrb	r2, [r7, r2]
 802bfca:	0712      	lsls	r2, r2, #28
 802bfcc:	d438      	bmi.n	802c040 <__ssvfiscanf_r+0x274>
 802bfce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 802bfd0:	2b02      	cmp	r3, #2
 802bfd2:	dc47      	bgt.n	802c064 <__ssvfiscanf_r+0x298>
 802bfd4:	466b      	mov	r3, sp
 802bfd6:	4622      	mov	r2, r4
 802bfd8:	a941      	add	r1, sp, #260	@ 0x104
 802bfda:	4630      	mov	r0, r6
 802bfdc:	f000 f9ae 	bl	802c33c <_scanf_chars>
 802bfe0:	2801      	cmp	r0, #1
 802bfe2:	d064      	beq.n	802c0ae <__ssvfiscanf_r+0x2e2>
 802bfe4:	2802      	cmp	r0, #2
 802bfe6:	f47f af19 	bne.w	802be1c <__ssvfiscanf_r+0x50>
 802bfea:	e7c9      	b.n	802bf80 <__ssvfiscanf_r+0x1b4>
 802bfec:	220a      	movs	r2, #10
 802bfee:	e7d7      	b.n	802bfa0 <__ssvfiscanf_r+0x1d4>
 802bff0:	4629      	mov	r1, r5
 802bff2:	4640      	mov	r0, r8
 802bff4:	f000 fb52 	bl	802c69c <__sccl>
 802bff8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802bffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bffe:	9341      	str	r3, [sp, #260]	@ 0x104
 802c000:	4605      	mov	r5, r0
 802c002:	2301      	movs	r3, #1
 802c004:	e7d7      	b.n	802bfb6 <__ssvfiscanf_r+0x1ea>
 802c006:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802c008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c00c:	9341      	str	r3, [sp, #260]	@ 0x104
 802c00e:	2300      	movs	r3, #0
 802c010:	e7d1      	b.n	802bfb6 <__ssvfiscanf_r+0x1ea>
 802c012:	2302      	movs	r3, #2
 802c014:	e7cf      	b.n	802bfb6 <__ssvfiscanf_r+0x1ea>
 802c016:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802c018:	06c3      	lsls	r3, r0, #27
 802c01a:	f53f aeff 	bmi.w	802be1c <__ssvfiscanf_r+0x50>
 802c01e:	9b00      	ldr	r3, [sp, #0]
 802c020:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802c022:	1d19      	adds	r1, r3, #4
 802c024:	9100      	str	r1, [sp, #0]
 802c026:	681b      	ldr	r3, [r3, #0]
 802c028:	07c0      	lsls	r0, r0, #31
 802c02a:	bf4c      	ite	mi
 802c02c:	801a      	strhmi	r2, [r3, #0]
 802c02e:	601a      	strpl	r2, [r3, #0]
 802c030:	e6f4      	b.n	802be1c <__ssvfiscanf_r+0x50>
 802c032:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802c034:	4621      	mov	r1, r4
 802c036:	4630      	mov	r0, r6
 802c038:	4798      	blx	r3
 802c03a:	2800      	cmp	r0, #0
 802c03c:	d0bf      	beq.n	802bfbe <__ssvfiscanf_r+0x1f2>
 802c03e:	e79f      	b.n	802bf80 <__ssvfiscanf_r+0x1b4>
 802c040:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802c042:	3201      	adds	r2, #1
 802c044:	9245      	str	r2, [sp, #276]	@ 0x114
 802c046:	6862      	ldr	r2, [r4, #4]
 802c048:	3a01      	subs	r2, #1
 802c04a:	2a00      	cmp	r2, #0
 802c04c:	6062      	str	r2, [r4, #4]
 802c04e:	dd02      	ble.n	802c056 <__ssvfiscanf_r+0x28a>
 802c050:	3301      	adds	r3, #1
 802c052:	6023      	str	r3, [r4, #0]
 802c054:	e7b6      	b.n	802bfc4 <__ssvfiscanf_r+0x1f8>
 802c056:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802c058:	4621      	mov	r1, r4
 802c05a:	4630      	mov	r0, r6
 802c05c:	4798      	blx	r3
 802c05e:	2800      	cmp	r0, #0
 802c060:	d0b0      	beq.n	802bfc4 <__ssvfiscanf_r+0x1f8>
 802c062:	e78d      	b.n	802bf80 <__ssvfiscanf_r+0x1b4>
 802c064:	2b04      	cmp	r3, #4
 802c066:	dc0f      	bgt.n	802c088 <__ssvfiscanf_r+0x2bc>
 802c068:	466b      	mov	r3, sp
 802c06a:	4622      	mov	r2, r4
 802c06c:	a941      	add	r1, sp, #260	@ 0x104
 802c06e:	4630      	mov	r0, r6
 802c070:	f000 f9be 	bl	802c3f0 <_scanf_i>
 802c074:	e7b4      	b.n	802bfe0 <__ssvfiscanf_r+0x214>
 802c076:	bf00      	nop
 802c078:	0802bd19 	.word	0x0802bd19
 802c07c:	0802bd93 	.word	0x0802bd93
 802c080:	0803ebf1 	.word	0x0803ebf1
 802c084:	0803eb76 	.word	0x0803eb76
 802c088:	4b0a      	ldr	r3, [pc, #40]	@ (802c0b4 <__ssvfiscanf_r+0x2e8>)
 802c08a:	2b00      	cmp	r3, #0
 802c08c:	f43f aec6 	beq.w	802be1c <__ssvfiscanf_r+0x50>
 802c090:	466b      	mov	r3, sp
 802c092:	4622      	mov	r2, r4
 802c094:	a941      	add	r1, sp, #260	@ 0x104
 802c096:	4630      	mov	r0, r6
 802c098:	f3af 8000 	nop.w
 802c09c:	e7a0      	b.n	802bfe0 <__ssvfiscanf_r+0x214>
 802c09e:	89a3      	ldrh	r3, [r4, #12]
 802c0a0:	065b      	lsls	r3, r3, #25
 802c0a2:	f53f af71 	bmi.w	802bf88 <__ssvfiscanf_r+0x1bc>
 802c0a6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 802c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0ae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802c0b0:	e7f9      	b.n	802c0a6 <__ssvfiscanf_r+0x2da>
 802c0b2:	bf00      	nop
 802c0b4:	00000000 	.word	0x00000000

0802c0b8 <__sfputc_r>:
 802c0b8:	6893      	ldr	r3, [r2, #8]
 802c0ba:	3b01      	subs	r3, #1
 802c0bc:	2b00      	cmp	r3, #0
 802c0be:	b410      	push	{r4}
 802c0c0:	6093      	str	r3, [r2, #8]
 802c0c2:	da08      	bge.n	802c0d6 <__sfputc_r+0x1e>
 802c0c4:	6994      	ldr	r4, [r2, #24]
 802c0c6:	42a3      	cmp	r3, r4
 802c0c8:	db01      	blt.n	802c0ce <__sfputc_r+0x16>
 802c0ca:	290a      	cmp	r1, #10
 802c0cc:	d103      	bne.n	802c0d6 <__sfputc_r+0x1e>
 802c0ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c0d2:	f7fc baa6 	b.w	8028622 <__swbuf_r>
 802c0d6:	6813      	ldr	r3, [r2, #0]
 802c0d8:	1c58      	adds	r0, r3, #1
 802c0da:	6010      	str	r0, [r2, #0]
 802c0dc:	7019      	strb	r1, [r3, #0]
 802c0de:	4608      	mov	r0, r1
 802c0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c0e4:	4770      	bx	lr

0802c0e6 <__sfputs_r>:
 802c0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c0e8:	4606      	mov	r6, r0
 802c0ea:	460f      	mov	r7, r1
 802c0ec:	4614      	mov	r4, r2
 802c0ee:	18d5      	adds	r5, r2, r3
 802c0f0:	42ac      	cmp	r4, r5
 802c0f2:	d101      	bne.n	802c0f8 <__sfputs_r+0x12>
 802c0f4:	2000      	movs	r0, #0
 802c0f6:	e007      	b.n	802c108 <__sfputs_r+0x22>
 802c0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c0fc:	463a      	mov	r2, r7
 802c0fe:	4630      	mov	r0, r6
 802c100:	f7ff ffda 	bl	802c0b8 <__sfputc_r>
 802c104:	1c43      	adds	r3, r0, #1
 802c106:	d1f3      	bne.n	802c0f0 <__sfputs_r+0xa>
 802c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c10c <_vfiprintf_r>:
 802c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c110:	460d      	mov	r5, r1
 802c112:	b09d      	sub	sp, #116	@ 0x74
 802c114:	4614      	mov	r4, r2
 802c116:	4698      	mov	r8, r3
 802c118:	4606      	mov	r6, r0
 802c11a:	b118      	cbz	r0, 802c124 <_vfiprintf_r+0x18>
 802c11c:	6a03      	ldr	r3, [r0, #32]
 802c11e:	b90b      	cbnz	r3, 802c124 <_vfiprintf_r+0x18>
 802c120:	f7fc f8e4 	bl	80282ec <__sinit>
 802c124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c126:	07d9      	lsls	r1, r3, #31
 802c128:	d405      	bmi.n	802c136 <_vfiprintf_r+0x2a>
 802c12a:	89ab      	ldrh	r3, [r5, #12]
 802c12c:	059a      	lsls	r2, r3, #22
 802c12e:	d402      	bmi.n	802c136 <_vfiprintf_r+0x2a>
 802c130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c132:	f7fd fd59 	bl	8029be8 <__retarget_lock_acquire_recursive>
 802c136:	89ab      	ldrh	r3, [r5, #12]
 802c138:	071b      	lsls	r3, r3, #28
 802c13a:	d501      	bpl.n	802c140 <_vfiprintf_r+0x34>
 802c13c:	692b      	ldr	r3, [r5, #16]
 802c13e:	b99b      	cbnz	r3, 802c168 <_vfiprintf_r+0x5c>
 802c140:	4629      	mov	r1, r5
 802c142:	4630      	mov	r0, r6
 802c144:	f7fc faac 	bl	80286a0 <__swsetup_r>
 802c148:	b170      	cbz	r0, 802c168 <_vfiprintf_r+0x5c>
 802c14a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c14c:	07dc      	lsls	r4, r3, #31
 802c14e:	d504      	bpl.n	802c15a <_vfiprintf_r+0x4e>
 802c150:	f04f 30ff 	mov.w	r0, #4294967295
 802c154:	b01d      	add	sp, #116	@ 0x74
 802c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c15a:	89ab      	ldrh	r3, [r5, #12]
 802c15c:	0598      	lsls	r0, r3, #22
 802c15e:	d4f7      	bmi.n	802c150 <_vfiprintf_r+0x44>
 802c160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c162:	f7fd fd43 	bl	8029bec <__retarget_lock_release_recursive>
 802c166:	e7f3      	b.n	802c150 <_vfiprintf_r+0x44>
 802c168:	2300      	movs	r3, #0
 802c16a:	9309      	str	r3, [sp, #36]	@ 0x24
 802c16c:	2320      	movs	r3, #32
 802c16e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802c172:	f8cd 800c 	str.w	r8, [sp, #12]
 802c176:	2330      	movs	r3, #48	@ 0x30
 802c178:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802c328 <_vfiprintf_r+0x21c>
 802c17c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802c180:	f04f 0901 	mov.w	r9, #1
 802c184:	4623      	mov	r3, r4
 802c186:	469a      	mov	sl, r3
 802c188:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c18c:	b10a      	cbz	r2, 802c192 <_vfiprintf_r+0x86>
 802c18e:	2a25      	cmp	r2, #37	@ 0x25
 802c190:	d1f9      	bne.n	802c186 <_vfiprintf_r+0x7a>
 802c192:	ebba 0b04 	subs.w	fp, sl, r4
 802c196:	d00b      	beq.n	802c1b0 <_vfiprintf_r+0xa4>
 802c198:	465b      	mov	r3, fp
 802c19a:	4622      	mov	r2, r4
 802c19c:	4629      	mov	r1, r5
 802c19e:	4630      	mov	r0, r6
 802c1a0:	f7ff ffa1 	bl	802c0e6 <__sfputs_r>
 802c1a4:	3001      	adds	r0, #1
 802c1a6:	f000 80a7 	beq.w	802c2f8 <_vfiprintf_r+0x1ec>
 802c1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c1ac:	445a      	add	r2, fp
 802c1ae:	9209      	str	r2, [sp, #36]	@ 0x24
 802c1b0:	f89a 3000 	ldrb.w	r3, [sl]
 802c1b4:	2b00      	cmp	r3, #0
 802c1b6:	f000 809f 	beq.w	802c2f8 <_vfiprintf_r+0x1ec>
 802c1ba:	2300      	movs	r3, #0
 802c1bc:	f04f 32ff 	mov.w	r2, #4294967295
 802c1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c1c4:	f10a 0a01 	add.w	sl, sl, #1
 802c1c8:	9304      	str	r3, [sp, #16]
 802c1ca:	9307      	str	r3, [sp, #28]
 802c1cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802c1d0:	931a      	str	r3, [sp, #104]	@ 0x68
 802c1d2:	4654      	mov	r4, sl
 802c1d4:	2205      	movs	r2, #5
 802c1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c1da:	4853      	ldr	r0, [pc, #332]	@ (802c328 <_vfiprintf_r+0x21c>)
 802c1dc:	f7d4 f8a8 	bl	8000330 <memchr>
 802c1e0:	9a04      	ldr	r2, [sp, #16]
 802c1e2:	b9d8      	cbnz	r0, 802c21c <_vfiprintf_r+0x110>
 802c1e4:	06d1      	lsls	r1, r2, #27
 802c1e6:	bf44      	itt	mi
 802c1e8:	2320      	movmi	r3, #32
 802c1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c1ee:	0713      	lsls	r3, r2, #28
 802c1f0:	bf44      	itt	mi
 802c1f2:	232b      	movmi	r3, #43	@ 0x2b
 802c1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c1f8:	f89a 3000 	ldrb.w	r3, [sl]
 802c1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 802c1fe:	d015      	beq.n	802c22c <_vfiprintf_r+0x120>
 802c200:	9a07      	ldr	r2, [sp, #28]
 802c202:	4654      	mov	r4, sl
 802c204:	2000      	movs	r0, #0
 802c206:	f04f 0c0a 	mov.w	ip, #10
 802c20a:	4621      	mov	r1, r4
 802c20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c210:	3b30      	subs	r3, #48	@ 0x30
 802c212:	2b09      	cmp	r3, #9
 802c214:	d94b      	bls.n	802c2ae <_vfiprintf_r+0x1a2>
 802c216:	b1b0      	cbz	r0, 802c246 <_vfiprintf_r+0x13a>
 802c218:	9207      	str	r2, [sp, #28]
 802c21a:	e014      	b.n	802c246 <_vfiprintf_r+0x13a>
 802c21c:	eba0 0308 	sub.w	r3, r0, r8
 802c220:	fa09 f303 	lsl.w	r3, r9, r3
 802c224:	4313      	orrs	r3, r2
 802c226:	9304      	str	r3, [sp, #16]
 802c228:	46a2      	mov	sl, r4
 802c22a:	e7d2      	b.n	802c1d2 <_vfiprintf_r+0xc6>
 802c22c:	9b03      	ldr	r3, [sp, #12]
 802c22e:	1d19      	adds	r1, r3, #4
 802c230:	681b      	ldr	r3, [r3, #0]
 802c232:	9103      	str	r1, [sp, #12]
 802c234:	2b00      	cmp	r3, #0
 802c236:	bfbb      	ittet	lt
 802c238:	425b      	neglt	r3, r3
 802c23a:	f042 0202 	orrlt.w	r2, r2, #2
 802c23e:	9307      	strge	r3, [sp, #28]
 802c240:	9307      	strlt	r3, [sp, #28]
 802c242:	bfb8      	it	lt
 802c244:	9204      	strlt	r2, [sp, #16]
 802c246:	7823      	ldrb	r3, [r4, #0]
 802c248:	2b2e      	cmp	r3, #46	@ 0x2e
 802c24a:	d10a      	bne.n	802c262 <_vfiprintf_r+0x156>
 802c24c:	7863      	ldrb	r3, [r4, #1]
 802c24e:	2b2a      	cmp	r3, #42	@ 0x2a
 802c250:	d132      	bne.n	802c2b8 <_vfiprintf_r+0x1ac>
 802c252:	9b03      	ldr	r3, [sp, #12]
 802c254:	1d1a      	adds	r2, r3, #4
 802c256:	681b      	ldr	r3, [r3, #0]
 802c258:	9203      	str	r2, [sp, #12]
 802c25a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c25e:	3402      	adds	r4, #2
 802c260:	9305      	str	r3, [sp, #20]
 802c262:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c338 <_vfiprintf_r+0x22c>
 802c266:	7821      	ldrb	r1, [r4, #0]
 802c268:	2203      	movs	r2, #3
 802c26a:	4650      	mov	r0, sl
 802c26c:	f7d4 f860 	bl	8000330 <memchr>
 802c270:	b138      	cbz	r0, 802c282 <_vfiprintf_r+0x176>
 802c272:	9b04      	ldr	r3, [sp, #16]
 802c274:	eba0 000a 	sub.w	r0, r0, sl
 802c278:	2240      	movs	r2, #64	@ 0x40
 802c27a:	4082      	lsls	r2, r0
 802c27c:	4313      	orrs	r3, r2
 802c27e:	3401      	adds	r4, #1
 802c280:	9304      	str	r3, [sp, #16]
 802c282:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c286:	4829      	ldr	r0, [pc, #164]	@ (802c32c <_vfiprintf_r+0x220>)
 802c288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802c28c:	2206      	movs	r2, #6
 802c28e:	f7d4 f84f 	bl	8000330 <memchr>
 802c292:	2800      	cmp	r0, #0
 802c294:	d03f      	beq.n	802c316 <_vfiprintf_r+0x20a>
 802c296:	4b26      	ldr	r3, [pc, #152]	@ (802c330 <_vfiprintf_r+0x224>)
 802c298:	bb1b      	cbnz	r3, 802c2e2 <_vfiprintf_r+0x1d6>
 802c29a:	9b03      	ldr	r3, [sp, #12]
 802c29c:	3307      	adds	r3, #7
 802c29e:	f023 0307 	bic.w	r3, r3, #7
 802c2a2:	3308      	adds	r3, #8
 802c2a4:	9303      	str	r3, [sp, #12]
 802c2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c2a8:	443b      	add	r3, r7
 802c2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802c2ac:	e76a      	b.n	802c184 <_vfiprintf_r+0x78>
 802c2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 802c2b2:	460c      	mov	r4, r1
 802c2b4:	2001      	movs	r0, #1
 802c2b6:	e7a8      	b.n	802c20a <_vfiprintf_r+0xfe>
 802c2b8:	2300      	movs	r3, #0
 802c2ba:	3401      	adds	r4, #1
 802c2bc:	9305      	str	r3, [sp, #20]
 802c2be:	4619      	mov	r1, r3
 802c2c0:	f04f 0c0a 	mov.w	ip, #10
 802c2c4:	4620      	mov	r0, r4
 802c2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c2ca:	3a30      	subs	r2, #48	@ 0x30
 802c2cc:	2a09      	cmp	r2, #9
 802c2ce:	d903      	bls.n	802c2d8 <_vfiprintf_r+0x1cc>
 802c2d0:	2b00      	cmp	r3, #0
 802c2d2:	d0c6      	beq.n	802c262 <_vfiprintf_r+0x156>
 802c2d4:	9105      	str	r1, [sp, #20]
 802c2d6:	e7c4      	b.n	802c262 <_vfiprintf_r+0x156>
 802c2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 802c2dc:	4604      	mov	r4, r0
 802c2de:	2301      	movs	r3, #1
 802c2e0:	e7f0      	b.n	802c2c4 <_vfiprintf_r+0x1b8>
 802c2e2:	ab03      	add	r3, sp, #12
 802c2e4:	9300      	str	r3, [sp, #0]
 802c2e6:	462a      	mov	r2, r5
 802c2e8:	4b12      	ldr	r3, [pc, #72]	@ (802c334 <_vfiprintf_r+0x228>)
 802c2ea:	a904      	add	r1, sp, #16
 802c2ec:	4630      	mov	r0, r6
 802c2ee:	f7fb fb1f 	bl	8027930 <_printf_float>
 802c2f2:	4607      	mov	r7, r0
 802c2f4:	1c78      	adds	r0, r7, #1
 802c2f6:	d1d6      	bne.n	802c2a6 <_vfiprintf_r+0x19a>
 802c2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c2fa:	07d9      	lsls	r1, r3, #31
 802c2fc:	d405      	bmi.n	802c30a <_vfiprintf_r+0x1fe>
 802c2fe:	89ab      	ldrh	r3, [r5, #12]
 802c300:	059a      	lsls	r2, r3, #22
 802c302:	d402      	bmi.n	802c30a <_vfiprintf_r+0x1fe>
 802c304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c306:	f7fd fc71 	bl	8029bec <__retarget_lock_release_recursive>
 802c30a:	89ab      	ldrh	r3, [r5, #12]
 802c30c:	065b      	lsls	r3, r3, #25
 802c30e:	f53f af1f 	bmi.w	802c150 <_vfiprintf_r+0x44>
 802c312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c314:	e71e      	b.n	802c154 <_vfiprintf_r+0x48>
 802c316:	ab03      	add	r3, sp, #12
 802c318:	9300      	str	r3, [sp, #0]
 802c31a:	462a      	mov	r2, r5
 802c31c:	4b05      	ldr	r3, [pc, #20]	@ (802c334 <_vfiprintf_r+0x228>)
 802c31e:	a904      	add	r1, sp, #16
 802c320:	4630      	mov	r0, r6
 802c322:	f7fb fd8d 	bl	8027e40 <_printf_i>
 802c326:	e7e4      	b.n	802c2f2 <_vfiprintf_r+0x1e6>
 802c328:	0803eb70 	.word	0x0803eb70
 802c32c:	0803eb7a 	.word	0x0803eb7a
 802c330:	08027931 	.word	0x08027931
 802c334:	0802c0e7 	.word	0x0802c0e7
 802c338:	0803eb76 	.word	0x0803eb76

0802c33c <_scanf_chars>:
 802c33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c340:	4615      	mov	r5, r2
 802c342:	688a      	ldr	r2, [r1, #8]
 802c344:	4680      	mov	r8, r0
 802c346:	460c      	mov	r4, r1
 802c348:	b932      	cbnz	r2, 802c358 <_scanf_chars+0x1c>
 802c34a:	698a      	ldr	r2, [r1, #24]
 802c34c:	2a00      	cmp	r2, #0
 802c34e:	bf14      	ite	ne
 802c350:	f04f 32ff 	movne.w	r2, #4294967295
 802c354:	2201      	moveq	r2, #1
 802c356:	608a      	str	r2, [r1, #8]
 802c358:	6822      	ldr	r2, [r4, #0]
 802c35a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 802c3ec <_scanf_chars+0xb0>
 802c35e:	06d1      	lsls	r1, r2, #27
 802c360:	bf5f      	itttt	pl
 802c362:	681a      	ldrpl	r2, [r3, #0]
 802c364:	1d11      	addpl	r1, r2, #4
 802c366:	6019      	strpl	r1, [r3, #0]
 802c368:	6816      	ldrpl	r6, [r2, #0]
 802c36a:	2700      	movs	r7, #0
 802c36c:	69a0      	ldr	r0, [r4, #24]
 802c36e:	b188      	cbz	r0, 802c394 <_scanf_chars+0x58>
 802c370:	2801      	cmp	r0, #1
 802c372:	d107      	bne.n	802c384 <_scanf_chars+0x48>
 802c374:	682b      	ldr	r3, [r5, #0]
 802c376:	781a      	ldrb	r2, [r3, #0]
 802c378:	6963      	ldr	r3, [r4, #20]
 802c37a:	5c9b      	ldrb	r3, [r3, r2]
 802c37c:	b953      	cbnz	r3, 802c394 <_scanf_chars+0x58>
 802c37e:	2f00      	cmp	r7, #0
 802c380:	d031      	beq.n	802c3e6 <_scanf_chars+0xaa>
 802c382:	e022      	b.n	802c3ca <_scanf_chars+0x8e>
 802c384:	2802      	cmp	r0, #2
 802c386:	d120      	bne.n	802c3ca <_scanf_chars+0x8e>
 802c388:	682b      	ldr	r3, [r5, #0]
 802c38a:	781b      	ldrb	r3, [r3, #0]
 802c38c:	f819 3003 	ldrb.w	r3, [r9, r3]
 802c390:	071b      	lsls	r3, r3, #28
 802c392:	d41a      	bmi.n	802c3ca <_scanf_chars+0x8e>
 802c394:	6823      	ldr	r3, [r4, #0]
 802c396:	06da      	lsls	r2, r3, #27
 802c398:	bf5e      	ittt	pl
 802c39a:	682b      	ldrpl	r3, [r5, #0]
 802c39c:	781b      	ldrbpl	r3, [r3, #0]
 802c39e:	f806 3b01 	strbpl.w	r3, [r6], #1
 802c3a2:	682a      	ldr	r2, [r5, #0]
 802c3a4:	686b      	ldr	r3, [r5, #4]
 802c3a6:	3201      	adds	r2, #1
 802c3a8:	602a      	str	r2, [r5, #0]
 802c3aa:	68a2      	ldr	r2, [r4, #8]
 802c3ac:	3b01      	subs	r3, #1
 802c3ae:	3a01      	subs	r2, #1
 802c3b0:	606b      	str	r3, [r5, #4]
 802c3b2:	3701      	adds	r7, #1
 802c3b4:	60a2      	str	r2, [r4, #8]
 802c3b6:	b142      	cbz	r2, 802c3ca <_scanf_chars+0x8e>
 802c3b8:	2b00      	cmp	r3, #0
 802c3ba:	dcd7      	bgt.n	802c36c <_scanf_chars+0x30>
 802c3bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802c3c0:	4629      	mov	r1, r5
 802c3c2:	4640      	mov	r0, r8
 802c3c4:	4798      	blx	r3
 802c3c6:	2800      	cmp	r0, #0
 802c3c8:	d0d0      	beq.n	802c36c <_scanf_chars+0x30>
 802c3ca:	6823      	ldr	r3, [r4, #0]
 802c3cc:	f013 0310 	ands.w	r3, r3, #16
 802c3d0:	d105      	bne.n	802c3de <_scanf_chars+0xa2>
 802c3d2:	68e2      	ldr	r2, [r4, #12]
 802c3d4:	3201      	adds	r2, #1
 802c3d6:	60e2      	str	r2, [r4, #12]
 802c3d8:	69a2      	ldr	r2, [r4, #24]
 802c3da:	b102      	cbz	r2, 802c3de <_scanf_chars+0xa2>
 802c3dc:	7033      	strb	r3, [r6, #0]
 802c3de:	6923      	ldr	r3, [r4, #16]
 802c3e0:	443b      	add	r3, r7
 802c3e2:	6123      	str	r3, [r4, #16]
 802c3e4:	2000      	movs	r0, #0
 802c3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c3ea:	bf00      	nop
 802c3ec:	0803ebf1 	.word	0x0803ebf1

0802c3f0 <_scanf_i>:
 802c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3f4:	4698      	mov	r8, r3
 802c3f6:	4b74      	ldr	r3, [pc, #464]	@ (802c5c8 <_scanf_i+0x1d8>)
 802c3f8:	460c      	mov	r4, r1
 802c3fa:	4682      	mov	sl, r0
 802c3fc:	4616      	mov	r6, r2
 802c3fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802c402:	b087      	sub	sp, #28
 802c404:	ab03      	add	r3, sp, #12
 802c406:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c40a:	4b70      	ldr	r3, [pc, #448]	@ (802c5cc <_scanf_i+0x1dc>)
 802c40c:	69a1      	ldr	r1, [r4, #24]
 802c40e:	4a70      	ldr	r2, [pc, #448]	@ (802c5d0 <_scanf_i+0x1e0>)
 802c410:	2903      	cmp	r1, #3
 802c412:	bf08      	it	eq
 802c414:	461a      	moveq	r2, r3
 802c416:	68a3      	ldr	r3, [r4, #8]
 802c418:	9201      	str	r2, [sp, #4]
 802c41a:	1e5a      	subs	r2, r3, #1
 802c41c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802c420:	bf88      	it	hi
 802c422:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802c426:	4627      	mov	r7, r4
 802c428:	bf82      	ittt	hi
 802c42a:	eb03 0905 	addhi.w	r9, r3, r5
 802c42e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802c432:	60a3      	strhi	r3, [r4, #8]
 802c434:	f857 3b1c 	ldr.w	r3, [r7], #28
 802c438:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802c43c:	bf98      	it	ls
 802c43e:	f04f 0900 	movls.w	r9, #0
 802c442:	6023      	str	r3, [r4, #0]
 802c444:	463d      	mov	r5, r7
 802c446:	f04f 0b00 	mov.w	fp, #0
 802c44a:	6831      	ldr	r1, [r6, #0]
 802c44c:	ab03      	add	r3, sp, #12
 802c44e:	7809      	ldrb	r1, [r1, #0]
 802c450:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802c454:	2202      	movs	r2, #2
 802c456:	f7d3 ff6b 	bl	8000330 <memchr>
 802c45a:	b328      	cbz	r0, 802c4a8 <_scanf_i+0xb8>
 802c45c:	f1bb 0f01 	cmp.w	fp, #1
 802c460:	d159      	bne.n	802c516 <_scanf_i+0x126>
 802c462:	6862      	ldr	r2, [r4, #4]
 802c464:	b92a      	cbnz	r2, 802c472 <_scanf_i+0x82>
 802c466:	6822      	ldr	r2, [r4, #0]
 802c468:	2108      	movs	r1, #8
 802c46a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802c46e:	6061      	str	r1, [r4, #4]
 802c470:	6022      	str	r2, [r4, #0]
 802c472:	6822      	ldr	r2, [r4, #0]
 802c474:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802c478:	6022      	str	r2, [r4, #0]
 802c47a:	68a2      	ldr	r2, [r4, #8]
 802c47c:	1e51      	subs	r1, r2, #1
 802c47e:	60a1      	str	r1, [r4, #8]
 802c480:	b192      	cbz	r2, 802c4a8 <_scanf_i+0xb8>
 802c482:	6832      	ldr	r2, [r6, #0]
 802c484:	1c51      	adds	r1, r2, #1
 802c486:	6031      	str	r1, [r6, #0]
 802c488:	7812      	ldrb	r2, [r2, #0]
 802c48a:	f805 2b01 	strb.w	r2, [r5], #1
 802c48e:	6872      	ldr	r2, [r6, #4]
 802c490:	3a01      	subs	r2, #1
 802c492:	2a00      	cmp	r2, #0
 802c494:	6072      	str	r2, [r6, #4]
 802c496:	dc07      	bgt.n	802c4a8 <_scanf_i+0xb8>
 802c498:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802c49c:	4631      	mov	r1, r6
 802c49e:	4650      	mov	r0, sl
 802c4a0:	4790      	blx	r2
 802c4a2:	2800      	cmp	r0, #0
 802c4a4:	f040 8085 	bne.w	802c5b2 <_scanf_i+0x1c2>
 802c4a8:	f10b 0b01 	add.w	fp, fp, #1
 802c4ac:	f1bb 0f03 	cmp.w	fp, #3
 802c4b0:	d1cb      	bne.n	802c44a <_scanf_i+0x5a>
 802c4b2:	6863      	ldr	r3, [r4, #4]
 802c4b4:	b90b      	cbnz	r3, 802c4ba <_scanf_i+0xca>
 802c4b6:	230a      	movs	r3, #10
 802c4b8:	6063      	str	r3, [r4, #4]
 802c4ba:	6863      	ldr	r3, [r4, #4]
 802c4bc:	4945      	ldr	r1, [pc, #276]	@ (802c5d4 <_scanf_i+0x1e4>)
 802c4be:	6960      	ldr	r0, [r4, #20]
 802c4c0:	1ac9      	subs	r1, r1, r3
 802c4c2:	f000 f8eb 	bl	802c69c <__sccl>
 802c4c6:	f04f 0b00 	mov.w	fp, #0
 802c4ca:	68a3      	ldr	r3, [r4, #8]
 802c4cc:	6822      	ldr	r2, [r4, #0]
 802c4ce:	2b00      	cmp	r3, #0
 802c4d0:	d03d      	beq.n	802c54e <_scanf_i+0x15e>
 802c4d2:	6831      	ldr	r1, [r6, #0]
 802c4d4:	6960      	ldr	r0, [r4, #20]
 802c4d6:	f891 c000 	ldrb.w	ip, [r1]
 802c4da:	f810 000c 	ldrb.w	r0, [r0, ip]
 802c4de:	2800      	cmp	r0, #0
 802c4e0:	d035      	beq.n	802c54e <_scanf_i+0x15e>
 802c4e2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802c4e6:	d124      	bne.n	802c532 <_scanf_i+0x142>
 802c4e8:	0510      	lsls	r0, r2, #20
 802c4ea:	d522      	bpl.n	802c532 <_scanf_i+0x142>
 802c4ec:	f10b 0b01 	add.w	fp, fp, #1
 802c4f0:	f1b9 0f00 	cmp.w	r9, #0
 802c4f4:	d003      	beq.n	802c4fe <_scanf_i+0x10e>
 802c4f6:	3301      	adds	r3, #1
 802c4f8:	f109 39ff 	add.w	r9, r9, #4294967295
 802c4fc:	60a3      	str	r3, [r4, #8]
 802c4fe:	6873      	ldr	r3, [r6, #4]
 802c500:	3b01      	subs	r3, #1
 802c502:	2b00      	cmp	r3, #0
 802c504:	6073      	str	r3, [r6, #4]
 802c506:	dd1b      	ble.n	802c540 <_scanf_i+0x150>
 802c508:	6833      	ldr	r3, [r6, #0]
 802c50a:	3301      	adds	r3, #1
 802c50c:	6033      	str	r3, [r6, #0]
 802c50e:	68a3      	ldr	r3, [r4, #8]
 802c510:	3b01      	subs	r3, #1
 802c512:	60a3      	str	r3, [r4, #8]
 802c514:	e7d9      	b.n	802c4ca <_scanf_i+0xda>
 802c516:	f1bb 0f02 	cmp.w	fp, #2
 802c51a:	d1ae      	bne.n	802c47a <_scanf_i+0x8a>
 802c51c:	6822      	ldr	r2, [r4, #0]
 802c51e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 802c522:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802c526:	d1c4      	bne.n	802c4b2 <_scanf_i+0xc2>
 802c528:	2110      	movs	r1, #16
 802c52a:	6061      	str	r1, [r4, #4]
 802c52c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802c530:	e7a2      	b.n	802c478 <_scanf_i+0x88>
 802c532:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802c536:	6022      	str	r2, [r4, #0]
 802c538:	780b      	ldrb	r3, [r1, #0]
 802c53a:	f805 3b01 	strb.w	r3, [r5], #1
 802c53e:	e7de      	b.n	802c4fe <_scanf_i+0x10e>
 802c540:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802c544:	4631      	mov	r1, r6
 802c546:	4650      	mov	r0, sl
 802c548:	4798      	blx	r3
 802c54a:	2800      	cmp	r0, #0
 802c54c:	d0df      	beq.n	802c50e <_scanf_i+0x11e>
 802c54e:	6823      	ldr	r3, [r4, #0]
 802c550:	05d9      	lsls	r1, r3, #23
 802c552:	d50d      	bpl.n	802c570 <_scanf_i+0x180>
 802c554:	42bd      	cmp	r5, r7
 802c556:	d909      	bls.n	802c56c <_scanf_i+0x17c>
 802c558:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802c55c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802c560:	4632      	mov	r2, r6
 802c562:	4650      	mov	r0, sl
 802c564:	4798      	blx	r3
 802c566:	f105 39ff 	add.w	r9, r5, #4294967295
 802c56a:	464d      	mov	r5, r9
 802c56c:	42bd      	cmp	r5, r7
 802c56e:	d028      	beq.n	802c5c2 <_scanf_i+0x1d2>
 802c570:	6822      	ldr	r2, [r4, #0]
 802c572:	f012 0210 	ands.w	r2, r2, #16
 802c576:	d113      	bne.n	802c5a0 <_scanf_i+0x1b0>
 802c578:	702a      	strb	r2, [r5, #0]
 802c57a:	6863      	ldr	r3, [r4, #4]
 802c57c:	9e01      	ldr	r6, [sp, #4]
 802c57e:	4639      	mov	r1, r7
 802c580:	4650      	mov	r0, sl
 802c582:	47b0      	blx	r6
 802c584:	f8d8 3000 	ldr.w	r3, [r8]
 802c588:	6821      	ldr	r1, [r4, #0]
 802c58a:	1d1a      	adds	r2, r3, #4
 802c58c:	f8c8 2000 	str.w	r2, [r8]
 802c590:	f011 0f20 	tst.w	r1, #32
 802c594:	681b      	ldr	r3, [r3, #0]
 802c596:	d00f      	beq.n	802c5b8 <_scanf_i+0x1c8>
 802c598:	6018      	str	r0, [r3, #0]
 802c59a:	68e3      	ldr	r3, [r4, #12]
 802c59c:	3301      	adds	r3, #1
 802c59e:	60e3      	str	r3, [r4, #12]
 802c5a0:	6923      	ldr	r3, [r4, #16]
 802c5a2:	1bed      	subs	r5, r5, r7
 802c5a4:	445d      	add	r5, fp
 802c5a6:	442b      	add	r3, r5
 802c5a8:	6123      	str	r3, [r4, #16]
 802c5aa:	2000      	movs	r0, #0
 802c5ac:	b007      	add	sp, #28
 802c5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c5b2:	f04f 0b00 	mov.w	fp, #0
 802c5b6:	e7ca      	b.n	802c54e <_scanf_i+0x15e>
 802c5b8:	07ca      	lsls	r2, r1, #31
 802c5ba:	bf4c      	ite	mi
 802c5bc:	8018      	strhmi	r0, [r3, #0]
 802c5be:	6018      	strpl	r0, [r3, #0]
 802c5c0:	e7eb      	b.n	802c59a <_scanf_i+0x1aa>
 802c5c2:	2001      	movs	r0, #1
 802c5c4:	e7f2      	b.n	802c5ac <_scanf_i+0x1bc>
 802c5c6:	bf00      	nop
 802c5c8:	08030c5c 	.word	0x08030c5c
 802c5cc:	080276f1 	.word	0x080276f1
 802c5d0:	080277f9 	.word	0x080277f9
 802c5d4:	0803eb91 	.word	0x0803eb91

0802c5d8 <__swhatbuf_r>:
 802c5d8:	b570      	push	{r4, r5, r6, lr}
 802c5da:	460c      	mov	r4, r1
 802c5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c5e0:	2900      	cmp	r1, #0
 802c5e2:	b096      	sub	sp, #88	@ 0x58
 802c5e4:	4615      	mov	r5, r2
 802c5e6:	461e      	mov	r6, r3
 802c5e8:	da0d      	bge.n	802c606 <__swhatbuf_r+0x2e>
 802c5ea:	89a3      	ldrh	r3, [r4, #12]
 802c5ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802c5f0:	f04f 0100 	mov.w	r1, #0
 802c5f4:	bf14      	ite	ne
 802c5f6:	2340      	movne	r3, #64	@ 0x40
 802c5f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802c5fc:	2000      	movs	r0, #0
 802c5fe:	6031      	str	r1, [r6, #0]
 802c600:	602b      	str	r3, [r5, #0]
 802c602:	b016      	add	sp, #88	@ 0x58
 802c604:	bd70      	pop	{r4, r5, r6, pc}
 802c606:	466a      	mov	r2, sp
 802c608:	f000 f9cc 	bl	802c9a4 <_fstat_r>
 802c60c:	2800      	cmp	r0, #0
 802c60e:	dbec      	blt.n	802c5ea <__swhatbuf_r+0x12>
 802c610:	9901      	ldr	r1, [sp, #4]
 802c612:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802c616:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802c61a:	4259      	negs	r1, r3
 802c61c:	4159      	adcs	r1, r3
 802c61e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c622:	e7eb      	b.n	802c5fc <__swhatbuf_r+0x24>

0802c624 <__smakebuf_r>:
 802c624:	898b      	ldrh	r3, [r1, #12]
 802c626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c628:	079d      	lsls	r5, r3, #30
 802c62a:	4606      	mov	r6, r0
 802c62c:	460c      	mov	r4, r1
 802c62e:	d507      	bpl.n	802c640 <__smakebuf_r+0x1c>
 802c630:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802c634:	6023      	str	r3, [r4, #0]
 802c636:	6123      	str	r3, [r4, #16]
 802c638:	2301      	movs	r3, #1
 802c63a:	6163      	str	r3, [r4, #20]
 802c63c:	b003      	add	sp, #12
 802c63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c640:	ab01      	add	r3, sp, #4
 802c642:	466a      	mov	r2, sp
 802c644:	f7ff ffc8 	bl	802c5d8 <__swhatbuf_r>
 802c648:	9f00      	ldr	r7, [sp, #0]
 802c64a:	4605      	mov	r5, r0
 802c64c:	4639      	mov	r1, r7
 802c64e:	4630      	mov	r0, r6
 802c650:	f7fa f92a 	bl	80268a8 <_malloc_r>
 802c654:	b948      	cbnz	r0, 802c66a <__smakebuf_r+0x46>
 802c656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c65a:	059a      	lsls	r2, r3, #22
 802c65c:	d4ee      	bmi.n	802c63c <__smakebuf_r+0x18>
 802c65e:	f023 0303 	bic.w	r3, r3, #3
 802c662:	f043 0302 	orr.w	r3, r3, #2
 802c666:	81a3      	strh	r3, [r4, #12]
 802c668:	e7e2      	b.n	802c630 <__smakebuf_r+0xc>
 802c66a:	89a3      	ldrh	r3, [r4, #12]
 802c66c:	6020      	str	r0, [r4, #0]
 802c66e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802c672:	81a3      	strh	r3, [r4, #12]
 802c674:	9b01      	ldr	r3, [sp, #4]
 802c676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802c67a:	b15b      	cbz	r3, 802c694 <__smakebuf_r+0x70>
 802c67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c680:	4630      	mov	r0, r6
 802c682:	f000 f9a1 	bl	802c9c8 <_isatty_r>
 802c686:	b128      	cbz	r0, 802c694 <__smakebuf_r+0x70>
 802c688:	89a3      	ldrh	r3, [r4, #12]
 802c68a:	f023 0303 	bic.w	r3, r3, #3
 802c68e:	f043 0301 	orr.w	r3, r3, #1
 802c692:	81a3      	strh	r3, [r4, #12]
 802c694:	89a3      	ldrh	r3, [r4, #12]
 802c696:	431d      	orrs	r5, r3
 802c698:	81a5      	strh	r5, [r4, #12]
 802c69a:	e7cf      	b.n	802c63c <__smakebuf_r+0x18>

0802c69c <__sccl>:
 802c69c:	b570      	push	{r4, r5, r6, lr}
 802c69e:	780b      	ldrb	r3, [r1, #0]
 802c6a0:	4604      	mov	r4, r0
 802c6a2:	2b5e      	cmp	r3, #94	@ 0x5e
 802c6a4:	bf0b      	itete	eq
 802c6a6:	784b      	ldrbeq	r3, [r1, #1]
 802c6a8:	1c4a      	addne	r2, r1, #1
 802c6aa:	1c8a      	addeq	r2, r1, #2
 802c6ac:	2100      	movne	r1, #0
 802c6ae:	bf08      	it	eq
 802c6b0:	2101      	moveq	r1, #1
 802c6b2:	3801      	subs	r0, #1
 802c6b4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802c6b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 802c6bc:	42a8      	cmp	r0, r5
 802c6be:	d1fb      	bne.n	802c6b8 <__sccl+0x1c>
 802c6c0:	b90b      	cbnz	r3, 802c6c6 <__sccl+0x2a>
 802c6c2:	1e50      	subs	r0, r2, #1
 802c6c4:	bd70      	pop	{r4, r5, r6, pc}
 802c6c6:	f081 0101 	eor.w	r1, r1, #1
 802c6ca:	54e1      	strb	r1, [r4, r3]
 802c6cc:	4610      	mov	r0, r2
 802c6ce:	4602      	mov	r2, r0
 802c6d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 802c6d4:	2d2d      	cmp	r5, #45	@ 0x2d
 802c6d6:	d005      	beq.n	802c6e4 <__sccl+0x48>
 802c6d8:	2d5d      	cmp	r5, #93	@ 0x5d
 802c6da:	d016      	beq.n	802c70a <__sccl+0x6e>
 802c6dc:	2d00      	cmp	r5, #0
 802c6de:	d0f1      	beq.n	802c6c4 <__sccl+0x28>
 802c6e0:	462b      	mov	r3, r5
 802c6e2:	e7f2      	b.n	802c6ca <__sccl+0x2e>
 802c6e4:	7846      	ldrb	r6, [r0, #1]
 802c6e6:	2e5d      	cmp	r6, #93	@ 0x5d
 802c6e8:	d0fa      	beq.n	802c6e0 <__sccl+0x44>
 802c6ea:	42b3      	cmp	r3, r6
 802c6ec:	dcf8      	bgt.n	802c6e0 <__sccl+0x44>
 802c6ee:	3002      	adds	r0, #2
 802c6f0:	461a      	mov	r2, r3
 802c6f2:	3201      	adds	r2, #1
 802c6f4:	4296      	cmp	r6, r2
 802c6f6:	54a1      	strb	r1, [r4, r2]
 802c6f8:	dcfb      	bgt.n	802c6f2 <__sccl+0x56>
 802c6fa:	1af2      	subs	r2, r6, r3
 802c6fc:	3a01      	subs	r2, #1
 802c6fe:	1c5d      	adds	r5, r3, #1
 802c700:	42b3      	cmp	r3, r6
 802c702:	bfa8      	it	ge
 802c704:	2200      	movge	r2, #0
 802c706:	18ab      	adds	r3, r5, r2
 802c708:	e7e1      	b.n	802c6ce <__sccl+0x32>
 802c70a:	4610      	mov	r0, r2
 802c70c:	e7da      	b.n	802c6c4 <__sccl+0x28>

0802c70e <__submore>:
 802c70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c712:	460c      	mov	r4, r1
 802c714:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802c716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c71a:	4299      	cmp	r1, r3
 802c71c:	d11d      	bne.n	802c75a <__submore+0x4c>
 802c71e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802c722:	f7fa f8c1 	bl	80268a8 <_malloc_r>
 802c726:	b918      	cbnz	r0, 802c730 <__submore+0x22>
 802c728:	f04f 30ff 	mov.w	r0, #4294967295
 802c72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c730:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802c734:	63a3      	str	r3, [r4, #56]	@ 0x38
 802c736:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802c73a:	6360      	str	r0, [r4, #52]	@ 0x34
 802c73c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802c740:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802c744:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 802c748:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802c74c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802c750:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802c754:	6020      	str	r0, [r4, #0]
 802c756:	2000      	movs	r0, #0
 802c758:	e7e8      	b.n	802c72c <__submore+0x1e>
 802c75a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 802c75c:	0077      	lsls	r7, r6, #1
 802c75e:	463a      	mov	r2, r7
 802c760:	f7fa f95c 	bl	8026a1c <_realloc_r>
 802c764:	4605      	mov	r5, r0
 802c766:	2800      	cmp	r0, #0
 802c768:	d0de      	beq.n	802c728 <__submore+0x1a>
 802c76a:	eb00 0806 	add.w	r8, r0, r6
 802c76e:	4601      	mov	r1, r0
 802c770:	4632      	mov	r2, r6
 802c772:	4640      	mov	r0, r8
 802c774:	f7fd fa43 	bl	8029bfe <memcpy>
 802c778:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 802c77c:	f8c4 8000 	str.w	r8, [r4]
 802c780:	e7e9      	b.n	802c756 <__submore+0x48>

0802c782 <strncasecmp_l>:
 802c782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c786:	4605      	mov	r5, r0
 802c788:	460f      	mov	r7, r1
 802c78a:	4698      	mov	r8, r3
 802c78c:	eb00 0902 	add.w	r9, r0, r2
 802c790:	454d      	cmp	r5, r9
 802c792:	d00f      	beq.n	802c7b4 <strncasecmp_l+0x32>
 802c794:	4641      	mov	r1, r8
 802c796:	f815 0b01 	ldrb.w	r0, [r5], #1
 802c79a:	f000 f931 	bl	802ca00 <tolower_l>
 802c79e:	4641      	mov	r1, r8
 802c7a0:	4604      	mov	r4, r0
 802c7a2:	f817 0b01 	ldrb.w	r0, [r7], #1
 802c7a6:	f000 f92b 	bl	802ca00 <tolower_l>
 802c7aa:	4606      	mov	r6, r0
 802c7ac:	1a20      	subs	r0, r4, r0
 802c7ae:	d102      	bne.n	802c7b6 <strncasecmp_l+0x34>
 802c7b0:	2e00      	cmp	r6, #0
 802c7b2:	d1ed      	bne.n	802c790 <strncasecmp_l+0xe>
 802c7b4:	2000      	movs	r0, #0
 802c7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0802c7bc <__gettzinfo>:
 802c7bc:	4800      	ldr	r0, [pc, #0]	@ (802c7c0 <__gettzinfo+0x4>)
 802c7be:	4770      	bx	lr
 802c7c0:	240009f8 	.word	0x240009f8

0802c7c4 <localtime_r>:
 802c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c7c8:	460c      	mov	r4, r1
 802c7ca:	4607      	mov	r7, r0
 802c7cc:	f7ff fff6 	bl	802c7bc <__gettzinfo>
 802c7d0:	4621      	mov	r1, r4
 802c7d2:	4605      	mov	r5, r0
 802c7d4:	4638      	mov	r0, r7
 802c7d6:	f000 f91d 	bl	802ca14 <gmtime_r>
 802c7da:	6943      	ldr	r3, [r0, #20]
 802c7dc:	0799      	lsls	r1, r3, #30
 802c7de:	4604      	mov	r4, r0
 802c7e0:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 802c7e4:	d106      	bne.n	802c7f4 <localtime_r+0x30>
 802c7e6:	2264      	movs	r2, #100	@ 0x64
 802c7e8:	fb98 f3f2 	sdiv	r3, r8, r2
 802c7ec:	fb02 8313 	mls	r3, r2, r3, r8
 802c7f0:	2b00      	cmp	r3, #0
 802c7f2:	d171      	bne.n	802c8d8 <localtime_r+0x114>
 802c7f4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c7f8:	fb98 f3f2 	sdiv	r3, r8, r2
 802c7fc:	fb02 8313 	mls	r3, r2, r3, r8
 802c800:	fab3 f383 	clz	r3, r3
 802c804:	095b      	lsrs	r3, r3, #5
 802c806:	425e      	negs	r6, r3
 802c808:	4b64      	ldr	r3, [pc, #400]	@ (802c99c <localtime_r+0x1d8>)
 802c80a:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 802c80e:	441e      	add	r6, r3
 802c810:	f7fc ff1c 	bl	802964c <__tz_lock>
 802c814:	f7fc ff26 	bl	8029664 <_tzset_unlocked>
 802c818:	4b61      	ldr	r3, [pc, #388]	@ (802c9a0 <localtime_r+0x1dc>)
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	2b00      	cmp	r3, #0
 802c81e:	d06a      	beq.n	802c8f6 <localtime_r+0x132>
 802c820:	686b      	ldr	r3, [r5, #4]
 802c822:	4543      	cmp	r3, r8
 802c824:	d15a      	bne.n	802c8dc <localtime_r+0x118>
 802c826:	e9d7 2300 	ldrd	r2, r3, [r7]
 802c82a:	682f      	ldr	r7, [r5, #0]
 802c82c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802c830:	2f00      	cmp	r7, #0
 802c832:	d15b      	bne.n	802c8ec <localtime_r+0x128>
 802c834:	4282      	cmp	r2, r0
 802c836:	eb73 0101 	sbcs.w	r1, r3, r1
 802c83a:	db5e      	blt.n	802c8fa <localtime_r+0x136>
 802c83c:	2301      	movs	r3, #1
 802c83e:	6223      	str	r3, [r4, #32]
 802c840:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802c842:	6861      	ldr	r1, [r4, #4]
 802c844:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802c848:	fb93 f0f2 	sdiv	r0, r3, r2
 802c84c:	fb02 3310 	mls	r3, r2, r0, r3
 802c850:	223c      	movs	r2, #60	@ 0x3c
 802c852:	fb93 f5f2 	sdiv	r5, r3, r2
 802c856:	fb02 3215 	mls	r2, r2, r5, r3
 802c85a:	6823      	ldr	r3, [r4, #0]
 802c85c:	1a9b      	subs	r3, r3, r2
 802c85e:	68a2      	ldr	r2, [r4, #8]
 802c860:	6023      	str	r3, [r4, #0]
 802c862:	1b49      	subs	r1, r1, r5
 802c864:	1a12      	subs	r2, r2, r0
 802c866:	2b3b      	cmp	r3, #59	@ 0x3b
 802c868:	6061      	str	r1, [r4, #4]
 802c86a:	60a2      	str	r2, [r4, #8]
 802c86c:	dd51      	ble.n	802c912 <localtime_r+0x14e>
 802c86e:	3101      	adds	r1, #1
 802c870:	6061      	str	r1, [r4, #4]
 802c872:	3b3c      	subs	r3, #60	@ 0x3c
 802c874:	6023      	str	r3, [r4, #0]
 802c876:	6863      	ldr	r3, [r4, #4]
 802c878:	2b3b      	cmp	r3, #59	@ 0x3b
 802c87a:	dd50      	ble.n	802c91e <localtime_r+0x15a>
 802c87c:	3201      	adds	r2, #1
 802c87e:	60a2      	str	r2, [r4, #8]
 802c880:	3b3c      	subs	r3, #60	@ 0x3c
 802c882:	6063      	str	r3, [r4, #4]
 802c884:	68a3      	ldr	r3, [r4, #8]
 802c886:	2b17      	cmp	r3, #23
 802c888:	dd4f      	ble.n	802c92a <localtime_r+0x166>
 802c88a:	69e2      	ldr	r2, [r4, #28]
 802c88c:	3201      	adds	r2, #1
 802c88e:	61e2      	str	r2, [r4, #28]
 802c890:	69a2      	ldr	r2, [r4, #24]
 802c892:	3201      	adds	r2, #1
 802c894:	2a07      	cmp	r2, #7
 802c896:	bfa8      	it	ge
 802c898:	2200      	movge	r2, #0
 802c89a:	61a2      	str	r2, [r4, #24]
 802c89c:	68e2      	ldr	r2, [r4, #12]
 802c89e:	3b18      	subs	r3, #24
 802c8a0:	3201      	adds	r2, #1
 802c8a2:	60a3      	str	r3, [r4, #8]
 802c8a4:	6923      	ldr	r3, [r4, #16]
 802c8a6:	60e2      	str	r2, [r4, #12]
 802c8a8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c8ac:	428a      	cmp	r2, r1
 802c8ae:	dd0e      	ble.n	802c8ce <localtime_r+0x10a>
 802c8b0:	2b0b      	cmp	r3, #11
 802c8b2:	eba2 0201 	sub.w	r2, r2, r1
 802c8b6:	60e2      	str	r2, [r4, #12]
 802c8b8:	f103 0201 	add.w	r2, r3, #1
 802c8bc:	bf09      	itett	eq
 802c8be:	6963      	ldreq	r3, [r4, #20]
 802c8c0:	6122      	strne	r2, [r4, #16]
 802c8c2:	2200      	moveq	r2, #0
 802c8c4:	3301      	addeq	r3, #1
 802c8c6:	bf02      	ittt	eq
 802c8c8:	6122      	streq	r2, [r4, #16]
 802c8ca:	6163      	streq	r3, [r4, #20]
 802c8cc:	61e2      	streq	r2, [r4, #28]
 802c8ce:	f7fc fec3 	bl	8029658 <__tz_unlock>
 802c8d2:	4620      	mov	r0, r4
 802c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c8d8:	2301      	movs	r3, #1
 802c8da:	e794      	b.n	802c806 <localtime_r+0x42>
 802c8dc:	4640      	mov	r0, r8
 802c8de:	f7fc fe01 	bl	80294e4 <__tzcalc_limits>
 802c8e2:	2800      	cmp	r0, #0
 802c8e4:	d19f      	bne.n	802c826 <localtime_r+0x62>
 802c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 802c8ea:	e004      	b.n	802c8f6 <localtime_r+0x132>
 802c8ec:	4282      	cmp	r2, r0
 802c8ee:	eb73 0101 	sbcs.w	r1, r3, r1
 802c8f2:	da02      	bge.n	802c8fa <localtime_r+0x136>
 802c8f4:	2300      	movs	r3, #0
 802c8f6:	6223      	str	r3, [r4, #32]
 802c8f8:	e009      	b.n	802c90e <localtime_r+0x14a>
 802c8fa:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802c8fe:	4282      	cmp	r2, r0
 802c900:	418b      	sbcs	r3, r1
 802c902:	bfb4      	ite	lt
 802c904:	2301      	movlt	r3, #1
 802c906:	2300      	movge	r3, #0
 802c908:	6223      	str	r3, [r4, #32]
 802c90a:	2b00      	cmp	r3, #0
 802c90c:	d198      	bne.n	802c840 <localtime_r+0x7c>
 802c90e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802c910:	e797      	b.n	802c842 <localtime_r+0x7e>
 802c912:	2b00      	cmp	r3, #0
 802c914:	daaf      	bge.n	802c876 <localtime_r+0xb2>
 802c916:	3901      	subs	r1, #1
 802c918:	6061      	str	r1, [r4, #4]
 802c91a:	333c      	adds	r3, #60	@ 0x3c
 802c91c:	e7aa      	b.n	802c874 <localtime_r+0xb0>
 802c91e:	2b00      	cmp	r3, #0
 802c920:	dab0      	bge.n	802c884 <localtime_r+0xc0>
 802c922:	3a01      	subs	r2, #1
 802c924:	60a2      	str	r2, [r4, #8]
 802c926:	333c      	adds	r3, #60	@ 0x3c
 802c928:	e7ab      	b.n	802c882 <localtime_r+0xbe>
 802c92a:	2b00      	cmp	r3, #0
 802c92c:	dacf      	bge.n	802c8ce <localtime_r+0x10a>
 802c92e:	69e2      	ldr	r2, [r4, #28]
 802c930:	3a01      	subs	r2, #1
 802c932:	61e2      	str	r2, [r4, #28]
 802c934:	69a2      	ldr	r2, [r4, #24]
 802c936:	3a01      	subs	r2, #1
 802c938:	bf48      	it	mi
 802c93a:	2206      	movmi	r2, #6
 802c93c:	61a2      	str	r2, [r4, #24]
 802c93e:	68e2      	ldr	r2, [r4, #12]
 802c940:	3318      	adds	r3, #24
 802c942:	3a01      	subs	r2, #1
 802c944:	60e2      	str	r2, [r4, #12]
 802c946:	60a3      	str	r3, [r4, #8]
 802c948:	2a00      	cmp	r2, #0
 802c94a:	d1c0      	bne.n	802c8ce <localtime_r+0x10a>
 802c94c:	6923      	ldr	r3, [r4, #16]
 802c94e:	3b01      	subs	r3, #1
 802c950:	d405      	bmi.n	802c95e <localtime_r+0x19a>
 802c952:	6123      	str	r3, [r4, #16]
 802c954:	6923      	ldr	r3, [r4, #16]
 802c956:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c95a:	60e3      	str	r3, [r4, #12]
 802c95c:	e7b7      	b.n	802c8ce <localtime_r+0x10a>
 802c95e:	230b      	movs	r3, #11
 802c960:	6123      	str	r3, [r4, #16]
 802c962:	6963      	ldr	r3, [r4, #20]
 802c964:	1e5a      	subs	r2, r3, #1
 802c966:	6162      	str	r2, [r4, #20]
 802c968:	0792      	lsls	r2, r2, #30
 802c96a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802c96e:	d105      	bne.n	802c97c <localtime_r+0x1b8>
 802c970:	2164      	movs	r1, #100	@ 0x64
 802c972:	fb93 f2f1 	sdiv	r2, r3, r1
 802c976:	fb01 3212 	mls	r2, r1, r2, r3
 802c97a:	b962      	cbnz	r2, 802c996 <localtime_r+0x1d2>
 802c97c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c980:	fb93 f1f2 	sdiv	r1, r3, r2
 802c984:	fb02 3311 	mls	r3, r2, r1, r3
 802c988:	fab3 f383 	clz	r3, r3
 802c98c:	095b      	lsrs	r3, r3, #5
 802c98e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802c992:	61e3      	str	r3, [r4, #28]
 802c994:	e7de      	b.n	802c954 <localtime_r+0x190>
 802c996:	2301      	movs	r3, #1
 802c998:	e7f9      	b.n	802c98e <localtime_r+0x1ca>
 802c99a:	bf00      	nop
 802c99c:	0803ef80 	.word	0x0803ef80
 802c9a0:	2401d28c 	.word	0x2401d28c

0802c9a4 <_fstat_r>:
 802c9a4:	b538      	push	{r3, r4, r5, lr}
 802c9a6:	4d07      	ldr	r5, [pc, #28]	@ (802c9c4 <_fstat_r+0x20>)
 802c9a8:	2300      	movs	r3, #0
 802c9aa:	4604      	mov	r4, r0
 802c9ac:	4608      	mov	r0, r1
 802c9ae:	4611      	mov	r1, r2
 802c9b0:	602b      	str	r3, [r5, #0]
 802c9b2:	f7d5 ff54 	bl	800285e <_fstat>
 802c9b6:	1c43      	adds	r3, r0, #1
 802c9b8:	d102      	bne.n	802c9c0 <_fstat_r+0x1c>
 802c9ba:	682b      	ldr	r3, [r5, #0]
 802c9bc:	b103      	cbz	r3, 802c9c0 <_fstat_r+0x1c>
 802c9be:	6023      	str	r3, [r4, #0]
 802c9c0:	bd38      	pop	{r3, r4, r5, pc}
 802c9c2:	bf00      	nop
 802c9c4:	2401d290 	.word	0x2401d290

0802c9c8 <_isatty_r>:
 802c9c8:	b538      	push	{r3, r4, r5, lr}
 802c9ca:	4d06      	ldr	r5, [pc, #24]	@ (802c9e4 <_isatty_r+0x1c>)
 802c9cc:	2300      	movs	r3, #0
 802c9ce:	4604      	mov	r4, r0
 802c9d0:	4608      	mov	r0, r1
 802c9d2:	602b      	str	r3, [r5, #0]
 802c9d4:	f7d5 ff53 	bl	800287e <_isatty>
 802c9d8:	1c43      	adds	r3, r0, #1
 802c9da:	d102      	bne.n	802c9e2 <_isatty_r+0x1a>
 802c9dc:	682b      	ldr	r3, [r5, #0]
 802c9de:	b103      	cbz	r3, 802c9e2 <_isatty_r+0x1a>
 802c9e0:	6023      	str	r3, [r4, #0]
 802c9e2:	bd38      	pop	{r3, r4, r5, pc}
 802c9e4:	2401d290 	.word	0x2401d290

0802c9e8 <__env_lock>:
 802c9e8:	4801      	ldr	r0, [pc, #4]	@ (802c9f0 <__env_lock+0x8>)
 802c9ea:	f7fd b8fd 	b.w	8029be8 <__retarget_lock_acquire_recursive>
 802c9ee:	bf00      	nop
 802c9f0:	2401d295 	.word	0x2401d295

0802c9f4 <__env_unlock>:
 802c9f4:	4801      	ldr	r0, [pc, #4]	@ (802c9fc <__env_unlock+0x8>)
 802c9f6:	f7fd b8f9 	b.w	8029bec <__retarget_lock_release_recursive>
 802c9fa:	bf00      	nop
 802c9fc:	2401d295 	.word	0x2401d295

0802ca00 <tolower_l>:
 802ca00:	4b03      	ldr	r3, [pc, #12]	@ (802ca10 <tolower_l+0x10>)
 802ca02:	5c1b      	ldrb	r3, [r3, r0]
 802ca04:	f003 0303 	and.w	r3, r3, #3
 802ca08:	2b01      	cmp	r3, #1
 802ca0a:	bf08      	it	eq
 802ca0c:	3020      	addeq	r0, #32
 802ca0e:	4770      	bx	lr
 802ca10:	0803ebf1 	.word	0x0803ebf1

0802ca14 <gmtime_r>:
 802ca14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca18:	4a4d      	ldr	r2, [pc, #308]	@ (802cb50 <gmtime_r+0x13c>)
 802ca1a:	460c      	mov	r4, r1
 802ca1c:	2300      	movs	r3, #0
 802ca1e:	e9d0 0100 	ldrd	r0, r1, [r0]
 802ca22:	f7d3 fe99 	bl	8000758 <__aeabi_ldivmod>
 802ca26:	2a00      	cmp	r2, #0
 802ca28:	bfbc      	itt	lt
 802ca2a:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802ca2e:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802ca32:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802ca36:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802ca3a:	fbb2 f3f1 	udiv	r3, r2, r1
 802ca3e:	fb01 2213 	mls	r2, r1, r3, r2
 802ca42:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802ca46:	bfac      	ite	ge
 802ca48:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802ca4c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802ca50:	60a3      	str	r3, [r4, #8]
 802ca52:	fbb2 f3f1 	udiv	r3, r2, r1
 802ca56:	fb01 2213 	mls	r2, r1, r3, r2
 802ca5a:	6063      	str	r3, [r4, #4]
 802ca5c:	6022      	str	r2, [r4, #0]
 802ca5e:	1cc3      	adds	r3, r0, #3
 802ca60:	2207      	movs	r2, #7
 802ca62:	fb93 f2f2 	sdiv	r2, r3, r2
 802ca66:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802ca6a:	1a9b      	subs	r3, r3, r2
 802ca6c:	4939      	ldr	r1, [pc, #228]	@ (802cb54 <gmtime_r+0x140>)
 802ca6e:	d555      	bpl.n	802cb1c <gmtime_r+0x108>
 802ca70:	3307      	adds	r3, #7
 802ca72:	61a3      	str	r3, [r4, #24]
 802ca74:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 802ca78:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 802ca7c:	fb93 f1f1 	sdiv	r1, r3, r1
 802ca80:	4b35      	ldr	r3, [pc, #212]	@ (802cb58 <gmtime_r+0x144>)
 802ca82:	fb03 0001 	mla	r0, r3, r1, r0
 802ca86:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802ca8a:	fbb0 f3f3 	udiv	r3, r0, r3
 802ca8e:	4403      	add	r3, r0
 802ca90:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802ca94:	fbb0 f2fc 	udiv	r2, r0, ip
 802ca98:	1a9b      	subs	r3, r3, r2
 802ca9a:	f240 176d 	movw	r7, #365	@ 0x16d
 802ca9e:	4a2f      	ldr	r2, [pc, #188]	@ (802cb5c <gmtime_r+0x148>)
 802caa0:	fbb0 f2f2 	udiv	r2, r0, r2
 802caa4:	2664      	movs	r6, #100	@ 0x64
 802caa6:	1a9b      	subs	r3, r3, r2
 802caa8:	fbb3 f2f7 	udiv	r2, r3, r7
 802caac:	fbb3 f3fc 	udiv	r3, r3, ip
 802cab0:	fbb2 f5f6 	udiv	r5, r2, r6
 802cab4:	1aeb      	subs	r3, r5, r3
 802cab6:	4403      	add	r3, r0
 802cab8:	fb07 3312 	mls	r3, r7, r2, r3
 802cabc:	2099      	movs	r0, #153	@ 0x99
 802cabe:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802cac2:	3702      	adds	r7, #2
 802cac4:	f103 0e01 	add.w	lr, r3, #1
 802cac8:	fbb7 fcf0 	udiv	ip, r7, r0
 802cacc:	fb00 f00c 	mul.w	r0, r0, ip
 802cad0:	3002      	adds	r0, #2
 802cad2:	f04f 0805 	mov.w	r8, #5
 802cad6:	fbb0 f0f8 	udiv	r0, r0, r8
 802cada:	ebae 0000 	sub.w	r0, lr, r0
 802cade:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802cae2:	4577      	cmp	r7, lr
 802cae4:	bf8c      	ite	hi
 802cae6:	f06f 0709 	mvnhi.w	r7, #9
 802caea:	2702      	movls	r7, #2
 802caec:	4467      	add	r7, ip
 802caee:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802caf2:	fb0c 2101 	mla	r1, ip, r1, r2
 802caf6:	2f01      	cmp	r7, #1
 802caf8:	bf98      	it	ls
 802cafa:	3101      	addls	r1, #1
 802cafc:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802cb00:	d312      	bcc.n	802cb28 <gmtime_r+0x114>
 802cb02:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802cb06:	61e3      	str	r3, [r4, #28]
 802cb08:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802cb0c:	2300      	movs	r3, #0
 802cb0e:	60e0      	str	r0, [r4, #12]
 802cb10:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802cb14:	6223      	str	r3, [r4, #32]
 802cb16:	4620      	mov	r0, r4
 802cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cb1c:	2800      	cmp	r0, #0
 802cb1e:	61a3      	str	r3, [r4, #24]
 802cb20:	dba8      	blt.n	802ca74 <gmtime_r+0x60>
 802cb22:	fb90 f1f1 	sdiv	r1, r0, r1
 802cb26:	e7ab      	b.n	802ca80 <gmtime_r+0x6c>
 802cb28:	f012 0f03 	tst.w	r2, #3
 802cb2c:	d102      	bne.n	802cb34 <gmtime_r+0x120>
 802cb2e:	fb06 2515 	mls	r5, r6, r5, r2
 802cb32:	b95d      	cbnz	r5, 802cb4c <gmtime_r+0x138>
 802cb34:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802cb38:	fbb2 f6f5 	udiv	r6, r2, r5
 802cb3c:	fb05 2216 	mls	r2, r5, r6, r2
 802cb40:	fab2 f282 	clz	r2, r2
 802cb44:	0952      	lsrs	r2, r2, #5
 802cb46:	333b      	adds	r3, #59	@ 0x3b
 802cb48:	4413      	add	r3, r2
 802cb4a:	e7dc      	b.n	802cb06 <gmtime_r+0xf2>
 802cb4c:	2201      	movs	r2, #1
 802cb4e:	e7fa      	b.n	802cb46 <gmtime_r+0x132>
 802cb50:	00015180 	.word	0x00015180
 802cb54:	00023ab1 	.word	0x00023ab1
 802cb58:	fffdc54f 	.word	0xfffdc54f
 802cb5c:	00023ab0 	.word	0x00023ab0

0802cb60 <_init>:
 802cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cb62:	bf00      	nop
 802cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cb66:	bc08      	pop	{r3}
 802cb68:	469e      	mov	lr, r3
 802cb6a:	4770      	bx	lr

0802cb6c <_fini>:
 802cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cb6e:	bf00      	nop
 802cb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cb72:	bc08      	pop	{r3}
 802cb74:	469e      	mov	lr, r3
 802cb76:	4770      	bx	lr

0802cb78 <__single_bank_swap_veneer>:
 802cb78:	f85f f000 	ldr.w	pc, [pc]	@ 802cb7c <__single_bank_swap_veneer+0x4>
 802cb7c:	24000f75 	.word	0x24000f75

0802cb80 <__is_dualbank_veneer>:
 802cb80:	f85f f000 	ldr.w	pc, [pc]	@ 802cb84 <__is_dualbank_veneer+0x4>
 802cb84:	24000a51 	.word	0x24000a51

Disassembly of section .data:

24000000 <environ>:
24000000:	24019d48                                H..$

24000004 <SystemCoreClock>:
24000004:	03d09000                                ....

24000008 <SystemD2Clock>:
24000008:	03d09000                                ....

2400000c <uwTickPrio>:
2400000c:	00000010                                ....

24000010 <uwTickFreq>:
24000010:	00000001                                ....

24000014 <mg_fs_packed>:
24000014:	0800ae9b 0800aefd 0800aff9 0800b05b     ............[...
24000024:	0800b077 0800b0cd 0800b0e7 0800b11f     w...............
24000034:	0800b137 0800b14d                       7...M...

2400003c <mg_fs_posix>:
2400003c:	0800b163 0800b17d 0800b195 0800b1ad     c...}...........
2400004c:	0800b1c1 0800b1db 0800b1f5 0800b20f     ................
2400005c:	0800b227 0800b23d                       '...=...

24000064 <s_known_types>:
24000064:	0802dbbc 00000004 0802dbc4 00000018     ................
24000074:	0802dbe0 00000003 0802dbc4 00000018     ................
24000084:	0802dbe4 00000003 0802dbe8 00000017     ................
24000094:	0802dc00 00000002 0802dc04 0000001e     ................
240000a4:	0802dc24 00000003 0802dc04 0000001e     $...............
240000b4:	0802dc28 00000003 0802dc2c 00000009     (.......,.......
240000c4:	0802dc38 00000003 0802dc3c 00000009     8.......<.......
240000d4:	0802dc48 00000003 0802dc4c 0000000a     H.......L.......
240000e4:	0802dc58 00000004 0802dc4c 0000000a     X.......L.......
240000f4:	0802dc60 00000004 0802dc68 00000009     `.......h.......
24000104:	0802dc74 00000003 0802dc78 00000008     t.......x.......
24000114:	0802dc84 00000003 0802dc88 0000000d     ................
24000124:	0802dc98 00000003 0802dc9c 00000019     ................
24000134:	0802dcb8 00000003 0802dcbc 0000000f     ................
24000144:	0802dccc 00000003 0802dcd0 00000008     ................
24000154:	0802dcdc 00000003 0802dce0 00000012     ................
24000164:	0802dcf4 00000003 0802dcf8 00000018     ................
24000174:	0802dd14 00000002 0802dd18 00000010     ................
24000184:	0802dd2c 00000003 0802dd30 0000000c     ,.......0.......
24000194:	0802dd40 00000004 0802dd48 00000010     @.......H.......
240001a4:	0802dd5c 00000003 0802dd60 0000000f     \.......`.......
240001b4:	0802dd70 00000003 0802dd74 0000000a     p.......t.......
240001c4:	0802dd80 00000003 0802dd84 00000009     ................
240001d4:	0802dd90 00000004 0802dd98 0000000a     ................
240001e4:	0802dda4 00000003 0802dda8 0000000f     ................
240001f4:	0802ddb8 00000005 0802dbc4 00000018     ................
24000204:	0802ddc0 00000003 0802ddc4 00000012     ................
24000214:	0802ddd8 00000003 0802dddc 00000009     ................
24000224:	0802dde8 00000004 0802ddf0 0000000a     ................
24000234:	0802ddfc 00000003 0802de00 0000000f     ................
24000244:	0802de10 00000003 0802de14 0000000a     ................
	...

2400025c <mg_log_level>:
2400025c:	00000002                                ....

24000260 <s_log_func>:
24000260:	08014053                                S@..

24000264 <mcast_addr>:
24000264:	005e0001 0000fb00                       ..^.....

2400026c <s_mg_flash_stm32h7>:
2400026c:	08000000 00000000 00020000 00000020     ............ ...
2400027c:	24000e05 24000d81                       ...$...$

24000284 <zeros_sha256_digest>:
24000284:	42c4b0e3 141cfc98 c8f4fb9a 24b96f99     ...B.........o.$
24000294:	e441ae27 4c939b64 1b9995a4 55b85278     '.A.d..L....xR.U

240002a4 <mg_tcpip_driver_stm32h>:
240002a4:	08023b71 08023de1 00000000 08023ffd     q;...=.......?..

240002b4 <s_modbus_base>:
240002b4:	000003e8                                ....

240002b8 <s_state>:
240002b8:	0000002a 0000001b 00000043 0000000a     *.......C.......
240002c8:	2e302e31 00000030 00000000 00000000     1.0.0...........
240002d8:	00000000 00000001 00000053              ........S...

240002e4 <s_leds>:
240002e4:	00000100                                ....

240002e8 <s_network_settings>:
240002e8:	2e323931 2e383631 32342e30 00000000     192.168.0.42....
240002f8:	00000000 2e323931 2e383631 00312e30     ....192.168.0.1.
	...
24000310:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
24000320:	00000000 00000001                       ........

24000328 <s_settings>:
24000328:	74696465 73202620 20657661 0000656d     edit & save me..
	...
24000350:	6f666e69 00000000 00000000 00000000     info............
24000360:	9ad42c3d 405ec7e6 00000011 00000001     =,....^@........

24000370 <s_security>:
24000370:	696d6461 0000006e 00000000 00000000     admin...........
	...
24000398:	72657375 00000000 00000000 00000000     user............
	...

240003c0 <s_state_attributes>:
240003c0:	080302e4 080302ec 00000000 00000000     ................
	...
240003d8:	080302f0 080302ec 00000000 00000004     ................
	...
240003f0:	080302fc 080302ec 00000000 00000008     ................
	...
24000408:	08030308 080302ec 00000000 0000000c     ................
	...
24000420:	08030310 08030318 00000000 00000010     ................
24000430:	00000014 00000000 08030320 08030328     ........ ...(...
24000440:	00000000 00000024 00000000 00000000     ....$...........
24000450:	08030330 08030328 00000000 00000025     0...(.......%...
	...
24000468:	08030338 080302ec 00000000 00000028     8...........(...
	...

24000498 <s_leds_attributes>:
24000498:	08030340 08030328 00000000 00000000     @...(...........
	...
240004b0:	08030348 08030328 00000000 00000001     H...(...........
	...
240004c8:	08030350 08030328 00000000 00000002     P...(...........
	...

240004f8 <s_network_settings_attributes>:
240004f8:	08030358 08030318 00000000 00000000     X...............
24000508:	00000014 00000000 08030364 08030318     ........d.......
24000518:	00000000 00000014 00000014 00000000     ................
24000528:	08030370 08030318 00000000 00000028     p...........(...
24000538:	00000014 00000000 08030378 08030328     ........x...(...
24000548:	00000000 0000003c 00000000 00000000     ....<...........
	...

24000570 <s_settings_attributes>:
24000570:	08030380 08030318 00000000 00000000     ................
24000580:	00000028 00000000 0803038c 08030318     (...............
24000590:	00000000 00000028 0000000a 00000000     ....(...........
240005a0:	08030398 080303a4 080303ac 00000038     ............8...
	...
240005b8:	080303b4 080302ec 00000000 00000040     ............@...
	...
240005d0:	080303bc 08030328 00000000 00000044     ....(.......D...
	...

24000600 <s_security_attributes>:
24000600:	080303c8 08030318 00000000 00000000     ................
24000610:	00000028 00000000 080303d8 08030318     (...............
24000620:	00000000 00000028 00000028 00000000     ....(...(.......
	...

24000648 <s_apihandler_reboot>:
24000648:	080303e8 080303f0 00000000 00000003     ................
24000658:	00000007 00000000 08024505 08024529     .........E..)E..

24000668 <s_apihandler_reformat>:
24000668:	080303f8 080303f0 00000000 00000003     ................
24000678:	00000007 00000000 08024589 080245ad     .........E...E..

24000688 <s_apihandler_firmware_update>:
24000688:	08030404 08030414 00000000 00000003     ................
24000698:	00000007 00000000 0802460d 08024665     .........F..eF..
240006a8:	08024699                                .F..

240006ac <s_apihandler_file_upload>:
240006ac:	08030418 08030424 00000000 00000003     ....$...........
240006bc:	00000007 00000000 080246e9 0802476d     .........F..mG..
240006cc:	080247ad                                .G..

240006d0 <s_apihandler_graph_data>:
240006d0:	0803042c 08030438 00000000 00000003     ,...8...........
240006e0:	00000003 00000000 080247f5              .........G..

240006ec <s_apihandler_state>:
240006ec:	08030440 08030448 00000001 00000000     @...H...........
	...
24000704:	240003c0 0000002c 0802482d 00000000     ...$,...-H......

24000714 <s_apihandler_leds>:
24000714:	08030450 08030448 00000000 00000003     P...H...........
24000724:	00000003 00000000 24000498 00000003     ...........$....
24000734:	08024899 0802490d                       .H...I..

2400073c <s_apihandler_network_settings>:
2400073c:	08030458 08030448 00000000 00000003     X...H...........
2400074c:	00000007 00000000 240004f8 0000003d     ...........$=...
2400075c:	08024961 080249a9                       aI...I..

24000764 <s_apihandler_settings>:
24000764:	0803046c 08030448 00000000 00000003     l...H...........
24000774:	00000007 00000000 24000570 00000048     ........p..$H...
24000784:	080249f1 08024a15                       .I...J..

2400078c <s_apihandler_security>:
2400078c:	08030478 08030448 00000000 00000007     x...H...........
2400079c:	00000007 00000000 24000600 00000050     ...........$P...
240007ac:	08024a39 08024a5d                       9J..]J..

240007b4 <s_apihandler_loglevels>:
240007b4:	08030484 08030438 00000000 00000000     ....8...........
	...
240007cc:	08024a81                                .J..

240007d0 <s_apihandler_events>:
240007d0:	08030490 08030438 00000000 00000000     ....8...........
	...
240007e8:	08024ab9                                .J..

240007ec <s_apihandlers>:
240007ec:	24000648 24000668 24000688 240006ac     H..$h..$...$...$
240007fc:	240006d0 240006ec 24000714 2400073c     ...$...$...$<..$
2400080c:	24000764 2400078c 240007b4 240007d0     d..$...$...$...$

2400081c <s_auth>:
2400081c:	080244a1                                .D..

24000820 <s_modbus_handlers>:
24000820:	08024319 080243b5                       .C...C..

24000828 <__sglue>:
24000828:	00000000 00000003 2401d130              ........0..$

24000834 <_tzname>:
24000834:	0803e8d5 0803e8d5                       ........

2400083c <__global_locale>:
2400083c:	00000043 00000000 00000000 00000000     C...............
	...
2400085c:	00000043 00000000 00000000 00000000     C...............
	...
2400087c:	00000043 00000000 00000000 00000000     C...............
	...
2400089c:	00000043 00000000 00000000 00000000     C...............
	...
240008bc:	00000043 00000000 00000000 00000000     C...............
	...
240008dc:	00000043 00000000 00000000 00000000     C...............
	...
240008fc:	00000043 00000000 00000000 00000000     C...............
	...
2400091c:	0802b91f 0802af9b 00000000 0803ebf0     ................
2400092c:	0803e87d 0803e80d 0803e80d 0803e80d     }...............
2400093c:	0803e80d 0803e80d 0803e80d 0803e80d     ................
2400094c:	0803e80d 0803e80d ffffffff ffffffff     ................
2400095c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
24000984:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

240009a8 <_impure_ptr>:
240009a8:	240009ac                                ...$

240009ac <_impure_data>:
240009ac:	00000000 2401d130 2401d198 2401d200     ....0..$...$...$
	...

240009f8 <tzinfo>:
240009f8:	00000001 00000000 0000004a 00000000     ........J.......
	...
24000a28:	0000004a 00000000 00000000 00000000     J...............
	...

24000a50 <is_dualbank>:
MG_IRAM static bool is_dualbank(void) {
24000a50:	b480      	push	{r7}
24000a52:	af00      	add	r7, sp, #0
  return (s_mg_flash_stm32h7.size < 2 * 1024 * 1024) ? false : true;
24000a54:	4b06      	ldr	r3, [pc, #24]	@ (24000a70 <is_dualbank+0x20>)
24000a56:	685b      	ldr	r3, [r3, #4]
24000a58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24000a5c:	bf2c      	ite	cs
24000a5e:	2301      	movcs	r3, #1
24000a60:	2300      	movcc	r3, #0
24000a62:	b2db      	uxtb	r3, r3
}
24000a64:	4618      	mov	r0, r3
24000a66:	46bd      	mov	sp, r7
24000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a6c:	4770      	bx	lr
24000a6e:	bf00      	nop
24000a70:	2400026c 	.word	0x2400026c

24000a74 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
24000a74:	b580      	push	{r7, lr}
24000a76:	af00      	add	r7, sp, #0
  if (unlocked == false) {
24000a78:	4b11      	ldr	r3, [pc, #68]	@ (24000ac0 <flash_unlock+0x4c>)
24000a7a:	781b      	ldrb	r3, [r3, #0]
24000a7c:	f083 0301 	eor.w	r3, r3, #1
24000a80:	b2db      	uxtb	r3, r3
24000a82:	2b00      	cmp	r3, #0
24000a84:	d019      	beq.n	24000aba <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
24000a86:	4b0f      	ldr	r3, [pc, #60]	@ (24000ac4 <flash_unlock+0x50>)
24000a88:	4a0f      	ldr	r2, [pc, #60]	@ (24000ac8 <flash_unlock+0x54>)
24000a8a:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
24000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (24000ac4 <flash_unlock+0x50>)
24000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (24000acc <flash_unlock+0x58>)
24000a90:	601a      	str	r2, [r3, #0]
    if (is_dualbank()) {
24000a92:	f7ff ffdd 	bl	24000a50 <is_dualbank>
24000a96:	4603      	mov	r3, r0
24000a98:	2b00      	cmp	r3, #0
24000a9a:	d005      	beq.n	24000aa8 <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
24000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (24000ad0 <flash_unlock+0x5c>)
24000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (24000ac8 <flash_unlock+0x54>)
24000aa0:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
24000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (24000ad0 <flash_unlock+0x5c>)
24000aa4:	4a09      	ldr	r2, [pc, #36]	@ (24000acc <flash_unlock+0x58>)
24000aa6:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
24000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (24000ad4 <flash_unlock+0x60>)
24000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (24000ad8 <flash_unlock+0x64>)
24000aac:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
24000aae:	4b09      	ldr	r3, [pc, #36]	@ (24000ad4 <flash_unlock+0x60>)
24000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (24000adc <flash_unlock+0x68>)
24000ab2:	601a      	str	r2, [r3, #0]
    unlocked = true;
24000ab4:	4b02      	ldr	r3, [pc, #8]	@ (24000ac0 <flash_unlock+0x4c>)
24000ab6:	2201      	movs	r2, #1
24000ab8:	701a      	strb	r2, [r3, #0]
}
24000aba:	bf00      	nop
24000abc:	bd80      	pop	{r7, pc}
24000abe:	bf00      	nop
24000ac0:	2401cee0 	.word	0x2401cee0
24000ac4:	52002004 	.word	0x52002004
24000ac8:	45670123 	.word	0x45670123
24000acc:	cdef89ab 	.word	0xcdef89ab
24000ad0:	52002104 	.word	0x52002104
24000ad4:	52002008 	.word	0x52002008
24000ad8:	08192a3b 	.word	0x08192a3b
24000adc:	4c5d6e7f 	.word	0x4c5d6e7f

24000ae0 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
24000ae0:	b480      	push	{r7}
24000ae2:	b087      	sub	sp, #28
24000ae4:	af00      	add	r7, sp, #0
24000ae6:	6078      	str	r0, [r7, #4]
  char *base = (char *) s_mg_flash_stm32h7.start,
24000ae8:	4b15      	ldr	r3, [pc, #84]	@ (24000b40 <flash_page_start+0x60>)
24000aea:	681b      	ldr	r3, [r3, #0]
24000aec:	617b      	str	r3, [r7, #20]
       *end = base + s_mg_flash_stm32h7.size;
24000aee:	4b14      	ldr	r3, [pc, #80]	@ (24000b40 <flash_page_start+0x60>)
24000af0:	685b      	ldr	r3, [r3, #4]
24000af2:	697a      	ldr	r2, [r7, #20]
24000af4:	4413      	add	r3, r2
24000af6:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
24000af8:	687b      	ldr	r3, [r7, #4]
24000afa:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % s_mg_flash_stm32h7.secsz) == 0;
24000afc:	68fa      	ldr	r2, [r7, #12]
24000afe:	697b      	ldr	r3, [r7, #20]
24000b00:	429a      	cmp	r2, r3
24000b02:	d312      	bcc.n	24000b2a <flash_page_start+0x4a>
24000b04:	68fa      	ldr	r2, [r7, #12]
24000b06:	693b      	ldr	r3, [r7, #16]
24000b08:	429a      	cmp	r2, r3
24000b0a:	d20e      	bcs.n	24000b2a <flash_page_start+0x4a>
24000b0c:	68fa      	ldr	r2, [r7, #12]
24000b0e:	697b      	ldr	r3, [r7, #20]
24000b10:	1ad3      	subs	r3, r2, r3
24000b12:	461a      	mov	r2, r3
24000b14:	4b0a      	ldr	r3, [pc, #40]	@ (24000b40 <flash_page_start+0x60>)
24000b16:	689b      	ldr	r3, [r3, #8]
24000b18:	fbb2 f1f3 	udiv	r1, r2, r3
24000b1c:	fb01 f303 	mul.w	r3, r1, r3
24000b20:	1ad3      	subs	r3, r2, r3
24000b22:	2b00      	cmp	r3, #0
24000b24:	d101      	bne.n	24000b2a <flash_page_start+0x4a>
24000b26:	2301      	movs	r3, #1
24000b28:	e000      	b.n	24000b2c <flash_page_start+0x4c>
24000b2a:	2300      	movs	r3, #0
24000b2c:	f003 0301 	and.w	r3, r3, #1
24000b30:	b2db      	uxtb	r3, r3
}
24000b32:	4618      	mov	r0, r3
24000b34:	371c      	adds	r7, #28
24000b36:	46bd      	mov	sp, r7
24000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b3c:	4770      	bx	lr
24000b3e:	bf00      	nop
24000b40:	2400026c 	.word	0x2400026c

24000b44 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
24000b44:	b480      	push	{r7}
24000b46:	b083      	sub	sp, #12
24000b48:	af00      	add	r7, sp, #0
24000b4a:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
24000b4c:	687b      	ldr	r3, [r7, #4]
24000b4e:	3310      	adds	r3, #16
24000b50:	681a      	ldr	r2, [r3, #0]
24000b52:	4b06      	ldr	r3, [pc, #24]	@ (24000b6c <flash_is_err+0x28>)
24000b54:	4013      	ands	r3, r2
24000b56:	2b00      	cmp	r3, #0
24000b58:	bf14      	ite	ne
24000b5a:	2301      	movne	r3, #1
24000b5c:	2300      	moveq	r3, #0
24000b5e:	b2db      	uxtb	r3, r3
}
24000b60:	4618      	mov	r0, r3
24000b62:	370c      	adds	r7, #12
24000b64:	46bd      	mov	sp, r7
24000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b6a:	4770      	bx	lr
24000b6c:	0ffe0000 	.word	0x0ffe0000

24000b70 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
24000b70:	b480      	push	{r7}
24000b72:	b083      	sub	sp, #12
24000b74:	af00      	add	r7, sp, #0
24000b76:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
24000b78:	bf00      	nop
24000b7a:	687b      	ldr	r3, [r7, #4]
24000b7c:	3310      	adds	r3, #16
24000b7e:	681b      	ldr	r3, [r3, #0]
24000b80:	f003 0305 	and.w	r3, r3, #5
24000b84:	2b00      	cmp	r3, #0
24000b86:	d1f8      	bne.n	24000b7a <flash_wait+0xa>
}
24000b88:	bf00      	nop
24000b8a:	bf00      	nop
24000b8c:	370c      	adds	r7, #12
24000b8e:	46bd      	mov	sp, r7
24000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
24000b94:	4770      	bx	lr

24000b96 <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
24000b96:	b580      	push	{r7, lr}
24000b98:	b082      	sub	sp, #8
24000b9a:	af00      	add	r7, sp, #0
24000b9c:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
24000b9e:	6878      	ldr	r0, [r7, #4]
24000ba0:	f7ff ffe6 	bl	24000b70 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
24000ba4:	687b      	ldr	r3, [r7, #4]
24000ba6:	3314      	adds	r3, #20
24000ba8:	461a      	mov	r2, r3
24000baa:	4b03      	ldr	r3, [pc, #12]	@ (24000bb8 <flash_clear_err+0x22>)
24000bac:	6013      	str	r3, [r2, #0]
}
24000bae:	bf00      	nop
24000bb0:	3708      	adds	r7, #8
24000bb2:	46bd      	mov	sp, r7
24000bb4:	bd80      	pop	{r7, pc}
24000bb6:	bf00      	nop
24000bb8:	07ff0000 	.word	0x07ff0000

24000bbc <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
24000bbc:	b480      	push	{r7}
24000bbe:	b083      	sub	sp, #12
24000bc0:	af00      	add	r7, sp, #0
24000bc2:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
24000bc4:	687b      	ldr	r3, [r7, #4]
24000bc6:	3318      	adds	r3, #24
24000bc8:	681b      	ldr	r3, [r3, #0]
24000bca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000bce:	2b00      	cmp	r3, #0
24000bd0:	bf14      	ite	ne
24000bd2:	2301      	movne	r3, #1
24000bd4:	2300      	moveq	r3, #0
24000bd6:	b2db      	uxtb	r3, r3
}
24000bd8:	4618      	mov	r0, r3
24000bda:	370c      	adds	r7, #12
24000bdc:	46bd      	mov	sp, r7
24000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
24000be2:	4770      	bx	lr

24000be4 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
24000be4:	b580      	push	{r7, lr}
24000be6:	b084      	sub	sp, #16
24000be8:	af00      	add	r7, sp, #0
24000bea:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000bec:	4b0d      	ldr	r3, [pc, #52]	@ (24000c24 <flash_bank+0x40>)
24000bee:	681b      	ldr	r3, [r3, #0]
24000bf0:	687a      	ldr	r2, [r7, #4]
24000bf2:	1ad3      	subs	r3, r2, r3
24000bf4:	60fb      	str	r3, [r7, #12]
  if (!is_dualbank()) return FLASH_BASE1;
24000bf6:	f7ff ff2b 	bl	24000a50 <is_dualbank>
24000bfa:	4603      	mov	r3, r0
24000bfc:	f083 0301 	eor.w	r3, r3, #1
24000c00:	b2db      	uxtb	r3, r3
24000c02:	2b00      	cmp	r3, #0
24000c04:	d001      	beq.n	24000c0a <flash_bank+0x26>
24000c06:	4b08      	ldr	r3, [pc, #32]	@ (24000c28 <flash_bank+0x44>)
24000c08:	e008      	b.n	24000c1c <flash_bank+0x38>
  return ofs < s_mg_flash_stm32h7.size / 2 ? FLASH_BASE1 : FLASH_BASE2;
24000c0a:	4b06      	ldr	r3, [pc, #24]	@ (24000c24 <flash_bank+0x40>)
24000c0c:	685b      	ldr	r3, [r3, #4]
24000c0e:	085b      	lsrs	r3, r3, #1
24000c10:	68fa      	ldr	r2, [r7, #12]
24000c12:	429a      	cmp	r2, r3
24000c14:	d201      	bcs.n	24000c1a <flash_bank+0x36>
24000c16:	4b04      	ldr	r3, [pc, #16]	@ (24000c28 <flash_bank+0x44>)
24000c18:	e000      	b.n	24000c1c <flash_bank+0x38>
24000c1a:	4b04      	ldr	r3, [pc, #16]	@ (24000c2c <flash_bank+0x48>)
}
24000c1c:	4618      	mov	r0, r3
24000c1e:	3710      	adds	r7, #16
24000c20:	46bd      	mov	sp, r7
24000c22:	bd80      	pop	{r7, pc}
24000c24:	2400026c 	.word	0x2400026c
24000c28:	52002000 	.word	0x52002000
24000c2c:	52002100 	.word	0x52002100

24000c30 <mg_stm32h7_erase>:
MG_IRAM static bool mg_stm32h7_erase(void *addr) {
24000c30:	b580      	push	{r7, lr}
24000c32:	b08a      	sub	sp, #40	@ 0x28
24000c34:	af02      	add	r7, sp, #8
24000c36:	6078      	str	r0, [r7, #4]
  bool ok = false;
24000c38:	2300      	movs	r3, #0
24000c3a:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
24000c3c:	6878      	ldr	r0, [r7, #4]
24000c3e:	f7ff ff4f 	bl	24000ae0 <flash_page_start>
24000c42:	4603      	mov	r3, r0
24000c44:	f083 0301 	eor.w	r3, r3, #1
24000c48:	b2db      	uxtb	r3, r3
24000c4a:	2b00      	cmp	r3, #0
24000c4c:	d00f      	beq.n	24000c6e <mg_stm32h7_erase+0x3e>
    MG_ERROR(("%p is not on a sector boundary", addr));
24000c4e:	4b44      	ldr	r3, [pc, #272]	@ (24000d60 <mg_stm32h7_erase+0x130>)
24000c50:	681b      	ldr	r3, [r3, #0]
24000c52:	2b00      	cmp	r3, #0
24000c54:	dd7e      	ble.n	24000d54 <mg_stm32h7_erase+0x124>
24000c56:	4b43      	ldr	r3, [pc, #268]	@ (24000d64 <mg_stm32h7_erase+0x134>)
24000c58:	f641 523c 	movw	r2, #7484	@ 0x1d3c
24000c5c:	4942      	ldr	r1, [pc, #264]	@ (24000d68 <mg_stm32h7_erase+0x138>)
24000c5e:	2001      	movs	r0, #1
24000c60:	f000 f9b6 	bl	24000fd0 <__mg_log_prefix_veneer>
24000c64:	6879      	ldr	r1, [r7, #4]
24000c66:	4841      	ldr	r0, [pc, #260]	@ (24000d6c <mg_stm32h7_erase+0x13c>)
24000c68:	f000 f9ae 	bl	24000fc8 <__mg_log_veneer>
24000c6c:	e072      	b.n	24000d54 <mg_stm32h7_erase+0x124>
    uintptr_t diff = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000c6e:	4b40      	ldr	r3, [pc, #256]	@ (24000d70 <mg_stm32h7_erase+0x140>)
24000c70:	681b      	ldr	r3, [r3, #0]
24000c72:	687a      	ldr	r2, [r7, #4]
24000c74:	1ad3      	subs	r3, r2, r3
24000c76:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / s_mg_flash_stm32h7.secsz;
24000c78:	4b3d      	ldr	r3, [pc, #244]	@ (24000d70 <mg_stm32h7_erase+0x140>)
24000c7a:	689b      	ldr	r3, [r3, #8]
24000c7c:	697a      	ldr	r2, [r7, #20]
24000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
24000c82:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
24000c84:	6878      	ldr	r0, [r7, #4]
24000c86:	f7ff ffad 	bl	24000be4 <flash_bank>
24000c8a:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
24000c8c:	693b      	ldr	r3, [r7, #16]
24000c8e:	330c      	adds	r3, #12
24000c90:	681b      	ldr	r3, [r3, #0]
24000c92:	60fb      	str	r3, [r7, #12]
    flash_unlock();
24000c94:	f7ff feee 	bl	24000a74 <flash_unlock>
    if (sector > 7) sector -= 8;
24000c98:	69bb      	ldr	r3, [r7, #24]
24000c9a:	2b07      	cmp	r3, #7
24000c9c:	d902      	bls.n	24000ca4 <mg_stm32h7_erase+0x74>
24000c9e:	69bb      	ldr	r3, [r7, #24]
24000ca0:	3b08      	subs	r3, #8
24000ca2:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
24000ca4:	6938      	ldr	r0, [r7, #16]
24000ca6:	f7ff ff76 	bl	24000b96 <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
24000caa:	693b      	ldr	r3, [r7, #16]
24000cac:	330c      	adds	r3, #12
24000cae:	461a      	mov	r2, r3
24000cb0:	2320      	movs	r3, #32
24000cb2:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
24000cb4:	693b      	ldr	r3, [r7, #16]
24000cb6:	330c      	adds	r3, #12
24000cb8:	681a      	ldr	r2, [r3, #0]
24000cba:	69bb      	ldr	r3, [r7, #24]
24000cbc:	021b      	lsls	r3, r3, #8
24000cbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24000cc2:	6939      	ldr	r1, [r7, #16]
24000cc4:	310c      	adds	r1, #12
24000cc6:	4313      	orrs	r3, r2
24000cc8:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
24000cca:	693b      	ldr	r3, [r7, #16]
24000ccc:	330c      	adds	r3, #12
24000cce:	681b      	ldr	r3, [r3, #0]
24000cd0:	693a      	ldr	r2, [r7, #16]
24000cd2:	320c      	adds	r2, #12
24000cd4:	f043 0304 	orr.w	r3, r3, #4
24000cd8:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
24000cda:	693b      	ldr	r3, [r7, #16]
24000cdc:	330c      	adds	r3, #12
24000cde:	681b      	ldr	r3, [r3, #0]
24000ce0:	693a      	ldr	r2, [r7, #16]
24000ce2:	320c      	adds	r2, #12
24000ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24000ce8:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
24000cea:	6938      	ldr	r0, [r7, #16]
24000cec:	f7ff ff2a 	bl	24000b44 <flash_is_err>
24000cf0:	4603      	mov	r3, r0
24000cf2:	2b00      	cmp	r3, #0
24000cf4:	bf14      	ite	ne
24000cf6:	2301      	movne	r3, #1
24000cf8:	2300      	moveq	r3, #0
24000cfa:	b2db      	uxtb	r3, r3
24000cfc:	f083 0301 	eor.w	r3, r3, #1
24000d00:	b2db      	uxtb	r3, r3
24000d02:	77fb      	strb	r3, [r7, #31]
24000d04:	7ffb      	ldrb	r3, [r7, #31]
24000d06:	f003 0301 	and.w	r3, r3, #1
24000d0a:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
24000d0c:	4b14      	ldr	r3, [pc, #80]	@ (24000d60 <mg_stm32h7_erase+0x130>)
24000d0e:	681b      	ldr	r3, [r3, #0]
24000d10:	2b02      	cmp	r3, #2
24000d12:	dd1a      	ble.n	24000d4a <mg_stm32h7_erase+0x11a>
24000d14:	4b13      	ldr	r3, [pc, #76]	@ (24000d64 <mg_stm32h7_erase+0x134>)
24000d16:	f641 524c 	movw	r2, #7500	@ 0x1d4c
24000d1a:	4913      	ldr	r1, [pc, #76]	@ (24000d68 <mg_stm32h7_erase+0x138>)
24000d1c:	2003      	movs	r0, #3
24000d1e:	f000 f957 	bl	24000fd0 <__mg_log_prefix_veneer>
24000d22:	7ffb      	ldrb	r3, [r7, #31]
24000d24:	2b00      	cmp	r3, #0
24000d26:	d001      	beq.n	24000d2c <mg_stm32h7_erase+0xfc>
24000d28:	4912      	ldr	r1, [pc, #72]	@ (24000d74 <mg_stm32h7_erase+0x144>)
24000d2a:	e000      	b.n	24000d2e <mg_stm32h7_erase+0xfe>
24000d2c:	4912      	ldr	r1, [pc, #72]	@ (24000d78 <mg_stm32h7_erase+0x148>)
24000d2e:	693b      	ldr	r3, [r7, #16]
24000d30:	330c      	adds	r3, #12
24000d32:	681b      	ldr	r3, [r3, #0]
24000d34:	693a      	ldr	r2, [r7, #16]
24000d36:	3210      	adds	r2, #16
24000d38:	6812      	ldr	r2, [r2, #0]
24000d3a:	9201      	str	r2, [sp, #4]
24000d3c:	9300      	str	r3, [sp, #0]
24000d3e:	460b      	mov	r3, r1
24000d40:	687a      	ldr	r2, [r7, #4]
24000d42:	69b9      	ldr	r1, [r7, #24]
24000d44:	480d      	ldr	r0, [pc, #52]	@ (24000d7c <mg_stm32h7_erase+0x14c>)
24000d46:	f000 f93f 	bl	24000fc8 <__mg_log_veneer>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
24000d4a:	693b      	ldr	r3, [r7, #16]
24000d4c:	330c      	adds	r3, #12
24000d4e:	461a      	mov	r2, r3
24000d50:	68fb      	ldr	r3, [r7, #12]
24000d52:	6013      	str	r3, [r2, #0]
  return ok;
24000d54:	7ffb      	ldrb	r3, [r7, #31]
}
24000d56:	4618      	mov	r0, r3
24000d58:	3720      	adds	r7, #32
24000d5a:	46bd      	mov	sp, r7
24000d5c:	bd80      	pop	{r7, pc}
24000d5e:	bf00      	nop
24000d60:	2400025c 	.word	0x2400025c
24000d64:	080312e4 	.word	0x080312e4
24000d68:	0802d330 	.word	0x0802d330
24000d6c:	0802ebac 	.word	0x0802ebac
24000d70:	2400026c 	.word	0x2400026c
24000d74:	0802d5b0 	.word	0x0802d5b0
24000d78:	0802d5b4 	.word	0x0802d5b4
24000d7c:	0802ebcc 	.word	0x0802ebcc

24000d80 <mg_stm32h7_swap>:
MG_IRAM static bool mg_stm32h7_swap(void) {
24000d80:	b580      	push	{r7, lr}
24000d82:	b082      	sub	sp, #8
24000d84:	af00      	add	r7, sp, #0
  if (!is_dualbank()) return true;
24000d86:	f7ff fe63 	bl	24000a50 <is_dualbank>
24000d8a:	4603      	mov	r3, r0
24000d8c:	f083 0301 	eor.w	r3, r3, #1
24000d90:	b2db      	uxtb	r3, r3
24000d92:	2b00      	cmp	r3, #0
24000d94:	d001      	beq.n	24000d9a <mg_stm32h7_swap+0x1a>
24000d96:	2301      	movs	r3, #1
24000d98:	e02e      	b.n	24000df8 <mg_stm32h7_swap+0x78>
  uint32_t bank = FLASH_BASE1;
24000d9a:	4b19      	ldr	r3, [pc, #100]	@ (24000e00 <mg_stm32h7_swap+0x80>)
24000d9c:	607b      	str	r3, [r7, #4]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
24000d9e:	6878      	ldr	r0, [r7, #4]
24000da0:	f7ff ff0c 	bl	24000bbc <flash_bank_is_swapped>
24000da4:	4603      	mov	r3, r0
24000da6:	2b00      	cmp	r3, #0
24000da8:	d001      	beq.n	24000dae <mg_stm32h7_swap+0x2e>
24000daa:	2300      	movs	r3, #0
24000dac:	e001      	b.n	24000db2 <mg_stm32h7_swap+0x32>
24000dae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24000db2:	603b      	str	r3, [r7, #0]
  flash_unlock();
24000db4:	f7ff fe5e 	bl	24000a74 <flash_unlock>
  flash_clear_err(bank);
24000db8:	6878      	ldr	r0, [r7, #4]
24000dba:	f7ff feec 	bl	24000b96 <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
24000dbe:	687b      	ldr	r3, [r7, #4]
24000dc0:	3320      	adds	r3, #32
24000dc2:	681b      	ldr	r3, [r3, #0]
24000dc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24000dc8:	687b      	ldr	r3, [r7, #4]
24000dca:	3320      	adds	r3, #32
24000dcc:	4619      	mov	r1, r3
24000dce:	683b      	ldr	r3, [r7, #0]
24000dd0:	4313      	orrs	r3, r2
24000dd2:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
24000dd4:	687b      	ldr	r3, [r7, #4]
24000dd6:	3318      	adds	r3, #24
24000dd8:	681b      	ldr	r3, [r3, #0]
24000dda:	687a      	ldr	r2, [r7, #4]
24000ddc:	3218      	adds	r2, #24
24000dde:	f043 0302 	orr.w	r3, r3, #2
24000de2:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
24000de4:	bf00      	nop
24000de6:	687b      	ldr	r3, [r7, #4]
24000de8:	331c      	adds	r3, #28
24000dea:	681b      	ldr	r3, [r3, #0]
24000dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000df0:	683a      	ldr	r2, [r7, #0]
24000df2:	429a      	cmp	r2, r3
24000df4:	d1f7      	bne.n	24000de6 <mg_stm32h7_swap+0x66>
  return true;
24000df6:	2301      	movs	r3, #1
}
24000df8:	4618      	mov	r0, r3
24000dfa:	3708      	adds	r7, #8
24000dfc:	46bd      	mov	sp, r7
24000dfe:	bd80      	pop	{r7, pc}
24000e00:	52002000 	.word	0x52002000

24000e04 <mg_stm32h7_write>:
MG_IRAM static bool mg_stm32h7_write(void *addr, const void *buf, size_t len) {
24000e04:	b580      	push	{r7, lr}
24000e06:	b08c      	sub	sp, #48	@ 0x30
24000e08:	af02      	add	r7, sp, #8
24000e0a:	60f8      	str	r0, [r7, #12]
24000e0c:	60b9      	str	r1, [r7, #8]
24000e0e:	607a      	str	r2, [r7, #4]
  if ((len % s_mg_flash_stm32h7.align) != 0) {
24000e10:	4b4f      	ldr	r3, [pc, #316]	@ (24000f50 <mg_stm32h7_write+0x14c>)
24000e12:	68da      	ldr	r2, [r3, #12]
24000e14:	687b      	ldr	r3, [r7, #4]
24000e16:	fbb3 f1f2 	udiv	r1, r3, r2
24000e1a:	fb01 f202 	mul.w	r2, r1, r2
24000e1e:	1a9b      	subs	r3, r3, r2
24000e20:	2b00      	cmp	r3, #0
24000e22:	d013      	beq.n	24000e4c <mg_stm32h7_write+0x48>
    MG_ERROR(("%lu is not aligned to %lu", len, s_mg_flash_stm32h7.align));
24000e24:	4b4b      	ldr	r3, [pc, #300]	@ (24000f54 <mg_stm32h7_write+0x150>)
24000e26:	681b      	ldr	r3, [r3, #0]
24000e28:	2b00      	cmp	r3, #0
24000e2a:	dd0d      	ble.n	24000e48 <mg_stm32h7_write+0x44>
24000e2c:	4b4a      	ldr	r3, [pc, #296]	@ (24000f58 <mg_stm32h7_write+0x154>)
24000e2e:	f641 5266 	movw	r2, #7526	@ 0x1d66
24000e32:	494a      	ldr	r1, [pc, #296]	@ (24000f5c <mg_stm32h7_write+0x158>)
24000e34:	2001      	movs	r0, #1
24000e36:	f000 f8cb 	bl	24000fd0 <__mg_log_prefix_veneer>
24000e3a:	4b45      	ldr	r3, [pc, #276]	@ (24000f50 <mg_stm32h7_write+0x14c>)
24000e3c:	68db      	ldr	r3, [r3, #12]
24000e3e:	461a      	mov	r2, r3
24000e40:	6879      	ldr	r1, [r7, #4]
24000e42:	4847      	ldr	r0, [pc, #284]	@ (24000f60 <mg_stm32h7_write+0x15c>)
24000e44:	f000 f8c0 	bl	24000fc8 <__mg_log_veneer>
    return false;
24000e48:	2300      	movs	r3, #0
24000e4a:	e07d      	b.n	24000f48 <mg_stm32h7_write+0x144>
  uint32_t bank = flash_bank(addr);
24000e4c:	68f8      	ldr	r0, [r7, #12]
24000e4e:	f7ff fec9 	bl	24000be4 <flash_bank>
24000e52:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
24000e54:	68fb      	ldr	r3, [r7, #12]
24000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
24000e58:	68bb      	ldr	r3, [r7, #8]
24000e5a:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
24000e5c:	68ba      	ldr	r2, [r7, #8]
24000e5e:	687b      	ldr	r3, [r7, #4]
24000e60:	4413      	add	r3, r2
24000e62:	617b      	str	r3, [r7, #20]
  bool ok = true;
24000e64:	2301      	movs	r3, #1
24000e66:	77fb      	strb	r3, [r7, #31]
  MG_ARM_DISABLE_IRQ();
24000e68:	b672      	cpsid	i
  flash_unlock();
24000e6a:	f7ff fe03 	bl	24000a74 <flash_unlock>
  flash_clear_err(bank);
24000e6e:	69b8      	ldr	r0, [r7, #24]
24000e70:	f7ff fe91 	bl	24000b96 <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
24000e74:	69bb      	ldr	r3, [r7, #24]
24000e76:	330c      	adds	r3, #12
24000e78:	461a      	mov	r2, r3
24000e7a:	2302      	movs	r3, #2
24000e7c:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
24000e7e:	69bb      	ldr	r3, [r7, #24]
24000e80:	330c      	adds	r3, #12
24000e82:	681b      	ldr	r3, [r3, #0]
24000e84:	69ba      	ldr	r2, [r7, #24]
24000e86:	320c      	adds	r2, #12
24000e88:	f043 0320 	orr.w	r3, r3, #32
24000e8c:	6013      	str	r3, [r2, #0]
  while (ok && src < end) {
24000e8e:	e024      	b.n	24000eda <mg_stm32h7_write+0xd6>
    if (flash_page_start(dst) && mg_stm32h7_erase(dst) == false) {
24000e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000e92:	f7ff fe25 	bl	24000ae0 <flash_page_start>
24000e96:	4603      	mov	r3, r0
24000e98:	2b00      	cmp	r3, #0
24000e9a:	d00b      	beq.n	24000eb4 <mg_stm32h7_write+0xb0>
24000e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000e9e:	f7ff fec7 	bl	24000c30 <mg_stm32h7_erase>
24000ea2:	4603      	mov	r3, r0
24000ea4:	f083 0301 	eor.w	r3, r3, #1
24000ea8:	b2db      	uxtb	r3, r3
24000eaa:	2b00      	cmp	r3, #0
24000eac:	d002      	beq.n	24000eb4 <mg_stm32h7_write+0xb0>
      ok = false;
24000eae:	2300      	movs	r3, #0
24000eb0:	77fb      	strb	r3, [r7, #31]
      break;
24000eb2:	e019      	b.n	24000ee8 <mg_stm32h7_write+0xe4>
    *(volatile uint32_t *) dst++ = *src++;
24000eb4:	6a3a      	ldr	r2, [r7, #32]
24000eb6:	1d13      	adds	r3, r2, #4
24000eb8:	623b      	str	r3, [r7, #32]
24000eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24000ebc:	1d19      	adds	r1, r3, #4
24000ebe:	6279      	str	r1, [r7, #36]	@ 0x24
24000ec0:	6812      	ldr	r2, [r2, #0]
24000ec2:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
24000ec4:	69b8      	ldr	r0, [r7, #24]
24000ec6:	f7ff fe53 	bl	24000b70 <flash_wait>
    if (flash_is_err(bank)) ok = false;
24000eca:	69b8      	ldr	r0, [r7, #24]
24000ecc:	f7ff fe3a 	bl	24000b44 <flash_is_err>
24000ed0:	4603      	mov	r3, r0
24000ed2:	2b00      	cmp	r3, #0
24000ed4:	d001      	beq.n	24000eda <mg_stm32h7_write+0xd6>
24000ed6:	2300      	movs	r3, #0
24000ed8:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
24000eda:	7ffb      	ldrb	r3, [r7, #31]
24000edc:	2b00      	cmp	r3, #0
24000ede:	d003      	beq.n	24000ee8 <mg_stm32h7_write+0xe4>
24000ee0:	6a3a      	ldr	r2, [r7, #32]
24000ee2:	697b      	ldr	r3, [r7, #20]
24000ee4:	429a      	cmp	r2, r3
24000ee6:	d3d3      	bcc.n	24000e90 <mg_stm32h7_write+0x8c>
  if (!s_flash_irq_disabled) MG_ARM_ENABLE_IRQ();
24000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (24000f64 <mg_stm32h7_write+0x160>)
24000eea:	781b      	ldrb	r3, [r3, #0]
24000eec:	f083 0301 	eor.w	r3, r3, #1
24000ef0:	b2db      	uxtb	r3, r3
24000ef2:	2b00      	cmp	r3, #0
24000ef4:	d000      	beq.n	24000ef8 <mg_stm32h7_write+0xf4>
24000ef6:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
24000ef8:	4b16      	ldr	r3, [pc, #88]	@ (24000f54 <mg_stm32h7_write+0x150>)
24000efa:	681b      	ldr	r3, [r3, #0]
24000efc:	2b02      	cmp	r3, #2
24000efe:	dd1a      	ble.n	24000f36 <mg_stm32h7_write+0x132>
24000f00:	4b15      	ldr	r3, [pc, #84]	@ (24000f58 <mg_stm32h7_write+0x154>)
24000f02:	f641 527d 	movw	r2, #7549	@ 0x1d7d
24000f06:	4915      	ldr	r1, [pc, #84]	@ (24000f5c <mg_stm32h7_write+0x158>)
24000f08:	2003      	movs	r0, #3
24000f0a:	f000 f861 	bl	24000fd0 <__mg_log_prefix_veneer>
24000f0e:	7ffb      	ldrb	r3, [r7, #31]
24000f10:	2b00      	cmp	r3, #0
24000f12:	d001      	beq.n	24000f18 <mg_stm32h7_write+0x114>
24000f14:	4914      	ldr	r1, [pc, #80]	@ (24000f68 <mg_stm32h7_write+0x164>)
24000f16:	e000      	b.n	24000f1a <mg_stm32h7_write+0x116>
24000f18:	4914      	ldr	r1, [pc, #80]	@ (24000f6c <mg_stm32h7_write+0x168>)
24000f1a:	69bb      	ldr	r3, [r7, #24]
24000f1c:	330c      	adds	r3, #12
24000f1e:	681b      	ldr	r3, [r3, #0]
24000f20:	69ba      	ldr	r2, [r7, #24]
24000f22:	3210      	adds	r2, #16
24000f24:	6812      	ldr	r2, [r2, #0]
24000f26:	9201      	str	r2, [sp, #4]
24000f28:	9300      	str	r3, [sp, #0]
24000f2a:	460b      	mov	r3, r1
24000f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24000f2e:	6879      	ldr	r1, [r7, #4]
24000f30:	480f      	ldr	r0, [pc, #60]	@ (24000f70 <mg_stm32h7_write+0x16c>)
24000f32:	f000 f849 	bl	24000fc8 <__mg_log_veneer>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
24000f36:	69bb      	ldr	r3, [r7, #24]
24000f38:	330c      	adds	r3, #12
24000f3a:	681b      	ldr	r3, [r3, #0]
24000f3c:	69ba      	ldr	r2, [r7, #24]
24000f3e:	320c      	adds	r2, #12
24000f40:	f023 0302 	bic.w	r3, r3, #2
24000f44:	6013      	str	r3, [r2, #0]
  return ok;
24000f46:	7ffb      	ldrb	r3, [r7, #31]
}
24000f48:	4618      	mov	r0, r3
24000f4a:	3728      	adds	r7, #40	@ 0x28
24000f4c:	46bd      	mov	sp, r7
24000f4e:	bd80      	pop	{r7, pc}
24000f50:	2400026c 	.word	0x2400026c
24000f54:	2400025c 	.word	0x2400025c
24000f58:	080312f8 	.word	0x080312f8
24000f5c:	0802d330 	.word	0x0802d330
24000f60:	0802ebf8 	.word	0x0802ebf8
24000f64:	24019d64 	.word	0x24019d64
24000f68:	0802d5b0 	.word	0x0802d5b0
24000f6c:	0802d5b4 	.word	0x0802d5b4
24000f70:	0802ec14 	.word	0x0802ec14

24000f74 <single_bank_swap>:
MG_IRAM static void single_bank_swap(char *p1, char *p2, size_t s, size_t ss) {
24000f74:	b580      	push	{r7, lr}
24000f76:	b086      	sub	sp, #24
24000f78:	af00      	add	r7, sp, #0
24000f7a:	60f8      	str	r0, [r7, #12]
24000f7c:	60b9      	str	r1, [r7, #8]
24000f7e:	607a      	str	r2, [r7, #4]
24000f80:	603b      	str	r3, [r7, #0]
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000f82:	2300      	movs	r3, #0
24000f84:	617b      	str	r3, [r7, #20]
24000f86:	e00d      	b.n	24000fa4 <single_bank_swap+0x30>
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
24000f88:	68fa      	ldr	r2, [r7, #12]
24000f8a:	697b      	ldr	r3, [r7, #20]
24000f8c:	18d0      	adds	r0, r2, r3
24000f8e:	68ba      	ldr	r2, [r7, #8]
24000f90:	697b      	ldr	r3, [r7, #20]
24000f92:	4413      	add	r3, r2
24000f94:	683a      	ldr	r2, [r7, #0]
24000f96:	4619      	mov	r1, r3
24000f98:	f7ff ff34 	bl	24000e04 <mg_stm32h7_write>
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000f9c:	697a      	ldr	r2, [r7, #20]
24000f9e:	683b      	ldr	r3, [r7, #0]
24000fa0:	4413      	add	r3, r2
24000fa2:	617b      	str	r3, [r7, #20]
24000fa4:	697a      	ldr	r2, [r7, #20]
24000fa6:	687b      	ldr	r3, [r7, #4]
24000fa8:	429a      	cmp	r2, r3
24000faa:	d3ed      	bcc.n	24000f88 <single_bank_swap+0x14>
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
24000fac:	4b03      	ldr	r3, [pc, #12]	@ (24000fbc <single_bank_swap+0x48>)
24000fae:	4a04      	ldr	r2, [pc, #16]	@ (24000fc0 <single_bank_swap+0x4c>)
24000fb0:	601a      	str	r2, [r3, #0]
}
24000fb2:	bf00      	nop
24000fb4:	3718      	adds	r7, #24
24000fb6:	46bd      	mov	sp, r7
24000fb8:	bd80      	pop	{r7, pc}
24000fba:	bf00      	nop
24000fbc:	e000ed0c 	.word	0xe000ed0c
24000fc0:	05fa0004 	.word	0x05fa0004
24000fc4:	00000000 	.word	0x00000000

24000fc8 <__mg_log_veneer>:
24000fc8:	f85f f000 	ldr.w	pc, [pc]	@ 24000fcc <__mg_log_veneer+0x4>
24000fcc:	0800f7e5 	.word	0x0800f7e5

24000fd0 <__mg_log_prefix_veneer>:
24000fd0:	f85f f000 	ldr.w	pc, [pc]	@ 24000fd4 <__mg_log_prefix_veneer+0x4>
24000fd4:	0800f745 	.word	0x0800f745
